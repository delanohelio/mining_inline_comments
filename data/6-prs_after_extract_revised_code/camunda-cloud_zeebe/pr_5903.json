{"pr_number": 5903, "pr_title": "Endpoint to pause and resume exporting", "pr_createdAt": "2020-11-23T14:13:31Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5903", "timeline": [{"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "url": "https://github.com/camunda-cloud/zeebe/commit/b926a85a4901cc4a8755579f617e2ca5e160f2dc", "message": "feat(broker): expose pause exporting via admin api", "committedDate": "2020-11-23T14:15:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDY2NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530244664", "bodyText": "Maybe we can move this out to a method like shouldExport. It gets a bit out of hand", "author": "Zelldon", "createdAt": "2020-11-25T09:56:56Z", "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java", "diffHunk": "@@ -235,7 +256,7 @@ private void skipRecord(final LoggedEvent currentEvent) {\n   }\n \n   private void readNextEvent() {\n-    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase) {\n+    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase && !isPaused) {", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java b/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java\nindex 8f1f170d9..edd2cd6d3 100755\n--- a/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java\n+++ b/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java\n\n@@ -256,7 +272,7 @@ public final class ExporterDirector extends Actor {\n   }\n \n   private void readNextEvent() {\n-    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase && !isPaused) {\n+    if (shouldExport()) {\n       final LoggedEvent currentEvent = logStreamReader.next();\n       if (eventFilter == null || eventFilter.applies(currentEvent)) {\n         inExportingPhase = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530246849", "bodyText": "We probably also want to have one endpoint to pause everything right?", "author": "Zelldon", "createdAt": "2020-11-25T10:00:00Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "diffHunk": "@@ -17,6 +17,12 @@\n   /** Request a partition to resume its StreamProcessor */\n   void resumeStreamProcessing();\n \n+  /** Request a partition to pause exporting */\n+  void pauseExporting();\n+\n+  /** Request a partition to resume exporting */\n+  void resumeExporting();\n+", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjE3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530916176", "bodyText": "Do we want that? prepareUpgrade does pause all.", "author": "deepthidevaki", "createdAt": "2020-11-26T10:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTYyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530925621", "bodyText": "Yeah might be enough thanks", "author": "Zelldon", "createdAt": "2020-11-26T10:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530401680", "bodyText": "So we have a optional in a future? sounds like duplicated complexity \ud83e\udd14", "author": "Zelldon", "createdAt": "2020-11-25T14:11:20Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxMzkyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530913927", "bodyText": "It's optional because followers doesn't have streamProcessor.", "author": "deepthidevaki", "createdAt": "2020-11-26T10:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAyNDY4NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531024684", "bodyText": "but then it can be just null not ? \ud83d\ude05 Idk just have the feeling it is unnecessary", "author": "Zelldon", "createdAt": "2020-11-26T13:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMDU2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531030567", "bodyText": "It can be null. Then instead of\nif(streamProcessor.isPresent() && exporterDirector.isPresent())\nWe would write if(streamProcessor != null && exporterDirector != null) . How is that better? Also I thought we want to use Optional in such cases.", "author": "deepthidevaki", "createdAt": "2020-11-26T13:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNDIwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531034203", "bodyText": "Yeah to use methods like .orElse or ifPresentThen etc but just to check whether is present I see no point in creating two separate objects for it. Not a fan of it.", "author": "Zelldon", "createdAt": "2020-11-26T13:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NDg0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531044843", "bodyText": "You can keep it but it just wanted to mention this.", "author": "Zelldon", "createdAt": "2020-11-26T13:55:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 0ed9a082a..ede0a325b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -96,24 +96,24 @@ public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),\n+        error -> {\n+          if (error != null) {\n+            partitionStatus.completeExceptionally(error);\n+            return;\n+          }\n+          final var streamProcessor = streamProcessorFuture.join();\n+          final var exporterDirector = exporterDirectorFuture.join();\n+          if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n+            getLeaderPartitionStatus(\n+                partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n+          } else {\n+            getFollowerPartitionStatus(partition, partitionStatus);\n+          }\n+        });\n     return partitionStatus;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530403216", "bodyText": "Normally it is wise to use enums for that. This would be more future proven. What are you doing if we add a new case like, stopped, canceled, interrupted.", "author": "Zelldon", "createdAt": "2020-11-25T14:13:40Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNTI3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530405276", "bodyText": "Would also be consistent with the processing phase, were we already have that.", "author": "Zelldon", "createdAt": "2020-11-25T14:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 0ed9a082a..ede0a325b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -129,50 +129,41 @@ public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService\n       final StreamProcessor streamProcessor,\n       final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n-    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n-    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+\n+    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n+    final var currentPhaseFuture = streamProcessor.getCurrentPhase();\n+    final var exporterPhaseFuture = exporterDirector.getPhase();\n     final var exporterPosition = exporterDirector.getState().getLowestPosition();\n     final var snapshotId = getSnapshotId(partition);\n     final var processedPositionInSnapshot =\n         snapshotId\n-            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .flatMap(FileBasedSnapshotMetadata::ofFileName)\n             .map(FileBasedSnapshotMetadata::getProcessedPosition)\n             .orElse(null);\n \n-    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var processedPosition = positionFuture.join();\n-              final var processorPhase = currentPhaseFuture.join();\n-              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n-              final var status =\n-                  PartitionStatus.ofLeader(\n-                      processedPosition,\n-                      snapshotId.orElse(null),\n-                      processedPositionInSnapshot,\n-                      processorPhase,\n-                      exporterPhase,\n-                      exporterPosition);\n-              partitionStatus.complete(status);\n-            });\n-  }\n-\n-  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n-    final CompletableFuture<T> future = new CompletableFuture<>();\n-    actorFuture.onComplete(\n-        (result, error) -> {\n-          if (error == null) {\n-            future.complete(result);\n-          } else {\n-            future.completeExceptionally(error);\n+    actor.runOnCompletion(\n+        List.of(\n+            (ActorFuture) positionFuture,\n+            (ActorFuture) currentPhaseFuture,\n+            (ActorFuture) exporterPhaseFuture),\n+        error -> {\n+          if (error != null) {\n+            partitionStatus.completeExceptionally(error);\n+            return;\n           }\n+          final var processedPosition = positionFuture.join();\n+          final var processorPhase = currentPhaseFuture.join();\n+          final var exporterPhase = exporterPhaseFuture.join();\n+          final var status =\n+              PartitionStatus.ofLeader(\n+                  processedPosition,\n+                  snapshotId.orElse(null),\n+                  processedPositionInSnapshot,\n+                  processorPhase,\n+                  exporterPhase,\n+                  exporterPosition);\n+          partitionStatus.complete(status);\n         });\n-    return future;\n   }\n \n   private Optional<String> getSnapshotId(final ZeebePartition partition) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNDY0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530404640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n          \n          \n            \n                        .flatMap(FileBasedSnapshotMetadata::ofFileName)", "author": "Zelldon", "createdAt": "2020-11-25T14:15:43Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 0ed9a082a..ede0a325b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -129,50 +129,41 @@ public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService\n       final StreamProcessor streamProcessor,\n       final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n-    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n-    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+\n+    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n+    final var currentPhaseFuture = streamProcessor.getCurrentPhase();\n+    final var exporterPhaseFuture = exporterDirector.getPhase();\n     final var exporterPosition = exporterDirector.getState().getLowestPosition();\n     final var snapshotId = getSnapshotId(partition);\n     final var processedPositionInSnapshot =\n         snapshotId\n-            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .flatMap(FileBasedSnapshotMetadata::ofFileName)\n             .map(FileBasedSnapshotMetadata::getProcessedPosition)\n             .orElse(null);\n \n-    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var processedPosition = positionFuture.join();\n-              final var processorPhase = currentPhaseFuture.join();\n-              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n-              final var status =\n-                  PartitionStatus.ofLeader(\n-                      processedPosition,\n-                      snapshotId.orElse(null),\n-                      processedPositionInSnapshot,\n-                      processorPhase,\n-                      exporterPhase,\n-                      exporterPosition);\n-              partitionStatus.complete(status);\n-            });\n-  }\n-\n-  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n-    final CompletableFuture<T> future = new CompletableFuture<>();\n-    actorFuture.onComplete(\n-        (result, error) -> {\n-          if (error == null) {\n-            future.complete(result);\n-          } else {\n-            future.completeExceptionally(error);\n+    actor.runOnCompletion(\n+        List.of(\n+            (ActorFuture) positionFuture,\n+            (ActorFuture) currentPhaseFuture,\n+            (ActorFuture) exporterPhaseFuture),\n+        error -> {\n+          if (error != null) {\n+            partitionStatus.completeExceptionally(error);\n+            return;\n           }\n+          final var processedPosition = positionFuture.join();\n+          final var processorPhase = currentPhaseFuture.join();\n+          final var exporterPhase = exporterPhaseFuture.join();\n+          final var status =\n+              PartitionStatus.ofLeader(\n+                  processedPosition,\n+                  snapshotId.orElse(null),\n+                  processedPositionInSnapshot,\n+                  processorPhase,\n+                  exporterPhase,\n+                  exporterPosition);\n+          partitionStatus.complete(status);\n         });\n-    return future;\n   }\n \n   private Optional<String> getSnapshotId(final ZeebePartition partition) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530407671", "bodyText": "I could swear that we had this functionality before somewhere :D", "author": "Zelldon", "createdAt": "2020-11-25T14:19:46Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwODUzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530408531", "bodyText": "But why we need that actually?", "author": "Zelldon", "createdAt": "2020-11-25T14:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwOTE2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530409167", "bodyText": "There is an actor.runOnCompletion(Collection<ActorFuture> futures);", "author": "Zelldon", "createdAt": "2020-11-25T14:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNTQ2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530915469", "bodyText": "I don't know why when I tried to use actor.runOnCompletion(Collection<ActorFuture> futures) it did not work. It complained about types. But now I could make it work. I have now changed it to use actor futures. But honestly I don't like ActorFuture \ud83d\ude09", "author": "deepthidevaki", "createdAt": "2020-11-26T10:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTM3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530925379", "bodyText": "But honestly I don't like ActorFuture wink\n\nThis is a different topic \ud83d\ude06", "author": "Zelldon", "createdAt": "2020-11-26T10:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 0ed9a082a..ede0a325b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -129,50 +129,41 @@ public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService\n       final StreamProcessor streamProcessor,\n       final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n-    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n-    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+\n+    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n+    final var currentPhaseFuture = streamProcessor.getCurrentPhase();\n+    final var exporterPhaseFuture = exporterDirector.getPhase();\n     final var exporterPosition = exporterDirector.getState().getLowestPosition();\n     final var snapshotId = getSnapshotId(partition);\n     final var processedPositionInSnapshot =\n         snapshotId\n-            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .flatMap(FileBasedSnapshotMetadata::ofFileName)\n             .map(FileBasedSnapshotMetadata::getProcessedPosition)\n             .orElse(null);\n \n-    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var processedPosition = positionFuture.join();\n-              final var processorPhase = currentPhaseFuture.join();\n-              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n-              final var status =\n-                  PartitionStatus.ofLeader(\n-                      processedPosition,\n-                      snapshotId.orElse(null),\n-                      processedPositionInSnapshot,\n-                      processorPhase,\n-                      exporterPhase,\n-                      exporterPosition);\n-              partitionStatus.complete(status);\n-            });\n-  }\n-\n-  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n-    final CompletableFuture<T> future = new CompletableFuture<>();\n-    actorFuture.onComplete(\n-        (result, error) -> {\n-          if (error == null) {\n-            future.complete(result);\n-          } else {\n-            future.completeExceptionally(error);\n+    actor.runOnCompletion(\n+        List.of(\n+            (ActorFuture) positionFuture,\n+            (ActorFuture) currentPhaseFuture,\n+            (ActorFuture) exporterPhaseFuture),\n+        error -> {\n+          if (error != null) {\n+            partitionStatus.completeExceptionally(error);\n+            return;\n           }\n+          final var processedPosition = positionFuture.join();\n+          final var processorPhase = currentPhaseFuture.join();\n+          final var exporterPhase = exporterPhaseFuture.join();\n+          final var status =\n+              PartitionStatus.ofLeader(\n+                  processedPosition,\n+                  snapshotId.orElse(null),\n+                  processedPositionInSnapshot,\n+                  processorPhase,\n+                  exporterPhase,\n+                  exporterPosition);\n+          partitionStatus.complete(status);\n         });\n-    return future;\n   }\n \n   private Optional<String> getSnapshotId(final ZeebePartition partition) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDY3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530414678", "bodyText": "This is exact duplicates. Could we make it parameterized to reuse it?", "author": "Zelldon", "createdAt": "2020-11-25T14:29:30Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -64,4 +67,37 @@ private void initProcessingStatus() {\n   public boolean shouldProcess() {\n     return isDiskSpaceAvailable() && !isProcessingPaused();\n   }\n+\n+  public boolean isExportingPaused() {\n+    return isExportingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void pauseExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    persistedExporterPauseState.createNewFile();\n+    if (persistedExporterPauseState.exists()) {\n+      isExportingPaused = true;\n+    }\n+  }\n+\n+  public void resumeExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    Files.deleteIfExists(persistedExporterPauseState.toPath());\n+    if (!persistedExporterPauseState.exists()) {\n+      isExportingPaused = false;\n+    }\n+  }\n+\n+  private File getPersistedExporterPauseState() {\n+    return raftPartition\n+        .dataDirectory()\n+        .toPath()\n+        .resolve(PERSISTED_EXPORTER_PAUSE_STATE_FILENAME)\n+        .toFile();\n+  }", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java\nindex f520e9eb2..3f342115b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java\n\n@@ -49,19 +49,19 @@ public class PartitionProcessingState {\n \n   @SuppressWarnings({\"squid:S899\"})\n   public void pauseProcessing() throws IOException {\n-    final File persistedPauseState = getPersistedPauseState();\n+    final File persistedPauseState = getPersistedPauseState(PERSISTED_PAUSE_STATE_FILENAME);\n     persistedPauseState.createNewFile();\n     if (persistedPauseState.exists()) {\n       isProcessingPaused = true;\n     }\n   }\n \n-  private File getPersistedPauseState() {\n-    return raftPartition.dataDirectory().toPath().resolve(PERSISTED_PAUSE_STATE_FILENAME).toFile();\n+  private File getPersistedPauseState(final String filename) {\n+    return raftPartition.dataDirectory().toPath().resolve(filename).toFile();\n   }\n \n   private void initProcessingStatus() {\n-    isProcessingPaused = getPersistedPauseState().exists();\n+    isProcessingPaused = getPersistedPauseState(PERSISTED_PAUSE_STATE_FILENAME).exists();\n   }\n \n   public boolean shouldProcess() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530417882", "bodyText": "Not sure whether I get this.\nWe first pause the exporting (which actually internally just persist the file), then we check whether there is a exporter and whether we should not export (which should always be the case i guess?!).\nMaybe it makes sense to rename the method so it is more clear what actually happens. We persist the pausing state and remove the check. I see no value in it?", "author": "Zelldon", "createdAt": "2020-11-25T14:34:05Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyMzEyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530923128", "bodyText": "The check is added as a safeguard incase persisting of the state was not successful. Do you think that is unnecessary?", "author": "deepthidevaki", "createdAt": "2020-11-26T10:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNjQzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531036431", "bodyText": "So you actually want to check whether the persisting succeeded so maybe you check the return value of the method which is called persistPauseState", "author": "Zelldon", "createdAt": "2020-11-26T13:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNjU2Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531036566", "bodyText": "Then it is I think more clear. Do you agree?", "author": "Zelldon", "createdAt": "2020-11-26T13:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 536ac3918..da896b39f 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -393,9 +401,9 @@ public final class ZeebePartition extends Actor\n     actor.call(\n         () -> {\n           try {\n-            context.pauseExporting();\n+            final var pauseStatePersisted = context.pauseExporting();\n \n-            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+            if (context.getExporterDirector() != null && pauseStatePersisted) {\n               context.getExporterDirector().pauseExporting().onComplete(completed);\n             } else {\n               completed.complete(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419026", "bodyText": "Is this maybe problematic? That we might have an race condition where we can export maybe one record because we are so fast?", "author": "Zelldon", "createdAt": "2020-11-25T14:35:30Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTMyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419320", "bodyText": "Might make sense to give the state as parameter of the startAsync?", "author": "Zelldon", "createdAt": "2020-11-25T14:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNDc1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530924754", "bodyText": "That's right. I pass it as an argument to the constructor now. This will be a problem in StreamProcessor as well, because it also follows the same pattern.", "author": "deepthidevaki", "createdAt": "2020-11-26T10:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNjcwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530926703", "bodyText": "Do you want to create a follow up issue for that? Or do you want to do it in this pr?", "author": "Zelldon", "createdAt": "2020-11-26T10:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTkzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530931931", "bodyText": "I will create a follow up issue.", "author": "deepthidevaki", "createdAt": "2020-11-26T10:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java\nindex e4afa1c0d..d2f60f080 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java\n\n@@ -32,16 +32,9 @@ public class ExporterDirectorPartitionStep implements PartitionStep {\n             .zeebeDb(context.getZeebeDb())\n             .descriptors(exporterDescriptors);\n \n-    final ExporterDirector director = new ExporterDirector(exporterCtx);\n+    final ExporterDirector director = new ExporterDirector(exporterCtx, !context.shouldExport());\n     context.setExporterDirector(director);\n-    final var started = director.startAsync(context.getScheduler());\n-    started.onComplete(\n-        (nothing, error) -> {\n-          if (error == null && !context.shouldExport()) {\n-            director.pauseExporting();\n-          }\n-        });\n-    return started;\n+    return director.startAsync(context.getScheduler());\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTY5NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                clientRule.createSingleJob(\"test\");", "author": "Zelldon", "createdAt": "2020-11-25T14:36:21Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\nindex 759ed3c9c..f787dfa75 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\n\n@@ -80,28 +82,39 @@ public class BrokerAdminServiceTest {\n \n   @Test\n   public void shouldPauseExporterWhenRequested() {\n-    // given\n-    clientRule.createSingleJob(\"test\");\n-\n     // when\n     leaderAdminService.pauseExporting();\n \n     // then\n-    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+    assertExporterPhase(leaderAdminService, ExporterPhase.PAUSED);\n   }\n \n   @Test\n   public void shouldResumeExportingWhenRequested() {\n     // given\n-    clientRule.createSingleJob(\"test\");\n+    leaderAdminService.pauseExporting();\n+    assertExporterPhase(leaderAdminService, ExporterPhase.PAUSED);\n \n     // when\n-    leaderAdminService.pauseExporting();\n-    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+    final String messageName = \"test\";\n+    clientRule\n+        .getClient()\n+        .newPublishMessageCommand()\n+        .messageName(messageName)\n+        .correlationKey(\"test-key\")\n+        .send()\n+        .join();\n     leaderAdminService.resumeExporting();\n \n     // then\n-    assertExporterPhase(leaderAdminService, \"EXPORTING\");\n+    assertExporterPhase(leaderAdminService, ExporterPhase.EXPORTING);\n+    Awaitility.await()\n+        .timeout(Duration.ofSeconds(60))\n+        .until(\n+            () ->\n+                RecordingExporter.messageRecords(MessageIntent.PUBLISHED)\n+                    .withName(messageName)\n+                    .exists());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420036", "bodyText": "what is the matter of this? We never assert whether we have seen this record?", "author": "Zelldon", "createdAt": "2020-11-25T14:36:52Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+\n+    // when\n+    leaderAdminService.pauseExporting();\n+\n+    // then\n+    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+  }\n+\n+  @Test\n+  public void shouldResumeExportingWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "originalCommit": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDM1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420352", "bodyText": "Would be nice to have such a verification", "author": "Zelldon", "createdAt": "2020-11-25T14:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "17758b142230d7316b946f30732e3f9068b4867d", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\nindex 759ed3c9c..f787dfa75 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java\n\n@@ -80,28 +82,39 @@ public class BrokerAdminServiceTest {\n \n   @Test\n   public void shouldPauseExporterWhenRequested() {\n-    // given\n-    clientRule.createSingleJob(\"test\");\n-\n     // when\n     leaderAdminService.pauseExporting();\n \n     // then\n-    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+    assertExporterPhase(leaderAdminService, ExporterPhase.PAUSED);\n   }\n \n   @Test\n   public void shouldResumeExportingWhenRequested() {\n     // given\n-    clientRule.createSingleJob(\"test\");\n+    leaderAdminService.pauseExporting();\n+    assertExporterPhase(leaderAdminService, ExporterPhase.PAUSED);\n \n     // when\n-    leaderAdminService.pauseExporting();\n-    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+    final String messageName = \"test\";\n+    clientRule\n+        .getClient()\n+        .newPublishMessageCommand()\n+        .messageName(messageName)\n+        .correlationKey(\"test-key\")\n+        .send()\n+        .join();\n     leaderAdminService.resumeExporting();\n \n     // then\n-    assertExporterPhase(leaderAdminService, \"EXPORTING\");\n+    assertExporterPhase(leaderAdminService, ExporterPhase.EXPORTING);\n+    Awaitility.await()\n+        .timeout(Duration.ofSeconds(60))\n+        .until(\n+            () ->\n+                RecordingExporter.messageRecords(MessageIntent.PUBLISHED)\n+                    .withName(messageName)\n+                    .exists());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531046333", "bodyText": "These cast are not necessary or?", "author": "Zelldon", "createdAt": "2020-11-26T13:57:44Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "originalCommit": "e9f0eed8c01a38e11a74d8132e045016ec50c435", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTYwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531049609", "bodyText": "Yes. They are necessary.", "author": "deepthidevaki", "createdAt": "2020-11-26T14:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTkwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531049908", "bodyText": "why is that ? \ud83e\udd14", "author": "Zelldon", "createdAt": "2020-11-26T14:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MTAwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531051006", "bodyText": "ah I see because Optional<Exporter> and Optional<StreamProcessor>", "author": "Zelldon", "createdAt": "2020-11-26T14:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MTkzNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531051935", "bodyText": "Without it I get following error\nRequired type:\nCollection\n<ActorFuture<T>>\nProvided:\nList\n<ActorFuture<? extends Optional<? extends Actor>>>\nreason: Incompatible equality constraint: Optional<ExporterDirector> and Optional<StreamProcessor>", "author": "deepthidevaki", "createdAt": "2020-11-26T14:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "17758b142230d7316b946f30732e3f9068b4867d", "url": "https://github.com/camunda-cloud/zeebe/commit/17758b142230d7316b946f30732e3f9068b4867d", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting", "committedDate": "2020-11-27T08:21:41Z", "type": "forcePushed"}, {"oid": "8e0b1e5bd906816b675e8882339c97d091348c53", "url": "https://github.com/camunda-cloud/zeebe/commit/8e0b1e5bd906816b675e8882339c97d091348c53", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting", "committedDate": "2020-11-27T10:08:24Z", "type": "forcePushed"}, {"oid": "37217e0bda64983f539372d40ede0d1184ce0692", "url": "https://github.com/camunda-cloud/zeebe/commit/37217e0bda64983f539372d40ede0d1184ce0692", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting", "committedDate": "2020-11-27T10:26:45Z", "type": "forcePushed"}, {"oid": "69df66a6971f0eb65b305dba391484001d4ae9f2", "url": "https://github.com/camunda-cloud/zeebe/commit/69df66a6971f0eb65b305dba391484001d4ae9f2", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting", "committedDate": "2020-11-27T13:57:14Z", "type": "commit"}, {"oid": "69df66a6971f0eb65b305dba391484001d4ae9f2", "url": "https://github.com/camunda-cloud/zeebe/commit/69df66a6971f0eb65b305dba391484001d4ae9f2", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting", "committedDate": "2020-11-27T13:57:14Z", "type": "forcePushed"}]}