{"pr_number": 4204, "pr_title": "feat(broker): FEEL expressions for message names", "pr_createdAt": "2020-04-01T10:18:03Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4204", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjI0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402732249", "bodyText": "What happens if the message name expression evaluation fails?\nIf an incident is created then no other action should be applied to the workflow instance (e.g. don't open other subscriptions, don't go to ELEMENT_ACTIVATED state)", "author": "saig0", "createdAt": "2020-04-03T04:36:45Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -150,35 +151,42 @@ private void subscribeToMessageEvent(\n     final long workflowInstanceKey = context.getValue().getWorkflowInstanceKey();\n     final DirectBuffer bpmnProcessId = cloneBuffer(context.getValue().getBpmnProcessIdBuffer());\n     final long elementInstanceKey = context.getKey();\n-    final DirectBuffer messageName = cloneBuffer(message.getMessageName());\n+    final Expression messageNameExpression = message.getMessageNameExpression();\n+    final Optional<DirectBuffer> optMessageNameSharedBuffer =\n+        expressionProcessor.evaluateStringExpression(messageNameExpression, context);\n+\n     final DirectBuffer correlationKey = extractedKey;\n     final boolean closeOnCorrelate = handler.shouldCloseMessageSubscriptionOnCorrelate();\n     final int subscriptionPartitionId =\n         SubscriptionUtil.getSubscriptionPartitionId(correlationKey, partitionsCount);\n \n-    subscription.setSubscriptionPartitionId(subscriptionPartitionId);\n-    subscription.setMessageName(messageName);\n-    subscription.setElementInstanceKey(elementInstanceKey);\n-    subscription.setCommandSentTime(ActorClock.currentTimeMillis());\n-    subscription.setWorkflowInstanceKey(workflowInstanceKey);\n-    subscription.setBpmnProcessId(bpmnProcessId);\n-    subscription.setCorrelationKey(correlationKey);\n-    subscription.setTargetElementId(handler.getId());\n-    subscription.setCloseOnCorrelate(closeOnCorrelate);\n-    state.getWorkflowInstanceSubscriptionState().put(subscription);\n-\n-    context\n-        .getSideEffect()\n-        .add(\n-            () ->\n-                sendOpenMessageSubscription(\n-                    subscriptionPartitionId,\n-                    workflowInstanceKey,\n-                    elementInstanceKey,\n-                    bpmnProcessId,\n-                    messageName,\n-                    correlationKey,\n-                    closeOnCorrelate));\n+    optMessageNameSharedBuffer.ifPresent(\n+        messageNameSharedBuffer -> {\n+          final DirectBuffer messageNameBuffer = BufferUtil.cloneBuffer(messageNameSharedBuffer);", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NTc1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r404295754", "bodyText": "I don't get it.\nWhich line is opening another subscription? Which line goes to ELEMENT_ACTIVATED state?\nMy assumption was that the lines above have no side effects, and the only lines with side effects are wrapped in the lambda. Which only executes when the evaluation succeeded.\nWhat am I missing?", "author": "pihme", "createdAt": "2020-04-06T18:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MjYyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r404952628", "bodyText": "Maybe I've figured out what you mean. Please check again.", "author": "pihme", "createdAt": "2020-04-07T16:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\nindex 2234fcd80..8c787134a 100755\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n\n@@ -145,48 +153,41 @@ public final class CatchEventBehavior {\n   private void subscribeToMessageEvent(\n       final BpmnStepContext<?> context,\n       final ExecutableCatchEvent handler,\n-      final DirectBuffer extractedKey) {\n-    final ExecutableMessage message = handler.getMessage();\n-\n+      final DirectBuffer extractedKey,\n+      final DirectBuffer extractedMessageName) {\n     final long workflowInstanceKey = context.getValue().getWorkflowInstanceKey();\n     final DirectBuffer bpmnProcessId = cloneBuffer(context.getValue().getBpmnProcessIdBuffer());\n     final long elementInstanceKey = context.getKey();\n-    final Expression messageNameExpression = message.getMessageNameExpression();\n-    final Optional<DirectBuffer> optMessageNameSharedBuffer =\n-        expressionProcessor.evaluateStringExpression(messageNameExpression, context);\n \n     final DirectBuffer correlationKey = extractedKey;\n+    final DirectBuffer messageName = extractedMessageName;\n     final boolean closeOnCorrelate = handler.shouldCloseMessageSubscriptionOnCorrelate();\n     final int subscriptionPartitionId =\n         SubscriptionUtil.getSubscriptionPartitionId(correlationKey, partitionsCount);\n \n-    optMessageNameSharedBuffer.ifPresent(\n-        messageNameSharedBuffer -> {\n-          final DirectBuffer messageNameBuffer = BufferUtil.cloneBuffer(messageNameSharedBuffer);\n-          subscription.setSubscriptionPartitionId(subscriptionPartitionId);\n-          subscription.setMessageName(messageNameBuffer);\n-          subscription.setElementInstanceKey(elementInstanceKey);\n-          subscription.setCommandSentTime(ActorClock.currentTimeMillis());\n-          subscription.setWorkflowInstanceKey(workflowInstanceKey);\n-          subscription.setBpmnProcessId(bpmnProcessId);\n-          subscription.setCorrelationKey(correlationKey);\n-          subscription.setTargetElementId(handler.getId());\n-          subscription.setCloseOnCorrelate(closeOnCorrelate);\n-          state.getWorkflowInstanceSubscriptionState().put(subscription);\n-\n-          context\n-              .getSideEffect()\n-              .add(\n-                  () ->\n-                      sendOpenMessageSubscription(\n-                          subscriptionPartitionId,\n-                          workflowInstanceKey,\n-                          elementInstanceKey,\n-                          bpmnProcessId,\n-                          messageNameBuffer,\n-                          correlationKey,\n-                          closeOnCorrelate));\n-        });\n+    subscription.setSubscriptionPartitionId(subscriptionPartitionId);\n+    subscription.setMessageName(messageName);\n+    subscription.setElementInstanceKey(elementInstanceKey);\n+    subscription.setCommandSentTime(ActorClock.currentTimeMillis());\n+    subscription.setWorkflowInstanceKey(workflowInstanceKey);\n+    subscription.setBpmnProcessId(bpmnProcessId);\n+    subscription.setCorrelationKey(correlationKey);\n+    subscription.setTargetElementId(handler.getId());\n+    subscription.setCloseOnCorrelate(closeOnCorrelate);\n+    state.getWorkflowInstanceSubscriptionState().put(subscription);\n+\n+    context\n+        .getSideEffect()\n+        .add(\n+            () ->\n+                sendOpenMessageSubscription(\n+                    subscriptionPartitionId,\n+                    workflowInstanceKey,\n+                    elementInstanceKey,\n+                    bpmnProcessId,\n+                    messageName,\n+                    correlationKey,\n+                    closeOnCorrelate));\n   }\n \n   private void unsubscribeFromMessageEvents(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjY2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402746660", "bodyText": "Using BufferUtil.wrapString():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ExecutableMessage message = startEvent.getMessage();\n          \n          \n            \n                    final Optional<String> optMessageName = message.getMessageName();\n          \n          \n            \n            \n          \n          \n            \n                    optMessageName.ifPresent(\n          \n          \n            \n                        messageName -> {\n          \n          \n            \n                          final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n          \n          \n            \n                          messageNameBuffer.wrap(optMessageName.get().getBytes());\n          \n          \n            \n                    final ExecutableMessage message = startEvent.getMessage();\n          \n          \n            \n            \n          \n          \n            \n                    message\n          \n          \n            \n                        .getMessageName()\n          \n          \n            \n                        .map(BufferUtil::wrapString)\n          \n          \n            \n                        .ifPresent(\n          \n          \n            \n                            messageNameBuffer -> {", "author": "saig0", "createdAt": "2020-04-03T05:38:14Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java", "diffHunk": "@@ -99,13 +102,23 @@ private void openMessageStartEventSubscriptions(\n     // if startEvents contain message events\n     for (final ExecutableCatchEventElement startEvent : startEvents) {\n       if (startEvent.isMessage()) {\n-        subscriptionRecord.reset();\n-        subscriptionRecord\n-            .setMessageName(startEvent.getMessage().getMessageName())\n-            .setWorkflowKey(workflowKey)\n-            .setBpmnProcessId(workflow.getId())\n-            .setStartEventId(startEvent.getId());\n-        streamWriter.appendNewCommand(MessageStartEventSubscriptionIntent.OPEN, subscriptionRecord);\n+        final ExecutableMessage message = startEvent.getMessage();\n+        final Optional<String> optMessageName = message.getMessageName();\n+\n+        optMessageName.ifPresent(\n+            messageName -> {\n+              final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n+              messageNameBuffer.wrap(optMessageName.get().getBytes());", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java\nindex 13d97be9e..82d8279bd 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java\n\n@@ -103,22 +102,21 @@ public final class DeploymentCreatedProcessor implements TypedRecordProcessor<De\n     for (final ExecutableCatchEventElement startEvent : startEvents) {\n       if (startEvent.isMessage()) {\n         final ExecutableMessage message = startEvent.getMessage();\n-        final Optional<String> optMessageName = message.getMessageName();\n \n-        optMessageName.ifPresent(\n-            messageName -> {\n-              final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n-              messageNameBuffer.wrap(optMessageName.get().getBytes());\n-\n-              subscriptionRecord.reset();\n-              subscriptionRecord\n-                  .setMessageName(messageNameBuffer)\n-                  .setWorkflowKey(workflowKey)\n-                  .setBpmnProcessId(workflow.getId())\n-                  .setStartEventId(startEvent.getId());\n-              streamWriter.appendNewCommand(\n-                  MessageStartEventSubscriptionIntent.OPEN, subscriptionRecord);\n-            });\n+        message\n+            .getMessageName()\n+            .map(BufferUtil::wrapString)\n+            .ifPresent(\n+                messageNameBuffer -> {\n+                  subscriptionRecord.reset();\n+                  subscriptionRecord\n+                      .setMessageName(messageNameBuffer)\n+                      .setWorkflowKey(workflowKey)\n+                      .setBpmnProcessId(workflow.getId())\n+                      .setStartEventId(startEvent.getId());\n+                  streamWriter.appendNewCommand(\n+                      MessageStartEventSubscriptionIntent.OPEN, subscriptionRecord);\n+                });\n       }\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzQ0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402753445", "bodyText": "Why do we evaluate every static message name expression in the transformer?", "author": "saig0", "createdAt": "2020-04-03T06:02:22Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/MessageTransformer.java", "diffHunk": "@@ -27,21 +29,36 @@\n   public void transform(final Message element, final TransformContext context) {\n \n     final String id = element.getId();\n-    final ExecutableMessage executableElement = new ExecutableMessage(id);\n+    final ExpressionLanguage expressionLanguage = context.getExpressionLanguage();\n \n+    final ExecutableMessage executableElement = new ExecutableMessage(id);\n     final ExtensionElements extensionElements = element.getExtensionElements();\n \n     if (extensionElements != null) {\n       final ZeebeSubscription subscription =\n           extensionElements.getElementsQuery().filterByType(ZeebeSubscription.class).singleResult();\n       final Expression correlationKeyExpression =\n-          context.getExpressionLanguage().parseExpression(subscription.getCorrelationKey());\n+          expressionLanguage.parseExpression(subscription.getCorrelationKey());\n \n       executableElement.setCorrelationKeyExpression(correlationKeyExpression);\n     }\n \n     if (element.getName() != null) {\n-      executableElement.setMessageName(BufferUtil.wrapString(element.getName()));\n+      final Expression messageNameExpression =\n+          expressionLanguage.parseExpression(element.getName());\n+\n+      executableElement.setMessageNameExpression(messageNameExpression);\n+\n+      if (messageNameExpression.isStatic()) {\n+        final EvaluationResult messageNameResult =\n+            expressionLanguage.evaluateExpression(messageNameExpression, variable -> null);\n+\n+        if (messageNameResult.getType() == ResultType.STRING) {\n+          final String messageName = messageNameResult.getString();\n+          executableElement.setMessageName(messageName);\n+        }\n+      }", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDc0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402824745", "bodyText": "yeah, I thought you would stumble over this. To be honest, I grew less and less fond of it myself.\nI implemented this bit in the very beginning. Back then I wanted to defer the start event handling to a different issue, like you eluded to.\nMy intention was to make sure that all BPMN models that worked before, would still work. And since all BPMN models so far use static value here, they are now evaluated in the transformer.\nThis was before I found StartEventTransformer. I think with StartEventTransofrmer and CatchEventBehavior both evaluating expressions, I might have covered all bases. But since I am unsure these are truly all cases where evaluation needs to take place, I left it in as a conservative coding measure.", "author": "pihme", "createdAt": "2020-04-03T08:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0NzM4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402947380", "bodyText": "\ud83d\udc4d", "author": "saig0", "createdAt": "2020-04-03T11:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzQ0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1Mzg5Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402753893", "bodyText": "Unused code.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                context.getExpressionLanguage();", "author": "saig0", "createdAt": "2020-04-03T06:03:46Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java", "diffHunk": "@@ -31,6 +35,8 @@ public void transform(final StartEvent element, final TransformContext context)\n     final ExecutableStartEvent startEvent =\n         workflow.getElementById(element.getId(), ExecutableStartEvent.class);\n \n+    context.getExpressionLanguage();\n+", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java\nindex 4304f5082..b1be1e157 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java\n\n@@ -35,8 +35,6 @@ public final class StartEventTransformer implements ModelElementTransformer<Star\n     final ExecutableStartEvent startEvent =\n         workflow.getElementById(element.getId(), ExecutableStartEvent.class);\n \n-    context.getExpressionLanguage();\n-\n     startEvent.setInterrupting(element.isInterrupting());\n \n     if (element.getScope() instanceof FlowNode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1Njg0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402756848", "bodyText": "Using BufferUtil.wrapString():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Optional<String> optMessageName = startEvent.getMessage().getMessageName();\n          \n          \n            \n                    final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n          \n          \n            \n                    messageNameBuffer.wrap(optMessageName.get().getBytes());\n          \n          \n            \n                    final DirectBuffer messageNameBuffer = startEvent\n          \n          \n            \n                        .getMessage()\n          \n          \n            \n                        .getMessageName()\n          \n          \n            \n                        .map(BufferUtil::wrapString)\n          \n          \n            \n                        .orElseThrow();", "author": "saig0", "createdAt": "2020-04-03T06:13:23Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java", "diffHunk": "@@ -83,10 +85,12 @@ private Correlation findNextMessageToCorrelate(\n     for (final ExecutableStartEvent startEvent : workflow.getWorkflow().getStartEvents()) {\n       if (startEvent.isMessage()) {\n \n-        final var messageName = startEvent.getMessage().getMessageName();\n+        final Optional<String> optMessageName = startEvent.getMessage().getMessageName();\n+        final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n+        messageNameBuffer.wrap(optMessageName.get().getBytes());", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java\nindex 3cc2af8a1..9079d347f 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java\n\n@@ -85,9 +84,8 @@ public final class BufferedMessageToStartEventCorrelator implements WorkflowPost\n     for (final ExecutableStartEvent startEvent : workflow.getWorkflow().getStartEvents()) {\n       if (startEvent.isMessage()) {\n \n-        final Optional<String> optMessageName = startEvent.getMessage().getMessageName();\n-        final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n-        messageNameBuffer.wrap(optMessageName.get().getBytes());\n+        final DirectBuffer messageNameBuffer =\n+            startEvent.getMessage().getMessageName().map(BufferUtil::wrapString).orElseThrow();\n \n         messageState.visitMessages(\n             messageNameBuffer,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MjgwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402762804", "bodyText": "I think that adding a name to the message is not in the intent of this test case ;)\nThe idea was that a message without a name is invalid. But if the message is not used in the workflow (this can happen using the modeler) then it is ignored.", "author": "saig0", "createdAt": "2020-04-03T06:31:33Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java", "diffHunk": "@@ -157,7 +157,9 @@ public void shouldCreateDeploymentResourceWithMultipleWorkflows() {\n   public void shouldCreateDeploymentIfUnusedInvalidMessage() {\n     // given\n     final BpmnModelInstance process = Bpmn.createExecutableProcess().startEvent().done();\n-    process.getDefinitions().addChildElement(process.newInstance(Message.class));\n+    final Message message = process.newInstance(Message.class);\n+    message.setName(\"message\");\n+    process.getDefinitions().addChildElement(message);", "originalCommit": "09aeb9c54d17503a30db15d98a896a9a0c898182", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwODMxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r404308314", "bodyText": "Well, we are now stricter than that.\n        ZeebeExpressionValidator.verifyThat(Message.class)\n            .hasValidExpression(\n                Message::getName,\n                expression -> expression.isConstantWithResultType(ResultType.STRING).isMandatory())\n\nNot sure if I could figure out whether a message is used or not at this point. Or if the constraint in the runtime expression should be relaxed. Or if we cannot support this use case any longer.", "author": "pihme", "createdAt": "2020-04-06T18:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MjgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTI1MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r404361250", "bodyText": "On second thought, I added that constraint. And I guess I wanted to put it on a start event.\nBut what about ordinary messages? Shouldn't the name be mandatory? I'm a little confused here.", "author": "pihme", "createdAt": "2020-04-06T20:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MjgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "1c597e6269e7648a9256b8b11926cad6fb2e8a09", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java\nindex 9b7d3c9ba..e36a438cf 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java\n\n@@ -157,9 +157,7 @@ public final class CreateDeploymentTest {\n   public void shouldCreateDeploymentIfUnusedInvalidMessage() {\n     // given\n     final BpmnModelInstance process = Bpmn.createExecutableProcess().startEvent().done();\n-    final Message message = process.newInstance(Message.class);\n-    message.setName(\"message\");\n-    process.getDefinitions().addChildElement(message);\n+    process.getDefinitions().addChildElement(process.newInstance(Message.class));\n \n     // when\n     final Record<DeploymentRecordValue> deployment =\n"}}, {"oid": "e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "url": "https://github.com/camunda-cloud/zeebe/commit/e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "message": "feat(broker): FEEL expressions for message names", "committedDate": "2020-04-06T13:25:21Z", "type": "forcePushed"}, {"oid": "8c1d32d09d78b2fe9946dde7a785509e74e812c9", "url": "https://github.com/camunda-cloud/zeebe/commit/8c1d32d09d78b2fe9946dde7a785509e74e812c9", "message": "feat(broker): FEEL expressions for message names", "committedDate": "2020-04-06T14:20:16Z", "type": "forcePushed"}, {"oid": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "url": "https://github.com/camunda-cloud/zeebe/commit/2843a5cccc81f35711ac8a310ae017ea2755e4fc", "message": "chore(broker): Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>", "committedDate": "2020-04-06T18:30:56Z", "type": "forcePushed"}, {"oid": "1c597e6269e7648a9256b8b11926cad6fb2e8a09", "url": "https://github.com/camunda-cloud/zeebe/commit/1c597e6269e7648a9256b8b11926cad6fb2e8a09", "message": "chore(broker): Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>", "committedDate": "2020-04-06T18:41:48Z", "type": "forcePushed"}, {"oid": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "url": "https://github.com/camunda-cloud/zeebe/commit/3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "message": "chore(broker): add validator for start event message names", "committedDate": "2020-04-07T15:56:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mjk0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407872944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n          \n          \n            \n                  singleStartEvent(startEvent -> {}, MESSAGE_NAME_EXPRESSION_1);", "author": "saig0", "createdAt": "2020-04-14T05:19:35Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java", "diffHunk": "@@ -33,19 +33,28 @@\n public final class MessageStartEventTest {\n \n   private static final String MESSAGE_NAME_1 = \"a\";\n+  private static final String MESSAGE_NAME_EXPRESSION_1 = \"=\\\"a\\\"\";\n   private static final String MESSAGE_NAME_2 = \"b\";\n \n   private static final String CORRELATION_KEY_1 = \"key-1\";\n   private static final String CORRELATION_KEY_2 = \"key-2\";\n \n-  private static final BpmnModelInstance SINGLE_START_EVENT = singleStartEvent(startEvent -> {});\n+  private static final BpmnModelInstance SINGLE_START_EVENT_1 =\n+      singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n+  private static final BpmnModelInstance SINGLE_START_EVENT_EXPRESSION_1 =\n+      singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);", "originalCommit": "b4739be9ef211cc6a745e4efc7e9ef5ed1419162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098c41f4ef21862eecedd93ef71f88178f74afe6", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java\nindex 4ac62880b..431e5100c 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java\n\n@@ -42,7 +42,7 @@ public final class MessageStartEventTest {\n   private static final BpmnModelInstance SINGLE_START_EVENT_1 =\n       singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n   private static final BpmnModelInstance SINGLE_START_EVENT_EXPRESSION_1 =\n-      singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n+      singleStartEvent(startEvent -> {}, MESSAGE_NAME_EXPRESSION_1);\n   private static final BpmnModelInstance MULTIPLE_START_EVENTS = multipleStartEvents();\n \n   @Rule public final EngineRule engine = EngineRule.singlePartition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzM2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407873368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<Class, List<ModelElementValidator>> validators;\n          \n          \n            \n              private final Map<Class, List<ModelElementValidator>> validators;", "author": "saig0", "createdAt": "2020-04-14T05:21:17Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java", "diffHunk": "@@ -27,13 +30,13 @@\n \n public class ValidationVisitor extends TypeHierarchyVisitor {\n \n-  private final Map<Class<?>, ModelElementValidator<?>> validators;\n+  private Map<Class, List<ModelElementValidator>> validators;", "originalCommit": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098c41f4ef21862eecedd93ef71f88178f74afe6", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\nindex 6cc65c3ca..723dbdfd1 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\n\n@@ -30,7 +30,7 @@ import org.camunda.bpm.model.xml.validation.ValidationResults;\n \n public class ValidationVisitor extends TypeHierarchyVisitor {\n \n-  private Map<Class, List<ModelElementValidator>> validators;\n+  private final Map<Class, List<ModelElementValidator>> validators;\n \n   private ValidationResultsCollectorImpl resultCollector;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzczMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407873732", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        validator -> {\n          \n          \n            \n                          validator.validate(instance, resultCollector);\n          \n          \n            \n                        });\n          \n          \n            \n                        validator -> validator.validate(instance, resultCollector));", "author": "saig0", "createdAt": "2020-04-14T05:22:35Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java", "diffHunk": "@@ -43,10 +46,12 @@ protected void visit(\n \n     resultCollector.setCurrentElement(instance);\n \n-    final ModelElementValidator validator = validators.get(implementedType.getInstanceType());\n-    if (validator != null) {\n-      validator.validate(instance, resultCollector);\n-    }\n+    validators\n+        .getOrDefault(implementedType.getInstanceType(), Collections.emptyList())\n+        .forEach(\n+            validator -> {\n+              validator.validate(instance, resultCollector);\n+            });", "originalCommit": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098c41f4ef21862eecedd93ef71f88178f74afe6", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\nindex 6cc65c3ca..723dbdfd1 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java\n\n@@ -48,10 +48,7 @@ public class ValidationVisitor extends TypeHierarchyVisitor {\n \n     validators\n         .getOrDefault(implementedType.getInstanceType(), Collections.emptyList())\n-        .forEach(\n-            validator -> {\n-              validator.validate(instance, resultCollector);\n-            });\n+        .forEach(validator -> validator.validate(instance, resultCollector));\n   }\n \n   public void reset() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3OTM4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407879389", "bodyText": "Leftovers?", "author": "saig0", "createdAt": "2020-04-14T05:40:50Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.deployment.model.validation;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.instance.MessageEventDefinition;\n+import io.zeebe.model.bpmn.instance.Process;\n+import io.zeebe.model.bpmn.instance.StartEvent;\n+import org.camunda.bpm.model.xml.validation.ModelElementValidator;\n+import org.camunda.bpm.model.xml.validation.ValidationResultCollector;\n+\n+/**\n+ * This class validates that the message names of messages associated with a start event can be\n+ * evaluated without a context (that is, the expressions do not refer to variables) and evaluate to\n+ * a string\n+ */\n+final class ProcessMessageStartEventMessageNameValidator\n+    implements ModelElementValidator<StartEvent> {\n+\n+  private final ExpressionLanguage expressionLanguage;\n+\n+  ProcessMessageStartEventMessageNameValidator(final ExpressionLanguage expressionLanguage) {\n+    this.expressionLanguage = expressionLanguage;\n+  }\n+\n+  @Override\n+  public Class<StartEvent> getElementType() {\n+    return StartEvent.class;\n+  }\n+\n+  @Override\n+  public void validate(\n+      final StartEvent element, final ValidationResultCollector validationResultCollector) {\n+    if (element.getScope() instanceof Process) {\n+      element.getEventDefinitions().stream()\n+          .filter(MessageEventDefinition.class::isInstance)\n+          .map(MessageEventDefinition.class::cast)\n+          .forEach(definition -> validateMessageName(definition, validationResultCollector));\n+    }\n+    Bpmn.createProcess().startEvent().message(\"test\");", "originalCommit": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "098c41f4ef21862eecedd93ef71f88178f74afe6", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java\nindex d76702c01..704dc26cb 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java\n\n@@ -11,7 +11,6 @@ import io.zeebe.el.EvaluationResult;\n import io.zeebe.el.Expression;\n import io.zeebe.el.ExpressionLanguage;\n import io.zeebe.el.ResultType;\n-import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.instance.MessageEventDefinition;\n import io.zeebe.model.bpmn.instance.Process;\n import io.zeebe.model.bpmn.instance.StartEvent;\n"}}, {"oid": "098c41f4ef21862eecedd93ef71f88178f74afe6", "url": "https://github.com/camunda-cloud/zeebe/commit/098c41f4ef21862eecedd93ef71f88178f74afe6", "message": "chore(broker): incorporate review feedback", "committedDate": "2020-04-14T08:44:00Z", "type": "forcePushed"}, {"oid": "aeb6404dfaa3138a56f3c9494b6fe25210644527", "url": "https://github.com/camunda-cloud/zeebe/commit/aeb6404dfaa3138a56f3c9494b6fe25210644527", "message": "feat(broker): FEEL expressions for message names", "committedDate": "2020-04-14T08:46:55Z", "type": "commit"}, {"oid": "aeb6404dfaa3138a56f3c9494b6fe25210644527", "url": "https://github.com/camunda-cloud/zeebe/commit/aeb6404dfaa3138a56f3c9494b6fe25210644527", "message": "feat(broker): FEEL expressions for message names", "committedDate": "2020-04-14T08:46:55Z", "type": "forcePushed"}]}