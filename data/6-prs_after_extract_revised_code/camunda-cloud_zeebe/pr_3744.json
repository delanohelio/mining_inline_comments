{"pr_number": 3744, "pr_title": "feat(broker): support error end events", "pr_createdAt": "2020-01-28T13:12:06Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3744", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwODU1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3744#discussion_r372908551", "bodyText": "Why is this a Handle instead of Handler?", "author": "MiguelPires", "createdAt": "2020-01-30T11:57:57Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandle.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.handlers.endevent;\n+\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.EventHandle;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableWorkflow;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import org.agrona.DirectBuffer;\n+import org.agrona.concurrent.UnsafeBuffer;\n+\n+public final class ErrorEventHandle {\n+\n+  private static final DirectBuffer NO_VARIABLES = new UnsafeBuffer();\n+\n+  private final CatchEventTuple catchEventTuple = new CatchEventTuple();\n+\n+  private final WorkflowState workflowState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final EventHandle eventHandle;\n+\n+  public ErrorEventHandle(final WorkflowState workflowState, final KeyGenerator keyGenerator) {", "originalCommit": "634bb85cdaa5bd4c080c75c4a684329aeaa3d263", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1f14944694611d1e212d83f7d924b8a4a875aa2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandle.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandler.java\nsimilarity index 97%\nrename from engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandle.java\nrename to engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandler.java\nindex a7bf20864..3211c39d9 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandle.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/endevent/ErrorEventHandler.java\n\n@@ -19,7 +19,7 @@ import io.zeebe.engine.state.instance.ElementInstanceState;\n import org.agrona.DirectBuffer;\n import org.agrona.concurrent.UnsafeBuffer;\n \n-public final class ErrorEventHandle {\n+public final class ErrorEventHandler {\n \n   private static final DirectBuffer NO_VARIABLES = new UnsafeBuffer();\n \n"}}, {"oid": "a1f14944694611d1e212d83f7d924b8a4a875aa2", "url": "https://github.com/camunda-cloud/zeebe/commit/a1f14944694611d1e212d83f7d924b8a4a875aa2", "message": "feat(broker): support error end events\n\n* validate and transform error end events\n* throw an error event when the end event is activated\n* create an incident if the error is not caught\n* resolving the incident will create a new one\n* extract logic to handle the error events", "committedDate": "2020-01-31T05:40:26Z", "type": "commit"}, {"oid": "a1f14944694611d1e212d83f7d924b8a4a875aa2", "url": "https://github.com/camunda-cloud/zeebe/commit/a1f14944694611d1e212d83f7d924b8a4a875aa2", "message": "feat(broker): support error end events\n\n* validate and transform error end events\n* throw an error event when the end event is activated\n* create an incident if the error is not caught\n* resolving the incident will create a new one\n* extract logic to handle the error events", "committedDate": "2020-01-31T05:40:26Z", "type": "forcePushed"}]}