{"pr_number": 4008, "pr_title": "test(engine): fix concurrency issue with subscription handler", "pr_createdAt": "2020-03-09T15:45:41Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4008", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390111366", "bodyText": "Here you create now an executor for each handler? What if we create one for all? So outside of the loop?", "author": "Zelldon", "createdAt": "2020-03-10T06:10:37Z", "path": "engine/src/test/java/io/zeebe/engine/util/EngineRule.java", "diffHunk": "@@ -155,6 +159,13 @@ private void startProcessors() {\n                           (key, partition) -> {},\n                           jobsAvailableCallback)\n                       .withListener(new ProcessingExporterTransistor()));\n+\n+          // sequenialize the commands to avoid concurrency\n+          final var subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();", "originalCommit": "61e2920a2e8868ef5fa770909ddae604acbe67be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjY5OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390112698", "bodyText": "It would be possible too. The handlers may block each other a bit. But I guess that it is not a big difference in your test setup.", "author": "saig0", "createdAt": "2020-03-10T06:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNDg3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390124878", "bodyText": "@Zelldon, I applied your suggestion and use only one thread pool for all subscription handler.", "author": "saig0", "createdAt": "2020-03-10T07:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b45110b88f1f98809436bde017c954bca5efa95e", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/util/EngineRule.java b/engine/src/test/java/io/zeebe/engine/util/EngineRule.java\nindex eb3c126839..a5a9cf8988 100644\n--- a/engine/src/test/java/io/zeebe/engine/util/EngineRule.java\n+++ b/engine/src/test/java/io/zeebe/engine/util/EngineRule.java\n\n@@ -161,7 +165,6 @@ public final class EngineRule extends ExternalResource {\n                       .withListener(new ProcessingExporterTransistor()));\n \n           // sequenialize the commands to avoid concurrency\n-          final var subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();\n           subscriptionHandlers.put(\n               partitionId,\n               new SubscriptionCommandMessageHandler(\n"}}, {"oid": "b45110b88f1f98809436bde017c954bca5efa95e", "url": "https://github.com/camunda-cloud/zeebe/commit/b45110b88f1f98809436bde017c954bca5efa95e", "message": "test(engine): fix concurrency issue with subscription handler\n\n* multiple subscription handlers used the same log stream writer for writing on the same partition\n* avoid concurrent access by delegating the command to the subscription handler of the receiver partition instead of the sender partition\n* use a single thread pool to avoid concurrent access to the same subscription handler", "committedDate": "2020-03-10T07:42:09Z", "type": "commit"}, {"oid": "b45110b88f1f98809436bde017c954bca5efa95e", "url": "https://github.com/camunda-cloud/zeebe/commit/b45110b88f1f98809436bde017c954bca5efa95e", "message": "test(engine): fix concurrency issue with subscription handler\n\n* multiple subscription handlers used the same log stream writer for writing on the same partition\n* avoid concurrent access by delegating the command to the subscription handler of the receiver partition instead of the sender partition\n* use a single thread pool to avoid concurrent access to the same subscription handler", "committedDate": "2020-03-10T07:42:09Z", "type": "forcePushed"}]}