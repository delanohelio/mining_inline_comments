{"pr_number": 3860, "pr_title": "3841 replace byte value in signatures with long", "pr_createdAt": "2020-02-17T13:39:35Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3860", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODc5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380908799", "bodyText": "Should we also have a getLogSegmentSizeInBytes method here as well then?", "author": "npepinpe", "createdAt": "2020-02-18T20:11:05Z", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -114,14 +114,14 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n-    final ByteValue maxMessageSize = networkCfg.getMaxMessageSize();\n-    partitionGroupBuilder.withMaxEntrySize((int) maxMessageSize.toBytes());\n+    final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n+    partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n     Optional.ofNullable(dataCfg.getLogSegmentSize())", "originalCommit": "f364db704ccedba5ec20e9c1094a9b90519c55ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTY5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175690", "bodyText": "Done", "author": "pihme", "createdAt": "2020-02-19T09:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "259d600c50134c2f37dac8b8b7dc83a095d0fdf8", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java b/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java\nindex cb01601506..06ff5e37e9 100644\n--- a/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java\n+++ b/broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java\n\n@@ -117,18 +116,17 @@ public final class AtomixFactory {\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSize())\n-        .map(ByteValueParser::fromString)\n+    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n         .ifPresent(\n             segmentSize -> {\n-              if (segmentSize.toBytes() < maxMessageSize) {\n+              if (segmentSize < maxMessageSize) {\n                 throw new IllegalArgumentException(\n                     String.format(\n                         \"Expected the raft segment size greater than the max message size of %s, but was %s.\",\n                         maxMessageSize, segmentSize));\n               }\n \n-              partitionGroupBuilder.withSegmentSize(segmentSize.toBytes());\n+              partitionGroupBuilder.withSegmentSize(segmentSize);\n             });\n \n     return partitionGroupBuilder.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380909714", "bodyText": "Nit: not sure if necessary as when we parse the config file, we could have an invalid string and we'll anyway only figure it out when we try to access it via getMaxMessageSizeInBytes.", "author": "npepinpe", "createdAt": "2020-02-18T20:13:01Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "originalCommit": "f364db704ccedba5ec20e9c1094a9b90519c55ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1OTU4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381159588", "bodyText": "The idea here (and in other places) is to fail early and in a defined phase of computation.\nSetting the configuration with an invalid value will throw an exception during startup, so it would be noticed right away. Throwing an exception whenever we arbitrarily access a setting seems more risky to me.\nThere is also a school of thought which claims that getters should never throw exceptions.\nI would strongly argue to keep it as it is. Also, if we use Spring Boot, we would change this interface to accept DataSize instead of String, and remove the parsing altogether. But the net behavior would be the same: exception will be thrown while parsing the configuration, not while accessing it.", "author": "pihme", "createdAt": "2020-02-19T09:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3MTYxOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381171618", "bodyText": "Could we store the returned value ? Then we do not need to re-calculate it again later? Do we need the string in the Cfg anyway?", "author": "Zelldon", "createdAt": "2020-02-19T09:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTQxMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175410", "bodyText": "Yes we could store the returned value. I kinda opted against it, though. This is more a preparatory step to later replace String with DataSize (from Spring Boot). In that later stage I would store the DataSize value because it's the ground truth. The byte value is just a calculated value based on that. In that setup, the parsing will have happened before the DataSize object is created, so the expensive step is only done once. Also, it didn't look like the getter is called with a high frequency, so I think the performance gains of caching the result would be negligible.", "author": "pihme", "createdAt": "2020-02-19T09:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3Njc1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381176755", "bodyText": "Ok so this PR is more a transitive state to the new cfg. Thanks for clarification", "author": "Zelldon", "createdAt": "2020-02-19T09:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "97a26b3cd1bcf60c509521939963dd1b74b767b2", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java b/broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java\nindex ea835a975f..64235f4eeb 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java\n\n@@ -74,18 +75,11 @@ public final class NetworkCfg implements ConfigurationEntry {\n     this.portOffset = portOffset;\n   }\n \n-  public String getMaxMessageSize() {\n-    return maxMessageSize;\n-  }\n-\n-  public long getMaxMessageSizeInBytes() {\n-    return ByteValueParser.fromString(maxMessageSize).toBytes();\n+  public ByteValue getMaxMessageSize() {\n+    return ByteValueParser.fromString(maxMessageSize);\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n-    // call parsing logic to provoke any exceptions that might occur during parsing\n-    ByteValueParser.fromString(maxMessageSize);\n-\n     this.maxMessageSize = maxMessageSize;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTAzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380911031", "bodyText": "Why not have the argument be an int to make this cast explicit to the caller (to avoid any potential confusion)?", "author": "npepinpe", "createdAt": "2020-02-18T20:15:56Z", "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -49,8 +49,8 @@ public DispatcherBuilder name(final String name) {\n    * The number of bytes the buffer is be able to contain. Represents the size of the data section.\n    * Additional space will be allocated for the meta-data sections\n    */\n-  public DispatcherBuilder bufferSize(final ByteValue byteValue) {\n-    bufferSize = (int) byteValue.toBytes();\n+  public DispatcherBuilder bufferSize(final long bufferSize) {\n+    this.bufferSize = (int) bufferSize;", "originalCommit": "f364db704ccedba5ec20e9c1094a9b90519c55ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTU4Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175586", "bodyText": "Done", "author": "pihme", "createdAt": "2020-02-19T09:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "259d600c50134c2f37dac8b8b7dc83a095d0fdf8", "chunk": "diff --git a/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java b/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\nindex 29569bdcb5..ca472e0b5a 100644\n--- a/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\n+++ b/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\n\n@@ -49,8 +49,8 @@ public final class DispatcherBuilder {\n    * The number of bytes the buffer is be able to contain. Represents the size of the data section.\n    * Additional space will be allocated for the meta-data sections\n    */\n-  public DispatcherBuilder bufferSize(final long bufferSize) {\n-    this.bufferSize = (int) bufferSize;\n+  public DispatcherBuilder bufferSize(final int bufferSize) {\n+    this.bufferSize = bufferSize;\n     return this;\n   }\n \n"}}, {"oid": "259d600c50134c2f37dac8b8b7dc83a095d0fdf8", "url": "https://github.com/camunda-cloud/zeebe/commit/259d600c50134c2f37dac8b8b7dc83a095d0fdf8", "message": "chore(broker): Remove ByteValue from signature of config classes", "committedDate": "2020-02-19T09:32:37Z", "type": "forcePushed"}, {"oid": "f479dc7577664aca1a5ce947e51c189d2e7a749c", "url": "https://github.com/camunda-cloud/zeebe/commit/f479dc7577664aca1a5ce947e51c189d2e7a749c", "message": "chore(broker): Remove ByteValue from signature of config classes", "committedDate": "2020-02-19T09:42:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjM3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381256379", "bodyText": "It's a little strange imo to have a Long but I get the idea. Maybe once we migrate the config we can revisit this and ensure we always have some value here.", "author": "npepinpe", "createdAt": "2020-02-19T12:20:32Z", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "diffHunk": "@@ -45,11 +46,24 @@ public void setDirectories(final List<String> directories) {\n     this.directories = directories;\n   }\n \n+  public Long getLogSegmentSizeInBytes() {", "originalCommit": "f479dc7577664aca1a5ce947e51c189d2e7a749c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NzczOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381257738", "bodyText": "Agreed. The caller assumed that the String might be null, that's why I did it this way.", "author": "pihme", "createdAt": "2020-02-19T12:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "97a26b3cd1bcf60c509521939963dd1b74b767b2", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java b/broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java\nindex 479f981e07..107116623d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java\n\n@@ -46,24 +45,11 @@ public final class DataCfg implements ConfigurationEntry {\n     this.directories = directories;\n   }\n \n-  public Long getLogSegmentSizeInBytes() {\n-    if (logSegmentSize != null) {\n-      return ByteValueParser.fromString(logSegmentSize).toBytes();\n-    } else {\n-      return null;\n-    }\n-  }\n-\n   public String getLogSegmentSize() {\n     return logSegmentSize;\n   }\n \n   public void setLogSegmentSize(final String logSegmentSize) {\n-    if (logSegmentSize != null) {\n-      // call parsing logic to provoke any exceptions that might occur during parsing\n-      ByteValueParser.fromString(logSegmentSize);\n-    }\n-\n     this.logSegmentSize = logSegmentSize;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjY3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381256675", "bodyText": "A little nit picky, but we could do the same we did above and have the caller perform the cast to int.", "author": "npepinpe", "createdAt": "2020-02-19T12:21:09Z", "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -60,8 +60,8 @@ public DispatcherBuilder actorScheduler(final ActorScheduler actorScheduler) {\n   }\n \n   /** The max length of the data section of a frame */\n-  public DispatcherBuilder maxFragmentLength(final ByteValue maxFragmentLength) {\n-    this.maxFragmentLength = (int) maxFragmentLength.toBytes();\n+  public DispatcherBuilder maxFragmentLength(final long maxFragmentLength) {", "originalCommit": "f479dc7577664aca1a5ce947e51c189d2e7a749c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1ODI1OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381258259", "bodyText": "Very attentive. Will do that", "author": "pihme", "createdAt": "2020-02-19T12:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "97a26b3cd1bcf60c509521939963dd1b74b767b2", "chunk": "diff --git a/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java b/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\nindex ca472e0b5a..d2324b5e95 100644\n--- a/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\n+++ b/dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java\n\n@@ -60,8 +60,8 @@ public final class DispatcherBuilder {\n   }\n \n   /** The max length of the data section of a frame */\n-  public DispatcherBuilder maxFragmentLength(final long maxFragmentLength) {\n-    this.maxFragmentLength = (int) maxFragmentLength;\n+  public DispatcherBuilder maxFragmentLength(final int maxFragmentLength) {\n+    this.maxFragmentLength = maxFragmentLength;\n     return this;\n   }\n \n"}}, {"oid": "97a26b3cd1bcf60c509521939963dd1b74b767b2", "url": "https://github.com/camunda-cloud/zeebe/commit/97a26b3cd1bcf60c509521939963dd1b74b767b2", "message": "chore(util): Move parsing logic for ByteValue into dedicated class", "committedDate": "2020-02-19T12:30:40Z", "type": "commit"}, {"oid": "1380a98cae4a02805d55fc6574f2182415de2c04", "url": "https://github.com/camunda-cloud/zeebe/commit/1380a98cae4a02805d55fc6574f2182415de2c04", "message": "chore(broker): Remove ByteValue from signature of config classes", "committedDate": "2020-02-19T12:30:40Z", "type": "commit"}, {"oid": "1380a98cae4a02805d55fc6574f2182415de2c04", "url": "https://github.com/camunda-cloud/zeebe/commit/1380a98cae4a02805d55fc6574f2182415de2c04", "message": "chore(broker): Remove ByteValue from signature of config classes", "committedDate": "2020-02-19T12:30:40Z", "type": "forcePushed"}]}