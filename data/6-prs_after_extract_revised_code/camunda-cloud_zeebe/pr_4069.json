{"pr_number": 4069, "pr_title": "Snapshots with randomized offset", "pr_createdAt": "2020-03-18T10:45:35Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4069", "timeline": [{"oid": "0fcbdd78b7105043728032c132441a41a4c2f495", "url": "https://github.com/camunda-cloud/zeebe/commit/0fcbdd78b7105043728032c132441a41a4c2f495", "message": "chore(broker): allow snapshot period larger then one minute only", "committedDate": "2020-03-18T12:09:11Z", "type": "forcePushed"}, {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "url": "https://github.com/camunda-cloud/zeebe/commit/83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "message": "chore(broker): allow snapshot period larger then one minute only", "committedDate": "2020-03-18T17:06:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNDA1OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395034058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n          \n          \n            \n              private static final Duration MINIMUM_SNAPSHOT_PERIOD = Duration.ofMinutes(1);", "author": "npepinpe", "createdAt": "2020-03-19T13:43:36Z", "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -25,6 +25,9 @@\n       \"Node id %s needs to be non negative and smaller then cluster size %s.\";\n   private static final String REPLICATION_FACTOR_ERROR_MSG =\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n+  private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n+      \"Snapshot period %s needs to be larger then or equals to one minute.\";\n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7484e395a8bee820eba6e782a7aa2dfb7e30b6f7", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/SystemContext.java b/broker/src/main/java/io/zeebe/broker/system/SystemContext.java\nindex a4fa77b253..0efd3e3167 100755\n--- a/broker/src/main/java/io/zeebe/broker/system/SystemContext.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/SystemContext.java\n\n@@ -25,9 +25,6 @@ public final class SystemContext {\n       \"Node id %s needs to be non negative and smaller then cluster size %s.\";\n   private static final String REPLICATION_FACTOR_ERROR_MSG =\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n-  private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n-      \"Snapshot period %s needs to be larger then or equals to one minute.\";\n-  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n   protected final BrokerCfg brokerCfg;\n   private Map<String, String> diagnosticContext;\n   private ActorScheduler scheduler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNjcwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395036700", "bodyText": "Is this used?", "author": "npepinpe", "createdAt": "2020-03-19T13:47:13Z", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -61,6 +67,7 @@ public AsyncSnapshotDirector(\n     this.processorName = streamProcessor.getName();\n     this.snapshotRate = snapshotRate;\n     this.actorName = buildActorName(nodeId, \"SnapshotDirector-\" + logStream.getPartitionId());\n+    this.threadLocalRandom = ThreadLocalRandom.current();", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTM3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069376", "bodyText": "ah probably anymore thanks", "author": "Zelldon", "createdAt": "2020-03-19T14:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNjcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\nindex d0a93df36b..f19ec80bde 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n\n@@ -67,7 +63,6 @@ public final class AsyncSnapshotDirector extends Actor {\n     this.processorName = streamProcessor.getName();\n     this.snapshotRate = snapshotRate;\n     this.actorName = buildActorName(nodeId, \"SnapshotDirector-\" + logStream.getPartitionId());\n-    this.threadLocalRandom = ThreadLocalRandom.current();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNzY0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395037642", "bodyText": "Random question, what's the different with caching runnables as fields vs using the method reference where necessary? I get it when we actually change the values, but in this case they are final. Is this a performance thing?", "author": "npepinpe", "createdAt": "2020-03-19T13:48:24Z", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n   private final SnapshotController snapshotController;\n   private final LogStream logStream;\n   private final Duration snapshotRate;\n   private final String processorName;\n   private final StreamProcessor streamProcessor;\n+  private final ThreadLocalRandom threadLocalRandom;\n+  private final Runnable prepareTakingSnapshot = this::prepareTakingSnapshot;", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTE2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069167", "bodyText": "Actually I haven't found anything which says it performs better. In the beginning of the project we did this often and here it was also the cases that is way I did it \ud83e\udd37\u200d\u2642\ufe0f", "author": "Zelldon", "createdAt": "2020-03-19T14:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\nindex d0a93df36b..f19ec80bde 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n\n@@ -37,16 +38,11 @@ public final class AsyncSnapshotDirector extends Actor {\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n-  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n-\n   private final SnapshotController snapshotController;\n   private final LogStream logStream;\n   private final Duration snapshotRate;\n   private final String processorName;\n   private final StreamProcessor streamProcessor;\n-  private final ThreadLocalRandom threadLocalRandom;\n-  private final Runnable prepareTakingSnapshot = this::prepareTakingSnapshot;\n-  private final Runnable scheduleSnapshotOnRate = this::scheduleSnapshotOnRate;\n   private final String actorName;\n \n   private ActorCondition commitCondition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzOTk4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395039982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {\n          \n          \n            \n              public static Duration getRandomDuration(final Duration minDuration, final Duration maxDuration) {", "author": "npepinpe", "createdAt": "2020-03-19T13:51:31Z", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\nindex a75d4c0bb7..25b18371ff 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n\n@@ -12,8 +12,6 @@ import java.util.concurrent.ThreadLocalRandom;\n \n public final class RandomDuration {\n \n-  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n-\n   private RandomDuration() {}\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDE1MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395040150", "bodyText": "Is it used?", "author": "npepinpe", "createdAt": "2020-03-19T13:51:44Z", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTU2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069569", "bodyText": "not anymore", "author": "Zelldon", "createdAt": "2020-03-19T14:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\nindex a75d4c0bb7..25b18371ff 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n\n@@ -12,8 +12,6 @@ import java.util.concurrent.ThreadLocalRandom;\n \n public final class RandomDuration {\n \n-  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n-\n   private RandomDuration() {}\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDI3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395040279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();\n          \n          \n            \n                final var threadLocalRandom = ThreadLocalRandom.current();", "author": "npepinpe", "createdAt": "2020-03-19T13:51:58Z", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {\n+    if (minDuration.toMillis() >= maxDuration.toMillis()) {\n+      return minDuration;\n+    }\n+\n+    final var maxMilliseconds = maxDuration.minus(minDuration).toMillis();\n+\n+    final ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\nindex a75d4c0bb7..25b18371ff 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n\n@@ -12,8 +12,6 @@ import java.util.concurrent.ThreadLocalRandom;\n \n public final class RandomDuration {\n \n-  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n-\n   private RandomDuration() {}\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjg0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395042844", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n          \n          \n            \n              private static final Duration MINIMUM_SNAPSHOT_PERIOD = Duration.ofMinutes(1);\n          \n      \n    \n    \n  \n\nAlthough I can see how we might want to share this with the broker - perhaps make this one public and reuse it in the broker when validating (since we can't have engine -> broker dependency?)", "author": "npepinpe", "createdAt": "2020-03-19T13:55:30Z", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NTA0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395055042", "bodyText": "we can reuse it yes", "author": "Zelldon", "createdAt": "2020-03-19T14:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\nindex d0a93df36b..f19ec80bde 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java\n\n@@ -37,16 +38,11 @@ public final class AsyncSnapshotDirector extends Actor {\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n-  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n-\n   private final SnapshotController snapshotController;\n   private final LogStream logStream;\n   private final Duration snapshotRate;\n   private final String processorName;\n   private final StreamProcessor streamProcessor;\n-  private final ThreadLocalRandom threadLocalRandom;\n-  private final Runnable prepareTakingSnapshot = this::prepareTakingSnapshot;\n-  private final Runnable scheduleSnapshotOnRate = this::scheduleSnapshotOnRate;\n   private final String actorName;\n \n   private ActorCondition commitCondition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTkyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395049927", "bodyText": "Is this a case we have?", "author": "npepinpe", "createdAt": "2020-03-19T14:05:24Z", "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class RandomDurationTest {\n+\n+  @Test\n+  public void shouldGetRandomDuration() {\n+    // given\n+    final Duration minDuration = Duration.ofMinutes(1);\n+    final Duration maxDuration = Duration.ofMinutes(10);\n+\n+    // when\n+    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+\n+    // then\n+    assertThat(randomDuration).isBetween(minDuration, maxDuration);\n+  }\n+\n+  @Test\n+  public void shouldGetRandomDurationOnNegativeMin() {\n+    // given\n+    final Duration minDuration = Duration.ofMinutes(-1);\n+    final Duration maxDuration = Duration.ofMinutes(10);\n+\n+    // when\n+    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+\n+    // then\n+    assertThat(randomDuration).isBetween(minDuration, maxDuration);\n+  }\n+\n+  @Test\n+  public void shouldGetRandomDurationOnNegativeDurations() {", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java b/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\nindex c53d89c729..c6a84ff29d 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\n\n@@ -21,7 +21,8 @@ public class RandomDurationTest {\n     final Duration maxDuration = Duration.ofMinutes(10);\n \n     // when\n-    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+    final var randomDuration =\n+        RandomDuration.getRandomDurationMinuteBased(minDuration, maxDuration);\n \n     // then\n     assertThat(randomDuration).isBetween(minDuration, maxDuration);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDk3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395050973", "bodyText": "Just a thought: as we deal with random values, does it make sense here to test that? e.g. most of these tests would pass if getDuration returned a fixed value.\nAt the same time, the logic is so simple not sure if it's worth it \ud83e\udd37\u200d\u2642\ufe0f :", "author": "npepinpe", "createdAt": "2020-03-19T14:06:52Z", "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class RandomDurationTest {", "originalCommit": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MTAwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395071000", "bodyText": "I changed it to minutes based where it might have more logic now and it tests that it is between this given values but yes it is quite simple", "author": "Zelldon", "createdAt": "2020-03-19T14:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6a3cfd0c758d374387e592a533b404a2cce434a2", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java b/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\nindex c53d89c729..c6a84ff29d 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java\n\n@@ -21,7 +21,8 @@ public class RandomDurationTest {\n     final Duration maxDuration = Duration.ofMinutes(10);\n \n     // when\n-    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+    final var randomDuration =\n+        RandomDuration.getRandomDurationMinuteBased(minDuration, maxDuration);\n \n     // then\n     assertThat(randomDuration).isBetween(minDuration, maxDuration);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2ODUwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395268505", "bodyText": "So if snapshotPeriod is one minute, there is no randomization at all, correct? We can iterate on this later if we find it's an issue", "author": "npepinpe", "createdAt": "2020-03-19T19:27:52Z", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * <p>The random duration is minute based, so if the given duration differ only in seconds then\n+   * the minimum duration is returned\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDurationMinuteBased(\n+      final Duration minDuration, final Duration maxDuration) {\n+    if (minDuration.toMinutes() >= maxDuration.toMinutes()) {", "originalCommit": "13218207dd41618fec344a367d3f2f9576546669", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7484e395a8bee820eba6e782a7aa2dfb7e30b6f7", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\nindex 25b18371ff..a75d4c0bb7 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java\n\n@@ -12,6 +12,8 @@ import java.util.concurrent.ThreadLocalRandom;\n \n public final class RandomDuration {\n \n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n   private RandomDuration() {}\n \n   /**\n"}}, {"oid": "7484e395a8bee820eba6e782a7aa2dfb7e30b6f7", "url": "https://github.com/camunda-cloud/zeebe/commit/7484e395a8bee820eba6e782a7aa2dfb7e30b6f7", "message": "chore(engine): use randomized offset on snapshot intervals", "committedDate": "2020-03-23T09:05:01Z", "type": "commit"}, {"oid": "ccff28f064d804a4a59ca98c0f65fb022898498a", "url": "https://github.com/camunda-cloud/zeebe/commit/ccff28f064d804a4a59ca98c0f65fb022898498a", "message": "chore(broker): allow snapshot period larger then one minute only", "committedDate": "2020-03-23T09:05:42Z", "type": "commit"}, {"oid": "6a3cfd0c758d374387e592a533b404a2cce434a2", "url": "https://github.com/camunda-cloud/zeebe/commit/6a3cfd0c758d374387e592a533b404a2cce434a2", "message": "chore(engine): apply review hints", "committedDate": "2020-03-23T09:05:42Z", "type": "forcePushed"}, {"oid": "75e1684daffb0814ca9a606351fca8ddf7c2845a", "url": "https://github.com/camunda-cloud/zeebe/commit/75e1684daffb0814ca9a606351fca8ddf7c2845a", "message": "chore(engine): use minute based random duration\n\n Before the random duration was choosen based on milliseconds which increases the likelihood that the snapshot is near by the exact snapshot time, which is then not ideal.", "committedDate": "2020-03-23T10:07:49Z", "type": "commit"}, {"oid": "75e1684daffb0814ca9a606351fca8ddf7c2845a", "url": "https://github.com/camunda-cloud/zeebe/commit/75e1684daffb0814ca9a606351fca8ddf7c2845a", "message": "chore(engine): use minute based random duration\n\n Before the random duration was choosen based on milliseconds which increases the likelihood that the snapshot is near by the exact snapshot time, which is then not ideal.", "committedDate": "2020-03-23T10:07:49Z", "type": "forcePushed"}]}