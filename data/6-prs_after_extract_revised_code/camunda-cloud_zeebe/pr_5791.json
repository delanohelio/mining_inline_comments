{"pr_number": 5791, "pr_title": "Return UNAVAILABLE on publish message and create workflow instance commands if no partitions are known", "pr_createdAt": "2020-11-08T18:38:52Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5791", "timeline": [{"oid": "b61f2a6d51256e79025aff92146a772668a1938a", "url": "https://github.com/camunda-cloud/zeebe/commit/b61f2a6d51256e79025aff92146a772668a1938a", "message": "chore(test-util): add custom assert for ClientStatusException", "committedDate": "2020-11-08T18:35:48Z", "type": "commit"}, {"oid": "f000654a52c8dbd3f331ade6469f3e740998e02a", "url": "https://github.com/camunda-cloud/zeebe/commit/f000654a52c8dbd3f331ade6469f3e740998e02a", "message": "fix(gateway): return UNAVAILABLE on missing topology", "committedDate": "2020-11-08T18:46:30Z", "type": "forcePushed"}, {"oid": "928b14cfad550d74bc353c00ba37b504ddfb5430", "url": "https://github.com/camunda-cloud/zeebe/commit/928b14cfad550d74bc353c00ba37b504ddfb5430", "message": "chore(qa): update outdated test", "committedDate": "2020-11-08T20:06:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMDQyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519600420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Expected to handle gRPC request, but the gateway does not know any partitions yet\");\n          \n          \n            \n                      \"Expected to handle gRPC request, but the gateway does not know any partitions yet\", error);", "author": "Zelldon", "createdAt": "2020-11-09T07:29:17Z", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -86,6 +87,10 @@ private Status mapErrorToStatus(final Throwable error, final Logger logger) {\n       // partitions - it will then also occur when back pressure kicks in, leading to a large burst\n       // of error logs that is, in fact, expected\n       logger.trace(\"Expected to handle gRPC request, but all retries have been exhausted\", error);\n+    } else if (error instanceof NoTopologyAvailableException) {\n+      builder.setCode(Code.UNAVAILABLE_VALUE).setMessage(error.getMessage());\n+      logger.trace(\n+          \"Expected to handle gRPC request, but the gateway does not know any partitions yet\");", "originalCommit": "928b14cfad550d74bc353c00ba37b504ddfb5430", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b1fbecd0ca57cf536bd679804aa4af1e081085b", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java b/gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java\nindex e70893302b..a989d7de9e 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java\n\n@@ -90,7 +90,8 @@ public final class GrpcErrorMapper {\n     } else if (error instanceof NoTopologyAvailableException) {\n       builder.setCode(Code.UNAVAILABLE_VALUE).setMessage(error.getMessage());\n       logger.trace(\n-          \"Expected to handle gRPC request, but the gateway does not know any partitions yet\");\n+          \"Expected to handle gRPC request, but the gateway does not know any partitions yet\",\n+          error);\n     } else {\n       builder\n           .setCode(Code.INTERNAL_VALUE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519602378", "bodyText": "What does this?", "author": "Zelldon", "createdAt": "2020-11-09T07:34:00Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.grpc.Status.Code;\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.api.ZeebeFuture;\n+import io.zeebe.client.api.command.ClientStatusException;\n+import io.zeebe.client.api.command.FinalCommandStep;\n+import io.zeebe.gateway.Gateway;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.gateway.impl.configuration.NetworkCfg;\n+import io.zeebe.test.util.asserts.grpc.ClientStatusExceptionAssert;\n+import io.zeebe.test.util.socket.SocketUtil;\n+import io.zeebe.util.sched.ActorScheduler;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+@Execution(ExecutionMode.CONCURRENT)", "originalCommit": "928b14cfad550d74bc353c00ba37b504ddfb5430", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTAyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519611021", "bodyText": "Tests are executed concurrently instead of one after the other. Should be used only when we are sure that they don't interfere between each other \ud83d\ude42", "author": "npepinpe", "createdAt": "2020-11-09T07:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTI4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519611287", "bodyText": "thanks :)", "author": "Zelldon", "createdAt": "2020-11-09T07:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1b1fbecd0ca57cf536bd679804aa4af1e081085b", "chunk": "diff --git a/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java b/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java\nindex 5a2ca02603..4440906394 100644\n--- a/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java\n+++ b/gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java\n\n@@ -24,6 +24,7 @@ import io.zeebe.test.util.socket.SocketUtil;\n import io.zeebe.util.sched.ActorScheduler;\n import java.io.IOException;\n import java.net.InetAddress;\n+import java.time.Duration;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Stream;\n import org.junit.jupiter.api.AfterAll;\n"}}, {"oid": "1b1fbecd0ca57cf536bd679804aa4af1e081085b", "url": "https://github.com/camunda-cloud/zeebe/commit/1b1fbecd0ca57cf536bd679804aa4af1e081085b", "message": "fix(gateway): return UNAVAILABLE on missing topology", "committedDate": "2020-11-09T08:05:23Z", "type": "commit"}, {"oid": "2a02311800ca343c37713b6387a3dae687452c9e", "url": "https://github.com/camunda-cloud/zeebe/commit/2a02311800ca343c37713b6387a3dae687452c9e", "message": "chore(qa): update outdated test", "committedDate": "2020-11-09T08:05:23Z", "type": "commit"}, {"oid": "2a02311800ca343c37713b6387a3dae687452c9e", "url": "https://github.com/camunda-cloud/zeebe/commit/2a02311800ca343c37713b6387a3dae687452c9e", "message": "chore(qa): update outdated test", "committedDate": "2020-11-09T08:05:23Z", "type": "forcePushed"}]}