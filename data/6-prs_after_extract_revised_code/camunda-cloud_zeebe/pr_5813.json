{"pr_number": 5813, "pr_title": "fix(broker): handle failures during transitions", "pr_createdAt": "2020-11-11T16:11:26Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5813", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523950607", "bodyText": "If the node leaves the partition, quorum will also change from 3 to 2. We don't want to do that.", "author": "deepthidevaki", "createdAt": "2020-11-16T07:55:01Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().leave();", "originalCommit": "7bfd3beffd8b73081828614b5b6388864eb4419c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjkwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523966905", "bodyText": "We should either \"stop\" the raft server or transition to \"Role.INACTIVE\". Transitioning to Inactive will be safer, because several other modules might expect a running raft server.", "author": "deepthidevaki", "createdAt": "2020-11-16T08:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyMTY3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r524021678", "bodyText": "That's what leave() does:\nhttps://github.com/zeebe-io/zeebe/blob/ba3400c7ee0a6f910a3b1cfef75fb668f7cecca0/atomix/cluster/src/main/java/io/atomix/raft/cluster/impl/RaftClusterContext.java#L262\nleave() transitions to INACTIVE. The reaction to the role transition is to leave the cluster. Which makes sense since it's not going to take part in consensus. We can shutdown the broker so it can be restarted as soon as possible, but that will impact other partitions", "author": "MiguelPires", "createdAt": "2020-11-16T09:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MTc4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r524061789", "bodyText": "leave() also leaves the replication group which means that the other nodes would stop communicating with this - we don't want to do that because this node is still part of the replication group, but it is only in a error state.. What we really need is only transition to Inactive which means it is still part of the replication group, but doesn't actively do anything. It acts as if it is unreachable.", "author": "deepthidevaki", "createdAt": "2020-11-16T10:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex bb339dd69..a86912721 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -282,7 +282,7 @@ public final class ZeebePartition extends Actor\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n     } else {\n-      context.getRaftPartition().leave();\n+      context.getRaftPartition().goInactive();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MjA5Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523952093", "bodyText": "This log level can be debug, right?", "author": "deepthidevaki", "createdAt": "2020-11-16T07:58:19Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -107,23 +100,41 @@ private void installPartition(\n             });\n   }\n \n+  private void tryCloseStep(final PartitionStep step) {\n+    // close if there's anything to close. Don't add to 'opened' list, since the open did not\n+    // complete, the close might also fail but that shouldn't prevent the next transition\n+    try {\n+      step.close(context);\n+    } catch (final Exception e) {\n+      LOG.info(\"Couldn't close partition step '{}' that failed to open\", step.getName(), e);", "originalCommit": "7bfd3beffd8b73081828614b5b6388864eb4419c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex aac979c12..2c98d3e94 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -106,7 +106,7 @@ public class PartitionTransitionImpl implements PartitionTransition {\n     try {\n       step.close(context);\n     } catch (final Exception e) {\n-      LOG.info(\"Couldn't close partition step '{}' that failed to open\", step.getName(), e);\n+      LOG.debug(\"Couldn't close partition step '{}' that failed to open\", step.getName(), e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MzM1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523953351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    (v, newThrowable) -> {\n          \n          \n            \n                    (v, closeFailedError) -> {", "author": "deepthidevaki", "createdAt": "2020-11-16T08:00:50Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -132,26 +143,22 @@ private void stepByStepClosing(\n \n     final ActorFuture<Void> closeFuture = step.close(context);\n     closeFuture.onComplete(\n-        (v, t) -> {\n-          if (t == null) {\n+        (v, newThrowable) -> {", "originalCommit": "7bfd3beffd8b73081828614b5b6388864eb4419c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex aac979c12..2c98d3e94 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -143,8 +143,8 @@ public class PartitionTransitionImpl implements PartitionTransition {\n \n     final ActorFuture<Void> closeFuture = step.close(context);\n     closeFuture.onComplete(\n-        (v, newThrowable) -> {\n-          if (newThrowable == null) {\n+        (v, closingError) -> {\n+          if (closingError == null) {\n             LOG.debug(\n                 \"Closing Zeebe-Partition-{}: {} closed successfully\",\n                 context.getPartitionId(),\n"}}, {"oid": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "url": "https://github.com/camunda-cloud/zeebe/commit/1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "message": "chore(atomix): review feedback", "committedDate": "2020-11-18T10:13:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MjcxNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527492715", "bodyText": "Add @Override", "author": "deepthidevaki", "createdAt": "2020-11-20T07:38:41Z", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -149,6 +149,17 @@ public void removeFailureListener(final Runnable failureListener) {\n     return future;\n   }\n \n+  public CompletableFuture<Void> goInactive() {", "originalCommit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "chunk": "diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java\nindex 1f670eccc..8fa724baa 100644\n--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java\n+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java\n\n@@ -149,6 +149,7 @@ public class DefaultRaftServer implements RaftServer {\n     return future;\n   }\n \n+  @Override\n   public CompletableFuture<Void> goInactive() {\n     final CompletableFuture<Void> future = new AtomixFuture<>();\n     context\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzczNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527493737", "bodyText": "May be also add a log here?", "author": "deepthidevaki", "createdAt": "2020-11-20T07:41:09Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().goInactive();", "originalCommit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex a86912721..f8cce2397 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -282,6 +282,8 @@ public final class ZeebePartition extends Actor\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n     } else {\n+      LOG.info(\n+          \"Unexpected failures occurred when installing follower services, transitioning to inactive\");\n       context.getRaftPartition().goInactive();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Mzk1Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527493953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n          \n          \n            \n                assertThat(latch.await(30, TimeUnit.SECONDS)).isTrue();", "author": "deepthidevaki", "createdAt": "2020-11-20T07:41:51Z", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -100,6 +107,76 @@ public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n     verify(failureListener, only()).onRecovered();\n   }\n \n+  @Test\n+  public void shouldStepDownAfterFailedLeaderTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toLeader())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toFollower())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.LEADER);\n+    when(raft.stepDown())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.FOLLOWER, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.LEADER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));", "originalCommit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java b/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\nindex ed702e9d1..f4657c261 100644\n--- a/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\n\n@@ -107,8 +107,8 @@ public class ZeebePartitionTest {\n     verify(failureListener, only()).onRecovered();\n   }\n \n-  @Test\n-  public void shouldStepDownAfterFailedLeaderTransition() {\n+  @Test()\n+  public void shouldStepDownAfterFailedLeaderTransition() throws InterruptedException {\n     // given\n     final ZeebePartition partition = new ZeebePartition(ctx, transition);\n     schedulerRule.submitActor(partition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDA2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527494068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n          \n          \n            \n                assertThat(latch.await(30, TimeUnit.SECONDS)).isTrue();", "author": "deepthidevaki", "createdAt": "2020-11-20T07:42:06Z", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -100,6 +107,76 @@ public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n     verify(failureListener, only()).onRecovered();\n   }\n \n+  @Test\n+  public void shouldStepDownAfterFailedLeaderTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toLeader())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toFollower())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.LEADER);\n+    when(raft.stepDown())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.FOLLOWER, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.LEADER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n+\n+    // then\n+    final InOrder order = inOrder(transition, raft);\n+    order.verify(transition).toLeader();\n+    order.verify(raft).stepDown();\n+    order.verify(transition).toFollower();\n+  }\n+\n+  @Test\n+  public void shouldGoInactiveAfterFailedFollowerTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toFollower())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toInactive())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.FOLLOWER);\n+    when(raft.goInactive())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.INACTIVE, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.FOLLOWER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));", "originalCommit": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java b/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\nindex ed702e9d1..f4657c261 100644\n--- a/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java\n\n@@ -107,8 +107,8 @@ public class ZeebePartitionTest {\n     verify(failureListener, only()).onRecovered();\n   }\n \n-  @Test\n-  public void shouldStepDownAfterFailedLeaderTransition() {\n+  @Test()\n+  public void shouldStepDownAfterFailedLeaderTransition() throws InterruptedException {\n     // given\n     final ZeebePartition partition = new ZeebePartition(ctx, transition);\n     schedulerRule.submitActor(partition);\n"}}, {"oid": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "url": "https://github.com/camunda-cloud/zeebe/commit/c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "message": "fix(broker): handle failures during transitions", "committedDate": "2020-11-20T08:48:58Z", "type": "commit"}, {"oid": "c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "url": "https://github.com/camunda-cloud/zeebe/commit/c01553b1ddd9d546ff5f2995aa386b70ba3a12f9", "message": "fix(broker): handle failures during transitions", "committedDate": "2020-11-20T08:48:58Z", "type": "forcePushed"}]}