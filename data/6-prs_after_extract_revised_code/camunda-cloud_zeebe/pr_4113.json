{"pr_number": 4113, "pr_title": "chore(broker): split snapshot replication destination folders", "pr_createdAt": "2020-03-23T16:13:32Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4113", "timeline": [{"oid": "fe1d54834c7de4d864f4423b359d527d2999f002", "url": "https://github.com/camunda-cloud/zeebe/commit/fe1d54834c7de4d864f4423b359d527d2999f002", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-23T17:11:59Z", "type": "forcePushed"}, {"oid": "14e63c141ebb764695e9e0592cdc18872fd293a6", "url": "https://github.com/camunda-cloud/zeebe/commit/14e63c141ebb764695e9e0592cdc18872fd293a6", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-23T17:17:24Z", "type": "forcePushed"}, {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10", "url": "https://github.com/camunda-cloud/zeebe/commit/2dff011a5812e56dbd5bf97503ea45baa9881b10", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-23T17:27:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MzM0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397053348", "bodyText": "We can use FileUtil:ensureDirectoryExists which you added in another PR to be consistent.", "author": "deepthidevaki", "createdAt": "2020-03-24T10:37:44Z", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -23,32 +23,37 @@\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.stream.Stream;\n+import org.agrona.IoUtil;\n import org.slf4j.Logger;\n \n public final class AtomixSnapshotStorage implements SnapshotStorage, SnapshotListener {\n \n   private static final Logger LOGGER = new ZbLogger(AtomixSnapshotStorage.class);\n \n   private final Path runtimeDirectory;\n+  private final Path pendingDirectory;\n   private final AtomixRecordEntrySupplier entrySupplier;\n   private final SnapshotStore store;\n   private final Set<SnapshotDeletionListener> deletionListeners;\n   private final SnapshotMetrics metrics;\n \n   public AtomixSnapshotStorage(\n       final Path runtimeDirectory,\n+      final Path pendingDirectory,\n       final SnapshotStore store,\n       final AtomixRecordEntrySupplier entrySupplier,\n       final SnapshotMetrics metrics) {\n     this.runtimeDirectory = runtimeDirectory;\n+    this.pendingDirectory = pendingDirectory;\n     this.entrySupplier = entrySupplier;\n     this.store = store;\n     this.metrics = metrics;\n \n     this.deletionListeners = new CopyOnWriteArraySet<>();\n-    this.store.addListener(this);\n \n+    IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"push replication pending directory\");", "originalCommit": "2dff011a5812e56dbd5bf97503ea45baa9881b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4OTQwMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397189402", "bodyText": "As soon as the other PR is merged \ud83d\udc4d", "author": "npepinpe", "createdAt": "2020-03-24T14:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MzM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "1f6b7d65e18afdbab1bb9d23ee730b5f0657aa06", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\nindex 6c6e5fda02..626cf20f3b 100644\n--- a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\n+++ b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\n\n@@ -57,35 +59,15 @@ public final class AtomixSnapshotStorage implements SnapshotStorage, SnapshotLis\n   }\n \n   @Override\n-  public Snapshot getPendingSnapshotFor(final long snapshotPosition) {\n+  public Optional<Snapshot> getPendingSnapshotFor(final long snapshotPosition) {\n     final var optionalIndexed = entrySupplier.getIndexedEntry(snapshotPosition);\n-\n-    if (optionalIndexed.isPresent()) {\n-      final var indexed = optionalIndexed.get();\n-      final var directory =\n-          getPendingDirectoryFor(\n-              indexed.index(),\n-              indexed.entry().term(),\n-              WallClockTimestamp.from(System.currentTimeMillis()));\n-      return new SnapshotImpl(indexed.index(), directory);\n-    } else {\n-      LOGGER.debug(\n-          \"No previous entry found for position {}, cannot take snapshot\", snapshotPosition);\n-    }\n-\n-    return null;\n+    return optionalIndexed.map(this::getSnapshot);\n   }\n \n   @Override\n-  public Path getPendingDirectoryFor(final String id) {\n+  public Optional<Path> getPendingDirectoryFor(final String id) {\n     final var optionalMeta = DbSnapshotMetadata.ofFileName(id);\n-    if (optionalMeta.isPresent()) {\n-      final var metadata = optionalMeta.get();\n-      return getPendingDirectoryFor(\n-          metadata.getIndex(), metadata.getTerm(), metadata.getTimestamp());\n-    }\n-\n-    return null;\n+    return optionalMeta.map(this::getPendingDirectoryFor);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397057214", "bodyText": "Doesn't purgeSnapshot does the cleanup?", "author": "deepthidevaki", "createdAt": "2020-03-24T10:44:21Z", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -142,8 +147,13 @@ public void onNewSnapshot(\n     metrics.incrementSnapshotCount();\n     observeSnapshotSize(snapshot);\n \n-    LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n-    store.purgeSnapshots(snapshot);\n+    try {\n+      LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n+      store.purgeSnapshots(snapshot);\n+      DbSnapshotStore.cleanUpTemporarySnapshots(pendingDirectory, snapshot.index());", "originalCommit": "2dff011a5812e56dbd5bf97503ea45baa9881b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MTM4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397061387", "bodyText": "It now only does for the one pending directory it knows about - do you think it should also purge this one as well? I'm also not sure if it's a good idea for it do it anyway, because purgeSnapshots can be called from different thread contexts, so we might still run into the issue of deleting on going replications? Though it should be more fault tolerant", "author": "npepinpe", "createdAt": "2020-03-24T10:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NDM3Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397064372", "bodyText": "Sorry, I missed that DbSnapshot is shared between raft and atomix. Then it make sense to cleanup here. But then wouldn't we cleanup raft-pending snapshot while we purge snapshots here?", "author": "deepthidevaki", "createdAt": "2020-03-24T10:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "8d2125c0e617700d33de0c6bd199c746c04a665b", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\nindex 6c6e5fda02..c26130f033 100644\n--- a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\n+++ b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java\n\n@@ -147,13 +130,9 @@ public final class AtomixSnapshotStorage implements SnapshotStorage, SnapshotLis\n     metrics.incrementSnapshotCount();\n     observeSnapshotSize(snapshot);\n \n-    try {\n-      LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n-      store.purgeSnapshots(snapshot);\n-      DbSnapshotStore.cleanUpTemporarySnapshots(pendingDirectory, snapshot.index());\n-    } catch (final IOException e) {\n-      LOGGER.warn(\"Failed to clean up temporary snapshots with index < {}\", snapshot.index(), e);\n-    }\n+    LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n+    store.purgeSnapshots(snapshot);\n+    purgePendingSnapshots(snapshot.index());\n \n     final var optionalConverted = toSnapshot(snapshot.getPath());\n     if (optionalConverted.isPresent()) {\n"}}, {"oid": "1f6b7d65e18afdbab1bb9d23ee730b5f0657aa06", "url": "https://github.com/camunda-cloud/zeebe/commit/1f6b7d65e18afdbab1bb9d23ee730b5f0657aa06", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-24T13:13:22Z", "type": "forcePushed"}, {"oid": "8d2125c0e617700d33de0c6bd199c746c04a665b", "url": "https://github.com/camunda-cloud/zeebe/commit/8d2125c0e617700d33de0c6bd199c746c04a665b", "message": "chore(broker): refactor purging orphaned snapshots", "committedDate": "2020-03-24T14:13:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDgyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397280826", "bodyText": "This isn't used anymore. Can remove.", "author": "deepthidevaki", "createdAt": "2020-03-24T16:16:14Z", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java", "diffHunk": "@@ -170,6 +171,35 @@ public void removeListener(final SnapshotListener listener) {\n     listeners.remove(listener);\n   }\n \n+  private void purgePendingSnapshot(final Path pendingSnapshot) {\n+    try {\n+      FileUtil.deleteFolder(pendingSnapshot);\n+      LOGGER.debug(\"Delete not completed (orphaned) snapshot {}\", pendingSnapshot);\n+    } catch (final IOException e) {\n+      LOGGER.error(\"Failed to delete not completed (orphaned) snapshot {}\", pendingSnapshot);\n+    }\n+  }\n+\n+  static void cleanUpTemporarySnapshots(final Path pendingDirectory, final long cutoffIndex)", "originalCommit": "617be890a64e32e9f101b077a94ca7375025c6fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da6ef39160a811c438bd69ef38b217f0c24152aa", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java\nindex a3844252be..23418da9c1 100644\n--- a/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java\n+++ b/broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java\n\n@@ -180,26 +182,6 @@ public final class DbSnapshotStore implements SnapshotStore {\n     }\n   }\n \n-  static void cleanUpTemporarySnapshots(final Path pendingDirectory, final long cutoffIndex)\n-      throws IOException {\n-    LOGGER.debug(\n-        \"Search for orphaned snapshots below oldest valid snapshot with index {} in {}\",\n-        cutoffIndex,\n-        pendingDirectory);\n-\n-    try (final var files = Files.newDirectoryStream(pendingDirectory)) {\n-      for (final var file : files) {\n-        final var name = file.getFileName().toString();\n-        final var parts = name.split(\"-\", 3);\n-        final var index = Long.parseLong(parts[0]);\n-        if (cutoffIndex > index) {\n-          FileUtil.deleteFolder(file);\n-          LOGGER.debug(\"Delete not completed (orphaned) snapshot {}\", file);\n-        }\n-      }\n-    }\n-  }\n-\n   private DbSnapshot put(final DbSnapshot snapshot) {\n     // caveat: if the metadata is the same but the location is different, this will do nothing\n     final var previous = snapshots.put(snapshot.getMetadata(), snapshot);\n"}}, {"oid": "da6ef39160a811c438bd69ef38b217f0c24152aa", "url": "https://github.com/camunda-cloud/zeebe/commit/da6ef39160a811c438bd69ef38b217f0c24152aa", "message": "chore(broker): fail partition installation if cannot created pending directory", "committedDate": "2020-03-24T17:20:35Z", "type": "forcePushed"}, {"oid": "ca4048b03cf3c8f011e1f8242afcfc40df4ebefe", "url": "https://github.com/camunda-cloud/zeebe/commit/ca4048b03cf3c8f011e1f8242afcfc40df4ebefe", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-25T09:10:09Z", "type": "commit"}, {"oid": "ca4048b03cf3c8f011e1f8242afcfc40df4ebefe", "url": "https://github.com/camunda-cloud/zeebe/commit/ca4048b03cf3c8f011e1f8242afcfc40df4ebefe", "message": "chore(broker): split snapshot replication destination folders\n\n- splits destination folders for the different snapshot replications as\n  they run in different thread context and both need to modify the same\n  on-disk state\n- Atomix snapshot replication will now write to raft-pending/ folder\n- Zeebe snapshot replication will now write to pushed-pending/ folder", "committedDate": "2020-03-25T09:10:09Z", "type": "forcePushed"}, {"oid": "2d0ec42529cbbddcf6c82d9c9038eba7af9edf77", "url": "https://github.com/camunda-cloud/zeebe/commit/2d0ec42529cbbddcf6c82d9c9038eba7af9edf77", "message": "chore(qa): fix potential race condition in tests\n\n- changes waitForNewSnapshot from waiting until a new snapshot is\n  committed without waiting for the older ones to be removed to\n  wait until a new snapshot has been committed AND the previous ones\n  removed; this fixes a potential race conditions when asserting the\n  checksum of available snapshots in tests", "committedDate": "2020-03-25T10:03:35Z", "type": "commit"}]}