{"pr_number": 4635, "pr_title": "4547 replace custom http server", "pr_createdAt": "2020-05-29T10:36:17Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4635", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDQyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435344422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (healthCheckServiceSupplier != null) {\n          \n          \n            \n                  return Optional.ofNullable(healthCheckServiceSupplier.get());\n          \n          \n            \n                } else {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                return Optional.ofNullable(healthCheckServiceSupplier).map(Supplier::get);", "author": "npepinpe", "createdAt": "2020-06-04T15:24:04Z", "path": "broker/src/main/java/io/zeebe/broker/SpringBrokerBridge.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker;\n+\n+import io.zeebe.broker.system.monitoring.BrokerHealthCheckService;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Helper class that allows Spring beans to access information from the Broker code that is not\n+ * managed by Spring\n+ */\n+@Component\n+public class SpringBrokerBridge {\n+\n+  private Supplier<BrokerHealthCheckService> healthCheckServiceSupplier;\n+\n+  public void registerBrokerHealthCheckServiceSupplier(\n+      Supplier<BrokerHealthCheckService> healthCheckServiceSupplier) {\n+    this.healthCheckServiceSupplier = healthCheckServiceSupplier;\n+  }\n+\n+  public Optional<BrokerHealthCheckService> getBrokerHealthCheckService() {\n+    if (healthCheckServiceSupplier != null) {\n+      return Optional.ofNullable(healthCheckServiceSupplier.get());\n+    } else {\n+      return Optional.empty();\n+    }", "originalCommit": "6e0b574fdc8dc8ba91c30de6d7413ef7acc988ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4f7a762503085781fbe4ca9668b77a5f713b98a", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/SpringBrokerBridge.java b/broker/src/main/java/io/zeebe/broker/SpringBrokerBridge.java\nindex 38ff9123f..31865b8f4 100644\n--- a/broker/src/main/java/io/zeebe/broker/SpringBrokerBridge.java\n+++ b/broker/src/main/java/io/zeebe/broker/SpringBrokerBridge.java\n\n@@ -27,10 +27,6 @@ public class SpringBrokerBridge {\n   }\n \n   public Optional<BrokerHealthCheckService> getBrokerHealthCheckService() {\n-    if (healthCheckServiceSupplier != null) {\n-      return Optional.ofNullable(healthCheckServiceSupplier.get());\n-    } else {\n-      return Optional.empty();\n-    }\n+    return Optional.ofNullable(healthCheckServiceSupplier).map(Supplier::get);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTE4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435365185", "bodyText": "We have a zeebe-test-util module, where we group test utilities. Do you think this could fit there, as opposed to depending on the test JAR of the client module?", "author": "npepinpe", "createdAt": "2020-06-04T15:50:28Z", "path": "clients/java/src/test/java/io/zeebe/client/assertions/TopologyAssert.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.assertions;\n+\n+import io.zeebe.client.api.response.BrokerInfo;\n+import io.zeebe.client.api.response.Topology;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.assertj.core.api.AbstractAssert;\n+\n+public class TopologyAssert extends AbstractAssert<TopologyAssert, Topology> {", "originalCommit": "6e0b574fdc8dc8ba91c30de6d7413ef7acc988ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMDE4NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435900184", "bodyText": "I think it would fit there. However, then zeebe-test-util would have to depend on zeebe-client-java which defines Topology. Not sure if this is intended. Please advise.", "author": "pihme", "createdAt": "2020-06-05T12:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTcyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r437591728", "bodyText": "That's a good point. I don't think the goal of this module were ever clearly defined. What would be the downsides here? The only one I can think of is that the client could not later depend on zeebe-test-util if we ever needed it. I guess it's a trade off - having zeebe-test-util vs the test JAR. I would prefer zeebe-test-util personally, and we can always refactor this kind of thing out into an e2e utility module if we have a need for it later on (as that's really where it should be, I guess).\nWhat do you think?", "author": "npepinpe", "createdAt": "2020-06-09T17:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NzEwMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r438147101", "bodyText": "In this case I would prefer it in the test-util module. This is where I would look for it. In the other place I would have to know it is there in order to find it.", "author": "pihme", "createdAt": "2020-06-10T14:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NTE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9d8eb261c125834b8e5e3b3ef126a436095d3b3c", "chunk": "diff --git a/clients/java/src/test/java/io/zeebe/client/assertions/TopologyAssert.java b/test-util/src/main/java/io/zeebe/test/util/asserts/TopologyAssert.java\nsimilarity index 66%\nrename from clients/java/src/test/java/io/zeebe/client/assertions/TopologyAssert.java\nrename to test-util/src/main/java/io/zeebe/test/util/asserts/TopologyAssert.java\nindex 8bea3d09f..136cefa6a 100644\n--- a/clients/java/src/test/java/io/zeebe/client/assertions/TopologyAssert.java\n+++ b/test-util/src/main/java/io/zeebe/test/util/asserts/TopologyAssert.java\n\n@@ -1,19 +1,11 @@\n /*\n- * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n  */\n-package io.zeebe.client.assertions;\n+package io.zeebe.test.util.asserts;\n \n import io.zeebe.client.api.response.BrokerInfo;\n import io.zeebe.client.api.response.Topology;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NjQ0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435366449", "bodyText": "Is this because the config may not have been initialized through the Broker yet? If so it feels a little fragile, having this call coming from different places; do we have any other options? Or perhaps it's not as big of a deal as I think, what do you think?", "author": "npepinpe", "createdAt": "2020-06-04T15:52:25Z", "path": "dist/src/main/java/io/zeebe/broker/BrokerSpringServerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker;\n+\n+import static java.net.InetAddress.getByName;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.zeebe.broker.system.configuration.BrokerCfg;\n+import io.zeebe.util.exception.UncheckedExecutionException;\n+import java.net.UnknownHostException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class BrokerSpringServerCustomizer\n+    implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n+\n+  @Autowired BrokerCfg brokerCfg;\n+\n+  @Override\n+  public void customize(ConfigurableServletWebServerFactory server) {\n+    final var networkCfg = brokerCfg.getNetwork();\n+    // trigger application of defaults so that the monitoring config no longer has null values\n+    networkCfg.applyDefaults();", "originalCommit": "6e0b574fdc8dc8ba91c30de6d7413ef7acc988ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzM2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435903369", "bodyText": "The broker has not initialized the config yet. Also, we cannot initialize the full BrokerCfg configuration yet, because we don't yet know the folder in which the broker will run.\nI don't think it is a big deal, because right now this is an idempotent operation. This branch of the config tree does not depend on anything the broker adds later.\nI'm not a big fan of it, but I think it's ok.", "author": "pihme", "createdAt": "2020-06-05T12:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MjUyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r437592524", "bodyText": "Yeah, when I said fragile I meant because of this - right now it's an idempotent operation, but it's not really enforced, so I can imagine that changing and us spending time trying to figure out why this is behaving unexpectedly \ud83d\ude05 But you're probably right and I'm being too cautious here", "author": "npepinpe", "createdAt": "2020-06-09T17:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NjA3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r438146078", "bodyText": "I would say so. Nothing wrong with caution, but our users are having far greater pains right now. I am happy to leave this tiny maybe problem to the future.", "author": "pihme", "createdAt": "2020-06-10T14:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2NjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9b0a188e3ae28fb2a864f739de16d0df160659d", "chunk": "diff --git a/dist/src/main/java/io/zeebe/broker/BrokerSpringServerCustomizer.java b/dist/src/main/java/io/zeebe/broker/BrokerSpringServerCustomizer.java\nindex c3aed4945..46cf134ba 100644\n--- a/dist/src/main/java/io/zeebe/broker/BrokerSpringServerCustomizer.java\n+++ b/dist/src/main/java/io/zeebe/broker/BrokerSpringServerCustomizer.java\n\n@@ -9,18 +9,12 @@ package io.zeebe.broker;\n \n import static java.net.InetAddress.getByName;\n \n-import io.prometheus.client.CollectorRegistry;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n import io.zeebe.util.exception.UncheckedExecutionException;\n import java.net.UnknownHostException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration;\n-import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.stereotype.Component;\n \n @Component\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3Mzc1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435373755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class BrokerMonitoirngEndpointTest {\n          \n          \n            \n            public final class BrokerMonitoringEndpointTest {", "author": "npepinpe", "createdAt": "2020-06-04T16:02:51Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.health;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.filter.log.RequestLoggingFilter;\n+import io.restassured.filter.log.ResponseLoggingFilter;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import java.io.IOException;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public final class BrokerMonitoirngEndpointTest {", "originalCommit": "6e0b574fdc8dc8ba91c30de6d7413ef7acc988ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4f7a762503085781fbe4ca9668b77a5f713b98a", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\nsimilarity index 97%\nrename from qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java\nrename to qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\nindex ec2440c0b..2c4306fd4 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\n\n@@ -21,7 +21,7 @@ import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-public final class BrokerMonitoirngEndpointTest {\n+public final class BrokerMonitoringEndpointTest {\n \n   static ZeebeBrokerContainer sutBroker;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NDE1MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4635#discussion_r435374150", "bodyText": "I'm not familiar with this framework RestAssured, but I like it, great stuff \ud83d\udc4d\nMaybe when we wrap up the OKR and we show it off, you can also mention how to test these things, as I don't know if everybody on the team is familiar with this.", "author": "npepinpe", "createdAt": "2020-06-04T16:03:27Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.health;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import io.restassured.builder.RequestSpecBuilder;\n+import io.restassured.filter.log.RequestLoggingFilter;\n+import io.restassured.filter.log.ResponseLoggingFilter;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import java.io.IOException;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public final class BrokerMonitoirngEndpointTest {\n+\n+  static ZeebeBrokerContainer sutBroker;\n+\n+  static RequestSpecification brokerServerSpec;", "originalCommit": "6e0b574fdc8dc8ba91c30de6d7413ef7acc988ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4f7a762503085781fbe4ca9668b77a5f713b98a", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\nsimilarity index 97%\nrename from qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java\nrename to qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\nindex ec2440c0b..2c4306fd4 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoirngEndpointTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/health/BrokerMonitoringEndpointTest.java\n\n@@ -21,7 +21,7 @@ import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-public final class BrokerMonitoirngEndpointTest {\n+public final class BrokerMonitoringEndpointTest {\n \n   static ZeebeBrokerContainer sutBroker;\n \n"}}, {"oid": "d4f7a762503085781fbe4ca9668b77a5f713b98a", "url": "https://github.com/camunda-cloud/zeebe/commit/d4f7a762503085781fbe4ca9668b77a5f713b98a", "message": "chore(broker): accept review suggestions\n\nCo-authored-by: Nicolas Pepin-Perreault <nicolas.pepin-perreault@camunda.com>", "committedDate": "2020-06-05T12:20:26Z", "type": "forcePushed"}, {"oid": "c9b0a188e3ae28fb2a864f739de16d0df160659d", "url": "https://github.com/camunda-cloud/zeebe/commit/c9b0a188e3ae28fb2a864f739de16d0df160659d", "message": "chore(broker): incorporate review comments", "committedDate": "2020-06-10T13:55:16Z", "type": "forcePushed"}, {"oid": "9d8eb261c125834b8e5e3b3ef126a436095d3b3c", "url": "https://github.com/camunda-cloud/zeebe/commit/9d8eb261c125834b8e5e3b3ef126a436095d3b3c", "message": "chore(broker): replace custom HTTP server for Broker and Gateway", "committedDate": "2020-06-11T14:22:31Z", "type": "commit"}, {"oid": "9d8eb261c125834b8e5e3b3ef126a436095d3b3c", "url": "https://github.com/camunda-cloud/zeebe/commit/9d8eb261c125834b8e5e3b3ef126a436095d3b3c", "message": "chore(broker): replace custom HTTP server for Broker and Gateway", "committedDate": "2020-06-11T14:22:31Z", "type": "forcePushed"}]}