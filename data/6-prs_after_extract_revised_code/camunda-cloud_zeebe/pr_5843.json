{"pr_number": 5843, "pr_title": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task.", "pr_createdAt": "2020-11-13T14:07:55Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5843", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2NzkzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525867930", "bodyText": "This means that on cancel() it would execute actor.runDelayed(delay, task). If not cancelled the task will never get executed. It should be as follows:\n    final var delayedTask = actor.runDelayed(delay, task);\n    return () -> delayedTask.cancel();", "author": "deepthidevaki", "createdAt": "2020-11-18T07:36:40Z", "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java", "diffHunk": "@@ -114,6 +115,11 @@ public void scheduleTask(final Duration delay, final Runnable task) {\n     actor.runDelayed(delay, task);\n   }\n \n+  @Override\n+  public ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task) {\n+    return () -> actor.runDelayed(delay, task);", "originalCommit": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTYzOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801639", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-19T11:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2NzkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java b/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java\nindex c0862f3701..c135690393 100644\n--- a/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java\n+++ b/broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java\n\n@@ -117,7 +117,8 @@ final class ExporterContainer implements Controller {\n \n   @Override\n   public ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task) {\n-    return () -> actor.runDelayed(delay, task);\n+    final var scheduledTimer = actor.runDelayed(delay, task);\n+    return scheduledTimer::cancel;\n   }\n \n   public String getId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868555", "bodyText": "Do we need a new method for this? Or just change the return type of scheduleTask?", "author": "deepthidevaki", "createdAt": "2020-11-18T07:38:08Z", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "originalCommit": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAwMDA4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526000089", "bodyText": "I'm thinking about backward compatibility in this case because I'm thinking that this is a part of public API or I'm wrong? :)", "author": "aivinog1", "createdAt": "2020-11-18T11:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwOTUxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528609514", "bodyText": "That's right. It is a public API. Changing return type from void to a non-void object will not break source compatibility - but it will beak binary compatibility. @npepinpe I guess then it will be an issue for external exporters? So we have to keep two different methods with void and non-void return types.", "author": "deepthidevaki", "createdAt": "2020-11-23T10:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMjI0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528612245", "bodyText": "Keep in mind that we don't expect many exporter authors to be implementing their own controller. At most, they might be mocking it. I would still mark the void method as deprecated however so already they start using the new method.", "author": "npepinpe", "createdAt": "2020-11-23T10:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NDcyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530384720", "bodyText": "@deepthidevaki Done, I've added a deprecation JavaDoc and annotation", "author": "aivinog1", "createdAt": "2020-11-25T13:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java b/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\nindex 4138c14017..ddaa217bec 100644\n--- a/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\n+++ b/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\n\n@@ -32,8 +32,17 @@ public interface Controller {\n    *\n    * @param delay time to wait until the task is ran\n    * @param task the task to run\n+   * @deprecated Consider to use {@link #scheduleCancellableTask(Duration, Runnable)}\n    */\n+  @Deprecated(since = \"0.26.0\", forRemoval = true)\n   void scheduleTask(Duration delay, Runnable task);\n \n+  /**\n+   * Schedules a cancellable {@param task} to be ran after {@param delay} has expired.\n+   *\n+   * @param delay time to wait until the task is ran\n+   * @param task the task to run\n+   * @return cancellable task.\n+   */\n   ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODk0MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868941", "bodyText": "Please add some docs here since this is a public api.", "author": "deepthidevaki", "createdAt": "2020-11-18T07:38:58Z", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+public interface ScheduledTask {", "originalCommit": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTc4MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801781", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-19T11:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java b/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\nindex 315b5edef1..a0b590ca27 100644\n--- a/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\n+++ b/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\n\n@@ -15,6 +15,14 @@\n  */\n package io.zeebe.exporter.api.context;\n \n+import java.time.Duration;\n+\n+/**\n+ * Represents a cancellable task.\n+ *\n+ * @see Controller#scheduleCancellableTask(Duration, Runnable)\n+ */\n public interface ScheduledTask {\n+  /** Cancel this task. */\n   void cancel();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MjU2NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525872564", "bodyText": "Let's keep it simple. I don't think these additional interface and class is required. Instead you can modify the run method as follows:\npublic void run() {\n    if (!wasExecuted() && !isCancelled()) {\n      task.run();\n      executed = true;\n    }\n  }", "author": "deepthidevaki", "createdAt": "2020-11-18T07:46:39Z", "path": "test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java", "diffHunk": "@@ -52,4 +70,37 @@ public void run() {\n   public boolean wasExecuted() {\n     return executed;\n   }\n+\n+  @Override\n+  public void cancel() {\n+    if (!isCanceled()) {\n+      task.cancel();\n+      canceled = true;\n+    }\n+  }\n+\n+  public boolean isCanceled() {\n+    return canceled;\n+  }\n+\n+  interface ScheduledRunnable extends ScheduledTask, Runnable {}\n+\n+  private static final class DefaultScheduledTask implements ScheduledRunnable {", "originalCommit": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTgyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801825", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-19T11:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MjU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java b/test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java\nindex ae95c26941..ea5b85cd02 100644\n--- a/test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java\n+++ b/test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java\n\n@@ -71,10 +55,8 @@ public class MockScheduledTask implements Runnable, ScheduledTask {\n     return executed;\n   }\n \n-  @Override\n   public void cancel() {\n     if (!isCanceled()) {\n-      task.cancel();\n       canceled = true;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTY1Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528751656", "bodyText": "Also add documentation here.", "author": "deepthidevaki", "createdAt": "2020-11-23T14:42:33Z", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+", "originalCommit": "130d0893c8d50b421d7b48e68fcd5cdba095c6af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4Mjg5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530382896", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-25T13:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java b/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\nindex 4138c14017..ddaa217bec 100644\n--- a/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\n+++ b/exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java\n\n@@ -32,8 +32,17 @@ public interface Controller {\n    *\n    * @param delay time to wait until the task is ran\n    * @param task the task to run\n+   * @deprecated Consider to use {@link #scheduleCancellableTask(Duration, Runnable)}\n    */\n+  @Deprecated(since = \"0.26.0\", forRemoval = true)\n   void scheduleTask(Duration delay, Runnable task);\n \n+  /**\n+   * Schedules a cancellable {@param task} to be ran after {@param delay} has expired.\n+   *\n+   * @param delay time to wait until the task is ran\n+   * @param task the task to run\n+   * @return cancellable task.\n+   */\n   ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NjI3Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528756272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This interface is used to return a cancellable task from a scheduler.\n          \n          \n            \n             *  Represents a cancellable task.", "author": "deepthidevaki", "createdAt": "2020-11-23T14:49:02Z", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * This interface is used to return a cancellable task from a scheduler.", "originalCommit": "130d0893c8d50b421d7b48e68fcd5cdba095c6af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NDIwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530384204", "bodyText": "Done", "author": "aivinog1", "createdAt": "2020-11-25T13:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NjI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java b/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\nindex 054d31633b..a0b590ca27 100644\n--- a/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\n+++ b/exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java\n\n@@ -18,7 +18,7 @@ package io.zeebe.exporter.api.context;\n import java.time.Duration;\n \n /**\n- * This interface is used to return a cancellable task from a scheduler.\n+ * Represents a cancellable task.\n  *\n  * @see Controller#scheduleCancellableTask(Duration, Runnable)\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528757878", "bodyText": "To test this, you don't have to export anything. So you can directly schedule a task on the exporter. No need to schedule it using exporter.onExport.", "author": "deepthidevaki", "createdAt": "2020-11-23T14:51:08Z", "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(", "originalCommit": "130d0893c8d50b421d7b48e68fcd5cdba095c6af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NTQ0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530275443", "bodyText": "@deepthidevaki Well, I'm trying to do this:\nIndex: broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\t(revision 130d0893c8d50b421d7b48e68fcd5cdba095c6af)\n+++ broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\t(date 1606299556914)\n@@ -393,16 +393,15 @@\n     final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n     final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n     final Duration delay = Duration.ofSeconds(10);\n-\n+    startExporterDirector(exporterDescriptors);\n     final ControlledTestExporter exporter = exporters.get(0);\n-    exporter.onExport(\n-        r -> {\n-          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n-          timerScheduledLatch.countDown();\n-        });\n+    verify(exporter, TIMEOUT).open(any());\n \n     // when\n-    startExporterDirector(exporterDescriptors);\n+    exporter\n+        .getController()\n+        .scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+    timerScheduledLatch.countDown();\n \n     writeEvent();\n \nBut I get this error:\njava.lang.UnsupportedOperationException: Incorrect usage of actor. runDelayed(...): must be called from actor thread\n\n\tat io.zeebe.util.sched.ActorThread.ensureCalledFromActorThread(ActorThread.java:149)\n\tat io.zeebe.util.sched.ActorControl.ensureCalledFromWithinActor(ActorControl.java:403)\n\tat io.zeebe.util.sched.ActorControl.runDelayed(ActorControl.java:174)\n\tat io.zeebe.broker.exporter.stream.ExporterContainer.scheduleCancellableTask(ExporterContainer.java:120)\n\tat io.zeebe.broker.exporter.stream.ExporterDirectorTest.shouldExecuteScheduledCancellableTask(ExporterDirectorTest.java:404)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\nDo I do something wrong? \ud83e\udd14", "author": "aivinog1", "createdAt": "2020-11-25T10:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTcyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530321724", "bodyText": "Oops. My mistake. I think you have to then call it with in exporter.onExport() or exporter.onOpen()", "author": "deepthidevaki", "createdAt": "2020-11-25T12:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\nindex 3563677e56..7c2dd9d0a6 100755\n--- a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\n\n@@ -418,17 +417,19 @@ public final class ExporterDirectorTest {\n   public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n     // given\n     final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n     final Duration delay = Duration.ofSeconds(10);\n \n     final var exporter = exporters.get(0);\n+    final var shouldBeNotModifiedVariable = new AtomicLong(0);\n     exporter.onExport(\n         r -> {\n-          final var scheduledTask =\n+          final var taskToCancel =\n               exporter\n                   .getController()\n-                  .scheduleCancellableTask(\n-                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n-          scheduledTask.cancel();\n+                  .scheduleCancellableTask(delay, () -> shouldBeNotModifiedVariable.set(1));\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          taskToCancel.cancel();\n           timerScheduledLatch.countDown();\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528764949", "bodyText": "Here, we want to verify if the task was actually cancelled. This assert does not ensure that the task was not executed. I I would suggest something similar to following:\nstartExporterDirector(exporterDescriptors);\nvar taskToCancel = exporter.getController().scheduleCancellableTask(delay, // set some value);\nvar taskToExecute = exporter.getController().scheduleCancellableTask(delay,   () -> latch.countdown());\ntaskToCancel.cancel();\n// increase the clock\nrule.getClock().addTime(delay);\n// wait until the second task is executed\nlatch.await(..);\n// Verify the cancelled task is not executed - that is the value is not set", "author": "deepthidevaki", "createdAt": "2020-11-23T15:00:09Z", "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          final var scheduledTask =\n+              exporter\n+                  .getController()\n+                  .scheduleCancellableTask(\n+                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n+          scheduledTask.cancel();\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(exporter.getExportedRecords()).hasSize(1);", "originalCommit": "130d0893c8d50b421d7b48e68fcd5cdba095c6af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4MTg1Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530381856", "bodyText": "Done, considering: #5843 (comment)", "author": "aivinog1", "createdAt": "2020-11-25T13:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\nindex 3563677e56..7c2dd9d0a6 100755\n--- a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\n\n@@ -418,17 +417,19 @@ public final class ExporterDirectorTest {\n   public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n     // given\n     final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n     final Duration delay = Duration.ofSeconds(10);\n \n     final var exporter = exporters.get(0);\n+    final var shouldBeNotModifiedVariable = new AtomicLong(0);\n     exporter.onExport(\n         r -> {\n-          final var scheduledTask =\n+          final var taskToCancel =\n               exporter\n                   .getController()\n-                  .scheduleCancellableTask(\n-                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n-          scheduledTask.cancel();\n+                  .scheduleCancellableTask(delay, () -> shouldBeNotModifiedVariable.set(1));\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          taskToCancel.cancel();\n           timerScheduledLatch.countDown();\n         });\n \n"}}, {"oid": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "url": "https://github.com/camunda-cloud/zeebe/commit/6278641ddb90c2f1996412cdb442ea5404a5d51c", "message": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task.", "committedDate": "2020-11-27T04:50:20Z", "type": "commit"}, {"oid": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "url": "https://github.com/camunda-cloud/zeebe/commit/6278641ddb90c2f1996412cdb442ea5404a5d51c", "message": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task.", "committedDate": "2020-11-27T04:50:20Z", "type": "forcePushed"}]}