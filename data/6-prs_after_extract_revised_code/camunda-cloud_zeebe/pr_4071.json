{"pr_number": 4071, "pr_title": "chore(util): fix and add tests for health monitor", "pr_createdAt": "2020-03-18T12:25:03Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4071", "timeline": [{"oid": "dcd056bb507bf9742a1c7c6872a95003a6c524ed", "url": "https://github.com/camunda-cloud/zeebe/commit/dcd056bb507bf9742a1c7c6872a95003a6c524ed", "message": "chore(util): fix and add tests for health monitor", "committedDate": "2020-03-18T12:51:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDA0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394330045", "bodyText": "Nit: could we extract the closures to methods? e.g.\n@Override\npublic void onFailure() {\n  actor.run(this::onComponentFailure);\n}\n\nprivate void onComponentFailure() {\n  log.error(\"{} failed, marking it as unhealthy\", componentName);\n  componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n  calculateHealth();\n}\nI have no strong arguments other than I find it more readable, but could just be me \ud83d\ude05", "author": "npepinpe", "createdAt": "2020-03-18T13:04:57Z", "path": "util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java", "diffHunk": "@@ -131,12 +114,22 @@ private HealthStatus getHealth(final String componentName) {\n \n     @Override\n     public void onFailure() {\n-      onComponentFailure(componentName);\n+      actor.run(\n+          () -> {\n+            log.error(\"{} failed, marking it as unhealthy\", componentName);\n+            componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n+            calculateHealth();\n+          });\n     }", "originalCommit": "dcd056bb507bf9742a1c7c6872a95003a6c524ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTM2Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394331363", "bodyText": "It was like this before. I don't know why I changed \ud83d\ude00", "author": "deepthidevaki", "createdAt": "2020-03-18T13:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a101f86af62e60b85bac1d17d0b0245c1555c2af", "chunk": "diff --git a/util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java b/util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java\nindex c3db53b91..e95875a09 100644\n--- a/util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java\n+++ b/util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java\n\n@@ -114,22 +114,24 @@ public class CriticalComponentsHealthMonitor implements HealthMonitor {\n \n     @Override\n     public void onFailure() {\n-      actor.run(\n-          () -> {\n-            log.error(\"{} failed, marking it as unhealthy\", componentName);\n-            componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n-            calculateHealth();\n-          });\n+      actor.run(this::onComponentFailure);\n     }\n \n     @Override\n     public void onRecovered() {\n-      actor.run(\n-          () -> {\n-            log.debug(\"{} recovered, marking it as healthy\", componentName);\n-            componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.HEALTHY);\n-            calculateHealth();\n-          });\n+      actor.run(this::onComponentRecovered);\n+    }\n+\n+    private void onComponentFailure() {\n+      log.error(\"{} failed, marking it as unhealthy\", componentName);\n+      componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n+      calculateHealth();\n+    }\n+\n+    private void onComponentRecovered() {\n+      log.debug(\"{} recovered, marking it as healthy\", componentName);\n+      componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.HEALTHY);\n+      calculateHealth();\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDgzNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394330835", "bodyText": "I like this over ControlledActorScheduler imho \ud83d\udc4d good idea", "author": "npepinpe", "createdAt": "2020-03-18T13:06:17Z", "path": "util/src/test/java/io/zeebe/util/health/CriticalComponentsHealthMonitorTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util.health;\n+\n+import static io.zeebe.util.TestUtil.waitUntil;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.ActorControl;\n+import io.zeebe.util.sched.testing.ActorSchedulerRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.LoggerFactory;\n+\n+public class CriticalComponentsHealthMonitorTest {\n+\n+  @Rule public ActorSchedulerRule actorSchedulerRule = new ActorSchedulerRule();\n+  private CriticalComponentsHealthMonitor monitor;\n+  private ActorControl actorControl;\n+\n+  @Before\n+  public void setup() {\n+    final Actor testActor =\n+        new Actor() {\n+          @Override\n+          public String getName() {\n+            return \"test-actor\";\n+          }\n+\n+          @Override\n+          protected void onActorStarting() {\n+            monitor = new CriticalComponentsHealthMonitor(actor, LoggerFactory.getLogger(\"test\"));\n+            actorControl = actor;\n+          }\n+\n+          @Override\n+          protected void onActorStarted() {\n+            monitor.startMonitoring();\n+          }\n+        };\n+    actorSchedulerRule.submitActor(testActor).join();\n+  }\n+\n+  @Test\n+  public void shouldMonitorComponent() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+\n+    // when\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldRecover() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+    waitUntilAllDone();\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component.setHealthStatus(HealthStatus.HEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldMonitorMultipleComponent() {\n+    // given\n+    final ControllableComponent component1 = new ControllableComponent();\n+    final ControllableComponent component2 = new ControllableComponent();\n+\n+    monitor.registerComponent(\"test1\", component1);\n+    monitor.registerComponent(\"test2\", component2);\n+\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+\n+    // when\n+    component2.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component2.setHealthStatus(HealthStatus.HEALTHY);\n+    component1.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component1.setHealthStatus(HealthStatus.HEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldRemoveComponent() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+    waitUntil(() -> monitor.getHealthStatus() == HealthStatus.HEALTHY);\n+\n+    // when\n+    monitor.removeComponent(\"test\");\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  private void waitUntilAllDone() {\n+    actorControl.call(() -> null).join();", "originalCommit": "dcd056bb507bf9742a1c7c6872a95003a6c524ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a101f86af62e60b85bac1d17d0b0245c1555c2af", "url": "https://github.com/camunda-cloud/zeebe/commit/a101f86af62e60b85bac1d17d0b0245c1555c2af", "message": "chore(util): fix and add tests for health monitor", "committedDate": "2020-03-18T13:11:42Z", "type": "commit"}, {"oid": "a101f86af62e60b85bac1d17d0b0245c1555c2af", "url": "https://github.com/camunda-cloud/zeebe/commit/a101f86af62e60b85bac1d17d0b0245c1555c2af", "message": "chore(util): fix and add tests for health monitor", "committedDate": "2020-03-18T13:11:42Z", "type": "forcePushed"}]}