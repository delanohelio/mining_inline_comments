{"pr_number": 4268, "pr_title": "Only init variable names to nil for output element variable", "pr_createdAt": "2020-04-07T13:45:26Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4268", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMjg2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407912861", "bodyText": "Please add some unit tests for the different implementations.", "author": "saig0", "createdAt": "2020-04-14T07:10:37Z", "path": "expression-language/src/main/java/io/zeebe/el/Expression.java", "diffHunk": "@@ -7,12 +7,20 @@\n  */\n package io.zeebe.el;\n \n+import java.util.Optional;\n+\n /** A parsed expression. */\n public interface Expression {\n \n   /** @return the (raw) expression as string */\n   String getExpression();\n \n+  /**\n+   * @return optional of the name of the variable if expression is a single variable or a property\n+   *     of a single variable, otherwise empty\n+   */\n+  Optional<String> getVariableName();", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzUyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407917521", "bodyText": "This check is done in completeJobs()", "author": "saig0", "createdAt": "2020-04-14T07:19:42Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\nindex 3d3f28b11..4203edb08 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n\n@@ -539,28 +539,67 @@ public final class MultiInstanceActivityTest {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))\n+        .noneMatch(\"number(string(loopCounter) + string(loopCounter))\"::equals);\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxOTEzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407919131", "bodyText": "What do you want to check here?\nI think that we should verify that\n\nthe variable is created without .nested in its name (which is the issue that was fixed)\nthe variable is initialized with null\nthe values are collected in the output collection", "author": "saig0", "createdAt": "2020-04-14T07:22:54Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();\n+\n+    // complete job\n+    completeJobs(\n+        workflowInstanceKey,\n+        INPUT_COLLECTION.size(),\n+        i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n+\n+    // then\n+    final List<Long> scopeKeys =\n+        RecordingExporter.variableRecords(VariableIntent.CREATED)\n+            .withName(OUTPUT_ELEMENT_EXPRESSION)\n+            .map(Record::getValue)\n+            .map(VariableRecordValue::getScopeKey)\n+            .limit(3)\n+            .collect(Collectors.toList());\n+    assertThat(scopeKeys)\n+        .hasSize(3)\n+        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));", "originalCommit": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\nindex 3d3f28b11..4203edb08 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n\n@@ -539,28 +539,67 @@ public final class MultiInstanceActivityTest {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))\n+        .noneMatch(\"number(string(loopCounter) + string(loopCounter))\"::equals);\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n   }\n \n   @Test\n"}}, {"oid": "509f41cabfab36f2e1a33a905375b027e2f4035f", "url": "https://github.com/camunda-cloud/zeebe/commit/509f41cabfab36f2e1a33a905375b027e2f4035f", "message": "chore(engine): resolve review commments\n\n- remove unnecessary wait for jobs created\n- alter test to check for null and output collection result\n- add test to check no variables created for more complex expressions\n- add tests for Expression.getVariableName", "committedDate": "2020-04-14T11:35:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Mzg5NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408083895", "bodyText": "That looks tricky \ud83d\ude02", "author": "saig0", "createdAt": "2020-04-14T12:06:52Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))", "originalCommit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\nindex 4203edb08..a3e711723 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n\n@@ -587,10 +587,11 @@ public final class MultiInstanceActivityTest {\n \n     // then\n     assertThat(\n-            RecordingExporter.variableRecords(VariableIntent.CREATED)\n-                .map(Record::getValue)\n-                .map(VariableRecordValue::getName)\n-                .limit(10))\n+        RecordingExporter.records()\n+            .limitToWorkflowInstance(workflowInstanceKey)\n+            .variableRecords()\n+            .map(Record::getValue)\n+            .map(VariableRecordValue::getName))\n         .noneMatch(\"number(string(loopCounter) + string(loopCounter))\"::equals);\n \n     assertThat(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408086880", "bodyText": "Limiting the records to a specific number is a bit unsteady. Instead, we can limit the records from creating a workflow instance to its completion/termination.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        RecordingExporter.variableRecords(VariableIntent.CREATED)\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName)\n          \n          \n            \n                            .limit(10))\n          \n          \n            \n                         RecordingExporter.records()\n          \n          \n            \n                            .limitToWorkflowInstance(workflowInstanceKey)\n          \n          \n            \n                            .variableRecords()\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName))", "author": "saig0", "createdAt": "2020-04-14T12:12:29Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))", "originalCommit": "509f41cabfab36f2e1a33a905375b027e2f4035f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTk2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408231960", "bodyText": "Nice, that's a good one to learn about.", "author": "korthout", "createdAt": "2020-04-14T15:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\nindex 4203edb08..a3e711723 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java\n\n@@ -587,10 +587,11 @@ public final class MultiInstanceActivityTest {\n \n     // then\n     assertThat(\n-            RecordingExporter.variableRecords(VariableIntent.CREATED)\n-                .map(Record::getValue)\n-                .map(VariableRecordValue::getName)\n-                .limit(10))\n+        RecordingExporter.records()\n+            .limitToWorkflowInstance(workflowInstanceKey)\n+            .variableRecords()\n+            .map(Record::getValue)\n+            .map(VariableRecordValue::getName))\n         .noneMatch(\"number(string(loopCounter) + string(loopCounter))\"::equals);\n \n     assertThat(\n"}}, {"oid": "23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "url": "https://github.com/camunda-cloud/zeebe/commit/23f7a2e624cbbb30a7d7117a27eb3ef5d2ab600c", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:36:21Z", "type": "forcePushed"}, {"oid": "75a61fb2cf7cd43a218299d99f70f69da5780106", "url": "https://github.com/camunda-cloud/zeebe/commit/75a61fb2cf7cd43a218299d99f70f69da5780106", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:37:56Z", "type": "commit"}, {"oid": "75a61fb2cf7cd43a218299d99f70f69da5780106", "url": "https://github.com/camunda-cloud/zeebe/commit/75a61fb2cf7cd43a218299d99f70f69da5780106", "message": "chore(engine): only init variable names to nil for output element", "committedDate": "2020-04-14T15:37:56Z", "type": "forcePushed"}]}