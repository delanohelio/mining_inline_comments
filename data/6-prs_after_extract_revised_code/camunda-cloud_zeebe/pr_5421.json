{"pr_number": 5421, "pr_title": "Detect reprocessing issues", "pr_createdAt": "2020-09-24T13:45:58Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5421", "timeline": [{"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "url": "https://github.com/camunda-cloud/zeebe/commit/3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "message": "chore(engine): detect reprocessing failures\n\n* try to detect reprocessing issues while doing the reprocessing", "committedDate": "2020-09-25T04:52:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTg5NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494931895", "bodyText": "This test failed with the detection. Here it is missing the CANCEL command for the timer. But adding the command would lead to a different rejecting reason of the TRIGGER command (NOT_FOUND instead of INVALID_STATE). So, I removed the follow-up event ELEMENT_TERMINATED.", "author": "saig0", "createdAt": "2020-09-25T11:44:00Z", "path": "engine/src/test/java/io/zeebe/engine/processing/timer/ConcurrentTimerEventTest.java", "diffHunk": "@@ -152,10 +152,6 @@ public void shouldRejectTriggerCommandIfElementInstanceIsLeft() {\n             .workflowInstance(WorkflowInstanceIntent.ELEMENT_TERMINATING, eventActivated.getValue())\n             .key(eventActivated.getKey())\n             .causedBy(1),\n-        RecordToWrite.event()\n-            .workflowInstance(WorkflowInstanceIntent.ELEMENT_TERMINATED, eventActivated.getValue())\n-            .key(eventActivated.getKey())\n-            .causedBy(2),", "originalCommit": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjYyNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494932626", "bodyText": "I added the test case for the next release. I was also useful to verify that the issue is detected :)", "author": "saig0", "createdAt": "2020-09-25T11:45:34Z", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -101,6 +101,42 @@\n                 .afterUpgrade(UpgradeTest::publishMessage)\n                 .done()\n           },\n+          // TODO (saig0): enable the test case when upgrading from 0.25.0\n+          // - an upgrade from 0.24.0 is not possible because a bug fix (#4959) causes an issue in\n+          // the reprocessing (#5268)\n+          //            {\n+          //            \"message event sub-process\",\n+          //            scenario()\n+          //                .deployWorkflow(\n+          //                    Bpmn.createExecutableProcess(PROCESS_ID)\n+          //                        .eventSubProcess(\n+          //                            \"event-subprocess\",\n+          //                            eventSubProcess ->\n+          //                                eventSubProcess\n+          //                                    .startEvent()\n+          //                                    .message(\n+          //                                        m ->\n+          // m.name(MESSAGE).zeebeCorrelationKeyExpression(\"key\"))\n+          //                                    .interrupting(false)\n+          //                                    .endEvent())\n+          //                        .startEvent()\n+          //                        .serviceTask(TASK, t -> t.zeebeJobType(TASK))\n+          //                        .endEvent()\n+          //                        .done())\n+          //                .createInstance(Map.of(\"key\", \"123\"))\n+          //                .beforeUpgrade(\n+          //                    state -> {\n+          //                      publishMessage(state, -1L, -1L);\n+          //\n+          //                      TestUtil.waitUntil(\n+          //                          () -> state.hasElementInState(\"event-subprocess\",\n+          // \"ELEMENT_COMPLETED\"));\n+          //\n+          //                      return activateJob(state);\n+          //                    })\n+          //                .afterUpgrade(UpgradeTest::completeJob)\n+          //                .done()\n+          //          },", "originalCommit": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MzA2NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496483065", "bodyText": "How do we remind ourselves to enable this? :)", "author": "deepthidevaki", "createdAt": "2020-09-29T07:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjYyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzAxOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494933019", "bodyText": "I ignored the test cases with a snapshot because they're not working.", "author": "saig0", "createdAt": "2020-09-25T11:46:27Z", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }", "originalCommit": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNDYwNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494934604", "bodyText": "I ignored the snapshot case but I still want to add my changes here. They work for some of the cases but not for all of them. But it is something we can start \ud83d\ude05", "author": "saig0", "createdAt": "2020-09-25T11:49:58Z", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {\n+\n+      state.close();\n+\n+      state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(false);\n+\n+      // since 0.24, no snapshot is created when the broker is closed\n+      Awaitility.await()\n+          .atMost(Duration.ofMinutes(2))\n+          .untilAsserted(\n+              () ->\n+                  assertThat(snapshot)\n+                      .describedAs(\"Expected that a snapshot is created\")\n+                      .exists()\n+                      .isNotEmptyDirectory());\n+\n+      state.close();\n+\n+    } else {\n+      // since 0.24, no snapshot is created when the broker is closed\n+      state.close();\n+\n+      assertThat(snapshot)\n+          .describedAs(\"Expected that no snapshot is created\")\n+          .exists()\n+          .isEmptyDirectory();\n     }", "originalCommit": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "url": "https://github.com/camunda-cloud/zeebe/commit/9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "message": "chore(engine): detect reprocessing failures\n\n* try to detect reprocessing issues while doing the reprocessing\n* the detection helps to root cause upgrade issues", "committedDate": "2020-09-25T11:52:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1MzUyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496453521", "bodyText": "What if there is no such record?", "author": "deepthidevaki", "createdAt": "2020-09-29T06:45:08Z", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -342,4 +370,54 @@ private void onRecovered(final long lastProcessedPosition) {\n     recoveryFuture.complete(lastProcessedPosition);\n     failedEventPositions.clear();\n   }\n+\n+  private void verifyRecordMatchesToReprocessing(final TypedRecord<?> currentEvent) {\n+\n+    if (currentEvent.getSourceRecordPosition() < 0\n+        || currentEvent.getSourceRecordPosition() <= snapshotPosition) {\n+      // ignore commands (i.e. no source currentEvent position) and records that are not produced by\n+      // the reprocessing (i.e. the source currentEvent is already compacted)\n+      return;\n+    }\n+\n+    // if a record is not written to the log stream then the state could be corrupted\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(record -> record.getSourceRecordPosition() < currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(\n+            missingRecordOnLogStream -> {\n+              throw new InconsistentReprocessingException(\n+                  \"Records were created on reprocessing but not written on the log stream.\",\n+                  typedEvent,\n+                  missingRecordOnLogStream);\n+            });\n+\n+    // If the record was not written on reprocessing then the next record may have a different key,\n+    // or the state is corrupted. But since the source record position can be wrong (#5420), we can\n+    // not fail the reprocessing at the moment.\n+\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(\n+            record -> record.getSourceRecordPosition() == currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(", "originalCommit": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMzY2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496513669", "bodyText": "If there was no such record written on reprocessing then we can't apply any check \ud83d\ude05\nBecause of #5420, we can not fail and assume that something went wrong.", "author": "saig0", "createdAt": "2020-09-29T08:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1MzUyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496460756", "bodyText": "Here the error message still says  \"source event\".", "author": "deepthidevaki", "createdAt": "2020-09-29T07:00:08Z", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -211,11 +220,11 @@ private void readNextEvent() {\n     }\n \n     currentEvent = logStreamReader.next();\n-    if (currentEvent.getPosition() > lastSourceEventPosition) {\n+    if (currentEvent.getPosition() > lastFollowUpEventPosition) {\n       throw new IllegalStateException(\n           String.format(\n               ERROR_MESSAGE_REPROCESSING_NO_SOURCE_EVENT,", "originalCommit": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNjA3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496516079", "bodyText": "True. I can change it to \"Expected to find last follow-up event position '%d', but last position was '%d'. Failed to reprocess on processor\"", "author": "saig0", "createdAt": "2020-09-29T08:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODgwMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496558802", "bodyText": "\ud83d\udc4d", "author": "deepthidevaki", "createdAt": "2020-09-29T09:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ba742de7f0975eb6c48aa595a269f54d973c745a", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java b/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\nindex fcd54c2c7..66a877478 100644\n--- a/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\n+++ b/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\n\n@@ -216,14 +216,14 @@ public final class ReProcessingStateMachine {\n   private void readNextEvent() {\n     if (!logStreamReader.hasNext()) {\n       throw new IllegalStateException(\n-          String.format(ERROR_MESSAGE_REPROCESSING_NO_NEXT_EVENT, lastSourceEventPosition));\n+          String.format(ERROR_MESSAGE_REPROCESSING_NO_NEXT_EVENT, lastFollowUpEventPosition));\n     }\n \n     currentEvent = logStreamReader.next();\n     if (currentEvent.getPosition() > lastFollowUpEventPosition) {\n       throw new IllegalStateException(\n           String.format(\n-              ERROR_MESSAGE_REPROCESSING_NO_SOURCE_EVENT,\n+              ERROR_MESSAGE_REPROCESSING_NO_FOLLOW_UP_EVENT,\n               lastFollowUpEventPosition,\n               currentEvent.getPosition()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MTMzMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496481333", "bodyText": "Is this log required? Previous log says it was successfully reprocessed.", "author": "deepthidevaki", "createdAt": "2020-09-29T07:37:49Z", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -330,8 +348,18 @@ private void updateStateUntilDone() {\n   }\n \n   private void onRecordReprocessed(final LoggedEvent currentEvent) {\n-    if (currentEvent.getPosition() == lastSourceEventPosition) {\n+    reprocessingStreamWriter.removeRecord(\n+        currentEvent.getKey(), currentEvent.getSourceEventPosition());\n+\n+    // do reprocessing until the last source event but read until the last follow-up event to check\n+    // for inconsistent reprocessing records\n+    if (currentEvent.getPosition() >= lastFollowUpEventPosition) {\n       LOG.info(LOG_STMT_REPROCESSING_FINISHED, currentEvent.getPosition());\n+      LOG.debug(\"No reprocessing issue detected on partition {}.\", zeebeState.getPartitionId());", "originalCommit": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMDQ2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496510467", "bodyText": "It is not required. I thought it is more explicit but I can also remove it.", "author": "saig0", "createdAt": "2020-09-29T08:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "ba742de7f0975eb6c48aa595a269f54d973c745a", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java b/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\nindex fcd54c2c7..66a877478 100644\n--- a/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\n+++ b/engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java\n\n@@ -355,7 +355,6 @@ public final class ReProcessingStateMachine {\n     // for inconsistent reprocessing records\n     if (currentEvent.getPosition() >= lastFollowUpEventPosition) {\n       LOG.info(LOG_STMT_REPROCESSING_FINISHED, currentEvent.getPosition());\n-      LOG.debug(\"No reprocessing issue detected on partition {}.\", zeebeState.getPartitionId());\n \n       // reset the position to the first event where the processing should start\n       logStreamReader.seekToNextEvent(lastSourceEventPosition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496487154", "bodyText": "This looks like a temp fix for #5385. Then why don't the tests works with snapshot?", "author": "deepthidevaki", "createdAt": "2020-09-29T07:47:56Z", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {", "originalCommit": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTYxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496535614", "bodyText": "In some cases, the broker creates no snapshot. It prints the message: We will skip taking this snapshot, because we haven't processed something yet..", "author": "saig0", "createdAt": "2020-09-29T08:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MDE3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496640179", "bodyText": "The snapshot is not created because of a bug in 0.24.0 that is fixed in a later version.", "author": "saig0", "createdAt": "2020-09-29T11:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ba742de7f0975eb6c48aa595a269f54d973c745a", "url": "https://github.com/camunda-cloud/zeebe/commit/ba742de7f0975eb6c48aa595a269f54d973c745a", "message": "chore(engine): detect reprocessing failures\n\n* try to detect reprocessing issues while doing the reprocessing\n* the detection helps to root cause upgrade issues", "committedDate": "2020-09-30T07:22:31Z", "type": "commit"}, {"oid": "ba742de7f0975eb6c48aa595a269f54d973c745a", "url": "https://github.com/camunda-cloud/zeebe/commit/ba742de7f0975eb6c48aa595a269f54d973c745a", "message": "chore(engine): detect reprocessing failures\n\n* try to detect reprocessing issues while doing the reprocessing\n* the detection helps to root cause upgrade issues", "committedDate": "2020-09-30T07:22:31Z", "type": "forcePushed"}]}