{"pr_number": 4192, "pr_title": "feat(engine): ensure non-static expressions", "pr_createdAt": "2020-03-31T14:33:12Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4192", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3ODI0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400978249", "bodyText": "Shouldn't there be an asZeebeExpression(...) here? See e.g. AbstractFlowNodeBuilder.confitionExpression() as example.\nIf this is intentional, it is at least confusing", "author": "pihme", "createdAt": "2020-03-31T14:53:00Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java", "diffHunk": "@@ -187,8 +187,8 @@ public ConditionalEventDefinitionBuilder conditionalEventDefinition(final String\n   }\n \n   @Override\n-  public B condition(final String condition) {\n-    conditionalEventDefinition().condition(condition);\n+  public B conditionExpression(final String conditionExpression) {\n+    conditionalEventDefinition().condition(conditionExpression);", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1MDU2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401350561", "bodyText": "Good catch. This change was not intended. I reverted it.", "author": "saig0", "createdAt": "2020-04-01T04:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3ODI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java\nindex 233759ce19..61b93f0ff2 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java\n\n@@ -187,8 +187,8 @@ public abstract class AbstractCatchEventBuilder<\n   }\n \n   @Override\n-  public B conditionExpression(final String conditionExpression) {\n-    conditionalEventDefinition().condition(conditionExpression);\n+  public B condition(final String condition) {\n+    conditionalEventDefinition().condition(condition);\n     return myself;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4MjMxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400982313", "bodyText": "maybe rename to inputCollectionExpression to follow the naming convention used elsewhere", "author": "pihme", "createdAt": "2020-03-31T14:58:08Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java", "diffHunk": "@@ -93,10 +93,14 @@ public B completionCondition(final String expression) {\n   public B zeebeInputCollection(final String inputCollection) {\n     final ZeebeLoopCharacteristics characteristics =\n         getCreateSingleExtensionElement(ZeebeLoopCharacteristics.class);\n-    characteristics.setInputCollection(asZeebeExpression(inputCollection));\n+    characteristics.setInputCollection(inputCollection);\n     return myself;\n   }\n \n+  public B zeebeInputCollectionExpression(final String inputCollection) {", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1MTE0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401351142", "bodyText": "There is another naming convention ;) Every Zeebe specific attribute (i.e. not default BPMN) has the prefix zeebe.", "author": "saig0", "createdAt": "2020-04-01T04:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4MjMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NTY1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401385654", "bodyText": "I was referring to the parameter name, not the method name", "author": "pihme", "createdAt": "2020-04-01T06:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4MjMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\nindex 460ccc28d3..c5caa0404f 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\n\n@@ -97,8 +97,8 @@ public class AbstractMultiInstanceLoopCharacteristicsBuilder<\n     return myself;\n   }\n \n-  public B zeebeInputCollectionExpression(final String inputCollection) {\n-    return zeebeInputCollection(asZeebeExpression(inputCollection));\n+  public B zeebeInputCollectionExpression(final String inputCollectionExpression) {\n+    return zeebeInputCollection(asZeebeExpression(inputCollectionExpression));\n   }\n \n   public B zeebeInputElement(final String inputElement) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4MzM1NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400983355", "bodyText": "Maybe rename to outputElementExpression to follow the naming convention used elsewhere", "author": "pihme", "createdAt": "2020-03-31T14:59:19Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java", "diffHunk": "@@ -114,7 +118,11 @@ public B zeebeOutputCollection(final String outputCollection) {\n   public B zeebeOutputElement(final String outputElement) {\n     final ZeebeLoopCharacteristics characteristics =\n         getCreateSingleExtensionElement(ZeebeLoopCharacteristics.class);\n-    characteristics.setOutputElement(asZeebeExpression(outputElement));\n+    characteristics.setOutputElement(outputElement);\n     return myself;\n   }\n+\n+  public B zeebeOutputElementExpression(final String outputElement) {", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\nindex 460ccc28d3..c5caa0404f 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java\n\n@@ -122,7 +122,7 @@ public class AbstractMultiInstanceLoopCharacteristicsBuilder<\n     return myself;\n   }\n \n-  public B zeebeOutputElementExpression(final String outputElement) {\n-    return zeebeOutputElement(asZeebeExpression(outputElement));\n+  public B zeebeOutputElementExpression(final String outputElementExpression) {\n+    return zeebeOutputElement(asZeebeExpression(outputElementExpression));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4NDAxMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400984010", "bodyText": "Maybe rename to correlationKeyExpression to follow naming conventions used elsewhere", "author": "pihme", "createdAt": "2020-03-31T15:00:08Z", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/zeebe/MessageBuilder.java", "diffHunk": "@@ -31,10 +31,13 @@ public MessageBuilder name(final String name) {\n     return this;\n   }\n \n-  public MessageBuilder zeebeCorrelationKey(final String zeebeCorrelationKey) {\n+  public MessageBuilder zeebeCorrelationKey(final String correlationKey) {\n     final ZeebeSubscription subscription = getCreateSingleExtensionElement(ZeebeSubscription.class);\n-\n-    subscription.setCorrelationKey(asZeebeExpression(zeebeCorrelationKey));\n+    subscription.setCorrelationKey(correlationKey);\n     return this;\n   }\n+\n+  public MessageBuilder zeebeCorrelationKeyExpression(final String correlationKey) {", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/zeebe/MessageBuilder.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/zeebe/MessageBuilder.java\nindex cdff1d983a..6bdcd14f69 100644\n--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/zeebe/MessageBuilder.java\n+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/builder/zeebe/MessageBuilder.java\n\n@@ -37,7 +37,7 @@ public class MessageBuilder extends AbstractBaseElementBuilder<MessageBuilder, M\n     return this;\n   }\n \n-  public MessageBuilder zeebeCorrelationKeyExpression(final String correlationKey) {\n-    return zeebeCorrelationKey(asZeebeExpression(correlationKey));\n+  public MessageBuilder zeebeCorrelationKeyExpression(final String correlationKeyExpression) {\n+    return zeebeCorrelationKey(asZeebeExpression(correlationKeyExpression));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4ODc5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400988790", "bodyText": "Not sure what to make of this.\nTEST_CONDITION =\"${true}\";\nDoesn't look like a FEEL expression to me. Might be a Json Path expression, but I thought we got rid of those?\nIf it is an expression, please rename the constant.", "author": "pihme", "createdAt": "2020-03-31T15:06:20Z", "path": "bpmn-model/src/test/java/io/zeebe/model/bpmn/builder/ProcessBuilderTest.java", "diffHunk": "@@ -1832,7 +1832,7 @@ public void testIntermediateConditionalEventDefinitionShortCut() {\n         Bpmn.createProcess()\n             .startEvent()\n             .intermediateCatchEvent(CATCH_ID)\n-            .condition(TEST_CONDITION)\n+            .conditionExpression(TEST_CONDITION)", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5MDk3Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400990977", "bodyText": "Also, BpmnTestConstantscould use some culling. My IDE tells me that many constants are not used anywhere", "author": "pihme", "createdAt": "2020-03-31T15:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4ODc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1Mzg5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401353890", "bodyText": "This change was not intended. I reverted it.\nThis test class and most of the other stuff in the bpmn-model module (i.e. everything not prefixed with Zeebe) is forked from the Camunda model API. Let's not tough these classes \ud83d\ude05  Keeping the fork in \"sync\" with the origin may help us to adopt changes in the upstream module.", "author": "saig0", "createdAt": "2020-04-01T04:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4ODc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/test/java/io/zeebe/model/bpmn/builder/ProcessBuilderTest.java b/bpmn-model/src/test/java/io/zeebe/model/bpmn/builder/ProcessBuilderTest.java\nindex 4bfc0211a4..e27740b67c 100644\n--- a/bpmn-model/src/test/java/io/zeebe/model/bpmn/builder/ProcessBuilderTest.java\n+++ b/bpmn-model/src/test/java/io/zeebe/model/bpmn/builder/ProcessBuilderTest.java\n\n@@ -1832,7 +1832,7 @@ public class ProcessBuilderTest {\n         Bpmn.createProcess()\n             .startEvent()\n             .intermediateCatchEvent(CATCH_ID)\n-            .conditionExpression(TEST_CONDITION)\n+            .condition(TEST_CONDITION)\n             .endEvent()\n             .done();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5ODg5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r400998897", "bodyText": "This looks like a path expression to me. If we FEELify it, it will become =$.id which seems nonsensical; same for $.orderID which comes next", "author": "pihme", "createdAt": "2020-03-31T15:19:24Z", "path": "bpmn-model/src/test/java/io/zeebe/model/bpmn/validation/ZeebeValidationTest.java", "diffHunk": "@@ -89,11 +89,11 @@\n             .startEvent()\n             .serviceTask(\"task\", b -> b.zeebeJobType(\"type\"))\n             .boundaryEvent(\"msg1\")\n-            .message(m -> m.name(\"message\").zeebeCorrelationKey(\"$.id\"))\n+            .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"$.id\"))", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1NDM4Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401354383", "bodyText": "\ud83d\udc4d I cleaned the test case.", "author": "saig0", "createdAt": "2020-04-01T04:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5ODg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/bpmn-model/src/test/java/io/zeebe/model/bpmn/validation/ZeebeValidationTest.java b/bpmn-model/src/test/java/io/zeebe/model/bpmn/validation/ZeebeValidationTest.java\nindex 6f6ff84ce8..6431280ec1 100644\n--- a/bpmn-model/src/test/java/io/zeebe/model/bpmn/validation/ZeebeValidationTest.java\n+++ b/bpmn-model/src/test/java/io/zeebe/model/bpmn/validation/ZeebeValidationTest.java\n\n@@ -89,11 +89,11 @@ public class ZeebeValidationTest extends AbstractZeebeValidationTest {\n             .startEvent()\n             .serviceTask(\"task\", b -> b.zeebeJobType(\"type\"))\n             .boundaryEvent(\"msg1\")\n-            .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"$.id\"))\n+            .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"id\"))\n             .endEvent()\n             .moveToActivity(\"task\")\n             .boundaryEvent(\"msg2\")\n-            .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"$.orderId\"))\n+            .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"orderId\"))\n             .endEvent()\n             .done(),\n         singletonList(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAwOTYzNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401009637", "bodyText": "Optional comment:\nThe naming is a bit inconvenient, in my mind.\nFIrst the \"NonStatic\" It would be nice to have a positive variant, like \"DynamicExpression\" or something like that. But I cannot really come up with a good name. And \"Dynamic\" does not really cut it.\nThe second issue is the naming of hasValidNonStatic vs. hasValidNonStaticIfPresent. Here you could use hasValidMandatoryNonStaticExpression vs. hasValidOptionalNonStaticExpression which captures the semantics better, in my mind. It's more of a preference, though", "author": "pihme", "createdAt": "2020-03-31T15:32:58Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java", "diffHunk": "@@ -142,10 +133,16 @@ public Builder(final Class<T> elementType) {\n       return this;\n     }\n \n-    public Builder<T> hasValidExpressionIfPresent(final Function<T, String> expressionSupplier) {\n+    public Builder<T> hasValidNonStaticExpressionIfPresent(", "originalCommit": "33068cbe6c092c83fddf840b913654cad9c3e7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\nindex 2f878af871..71adb90c20 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n\n@@ -127,29 +86,14 @@ public final class ZeebeExpressionValidator<T extends ModelElementInstance>\n       this.elementType = elementType;\n     }\n \n-    public Builder<T> hasValidExpression(final Function<T, String> expressionSupplier) {\n-      verifications.add(\n-          new Verification<>(expressionSupplier, ZeebeExpressionValidator::verifyExpression));\n-      return this;\n-    }\n+    public Builder<T> hasValidExpression(\n+        final Function<T, String> expressionSupplier,\n+        final Consumer<ExpressionVerification> expressionVerification) {\n \n-    public Builder<T> hasValidNonStaticExpressionIfPresent(\n-        final Function<T, String> expressionSupplier) {\n-      verifications.add(\n-          new Verification<>(\n-              expressionSupplier,\n-              ((expression, expressionLanguage, resultCollector) -> {\n-                if (expression != null) {\n-                  verifyNonStaticExpression(expression, expressionLanguage, resultCollector);\n-                }\n-              })));\n-      return this;\n-    }\n+      final var expressionV = new ExpressionVerification();\n+      expressionVerification.accept(expressionV);\n \n-    public Builder<T> hasValidNonStaticExpression(final Function<T, String> expressionSupplier) {\n-      verifications.add(\n-          new Verification<>(\n-              expressionSupplier, ZeebeExpressionValidator::verifyNonStaticExpression));\n+      verifications.add(new Verification<>(expressionSupplier, expressionV.build()));\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMTA1OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401421058", "bodyText": "I find it confusing because it sounds like a getter, but works like a setter. Consider renaming to asNonStatic() or makeNonStatic() or (my preference) just nonStatic()", "author": "pihme", "createdAt": "2020-04-01T07:52:34Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java", "diffHunk": "@@ -165,6 +109,53 @@ public Builder(final Class<T> elementType) {\n     }\n   }\n \n+  public static final class ExpressionVerification {\n+\n+    private boolean isNonStatic = false;\n+    private boolean isMandatory = true;\n+\n+    public ExpressionVerification isNonStatic() {", "originalCommit": "c8720cffcfe7b885c2c2faa9e6f7be162d419212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNTQ0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401425445", "bodyText": "Ok, I now saw how it looks when you use it. Very elegant, but somewhat misleading, see my other comment on ZeebeRuntimeValidators", "author": "pihme", "createdAt": "2020-04-01T08:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMTA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\nindex 7beaa10408..71adb90c20 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n\n@@ -112,7 +112,7 @@ public final class ZeebeExpressionValidator<T extends ModelElementInstance>\n   public static final class ExpressionVerification {\n \n     private boolean isNonStatic = false;\n-    private boolean isMandatory = true;\n+    private boolean isMandatory = false;\n \n     public ExpressionVerification isNonStatic() {\n       isNonStatic = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMjg0MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401422840", "bodyText": "Hmm, nice. I admit it looks very elegant.\nBut it is still deceiving. The variable name expression is misleading, because it is an expressionVerification", "author": "pihme", "createdAt": "2020-04-01T07:55:50Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidators.java", "diffHunk": "@@ -24,30 +24,50 @@\n   public static final Collection<ModelElementValidator<?>> getValidators(\n       final ExpressionLanguage expressionLanguage) {\n     return List.of(\n+        // ----------------------------------------\n         ZeebeExpressionValidator.verifyThat(ZeebeInput.class)\n-            .hasValidNonStaticExpression(ZeebeInput::getSource)\n+            .hasValidExpression(\n+                ZeebeInput::getSource, expression -> expression.isNonStatic().isMandatory())", "originalCommit": "c8720cffcfe7b885c2c2faa9e6f7be162d419212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNDYxNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401424614", "bodyText": "I would rather expect the default to be false. This way you can have lenient defaults, which you then narrow down with the other methods.", "author": "pihme", "createdAt": "2020-04-01T07:58:49Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java", "diffHunk": "@@ -165,6 +109,53 @@ public Builder(final Class<T> elementType) {\n     }\n   }\n \n+  public static final class ExpressionVerification {\n+\n+    private boolean isNonStatic = false;\n+    private boolean isMandatory = true;", "originalCommit": "c8720cffcfe7b885c2c2faa9e6f7be162d419212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\nindex 7beaa10408..71adb90c20 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n\n@@ -112,7 +112,7 @@ public final class ZeebeExpressionValidator<T extends ModelElementInstance>\n   public static final class ExpressionVerification {\n \n     private boolean isNonStatic = false;\n-    private boolean isMandatory = true;\n+    private boolean isMandatory = false;\n \n     public ExpressionVerification isNonStatic() {\n       isNonStatic = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzMDM5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4192#discussion_r401430396", "bodyText": "Hmm, I am at two minds about this.\nFirst thought is that the chain isMandatory().isOptional() is nonsensical. If the defaults are lenient, then you could omit this method and all methods are only to deviate from the defaults.\nSecond thought is that I like to have methods which reflect the defaults. This allows to make it explicit at the point where you use this class. Then, the counterpart to isNonStatic() is missing.\nThird thought is maybe we get rid of the defaults and set them explicitly in the constructor and then we have two factory methods to create optional/mandatory ExpressionVerification factory methods. Then the API could be used like this:\n        ZeebeExpressionValidator.verifyThat(ZeebeInput.class)\n            .hasValidExpression(\n                ZeebeInput::getSource, ExprssionVerification.mandatory().nonStatic())", "author": "pihme", "createdAt": "2020-04-01T08:09:15Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java", "diffHunk": "@@ -165,6 +109,53 @@ public Builder(final Class<T> elementType) {\n     }\n   }\n \n+  public static final class ExpressionVerification {\n+\n+    private boolean isNonStatic = false;\n+    private boolean isMandatory = true;\n+\n+    public ExpressionVerification isNonStatic() {\n+      isNonStatic = true;\n+      return this;\n+    }\n+\n+    public ExpressionVerification isMandatory() {\n+      isMandatory = true;\n+      return this;\n+    }\n+\n+    public ExpressionVerification isOptional() {", "originalCommit": "c8720cffcfe7b885c2c2faa9e6f7be162d419212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\nindex 7beaa10408..71adb90c20 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeExpressionValidator.java\n\n@@ -112,7 +112,7 @@ public final class ZeebeExpressionValidator<T extends ModelElementInstance>\n   public static final class ExpressionVerification {\n \n     private boolean isNonStatic = false;\n-    private boolean isMandatory = true;\n+    private boolean isMandatory = false;\n \n     public ExpressionVerification isNonStatic() {\n       isNonStatic = true;\n"}}, {"oid": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "url": "https://github.com/camunda-cloud/zeebe/commit/cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "message": "feat(engine): ensure non-static expressions\n\n* verify that a condition, a correlation key and the multi-instance properties are non-static expressions to reject the deployment", "committedDate": "2020-04-01T09:49:43Z", "type": "commit"}, {"oid": "cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "url": "https://github.com/camunda-cloud/zeebe/commit/cb0a37de917e29f19adb90d59730ba5a87bd5bfc", "message": "feat(engine): ensure non-static expressions\n\n* verify that a condition, a correlation key and the multi-instance properties are non-static expressions to reject the deployment", "committedDate": "2020-04-01T09:49:43Z", "type": "forcePushed"}]}