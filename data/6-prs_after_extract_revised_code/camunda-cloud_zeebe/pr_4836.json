{"pr_number": 4836, "pr_title": "Improve logging of gRPC request exceptions", "pr_createdAt": "2020-06-26T15:29:42Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4836", "timeline": [{"oid": "b8d74d03580b34fac4aa31960ed34cd7708360ab", "url": "https://github.com/camunda-cloud/zeebe/commit/b8d74d03580b34fac4aa31960ed34cd7708360ab", "message": "test(gateway): broker errors should be logged", "committedDate": "2020-06-26T15:30:52Z", "type": "forcePushed"}, {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "url": "https://github.com/camunda-cloud/zeebe/commit/c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "message": "chore(gateway): improve logging of gRPC request exceptions", "committedDate": "2020-06-30T16:23:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjYzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448406636", "bodyText": "Out of curiosity, why trace and not debug (here as well as in the other cases)?", "author": "npepinpe", "createdAt": "2020-07-01T14:33:42Z", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(\n+          GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);", "originalCommit": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1OTQ3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448459476", "bodyText": "Good question. I really have no strong opinion on this. I'm fine with either debug or trace. Do you have an opinion on this?", "author": "korthout", "createdAt": "2020-07-01T15:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2Mzg1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448463852", "bodyText": "Trace level for me is what exactly that, for tracing program execution, whereas debug is, if I'm debugging a problem in this module/class/scope, what do I want to see? So here I'd argue for debug, but tbh it's really an opinion and I have no strong argument for it :)", "author": "npepinpe", "createdAt": "2020-07-01T16:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5MDk2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448790960", "bodyText": "Your argument makes sense to me. I'll change it ;)", "author": "korthout", "createdAt": "2020-07-02T07:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\nindex 1f5d935513..bb3ebbc60d 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n\n@@ -409,22 +408,19 @@ public final class EndpointManager extends GatewayGrpc.GatewayImplBase {\n       }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n-    } else if (cause instanceof ClientOutOfMemoryException) {\n-      status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(\n+      Loggers.GATEWAY_LOGGER.debug(\n           GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n     } else {\n       status = status.augmentDescription(\"Unexpected error occurred during the request processing\");\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"an unexpected error occurred\", cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTY0MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448441641", "bodyText": "I looked into it, and this case I think is not possible anymore - a ClientOutOfMemoryException would happen literally only if the JVM ran out of memory, which would already throw an OOM, so I don't think this exception is even used anymore?", "author": "npepinpe", "createdAt": "2020-07-01T15:25:20Z", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);", "originalCommit": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDQyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448460427", "bodyText": "That could very well be. It is thrown in the BrokerRequestManager in the case that the future is null, which seemed strange to me. Is that how we would normally detect an OOM?", "author": "korthout", "createdAt": "2020-07-01T15:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2Mjc0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448462749", "bodyText": "No, it's a historical remnant from when we had a queue where you would add your requests. If that queue was full, then you would not get a future back - but we don't have this anymore, so I don't expect it ever happens. I'd remove it, though I'm also OK if you add a separate issue for that.", "author": "npepinpe", "createdAt": "2020-07-01T15:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\nindex 1f5d935513..bb3ebbc60d 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n\n@@ -409,22 +408,19 @@ public final class EndpointManager extends GatewayGrpc.GatewayImplBase {\n       }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n-    } else if (cause instanceof ClientOutOfMemoryException) {\n-      status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(\n+      Loggers.GATEWAY_LOGGER.debug(\n           GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n     } else {\n       status = status.augmentDescription(\"Unexpected error occurred during the request processing\");\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"an unexpected error occurred\", cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mjk4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448442982", "bodyText": "It seems GrpcStatusException is an interface which exceptions should implement to determine what status to return. At the moment, some of them are in fact akin to rejections (e.g. we couldn't parse your create workflow payload), so I don't think they should be errors. They're essentially the gateway saying hey this request is wrong before even sending it - but do check, I could be misunderstanding it (even though I wrote it \ud83d\ude48 Though I think it was a mistake haha)", "author": "npepinpe", "createdAt": "2020-07-01T15:27:18Z", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(\n+          GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);", "originalCommit": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NjEyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448996124", "bodyText": "I looked into this. It occurs when trying to deploy a workflow with an unsupported file extension (i.e. not one of: xml, yaml, bpmn or bpmn20.xml). It can also occur when a gRPC request cannot be mapped into a BrokerRequest (i.e. a MsgpackPropertyException was thrown during this mapping). I wonder whether that second one is a client error or can only occur due to a programming mistake on our side. If they are both client errors, then I can change it to debug level. Otherwise I think the best approach is to replace the wrong file extension to a separate (non gRPCStatusException).", "author": "korthout", "createdAt": "2020-07-02T13:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3MDM1MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449070350", "bodyText": "Hm, yeah if the broker request cannot be mapped I suppose it could be due to a bug in the gateway itself - I imagine actually it can be both right now, and I'm not sure how trivial it is to differentiate them. Essentially what I'd like is that client errors don't appear in the gateway - so your proposal sounds good, we should differentiate client errors from gateway errors (and log the latter ones as real errors) \ud83d\udc4d", "author": "npepinpe", "createdAt": "2020-07-02T15:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mjk4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTM2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449541369", "bodyText": "As discussed,  the MsgPropertyException can be caused by clients and by system errors. We need to add validation to make sure we handle client errors and system errors independently, but that is outside of the scope of this PR. I will create a new issue for this.\nFor now, we consider the MsgPackPropertyException a client side exception, because the likelihood of this exception being thrown by a client error is many times greater than it being thrown due to a system error. Therefore, we will reduce its log level in the gateway to debug.", "author": "korthout", "createdAt": "2020-07-03T11:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mjk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\nindex 1f5d935513..bb3ebbc60d 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n\n@@ -409,22 +408,19 @@ public final class EndpointManager extends GatewayGrpc.GatewayImplBase {\n       }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n-    } else if (cause instanceof ClientOutOfMemoryException) {\n-      status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(\n+      Loggers.GATEWAY_LOGGER.debug(\n           GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n     } else {\n       status = status.augmentDescription(\"Unexpected error occurred during the request processing\");\n       Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"an unexpected error occurred\", cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDQ3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448444478", "bodyText": "What does this do?", "author": "npepinpe", "createdAt": "2020-07-01T15:29:36Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/util/GatewayTest.java", "diffHunk": "@@ -42,4 +43,9 @@ public void setUp() {\n     client = gatewayRule.getClient();\n     brokerClient = gatewayRule.getBrokerClient();\n   }\n+\n+  @After\n+  public void tearDown() {\n+    // nothing to do", "originalCommit": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0OTUzNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448449534", "bodyText": "Allows any GatewayTest to just overwrite it, but just does not nothing normally. I added it for consistency with the @Before", "author": "korthout", "createdAt": "2020-07-01T15:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDQ3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDk4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448444980", "bodyText": "good catch \ud83d\udcaa", "author": "npepinpe", "createdAt": "2020-07-01T15:30:18Z", "path": "util/src/main/java/io/zeebe/util/logging/RecordingAppender.java", "diffHunk": "@@ -14,24 +14,41 @@\n import org.apache.logging.log4j.core.ErrorHandler;\n import org.apache.logging.log4j.core.Layout;\n import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.NullAppender;\n \n /**\n  * An {@link Appender} decorator which delegates all method to the underlying appender while\n  * recording all events it receives through {@link #append(LogEvent)}. These are accessible\n- * afterwards through {@link #getAppendedEvents()}, in the order in which they were appended.\n+ * afterwards through {@link #getAppendedEvents()}, in the order in which they were appended. The\n+ * default underlying appender is a {@link NullAppender}.\n+ *\n+ * <p>Note, that the RecordingAppender when used to record the log events of a {@link\n+ * io.zeebe.util.ZbLogger}, that the appender can only record logs starting at the enabled log\n+ * level.\n  */\n-final class RecordingAppender implements Appender {\n+// todo: move this class to zeebe-test-utils\n+public final class RecordingAppender implements Appender {\n   private final Appender delegate;\n   private final List<LogEvent> appendedEvents;\n \n+  /**\n+   * Construct a RecordingAppender.\n+   *\n+   * @param delegate The underlying appender to delegate all log events to\n+   */\n   public RecordingAppender(final Appender delegate) {\n     this.delegate = delegate;\n     this.appendedEvents = new ArrayList<>();\n   }\n \n+  /** Construct a RecordingAppender using a NullAppender as underlying appender. */\n+  public RecordingAppender() {\n+    this(NullAppender.createAppender(\"RecordingAppender\"));\n+  }\n+\n   @Override\n   public void append(final LogEvent event) {\n-    appendedEvents.add(event);\n+    appendedEvents.add(event.toImmutable());", "originalCommit": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "url": "https://github.com/camunda-cloud/zeebe/commit/e7233f9e92b908c1f30030df6ff63bb2662bd94f", "message": "chore(gateway): add log4j-api dep to pom", "committedDate": "2020-07-02T13:59:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNTc4NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449025785", "bodyText": "As part of resolving conflicts with 8c065fe, I added this catch to this method, instead of to the sendRequestWithRetry above, as that one now reuses all of this code.", "author": "korthout", "createdAt": "2020-07-02T14:04:00Z", "path": "gateway/src/test/java/io/zeebe/gateway/api/util/StubbedBrokerClient.java", "diffHunk": "@@ -96,15 +79,20 @@ public void close() {}\n     try {\n       final RequestHandler requestHandler = requestHandlers.get(request.getClass());\n       final BrokerResponse<T> response = requestHandler.handle(request);\n-      if (response.isResponse()) {\n-        responseConsumer.accept(response.getKey(), response.getResponse());\n-      } else if (response.isRejection()) {\n-        throwableConsumer.accept(new BrokerRejectionException(response.getRejection()));\n-      } else if (response.isError()) {\n-        throwableConsumer.accept(new BrokerErrorException(response.getError()));\n-      } else {\n-        throwableConsumer.accept(\n-            new IllegalBrokerResponseException(\"Unknown response received: \" + response));\n+      try {\n+        if (response.isResponse()) {\n+          responseConsumer.accept(response.getKey(), response.getResponse());\n+        } else if (response.isRejection()) {\n+          throwableConsumer.accept(new BrokerRejectionException(response.getRejection()));\n+        } else if (response.isError()) {\n+          throwableConsumer.accept(new BrokerErrorException(response.getError()));\n+        } else {\n+          throwableConsumer.accept(\n+              new IllegalBrokerResponseException(\n+                  \"Expected broker response to be either response, rejection, or error, but is neither of them []\"));\n+        }\n+      } catch (final RuntimeException e) {\n+        throwableConsumer.accept(new BrokerResponseException(e));", "originalCommit": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMDkzOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449600938", "bodyText": "Nitpick: not sure we gain much by \"dry\"ing the use of GRPC_ERROR_TEMPLATE, I'd personally just put each error reasons as a separate static string, e.g.\nprivate static final GRPC_BROKER_ERROR_MESSAGE = \"Expected to handle gRPC request, but the broker returned an error\";\nprivate static final GRPC_BROKER_REJECTION_MESSAGE = \"Broker rejected request\";\nprivate static final GRPC_TIME_OUT_MESSAGE = \"Request timed out between gateway and broker\";\n// ...\n(just a nit, so you can ignore this tbh - also reworded some messages since they aren't error messages)", "author": "npepinpe", "createdAt": "2020-07-03T14:06:22Z", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +392,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);", "originalCommit": "fe0f12507d9c8da843ee3d42b746d596e4831b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MjIzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r452192236", "bodyText": "@npepinpe Not sure what you meant by message rewording. I've unDRY-ed the log messages, but do you want anything else changed here? I wasn't sure.", "author": "korthout", "createdAt": "2020-07-09T12:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMDkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8054ece2efed6434f75a334c8ed2632fdfe910aa", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\nindex 174a727e39..ba151bceac 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java\n\n@@ -388,37 +387,42 @@ public final class EndpointManager extends GatewayGrpc.GatewayImplBase {\n \n     if (cause instanceof ExecutionException) {\n       return convertThrowable(cause.getCause());\n-    }\n-\n-    if (cause instanceof BrokerErrorException) {\n+    } else if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n       // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n       // can get flooded. Until we find a way to limit the number of log messages,\n       // let's do not log them.\n       if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n-        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+        Loggers.GATEWAY_LOGGER.error(\n+            \"Expected to handle gRPC request, but received error from broker\", cause);\n       }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n-      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(\n+          \"Expected to handle gRPC request, but broker rejected request\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n       Loggers.GATEWAY_LOGGER.debug(\n-          GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n+          \"Expected to handle gRPC request, but request timed out between gateway and broker\",\n+          cause);\n     } else if (cause instanceof InvalidBrokerRequestArgumentException) {\n       status = Status.INVALID_ARGUMENT.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"broker argument was invalid\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(\n+          \"Expected to handle gRPC request, but broker argument was invalid\", cause);\n     } else if (cause instanceof MsgpackPropertyException) {\n       status = Status.INVALID_ARGUMENT.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"messagepack property was invalid\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(\n+          \"Expected to handle gRPC request, but messagepack property was invalid\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n-      Loggers.GATEWAY_LOGGER.debug(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);\n+      Loggers.GATEWAY_LOGGER.debug(\n+          \"Expected to handle gRPC request, but request could not be delivered\", cause);\n     } else {\n       status = status.augmentDescription(\"Unexpected error occurred during the request processing\");\n-      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"an unexpected error occurred\", cause);\n+      Loggers.GATEWAY_LOGGER.error(\n+          \"Expected to handle gRPC request, but an unexpected error occurred\", cause);\n     }\n \n     return status.withCause(cause).asRuntimeException();\n"}}, {"oid": "8054ece2efed6434f75a334c8ed2632fdfe910aa", "url": "https://github.com/camunda-cloud/zeebe/commit/8054ece2efed6434f75a334c8ed2632fdfe910aa", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom", "committedDate": "2020-07-09T13:48:06Z", "type": "forcePushed"}, {"oid": "7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "url": "https://github.com/camunda-cloud/zeebe/commit/7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom", "committedDate": "2020-07-10T10:44:29Z", "type": "commit"}, {"oid": "7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "url": "https://github.com/camunda-cloud/zeebe/commit/7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom", "committedDate": "2020-07-10T10:44:29Z", "type": "forcePushed"}]}