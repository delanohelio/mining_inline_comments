{"pr_number": 4191, "pr_title": "feat(distro): add StackdriverJSONLayout appender", "pr_createdAt": "2020-03-31T09:44:31Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4191", "timeline": [{"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "url": "https://github.com/camunda-cloud/zeebe/commit/b0fec0ef72c3ce059870d9527c2af4145a9b7600", "message": "docs(operations): document stackdriver logging", "committedDate": "2020-03-31T12:02:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MjE1Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400892156", "bodyText": "Optional comment:\nYou might take a look at io.zeebe.util.ObjectWriterFactory. This register a module to write java data time objects as ISO Strings. This could help when adding human readable time stamps to the record.\nIt also enables pretty printing, which you probably don't want.", "author": "pihme", "createdAt": "2020-03-31T12:58:50Z", "path": "util/src/main/java/io/zeebe/util/StackdriverJSONLayout.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.Layout;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.impl.ThrowableProxy;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+\n+/**\n+ * Idea and code (slightly changed) from\n+ * <li><a href=\n+ *     \"https://k11i.biz/blog/2018/10/03/stackdriver-logging-friendly-layout-java/\">https://k11i.biz/blog/2018/10/03/stackdriver-logging-friendly-layout-java/</a>\n+ */\n+@Plugin(name = \"StackdriverJSONLayout\", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE)\n+public class StackdriverJSONLayout extends AbstractStringLayout {\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "originalCommit": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxMzcxOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r401013718", "bodyText": "I would not mix this, as the ObjectWriterFactory is intend to be configured to print a specific format. The Logger format is simple and is independent from what we are needing somewhere else in the code base. We also are not transforming date objects in the logger format, just longs and strings.", "author": "menski", "createdAt": "2020-03-31T15:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MjE1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMDQ2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400900460", "bodyText": "Test is difficult to read.\nI would prefer if both logOutputToJSONMap() and createTestAppenderWithlayout() both have a writer as parameter.\nThen it would be clearer what the test is doing.\nMaybe make logOutput a local variable in the test method.", "author": "pihme", "createdAt": "2020-03-31T13:11:06Z", "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {", "originalCommit": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8385e7eb409344f7b4e17f2a54af092f68d99802", "chunk": "diff --git a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\nindex a68a1ef5b..0924f5e1f 100644\n--- a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n+++ b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n\n@@ -7,8 +7,7 @@\n  */\n package io.zeebe.util;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMjU4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400902582", "bodyText": "rename to register/startTestAppender... or return the appender", "author": "pihme", "createdAt": "2020-03-31T13:14:08Z", "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {\n+    return jsonReader\n+        .withValueToUpdate(new HashMap<String, String>())\n+        .readValue(logOutput.toString());\n+  }\n+\n+  private void createTestAppenderWithLayout(StringLayout layout) {", "originalCommit": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8385e7eb409344f7b4e17f2a54af092f68d99802", "chunk": "diff --git a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\nindex a68a1ef5b..0924f5e1f 100644\n--- a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n+++ b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n\n@@ -7,8 +7,7 @@\n  */\n package io.zeebe.util;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMzcxOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400903718", "bodyText": "Missing loggerConfig.removeAppender(...) as part of test cleanup. Or use a logger local to this test", "author": "pihme", "createdAt": "2020-03-31T13:15:43Z", "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {\n+    return jsonReader\n+        .withValueToUpdate(new HashMap<String, String>())\n+        .readValue(logOutput.toString());\n+  }\n+\n+  private void createTestAppenderWithLayout(StringLayout layout) {\n+    final Appender appender =\n+        WriterAppender.createAppender(layout, null, logOutput, \"test\", false, false);\n+    final LoggerConfig loggerConfig = context.getConfiguration().getRootLogger();\n+    loggerConfig.addAppender(appender, Level.ALL, null);", "originalCommit": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8385e7eb409344f7b4e17f2a54af092f68d99802", "chunk": "diff --git a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\nindex a68a1ef5b..0924f5e1f 100644\n--- a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n+++ b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n\n@@ -7,8 +7,7 @@\n  */\n package io.zeebe.util;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNTM0Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400905346", "bodyText": "Optional: use soft asserts", "author": "pihme", "createdAt": "2020-03-31T13:18:00Z", "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)", "originalCommit": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NDA5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r401044092", "bodyText": "Thanks I learned something new \u2728", "author": "menski", "createdAt": "2020-03-31T16:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNTM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8385e7eb409344f7b4e17f2a54af092f68d99802", "chunk": "diff --git a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\nindex a68a1ef5b..0924f5e1f 100644\n--- a/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n+++ b/util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java\n\n@@ -7,8 +7,7 @@\n  */\n package io.zeebe.util;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectReader;\n import java.io.IOException;\n"}}, {"oid": "8385e7eb409344f7b4e17f2a54af092f68d99802", "url": "https://github.com/camunda-cloud/zeebe/commit/8385e7eb409344f7b4e17f2a54af092f68d99802", "message": "feat(distro): add StackdriverJSONLayout appender\n\nTo enable stackdriver compatible JSON logging set env variable\nZEEBE_LOG_APPENDER to Stackdriver.\n\nRemove log4j2 configuration location from startup parameters to allow\noverriding with custom file locations.", "committedDate": "2020-03-31T19:21:28Z", "type": "commit"}, {"oid": "8a476efb9156b8bf224f05e44e655f21a189ae03", "url": "https://github.com/camunda-cloud/zeebe/commit/8a476efb9156b8bf224f05e44e655f21a189ae03", "message": "chore(benchmarks): enable stackdriver logging in benchmarks per default", "committedDate": "2020-03-31T19:21:28Z", "type": "commit"}, {"oid": "3d186188497c899eda0358fafef4311741dec7e0", "url": "https://github.com/camunda-cloud/zeebe/commit/3d186188497c899eda0358fafef4311741dec7e0", "message": "docs(operations): document stackdriver logging", "committedDate": "2020-03-31T19:21:28Z", "type": "commit"}, {"oid": "3d186188497c899eda0358fafef4311741dec7e0", "url": "https://github.com/camunda-cloud/zeebe/commit/3d186188497c899eda0358fafef4311741dec7e0", "message": "docs(operations): document stackdriver logging", "committedDate": "2020-03-31T19:21:28Z", "type": "forcePushed"}]}