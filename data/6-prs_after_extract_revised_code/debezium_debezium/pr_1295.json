{"pr_number": 1295, "pr_title": "DBZ-1834 Support dots in table names", "pr_createdAt": "2020-03-02T06:26:29Z", "pr_url": "https://github.com/debezium/debezium/pull/1295", "timeline": [{"oid": "a5989be4edfecd8e659a7fbb8240c6ad327b9399", "url": "https://github.com/debezium/debezium/commit/a5989be4edfecd8e659a7fbb8240c6ad327b9399", "message": "DBZ-1834 Support dots in table names", "committedDate": "2020-03-02T06:25:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NDkyMw==", "url": "https://github.com/debezium/debezium/pull/1295#discussion_r386244923", "bodyText": "Couldn't we encounter something like inventory.`My.Table` ?", "author": "gunnarmorling", "createdAt": "2020-03-02T08:13:20Z", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java", "diffHunk": "@@ -215,7 +215,8 @@ public String parseName(MySqlParser.UidContext uidContext) {\n     public TableId parseQualifiedTableId(MySqlParser.FullIdContext fullIdContext) {\n         String fullTableName = fullIdContext.getText();\n         int dotIndex;\n-        if ((dotIndex = fullTableName.indexOf(\".\")) > 0) {\n+        // The quoted table name that contains dot means that it is just a part of the name of the table\n+        if (!isQuoted(fullTableName) && ((dotIndex = fullTableName.indexOf(\".\")) > 0)) {", "originalCommit": "a5989be4edfecd8e659a7fbb8240c6ad327b9399", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NjU2Ng==", "url": "https://github.com/debezium/debezium/pull/1295#discussion_r386246566", "bodyText": "@gunnarmorling Just fixed", "author": "jpechane", "createdAt": "2020-03-02T08:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NDkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "cb316be4123dec2472e4c2ca4303c8e50c65dec3", "chunk": "diff --git a/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java b/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\nindex 7a7fb151d..4f3dcaee0 100644\n--- a/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\n+++ b/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\n\n@@ -213,16 +213,39 @@ public String parseName(MySqlParser.UidContext uidContext) {\n      * @return qualified {@link TableId}.\n      */\n     public TableId parseQualifiedTableId(MySqlParser.FullIdContext fullIdContext) {\n-        String fullTableName = fullIdContext.getText();\n-        int dotIndex;\n-        // The quoted table name that contains dot means that it is just a part of the name of the table\n-        if (!isQuoted(fullTableName) && ((dotIndex = fullTableName.indexOf(\".\")) > 0)) {\n-            return resolveTableId(withoutQuotes(fullTableName.substring(0, dotIndex)),\n-                    withoutQuotes(fullTableName.substring(dotIndex + 1, fullTableName.length())));\n-        }\n-        else {\n-            return resolveTableId(currentSchema(), withoutQuotes(fullTableName));\n+        final char[] fullTableName = fullIdContext.getText().toCharArray();\n+        StringBuilder component = new StringBuilder();\n+        String dbName = null;\n+        String tableName = null;\n+        final char EMPTY = '\\0';\n+        char lastQuote = EMPTY;\n+        for (char c : fullTableName) {\n+            if (isQuote(c)) {\n+                // Opening quote\n+                if (lastQuote == EMPTY) {\n+                    lastQuote = c;\n+                }\n+                // Closing quote\n+                else if (lastQuote == c) {\n+                    lastQuote = EMPTY;\n+                }\n+                // Quote that is part of name\n+                else {\n+                    component.append(c);\n+                }\n+            }\n+            // dot that is not in quotes, so name separator\n+            else if (c == '.' && lastQuote == EMPTY) {\n+                dbName = component.toString();\n+                component = new StringBuilder();\n+            }\n+            // Any char is part of name including quoted dot\n+            else {\n+                component.append(c);\n+            }\n         }\n+        tableName = component.toString();\n+        return resolveTableId(dbName != null ? dbName : currentSchema(), tableName);\n     }\n \n     /**\n"}}, {"oid": "cb316be4123dec2472e4c2ca4303c8e50c65dec3", "url": "https://github.com/debezium/debezium/commit/cb316be4123dec2472e4c2ca4303c8e50c65dec3", "message": "DBZ-1834 Support separately quoted schema and table", "committedDate": "2020-03-02T08:14:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODQ2OA==", "url": "https://github.com/debezium/debezium/pull/1295#discussion_r386258468", "bodyText": "Do we have any test for this case actually? How would escaping of the quote look like?", "author": "gunnarmorling", "createdAt": "2020-03-02T08:47:01Z", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java", "diffHunk": "@@ -213,15 +213,39 @@ public String parseName(MySqlParser.UidContext uidContext) {\n      * @return qualified {@link TableId}.\n      */\n     public TableId parseQualifiedTableId(MySqlParser.FullIdContext fullIdContext) {\n-        String fullTableName = fullIdContext.getText();\n-        int dotIndex;\n-        if ((dotIndex = fullTableName.indexOf(\".\")) > 0) {\n-            return resolveTableId(withoutQuotes(fullTableName.substring(0, dotIndex)),\n-                    withoutQuotes(fullTableName.substring(dotIndex + 1, fullTableName.length())));\n-        }\n-        else {\n-            return resolveTableId(currentSchema(), withoutQuotes(fullTableName));\n+        final char[] fullTableName = fullIdContext.getText().toCharArray();\n+        StringBuilder component = new StringBuilder();\n+        String dbName = null;\n+        String tableName = null;\n+        final char EMPTY = '\\0';\n+        char lastQuote = EMPTY;\n+        for (char c : fullTableName) {\n+            if (isQuote(c)) {\n+                // Opening quote\n+                if (lastQuote == EMPTY) {\n+                    lastQuote = c;\n+                }\n+                // Closing quote\n+                else if (lastQuote == c) {\n+                    lastQuote = EMPTY;\n+                }\n+                // Quote that is part of name", "originalCommit": "cb316be4123dec2472e4c2ca4303c8e50c65dec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MTgwMg==", "url": "https://github.com/debezium/debezium/pull/1295#discussion_r386271802", "bodyText": "@gunnarmorling Added more comprehensive test and escaping support", "author": "jpechane", "createdAt": "2020-03-02T09:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1ODQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "76463ed928ab332dd96d0864dd7dc79d1cc9583f", "chunk": "diff --git a/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java b/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\nindex 4f3dcaee0..c2fffb9b4 100644\n--- a/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\n+++ b/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/antlr/MySqlAntlrDdlParser.java\n\n@@ -219,7 +219,8 @@ public TableId parseQualifiedTableId(MySqlParser.FullIdContext fullIdContext) {\n         String tableName = null;\n         final char EMPTY = '\\0';\n         char lastQuote = EMPTY;\n-        for (char c : fullTableName) {\n+        for (int i = 0; i < fullTableName.length; i++) {\n+            char c = fullTableName[i];\n             if (isQuote(c)) {\n                 // Opening quote\n                 if (lastQuote == EMPTY) {\n"}}, {"oid": "76463ed928ab332dd96d0864dd7dc79d1cc9583f", "url": "https://github.com/debezium/debezium/commit/76463ed928ab332dd96d0864dd7dc79d1cc9583f", "message": "DBZ-1834 Support for escaping", "committedDate": "2020-03-02T09:56:05Z", "type": "commit"}, {"oid": "76463ed928ab332dd96d0864dd7dc79d1cc9583f", "url": "https://github.com/debezium/debezium/commit/76463ed928ab332dd96d0864dd7dc79d1cc9583f", "message": "DBZ-1834 Support for escaping", "committedDate": "2020-03-02T09:56:05Z", "type": "forcePushed"}]}