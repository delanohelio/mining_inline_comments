{"pr_number": 1362, "pr_title": "DBZ-1807 Converters in Debezium engine", "pr_createdAt": "2020-03-25T07:23:58Z", "pr_url": "https://github.com/debezium/debezium/pull/1362", "timeline": [{"oid": "15331e9d66556b05dba51870142908abb0b66cc4", "url": "https://github.com/debezium/debezium/commit/15331e9d66556b05dba51870142908abb0b66cc4", "message": "DBZ-1807 Support for JSON Converter", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "4307575a8a59c3923060f2ebfcbc0da143e2c3bf", "url": "https://github.com/debezium/debezium/commit/4307575a8a59c3923060f2ebfcbc0da143e2c3bf", "message": "DBZ-1807 Support for Avro converters", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "url": "https://github.com/debezium/debezium/commit/bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "message": "DBZ-1807 Support for CloudEvents converter", "committedDate": "2020-04-08T12:41:45Z", "type": "commit"}, {"oid": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "url": "https://github.com/debezium/debezium/commit/bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "message": "DBZ-1807 Support for CloudEvents converter", "committedDate": "2020-04-08T12:41:45Z", "type": "forcePushed"}, {"oid": "26b0ee5936e87a9161ccab95aa2e02a993075895", "url": "https://github.com/debezium/debezium/commit/26b0ee5936e87a9161ccab95aa2e02a993075895", "message": "DBZ-1807 Misc. adjustments;\n\n* Adding @TestFor annotations\n* Change -> ChangeEvent", "committedDate": "2020-04-15T14:27:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg2NTc4Mg==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r408865782", "bodyText": "I'll push a commit to rename it to ChangeEvent; a bit more meaningful and in line with the term we use in blogs, presentations etc.\nSlightly more problematic: it assumes that key and value are of the same type, I don't think that generally holds. I think we need to have two type parameters here, for key and value. Note the bootstrap method for getting an engine could be overloaded, i.e. there would be the one with one parameter, so to use the same converter for both key and value, but there'd be another one, allowing for two separate converters.", "author": "gunnarmorling", "createdAt": "2020-04-15T14:01:32Z", "path": "debezium-api/src/main/java/io/debezium/engine/format/Change.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.engine.format;\n+\n+public class Change<T> {", "originalCommit": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26b0ee5936e87a9161ccab95aa2e02a993075895", "chunk": "diff --git a/debezium-api/src/main/java/io/debezium/engine/format/Change.java b/debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\nsimilarity index 59%\nrename from debezium-api/src/main/java/io/debezium/engine/format/Change.java\nrename to debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\nindex 71f1b113b..cc9b4dee1 100644\n--- a/debezium-api/src/main/java/io/debezium/engine/format/Change.java\n+++ b/debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\n\n@@ -5,23 +5,32 @@\n  */\n package io.debezium.engine.format;\n \n-public class Change<T> {\n-    public final T key;\n-    public final T value;\n+public class ChangeEvent<T> {\n+\n+    private final T key;\n+    private final T value;\n     private final Object backReference;\n \n-    public Change(T key, T value, Object backReference) {\n+    public ChangeEvent(T key, T value, Object backReference) {\n         this.key = key;\n         this.value = value;\n         this.backReference = backReference;\n     }\n \n+    public T key() {\n+        return key;\n+    }\n+\n+    public T value() {\n+        return value;\n+    }\n+\n     public Object reference() {\n         return backReference;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Change [key=\" + key + \", value=\" + value + \"]\";\n+        return \"ChangeEvent [key=\" + key + \", value=\" + value + \"]\";\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODkzOQ==", "url": "https://github.com/debezium/debezium/pull/1362#discussion_r408878939", "bodyText": "What is this needed for? Can we get rid of it by splitting this up into a public interface and internal implementation?", "author": "gunnarmorling", "createdAt": "2020-04-15T14:19:28Z", "path": "debezium-api/src/main/java/io/debezium/engine/format/Change.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright Debezium Authors.\n+ *\n+ * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.debezium.engine.format;\n+\n+public class Change<T> {\n+    public final T key;\n+    public final T value;\n+    private final Object backReference;\n+\n+    public Change(T key, T value, Object backReference) {\n+        this.key = key;\n+        this.value = value;\n+        this.backReference = backReference;\n+    }\n+\n+    public Object reference() {", "originalCommit": "bfe3a5152f0f3d9b8edc2b29160205f0fcaa0a66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26b0ee5936e87a9161ccab95aa2e02a993075895", "chunk": "diff --git a/debezium-api/src/main/java/io/debezium/engine/format/Change.java b/debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\nsimilarity index 59%\nrename from debezium-api/src/main/java/io/debezium/engine/format/Change.java\nrename to debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\nindex 71f1b113b..cc9b4dee1 100644\n--- a/debezium-api/src/main/java/io/debezium/engine/format/Change.java\n+++ b/debezium-api/src/main/java/io/debezium/engine/format/ChangeEvent.java\n\n@@ -5,23 +5,32 @@\n  */\n package io.debezium.engine.format;\n \n-public class Change<T> {\n-    public final T key;\n-    public final T value;\n+public class ChangeEvent<T> {\n+\n+    private final T key;\n+    private final T value;\n     private final Object backReference;\n \n-    public Change(T key, T value, Object backReference) {\n+    public ChangeEvent(T key, T value, Object backReference) {\n         this.key = key;\n         this.value = value;\n         this.backReference = backReference;\n     }\n \n+    public T key() {\n+        return key;\n+    }\n+\n+    public T value() {\n+        return value;\n+    }\n+\n     public Object reference() {\n         return backReference;\n     }\n \n     @Override\n     public String toString() {\n-        return \"Change [key=\" + key + \", value=\" + value + \"]\";\n+        return \"ChangeEvent [key=\" + key + \", value=\" + value + \"]\";\n     }\n }\n"}}]}