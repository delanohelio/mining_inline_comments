{"pr_number": 1322, "pr_title": "DBZ-1730 Stream from replica slot position not end of tx log", "pr_createdAt": "2020-03-10T14:13:17Z", "pr_url": "https://github.com/debezium/debezium/pull/1322", "timeline": [{"oid": "b5f2db3be47a35d1761accb694b38e6718f0e2db", "url": "https://github.com/debezium/debezium/commit/b5f2db3be47a35d1761accb694b38e6718f0e2db", "message": "DBZ-1730 Stream from replica slot position not end of tx log", "committedDate": "2020-03-10T14:51:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NzE3OQ==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r390657179", "bodyText": "This looks good to me. I had hoped you could instead create an initial empty context here, but my attempt to do so caused test failures.", "author": "cjbooms", "createdAt": "2020-03-10T22:53:42Z", "path": "debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresStreamingChangeEventSource.java", "diffHunk": "@@ -78,6 +79,9 @@ public PostgresStreamingChangeEventSource(PostgresConnectorConfig connectorConfi\n         this.clock = clock;\n         this.schema = schema;\n         this.offsetContext = (offsetContext != null) ? offsetContext : PostgresOffsetContext.initialContext(connectorConfig, connection, clock);\n+        // replication slot could exist at the time of starting Debezium so we will stream from the position in the slot\n+        // instead of the last position in the database\n+        this.hasStartLsnStoredInContext = (offsetContext != null);", "originalCommit": "b5f2db3be47a35d1761accb694b38e6718f0e2db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Nzk5MA==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r390657990", "bodyText": "In fact I think you will always get one duplicate record re-emitted due to this logic, which disables skipping of the first flushed record:\n        boolean skipFirstFlushRecord = true;\n        initConnection();\n\n        connect();\n        if (offset == null || offset <= 0) {\n            offset = defaultStartingPos;\n            skipFirstFlushRecord = false;\n        }", "author": "cjbooms", "createdAt": "2020-03-10T22:56:02Z", "path": "debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java", "diffHunk": "@@ -1613,6 +1616,39 @@ public void stopInTheMiddleOfTxAndResume() throws Exception {\n         }\n     }\n \n+    @Test\n+    @FixFor(\"DBZ-1730\")\n+    public void shouldStartConsumingFromSlotLocation() throws Exception {\n+        Testing.Print.enable();\n+\n+        startConnector(config -> config\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, false)\n+                .with(EmbeddedEngine.OFFSET_STORAGE, MemoryOffsetBackingStore.class), true);\n+        waitForStreamingToStart();\n+\n+        consumer = testConsumer(1);\n+        executeAndWait(\"INSERT INTO test_table (text) VALUES ('insert2')\");\n+        consumer.remove();\n+\n+        stopConnector();\n+        TestHelper.execute(\n+                \"INSERT INTO test_table (text) VALUES ('insert3');\",\n+                \"INSERT INTO test_table (text) VALUES ('insert4')\");\n+        startConnector(config -> config\n+                .with(PostgresConnectorConfig.DROP_SLOT_ON_STOP, true)\n+                .with(PostgresConnectorConfig.SNAPSHOT_MODE, PostgresConnectorConfig.SnapshotMode.NEVER)\n+                .with(EmbeddedEngine.OFFSET_STORAGE, MemoryOffsetBackingStore.class), false);\n+\n+        consumer.expects(2);\n+        consumer.await(TestHelper.waitTimeForRecords() * 5, TimeUnit.SECONDS);\n+\n+        // We cannot guarantee the flush timing so it is possible that insert2 record will be redelivered\n+        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isIn(Collect.unmodifiableSet(\"insert2\", \"insert3\"));", "originalCommit": "b5f2db3be47a35d1761accb694b38e6718f0e2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgyNzAxOA==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r390827018", "bodyText": "@jpechane, any thoughts on this one?", "author": "gunnarmorling", "createdAt": "2020-03-11T09:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Nzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgzMjIwNw==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r390832207", "bodyText": "@gunnarmorling The problem is that this is important in case of snapthot -> streaming transition. I'd prefer to keep it as is and log a follow-up issue if we want to get it in 1.1.0.CR1. Otherwise we can return back to it later.", "author": "jpechane", "createdAt": "2020-03-11T09:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Nzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4Njk0NA==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r390886944", "bodyText": "Re-processing the confirmed_flush_lsn is not a problem for me at all.\nI was just suggesting that your test could possibly be more explicit. Maybe in the future you could make it available as a config option, but it's not important for me now.", "author": "cjbooms", "createdAt": "2020-03-11T10:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Nzk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3NzYyNA==", "url": "https://github.com/debezium/debezium/pull/1322#discussion_r391677624", "bodyText": "@cjbooms - I just improved the test description. In fact we cannot do anything about this as the offset loss is the same as doing snapshot never mode and cannot be separated without intorducing a new snapshot mode or config option.\nAs this is a real corner case I'd keep it as is.", "author": "jpechane", "createdAt": "2020-03-12T14:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Nzk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "95b55ffaf64fe7bd28039c3cf7235d37f772395e", "chunk": "diff --git a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java\nindex 45a65c456..4bea81685 100644\n--- a/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java\n+++ b/debezium-connector-postgres/src/test/java/io/debezium/connector/postgresql/RecordsStreamProducerIT.java\n\n@@ -1639,12 +1638,14 @@ public void shouldStartConsumingFromSlotLocation() throws Exception {\n                 .with(PostgresConnectorConfig.SNAPSHOT_MODE, PostgresConnectorConfig.SnapshotMode.NEVER)\n                 .with(EmbeddedEngine.OFFSET_STORAGE, MemoryOffsetBackingStore.class), false);\n \n-        consumer.expects(2);\n+        consumer.expects(3);\n         consumer.await(TestHelper.waitTimeForRecords() * 5, TimeUnit.SECONDS);\n \n-        // We cannot guarantee the flush timing so it is possible that insert2 record will be redelivered\n-        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isIn(Collect.unmodifiableSet(\"insert2\", \"insert3\"));\n-        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isIn(Collect.unmodifiableSet(\"insert3\", \"insert4\"));\n+        // After loss of offset and not doing snapshot we always stream the first record available in replication slot\n+        // even if we have seen it as it is not possible to make a difference from plain snapshot never mode\n+        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isEqualTo(\"insert2\");\n+        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isEqualTo(\"insert3\");\n+        Assertions.assertThat(((Struct) consumer.remove().value()).getStruct(\"after\").getString(\"text\")).isEqualTo(\"insert4\");\n \n         stopConnector();\n     }\n"}}, {"oid": "e42dfce810c810255d0f149aa933129e9111666f", "url": "https://github.com/debezium/debezium/commit/e42dfce810c810255d0f149aa933129e9111666f", "message": "DBZ-1730 Stream from replica slot position not end of tx log", "committedDate": "2020-03-12T14:20:13Z", "type": "commit"}, {"oid": "95b55ffaf64fe7bd28039c3cf7235d37f772395e", "url": "https://github.com/debezium/debezium/commit/95b55ffaf64fe7bd28039c3cf7235d37f772395e", "message": "DBZ-1730 Improve test limits description", "committedDate": "2020-03-12T15:25:05Z", "type": "commit"}, {"oid": "95b55ffaf64fe7bd28039c3cf7235d37f772395e", "url": "https://github.com/debezium/debezium/commit/95b55ffaf64fe7bd28039c3cf7235d37f772395e", "message": "DBZ-1730 Improve test limits description", "committedDate": "2020-03-12T15:25:05Z", "type": "forcePushed"}, {"oid": "95b55ffaf64fe7bd28039c3cf7235d37f772395e", "url": "https://github.com/debezium/debezium/commit/95b55ffaf64fe7bd28039c3cf7235d37f772395e", "message": "DBZ-1730 Improve test limits description", "committedDate": "2020-03-12T15:25:05Z", "type": "forcePushed"}]}