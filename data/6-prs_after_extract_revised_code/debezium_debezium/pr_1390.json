{"pr_number": 1390, "pr_title": "DBZ-1905 Validate database history topic", "pr_createdAt": "2020-04-03T12:00:51Z", "pr_url": "https://github.com/debezium/debezium/pull/1390", "timeline": [{"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f", "url": "https://github.com/debezium/debezium/commit/318d7be5195f359ae41016bc7c92e5342ad8826f", "message": "DBZ-1905 Validate database history topic", "committedDate": "2020-04-06T10:51:04Z", "type": "commit"}, {"oid": "318d7be5195f359ae41016bc7c92e5342ad8826f", "url": "https://github.com/debezium/debezium/commit/318d7be5195f359ae41016bc7c92e5342ad8826f", "message": "DBZ-1905 Validate database history topic", "committedDate": "2020-04-06T10:51:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzUzMA==", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r404567530", "bodyText": "Why are these two Fields now? Wouldn't it suffice to pass in the values when constructing the history object? I.e. when is there a need to configure this differently than for the connector itself?", "author": "gunnarmorling", "createdAt": "2020-04-07T06:35:36Z", "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -108,8 +129,24 @@\n             .withDefault(100)\n             .withValidation(Field::isInteger);\n \n+    public static final Field CONNECTOR_CLASS = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.class\")", "originalCommit": "318d7be5195f359ae41016bc7c92e5342ad8826f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNjg4OQ==", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r404616889", "bodyText": "@gunnarmorling  The history obejct is constructed using Configuration.getInstance so it is not possible to pass params to the constructor. We would need to modify the signature of configure method but that would mean that we will push thses values to the implementations that does not need them", "author": "jpechane", "createdAt": "2020-04-07T08:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "chunk": "diff --git a/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java b/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\nindex 77b585d0d..30c6c33b9 100644\n--- a/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\n+++ b/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\n\n@@ -129,24 +129,24 @@\n             .withDefault(100)\n             .withValidation(Field::isInteger);\n \n-    public static final Field CONNECTOR_CLASS = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.class\")\n+    // Required for unified thread creation\n+    public static final Field INTERNAL_CONNECTOR_CLASS = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.class\")\n             .withDisplayName(\"Debezium connector class\")\n             .withType(Type.STRING)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.HIGH)\n-            .withDescription(\"The class of the Debezium database connector\")\n-            .withValidation(Field::isRequired);\n+            .withDescription(\"The class of the Debezium database connector\");\n \n-    public static final Field CONNECTOR_ID = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.id\")\n+    // Required for unified thread creation\n+    public static final Field INTERNAL_CONNECTOR_ID = Field.create(CONFIGURATION_FIELD_PREFIX_STRING + \"connector.id\")\n             .withDisplayName(\"Debezium connector identifier\")\n             .withType(Type.STRING)\n             .withWidth(Width.SHORT)\n             .withImportance(Importance.HIGH)\n-            .withDescription(\"The unique identifier of the Debezium connector\")\n-            .withValidation(Field::isRequired);\n+            .withDescription(\"The unique identifier of the Debezium connector\");\n \n     public static Field.Set ALL_FIELDS = Field.setOf(TOPIC, BOOTSTRAP_SERVERS, DatabaseHistory.NAME,\n-            RECOVERY_POLL_INTERVAL_MS, RECOVERY_POLL_ATTEMPTS, CONNECTOR_CLASS, CONNECTOR_ID);\n+            RECOVERY_POLL_INTERVAL_MS, RECOVERY_POLL_ATTEMPTS, INTERNAL_CONNECTOR_CLASS, INTERNAL_CONNECTOR_ID);\n \n     private static final String CONSUMER_PREFIX = CONFIGURATION_FIELD_PREFIX_STRING + \"consumer.\";\n     private static final String PRODUCER_PREFIX = CONFIGURATION_FIELD_PREFIX_STRING + \"producer.\";\n"}}, {"oid": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "url": "https://github.com/debezium/debezium/commit/f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "message": "DBZ-1905 Make thread-naming params internal and optional", "committedDate": "2020-04-07T09:58:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyOTI2MA==", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r405029260", "bodyText": "Ok, last comment on this PR, promised :) Can we move the shutdown right to the topic check (with awaitTermination()), so we don't keep it running for all the time.", "author": "gunnarmorling", "createdAt": "2020-04-07T18:38:11Z", "path": "debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java", "diffHunk": "@@ -314,8 +364,76 @@ public boolean exists() {\n         return exists;\n     }\n \n+    private void checkTopicSettings(String topicName) {\n+        if (checkTopicSettingsExecutor == null) {\n+            return;\n+        }\n+        checkTopicSettingsExecutor.execute(() -> {\n+            try (AdminClient admin = AdminClient.create(this.producerConfig.asProperties())) {\n+\n+                Set<ConfigResource> resources = Collections.singleton(new ConfigResource(ConfigResource.Type.TOPIC, topicName));\n+                final Map<ConfigResource, Config> configs = admin.describeConfigs(resources).all().get(\n+                        KAFKA_QUERY_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+                if (configs.size() != 1) {\n+                    LOGGER.info(\"Expected one topic '{}' to match the query but got {}\", topicName, configs.values().size());\n+                    return;\n+                }\n+                final Config topic = configs.values().iterator().next();\n+                if (topic == null) {\n+                    LOGGER.info(\"Could not get config for topic '{}'\", topic);\n+                    return;\n+                }\n+\n+                final String cleanupPolicy = topic.get(CLEANUP_POLICY_NAME).value();\n+                if (!CLEANUP_POLICY_VALUE.equals(cleanupPolicy)) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' but is '{}'\", topicName, CLEANUP_POLICY_NAME, CLEANUP_POLICY_VALUE,\n+                            cleanupPolicy);\n+                    return;\n+                }\n+\n+                final String retentionBytes = topic.get(RETENTION_BYTES_NAME).value();\n+                if (retentionBytes != null && Long.parseLong(retentionBytes) != UNLIMITED_VALUE) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' but is '{}'\", topicName, RETENTION_BYTES_NAME, UNLIMITED_VALUE, retentionBytes);\n+                    return;\n+                }\n+\n+                final String retentionMs = topic.get(RETENTION_MS_NAME).value();\n+                if (retentionMs != null && (Long.parseLong(retentionMs) != UNLIMITED_VALUE && Long.parseLong(retentionMs) < RETENTION_MS_MIN)) {\n+                    LOGGER.warn(\"Database history topic '{}' option '{}' should be '{}' or greater than '{}' (5 years) but is '{}'\", topicName, RETENTION_MS_NAME,\n+                            UNLIMITED_VALUE, RETENTION_MS_MIN, retentionMs);\n+                    return;\n+                }\n+\n+                final DescribeTopicsResult result = admin.describeTopics(Collections.singleton(topicName));\n+                if (result.values().size() != 1) {\n+                    LOGGER.info(\"Expected one topic '{}' to match the query but got {}\", topicName, result.values().size());\n+                    return;\n+                }\n+                final TopicDescription topicDesc = result.values().values().iterator().next().get();\n+                if (topicDesc == null) {\n+                    LOGGER.info(\"Could not get description for topic '{}'\", topicName);\n+                    return;\n+                }\n+\n+                final int partitions = topicDesc.partitions().size();\n+                if (partitions != PARTITION_COUNT) {\n+                    LOGGER.warn(\"Database history topic '{}' should have one partiton but has '{}'\", topicName, partitions);\n+                    return;\n+                }\n+\n+                LOGGER.info(\"Database history topic '{}' has correct settings\", topicName);\n+            }\n+            catch (Throwable e) {\n+                LOGGER.info(\"Attempted to validate database history topic but failed\", e);\n+            }\n+        });\n+    }\n+\n     @Override\n     public synchronized void stop() {\n+        if (checkTopicSettingsExecutor != null) {", "originalCommit": "f9c7d1166804297fe9b2a8ea37fe8293a5e223e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMDYyMQ==", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r405310621", "bodyText": "@gunnarmorling Done, but I don't believe you ;-)", "author": "jpechane", "createdAt": "2020-04-08T07:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyOTI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxOTgyOA==", "url": "https://github.com/debezium/debezium/pull/1390#discussion_r405319828", "bodyText": "Let me see... ;-)", "author": "gunnarmorling", "createdAt": "2020-04-08T07:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyOTI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "8c8a6042176e94b09a4b502b3f7410a4c61db373", "chunk": "diff --git a/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java b/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\nindex 30c6c33b9..0a94bea2c 100644\n--- a/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\n+++ b/debezium-core/src/main/java/io/debezium/relational/history/KafkaDatabaseHistory.java\n\n@@ -426,14 +426,13 @@ private void checkTopicSettings(String topicName) {\n             catch (Throwable e) {\n                 LOGGER.info(\"Attempted to validate database history topic but failed\", e);\n             }\n+            stopCheckTopicSettingsExecutor();\n         });\n     }\n \n     @Override\n     public synchronized void stop() {\n-        if (checkTopicSettingsExecutor != null) {\n-            checkTopicSettingsExecutor.shutdown();\n-        }\n+        stopCheckTopicSettingsExecutor();\n         try {\n             if (this.producer != null) {\n                 try {\n"}}, {"oid": "8c8a6042176e94b09a4b502b3f7410a4c61db373", "url": "https://github.com/debezium/debezium/commit/8c8a6042176e94b09a4b502b3f7410a4c61db373", "message": "DBZ-1905 Stop checking thread upong completion", "committedDate": "2020-04-08T07:22:22Z", "type": "commit"}]}