{"pr_number": 1809, "pr_title": "DBZ-2516 DBZ-2526 DBZ-2527 fix Debezium UI PoC issues", "pr_createdAt": "2020-09-14T16:37:19Z", "pr_url": "https://github.com/debezium/debezium/pull/1809", "timeline": [{"oid": "b135c9a075744673853e453790b5c4caaaed558a", "url": "https://github.com/debezium/debezium/commit/b135c9a075744673853e453790b5c4caaaed558a", "message": "DBZ-2516 add config fields for `datatype.propagate.source.type` and `column.propagate.source.type` properties", "committedDate": "2020-09-14T16:25:59Z", "type": "commit"}, {"oid": "9127d060b3435523e1edc7d069c4c326c375cfc4", "url": "https://github.com/debezium/debezium/commit/9127d060b3435523e1edc7d069c4c326c375cfc4", "message": "DBZ-2526 add DisplayName for MASK and TRUNCATE COLUMN fields", "committedDate": "2020-09-14T16:27:55Z", "type": "commit"}, {"oid": "f2323ad4e8429e328daa1a842eaea8f59b8dc2b1", "url": "https://github.com/debezium/debezium/commit/f2323ad4e8429e328daa1a842eaea8f59b8dc2b1", "message": "DBZ-2527 Add missing ListOfRegex validator to all regex list fields and fix dependent fields to not include @Deprecated whitelist/blacklist fields", "committedDate": "2020-09-14T16:33:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTk5OA==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488071998", "bodyText": "This was housekeeping. Java enums are always static.", "author": "rk3rn3r", "createdAt": "2020-09-14T16:39:39Z", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -41,7 +41,7 @@\n     /**\n      * The set of predefined BigIntUnsignedHandlingMode options or aliases.\n      */\n-    public static enum BigIntUnsignedHandlingMode implements EnumeratedValue {\n+    public enum BigIntUnsignedHandlingMode implements EnumeratedValue {", "originalCommit": "f2323ad4e8429e328daa1a842eaea8f59b8dc2b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NjM4MA==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488146380", "bodyText": "\ud83d\udc4d", "author": "gunnarmorling", "createdAt": "2020-09-14T18:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTk5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njc0NA==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488146744", "bodyText": "Did that cause issues?", "author": "gunnarmorling", "createdAt": "2020-09-14T18:46:00Z", "path": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlConnectorConfig.java", "diffHunk": "@@ -609,7 +609,7 @@ public static GtidNewChannelPosition parse(String value, String defaultValue) {\n                     \"Password to unlock the keystore file (store password) specified by 'ssl.trustore' configuration property or the 'javax.net.ssl.trustStore' system or JVM property.\");\n \n     public static final Field TABLES_IGNORE_BUILTIN = RelationalDatabaseConnectorConfig.TABLE_IGNORE_BUILTIN\n-            .withDependents(DATABASE_INCLUDE_LIST_NAME, DATABASE_WHITELIST_NAME);", "originalCommit": "f2323ad4e8429e328daa1a842eaea8f59b8dc2b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2MjQ1MA==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488462450", "bodyText": "Yes and no. I tried to cover that in the PR description on DBZ-2527. It will create a validation warning about that the dependent is not defined. That makes imo sense for the new include/exclude lists but should not show a warning for legacy whitelist/blacklist fields. That's why I removed the legacy fields.", "author": "rk3rn3r", "createdAt": "2020-09-15T07:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NjMzMQ==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488466331", "bodyText": "Gotcha, that makes sense. Thanks for clarifying!", "author": "gunnarmorling", "createdAt": "2020-09-15T08:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njc0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NzEwNA==", "url": "https://github.com/debezium/debezium/pull/1809#discussion_r488467104", "bodyText": "Wow, that was an oversight indeed. Thanks!", "author": "gunnarmorling", "createdAt": "2020-09-15T08:03:08Z", "path": "debezium-core/src/main/java/io/debezium/relational/RelationalDatabaseConnectorConfig.java", "diffHunk": "@@ -379,22 +383,39 @@ public static DecimalHandlingMode parse(String value, String defaultValue) {\n             .withDefault(true);\n \n     public static final Field MASK_COLUMN_WITH_HASH = Field.create(\"column.mask.hash.([^.]+).with.salt.(.+)\")\n+            .withDisplayName(\"Mask Columns Using Hash and Salt\")\n             .withType(Type.STRING)\n             .withWidth(Width.LONG)\n             .withImportance(Importance.MEDIUM)\n             .withDescription(\"A comma-separated list of regular expressions matching fully-qualified names of columns that should \"\n                     + \"be masked by hashing the input. Using the specified hash algorithms and salt.\");\n \n     public static final Field MASK_COLUMN = Field.create(\"column.mask.with.(d+).chars\")\n+            .withDisplayName(\"Mask Columns With n Asterisks\")\n             .withValidation(Field::isInteger)\n             .withDescription(\"A comma-separated list of regular expressions matching fully-qualified names of columns that should \"\n                     + \"be masked with configured amount of asterisk ('*') characters.\");\n \n     public static final Field TRUNCATE_COLUMN = Field.create(\"column.truncate.to.(d+).chars\")\n+            .withDisplayName(\"Truncate Columns To n Characters\")\n             .withValidation(Field::isInteger)\n             .withDescription(\"A comma-separated list of regular expressions matching fully-qualified names of columns that should \"\n                     + \"be truncated to the configured amount of characters.\");\n \n+    public static final Field PROPAGATE_COLUMN_SOURCE_TYPE = Field.create(\"column.propagate.source.type\")", "originalCommit": "f2323ad4e8429e328daa1a842eaea8f59b8dc2b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}