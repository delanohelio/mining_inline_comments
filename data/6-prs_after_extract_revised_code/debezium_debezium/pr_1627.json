{"pr_number": 1627, "pr_title": "DBZ-2094 Allow Postgres snapshotter to set streaming start on resume", "pr_createdAt": "2020-06-19T12:17:12Z", "pr_url": "https://github.com/debezium/debezium/pull/1627", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNzk1OQ==", "url": "https://github.com/debezium/debezium/pull/1627#discussion_r442907959", "bodyText": "@gunnarmorling I\u2019ve been thinking about your comments about synchronization on #1596 and I think I still need some clarification.  Just wrapping all access to the streamingSource with synchronization blocks inline in the ChangeEventSourceCoordinator#start and ChangeEventSourceCoordinator#commitOffset methods wouldn\u2019t protect from a race condition between the offset commit and the catch up streaming deactivation by setting streamingSource to null.\nThere are a couple options that I\u2019ve looked at other than using the ReentrantLock:\nA new synchronized function could be added here that handles both the null check and streamingSource.commitOffset(offset) call in ChangeEventSourceCoordinator#commitOffset and the streamingSource = null deactivation in ChangeEventSourceCoordinator#start. Personally, this feels unnecessarily complex and would be difficult to integrate with the other calls to streamingSource.\nOR\nA separate object stored in an instance variable could be use as a lock to synchronize on.\nObject streamingSourceLock = new Object();\n ...\npublic void commitOffset(Map<String, ?> offset) {\n    synchronized (streamingSourceLock) {\n        if (streamingSource != null && offset != null) {\n            streamingSource.commitOffset(offset);\n        }\n    }\n}\n\nSince BaseSourceTask has access to the executing ChangeEventSourceCoordinator reference, both threads should synchronize correctly. That said, I feel using a generic Object as a lock is unidiomatic compared to the ReentrantLock and I like the ReentrantLock because it highlights where the race condition might occur.\nThoughts?", "author": "grantcooksey", "createdAt": "2020-06-19T15:32:42Z", "path": "debezium-core/src/main/java/io/debezium/pipeline/ChangeEventSourceCoordinator.java", "diffHunk": "@@ -122,8 +126,23 @@ public ChangeEventSourceCoordinator(OffsetContext previousOffset, ErrorHandler e\n         });\n     }\n \n+    protected CatchUpStreamingResult executeCatchUpStreaming(OffsetContext previousOffset, ChangeEventSourceContext context,\n+                                                             SnapshotChangeEventSource snapshotSource)\n+            throws InterruptedException {\n+        return new CatchUpStreamingResult(false);\n+    }\n+\n+    protected void streamEvents(OffsetContext offsetContext, ChangeEventSourceContext context) throws InterruptedException {\n+        streamingSource = changeEventSourceFactory.getStreamingChangeEventSource(offsetContext);\n+        eventDispatcher.setEventListener(streamingMetrics);\n+        streamingMetrics.connected(true);\n+        LOGGER.info(\"Starting streaming\");\n+        streamingSource.execute(context);\n+        LOGGER.info(\"Finished streaming\");\n+    }\n+\n     public void commitOffset(Map<String, ?> offset) {\n-        if (streamingSource != null && offset != null) {\n+        if (!commitOffsetLock.isLocked() && streamingSource != null && offset != null) {", "originalCommit": "9e476511de3292696d9562182fd8f5c2c26cece5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyNzk3MA==", "url": "https://github.com/debezium/debezium/pull/1627#discussion_r445827970", "bodyText": "Getting back to this, now that 1.2 Final is out :)\nGood point, if the object can be set to null, we cannot synchronize on it. An alternative would be to declare the methods themselves as sychronized (or extract reasonably scoped methods), in which case the entire coordinator instance itself would be the synchronization object.", "author": "gunnarmorling", "createdAt": "2020-06-25T20:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNjk5OQ==", "url": "https://github.com/debezium/debezium/pull/1627#discussion_r453206999", "bodyText": "Sorry for the slow response here, got caught up with work!\nCould you clarify what you mean by synchronizing the methods? The start method is already synchronized and since streaming occurs there, any thread that calls start won't leave the method until the connector shuts down.  Adding another synchronized method to this class sounds like that would introduce a deadlock.", "author": "grantcooksey", "createdAt": "2020-07-11T15:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NjU5Nw==", "url": "https://github.com/debezium/debezium/pull/1627#discussion_r469946597", "bodyText": "@grantcooksey, I was a bit misled and missed that all this code runs async via the separate executor, i.e. the sychronized definition of start() doesn't impact it at all. I think your proposed solution is good.", "author": "gunnarmorling", "createdAt": "2020-08-13T13:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNzk1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d852d9e3ebf076f7eda19eced5cb759b5d51e25c", "url": "https://github.com/debezium/debezium/commit/d852d9e3ebf076f7eda19eced5cb759b5d51e25c", "message": "DBZ-2094 Allow Postgres snapshotter to set streaming start on resume\n\nWhen a connector resumes after previously streaming and takes a\nsnapshot, through a new method on the snapshotter interface,\nshouldStreamEventsStartingFromSnapshot, can choose whether\nto resume streaming from the last known streaming position or the\nbeginning of the snapshot. This is helpful for snapshotters that\nmay not want to resnapshot every table in the whitelist/blacklist\nbut not miss event on the tables that are skipped.", "committedDate": "2020-08-26T12:13:41Z", "type": "commit"}, {"oid": "d852d9e3ebf076f7eda19eced5cb759b5d51e25c", "url": "https://github.com/debezium/debezium/commit/d852d9e3ebf076f7eda19eced5cb759b5d51e25c", "message": "DBZ-2094 Allow Postgres snapshotter to set streaming start on resume\n\nWhen a connector resumes after previously streaming and takes a\nsnapshot, through a new method on the snapshotter interface,\nshouldStreamEventsStartingFromSnapshot, can choose whether\nto resume streaming from the last known streaming position or the\nbeginning of the snapshot. This is helpful for snapshotters that\nmay not want to resnapshot every table in the whitelist/blacklist\nbut not miss event on the tables that are skipped.", "committedDate": "2020-08-26T12:13:41Z", "type": "forcePushed"}]}