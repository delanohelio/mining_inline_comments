{"pr_number": 5304, "pr_title": "Issue 5114: Update the StreamCut for lastCheckpoint to Controller, once reader has moved past it", "pr_createdAt": "2020-11-05T09:42:08Z", "pr_url": "https://github.com/pravega/pravega/pull/5304", "timeline": [{"oid": "e075d26a81199b0a82f19eb29b00b907ce209230", "url": "https://github.com/pravega/pravega/commit/e075d26a81199b0a82f19eb29b00b907ce209230", "message": "first draft for CBR autoTruncate\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-05T09:31:24Z", "type": "commit"}, {"oid": "44cc5a68992844afbdd93cefcbbadd71e209b6a0", "url": "https://github.com/pravega/pravega/commit/44cc5a68992844afbdd93cefcbbadd71e209b6a0", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-05T10:03:16Z", "type": "commit"}, {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "url": "https://github.com/pravega/pravega/commit/fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-06T05:22:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MDU0MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520290540", "bodyText": "this config also seems to be part of anirudh's PR. can we ensure that we consolidate it.", "author": "shiveshr", "createdAt": "2020-11-10T05:12:53Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +49,28 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final ReaderGroupRetentionConfig retentionConfig;\n+\n+    public enum ReaderGroupRetentionConfig {", "originalCommit": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2OTQzMw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520369433", "bodyText": "Sure. Once that PR is merged I will remove this part and adjust my code to work with those changes.", "author": "pbelgundi", "createdAt": "2020-11-10T08:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "972f187fd53f8808dbec4fdea2ec1d19e419540e", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 47d7d2f96..97d463286 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -49,17 +50,17 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final ReaderGroupRetentionConfig retentionConfig;\n+    private final RetentionConfig retentionConfig;\n \n-    public enum ReaderGroupRetentionConfig {\n-        NO_CONSUMPTION_BASED_TRUNCATION(false, false),\n-        TRUNCATE_AT_USER_STREAMCUT(true, false),\n-        TRUNCATE_AT_LAST_CHECKPOINT(true, true);\n+    public enum RetentionConfig {\n+        NONE(false, false),\n+        CBR_USER_STREAMCUT(true, false),\n+        CBR_LAST_CHECKPOINT(true, true);\n \n         private boolean isReaderGroupASubscriber;\n         private boolean autoTruncateAtLastCheckpoint;\n \n-        ReaderGroupRetentionConfig(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n+        RetentionConfig(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n             this.isReaderGroupASubscriber = isSubscriber;\n             this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTgwNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520291806", "bodyText": "i gave the same comment on the other PR -- do we want to make it an enum?\nalso \"truncate at user streamcut\" as the enum value is confusion from the end users perspective.. what is a user streamcut?\ni suggested that we use two booleans.\n\nsubscribeForRetention\nacknowledge last checkpoint\nand to ensure that 2 is only available to be set when 1 is true, we can use builder methods and hide the setters for individual booleans.\n\nfor example:\nReaderGroupConfigBuilder {\n...\n   ReadGroupConfigBuilder subscribe(boolean acknowledgeAtCheckpoints) {\n       this.subscribe = true;\n       this.acknowledgeAtCheckpoints = acknowledgeAtCheckpoints;\n       return this;\n   }\n}", "author": "shiveshr", "createdAt": "2020-11-10T05:17:23Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +49,28 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final ReaderGroupRetentionConfig retentionConfig;\n+\n+    public enum ReaderGroupRetentionConfig {\n+        NO_CONSUMPTION_BASED_TRUNCATION(false, false),", "originalCommit": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3MTQ0Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520371447", "bodyText": "I see enum as a superior choice here because of the following reasons:\n\nWe don't allow users to make invalid choices (ex: subscriber=false, autoTruncate=true)\nIndicates to the user that both these flags are linked to the same functionality.\nUser Friendly - rather than asking users to set flags we let them choose a friendly enum name based on their functional requirements the internal implementation details of what flags we use to implement this are hidden from them.", "author": "pbelgundi", "createdAt": "2020-11-10T08:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1ODg0Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520458847", "bodyText": "Changed Enum names to indicate these are for ConsumtionBasedRetention", "author": "pbelgundi", "createdAt": "2020-11-10T10:36:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "972f187fd53f8808dbec4fdea2ec1d19e419540e", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 47d7d2f96..97d463286 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -49,17 +50,17 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final ReaderGroupRetentionConfig retentionConfig;\n+    private final RetentionConfig retentionConfig;\n \n-    public enum ReaderGroupRetentionConfig {\n-        NO_CONSUMPTION_BASED_TRUNCATION(false, false),\n-        TRUNCATE_AT_USER_STREAMCUT(true, false),\n-        TRUNCATE_AT_LAST_CHECKPOINT(true, true);\n+    public enum RetentionConfig {\n+        NONE(false, false),\n+        CBR_USER_STREAMCUT(true, false),\n+        CBR_LAST_CHECKPOINT(true, true);\n \n         private boolean isReaderGroupASubscriber;\n         private boolean autoTruncateAtLastCheckpoint;\n \n-        ReaderGroupRetentionConfig(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n+        RetentionConfig(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n             this.isReaderGroupASubscriber = isSubscriber;\n             this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjY1Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520292653", "bodyText": "are all readers reporting this streamcut? what happens if this fails\n\nbecause of intermittent issues\nbecause the reader was reporting a stale value and a newer value was already published to controller", "author": "shiveshr", "createdAt": "2020-11-10T05:20:32Z", "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "diffHunk": "@@ -258,10 +259,12 @@ private PositionInternal getCurrentPosition() {\n     private String updateGroupStateIfNeeded() throws ReaderNotInReaderGroupException {\n         PositionInternal position = null;\n         if (atCheckpoint != null) {\n+            // process the checkpoint we're at\n             position = refreshAndGetPosition();\n             groupState.checkpoint(atCheckpoint, position);\n             log.info(\"Reader {} completed checkpoint {}\", groupState.getReaderId(), atCheckpoint);\n             releaseSegmentsIfNeeded(position);\n+            groupState.updateTruncationStreamCutIfNeeded();", "originalCommit": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2NzAxNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520367014", "bodyText": "Every reader would invoke that method, but it executes only if this condition is true:\nif (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CBR_LAST_CHECKPOINT)\n        && !state.getCheckpointState().isLastCheckpointPublished()) {\n\nisLastCheckpointPublished() is true by default and is changed to false only by the last reader completing a checkpoint :\n\n  \n    \n      pravega/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n    \n    \n         Line 154\n      in\n      76e3a5b\n    \n    \n    \n    \n\n        \n          \n           isLastCheckpointPublished = false; \n        \n    \n  \n\n\nSo ideally this would only be executed by the lastReader completing the checkpoint and immediately after the streamcut is published to controller, we change the value of this variable back to \"true\" in state synchronizer, so no other Reader would attempt to publish again. If the streamcut publish from this reader fails, isLastCheckpointPublished remains false and so the next Reader getting to this point would attempt to publish. The time window between the flag value change = false and the publish completing is very small, hence chance of multiple other readers publishing the same value is very low.", "author": "pbelgundi", "createdAt": "2020-11-10T08:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2ODYyNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520368624", "bodyText": "because the reader was reporting a stale value and a newer value was already published to controller.\n\nWith regular fetchUpdates() being done I don't see the possibility of a reader trying to publish a stale checkpoint value and if that does happen the update would fail, based on streamcut validation checks added on Controller.", "author": "pbelgundi", "createdAt": "2020-11-10T08:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjY1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzMxNQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520293315", "bodyText": "map followed by foreach is two passes..\nwe can simply do it in one pass with foreach where you do the transformation and then call update subscriber streamcut.", "author": "shiveshr", "createdAt": "2020-11-10T05:22:51Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +472,27 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.ReaderGroupRetentionConfig.TRUNCATE_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {\n+                throw new CheckpointFailedException(\"Could not get positions for last checkpoint.\");\n+            }\n+            Set<StreamCut> streamCuts = cuts.get().entrySet().stream()\n+                    .map(entry -> new StreamCutImpl(entry.getKey(), entry.getValue()))", "originalCommit": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3NzAzMw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520477033", "bodyText": "Sure. Fixed.", "author": "pbelgundi", "createdAt": "2020-11-10T11:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "972f187fd53f8808dbec4fdea2ec1d19e419540e", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex 886749883..ef4dd3585 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -477,7 +477,7 @@ public class ReaderGroupStateManager {\n     public void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n-        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.ReaderGroupRetentionConfig.TRUNCATE_AT_LAST_CHECKPOINT)\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CBR_LAST_CHECKPOINT)\n         && !state.getCheckpointState().isLastCheckpointPublished()) {\n             // we get here only when this is the reader that has completed the lastCheckpoint\n             Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n"}}, {"oid": "972f187fd53f8808dbec4fdea2ec1d19e419540e", "url": "https://github.com/pravega/pravega/commit/972f187fd53f8808dbec4fdea2ec1d19e419540e", "message": "code changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-10T05:30:26Z", "type": "commit"}, {"oid": "76e3a5be72635262f95b48d85880fe27954f4e12", "url": "https://github.com/pravega/pravega/commit/76e3a5be72635262f95b48d85880fe27954f4e12", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-10T05:30:45Z", "type": "commit"}, {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "url": "https://github.com/pravega/pravega/commit/39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-10T11:09:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODM1Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098357", "bodyText": "This logic is incorrect. You don't need to re-serialize all the previous fields.", "author": "tkaitchuck", "createdAt": "2020-11-11T04:02:08Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -304,6 +334,29 @@ private void write01(ReaderGroupConfig object, RevisionDataOutput revisionDataOu\n             revisionDataOutput.writeMap(object.endingStreamCuts, keySerializer, valueSerializer);\n             revisionDataOutput.writeInt(object.getMaxOutstandingCheckpointRequest());\n         }\n+\n+        private void read02(RevisionDataInput revisionDataInput, ReaderGroupConfigBuilder builder) throws IOException {", "originalCommit": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwMzYyNw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521503627", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-11-11T17:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 97d463286..18a641a44 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -336,25 +336,11 @@ public class ReaderGroupConfig implements Serializable {\n         }\n \n         private void read02(RevisionDataInput revisionDataInput, ReaderGroupConfigBuilder builder) throws IOException {\n-            builder.automaticCheckpointIntervalMillis(revisionDataInput.readLong());\n-            builder.groupRefreshTimeMillis(revisionDataInput.readLong());\n-            ElementDeserializer<Stream> keyDeserializer = in -> Stream.of(in.readUTF());\n-            ElementDeserializer<StreamCut> valueDeserializer = in -> StreamCut.fromBytes(ByteBuffer.wrap(in.readArray()));\n-            builder.startFromStreamCuts(revisionDataInput.readMap(keyDeserializer, valueDeserializer));\n-            builder.endingStreamCuts(revisionDataInput.readMap(keyDeserializer, valueDeserializer));\n-            builder.maxOutstandingCheckpointRequest(revisionDataInput.readInt());\n             int ordinal = revisionDataInput.readCompactInt();\n             builder.retentionConfig(RetentionConfig.values()[ordinal]);\n         }\n \n         private void write02(ReaderGroupConfig object, RevisionDataOutput revisionDataOutput) throws IOException {\n-            revisionDataOutput.writeLong(object.getAutomaticCheckpointIntervalMillis());\n-            revisionDataOutput.writeLong(object.getGroupRefreshTimeMillis());\n-            ElementSerializer<Stream> keySerializer = (out, s) -> out.writeUTF(s.getScopedName());\n-            ElementSerializer<StreamCut> valueSerializer = (out, cut) -> out.writeBuffer(new ByteArraySegment(cut.toBytes()));\n-            revisionDataOutput.writeMap(object.startingStreamCuts, keySerializer, valueSerializer);\n-            revisionDataOutput.writeMap(object.endingStreamCuts, keySerializer, valueSerializer);\n-            revisionDataOutput.writeInt(object.getMaxOutstandingCheckpointRequest());\n             revisionDataOutput.writeCompactInt(object.retentionConfig.ordinal());\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODUzMQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098531", "bodyText": "Why is the old version being changed?", "author": "tkaitchuck", "createdAt": "2020-11-11T04:02:51Z", "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -255,11 +265,35 @@ private void read00(RevisionDataInput input, CheckpointStateBuilder builder) thr\n         private void write00(CheckpointState object, RevisionDataOutput output) throws IOException {\n             ElementSerializer<String> stringSerializer = RevisionDataOutput::writeUTF;\n             ElementSerializer<Long> longSerializer = RevisionDataOutput::writeLong;\n+            ElementSerializer<Boolean> boolSerializer = RevisionDataOutput::writeBoolean;", "originalCommit": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNzYyMA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521217620", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-11T09:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "252de5545e914d924ab7b5445127bea1640fa9fd", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\nindex f9e0b7677..5a6fa4452 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n\n@@ -259,7 +259,6 @@ public class CheckpointState {\n             builder.checkpoints(input.readCollection(stringDeserializer, ArrayList::new));\n             builder.uncheckpointedHosts(input.readMap(stringDeserializer, in -> in.readCollection(stringDeserializer, ArrayList::new)));\n             builder.checkpointPositions(input.readMap(stringDeserializer, in -> in.readMap(segmentDeserializer, longDeserializer)));\n-            builder.lastCheckpointPosition(input.readMap(segmentDeserializer, longDeserializer));\n         }\n \n         private void write00(CheckpointState object, RevisionDataOutput output) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODc3OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098778", "bodyText": "This is not a good use of sneakythrows. (See our contributing guidelines)", "author": "tkaitchuck", "createdAt": "2020-11-11T04:04:01Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)", "originalCommit": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyNDcyNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521224726", "bodyText": "This exception is thrown as a SneakyThrows in all places where we attempt to get a Streamcut from a checkpoint.\nSee: https://github.com/pravega/pravega/blob/master/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupImpl.java#L175\nhttps://github.com/pravega/pravega/blob/master/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupImpl.java#L389\nAs per Contributing guidelines, SneakyThrows should be used \"For the specific case where you know with certainty an exception cannot occur\" and this seems to be that case.", "author": "pbelgundi", "createdAt": "2020-11-11T09:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NTg1NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521665854", "bodyText": "Oh. I didn't realize it was impossible. In that case, it's fine.", "author": "tkaitchuck", "createdAt": "2020-11-11T22:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "252de5545e914d924ab7b5445127bea1640fa9fd", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex a41df99ec..30b789d52 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -475,7 +475,7 @@ public class ReaderGroupStateManager {\n     public void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n-        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CBR_LAST_CHECKPOINT)\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n         && !state.getCheckpointState().isLastCheckpointPublished()) {\n             // we get here only when this is the reader that has completed the lastCheckpoint\n             Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n"}}, {"oid": "252de5545e914d924ab7b5445127bea1640fa9fd", "url": "https://github.com/pravega/pravega/commit/252de5545e914d924ab7b5445127bea1640fa9fd", "message": "unit tests\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-11T11:22:06Z", "type": "commit"}, {"oid": "457e90dc65beebf9774553f5ec361eb872821e85", "url": "https://github.com/pravega/pravega/commit/457e90dc65beebf9774553f5ec361eb872821e85", "message": "minor changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-11T16:09:13Z", "type": "commit"}, {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "url": "https://github.com/pravega/pravega/commit/8f9349e7131c3e35c85fea89d2784ac866ca1610", "message": "code review comment fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-11T16:53:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NjQ1MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521666450", "bodyText": "Same situation here.", "author": "tkaitchuck", "createdAt": "2020-11-11T22:05:25Z", "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -259,7 +268,28 @@ private void write00(CheckpointState object, RevisionDataOutput output) throws I\n             output.writeCollection(object.checkpoints, stringSerializer);\n             output.writeMap(object.uncheckpointedHosts, stringSerializer, (out, hosts) -> out.writeCollection(hosts, stringSerializer));\n             output.writeMap(object.checkpointPositions, stringSerializer, (out, map) -> out.writeMap(map, segmentSerializer, longSerializer));\n+        }\n+\n+        private void read01(RevisionDataInput input, CheckpointStateBuilder builder) throws IOException {", "originalCommit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1ODAyNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521858026", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-12T06:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NjQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\nindex 836e89f41..d23a8a20b 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n\n@@ -268,27 +269,14 @@ public class CheckpointState {\n             output.writeCollection(object.checkpoints, stringSerializer);\n             output.writeMap(object.uncheckpointedHosts, stringSerializer, (out, hosts) -> out.writeCollection(hosts, stringSerializer));\n             output.writeMap(object.checkpointPositions, stringSerializer, (out, map) -> out.writeMap(map, segmentSerializer, longSerializer));\n+            output.writeMap(object.lastCheckpointPosition, segmentSerializer, longSerializer);\n         }\n \n         private void read01(RevisionDataInput input, CheckpointStateBuilder builder) throws IOException {\n-            ElementDeserializer<String> stringDeserializer = RevisionDataInput::readUTF;\n-            ElementDeserializer<Long> longDeserializer = RevisionDataInput::readLong;\n-            ElementDeserializer<Segment> segmentDeserializer = in -> Segment.fromScopedName(in.readUTF());\n-            builder.checkpoints(input.readCollection(stringDeserializer, ArrayList::new));\n-            builder.uncheckpointedHosts(input.readMap(stringDeserializer, in -> in.readCollection(stringDeserializer, ArrayList::new)));\n-            builder.checkpointPositions(input.readMap(stringDeserializer, in -> in.readMap(segmentDeserializer, longDeserializer)));\n-            builder.lastCheckpointPosition(input.readMap(segmentDeserializer, longDeserializer));\n-            builder.isPublished(input.readBoolean());\n+            builder.isLastCheckpointPublished(input.readBoolean());\n         }\n \n         private void write01(CheckpointState object, RevisionDataOutput output) throws IOException {\n-            ElementSerializer<String> stringSerializer = RevisionDataOutput::writeUTF;\n-            ElementSerializer<Long> longSerializer = RevisionDataOutput::writeLong;\n-            ElementSerializer<Segment> segmentSerializer = (out, segment) -> out.writeUTF(segment.getScopedName());\n-            output.writeCollection(object.checkpoints, stringSerializer);\n-            output.writeMap(object.uncheckpointedHosts, stringSerializer, (out, hosts) -> out.writeCollection(hosts, stringSerializer));\n-            output.writeMap(object.checkpointPositions, stringSerializer, (out, map) -> out.writeMap(map, segmentSerializer, longSerializer));\n-            output.writeMap(object.lastCheckpointPosition, segmentSerializer, longSerializer);\n             output.writeBoolean(object.isLastCheckpointPublished);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxOTkyNw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521819927", "bodyText": "Nit: I think we need to communicate that this retention config applies to all the streams the reader is attempting to read from.", "author": "shrids", "createdAt": "2020-11-12T03:58:33Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +195,17 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.", "originalCommit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMzE0MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521833141", "bodyText": "It applies only if CBR is enabled on the Stream on Controller. Thanks for bringing this up. Will improve the comment.", "author": "pbelgundi", "createdAt": "2020-11-12T04:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxOTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1Nzk1OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521857958", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-12T06:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxOTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 18a641a44..4e776f405 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -197,11 +206,14 @@ public class ReaderGroupConfig implements Serializable {\n \n        /**\n         * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n+        * Default value is NO_IMPACT.\n         *\n         * @param retentionConfig The retention configuration for this {@link ReaderGroup}.\n         * @return Reader group config builder.\n         */\n-       public ReaderGroupConfigBuilder retentionConfig(RetentionConfig retentionConfig) {\n+       public ReaderGroupConfigBuilder retentionConfig(StreamDataRetention retentionConfig) {\n            this.retentionConfig = retentionConfig;\n            return this;\n        }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMDc2MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521830760", "bodyText": "If there is compaction then the isLastCheckpointPublished would be set to true, even though it was never published. This would be an issue right ?", "author": "shrids", "createdAt": "2020-11-12T04:23:00Z", "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -206,7 +215,7 @@ CheckpointState copy() {\n         Map<String, Map<Segment, Long>> cpps = new HashMap<>();\n         checkpointPositions.forEach((cp, pos) -> cpps.put(cp, new HashMap<>(pos)));\n         Map<Segment, Long> lcp = lastCheckpointPosition == null ? null : new HashMap<>(lastCheckpointPosition);\n-        return new CheckpointState(cps, ucph, cpps, lcp);\n+        return new CheckpointState(cps, ucph, cpps, lcp, true);", "originalCommit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNDY3OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521834678", "bodyText": "Good catch. Yes, thats' a mistake. Fixed it now.", "author": "pbelgundi", "createdAt": "2020-11-12T04:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMDc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\nindex 836e89f41..d23a8a20b 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java\n\n@@ -215,7 +215,7 @@ public class CheckpointState {\n         Map<String, Map<Segment, Long>> cpps = new HashMap<>();\n         checkpointPositions.forEach((cp, pos) -> cpps.put(cp, new HashMap<>(pos)));\n         Map<Segment, Long> lcp = lastCheckpointPosition == null ? null : new HashMap<>(lastCheckpointPosition);\n-        return new CheckpointState(cps, ucph, cpps, lcp, true);\n+        return new CheckpointState(cps, ucph, cpps, lcp, isLastCheckpointPublished);\n     }\n     \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjA0NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521832045", "bodyText": "nit: cuts.isEmpty()", "author": "shrids", "createdAt": "2020-11-12T04:28:10Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {", "originalCommit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2Mjk5NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521862994", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-12T06:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex 30b789d52..2a2ea5cda 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -475,7 +475,7 @@ public class ReaderGroupStateManager {\n     public void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n-        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n         && !state.getCheckpointState().isLastCheckpointPublished()) {\n             // we get here only when this is the reader that has completed the lastCheckpoint\n             Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjIyMg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521832222", "bodyText": "Nit: No need of stream(). cuts.get().entrySet().forEach(..)", "author": "shrids", "createdAt": "2020-11-12T04:28:51Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {\n+                throw new CheckpointFailedException(\"Could not get positions for last checkpoint.\");\n+            }\n+            cuts.get().entrySet().stream().forEach(entry ->", "originalCommit": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2MzAyMg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521863022", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-12T06:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex 30b789d52..2a2ea5cda 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -475,7 +475,7 @@ public class ReaderGroupStateManager {\n     public void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n-        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n         && !state.getCheckpointState().isLastCheckpointPublished()) {\n             // we get here only when this is the reader that has completed the lastCheckpoint\n             Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n"}}, {"oid": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "url": "https://github.com/pravega/pravega/commit/0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "message": "minor changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-12T05:58:51Z", "type": "commit"}, {"oid": "b555fb8e5c8b5038414edcdd8271341e9de58f18", "url": "https://github.com/pravega/pravega/commit/b555fb8e5c8b5038414edcdd8271341e9de58f18", "message": "code review changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-12T06:14:08Z", "type": "commit"}, {"oid": "cb2bbe0bbf8cd3e1aca44bffbde183ceecb72e25", "url": "https://github.com/pravega/pravega/commit/cb2bbe0bbf8cd3e1aca44bffbde183ceecb72e25", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-13T04:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODk5NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523248994", "bodyText": "I hate to be pedantic, but this is public facing Javadoc, so I really want to nail it.\n\"this enum indicate if a ReaderGroup chooses Consumption based data retention\"\nThis is not strictly accurate. The setting is actually on the stream so the reader group cannot \"choose\" consumption based retention. This only configures how this reader group interacts with the setting.\nLet's make this explanation as precise as possible, and probably link to the Stream configuration setting so that users can locate it easily.", "author": "tkaitchuck", "createdAt": "2020-11-13T21:46:15Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.", "originalCommit": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNjE1NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r524926155", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-11-17T07:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0dac11d23c5975864c3d1218443953c3609d90bb", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 4e776f405..696387537 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,13 +53,21 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n-     * For Consumption based retention to work, in addition to setting the appropriate value here,\n-     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n      *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - ConsumptionBasedRetention, StreamCut corresponding to lastCompletedCheckpoint is used as truncation point.\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTU4Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523249586", "bodyText": "\"For Consumption based retention to work...\"\nAs this is specified on the ReaderGroup and the group may have multiple streams with different settings this should be more explicit. Spell out what happens if it is not enabled on the stream.", "author": "tkaitchuck", "createdAt": "2020-11-13T21:47:39Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,", "originalCommit": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNjExMw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r524926113", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-11-17T07:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0dac11d23c5975864c3d1218443953c3609d90bb", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 4e776f405..696387537 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,13 +53,21 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n-     * For Consumption based retention to work, in addition to setting the appropriate value here,\n-     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n      *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - ConsumptionBasedRetention, StreamCut corresponding to lastCompletedCheckpoint is used as truncation point.\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTc1Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523249757", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n          \n          \n            \n                 * NO_IMPACT - Read Positions of Readers do not impact Stream retention.", "author": "tkaitchuck", "createdAt": "2020-11-13T21:48:06Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,\n+     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.", "originalCommit": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNjA0Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r524926043", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-17T07:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0dac11d23c5975864c3d1218443953c3609d90bb", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 4e776f405..696387537 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,13 +53,21 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n-     * For Consumption based retention to work, in addition to setting the appropriate value here,\n-     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n      *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - ConsumptionBasedRetention, StreamCut corresponding to lastCompletedCheckpoint is used as truncation point.\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDQ3MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523250470", "bodyText": "As this setting only affects consumption based retention, having it in the name is somewhat redundant.", "author": "tkaitchuck", "createdAt": "2020-11-13T21:49:53Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,\n+     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.", "originalCommit": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNjAxMA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r524926010", "bodyText": "Ok. changed this.", "author": "pbelgundi", "createdAt": "2020-11-17T07:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0dac11d23c5975864c3d1218443953c3609d90bb", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 4e776f405..696387537 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,13 +53,21 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n-     * For Consumption based retention to work, in addition to setting the appropriate value here,\n-     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n      *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - ConsumptionBasedRetention, StreamCut corresponding to lastCompletedCheckpoint is used as truncation point.\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MTAzNQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523251035", "bodyText": "\"should be set to\" is not helpful.\nSpecify what happens with each setting including NO_IMPACT", "author": "tkaitchuck", "createdAt": "2020-11-13T21:51:27Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +204,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to", "originalCommit": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkyNTkxMA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r524925910", "bodyText": "I have addressed that in the javadoc for the enum.", "author": "pbelgundi", "createdAt": "2020-11-17T07:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MTAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0dac11d23c5975864c3d1218443953c3609d90bb", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 4e776f405..696387537 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -208,7 +216,7 @@ public class ReaderGroupConfig implements Serializable {\n         * Set the retention config for the {@link ReaderGroup}.\n         * For Consumption based retention of data in the Stream, this field should be set to\n         * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n-        * Default value is NO_IMPACT.\n+        * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.\n         *\n         * @param retentionConfig The retention configuration for this {@link ReaderGroup}.\n         * @return Reader group config builder.\n"}}, {"oid": "0dac11d23c5975864c3d1218443953c3609d90bb", "url": "https://github.com/pravega/pravega/commit/0dac11d23c5975864c3d1218443953c3609d90bb", "message": "code review javadoc comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-17T06:59:29Z", "type": "commit"}, {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8", "url": "https://github.com/pravega/pravega/commit/8598e98a7e17f5025417d50975bc4b7231e932a8", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-17T06:59:48Z", "type": "commit"}, {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8", "url": "https://github.com/pravega/pravega/commit/8598e98a7e17f5025417d50975bc4b7231e932a8", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-17T06:59:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTc4OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525425789", "bodyText": "the Reader Group needs to register with the Stream as a Subscriber\nThis is simply not true.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:21:41Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1OTg0Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525859846", "bodyText": "It is true, but an implementation detail. Changed now.", "author": "pbelgundi", "createdAt": "2020-11-18T07:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1NjYyNw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526356627", "bodyText": "It is perfectly valid to set no_impact and not be a subscriber. So it's not needed.", "author": "tkaitchuck", "createdAt": "2020-11-18T19:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMDkxNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525430916", "bodyText": "Please do not use the word \"subscriber\" in this way, as it will confuse users.\nSimilarly \"register\" implies additional follow up questions like \"do I need to unregister?\", \"how do I do that?\" etc.\nThis should only explain what the user needs to know, not how it is implemented.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:30:00Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MTA2MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525871060", "bodyText": "removed word subscriber and register.", "author": "pbelgundi", "createdAt": "2020-11-18T07:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMDkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjQxNQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525432415", "bodyText": "If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n\n\n\"Consumption based\" is not clear. Please link to the exact setting explicitly.\n\"should be 'NO_IMPACT'\" is a meaningless detective. We should say that this setting will have no effect regardless of what it is set to.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:32:36Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODM5MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525868391", "bodyText": "Consumption based retention has just been explained 2 lines earlier along with the link. Here we're explaining the setting for non-consumption based retention so adding a link to the Consumption enum value will be incorrect.", "author": "pbelgundi", "createdAt": "2020-11-18T07:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1NzQ2NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526357465", "bodyText": "Consumption enum value will be incorrect.\n\nA fairly common case a customer will have is to have a reader group reading from two streams, one of which has CBR enabled the other does not. Your explanation and comment seems to imply it would be wrong for such a reader group to configure CBR. I was assuming that doing so would be fine and would work as expected on the stream with it enabled and have no effect on the other stream. So, will it throw an exception? But if a user is going to get exceptions if that needs to be made very explicit so they know how to restructure their application to avoid it. Otherwise we just document what it actually does.", "author": "tkaitchuck", "createdAt": "2020-11-18T19:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNDQ4MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526604481", "bodyText": "I was assuming that doing so would be fine and would work as expected on the stream with it enabled and have no effect on the other stream.\n\nYes. Thats right.\nHowever, its hard to provide explanation for all varied combinations of Stream and Reader Group options and their impact in the javadoc and still keep it succinct.\nI could add these details in the User Documentation.", "author": "pbelgundi", "createdAt": "2020-11-19T05:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjc4Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525432783", "bodyText": "\"Consumption based\" is not clear. Please link to the exact setting explicitly.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:33:15Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NDk4Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525854983", "bodyText": "That retention type was added by another PR which had not been merged till this morning. I have added a reference to it now.", "author": "pbelgundi", "createdAt": "2020-11-18T07:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNDM4OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525434389", "bodyText": "This will break the promise of ConsumptionBased Retention.\n\nWhat!?!?", "author": "tkaitchuck", "createdAt": "2020-11-17T19:34:46Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MTM3MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525871370", "bodyText": "Yes it does break the promise, but I have reworded the same....", "author": "pbelgundi", "createdAt": "2020-11-18T07:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNDM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNTcxOA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525435718", "bodyText": "Please do not use the word \"published\" it has other connotations.\nAdditionally there is no need to explain the implementation. Stick to explaining the effect on the user's application.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:35:52Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MTE5Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525871197", "bodyText": "removed the word publish...", "author": "pbelgundi", "createdAt": "2020-11-18T07:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNTcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MDgzOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525440839", "bodyText": "Currently the only retention policies are \"time\" and \"size\". Do you mean to modify this file in this PR?\nThis should link to the actual policy not leave people to track it down themselves.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:40:09Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MDk0NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525870945", "bodyText": "This has been handled in a separate PR.", "author": "pbelgundi", "createdAt": "2020-11-18T07:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MDgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525442929", "bodyText": "User provides the StreamCut for truncation using Consumption Based Retention.\n\nThis should link to the API through which it is provided.\nThe streamcut is not \"for truncation\".", "author": "tkaitchuck", "createdAt": "2020-11-17T19:41:54Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1NjA0Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525856047", "bodyText": "That API is not added as part of this PR but as part of another PR. So the link can be added in that PR.", "author": "pbelgundi", "createdAt": "2020-11-18T07:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM2NjM3Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526366377", "bodyText": "This is a public API. It the Javadocs are published, and people write their application against it. We can't have these in different versions of pervega. It leaves the API in an inconsistent state.\nPlease combine these PRs.", "author": "tkaitchuck", "createdAt": "2020-11-18T19:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4MzQyOA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526383428", "bodyText": "Perhaps these PRs should be going into a feature branch. It would allow us to avoid this sort of inconsistency in master.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyOTI3Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526629273", "bodyText": "To be able to reference it in the javadoc, I have added updateRetentionStreamCut API to this PR now and added a link in the javadoc.", "author": "pbelgundi", "createdAt": "2020-11-19T06:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDgzMg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525444832", "bodyText": "Not a truncation point.\nHere and elsewhere don't say \"for Consumption Based Retention\" refer to the specific stream configuration policy. Users don't know our PDPs or internal names for things.", "author": "tkaitchuck", "createdAt": "2020-11-17T19:43:29Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1Nzk2Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525857966", "bodyText": "I understand users are not expected to read PDPs or design documents.\nHowever, the intent of a Javadoc is to explain how an API works and not to provide documentation explaining working of the entire feature.\nFor that we could do with some user documentation that explains how Consumption based retention needs to be configured and used in Pravega.\nGH issue for the same: #5350", "author": "pbelgundi", "createdAt": "2020-11-18T07:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NDI0Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526384246", "bodyText": "FYI those docs are in the repo https://github.com/pravega/pravega/tree/master/documentation/src/docs\nso you can edit them as part of a PR, or in a branch.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MTA4MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525451080", "bodyText": "This method does not need to be public.\nShouldn't there be an API method on ReaderGroup that calls this?", "author": "tkaitchuck", "createdAt": "2020-11-17T19:48:30Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -463,7 +470,23 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3ODk5Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525878993", "bodyText": "removed 'public' modifier from this method.", "author": "pbelgundi", "createdAt": "2020-11-18T07:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex 349948195..96517c82d 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -472,7 +472,7 @@ public class ReaderGroupStateManager {\n     }\n \n     @SneakyThrows(CheckpointFailedException.class)\n-    public void updateTruncationStreamCutIfNeeded() {\n+    void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n         if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525452558", "bodyText": "Why do we check just CONSUMPTION_BASED_AT_LAST_CHECKPOINT\nIs it invalid to set CONSUMPTION_BASED_USER_STREAMCUT and call this method? If so why? There is no inconsistency.\nAdditionally if the user is making a mistake if this is set to \"no_impact\" should it silently do nothing or throw?", "author": "tkaitchuck", "createdAt": "2020-11-17T19:49:44Z", "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -463,7 +470,23 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyOTY3Mg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525829672", "bodyText": "Is it invalid to set CONSUMPTION_BASED_USER_STREAMCUT and call this method? If so why?\n\nThere are 2 ways to use Consumption based retention on Streams.\nOne where the user provides the truncation stream-cut and the other where the stream-cut corresponding to the last checkpoint is used as truncation stream-cut. We want to publish the stream-cut corresponding to the last checkpoint only when the user has chosen the later option by specifying the value CONSUMPTION_BASED_AT_LAST_CHECKPOINT against the retentionConfig field.", "author": "pbelgundi", "createdAt": "2020-11-18T05:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3NTgwNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525875806", "bodyText": "Additionally if the user is making a mistake if this is set to \"no_impact\" should it silently do nothing or throw?\n\nIf the user choses NO_IMPACT, when the stream is configured for Consumption Based Retention its Stream-Cuts won't be published to Controller and it would essentially become a non-subscriber RG where it can read from the Stream but its reads do not impact Stream truncation.", "author": "pbelgundi", "createdAt": "2020-11-18T07:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NTM2OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526385368", "bodyText": "Consumption Based Retention promise is broken\n\nThen the API is broken. It needs to either throw an exception because the case is invalid and document that it does this explicitly, or better yet be written in such a way that invalid states cannot be expressed. (By either making expressing them impossible or defining them as valid and documenting what they do)", "author": "tkaitchuck", "createdAt": "2020-11-18T20:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4ODIyOA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526388228", "bodyText": "We want to publish the stream-cut corresponding to the last checkpoint only when the user has chosen the later option\n\nWhy do we want this? It seems like an application could both ask that the retention cut be updated at checkpoints and sometimes provide its own value. It's certainly possible to write such an application. If the user does that now, they will simply get confusing undocumented behavior. A choice needs to be made as to what it does, and that behavior needs to be defined. If it is \"invalid\" then it should throw, and the exception should stated in the Javadoc. If it is valid then what happens must be specified.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MTU1OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526581559", "bodyText": "It seems like an application could both ask that the retention cut be updated at checkpoints and sometimes provide its own value.\n\nThis can be disallowed, by the Client API that accepts truncation Stream-Cuts for CBR, by checking  ReaderGroupConfig.retentionConfig == CONSUMPTION_BASED_USER_STREAM_CUT.\nAbove check \"retentionConfig == CONSUMPTION_BASED_AT_LAST_CHECKPOINT\" is necessary because we want to publish that stream-cut only when the user has chosen enum option CONSUMPTION_BASED_AT_LAST_CHECKPOINT.", "author": "pbelgundi", "createdAt": "2020-11-19T04:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MjE2MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526582160", "bodyText": "If the user does that now, they will simply get confusing undocumented behavior.\n\nThe system behaves as per the retentionConfig option chosen by the user.", "author": "pbelgundi", "createdAt": "2020-11-19T04:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkzMTYyNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527931626", "bodyText": "This can be disallowed,\n\nThe code here is not disallowing this. It should either work and pass the data to the controller or actually enforce that it is disallowed by throwing an exception.\n\nThe system behaves as per the retentionConfig option chosen by the user.\n\nIt is not. The docs do not explain what happens if CONSUMPTION_BASED_USER_STREAMCUT is specified and this method is invoked. If that is invalid then this must throw. If it is valid it must work. Silently ignoring the call violates either assumption.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4MTc1NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528481754", "bodyText": "I don't see any reason to throw an exception here.\nIf the user selects CONSUMPTION_BASED_USER_STREAMCUT [now called MANUAL_RELEASE_AT_USER_STREAMCUT] he is required to invoke updateRetentionStreamCut() which is a different API from this one and a public API.\nThis is mentioned in the javadoc comments for the ENUM along with a link to that API.\nThe updateTruncationStreamCut() method here, is not a public API and is only invoked internally to publish the checkpoint StreamCut to Controller. These are 2 separate methods.\nThe updateRetentionStreamCut() call does throw an UnsupportedOperationException when the RG Retention config is not set to \"CONSUMPTION_BASED_USER_STREAMCUT\".", "author": "pbelgundi", "createdAt": "2020-11-23T05:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\nindex 349948195..96517c82d 100644\n--- a/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n+++ b/client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java\n\n@@ -472,7 +472,7 @@ public class ReaderGroupStateManager {\n     }\n \n     @SneakyThrows(CheckpointFailedException.class)\n-    public void updateTruncationStreamCutIfNeeded() {\n+    void updateTruncationStreamCutIfNeeded() {\n         ReaderGroupState state = sync.getState();\n         // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n         if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NTYwNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525455604", "bodyText": "\"CONSUMPTION_BASED_USER_STREAMCUT\" reflects how it is being used. This is fine in most code, but this is our public API, so everything should reflect the user's perspective.\nSo something like \"HOLD_DATA_UNTIL_RELEASED\" or similar depending on the name of the api they are calling (this example is assuming the method were to be called \"releaseDataBefore(streamCut)\" or similar).", "author": "tkaitchuck", "createdAt": "2020-11-17T19:52:10Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * */\n+    public enum StreamDataRetention {\n+        NO_IMPACT(false, false),\n+        CONSUMPTION_BASED_USER_STREAMCUT(true, false),", "originalCommit": "8598e98a7e17f5025417d50975bc4b7231e932a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1ODc1OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525858759", "bodyText": "\"HOLD_DATA_UNTIL_RELEASED\" does not bring out that this is the option to choose for Consumption based retention.", "author": "pbelgundi", "createdAt": "2020-11-18T07:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM1NTc3MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526355770", "bodyText": "True. Perhaps the enum type ie StreamDataRetention could do this? After they all relate to that.", "author": "tkaitchuck", "createdAt": "2020-11-18T19:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NTYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzQyOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526793429", "bodyText": "Filed issue for this: #5356", "author": "pbelgundi", "createdAt": "2020-11-19T11:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NTYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex 696387537..971822321 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -54,20 +54,19 @@ public class ReaderGroupConfig implements Serializable {\n \n     /**\n      * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n-     * the Reader Group needs to register with the Stream as a Subscriber\n-     * and periodically publish retention StreamCuts either manually or at checkpoints.\n-     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n      * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     * If the Stream's Retention Policy is not Consumption based, retentionConfig can be set to 'NO_IMPACT'.\n      *\n      * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n-     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n-     * and retention StreamCuts cannot be published for this ReaderGroup.\n-     * This will break the promise of ConsumptionBased Retention.\n+     * 'NO_IMPACT', the ReaderGroup cannot publish consumption Stream-Cuts to Controller and\n+     * Consumption based retention of data in the Stream will not happen.\n      *\n      * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n      * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is notified as truncation Stream-Cut for Consumption Based Retention.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"oid": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "url": "https://github.com/pravega/pravega/commit/27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "message": "code review  fixes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-18T07:27:02Z", "type": "commit"}, {"oid": "fac698ae9558f1d3050aeea7929b7c7f0b73a113", "url": "https://github.com/pravega/pravega/commit/fac698ae9558f1d3050aeea7929b7c7f0b73a113", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-18T07:27:20Z", "type": "commit"}, {"oid": "038000a27b910c9bb1c758455c0f3dcd470519ca", "url": "https://github.com/pravega/pravega/commit/038000a27b910c9bb1c758455c0f3dcd470519ca", "message": "javadoc changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-18T07:32:36Z", "type": "commit"}, {"oid": "fb360a85d1fbe3f214b4b28fc2da52dae54149b3", "url": "https://github.com/pravega/pravega/commit/fb360a85d1fbe3f214b4b28fc2da52dae54149b3", "message": "javadoc improvements\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-18T07:49:05Z", "type": "commit"}, {"oid": "516a3c12453823cdd34ccc5392fc6e4d8b5791be", "url": "https://github.com/pravega/pravega/commit/516a3c12453823cdd34ccc5392fc6e4d8b5791be", "message": "javadoc fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-18T10:52:37Z", "type": "commit"}, {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "url": "https://github.com/pravega/pravega/commit/29b2cbc29ac16fadb84116f1b63861e8a549eb08", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-18T15:16:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MDE4NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526390184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n          \n          \n            \n                 * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n          \n          \n            \n                 * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "author": "tkaitchuck", "createdAt": "2020-11-18T20:14:54Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNzg5Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526607896", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-19T05:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MDE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MjI1Mg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526392252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n          \n          \n            \n                 * the point in the Stream till which it has completed consuming data.\n          \n          \n            \n                 * the Reader Group may supply StreamCuts which indicate\n          \n          \n            \n                 * the point through which it no longer requires data be retained.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:17:54Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMjU2NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526912565", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-19T14:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MjI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzAwOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526397009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n          \n          \n            \n                 * This can be done automatically at each checkpoint by setting the `retentionConfig` to {@link ReaderGroupConfig#CONSUMPTION_BASED_AT_LAST_CHECKPOINT}.\n          \n          \n            \n                 * Alternatively the ReaderGroup can request the data be held until {@link  ... } is called by setting `retentionConfig` to {@link ReaderGroupConfig#CONSUMPTION_BASED_USER_STREAMCUT}.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:23:46Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNTk3OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526915979", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-19T14:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzcwOA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526397708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n          \n          \n            \n                 * If the ReaderGroup does not wish to affect retention {@ReaderGroupConfig#NO_IMPACT} can be used.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:24:59Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzYxNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526917614", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-19T14:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5ODU3OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526398578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n          \n          \n            \n                 * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n          \n          \n            \n                 * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n          \n          \n            \n                 * and so Consumption based retention of data in the Stream would not happen.\n          \n      \n    \n    \n  \n\nA stream may have multiple reader groups, where one wishes to retain the data explicitly and the other does not care. This is an important usecase.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:26:28Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n+     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n+     * and so Consumption based retention of data in the Stream would not happen.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxNzg4Mg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526917882", "bodyText": "I have stated both in the javadoc now.", "author": "pbelgundi", "createdAt": "2020-11-19T14:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5ODU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTQ4MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526399480", "bodyText": "I think we can eliminate these separate bullets if we explain each in the paragraph above.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:28:06Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n+     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n+     * and so Consumption based retention of data in the Stream would not happen.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMDEwMQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526930101", "bodyText": "Keeping these as they are not explained in the paragraph above.", "author": "pbelgundi", "createdAt": "2020-11-19T14:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526400068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * For Consumption based retention of data in the Stream, this field should be set to\n          \n          \n            \n                    * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n          \n      \n    \n    \n  \n\nAgain it is valid for a stream to enable CBR and for one reader group to not take advantage of it.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:29:14Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +213,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MzUwNg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526583506", "bodyText": "Yes it is completely valid. That would be a non-subscriber Reader Group.\nSee: https://github.com/pravega/pravega/wiki/PDP-47:-Pravega-Streams:-Consumption-Based-Retention", "author": "pbelgundi", "createdAt": "2020-11-19T04:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNjI4Ng==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527926286", "bodyText": "Ok. Then please remove these two lines.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDY4OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528704689", "bodyText": "I have changed this based on recent discussions. I think this explanation is necessary to give the user a correct understanding of when RG reads will impact truncation and when not.", "author": "pbelgundi", "createdAt": "2020-11-23T13:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "da8734600f7fe8a578370d1d72b550e342cd4e48", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..4e7deaa2e 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -217,8 +219,9 @@ public class ReaderGroupConfig implements Serializable {\n         * Set the retention config for the {@link ReaderGroup}.\n         * For Consumption based retention of data in the Stream, this field should be set to\n         * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n-        * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.\n-        *\n+        * See: {@link ReaderGroupConfig.StreamDataRetention}\n+        * Default value: NO_IMPACT.\n+        * \n         * @param retentionConfig The retention configuration for this {@link ReaderGroup}.\n         * @return Reader group config builder.\n         */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDMxOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526400319", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.\n          \n          \n            \n                    * Default value: NO_IMPACT.", "author": "tkaitchuck", "createdAt": "2020-11-18T20:29:38Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +213,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n+        * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyMTY5Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526921697", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-11-19T14:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "da8734600f7fe8a578370d1d72b550e342cd4e48", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..4e7deaa2e 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -217,8 +219,9 @@ public class ReaderGroupConfig implements Serializable {\n         * Set the retention config for the {@link ReaderGroup}.\n         * For Consumption based retention of data in the Stream, this field should be set to\n         * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n-        * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.\n-        *\n+        * See: {@link ReaderGroupConfig.StreamDataRetention}\n+        * Default value: NO_IMPACT.\n+        * \n         * @param retentionConfig The retention configuration for this {@link ReaderGroup}.\n         * @return Reader group config builder.\n         */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0NDc1NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526444754", "bodyText": "Does it throw if the application tries to set it that way? How do we communicate to the application that it is making a mistake?", "author": "fpj", "createdAt": "2020-11-18T21:49:26Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU5MTE2NA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526591164", "bodyText": "Sorry. My bad. That comment is wrong and I will change it.\nA ReaderGroup can set retentionConfig=NO_IMPACT, when the Stream has RetentionPolicy set to \"CONSUMPTION\" (CBR). What that means is the Reader Group is a non-subscriber and does not want its reads to impact Stream truncation.\nSo we cannot throw an exception when the Stream policy is CBR but RG Config says NO_IMPACT.", "author": "pbelgundi", "createdAt": "2020-11-19T04:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0NDc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526449191", "bodyText": "Could we simplify the terminology and say something like MANUAL vs. AUTOMATIC, and explain what the options mean?", "author": "fpj", "createdAt": "2020-11-18T21:56:49Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3MzgxNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526473814", "bodyText": "I think of the three options as:\n\"No need to extend retention for this reader group beyond the configured minimum\"\n\"Extend retention until the readers have read the data (and checkpointed) up to the configured maximum\"\n\"Extend retention up to the maximum unless explicitly released\"\nThe call used by the third option also makes sense in the case of the second. It's just not needed.\nIn terms of names, we could try to express this as either:\nRETAIN_UNTIL_CHECKPOINT and RETAIN_UNTIL_RELEASE\nor if not \"release\" whatever verb we want to associate with the method call, like maybe UPDATE\nOr we could try to get the idea of \"retain data until\" out into the enum class name and just have single word alternatives. Like just DEFAULT or CHECKPOINT. (Not sure what to call the manual option).\nOr we could frame it is the \"retention streamcut policy\" in which cases the values would be NONE, AT_CHECKPOINT, and MANUAL. This might require a bit more explanation.", "author": "tkaitchuck", "createdAt": "2020-11-18T22:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU5MzU1MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526593551", "bodyText": "I would not want to delay the merge of this PR till we've agreed on the perfect names.\nName refactoring could be done using another PR.", "author": "pbelgundi", "createdAt": "2020-11-19T04:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxMzI3MA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526713270", "bodyText": "It is not a matter of finding the perfect name, it is about providing and describing the right semantics. At the same time, from the title and description, this PR is about updating the controller with a stream cut. As such, updating configuration shouldn't be part of it, and as such, we can remove such changes from this PR and address the configuration change separately.", "author": "fpj", "createdAt": "2020-11-19T09:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczMjA4Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526732083", "bodyText": "As such, updating configuration shouldn't be part of it,\n\nWhat is config update? If this is about the retentionConfig enum, that is needed for deciding if we should publish the StreamCut to Controller.", "author": "pbelgundi", "createdAt": "2020-11-19T09:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NzkxOA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526777918", "bodyText": "As discussed, created a new issue to track the name changes: #5356", "author": "pbelgundi", "createdAt": "2020-11-19T11:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MTYxMg==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526451612", "bodyText": "I'm wondering about the use of the term CONSUMPTION for retention and whether it is going to be confusing to the user. Would terms like ACKNOWLEDGED, CONFIRMED or ASSURED be any better? I don't feel strongly about it at this point, but I want to have a discussion about it.", "author": "fpj", "createdAt": "2020-11-18T22:00:53Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "originalCommit": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2NzE2OQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526467169", "bodyText": "What if instead of adding a new type to the RetentionPolicy enum, we just overloaded the methods in the StreamConfig?\nInstead of: TIME, SIZE, and CONSUMPTION and the methods bySizeBytes, byTimeMillis, which take a single value and byConsumption which takes two longs and a unit which is either TIME or SIZE we instead have:\njust TIME, and SIZE and then have withTimeRangeMillis and withSizeRangeBytes which each take a min and max arg for time/size.\nIn this case calling bySizeBytes is equivalent to passing the same value as the min and the max for withSizeRangeBytes (except under the hood we can optimize to do fewer RPCs).\nThis means that all streams are always use CBR (it's just that some have the same max and min) and so we don't have to explain it as a distinct concept, instead we just say the reader group can request data be retained and when they do so it will be retained provided it is less than the stream's configured max.", "author": "tkaitchuck", "createdAt": "2020-11-18T22:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwODUxOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526808519", "bodyText": "Filed : #5356 for this", "author": "pbelgundi", "createdAt": "2020-11-19T11:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex b6e0ca221..7f46e2f0b 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,22 +53,22 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionConfig;\n \n     /**\n-     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n-     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n-     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n-     * the point in the Stream till which it has completed consuming data.\n-     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user wants the reads of this Reader Group to impact Stream data retention,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n      * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     * Setting these options implies the Reader Group will notify Controller of its consumption position {@link StreamCut}\n+     * and these will be used on Controller to retain only un-consumed data in the Stream.\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT'.\n      *\n-     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n-     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n-     * and so Consumption based retention of data in the Stream would not happen.\n-     *\n-     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.\n+     * NO_IMPACT - Read Positions of this Reader Group do not impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but Reader group does *not* want its reads to impact Stream data Retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n      * */\n     public enum StreamDataRetention {\n         NO_IMPACT(false, false),\n"}}, {"oid": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "url": "https://github.com/pravega/pravega/commit/2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T06:44:20Z", "type": "commit"}, {"oid": "45a5a2f6b25e79f243dfccf453055332b278d3a9", "url": "https://github.com/pravega/pravega/commit/45a5a2f6b25e79f243dfccf453055332b278d3a9", "message": "added config check for user streamcut\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T06:57:47Z", "type": "commit"}, {"oid": "dc55e220735933b49ee8f348ce4929dd335494db", "url": "https://github.com/pravega/pravega/commit/dc55e220735933b49ee8f348ce4929dd335494db", "message": "tests for new code\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T08:54:50Z", "type": "commit"}, {"oid": "acc16b9c855c3d85beec1cc161bc11750c5df9a0", "url": "https://github.com/pravega/pravega/commit/acc16b9c855c3d85beec1cc161bc11750c5df9a0", "message": "checkstyle fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T09:47:33Z", "type": "commit"}, {"oid": "d2ec31ef16f98fcce4bfa6c474370a8397be4f66", "url": "https://github.com/pravega/pravega/commit/d2ec31ef16f98fcce4bfa6c474370a8397be4f66", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-19T09:47:47Z", "type": "commit"}, {"oid": "aa63028e3c27db77033c39f6e2f7213c7eb90b27", "url": "https://github.com/pravega/pravega/commit/aa63028e3c27db77033c39f6e2f7213c7eb90b27", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T11:58:27Z", "type": "commit"}, {"oid": "da8734600f7fe8a578370d1d72b550e342cd4e48", "url": "https://github.com/pravega/pravega/commit/da8734600f7fe8a578370d1d72b550e342cd4e48", "message": "changes for javadoc improvements\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T14:19:44Z", "type": "commit"}, {"oid": "2e4b37f5ea1fea0638e61c2f5ef1195172da6312", "url": "https://github.com/pravega/pravega/commit/2e4b37f5ea1fea0638e61c2f5ef1195172da6312", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-19T14:19:59Z", "type": "commit"}, {"oid": "846cfcf9b5d34956b038e067c40b7e69cfa9a868", "url": "https://github.com/pravega/pravega/commit/846cfcf9b5d34956b038e067c40b7e69cfa9a868", "message": "javadoc comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-19T14:34:06Z", "type": "commit"}, {"oid": "59ea6d96aed10a9fdb7e85b800cfa312fce1069f", "url": "https://github.com/pravega/pravega/commit/59ea6d96aed10a9fdb7e85b800cfa312fce1069f", "message": "code review comments addressed\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-20T04:11:18Z", "type": "commit"}, {"oid": "4934affc310a245a2ea44bdfc458254773eef736", "url": "https://github.com/pravega/pravega/commit/4934affc310a245a2ea44bdfc458254773eef736", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-20T07:20:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjc5MQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527922791", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * and the user expects reads from this Reader Group to impact data retention in the Stream,\n          \n          \n            \n                 * the retentionConfig in {@link ReaderGroupConfig} should be set to\n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n          \n          \n            \n                 * and the the {@link ReaderGroupConfigBuilder#setRetentionConfig retentionConfig} is set \n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT',\n          \n          \n            \n                 * the reader group can extend data retention for the Stream.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:22:49Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwODA0Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528708043", "bodyText": "I have modified this based on today's discussion.", "author": "pbelgundi", "createdAt": "2020-11-23T13:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzIzMQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527923231", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n          \n          \n            \n                 * in the Stream, so only un-consumed data can be retained.\n          \n          \n            \n                 * Setting these options implies the Reader Group will supply its consumption {@link StreamCut},\n          \n          \n            \n                 * so only un-consumed data can be retained.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:23:48Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MTExNw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528691117", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-23T13:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzgxNQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527923815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n          \n          \n            \n                 * so consumption position notifications are not sent to Controller.\n          \n          \n            \n                 * If a Stream's Retention Policy is 'TIME' or 'SPACE' based the ReaderGroupConfig will have no effect.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:25:03Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MjkyOQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528692929", "bodyText": "If a Stream's Retention Policy is 'TIME' or 'SPACE' based the ReaderGroupConfig will have no effect.\n\nBased on discussion with @shiveshr and @fpj today, a Stream with TIME/SPACE based retention policy can be truncated based on RG Stream-Cuts. In this case the TIME/SPACE policy related paramters just serve as min/max limits for Consumption based retention.", "author": "pbelgundi", "createdAt": "2020-11-23T13:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDQzMA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527924430", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n          \n          \n            \n                 * NO_IMPACT - Set when the reader's positions of this Reader Group should not impact Stream retention.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:26:21Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTU0Mw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528695543", "bodyText": "Changed NO_IMPACT to NONE as suggested. fixed", "author": "pbelgundi", "createdAt": "2020-11-23T13:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkxMA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527924910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *             Set this value when :\n          \n          \n            \n                 *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n          \n          \n            \n                 *             but this Reader group does *not* want its reads to impact Stream data retention.\n          \n          \n            \n                 *             OR\n          \n          \n            \n                 *             b. Stream Retention policy is TIME/SPACE based.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:27:20Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but this Reader group does *not* want its reads to impact Stream data retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTY1NQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528695655", "bodyText": "fixed.", "author": "pbelgundi", "createdAt": "2020-11-23T13:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNTY3OA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527925678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n          \n          \n            \n                 * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.", "author": "tkaitchuck", "createdAt": "2020-11-20T19:28:56Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but this Reader group does *not* want its reads to impact Stream data retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.", "originalCommit": "4934affc310a245a2ea44bdfc458254773eef736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NTkzNQ==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528695935", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-23T13:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNTY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex ab49a92a0..bf47529b8 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -50,40 +50,25 @@ public class ReaderGroupConfig implements Serializable {\n \n     private final int maxOutstandingCheckpointRequest;\n \n-    private final StreamDataRetention retentionConfig;\n+    private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n-     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n-     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n-     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n-     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n-     * in the Stream, so only un-consumed data can be retained.\n-     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n-     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * If a Reader Group expects only unconsumed data to be retained in a Stream,\n+     * the retentionType in {@link ReaderGroupConfig} should be set to\n+     * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will supply its consumption {@link StreamCut}, so only un-consumed data can be retained.\n+     * This notification can be manual ('MANUAL_RELEASE') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n-     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n-     *             Set this value when :\n-     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n-     *             but this Reader group does *not* want its reads to impact Stream data retention.\n-     *             OR\n-     *             b. Stream Retention policy is TIME/SPACE based.\n-     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n-     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n+     * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n+     * MANUAL_RELEASE_AT_USER_STREAMCUT - User provides StreamCut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * AUTOMAITC_RELEASE_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.\n      * */\n     public enum StreamDataRetention {\n-        NO_IMPACT(false, false),\n-        CONSUMPTION_BASED_USER_STREAMCUT(true, false),\n-        CONSUMPTION_BASED_AT_LAST_CHECKPOINT(true, true);\n-\n-        private boolean isReaderGroupASubscriber;\n-        private boolean autoTruncateAtLastCheckpoint;\n-\n-        StreamDataRetention(boolean isSubscriber, boolean autoTruncateAtLastCheckpoint) {\n-            this.isReaderGroupASubscriber = isSubscriber;\n-            this.autoTruncateAtLastCheckpoint = autoTruncateAtLastCheckpoint;\n-        }\n+        NONE,\n+        MANUAL_RELEASE_AT_USER_STREAMCUT,\n+        AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT;\n     }\n \n    public static class ReaderGroupConfigBuilder implements ObjectBuilder<ReaderGroupConfig> {\n"}}, {"oid": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "url": "https://github.com/pravega/pravega/commit/f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "message": "code review comments addressed\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-23T13:19:57Z", "type": "commit"}, {"oid": "a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "url": "https://github.com/pravega/pravega/commit/a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-23T13:20:16Z", "type": "commit"}, {"oid": "a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "url": "https://github.com/pravega/pravega/commit/a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-23T13:20:16Z", "type": "forcePushed"}, {"oid": "93b8f3a4aeee718ee9a41d25108b93ca5fd7a425", "url": "https://github.com/pravega/pravega/commit/93b8f3a4aeee718ee9a41d25108b93ca5fd7a425", "message": "javadoc update\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-23T13:36:17Z", "type": "commit"}, {"oid": "39da9f884df2e5393b2d90757f4c033045da72eb", "url": "https://github.com/pravega/pravega/commit/39da9f884df2e5393b2d90757f4c033045da72eb", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-23T16:38:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTIzNA==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528971234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Reader Group wants only unconsumed data to be retained in a Stream,\n          \n          \n            \n                 * If a Reader Group wants unconsumed data to be retained in a Stream,", "author": "tkaitchuck", "createdAt": "2020-11-23T20:17:58Z", "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,34 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionType;\n+\n+    /**\n+     * If a Reader Group wants only unconsumed data to be retained in a Stream,", "originalCommit": "39da9f884df2e5393b2d90757f4c033045da72eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNzU1Nw==", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r529207557", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-11-24T05:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cb1169cfa0d59d882bbba12fcfb8a5cd7132148a", "chunk": "diff --git a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\nindex fe77098f0..9880679e0 100644\n--- a/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n+++ b/client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java\n\n@@ -53,13 +53,13 @@ public class ReaderGroupConfig implements Serializable {\n     private final StreamDataRetention retentionType;\n \n     /**\n-     * If a Reader Group wants only unconsumed data to be retained in a Stream,\n+     * If a Reader Group wants unconsumed data to be retained in a Stream,\n      * the retentionType in {@link ReaderGroupConfig} should be set to\n      * to 'MANUAL_RELEASE_AT_USER_STREAMCUT' or 'AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT'.\n      * Setting these options implies the Reader Group will supply its consumption {@link StreamCut},\n      * so only un-consumed data can be retained.\n      * This notification can be manual ('MANUAL_RELEASE_AT_USER_STREAMCUT') or automatic ('AUTOMATIC_RELEASE_AT_LAST_CHECKPOINT')\n-     * To ensure Reader Groups' read positions do not impact data retention in the Stream set retentionType='NONE',\n+     * To ensure Reader Groups' read positions do not impact data retention in the Stream, set retentionType='NONE',\n      * so consumption position notifications are not sent to Controller.\n      *\n      * NONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\n"}}, {"oid": "cb1169cfa0d59d882bbba12fcfb8a5cd7132148a", "url": "https://github.com/pravega/pravega/commit/cb1169cfa0d59d882bbba12fcfb8a5cd7132148a", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-11-24T05:14:45Z", "type": "commit"}, {"oid": "c338438a89289b7e15e7bd361084d9711bd7e457", "url": "https://github.com/pravega/pravega/commit/c338438a89289b7e15e7bd361084d9711bd7e457", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-24T05:15:07Z", "type": "commit"}, {"oid": "c338438a89289b7e15e7bd361084d9711bd7e457", "url": "https://github.com/pravega/pravega/commit/c338438a89289b7e15e7bd361084d9711bd7e457", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish", "committedDate": "2020-11-24T05:15:07Z", "type": "forcePushed"}]}