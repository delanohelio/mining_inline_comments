{"pr_number": 4979, "pr_title": "Issue 4978: DeltaIterator NullPointerException.", "pr_createdAt": "2020-07-24T20:17:22Z", "pr_url": "https://github.com/pravega/pravega/pull/4979", "timeline": [{"oid": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "url": "https://github.com/pravega/pravega/commit/25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "message": "Implement overrides for classes extending `FailingReplyProcessor`.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-02T17:19:47Z", "type": "commit"}, {"oid": "3534ab76d7b5de2754176f1160eb933729690564", "url": "https://github.com/pravega/pravega/commit/3534ab76d7b5de2754176f1160eb933729690564", "message": "Properly hook up the errorMessage handler in the RawClient.\nImprove logged message.\nImprove codecov.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-02T22:50:51Z", "type": "commit"}, {"oid": "8f79729e3741b200309448fdc0afe3828e39eaee", "url": "https://github.com/pravega/pravega/commit/8f79729e3741b200309448fdc0afe3828e39eaee", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-02T22:56:57Z", "type": "commit"}, {"oid": "c0c3d68716cff394600979fc810d99afa15da5e2", "url": "https://github.com/pravega/pravega/commit/c0c3d68716cff394600979fc810d99afa15da5e2", "message": "Add missing import.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-03T16:47:15Z", "type": "commit"}, {"oid": "d1dcf96c1d603b4bdcb6f99e47c0bbe1ed95a4ec", "url": "https://github.com/pravega/pravega/commit/d1dcf96c1d603b4bdcb6f99e47c0bbe1ed95a4ec", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-03T16:47:38Z", "type": "commit"}, {"oid": "d3189f95e3631c183f2ff0c7eb050aad521794ab", "url": "https://github.com/pravega/pravega/commit/d3189f95e3631c183f2ff0c7eb050aad521794ab", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-03T16:55:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyODgyMA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485028820", "bodyText": "It should be enough to implement this once on FailingReplyProcessor; if you observe - all the classes where you overrode this method do more or less the same thing. You can just write it once.", "author": "andreipaduroiu", "createdAt": "2020-09-08T15:56:10Z", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -80,6 +83,18 @@ public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenChec\n             log.warn(\"Auth token check failed on segment {} with {}\", segmentId, authTokenCheckFailed);\n             closeConnection(new AuthenticationException(authTokenCheckFailed.toString()));\n         }\n+\n+        @Override\n+        public void errorMessage(WireCommands.ErrorMessage errorMessage) {", "originalCommit": "d3189f95e3631c183f2ff0c7eb050aad521794ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26d362f3dc0038a443d03b02fc9bb9ab1b20973f", "chunk": "diff --git a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\nindex 12b8d0329e..3b03d8292c 100644\n--- a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n+++ b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n\n@@ -84,17 +84,6 @@ public class RawClient implements AutoCloseable {\n             closeConnection(new AuthenticationException(authTokenCheckFailed.toString()));\n         }\n \n-        @Override\n-        public void errorMessage(WireCommands.ErrorMessage errorMessage) {\n-            log.warn(\"Request {} produced an unhandled {} on segment {} : {}\",\n-                    errorMessage.getRequestId(),\n-                    errorMessage.getErrorCode().getExceptionType().getSimpleName(),\n-                    segmentId,\n-                    errorMessage.getMessage());\n-\n-            throw errorMessage.getThrowableException();\n-        }\n-\n     }\n \n     public RawClient(PravegaNodeUri uri, ConnectionPool connectonPool) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMDE1Ng==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485030156", "bodyText": "Looks like this is not covered by unit tests. Please add unit tests for this class.", "author": "andreipaduroiu", "createdAt": "2020-09-08T15:58:17Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1644,6 +1644,88 @@ public int getCode() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public RuntimeException getThrowableException() {", "originalCommit": "d3189f95e3631c183f2ff0c7eb050aad521794ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26d362f3dc0038a443d03b02fc9bb9ab1b20973f", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex ef6e5cdcba..c563504b95 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -1652,6 +1652,7 @@ public final class WireCommands {\n     public static final class ErrorMessage implements Reply, WireCommand {\n         final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n         final long requestId;\n+        final String segment;\n         final String message;\n         final ErrorCode errorCode;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMDM1Ng==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485030356", "bodyText": "Please fix the comment indentation.", "author": "andreipaduroiu", "createdAt": "2020-09-08T15:58:35Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1644,6 +1644,88 @@ public int getCode() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public RuntimeException getThrowableException() {\n+            switch (errorCode) {\n+                case ILLEGAL_ARGUMENT_EXCEPTION:\n+                    return new IllegalArgumentException(message);\n+                default:\n+                    return new RuntimeException(message);\n+            }\n+        }\n+\n+        @Override\n+        public boolean isFailure() {\n+            return true;\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, RuntimeException.class),                                         // indicates un-specified (for backward compatibility", "originalCommit": "d3189f95e3631c183f2ff0c7eb050aad521794ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26d362f3dc0038a443d03b02fc9bb9ab1b20973f", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex ef6e5cdcba..c563504b95 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -1652,6 +1652,7 @@ public final class WireCommands {\n     public static final class ErrorMessage implements Reply, WireCommand {\n         final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n         final long requestId;\n+        final String segment;\n         final String message;\n         final ErrorCode errorCode;\n \n"}}, {"oid": "26d362f3dc0038a443d03b02fc9bb9ab1b20973f", "url": "https://github.com/pravega/pravega/commit/26d362f3dc0038a443d03b02fc9bb9ab1b20973f", "message": "Refactor the implementation of `errorMessage` and add segment to ErrorMessage.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-08T22:57:37Z", "type": "commit"}, {"oid": "94e13d8f4ef0cbdc50dfc45cf7c3b26e7fdc2219", "url": "https://github.com/pravega/pravega/commit/94e13d8f4ef0cbdc50dfc45cf7c3b26e7fdc2219", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-08T23:01:10Z", "type": "commit"}, {"oid": "1e8d5bc8305bf19e41330b245327cfa1e2a4b68a", "url": "https://github.com/pravega/pravega/commit/1e8d5bc8305bf19e41330b245327cfa1e2a4b68a", "message": "Fix old usages.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-09T00:10:36Z", "type": "commit"}, {"oid": "f0bcaa0d3f0747b27d164e5f9bd723337b0ad3b9", "url": "https://github.com/pravega/pravega/commit/f0bcaa0d3f0747b27d164e5f9bd723337b0ad3b9", "message": "Fix ordering of ErrorMessage struct.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-09T05:47:32Z", "type": "commit"}, {"oid": "b18a69d78a470e9a634edc5e758474dbbf0f635d", "url": "https://github.com/pravega/pravega/commit/b18a69d78a470e9a634edc5e758474dbbf0f635d", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-09T18:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDQ1Ng==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487264456", "bodyText": "Please indent this line like the other ones above and below.", "author": "andreipaduroiu", "createdAt": "2020-09-11T20:04:47Z", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -59,6 +60,8 @@ public void process(Reply reply) {\n                 }\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n+            } else if (reply instanceof WireCommands.ErrorMessage) {\n+                    errorMessage((ErrorMessage) reply);", "originalCommit": "b18a69d78a470e9a634edc5e758474dbbf0f635d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f74dc1ca9e5e5f4c4aaad50e80be6d688a94ef1", "chunk": "diff --git a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\nindex d572271152..596bf9f439 100644\n--- a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n+++ b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n\n@@ -61,7 +60,7 @@ public class RawClient implements AutoCloseable {\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n             } else if (reply instanceof WireCommands.ErrorMessage) {\n-                    errorMessage((ErrorMessage) reply);\n+                errorMessage((ErrorMessage) reply);\n             } else {\n                 log.debug(\"Received reply {}\", reply);\n                 reply(reply);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NTAzNA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487265034", "bodyText": "You don't need ? : here. Change == to != and return the result.", "author": "andreipaduroiu", "createdAt": "2020-09-11T20:06:15Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -983,6 +988,11 @@ private Void handleException(long requestId, String segment, long offset, String\n         return null;\n     }\n \n+    private boolean errorCodeExists(Throwable e) {\n+        val errorCode = WireCommands.ErrorMessage.ErrorCode.valueOf(e.getClass());\n+        return (errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED) ? false : true;", "originalCommit": "b18a69d78a470e9a634edc5e758474dbbf0f635d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3NDM4NQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487274385", "bodyText": "\ud83e\udd26.. rookie mistake.", "author": "co-jo", "createdAt": "2020-09-11T20:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NTAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "5f74dc1ca9e5e5f4c4aaad50e80be6d688a94ef1", "chunk": "diff --git a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\nindex 6792477985..e97aa1346b 100644\n--- a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n+++ b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n\n@@ -990,7 +989,7 @@ public class PravegaRequestProcessor extends FailingRequestProcessor implements\n \n     private boolean errorCodeExists(Throwable e) {\n         val errorCode = WireCommands.ErrorMessage.ErrorCode.valueOf(e.getClass());\n-        return (errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED) ? false : true;\n+        return errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED;\n     }\n \n     private void logError(long requestId, String segment, String operation, Throwable u) {\n"}}, {"oid": "5f74dc1ca9e5e5f4c4aaad50e80be6d688a94ef1", "url": "https://github.com/pravega/pravega/commit/5f74dc1ca9e5e5f4c4aaad50e80be6d688a94ef1", "message": "Minor aesthetic fixes.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-11T20:29:38Z", "type": "commit"}, {"oid": "72f96e8470ed66192c075cbf40a35a4dd9d9bbf3", "url": "https://github.com/pravega/pravega/commit/72f96e8470ed66192c075cbf40a35a4dd9d9bbf3", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-11T20:32:14Z", "type": "commit"}, {"oid": "84f92d795a0f11ff24615b0c7f7cf002be43714d", "url": "https://github.com/pravega/pravega/commit/84f92d795a0f11ff24615b0c7f7cf002be43714d", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-11T20:32:39Z", "type": "commit"}, {"oid": "7f3472393ea167749f36e614dc1a02cb50159787", "url": "https://github.com/pravega/pravega/commit/7f3472393ea167749f36e614dc1a02cb50159787", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-14T18:21:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMzU4MA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488303580", "bodyText": "This is not going to propagate up to the caller.", "author": "tkaitchuck", "createdAt": "2020-09-15T00:03:12Z", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -59,6 +60,8 @@ public void process(Reply reply) {\n                 }\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n+            } else if (reply instanceof WireCommands.ErrorMessage) {\n+                errorMessage((ErrorMessage) reply);", "originalCommit": "7f3472393ea167749f36e614dc1a02cb50159787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwOTUzOQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r491109539", "bodyText": "I might be misunderstanding, but it seems to propagate properly on line 97 in RawClientTest.", "author": "co-jo", "createdAt": "2020-09-18T18:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMzU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9f36677ef00b7eef7c2b8799114bca12c86fc16c", "chunk": "diff --git a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\nindex ae8a1c0d90..b84a36245b 100644\n--- a/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n+++ b/client/src/main/java/io/pravega/client/connection/impl/RawClient.java\n\n@@ -61,7 +61,11 @@ public class RawClient implements AutoCloseable {\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n             } else if (reply instanceof WireCommands.ErrorMessage) {\n-                errorMessage((ErrorMessage) reply);\n+                ErrorMessage errorMessage = (ErrorMessage) reply;\n+                log.info(\"Received an errorMessage containing an unhandled {} on segment {}\",\n+                        errorMessage.getErrorCode().getExceptionType().getSimpleName(),\n+                        errorMessage.getSegment());\n+                closeConnection(errorMessage.getThrowableException());\n             } else {\n                 log.debug(\"Received reply {}\", reply);\n                 reply(reply);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDA1Mw==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488304053", "bodyText": "This is not used. A request should be sent and the reply returned should be verified.", "author": "tkaitchuck", "createdAt": "2020-09-15T00:04:47Z", "path": "client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java", "diffHunk": "@@ -78,6 +79,24 @@ public void testRequestReply() throws InterruptedException, ExecutionException,\n         assertEquals(reply, future.get());\n     }\n \n+    @Test\n+    public void testRecvErrorMessage() throws InterruptedException, ExecutionException, ConnectionFailedException {\n+        PravegaNodeUri endpoint = new PravegaNodeUri(\"localhost\", -1);\n+        @Cleanup\n+        MockConnectionFactoryImpl connectionFactory = new MockConnectionFactoryImpl();\n+        @Cleanup\n+        MockController controller = new MockController(endpoint.getEndpoint(), endpoint.getPort(), connectionFactory, true);\n+        ClientConnection connection = Mockito.mock(ClientConnection.class);\n+        connectionFactory.provideConnection(endpoint, connection);\n+        Segment segment = new Segment(\"scope\", \"testHello\", 0);\n+        @Cleanup\n+        RawClient rawClient = new RawClient(controller, connectionFactory, segment);", "originalCommit": "7f3472393ea167749f36e614dc1a02cb50159787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDU2MQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r489720561", "bodyText": "Instantiation the RawClient is required as it sets up the connection to provided the ReplyProcessor (A NullPointerException will be thrown otherwise). I chose not to actually send a request because of the complications of implicitly relying on segmentstore logic to throw back the expected error.", "author": "co-jo", "createdAt": "2020-09-16T19:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4e7124d66a84e1c14e1c512a3bf83d287041a0e7", "chunk": "diff --git a/client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java b/client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java\nindex c104693866..710110cc60 100644\n--- a/client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java\n+++ b/client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java\n\n@@ -94,7 +94,8 @@ public class RawClientTest {\n \n         ReplyProcessor processor = connectionFactory.getProcessor(endpoint);\n         WireCommands.ErrorMessage reply = new ErrorMessage(requestId, segment.getScopedName(), \"error.\", ErrorMessage.ErrorCode.ILLEGAL_ARGUMENT_EXCEPTION);\n-        AssertExtensions.assertThrows(IllegalArgumentException.class, () -> processor.process(reply));\n+        processor.process(reply);\n+        Mockito.verify(connection).close();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDc3Ng==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488304776", "bodyText": "All of the classes that extend FailingReplyProcessor should be modifed to properly handle the error.", "author": "tkaitchuck", "createdAt": "2020-09-15T00:07:17Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java", "diffHunk": "@@ -204,4 +204,15 @@ public void tableEntriesRead(WireCommands.TableEntriesRead tableEntriesRead) {\n     public void tableEntriesDeltaRead(WireCommands.TableEntriesDeltaRead tableEntriesDeltaRead) {\n         throw new IllegalStateException(\"Unexpected operation: \" + tableEntriesDeltaRead);\n     }\n+\n+    @Override\n+    public void errorMessage(WireCommands.ErrorMessage errorMessage) {", "originalCommit": "7f3472393ea167749f36e614dc1a02cb50159787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMyMw==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r489610323", "bodyText": "What constitutes 'properly handling the error?", "author": "co-jo", "createdAt": "2020-09-16T17:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9f36677ef00b7eef7c2b8799114bca12c86fc16c", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java\nindex 40a179269b..824cacac06 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java\n\n@@ -207,12 +207,6 @@ public abstract class FailingReplyProcessor implements ReplyProcessor {\n \n     @Override\n     public void errorMessage(WireCommands.ErrorMessage errorMessage) {\n-        log.warn(\"Request {} produced an unhandled {} on segment {} : {}\",\n-                errorMessage.getRequestId(),\n-                errorMessage.getErrorCode().getExceptionType().getSimpleName(),\n-                errorMessage.getSegment(),\n-                errorMessage.getMessage());\n-\n-        throw errorMessage.getThrowableException();\n+        throw new IllegalStateException(\"Unexpected operation: \" + errorMessage);\n     }\n }\n"}}, {"oid": "35a72b572509b8d20fee4ac1e3f2b1e49b499715", "url": "https://github.com/pravega/pravega/commit/35a72b572509b8d20fee4ac1e3f2b1e49b499715", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-15T04:20:26Z", "type": "commit"}, {"oid": "9f36677ef00b7eef7c2b8799114bca12c86fc16c", "url": "https://github.com/pravega/pravega/commit/9f36677ef00b7eef7c2b8799114bca12c86fc16c", "message": "Change handling of received error message exception.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-21T23:30:43Z", "type": "commit"}, {"oid": "7adf0d47d6b3a5016da24027af209d5ae5967b8d", "url": "https://github.com/pravega/pravega/commit/7adf0d47d6b3a5016da24027af209d5ae5967b8d", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-21T23:35:21Z", "type": "commit"}, {"oid": "4e7124d66a84e1c14e1c512a3bf83d287041a0e7", "url": "https://github.com/pravega/pravega/commit/4e7124d66a84e1c14e1c512a3bf83d287041a0e7", "message": "Update tests to reflect new behaviour.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-22T21:20:16Z", "type": "commit"}, {"oid": "203dbc1bb2e81812c8fa88218d764a091b7d75ae", "url": "https://github.com/pravega/pravega/commit/203dbc1bb2e81812c8fa88218d764a091b7d75ae", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-29T03:31:31Z", "type": "commit"}, {"oid": "254094326ac86f83c2342b28d895c67441c7c616", "url": "https://github.com/pravega/pravega/commit/254094326ac86f83c2342b28d895c67441c7c616", "message": "Remove unused import.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-30T16:20:34Z", "type": "commit"}, {"oid": "f22f6efad5ba55514d9b104c22ef15f9917b3d36", "url": "https://github.com/pravega/pravega/commit/f22f6efad5ba55514d9b104c22ef15f9917b3d36", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-30T17:06:49Z", "type": "commit"}, {"oid": "27b5e2f86d55397f8a6d694ac246fbf01efd8dd7", "url": "https://github.com/pravega/pravega/commit/27b5e2f86d55397f8a6d694ac246fbf01efd8dd7", "message": "Remove outdated test.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-30T20:23:51Z", "type": "commit"}, {"oid": "5a45a79bc502f9129791c8a9ea6b8f40756c6d67", "url": "https://github.com/pravega/pravega/commit/5a45a79bc502f9129791c8a9ea6b8f40756c6d67", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-09-30T20:24:35Z", "type": "commit"}, {"oid": "a719a19ac55b8f2657d59f68f25b347c38ab6b66", "url": "https://github.com/pravega/pravega/commit/a719a19ac55b8f2657d59f68f25b347c38ab6b66", "message": "Fix logic error. An errorCode should be defined as existing if the returned error code is not 'UNSPECIFIED'.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-30T22:05:44Z", "type": "commit"}, {"oid": "d754249fef2761307e5533fd59b57a0d212d995e", "url": "https://github.com/pravega/pravega/commit/d754249fef2761307e5533fd59b57a0d212d995e", "message": "Sanity check that the correct exception type is thrown.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-09-30T23:37:07Z", "type": "commit"}, {"oid": "a13c86270d313c3b31730d2e69644545366e56d9", "url": "https://github.com/pravega/pravega/commit/a13c86270d313c3b31730d2e69644545366e56d9", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-10-01T20:47:23Z", "type": "commit"}, {"oid": "159c0f3e6f554e8da8ab3f3891abe2a816eb1fb7", "url": "https://github.com/pravega/pravega/commit/159c0f3e6f554e8da8ab3f3891abe2a816eb1fb7", "message": "Cover all declared exceptions.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-10-02T17:26:19Z", "type": "commit"}, {"oid": "30d2639451df2449d6f464573abeb47b4ccf4c43", "url": "https://github.com/pravega/pravega/commit/30d2639451df2449d6f464573abeb47b4ccf4c43", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-10-02T17:33:45Z", "type": "commit"}, {"oid": "c871c0c4f895bebd23f0ac1a5ffb19ba876bf52b", "url": "https://github.com/pravega/pravega/commit/c871c0c4f895bebd23f0ac1a5ffb19ba876bf52b", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-10-05T15:47:52Z", "type": "commit"}, {"oid": "ae8eb56497cbd319f05e57d3d51aa4cb4a3af039", "url": "https://github.com/pravega/pravega/commit/ae8eb56497cbd319f05e57d3d51aa4cb4a3af039", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-10-06T17:07:17Z", "type": "commit"}, {"oid": "f9dd005c33fece1d88dd82465eac9427513b74f2", "url": "https://github.com/pravega/pravega/commit/f9dd005c33fece1d88dd82465eac9427513b74f2", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-10-06T19:14:58Z", "type": "commit"}, {"oid": "08601afd11463bf700a6d0af3f33dcb53f935e09", "url": "https://github.com/pravega/pravega/commit/08601afd11463bf700a6d0af3f33dcb53f935e09", "message": "Update K8 client APIs to use their 5.0.0 counterparts.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-02-21T00:13:24Z", "type": "commit"}, {"oid": "25a165d0293c34ee8703fff764e55cf8fda413dd", "url": "https://github.com/pravega/pravega/commit/25a165d0293c34ee8703fff764e55cf8fda413dd", "message": "Merge pull request #1 from co-jo/issue-4464-update-kubernetes-client-version\n\nIssue 4464 update kubernetes client version", "committedDate": "2020-02-21T18:42:03Z", "type": "commit"}, {"oid": "8cc2dd2be26feed2953258ff055c1657aeb57019", "url": "https://github.com/pravega/pravega/commit/8cc2dd2be26feed2953258ff055c1657aeb57019", "message": "Run system tests using alternative flag value.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-02-23T04:43:09Z", "type": "commit"}, {"oid": "c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "url": "https://github.com/pravega/pravega/commit/c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-03-10T22:21:32Z", "type": "commit"}, {"oid": "f5f808cc42831892aeb8e7824c22d499a1f9fa03", "url": "https://github.com/pravega/pravega/commit/f5f808cc42831892aeb8e7824c22d499a1f9fa03", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-03-18T18:44:10Z", "type": "commit"}, {"oid": "7901435dc1127bed1c46845bbaf8024477e2078f", "url": "https://github.com/pravega/pravega/commit/7901435dc1127bed1c46845bbaf8024477e2078f", "message": "Merge branch 'master' of https://github.com/pravega/pravega\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-04-02T18:49:59Z", "type": "commit"}, {"oid": "d59b3e33f6d5bd90264753caadcea7ed7bbfe06c", "url": "https://github.com/pravega/pravega/commit/d59b3e33f6d5bd90264753caadcea7ed7bbfe06c", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-04-16T20:22:05Z", "type": "commit"}, {"oid": "aa090cad1d88812f2a88e9debacdb04df585adbf", "url": "https://github.com/pravega/pravega/commit/aa090cad1d88812f2a88e9debacdb04df585adbf", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-04-18T20:15:50Z", "type": "commit"}, {"oid": "e328bcb38239fdc32f866980ee1103c93dff522d", "url": "https://github.com/pravega/pravega/commit/e328bcb38239fdc32f866980ee1103c93dff522d", "message": "Merge branch 'master' of https://github.com/co-jo/pravega", "committedDate": "2020-05-11T22:25:21Z", "type": "commit"}, {"oid": "cd02180986f49a42002c7fd2ef28885d1f701af9", "url": "https://github.com/pravega/pravega/commit/cd02180986f49a42002c7fd2ef28885d1f701af9", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-05-11T22:25:27Z", "type": "commit"}, {"oid": "df6ddaa58fded6128bad5fc35ddcd1ec817a29d5", "url": "https://github.com/pravega/pravega/commit/df6ddaa58fded6128bad5fc35ddcd1ec817a29d5", "message": "Initial API proposal on offset based TableSegment reads.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T18:17:19Z", "type": "commit"}, {"oid": "1e4e548363b9d4b5fd627e402fdef73d32a6693e", "url": "https://github.com/pravega/pravega/commit/1e4e548363b9d4b5fd627e402fdef73d32a6693e", "message": "Fix misordered writes.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T20:54:44Z", "type": "commit"}, {"oid": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "url": "https://github.com/pravega/pravega/commit/f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "message": "Add basic unit tests for new WireCommands.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T21:33:15Z", "type": "commit"}, {"oid": "672a07692f3a654dd6d4615c914df412ccbe2d38", "url": "https://github.com/pravega/pravega/commit/672a07692f3a654dd6d4615c914df412ccbe2d38", "message": "Add checks if a tableSegmentOffset was provided.\nCreates a constant value signifying no offset was provided.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-14T19:34:49Z", "type": "commit"}, {"oid": "85d2ba3d13d42ef345f72ee84d169b87f3d9b8b0", "url": "https://github.com/pravega/pravega/commit/85d2ba3d13d42ef345f72ee84d169b87f3d9b8b0", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-05-18T14:31:13Z", "type": "commit"}, {"oid": "ac2a2d330241f403ff5961115779847f580a9f29", "url": "https://github.com/pravega/pravega/commit/ac2a2d330241f403ff5961115779847f580a9f29", "message": "Add meaningful default value to the UpdateTableEntries calls in PravegaRequestProcessorTest.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-18T19:30:16Z", "type": "commit"}, {"oid": "3f52d0b1fc19a195c692889f3b1542176a082e0e", "url": "https://github.com/pravega/pravega/commit/3f52d0b1fc19a195c692889f3b1542176a082e0e", "message": "Merge branch 'issue-4677-offset-table-reads' of https://github.com/co-jo/pravega into issue-4677-offset-table-reads", "committedDate": "2020-05-18T20:42:17Z", "type": "commit"}, {"oid": "1408d7527ec73f1645418df04aea4aa1120b39e7", "url": "https://github.com/pravega/pravega/commit/1408d7527ec73f1645418df04aea4aa1120b39e7", "message": "Merge branch 'master' of https://github.com/co-jo/pravega", "committedDate": "2020-05-18T20:48:16Z", "type": "commit"}, {"oid": "e2719517850f39bce3e5f2c92f04c8c24122a520", "url": "https://github.com/pravega/pravega/commit/e2719517850f39bce3e5f2c92f04c8c24122a520", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-05-20T18:59:36Z", "type": "commit"}, {"oid": "92dbe1a241144b155a2885f4ea30a7b52aa46ed7", "url": "https://github.com/pravega/pravega/commit/92dbe1a241144b155a2885f4ea30a7b52aa46ed7", "message": "* Implement offset/version based TableEntry iteration.\n* Add new API to appropriate classes implementing TableStore and Request/ReplyProcessor interfaces.\n* New Iterator/IteratorState classes to support non-bucket based iteration of TableSegments.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-10T02:19:30Z", "type": "commit"}, {"oid": "ad83fc68fe8f2cc64b5a3ce5008f002183b80197", "url": "https://github.com/pravega/pravega/commit/ad83fc68fe8f2cc64b5a3ce5008f002183b80197", "message": "* Update files with missing copyright statements.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-10T04:20:14Z", "type": "commit"}, {"oid": "7cbca9e3c1f51e158ac7d04bd4b2e244be2fcca7", "url": "https://github.com/pravega/pravega/commit/7cbca9e3c1f51e158ac7d04bd4b2e244be2fcca7", "message": "* Make overloaded 'newIterator' methods adjacent.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-10T07:35:38Z", "type": "commit"}, {"oid": "d8adc68accb9ac6b12895478033734bfe3cd01fe", "url": "https://github.com/pravega/pravega/commit/d8adc68accb9ac6b12895478033734bfe3cd01fe", "message": "* Adhere to proper checkstyle guidelines.c\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-10T18:42:23Z", "type": "commit"}, {"oid": "d722048e0449da0ba24822ef5cb0f47da146ef1a", "url": "https://github.com/pravega/pravega/commit/d722048e0449da0ba24822ef5cb0f47da146ef1a", "message": "* Update API parameter name.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-11T18:33:23Z", "type": "commit"}, {"oid": "686552bf45b447f07c9670d16d7c2ec2f044dd77", "url": "https://github.com/pravega/pravega/commit/686552bf45b447f07c9670d16d7c2ec2f044dd77", "message": "* Fix checkstyle issues.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-11T19:58:51Z", "type": "commit"}, {"oid": "63586e44866c0b7c2a2e6604418b2c2110894a48", "url": "https://github.com/pravega/pravega/commit/63586e44866c0b7c2a2e6604418b2c2110894a48", "message": "* Initial test for the PravegaRequestProcessor.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-12T18:29:03Z", "type": "commit"}, {"oid": "24159ad4fcf95473821f9c657c643ab323e27122", "url": "https://github.com/pravega/pravega/commit/24159ad4fcf95473821f9c657c643ab323e27122", "message": "* Addresses most feedback from draft PR.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-13T02:34:10Z", "type": "commit"}, {"oid": "4d2ef90af7c18f98e9d183bc9d8c352463b361bd", "url": "https://github.com/pravega/pravega/commit/4d2ef90af7c18f98e9d183bc9d8c352463b361bd", "message": "* Refactor 'ContainerMock' back into 'TableContext'.\n* Fix @Builder annotation on TableEntryDeltaIterator.\n* Address other feedback.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-15T03:19:58Z", "type": "commit"}, {"oid": "6e75c0a03dbeb6c27857257da292f1ab09d5c94c", "url": "https://github.com/pravega/pravega/commit/6e75c0a03dbeb6c27857257da292f1ab09d5c94c", "message": "* Properly pass down the ExecutorService (this fixes our testing issue in PravegaRequestProcessorTest).\n* Change the position field of the DeltaIteratorState class.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-15T18:13:46Z", "type": "commit"}, {"oid": "b1d3648dd2c28a161dab520a48bf4bf657f9d14d", "url": "https://github.com/pravega/pravega/commit/b1d3648dd2c28a161dab520a48bf4bf657f9d14d", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-06-15T18:43:02Z", "type": "commit"}, {"oid": "78ff6324b40431e17d655d738a4174b2b634ecba", "url": "https://github.com/pravega/pravega/commit/78ff6324b40431e17d655d738a4174b2b634ecba", "message": "Merge branch 'master' of https://github.com/pravega/pravega", "committedDate": "2020-06-17T18:04:56Z", "type": "commit"}, {"oid": "d68b68b60ad46a154cfa9e8b07c5160494ef9216", "url": "https://github.com/pravega/pravega/commit/d68b68b60ad46a154cfa9e8b07c5160494ef9216", "message": "Merge branch 'master' into issue-4677-offset-table-reads\n\n# Conflicts:\n#\tsegmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java\n#\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImpl.java\n#\tshared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "committedDate": "2020-06-17T18:13:06Z", "type": "commit"}, {"oid": "1baa07c38f3f293e786ecc3689700ffa1241473e", "url": "https://github.com/pravega/pravega/commit/1baa07c38f3f293e786ecc3689700ffa1241473e", "message": "* Fix error in testing code.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-17T20:21:31Z", "type": "commit"}, {"oid": "16d3331ab414a75619214f3ad9c6402f1998385d", "url": "https://github.com/pravega/pravega/commit/16d3331ab414a75619214f3ad9c6402f1998385d", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-06-22T19:03:02Z", "type": "commit"}, {"oid": "d18e63f214a2ed82b45ab637ac276e42e4d91dac", "url": "https://github.com/pravega/pravega/commit/d18e63f214a2ed82b45ab637ac276e42e4d91dac", "message": "* Merge with master.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-23T21:15:18Z", "type": "commit"}, {"oid": "fb74ccf264c78ba725759061acf9d4395f56cca6", "url": "https://github.com/pravega/pravega/commit/fb74ccf264c78ba725759061acf9d4395f56cca6", "message": "Merge missed file.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-23T21:23:40Z", "type": "commit"}, {"oid": "4e43a8e00d250a3ca3464f6a66836f0a55ccda43", "url": "https://github.com/pravega/pravega/commit/4e43a8e00d250a3ca3464f6a66836f0a55ccda43", "message": "* Use proper key.\n* Fix deletion condition.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-23T22:51:10Z", "type": "commit"}, {"oid": "93aeef87fc7da5a29708027bc1a5835343e75390", "url": "https://github.com/pravega/pravega/commit/93aeef87fc7da5a29708027bc1a5835343e75390", "message": "* Remove setSizeBytes method.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-23T23:21:36Z", "type": "commit"}, {"oid": "5f6b8c19ed217af47a72270bce387ba0dc904b3e", "url": "https://github.com/pravega/pravega/commit/5f6b8c19ed217af47a72270bce387ba0dc904b3e", "message": "* Fix checkstyle errors.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-24T00:57:28Z", "type": "commit"}, {"oid": "b73de22a5a35634a204e6ddbbb71cc9f5fbe0aa8", "url": "https://github.com/pravega/pravega/commit/b73de22a5a35634a204e6ddbbb71cc9f5fbe0aa8", "message": "* Add check to make sure iteration done by both 'entryIterator' and 'entryDeltaIterator' are equivalent.\n* When building the diff in PravegaRequestProcessor, add only the entry with the newer (greater) version.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-24T21:27:10Z", "type": "commit"}, {"oid": "b551e1c40dc2a059f80bb5d7361498952356457b", "url": "https://github.com/pravega/pravega/commit/b551e1c40dc2a059f80bb5d7361498952356457b", "message": "* Add coverage for both branches of the delta entry set.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-25T02:14:53Z", "type": "commit"}, {"oid": "720cefe147a5a013d42eecad357c969c5480de86", "url": "https://github.com/pravega/pravega/commit/720cefe147a5a013d42eecad357c969c5480de86", "message": "* Addresses feedback from PR.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-29T19:41:18Z", "type": "commit"}, {"oid": "6615136824e0c79e4c2c7b0ca8e7cf99c4f4f7d8", "url": "https://github.com/pravega/pravega/commit/6615136824e0c79e4c2c7b0ca8e7cf99c4f4f7d8", "message": "* Add debug logs to readTableEntriesDelta.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-29T20:34:54Z", "type": "commit"}, {"oid": "8dd70593b07d84f5914acaab5009faea8b420fb7", "url": "https://github.com/pravega/pravega/commit/8dd70593b07d84f5914acaab5009faea8b420fb7", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-06-29T22:31:50Z", "type": "commit"}, {"oid": "75fde4ba492edc0ad20688475a01dec477386994", "url": "https://github.com/pravega/pravega/commit/75fde4ba492edc0ad20688475a01dec477386994", "message": "* Add release requirement to TableEntriesDelta read command.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-06-30T21:13:26Z", "type": "commit"}, {"oid": "14187411742aeae7d394f99030f8770c658cbb7c", "url": "https://github.com/pravega/pravega/commit/14187411742aeae7d394f99030f8770c658cbb7c", "message": "Merge remote-tracking branch 'origin/issue-4677-offset-table-reads' into issue-4677-offset-table-reads", "committedDate": "2020-06-30T21:14:07Z", "type": "commit"}, {"oid": "9d7a68def78ac1aa93994b120190a31729550096", "url": "https://github.com/pravega/pravega/commit/9d7a68def78ac1aa93994b120190a31729550096", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-07-01T16:13:54Z", "type": "commit"}, {"oid": "964d971e4feb8c4addb1d77ffae75bdfc906b8fa", "url": "https://github.com/pravega/pravega/commit/964d971e4feb8c4addb1d77ffae75bdfc906b8fa", "message": "* Remove redundant extension.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-01T20:37:49Z", "type": "commit"}, {"oid": "29725a2a49fc498254d2ea213c86d6a539fb0740", "url": "https://github.com/pravega/pravega/commit/29725a2a49fc498254d2ea213c86d6a539fb0740", "message": "Merge remote-tracking branch 'origin/issue-4677-offset-table-reads' into issue-4677-offset-table-reads", "committedDate": "2020-07-01T20:38:32Z", "type": "commit"}, {"oid": "57c266dbf42f093e1df6ea262c460f21b38efcf4", "url": "https://github.com/pravega/pravega/commit/57c266dbf42f093e1df6ea262c460f21b38efcf4", "message": "* Fix possible race condition.\n* Improve documentation for TableStore.entryDeltaIterator.\n* Rename tests class.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-09T18:20:08Z", "type": "commit"}, {"oid": "0391c923f5f22c47767cfa6e363bb598b2a65fe8", "url": "https://github.com/pravega/pravega/commit/0391c923f5f22c47767cfa6e363bb598b2a65fe8", "message": "* Change solution for potential race condition.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-09T18:47:06Z", "type": "commit"}, {"oid": "f3437025a1696ebf736fbecc5d947c0a8856d7b5", "url": "https://github.com/pravega/pravega/commit/f3437025a1696ebf736fbecc5d947c0a8856d7b5", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4677-offset-table-reads\n\n\u0001 Conflicts:\n\u0001\tsegmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/tables/TableStore.java\n\u0001\tsegmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n\u0001\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImpl.java\n\u0001\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableServiceTests.java", "committedDate": "2020-07-09T18:57:28Z", "type": "commit"}, {"oid": "6e217c0fcb7297626e4c161005708e61fc38bc62", "url": "https://github.com/pravega/pravega/commit/6e217c0fcb7297626e4c161005708e61fc38bc62", "message": "* Fix merge conflicts.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-09T19:24:25Z", "type": "commit"}, {"oid": "c163927faf73d41fbcb20ed660cde5ab054223b0", "url": "https://github.com/pravega/pravega/commit/c163927faf73d41fbcb20ed660cde5ab054223b0", "message": "* Fix merge issue.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-09T19:30:27Z", "type": "commit"}, {"oid": "575c090be7ecb83217b7a5fa4f5b54b1e8dc2f7f", "url": "https://github.com/pravega/pravega/commit/575c090be7ecb83217b7a5fa4f5b54b1e8dc2f7f", "message": "* Fix invalid method call.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-09T23:33:11Z", "type": "commit"}, {"oid": "20237d641268a4b416046c49d54d74db18c5317d", "url": "https://github.com/pravega/pravega/commit/20237d641268a4b416046c49d54d74db18c5317d", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-07-14T10:20:10Z", "type": "commit"}, {"oid": "e9be2b6820ef674f1fa86793e2741531735f28d2", "url": "https://github.com/pravega/pravega/commit/e9be2b6820ef674f1fa86793e2741531735f28d2", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-07-14T17:41:57Z", "type": "commit"}, {"oid": "3eb88f730ad9e4b848064112f5410b9d068214f0", "url": "https://github.com/pravega/pravega/commit/3eb88f730ad9e4b848064112f5410b9d068214f0", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-07-16T00:18:43Z", "type": "commit"}, {"oid": "535ec5786f0aab9e8c137877ef0c93708af13619", "url": "https://github.com/pravega/pravega/commit/535ec5786f0aab9e8c137877ef0c93708af13619", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-07-16T19:20:10Z", "type": "commit"}, {"oid": "fd4811be8d1079b6b7e5205101ba840e8f9c60e3", "url": "https://github.com/pravega/pravega/commit/fd4811be8d1079b6b7e5205101ba840e8f9c60e3", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4677-offset-table-reads\n\n\u0001 Conflicts:\n\u0001\tsegmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java\n\u0001\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImplTests.java", "committedDate": "2020-07-16T20:34:13Z", "type": "commit"}, {"oid": "8127f135018b7585ce498754c46416bf00674d6a", "url": "https://github.com/pravega/pravega/commit/8127f135018b7585ce498754c46416bf00674d6a", "message": "* Merge conflicts.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-16T21:10:42Z", "type": "commit"}, {"oid": "74ea516eaf44c8e0b0c589d13721c097045117dc", "url": "https://github.com/pravega/pravega/commit/74ea516eaf44c8e0b0c589d13721c097045117dc", "message": "Merge remote-tracking branch 'origin/issue-4677-offset-table-reads' into issue-4677-offset-table-reads", "committedDate": "2020-07-16T21:14:48Z", "type": "commit"}, {"oid": "5e75cfbf24f2bb93089acf6cae0c58c48d399c95", "url": "https://github.com/pravega/pravega/commit/5e75cfbf24f2bb93089acf6cae0c58c48d399c95", "message": "* Add guards to prevent a delta iterator being used on a sorted TableSegment.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-17T22:15:13Z", "type": "commit"}, {"oid": "64caeec03608bc29cf35c9689b92120b56d8e593", "url": "https://github.com/pravega/pravega/commit/64caeec03608bc29cf35c9689b92120b56d8e593", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4677-offset-table-reads", "committedDate": "2020-07-24T20:04:20Z", "type": "commit"}, {"oid": "0dcfe699ace7ce5122a3a50c71fef4dceed1279d", "url": "https://github.com/pravega/pravega/commit/0dcfe699ace7ce5122a3a50c71fef4dceed1279d", "message": "* Prevent a NullPointerException by initializing the result's state.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-24T20:07:11Z", "type": "commit"}, {"oid": "dad468de588d5ea58a3449c5e948f08e26765f7e", "url": "https://github.com/pravega/pravega/commit/dad468de588d5ea58a3449c5e948f08e26765f7e", "message": "* Variable naming change.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-24T20:10:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MTYyOQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r460281629", "bodyText": "I'm not quite sure on the performance impact (if any) but certain properties about the Segment are needed to define some DeltaIteratorState instance. It did not seem feasible to be able to use the information acquired in ContainerTableExtensionImpl.newDeltaIterator as that would require several changes about the semantics of the iteration across several classes.", "author": "co-jo", "createdAt": "2020-07-24T20:49:58Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -838,6 +839,12 @@ public void readTableEntriesDelta(WireCommands.ReadTableEntriesDelta readTableEn\n         val timer = new Timer();\n         val result = new DeltaIteratorResult<BufferView, Map.Entry<WireCommands.TableKey, WireCommands.TableValue>, DeltaIteratorState>(\n                 segment.getBytes().length + WireCommands.TableEntriesRead.HEADER_BYTES);\n+        // Guards against two cases: an empty segment, or a starting position that exceeds the segment length.\n+        segmentStore.getStreamSegmentInfo(segment, TIMEOUT)\n+                .thenAccept(properties -> {\n+                    result.setState(TableEntryDeltaIterator.initialState(properties, fromPosition));", "originalCommit": "dad468de588d5ea58a3449c5e948f08e26765f7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\nindex f639a4c6d3..8627ad7b22 100644\n--- a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n+++ b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n\n@@ -837,14 +836,8 @@ public class PravegaRequestProcessor extends FailingRequestProcessor implements\n                 readTableEntriesDelta.getFromPosition());\n \n         val timer = new Timer();\n-        val result = new DeltaIteratorResult<BufferView, Map.Entry<WireCommands.TableKey, WireCommands.TableValue>, DeltaIteratorState>(\n+        val result = new DeltaIteratorResult<BufferView, Map.Entry<WireCommands.TableKey, WireCommands.TableValue>>(\n                 segment.getBytes().length + WireCommands.TableEntriesRead.HEADER_BYTES);\n-        // Guards against two cases: an empty segment, or a starting position that exceeds the segment length.\n-        segmentStore.getStreamSegmentInfo(segment, TIMEOUT)\n-                .thenAccept(properties -> {\n-                    result.setState(TableEntryDeltaIterator.initialState(properties, fromPosition));\n-                });\n-\n         tableStore.entryDeltaIterator(segment, fromPosition, TIMEOUT)\n                 .thenCompose(itr -> itr.collectRemaining(\n                         e -> {\n"}}, {"oid": "729dba129dca0069ecd1ef767190010fd746a688", "url": "https://github.com/pravega/pravega/commit/729dba129dca0069ecd1ef767190010fd746a688", "message": "* Simplify fix by throwing InvalidArgumentException if the fromPosition argument exceeds the segment length.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-27T06:41:54Z", "type": "commit"}, {"oid": "3741a3a09918da0bd79edb0638a957ffc8a2cb54", "url": "https://github.com/pravega/pravega/commit/3741a3a09918da0bd79edb0638a957ffc8a2cb54", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-07-27T16:08:32Z", "type": "commit"}, {"oid": "fce4aa96d5f2b58d89320d5cfadb305fa9ac6bef", "url": "https://github.com/pravega/pravega/commit/fce4aa96d5f2b58d89320d5cfadb305fa9ac6bef", "message": "Merge branch 'master' of https://github.com/pravega/pravega into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-07-27T16:27:00Z", "type": "commit"}, {"oid": "b557482f4e71445dc1ed4832f93d2755ab978022", "url": "https://github.com/pravega/pravega/commit/b557482f4e71445dc1ed4832f93d2755ab978022", "message": "* Add tests to improve code coverage of the `tables` package.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-27T17:47:50Z", "type": "commit"}, {"oid": "b58a3e2f0ecf2b3d041f9e6f3fda4b85292893f0", "url": "https://github.com/pravega/pravega/commit/b58a3e2f0ecf2b3d041f9e6f3fda4b85292893f0", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-07-27T17:52:48Z", "type": "commit"}, {"oid": "ae4aea6385eb682de076348038021c6f21b7036c", "url": "https://github.com/pravega/pravega/commit/ae4aea6385eb682de076348038021c6f21b7036c", "message": "* Remove unnecessary public visibility modifier.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-07-27T18:14:34Z", "type": "commit"}, {"oid": "c181bd4fdbff035ae723ebb2240a67a3c949e85f", "url": "https://github.com/pravega/pravega/commit/c181bd4fdbff035ae723ebb2240a67a3c949e85f", "message": "* Add generic ErrorMessage WireCommand response.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-01T00:11:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5NDMzOA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r463894338", "bodyText": "I chose to include a Class -> ErrorCode map because presumably we will need some translation logic to turn a given exception into some error code. Including this logic in here prevents a (potentially) continuously growing if/else-if block in PravegaRequestProcessor.handleException.", "author": "co-jo", "createdAt": "2020-08-01T00:17:09Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n+            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n+            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n+\n+            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n+            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();", "originalCommit": "c181bd4fdbff035ae723ebb2240a67a3c949e85f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex b911106ac0..ef6e5cdcba 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2339,75 +2421,6 @@ public final class WireCommands {\n         }\n     }\n \n-    /**\n-     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n-     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n-     */\n-    @Data\n-    public static final class ErrorMessage implements Reply, WireCommand {\n-        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n-        final long requestId;\n-        final String message;\n-        final ErrorCode errorCode;\n-\n-        @Override\n-        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n-            cp.errorMessage(this);\n-        }\n-\n-        @Override\n-        public void writeFields(DataOutput out) throws IOException {\n-            out.writeLong(requestId);\n-            out.writeInt(errorCode.getCode());\n-            out.writeUTF(message);\n-        }\n-\n-        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n-            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n-        }\n-\n-        public enum ErrorCode {\n-            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n-            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n-            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n-\n-            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n-            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();\n-\n-            static {\n-                for (ErrorCode errorCode : ErrorCode.values()) {\n-                    OBJECTS_BY_CODE.put(errorCode.code, errorCode);\n-                    OBJECTS_BY_CLASS.put(errorCode.exception, errorCode);\n-                }\n-            }\n-\n-            private final int code;\n-            private final Class exception;\n-\n-            private ErrorCode(int code, Class exception) {\n-                this.code = code;\n-                this.exception = exception;\n-            }\n-\n-            public static ErrorCode valueOf(int code) {\n-                return OBJECTS_BY_CODE.getOrDefault(code, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public static ErrorCode valueOf(Class exception) {\n-                return OBJECTS_BY_CLASS.getOrDefault(exception, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public int getCode() {\n-                return this.code;\n-            }\n-\n-            public Class getExceptionType() {\n-                return this.exception;\n-            }\n-\n-        }\n-    }\n-\n     /**\n      * Base class for any command that may require releasing resources.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjk2OA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r463982968", "bodyText": "While this may increase the risk of a NullPointerException, null appears to be a valid return for unknown causes (see: https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#getCause--).", "author": "co-jo", "createdAt": "2020-08-01T17:32:02Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility", "originalCommit": "c181bd4fdbff035ae723ebb2240a67a3c949e85f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex b911106ac0..ef6e5cdcba 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2339,75 +2421,6 @@ public final class WireCommands {\n         }\n     }\n \n-    /**\n-     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n-     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n-     */\n-    @Data\n-    public static final class ErrorMessage implements Reply, WireCommand {\n-        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n-        final long requestId;\n-        final String message;\n-        final ErrorCode errorCode;\n-\n-        @Override\n-        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n-            cp.errorMessage(this);\n-        }\n-\n-        @Override\n-        public void writeFields(DataOutput out) throws IOException {\n-            out.writeLong(requestId);\n-            out.writeInt(errorCode.getCode());\n-            out.writeUTF(message);\n-        }\n-\n-        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n-            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n-        }\n-\n-        public enum ErrorCode {\n-            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n-            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n-            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n-\n-            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n-            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();\n-\n-            static {\n-                for (ErrorCode errorCode : ErrorCode.values()) {\n-                    OBJECTS_BY_CODE.put(errorCode.code, errorCode);\n-                    OBJECTS_BY_CLASS.put(errorCode.exception, errorCode);\n-                }\n-            }\n-\n-            private final int code;\n-            private final Class exception;\n-\n-            private ErrorCode(int code, Class exception) {\n-                this.code = code;\n-                this.exception = exception;\n-            }\n-\n-            public static ErrorCode valueOf(int code) {\n-                return OBJECTS_BY_CODE.getOrDefault(code, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public static ErrorCode valueOf(Class exception) {\n-                return OBJECTS_BY_CLASS.getOrDefault(exception, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public int getCode() {\n-                return this.code;\n-            }\n-\n-            public Class getExceptionType() {\n-                return this.exception;\n-            }\n-\n-        }\n-    }\n-\n     /**\n      * Base class for any command that may require releasing resources.\n      */\n"}}, {"oid": "07862a60309cbd13856c326c64dfcf809ceedbff", "url": "https://github.com/pravega/pravega/commit/07862a60309cbd13856c326c64dfcf809ceedbff", "message": "* 'Implement' method in test class.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-01T17:41:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Njk3Nw==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464466977", "bodyText": "Message may be null. Be sure to account for that.", "author": "andreipaduroiu", "createdAt": "2020-08-03T14:55:20Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);", "originalCommit": "07862a60309cbd13856c326c64dfcf809ceedbff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex b911106ac0..ef6e5cdcba 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2339,75 +2421,6 @@ public final class WireCommands {\n         }\n     }\n \n-    /**\n-     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n-     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n-     */\n-    @Data\n-    public static final class ErrorMessage implements Reply, WireCommand {\n-        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n-        final long requestId;\n-        final String message;\n-        final ErrorCode errorCode;\n-\n-        @Override\n-        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n-            cp.errorMessage(this);\n-        }\n-\n-        @Override\n-        public void writeFields(DataOutput out) throws IOException {\n-            out.writeLong(requestId);\n-            out.writeInt(errorCode.getCode());\n-            out.writeUTF(message);\n-        }\n-\n-        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n-            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n-        }\n-\n-        public enum ErrorCode {\n-            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n-            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n-            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n-\n-            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n-            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();\n-\n-            static {\n-                for (ErrorCode errorCode : ErrorCode.values()) {\n-                    OBJECTS_BY_CODE.put(errorCode.code, errorCode);\n-                    OBJECTS_BY_CLASS.put(errorCode.exception, errorCode);\n-                }\n-            }\n-\n-            private final int code;\n-            private final Class exception;\n-\n-            private ErrorCode(int code, Class exception) {\n-                this.code = code;\n-                this.exception = exception;\n-            }\n-\n-            public static ErrorCode valueOf(int code) {\n-                return OBJECTS_BY_CODE.getOrDefault(code, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public static ErrorCode valueOf(Class exception) {\n-                return OBJECTS_BY_CLASS.getOrDefault(exception, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public int getCode() {\n-                return this.code;\n-            }\n-\n-            public Class getExceptionType() {\n-                return this.exception;\n-            }\n-\n-        }\n-    }\n-\n     /**\n      * Base class for any command that may require releasing resources.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3Mjg3OQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464472879", "bodyText": "Here you are changing the behavior for this class. You should make sure that ErrorMessage only captures those exceptions that it can properly send a message back for, and let the rest fall down to this default behavior. We have a lot of code (on the other side of the Wire Protocol) that relies on these connections to be closed when something unexpected happens.\nIt is true that we will eventually want to \"fix\" that code to understand proper error codes, but that is not a task I believe you are willing to undertake now, are you? It's OK to file  follow up issue (not necessarily for yourself) to look at this new Wire Command and make any proper changes (like handling specific errors, etc.) - we can do that later.", "author": "andreipaduroiu", "createdAt": "2020-08-03T15:04:11Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -975,8 +975,9 @@ private Void handleException(long requestId, String segment, long offset, String\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n         } else {\n             logError(requestId, segment, operation, u);\n-            connection.close(); // Closing connection should reinitialize things, and hopefully fix the problem\n-            throw new IllegalStateException(\"Unknown exception.\", u);\n+            invokeSafely(connection::send,", "originalCommit": "07862a60309cbd13856c326c64dfcf809ceedbff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODIzNg==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464518236", "bodyText": "Sure thing, thanks for pointing that out. I'll create an issue for addressing this.", "author": "co-jo", "createdAt": "2020-08-03T16:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3Mjg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\nindex 7ba5634038..8627ad7b22 100644\n--- a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n+++ b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n\n@@ -973,16 +973,25 @@ public class PravegaRequestProcessor extends FailingRequestProcessor implements\n         } else if (u instanceof BadKeyVersionException) {\n             log.warn(requestId, \"Conditional update on Table segment '{}' failed due to bad key version.\", segment);\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n-        } else {\n-            logError(requestId, segment, operation, u);\n+        } else if (errorCodeExists(u)) {\n+            log.warn(requestId, \"Operation on segment '{}' failed due to a {}.\", segment, u.getClass());\n             invokeSafely(connection::send,\n                     new WireCommands.ErrorMessage(requestId, u.getMessage(), WireCommands.ErrorMessage.ErrorCode.valueOf(u.getClass())),\n                     failureHandler);\n+        } else {\n+            logError(requestId, segment, operation, u);\n+            connection.close(); // Closing connection should reinitialize things, and hopefully fix the problem\n+            throw new IllegalStateException(\"Unknown exception.\", u);\n         }\n \n         return null;\n     }\n \n+    private boolean errorCodeExists(Throwable e) {\n+        val errorCode = WireCommands.ErrorMessage.ErrorCode.valueOf(e.getClass());\n+        return (errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED) ? false : true;\n+    }\n+\n     private void logError(long requestId, String segment, String operation, Throwable u) {\n         if (u instanceof IllegalContainerStateException) {\n             log.warn(requestId, \"Error (Segment = '{}', Operation = '{}'): {}\", segment, operation, u.toString());\n"}}, {"oid": "c4112fea571f581d1152a1341d3e6c38e076c41e", "url": "https://github.com/pravega/pravega/commit/c4112fea571f581d1152a1341d3e6c38e076c41e", "message": "* Add helper function to check if an exception is currently explicitly handled.\n* Add back default else clause to `handleException`.\n* Handle cases where no error message was provided.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-03T17:37:20Z", "type": "commit"}, {"oid": "db4097dc6adbdae2b8c6bee1bb4397833bc6c0c1", "url": "https://github.com/pravega/pravega/commit/db4097dc6adbdae2b8c6bee1bb4397833bc6c0c1", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-03T17:56:27Z", "type": "commit"}, {"oid": "87b5236d4f0244413ca3b452769b035977a4fe7a", "url": "https://github.com/pravega/pravega/commit/87b5236d4f0244413ca3b452769b035977a4fe7a", "message": "* Add errorMessage reply to `FailingReplyProcessorTest`.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-03T22:21:35Z", "type": "commit"}, {"oid": "d59cbb59e246d8bd61c9bccf2ad6bd23b7448415", "url": "https://github.com/pravega/pravega/commit/d59cbb59e246d8bd61c9bccf2ad6bd23b7448415", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-03T23:15:13Z", "type": "commit"}, {"oid": "442836e2845c459667d6f473dfab7096c0f4bd55", "url": "https://github.com/pravega/pravega/commit/442836e2845c459667d6f473dfab7096c0f4bd55", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-03T23:49:06Z", "type": "commit"}, {"oid": "2139e14628acdf643a737975cf1a9ecfac9a3569", "url": "https://github.com/pravega/pravega/commit/2139e14628acdf643a737975cf1a9ecfac9a3569", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-04T18:42:18Z", "type": "commit"}, {"oid": "0e94a2aa102a373ae3b57e34c5636e3b1585233c", "url": "https://github.com/pravega/pravega/commit/0e94a2aa102a373ae3b57e34c5636e3b1585233c", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-05T17:38:44Z", "type": "commit"}, {"oid": "116a55761a8cd0b49e9761d986beb9ad9d522b44", "url": "https://github.com/pravega/pravega/commit/116a55761a8cd0b49e9761d986beb9ad9d522b44", "message": "* Add test coverage for new WireCommand.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-06T17:09:35Z", "type": "commit"}, {"oid": "822b8f380a6ae74f3ba9f782365786a105b79c67", "url": "https://github.com/pravega/pravega/commit/822b8f380a6ae74f3ba9f782365786a105b79c67", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-06T17:10:39Z", "type": "commit"}, {"oid": "3a64095543cc71675c64e3037742ed72e6e5bf61", "url": "https://github.com/pravega/pravega/commit/3a64095543cc71675c64e3037742ed72e6e5bf61", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-06T17:41:25Z", "type": "commit"}, {"oid": "5d9ab89ac921487227edf618a16673c70677e715", "url": "https://github.com/pravega/pravega/commit/5d9ab89ac921487227edf618a16673c70677e715", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-07T17:48:44Z", "type": "commit"}, {"oid": "dad7d6940445c11eb9c72dcfa514faa93d642dd5", "url": "https://github.com/pravega/pravega/commit/dad7d6940445c11eb9c72dcfa514faa93d642dd5", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-08T19:21:16Z", "type": "commit"}, {"oid": "438c4443ab94bac56731109c1837f57f57d33eaa", "url": "https://github.com/pravega/pravega/commit/438c4443ab94bac56731109c1837f57f57d33eaa", "message": "* Add unit test to coverage new exception thrown.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-08-10T17:51:12Z", "type": "commit"}, {"oid": "fbae55e2393acd6c183077692d03a6d73768b3dd", "url": "https://github.com/pravega/pravega/commit/fbae55e2393acd6c183077692d03a6d73768b3dd", "message": "Merge remote-tracking branch 'origin/issue-4978-delta-iterator-null-pointer' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-10T17:51:29Z", "type": "commit"}, {"oid": "4e7d358390ce9c7b0646e64e7202c23cb28101c6", "url": "https://github.com/pravega/pravega/commit/4e7d358390ce9c7b0646e64e7202c23cb28101c6", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-13T21:53:49Z", "type": "commit"}, {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797", "url": "https://github.com/pravega/pravega/commit/972c1e096b3d039ac763b844ae724b3f0553f797", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-13T23:44:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDIzOA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470674238", "bodyText": "This may not necessarily be on a TableSegment. I'd remove that (leave the rest of the message as-is).", "author": "andreipaduroiu", "createdAt": "2020-08-14T14:52:25Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -973,6 +973,11 @@ private Void handleException(long requestId, String segment, long offset, String\n         } else if (u instanceof BadKeyVersionException) {\n             log.warn(requestId, \"Conditional update on Table segment '{}' failed due to bad key version.\", segment);\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n+        } else if (errorCodeExists(u)) {\n+            log.warn(requestId, \"Operation on Table segment '{}' failed due to a {}.\", segment, u.getClass());", "originalCommit": "972c1e096b3d039ac763b844ae724b3f0553f797", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\nindex 959e88bbd0..8627ad7b22 100644\n--- a/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n+++ b/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java\n\n@@ -974,7 +974,7 @@ public class PravegaRequestProcessor extends FailingRequestProcessor implements\n             log.warn(requestId, \"Conditional update on Table segment '{}' failed due to bad key version.\", segment);\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n         } else if (errorCodeExists(u)) {\n-            log.warn(requestId, \"Operation on Table segment '{}' failed due to a {}.\", segment, u.getClass());\n+            log.warn(requestId, \"Operation on segment '{}' failed due to a {}.\", segment, u.getClass());\n             invokeSafely(connection::send,\n                     new WireCommands.ErrorMessage(requestId, u.getMessage(), WireCommands.ErrorMessage.ErrorCode.valueOf(u.getClass())),\n                     failureHandler);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDc2MA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470674760", "bodyText": "Is there a reason (for this PR) that IllegalStateException is also included here? The old behavior was that it would close the connection in this case.", "author": "andreipaduroiu", "createdAt": "2020-08-14T14:53:17Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n+            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n+            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException", "originalCommit": "972c1e096b3d039ac763b844ae724b3f0553f797", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5Mzc3NA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470793774", "bodyText": "That's a good question.. No.. Will remove.", "author": "co-jo", "createdAt": "2020-08-14T18:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex f4ef25ddab..ef6e5cdcba 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2339,75 +2421,6 @@ public final class WireCommands {\n         }\n     }\n \n-    /**\n-     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n-     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n-     */\n-    @Data\n-    public static final class ErrorMessage implements Reply, WireCommand {\n-        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n-        final long requestId;\n-        final String message;\n-        final ErrorCode errorCode;\n-\n-        @Override\n-        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n-            cp.errorMessage(this);\n-        }\n-\n-        @Override\n-        public void writeFields(DataOutput out) throws IOException {\n-            out.writeLong(requestId);\n-            out.writeUTF(message == null ? \"\" : message);\n-            out.writeInt(errorCode.getCode());\n-        }\n-\n-        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n-            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n-        }\n-\n-        public enum ErrorCode {\n-            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n-            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n-            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n-\n-            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n-            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();\n-\n-            static {\n-                for (ErrorCode errorCode : ErrorCode.values()) {\n-                    OBJECTS_BY_CODE.put(errorCode.code, errorCode);\n-                    OBJECTS_BY_CLASS.put(errorCode.exception, errorCode);\n-                }\n-            }\n-\n-            private final int code;\n-            private final Class exception;\n-\n-            private ErrorCode(int code, Class exception) {\n-                this.code = code;\n-                this.exception = exception;\n-            }\n-\n-            public static ErrorCode valueOf(int code) {\n-                return OBJECTS_BY_CODE.getOrDefault(code, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public static ErrorCode valueOf(Class exception) {\n-                return OBJECTS_BY_CLASS.getOrDefault(exception, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public int getCode() {\n-                return this.code;\n-            }\n-\n-            public Class getExceptionType() {\n-                return this.exception;\n-            }\n-\n-        }\n-    }\n-\n     /**\n      * Base class for any command that may require releasing resources.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NTM3MQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470675371", "bodyText": "You have 2 extra spaces here (before void and after throws. Same with the methods below.", "author": "andreipaduroiu", "createdAt": "2020-08-14T14:54:17Z", "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java", "diffHunk": "@@ -1017,6 +1017,72 @@ public void testGetTableEntries() throws Exception {\n         assertTrue(keyVersions.containsAll(getTableEntriesIteratorsResp.getEntries().getEntries().stream().map(e -> e.getKey().getKeyVersion()).collect(Collectors.toList())));\n     }\n \n+    @Test\n+    public  void testReadTableEntriesDeltaEmpty() throws  Exception {", "originalCommit": "972c1e096b3d039ac763b844ae724b3f0553f797", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java b/segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java\nindex 8ad143138f..e6d847f727 100644\n--- a/segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java\n+++ b/segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java\n\n@@ -1018,7 +1018,7 @@ public class PravegaRequestProcessorTest {\n     }\n \n     @Test\n-    public  void testReadTableEntriesDeltaEmpty() throws  Exception {\n+    public void testReadTableEntriesDeltaEmpty() throws Exception {\n         // Set up PravegaRequestProcessor instance to execute requests against\n         val rnd = new Random(0);\n         String tableSegmentName = \"testReadTableEntriesDelta\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4Mzk4NQ==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r471883985", "bodyText": "I can see the numbers have not been kept organized as originally intended. However let's make an attempt to prevent it from getting worse. Let's make this one's code 61.", "author": "tkaitchuck", "createdAt": "2020-08-18T02:55:15Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java", "diffHunk": "@@ -105,6 +105,8 @@\n     TABLE_ENTRIES_DELTA_READ(87, WireCommands.TableEntriesDeltaRead::readFrom),\n     READ_TABLE_ENTRIES_DELTA(88, WireCommands.ReadTableEntriesDelta::readFrom),\n \n+    ERROR_MESSAGE(89, WireCommands.ErrorMessage::readFrom),", "originalCommit": "972c1e096b3d039ac763b844ae724b3f0553f797", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java\nindex f70ca16f3a..d7ff55aa91 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java\n\n@@ -105,8 +106,6 @@ public enum WireCommandType {\n     TABLE_ENTRIES_DELTA_READ(87, WireCommands.TableEntriesDeltaRead::readFrom),\n     READ_TABLE_ENTRIES_DELTA(88, WireCommands.ReadTableEntriesDelta::readFrom),\n \n-    ERROR_MESSAGE(89, WireCommands.ErrorMessage::readFrom),\n-\n     KEEP_ALIVE(100, WireCommands.KeepAlive::readFrom);\n \n     private final int code;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NDQ2MA==", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r471884460", "bodyText": "This class should override isFailure to return true.\nAlso move this to be located next to AuthTokenCheckFailed.", "author": "tkaitchuck", "createdAt": "2020-08-18T02:56:59Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {", "originalCommit": "972c1e096b3d039ac763b844ae724b3f0553f797", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25fe6abc7d75a82e958f2c91aad4db73b9abeb74", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex f4ef25ddab..ef6e5cdcba 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2339,75 +2421,6 @@ public final class WireCommands {\n         }\n     }\n \n-    /**\n-     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n-     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n-     */\n-    @Data\n-    public static final class ErrorMessage implements Reply, WireCommand {\n-        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n-        final long requestId;\n-        final String message;\n-        final ErrorCode errorCode;\n-\n-        @Override\n-        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n-            cp.errorMessage(this);\n-        }\n-\n-        @Override\n-        public void writeFields(DataOutput out) throws IOException {\n-            out.writeLong(requestId);\n-            out.writeUTF(message == null ? \"\" : message);\n-            out.writeInt(errorCode.getCode());\n-        }\n-\n-        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n-            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n-        }\n-\n-        public enum ErrorCode {\n-            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n-            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n-            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n-\n-            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n-            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();\n-\n-            static {\n-                for (ErrorCode errorCode : ErrorCode.values()) {\n-                    OBJECTS_BY_CODE.put(errorCode.code, errorCode);\n-                    OBJECTS_BY_CLASS.put(errorCode.exception, errorCode);\n-                }\n-            }\n-\n-            private final int code;\n-            private final Class exception;\n-\n-            private ErrorCode(int code, Class exception) {\n-                this.code = code;\n-                this.exception = exception;\n-            }\n-\n-            public static ErrorCode valueOf(int code) {\n-                return OBJECTS_BY_CODE.getOrDefault(code, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public static ErrorCode valueOf(Class exception) {\n-                return OBJECTS_BY_CLASS.getOrDefault(exception, ErrorCode.UNSPECIFIED);\n-            }\n-\n-            public int getCode() {\n-                return this.code;\n-            }\n-\n-            public Class getExceptionType() {\n-                return this.exception;\n-            }\n-\n-        }\n-    }\n-\n     /**\n      * Base class for any command that may require releasing resources.\n      */\n"}}, {"oid": "ab2b23c485fc26947d1d8125177bb96a7cf9c313", "url": "https://github.com/pravega/pravega/commit/ab2b23c485fc26947d1d8125177bb96a7cf9c313", "message": "* Addresses feedback.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>", "committedDate": "2020-08-21T18:25:16Z", "type": "commit"}, {"oid": "6ebf459546ad74195e0c5181a1386fd3d37bf201", "url": "https://github.com/pravega/pravega/commit/6ebf459546ad74195e0c5181a1386fd3d37bf201", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-21T18:25:37Z", "type": "commit"}, {"oid": "d0bc5a760b4a48f545bab6bb984071c1f86c16b8", "url": "https://github.com/pravega/pravega/commit/d0bc5a760b4a48f545bab6bb984071c1f86c16b8", "message": "Merge branch 'master' into issue-4978-delta-iterator-null-pointer", "committedDate": "2020-08-25T18:08:36Z", "type": "commit"}]}