{"pr_number": 4687, "pr_title": "Issue 4570: (KeyValue Tables) Client Data Path Implementation", "pr_createdAt": "2020-04-14T18:15:37Z", "pr_url": "https://github.com/pravega/pravega/pull/4687", "timeline": [{"oid": "ef911343197440d18c3184731e56f78b3b775192", "url": "https://github.com/pravega/pravega/commit/ef911343197440d18c3184731e56f78b3b775192", "message": "Refactored TableSegment, TableEntry, TableKey in preparation for creating KeyValueTable. Moved a few classes around.\n\nRefactored SegmentHelper to make use of TableSegmentKey, TableSegmentEntry and TableSegmentKeyVersion which better map to what a Table Segment can do. Refactored upstream code and adjusted unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-24T23:51:07Z", "type": "commit"}, {"oid": "05ff3487b0c7e26b69c22e3ef1969823915141a2", "url": "https://github.com/pravega/pravega/commit/05ff3487b0c7e26b69c22e3ef1969823915141a2", "message": "Javadoc.\nMoved IteratorItem into its own file.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-25T00:21:59Z", "type": "commit"}, {"oid": "65f52b7d5bc0cc86d9490957498480d151703be2", "url": "https://github.com/pravega/pravega/commit/65f52b7d5bc0cc86d9490957498480d151703be2", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T18:03:54Z", "type": "commit"}, {"oid": "201e5f049c5ba118018d0633463cf739ea11e7e4", "url": "https://github.com/pravega/pravega/commit/201e5f049c5ba118018d0633463cf739ea11e7e4", "message": "Made IteratorState a class.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T18:21:59Z", "type": "commit"}, {"oid": "0bc363a9e6025c935db640f44603b7e67359f57a", "url": "https://github.com/pravega/pravega/commit/0bc363a9e6025c935db640f44603b7e67359f57a", "message": "TableSegmentImpl.\nTableSegmentIterator.\nFixed a bug in MockConnectionFactoryImpl that was closing an externally-provided Executor when it shouldn't be.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:30:08Z", "type": "commit"}, {"oid": "2e11121b0ee12384c7bae18228bf06d87bacc3b4", "url": "https://github.com/pravega/pravega/commit/2e11121b0ee12384c7bae18228bf06d87bacc3b4", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:48:52Z", "type": "commit"}, {"oid": "50bf936a5332db202e2153701412b7bc2dc64718", "url": "https://github.com/pravega/pravega/commit/50bf936a5332db202e2153701412b7bc2dc64718", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-02-25T22:49:16Z", "type": "commit"}, {"oid": "fc34a4e4d15ad134512155432fc88e525e2985c2", "url": "https://github.com/pravega/pravega/commit/fc34a4e4d15ad134512155432fc88e525e2985c2", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-02-25T22:50:20Z", "type": "commit"}, {"oid": "206d4847cf8fd13c7ed69deabe9abf7f047a9589", "url": "https://github.com/pravega/pravega/commit/206d4847cf8fd13c7ed69deabe9abf7f047a9589", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-02-26T18:14:46Z", "type": "commit"}, {"oid": "e848733fbbb3a14ce48713e73a5cfa520dbaca03", "url": "https://github.com/pravega/pravega/commit/e848733fbbb3a14ce48713e73a5cfa520dbaca03", "message": "Merge remote-tracking branch 'remotes/origin/master' into issue-4568-key-value-table-contracts", "committedDate": "2020-03-02T18:24:40Z", "type": "commit"}, {"oid": "bec961271dd6680d2f065f11505cd618bc50e14b", "url": "https://github.com/pravega/pravega/commit/bec961271dd6680d2f065f11505cd618bc50e14b", "message": "Refactored TableSegment, TableEntry, TableKey in preparation for creating KeyValueTable. Moved a few classes around.\n\nRefactored SegmentHelper to make use of TableSegmentKey, TableSegmentEntry and TableSegmentKeyVersion which better map to what a Table Segment can do. Refactored upstream code and adjusted unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "fdc48e967cae0a052e064c0178aacde4a34f7124", "url": "https://github.com/pravega/pravega/commit/fdc48e967cae0a052e064c0178aacde4a34f7124", "message": "Javadoc.\nMoved IteratorItem into its own file.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "57a4ae4f6a76424ffd789947232bb426e7266cec", "url": "https://github.com/pravega/pravega/commit/57a4ae4f6a76424ffd789947232bb426e7266cec", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "9a9cc3e0dbf4d34ac8d51a2e842b999dc2fc471d", "url": "https://github.com/pravega/pravega/commit/9a9cc3e0dbf4d34ac8d51a2e842b999dc2fc471d", "message": "Made IteratorState a class.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "2c138dd219c3bed59ad5998638c3cdf28e27471f", "url": "https://github.com/pravega/pravega/commit/2c138dd219c3bed59ad5998638c3cdf28e27471f", "message": "Updated TableSegment.keyIterator and TableSegment.entryIterator.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "096cdd4843a0cb3dd11893b7c66592c858b1471e", "url": "https://github.com/pravega/pravega/commit/096cdd4843a0cb3dd11893b7c66592c858b1471e", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-03T16:10:18Z", "type": "commit"}, {"oid": "5f81fbb3aa9d099e39986a9c258da838a4e7f630", "url": "https://github.com/pravega/pravega/commit/5f81fbb3aa9d099e39986a9c258da838a4e7f630", "message": "Merge branch 'issue-4568-key-value-table-contracts' of https://github.com/andreipaduroiu/pravega into issue-4568-key-value-table-contracts", "committedDate": "2020-03-04T16:17:34Z", "type": "commit"}, {"oid": "e8a3e9cb0186f3c390a8b500d71be299cceb8c8c", "url": "https://github.com/pravega/pravega/commit/e8a3e9cb0186f3c390a8b500d71be299cceb8c8c", "message": "Unit tests ... for coverage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T16:56:28Z", "type": "commit"}, {"oid": "1cadfa9c07c323757ad24197deccd3e6fb27f577", "url": "https://github.com/pravega/pravega/commit/1cadfa9c07c323757ad24197deccd3e6fb27f577", "message": "Increasing coverage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T21:05:59Z", "type": "commit"}, {"oid": "0fac12be237bb6f5053dad56b446a8e3011cb619", "url": "https://github.com/pravega/pravega/commit/0fac12be237bb6f5053dad56b446a8e3011cb619", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-03-04T22:48:59Z", "type": "commit"}, {"oid": "6d0d197c9913c94f37ec6f9d15361359a70dc33f", "url": "https://github.com/pravega/pravega/commit/6d0d197c9913c94f37ec6f9d15361359a70dc33f", "message": "Default methods.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T22:58:46Z", "type": "commit"}, {"oid": "3adfa77124cf1c79eac5528e8090a8f0ee3e403e", "url": "https://github.com/pravega/pravega/commit/3adfa77124cf1c79eac5528e8090a8f0ee3e403e", "message": "Added Wire Protocol support for prefix-filtered iterators.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@dell.com>", "committedDate": "2020-03-04T23:59:10Z", "type": "commit"}, {"oid": "df7480352538f93c7ccb10db86216513e019faa5", "url": "https://github.com/pravega/pravega/commit/df7480352538f93c7ccb10db86216513e019faa5", "message": "Fixed some Javadoc verbiage.\nSeparated IteratorState (interface) and IteratorStateImpl (class) to hide some implementation details.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-09T22:03:06Z", "type": "commit"}, {"oid": "afb51fed4467aa7df842b38eba434b58ade7326f", "url": "https://github.com/pravega/pravega/commit/afb51fed4467aa7df842b38eba434b58ade7326f", "message": "Merge remote-tracking branch 'remotes/ap/issue-4568-key-value-table-contracts' into issue-4333-tables-segment-client", "committedDate": "2020-03-09T23:28:42Z", "type": "commit"}, {"oid": "4958aba6aea2fbf39df8a4e247bbe9d92ea3414c", "url": "https://github.com/pravega/pravega/commit/4958aba6aea2fbf39df8a4e247bbe9d92ea3414c", "message": "Merged with parent branch. Fixed some tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-09T23:36:56Z", "type": "commit"}, {"oid": "f0c8a75a7fed394e43cc1da58a03437d964704f6", "url": "https://github.com/pravega/pravega/commit/f0c8a75a7fed394e43cc1da58a03437d964704f6", "message": "Moved Controller, ControllerImpl and a few related classes to io.pravega.client.control.impl.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-10T01:18:14Z", "type": "commit"}, {"oid": "253745d93eb687bca6cd290ac95f9cf1bda0515a", "url": "https://github.com/pravega/pravega/commit/253745d93eb687bca6cd290ac95f9cf1bda0515a", "message": "KeyValueTable contracts for Controller operations\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-10T18:25:53Z", "type": "commit"}, {"oid": "6b49fc3f91d58dc04422f157c1c81ceb6359c611", "url": "https://github.com/pravega/pravega/commit/6b49fc3f91d58dc04422f157c1c81ceb6359c611", "message": "Removed extra method.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-11T17:13:51Z", "type": "commit"}, {"oid": "10316df5d7940bcced9ed29ed92b063a6e0a941e", "url": "https://github.com/pravega/pravega/commit/10316df5d7940bcced9ed29ed92b063a6e0a941e", "message": "Removed dead code. Reverted PositionInternal.java.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-16T15:15:13Z", "type": "commit"}, {"oid": "d3f2e4d22f861bc513255b0a1d26e916c66e905b", "url": "https://github.com/pravega/pravega/commit/d3f2e4d22f861bc513255b0a1d26e916c66e905b", "message": "Javadoc fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-17T16:00:03Z", "type": "commit"}, {"oid": "5fa9ebfaafd25626e344949f70230ca690a41ff4", "url": "https://github.com/pravega/pravega/commit/5fa9ebfaafd25626e344949f70230ca690a41ff4", "message": "KeyValueTable API variant #2\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-17T18:06:19Z", "type": "commit"}, {"oid": "fa721c75ee4b15127bcf033c56b06c90c7ba11bd", "url": "https://github.com/pravega/pravega/commit/fa721c75ee4b15127bcf033c56b06c90c7ba11bd", "message": "KeyValueTableManager implementation and unit tests.\nMockController implementation for KeyValue Tables\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-19T22:27:21Z", "type": "commit"}, {"oid": "43bfea81446b70a29698a0a6316aa13a54e50fdd", "url": "https://github.com/pravega/pravega/commit/43bfea81446b70a29698a0a6316aa13a54e50fdd", "message": "Merge remote-tracking branch 'remotes/ap/issue-4603-client-controller' into issue-4570-kvt-data-path\n\n# Conflicts:\n#\tcontroller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "committedDate": "2020-03-20T17:03:35Z", "type": "commit"}, {"oid": "5fe92da77df36047b72dd8e37ef5de9dfbb576b8", "url": "https://github.com/pravega/pravega/commit/5fe92da77df36047b72dd8e37ef5de9dfbb576b8", "message": "Merge remote-tracking branch 'remotes/ap/issue-4571-client-control-path' into issue-4570-kvt-data-path", "committedDate": "2020-03-20T17:03:51Z", "type": "commit"}, {"oid": "a539c9c4a5643220cc38c1a063b18dc474237e46", "url": "https://github.com/pravega/pravega/commit/a539c9c4a5643220cc38c1a063b18dc474237e46", "message": "Merge remote-tracking branch 'remotes/ap/issue-4333-tables-segment-client' into issue-4570-kvt-data-path", "committedDate": "2020-03-20T17:04:15Z", "type": "commit"}, {"oid": "b862a22671e5df379b131b70d23c4bf5cbf6eb31", "url": "https://github.com/pravega/pravega/commit/b862a22671e5df379b131b70d23c4bf5cbf6eb31", "message": "Merging all upstream branches.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-20T23:09:06Z", "type": "commit"}, {"oid": "077e4c89c16d5199ddddf58af310ef4bdd561762", "url": "https://github.com/pravega/pravega/commit/077e4c89c16d5199ddddf58af310ef4bdd561762", "message": "Initial implementation for KeyValueTableImpl.\nSegmentSelector.\nTableSegmentFactory.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-24T01:49:09Z", "type": "commit"}, {"oid": "8ac5d728987d6b55d8910cb8d24029d4f5f0e4b8", "url": "https://github.com/pravega/pravega/commit/8ac5d728987d6b55d8910cb8d24029d4f5f0e4b8", "message": "KeyFamilySerializer and unit tests.\nKeyValueTableImpl support for key families.\nTableSegmentFactoryImpl.\nUnit tests for KeyValueTableSegments, SegmentSelector.\nHashHelper support for ByteBufs + unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-25T00:19:34Z", "type": "commit"}, {"oid": "6d82220aaec456727e011be1f0775ed9e2a66cb0", "url": "https://github.com/pravega/pravega/commit/6d82220aaec456727e011be1f0775ed9e2a66cb0", "message": "More unit tests.\nEnforcing maximum key and value lengths.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-25T16:24:06Z", "type": "commit"}, {"oid": "2fe7e91c5cfff4101149503a14989a7baabc87e1", "url": "https://github.com/pravega/pravega/commit/2fe7e91c5cfff4101149503a14989a7baabc87e1", "message": "Factories.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-25T18:16:25Z", "type": "commit"}, {"oid": "640e76505364a05f73154b8ff333e5424cd11ab0", "url": "https://github.com/pravega/pravega/commit/640e76505364a05f73154b8ff333e5424cd11ab0", "message": "Unit tests for KeyValueTableImpl.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-26T01:12:00Z", "type": "commit"}, {"oid": "a0320417f2051d91bc776bbea33c812555de4a36", "url": "https://github.com/pravega/pravega/commit/a0320417f2051d91bc776bbea33c812555de4a36", "message": "Unit tests for KeyValueTableImpl.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-26T15:09:23Z", "type": "commit"}, {"oid": "127f08616894bee974ee489393455a3f4f58d93b", "url": "https://github.com/pravega/pravega/commit/127f08616894bee974ee489393455a3f4f58d93b", "message": "Iterators.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-26T23:18:19Z", "type": "commit"}, {"oid": "bd0288a630bef3037685592c7a344f61a1d99327", "url": "https://github.com/pravega/pravega/commit/bd0288a630bef3037685592c7a344f61a1d99327", "message": "Integration tests for KeyValueTables.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-27T21:20:54Z", "type": "commit"}, {"oid": "fc39cc61116ff61bd62956e6cef1c0bd49a39f38", "url": "https://github.com/pravega/pravega/commit/fc39cc61116ff61bd62956e6cef1c0bd49a39f38", "message": "Fixed a bug for inexistent items.\nReduced logging levels for PravegaRequestProcessor table operations.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-27T22:11:32Z", "type": "commit"}, {"oid": "15e7967949bd59239fa2d7e3f78a8bd0a1699d5e", "url": "https://github.com/pravega/pravega/commit/15e7967949bd59239fa2d7e3f78a8bd0a1699d5e", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-03-27T22:25:21Z", "type": "commit"}, {"oid": "04e609570d9e100b062d6d9be60d4ea37384db18", "url": "https://github.com/pravega/pravega/commit/04e609570d9e100b062d6d9be60d4ea37384db18", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4570-kvt-data-path\n\n# Conflicts:\n#\tclient/src/main/java/io/pravega/client/tables/BadKeyVersionException.java\n#\tclient/src/main/java/io/pravega/client/tables/IteratorState.java\n#\tclient/src/main/java/io/pravega/client/tables/KeyValueTable.java\n#\tclient/src/main/java/io/pravega/client/tables/KeyValueTableClientConfiguration.java\n#\tclient/src/main/java/io/pravega/client/tables/TableEntry.java\n#\tclient/src/main/java/io/pravega/client/tables/TableKey.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/KeyVersionImpl.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegment.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegmentEntry.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegmentImpl.java\n#\tclient/src/main/java/io/pravega/client/tables/impl/TableSegmentIterator.java\n#\tclient/src/test/java/io/pravega/client/admin/impl/KeyValueTableManagerImplTest.java\n#\tclient/src/test/java/io/pravega/client/stream/mock/MockController.java\n#\tclient/src/test/java/io/pravega/client/tables/IteratorStateTests.java\n#\tclient/src/test/java/io/pravega/client/tables/TableEntryTests.java\n#\tclient/src/test/java/io/pravega/client/tables/TableKeyTests.java\n#\tclient/src/test/java/io/pravega/client/tables/impl/KeyValueTableSegmentsTests.java\n#\tclient/src/test/java/io/pravega/client/tables/impl/TableSegmentImplTest.java\n#\tcontroller/src/main/java/io/pravega/controller/server/SegmentHelper.java\n#\tcontroller/src/test/java/io/pravega/controller/server/eventProcessor/LocalControllerTest.java\n#\tshared/protocol/src/test/java/io/pravega/shared/NameUtilsTest.java", "committedDate": "2020-04-02T18:03:49Z", "type": "commit"}, {"oid": "4ba465f416eb8ddf5cbbd3dd6e4ed069e7e6252a", "url": "https://github.com/pravega/pravega/commit/4ba465f416eb8ddf5cbbd3dd6e4ed069e7e6252a", "message": "Merge conflicts.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-02T18:22:34Z", "type": "commit"}, {"oid": "c0bdc12cdb3ca765bad3173b3cadcaf8ec4ecca0", "url": "https://github.com/pravega/pravega/commit/c0bdc12cdb3ca765bad3173b3cadcaf8ec4ecca0", "message": "WireCommands.CreateTableSegment: added `sorted` option.\nBug fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T18:14:48Z", "type": "commit"}, {"oid": "bdce082a65952762849da69de016c29dabab7f91", "url": "https://github.com/pravega/pravega/commit/bdce082a65952762849da69de016c29dabab7f91", "message": "Reverted some changes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T18:19:33Z", "type": "commit"}, {"oid": "287952d7fda0565409644160946b194b019bce92", "url": "https://github.com/pravega/pravega/commit/287952d7fda0565409644160946b194b019bce92", "message": "checkstyle\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T19:01:30Z", "type": "commit"}, {"oid": "fc83590399608866be815f2664db2817e084b7b5", "url": "https://github.com/pravega/pravega/commit/fc83590399608866be815f2664db2817e084b7b5", "message": "checkstyle.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T19:24:03Z", "type": "commit"}, {"oid": "ac06df2d4d779c67e083b0192fc8d3b70976e1c0", "url": "https://github.com/pravega/pravega/commit/ac06df2d4d779c67e083b0192fc8d3b70976e1c0", "message": "checkstyle.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-14T20:41:13Z", "type": "commit"}, {"oid": "c7aaabf87debfe148dd36dc59243c781cc86b1c0", "url": "https://github.com/pravega/pravega/commit/c7aaabf87debfe148dd36dc59243c781cc86b1c0", "message": "Reverted some changes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-15T15:51:25Z", "type": "commit"}, {"oid": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "url": "https://github.com/pravega/pravega/commit/eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "message": "Bumping WIRE_VERSION to 10.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-15T16:59:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2ODU5NA==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416968594", "bodyText": "I thought the key family + the key had to be under 8kb. If this is true on the server, I think from a public interface perspective it makes sense to limit each to 4kb to simplify the model for users. (IE there isn't a failure mode where you change the key family, and a key that was previously ok now has an error)", "author": "tkaitchuck", "createdAt": "2020-04-28T22:45:34Z", "path": "client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.client.tables.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.stream.Serializer;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import org.apache.commons.lang3.SerializationException;\n+\n+/**\n+ * Serializer for Key-Value Table Key Families.\n+ */\n+public class KeyFamilySerializer implements Serializer<String> {\n+    @VisibleForTesting\n+    static final int MAX_KEY_FAMILY_LENGTH = 8191; // It can't be longer than TableSegment.MAX_KEY_LENGTH", "originalCommit": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3Njg4Mw==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r417376883", "bodyText": "Good catch. I actually wanted to make it more restrictive, but I forgot. I restricted this to 1KB for now. It will always be easier to increase the limit than shrink it in the future.", "author": "andreipaduroiu", "createdAt": "2020-04-29T14:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2ODU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "d6585e8a2d84c0d179597697e65c5d6e2d2ed029", "chunk": "diff --git a/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java b/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\nindex 8ac387ba91..51d64a97df 100644\n--- a/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\n+++ b/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\n\n@@ -11,60 +11,79 @@ package io.pravega.client.tables.impl;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n-import io.pravega.client.stream.Serializer;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import javax.annotation.Nullable;\n+import lombok.NonNull;\n import org.apache.commons.lang3.SerializationException;\n \n /**\n  * Serializer for Key-Value Table Key Families.\n  */\n-public class KeyFamilySerializer implements Serializer<String> {\n+class KeyFamilySerializer {\n     @VisibleForTesting\n-    static final int MAX_KEY_FAMILY_LENGTH = 8191; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n+    static final int MAX_KEY_FAMILY_LENGTH = 1024; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n     @VisibleForTesting\n-    static final int PREFIX_LENGTH = 2; // [0, 65535]. First 3 bits will be empty.\n+    static final int PREFIX_LENGTH = 2; // [0, 65535]. First 6 bits will be empty.\n     @VisibleForTesting\n     static final Charset ENCODING = StandardCharsets.UTF_8;\n \n-    @Override\n-    public ByteBuffer serialize(@Nullable String keyFamily) {\n-        ByteBuffer result;\n+    /**\n+     * Serializes the given Key Family into a new {@link ByteBuf} with the following format:\n+     * - Bytes [0, 2): Length of UTF8-encoded Key Family (0 if Key Family is null). (Value is L)\n+     * - Bytes [2, 2+L): UTF8-encoded Key Family.\n+     *\n+     * @param keyFamily Key Family to serialize.\n+     * @return A new {@link ByteBuf}. If Key Family Length is non-zero, this will likely be a composite {@link ByteBuf}.\n+     * This buffer will have {@link ByteBuf#readerIndex()} set to 0 and {@link ByteBuf#writerIndex()} set to the end.\n+     * @throws IllegalArgumentException If the UTF8-encoded Key Family exceeds {@link #MAX_KEY_FAMILY_LENGTH}.\n+     */\n+    ByteBuf serialize(@Nullable String keyFamily) {\n+        ByteBuf prefix = Unpooled.wrappedBuffer(new byte[PREFIX_LENGTH]);\n         if (keyFamily == null || keyFamily.length() == 0) {\n-            result = ByteBuffer.allocate(PREFIX_LENGTH); // Prefix is 00, which is the length of the Key Family\n+            prefix.setShort(0, 0);\n+            return prefix; // Prefix is 00, which is the length of the Key Family\n         } else {\n             ByteBuffer s = ENCODING.encode(keyFamily);\n             Preconditions.checkArgument(s.remaining() <= MAX_KEY_FAMILY_LENGTH,\n                     \"KeyFamily must have a %s encoding length of at most %s bytes; actual %s.\", ENCODING.name(), MAX_KEY_FAMILY_LENGTH, s.remaining());\n-            result = ByteBuffer.allocate(PREFIX_LENGTH + s.remaining());\n-            result.putShort((short) s.remaining());\n-            result.put(s);\n+            prefix.setShort(0, s.remaining());\n+            return Unpooled.wrappedBuffer(prefix, Unpooled.wrappedBuffer(s));\n         }\n-\n-        return (ByteBuffer) result.position(0);\n     }\n \n-    @Override\n-    public String deserialize(ByteBuffer serializedValue) {\n-        if (serializedValue.remaining() < PREFIX_LENGTH) {\n-            throw new SerializationException(String.format(\"At least %d bytes required, given %d.\", PREFIX_LENGTH, serializedValue.remaining()));\n+    /**\n+     * Deserializes a Key Family serialized using {@link ByteBuf}.\n+     *\n+     * @param serializedValue A {@link ByteBuf}. Deserialization will begin from {@link ByteBuf#readerIndex()} and not\n+     *                        exceed {@link ByteBuf#readableBytes()}. When this method is complete, the {@link ByteBuf#readerIndex()}\n+     *                        will have advanced by the number of bytes read. See {@link #serialize} for format.\n+     * @return A String representing the Key Family. Returns null if the serialized Key Family length was 0 (which means\n+     * that serializing an empty string will also deserialize a null value).\n+     * @throws SerializationException If the given {@link ByteBuf} has insufficient bytes to accommodate a Key Family or\n+     *                                if the serialization cannot be parsed.\n+     */\n+    String deserialize(@NonNull ByteBuf serializedValue) {\n+        if (serializedValue.readableBytes() < PREFIX_LENGTH) {\n+            throw new SerializationException(String.format(\"At least %d bytes required, given %d.\", PREFIX_LENGTH, serializedValue.readableBytes()));\n         }\n \n-        int kfLength = serializedValue.getShort();\n+        int kfLength = serializedValue.readShort();\n         if (kfLength < 0 || kfLength > MAX_KEY_FAMILY_LENGTH) {\n             throw new SerializationException(String.format(\"Invalid Key Family Length. Expected between %d and %d, read %d.\",\n                     0, MAX_KEY_FAMILY_LENGTH, kfLength));\n-        } else if (serializedValue.remaining() < kfLength) {\n+        } else if (serializedValue.readableBytes() < kfLength) {\n             throw new SerializationException(String.format(\n-                    \"Insufficient bytes remaining in buffer. Expected at least %d, actual %d.\", kfLength, serializedValue.remaining()));\n+                    \"Insufficient bytes remaining in buffer. Expected at least %d, actual %d.\", kfLength, serializedValue.readableBytes()));\n         } else if (kfLength == 0) {\n             // No Key Family\n             return null;\n         } else {\n-            String result = ENCODING.decode((ByteBuffer) serializedValue.slice().limit(kfLength)).toString();\n-            serializedValue.position(serializedValue.position() + kfLength);\n+            String result = ENCODING.decode(serializedValue.nioBuffer(serializedValue.readerIndex(), kfLength)).toString();\n+            serializedValue.readerIndex(serializedValue.readerIndex() + kfLength);\n             return result;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MTA4NA==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416971084", "bodyText": "We should probably use a normal long. Segment ids are highly probably > 2^32 and are not guarenteed to not use the full range of numbers.", "author": "tkaitchuck", "createdAt": "2020-04-28T22:51:57Z", "path": "client/src/main/java/io/pravega/client/tables/impl/KeyValueTableIteratorState.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.client.tables.impl;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.pravega.common.ObjectBuilder;\n+import io.pravega.common.io.serialization.RevisionDataInput;\n+import io.pravega.common.io.serialization.RevisionDataOutput;\n+import io.pravega.common.io.serialization.VersionedSerializer;\n+import io.pravega.shared.protocol.netty.ByteBufWrapper;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+import lombok.SneakyThrows;\n+\n+/**\n+ * Key-Value Table Key/Entry Iterator state.\n+ */\n+@Data\n+@Builder\n+class KeyValueTableIteratorState {\n+    private static final KeyValueTableIteratorStateSerializer SERIALIZER = new KeyValueTableIteratorStateSerializer();\n+    /**\n+     * Name of the Key-Value Table the iterator belongs to.\n+     */\n+    @NonNull\n+    private final String keyValueTableName;\n+    /**\n+     * Id of the Segment the Iterator is currently on.\n+     */\n+    private final long segmentId;\n+    /**\n+     * Iterator State for the Segment Iterator (this is an opaque buffer that is passed along to the {@link TableSegment}).\n+     */\n+    private final ByteBuf segmentIteratorState;\n+\n+    //region Serialization\n+\n+    @SneakyThrows(IOException.class)\n+    ByteBuffer toBytes() {\n+        return SERIALIZER.serialize(this).asByteBuffer();\n+    }\n+\n+    @SneakyThrows(IOException.class)\n+    static KeyValueTableIteratorState fromBytes(ByteBuffer serialization) {\n+        return KeyValueTableIteratorState.SERIALIZER.deserialize(new ByteBufWrapper(Unpooled.wrappedBuffer(serialization)).getReader());\n+    }\n+\n+    private static class KeyValueTableIteratorStateBuilder implements ObjectBuilder<KeyValueTableIteratorState> {\n+    }\n+\n+    static class KeyValueTableIteratorStateSerializer extends\n+            VersionedSerializer.WithBuilder<KeyValueTableIteratorState, KeyValueTableIteratorState.KeyValueTableIteratorStateBuilder> {\n+        @Override\n+        protected KeyValueTableIteratorState.KeyValueTableIteratorStateBuilder newBuilder() {\n+            return builder();\n+        }\n+\n+        @Override\n+        protected byte getWriteVersion() {\n+            return 0;\n+        }\n+\n+        @Override\n+        protected void declareVersions() {\n+            version(0).revision(0, this::write00, this::read00);\n+        }\n+\n+        private void read00(RevisionDataInput revisionDataInput, KeyValueTableIteratorState.KeyValueTableIteratorStateBuilder builder) throws IOException {\n+            builder.keyValueTableName(revisionDataInput.readUTF());\n+            builder.segmentId(revisionDataInput.readCompactLong());\n+            byte[] array = revisionDataInput.readArray();\n+            if (array != null && array.length > 0) {\n+                builder.segmentIteratorState(Unpooled.wrappedBuffer(array));\n+            }\n+        }\n+\n+        private void write00(KeyValueTableIteratorState checkpoint, RevisionDataOutput revisionDataOutput) throws IOException {\n+            revisionDataOutput.writeUTF(checkpoint.keyValueTableName);\n+            revisionDataOutput.writeCompactLong(checkpoint.segmentId);", "originalCommit": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3ODQ5Mw==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r417378493", "bodyText": "CompactLong goes from 0 until 2^62.\nI thought they were sequential, but if they could be arbitrary, then we should probably handle -2^63 to 2^63.", "author": "andreipaduroiu", "createdAt": "2020-04-29T14:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MTA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d6585e8a2d84c0d179597697e65c5d6e2d2ed029", "chunk": "diff --git a/client/src/main/java/io/pravega/client/tables/impl/KeyValueTableIteratorState.java b/client/src/main/java/io/pravega/client/tables/impl/KeyValueTableIteratorState.java\nindex 4f8e4be8a1..b222a52e98 100644\n--- a/client/src/main/java/io/pravega/client/tables/impl/KeyValueTableIteratorState.java\n+++ b/client/src/main/java/io/pravega/client/tables/impl/KeyValueTableIteratorState.java\n\n@@ -78,7 +78,7 @@ class KeyValueTableIteratorState {\n \n         private void read00(RevisionDataInput revisionDataInput, KeyValueTableIteratorState.KeyValueTableIteratorStateBuilder builder) throws IOException {\n             builder.keyValueTableName(revisionDataInput.readUTF());\n-            builder.segmentId(revisionDataInput.readCompactLong());\n+            builder.segmentId(revisionDataInput.readLong());\n             byte[] array = revisionDataInput.readArray();\n             if (array != null && array.length > 0) {\n                 builder.segmentIteratorState(Unpooled.wrappedBuffer(array));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MzY5Ng==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416973696", "bodyText": "COmplete", "author": "tkaitchuck", "createdAt": "2020-04-28T22:59:11Z", "path": "test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+import io.netty.util.internal.logging.Slf4JLoggerFactory;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.KeyValueTableFactory;\n+import io.pravega.client.admin.KeyValueTableInfo;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.mock.MockController;\n+import io.pravega.client.tables.KeyValueTable;\n+import io.pravega.client.tables.KeyValueTableClientConfiguration;\n+import io.pravega.client.tables.KeyValueTableConfiguration;\n+import io.pravega.client.tables.impl.KeyValueTableFactoryImpl;\n+import io.pravega.client.tables.impl.KeyValueTableTestBase;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.AssertExtensions;\n+import io.pravega.test.common.TestUtils;\n+import java.time.Duration;\n+import java.util.Collections;\n+import lombok.val;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Integration test for {@link KeyValueTable}s using real Segment Store and connection.\n+ * The only simulated component is the {@link Controller} which is provided via the {@link MockController}.\n+ */\n+public class KeyValueTableTest extends KeyValueTableTestBase {\n+    private static final String ENDPOINT = \"localhost\";\n+    private static final String SCOPE = \"Scope\";\n+    private static final KeyValueTableConfiguration DEFAULT_CONFIG = KeyValueTableConfiguration.builder().partitionCount(5).build();\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private ResourceLeakDetector.Level originalLevel;\n+    private ServiceBuilder serviceBuilder;\n+    private TableStore tableStore;\n+    private PravegaConnectionListener serverListener;\n+    private ConnectionFactory connectionFactory;\n+    private Controller controller;\n+    private KeyValueTableFactory keyValueTableFactory;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        super.setup();\n+        this.originalLevel = ResourceLeakDetector.getLevel();\n+        ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.PARANOID);\n+        InternalLoggerFactory.setDefaultFactory(Slf4JLoggerFactory.INSTANCE);\n+        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+        this.serviceBuilder.initialize();\n+        this.tableStore = this.serviceBuilder.createTableStoreService();\n+        int port = TestUtils.getAvailableListenPort();\n+        this.serverListener = new PravegaConnectionListener(false, port, mock(StreamSegmentStore.class), this.tableStore);\n+        this.serverListener.startListening();\n+\n+        this.connectionFactory = new ConnectionFactoryImpl(ClientConfig.builder().build());\n+        this.controller = new MockController(ENDPOINT, port, this.connectionFactory, true);\n+        this.controller.createScope(SCOPE);\n+        this.keyValueTableFactory = new KeyValueTableFactoryImpl(SCOPE, this.controller, this.connectionFactory);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        this.controller.close();\n+        this.connectionFactory.close();\n+        this.serverListener.close();\n+        this.serviceBuilder.close();\n+        ResourceLeakDetector.setLevel(this.originalLevel);\n+    }\n+\n+    /**\n+     * Smoke Test. Verify that the KeyValueTable can be created and deleted.\n+     */\n+    @Test\n+    public void testCreateDeleteKeyValueTable() {\n+        val kvt = newKeyValueTableName();\n+        boolean created = this.controller.createKeyValueTable(kvt.getScope(), kvt.getKeyValueTableName(), DEFAULT_CONFIG).join();\n+        Assert.assertTrue(created);\n+        val segments = this.controller.getCurrentSegmentsForKeyValueTable(kvt.getScope(), kvt.getKeyValueTableName()).join();\n+        Assert.assertEquals(DEFAULT_CONFIG.getPartitionCount(), segments.getSegments().size());\n+        for (val s : segments.getSegments()) {\n+            // We know there's nothing in these segments. But if the segments hadn't been created, then this will throw\n+            // an exception.\n+            this.tableStore.get(s.getScopedName(), Collections.singletonList(new ByteArraySegment(new byte[1])), TIMEOUT).join();\n+        }\n+\n+        // Verify re-creation does not work.\n+        Assert.assertFalse(this.controller.createKeyValueTable(kvt.getScope(), kvt.getKeyValueTableName(), DEFAULT_CONFIG).join());\n+\n+        // Delete and verify segments have been deleted too.\n+        val deleted = this.controller.deleteKeyValueTable(kvt.getScope(), kvt.getKeyValueTableName()).join();\n+        Assert.assertTrue(deleted);\n+        Assert.assertFalse(this.controller.deleteKeyValueTable(kvt.getScope(), kvt.getKeyValueTableName()).join());\n+        for (val s : segments.getSegments()) {\n+            AssertExtensions.assertSuppliedFutureThrows(\n+                    \"Segment \" + s + \" has not been deleted.\",\n+                    () -> this.tableStore.get(s.getScopedName(), Collections.singletonList(new ByteArraySegment(new byte[1])), TIMEOUT),\n+                    ex -> ex instanceof StreamSegmentNotExistsException);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore\n+    public void testIterators() {\n+        // TODO: iterators not yet supported server-side.", "originalCommit": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3ODg1Mg==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416978852", "bodyText": "#4656  has a branch with all the changes. I can't submit that PR until I get this one in since they clash on a few files - including this one.\nWe'll have to do them in sequence, and I chose to do this PR first. Yes, the functionality will be broken until #4656 is done, but that's why I'm pushing into a feature branch.", "author": "andreipaduroiu", "createdAt": "2020-04-28T23:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3MzY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8ee6e620d025979a28d61f98f0b3a4cf67752780", "chunk": "diff --git a/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java b/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\nindex e522a54386..b5a676697d 100644\n--- a/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\n+++ b/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\n\n@@ -9,9 +9,6 @@\n  */\n package io.pravega.test.integration;\n \n-import io.netty.util.ResourceLeakDetector;\n-import io.netty.util.internal.logging.InternalLoggerFactory;\n-import io.netty.util.internal.logging.Slf4JLoggerFactory;\n import io.pravega.client.ClientConfig;\n import io.pravega.client.KeyValueTableFactory;\n import io.pravega.client.admin.KeyValueTableInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NDEwMA==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416974100", "bodyText": "There is a new way you added to do this which is probably better, let's be sure when the merge is resolved we are using that.", "author": "tkaitchuck", "createdAt": "2020-04-28T23:00:29Z", "path": "test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration;\n+\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+import io.netty.util.internal.logging.Slf4JLoggerFactory;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.KeyValueTableFactory;\n+import io.pravega.client.admin.KeyValueTableInfo;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.netty.impl.ConnectionFactory;\n+import io.pravega.client.netty.impl.ConnectionFactoryImpl;\n+import io.pravega.client.stream.mock.MockController;\n+import io.pravega.client.tables.KeyValueTable;\n+import io.pravega.client.tables.KeyValueTableClientConfiguration;\n+import io.pravega.client.tables.KeyValueTableConfiguration;\n+import io.pravega.client.tables.impl.KeyValueTableFactoryImpl;\n+import io.pravega.client.tables.impl.KeyValueTableTestBase;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.AssertExtensions;\n+import io.pravega.test.common.TestUtils;\n+import java.time.Duration;\n+import java.util.Collections;\n+import lombok.val;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.mock;\n+\n+/**\n+ * Integration test for {@link KeyValueTable}s using real Segment Store and connection.\n+ * The only simulated component is the {@link Controller} which is provided via the {@link MockController}.\n+ */\n+public class KeyValueTableTest extends KeyValueTableTestBase {\n+    private static final String ENDPOINT = \"localhost\";\n+    private static final String SCOPE = \"Scope\";\n+    private static final KeyValueTableConfiguration DEFAULT_CONFIG = KeyValueTableConfiguration.builder().partitionCount(5).build();\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private ResourceLeakDetector.Level originalLevel;", "originalCommit": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3ODI3MQ==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416978271", "bodyText": "Yes, this branch is still forked off feature-key-value-tables which hasn't been updated in a long time.", "author": "andreipaduroiu", "createdAt": "2020-04-28T23:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NDEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2NTYzNQ==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r418165635", "bodyText": "Merged with master; this should be fixed now.", "author": "andreipaduroiu", "createdAt": "2020-04-30T17:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NDEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "8ee6e620d025979a28d61f98f0b3a4cf67752780", "chunk": "diff --git a/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java b/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\nindex e522a54386..b5a676697d 100644\n--- a/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\n+++ b/test/integration/src/test/java/io/pravega/test/integration/KeyValueTableTest.java\n\n@@ -9,9 +9,6 @@\n  */\n package io.pravega.test.integration;\n \n-import io.netty.util.ResourceLeakDetector;\n-import io.netty.util.internal.logging.InternalLoggerFactory;\n-import io.netty.util.internal.logging.Slf4JLoggerFactory;\n import io.pravega.client.ClientConfig;\n import io.pravega.client.KeyValueTableFactory;\n import io.pravega.client.admin.KeyValueTableInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NDczMw==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r416974733", "bodyText": "Ideally we could avoid this copy...", "author": "tkaitchuck", "createdAt": "2020-04-28T23:01:59Z", "path": "client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.client.tables.impl;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.stream.Serializer;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import org.apache.commons.lang3.SerializationException;\n+\n+/**\n+ * Serializer for Key-Value Table Key Families.\n+ */\n+public class KeyFamilySerializer implements Serializer<String> {\n+    @VisibleForTesting\n+    static final int MAX_KEY_FAMILY_LENGTH = 8191; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n+    @VisibleForTesting\n+    static final int PREFIX_LENGTH = 2; // [0, 65535]. First 3 bits will be empty.\n+    @VisibleForTesting\n+    static final Charset ENCODING = StandardCharsets.UTF_8;\n+\n+    @Override\n+    public ByteBuffer serialize(@Nullable String keyFamily) {\n+        ByteBuffer result;\n+        if (keyFamily == null || keyFamily.length() == 0) {\n+            result = ByteBuffer.allocate(PREFIX_LENGTH); // Prefix is 00, which is the length of the Key Family\n+        } else {\n+            ByteBuffer s = ENCODING.encode(keyFamily);\n+            Preconditions.checkArgument(s.remaining() <= MAX_KEY_FAMILY_LENGTH,\n+                    \"KeyFamily must have a %s encoding length of at most %s bytes; actual %s.\", ENCODING.name(), MAX_KEY_FAMILY_LENGTH, s.remaining());\n+            result = ByteBuffer.allocate(PREFIX_LENGTH + s.remaining());\n+            result.putShort((short) s.remaining());\n+            result.put(s);", "originalCommit": "eea443c3b4e9bd01a3c5a4e8d03df71c2b136d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNTg1NQ==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r417405855", "bodyText": "Interesting. I originally did that because I wanted to implement Serializer<String>. I didn't need that so I made this use ByteBufs.", "author": "andreipaduroiu", "createdAt": "2020-04-29T15:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NDczMw=="}], "type": "inlineReview", "revised_code": {"commit": "d6585e8a2d84c0d179597697e65c5d6e2d2ed029", "chunk": "diff --git a/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java b/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\nindex 8ac387ba91..51d64a97df 100644\n--- a/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\n+++ b/client/src/main/java/io/pravega/client/tables/impl/KeyFamilySerializer.java\n\n@@ -11,60 +11,79 @@ package io.pravega.client.tables.impl;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n-import io.pravega.client.stream.Serializer;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import javax.annotation.Nullable;\n+import lombok.NonNull;\n import org.apache.commons.lang3.SerializationException;\n \n /**\n  * Serializer for Key-Value Table Key Families.\n  */\n-public class KeyFamilySerializer implements Serializer<String> {\n+class KeyFamilySerializer {\n     @VisibleForTesting\n-    static final int MAX_KEY_FAMILY_LENGTH = 8191; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n+    static final int MAX_KEY_FAMILY_LENGTH = 1024; // It can't be longer than TableSegment.MAX_KEY_LENGTH\n     @VisibleForTesting\n-    static final int PREFIX_LENGTH = 2; // [0, 65535]. First 3 bits will be empty.\n+    static final int PREFIX_LENGTH = 2; // [0, 65535]. First 6 bits will be empty.\n     @VisibleForTesting\n     static final Charset ENCODING = StandardCharsets.UTF_8;\n \n-    @Override\n-    public ByteBuffer serialize(@Nullable String keyFamily) {\n-        ByteBuffer result;\n+    /**\n+     * Serializes the given Key Family into a new {@link ByteBuf} with the following format:\n+     * - Bytes [0, 2): Length of UTF8-encoded Key Family (0 if Key Family is null). (Value is L)\n+     * - Bytes [2, 2+L): UTF8-encoded Key Family.\n+     *\n+     * @param keyFamily Key Family to serialize.\n+     * @return A new {@link ByteBuf}. If Key Family Length is non-zero, this will likely be a composite {@link ByteBuf}.\n+     * This buffer will have {@link ByteBuf#readerIndex()} set to 0 and {@link ByteBuf#writerIndex()} set to the end.\n+     * @throws IllegalArgumentException If the UTF8-encoded Key Family exceeds {@link #MAX_KEY_FAMILY_LENGTH}.\n+     */\n+    ByteBuf serialize(@Nullable String keyFamily) {\n+        ByteBuf prefix = Unpooled.wrappedBuffer(new byte[PREFIX_LENGTH]);\n         if (keyFamily == null || keyFamily.length() == 0) {\n-            result = ByteBuffer.allocate(PREFIX_LENGTH); // Prefix is 00, which is the length of the Key Family\n+            prefix.setShort(0, 0);\n+            return prefix; // Prefix is 00, which is the length of the Key Family\n         } else {\n             ByteBuffer s = ENCODING.encode(keyFamily);\n             Preconditions.checkArgument(s.remaining() <= MAX_KEY_FAMILY_LENGTH,\n                     \"KeyFamily must have a %s encoding length of at most %s bytes; actual %s.\", ENCODING.name(), MAX_KEY_FAMILY_LENGTH, s.remaining());\n-            result = ByteBuffer.allocate(PREFIX_LENGTH + s.remaining());\n-            result.putShort((short) s.remaining());\n-            result.put(s);\n+            prefix.setShort(0, s.remaining());\n+            return Unpooled.wrappedBuffer(prefix, Unpooled.wrappedBuffer(s));\n         }\n-\n-        return (ByteBuffer) result.position(0);\n     }\n \n-    @Override\n-    public String deserialize(ByteBuffer serializedValue) {\n-        if (serializedValue.remaining() < PREFIX_LENGTH) {\n-            throw new SerializationException(String.format(\"At least %d bytes required, given %d.\", PREFIX_LENGTH, serializedValue.remaining()));\n+    /**\n+     * Deserializes a Key Family serialized using {@link ByteBuf}.\n+     *\n+     * @param serializedValue A {@link ByteBuf}. Deserialization will begin from {@link ByteBuf#readerIndex()} and not\n+     *                        exceed {@link ByteBuf#readableBytes()}. When this method is complete, the {@link ByteBuf#readerIndex()}\n+     *                        will have advanced by the number of bytes read. See {@link #serialize} for format.\n+     * @return A String representing the Key Family. Returns null if the serialized Key Family length was 0 (which means\n+     * that serializing an empty string will also deserialize a null value).\n+     * @throws SerializationException If the given {@link ByteBuf} has insufficient bytes to accommodate a Key Family or\n+     *                                if the serialization cannot be parsed.\n+     */\n+    String deserialize(@NonNull ByteBuf serializedValue) {\n+        if (serializedValue.readableBytes() < PREFIX_LENGTH) {\n+            throw new SerializationException(String.format(\"At least %d bytes required, given %d.\", PREFIX_LENGTH, serializedValue.readableBytes()));\n         }\n \n-        int kfLength = serializedValue.getShort();\n+        int kfLength = serializedValue.readShort();\n         if (kfLength < 0 || kfLength > MAX_KEY_FAMILY_LENGTH) {\n             throw new SerializationException(String.format(\"Invalid Key Family Length. Expected between %d and %d, read %d.\",\n                     0, MAX_KEY_FAMILY_LENGTH, kfLength));\n-        } else if (serializedValue.remaining() < kfLength) {\n+        } else if (serializedValue.readableBytes() < kfLength) {\n             throw new SerializationException(String.format(\n-                    \"Insufficient bytes remaining in buffer. Expected at least %d, actual %d.\", kfLength, serializedValue.remaining()));\n+                    \"Insufficient bytes remaining in buffer. Expected at least %d, actual %d.\", kfLength, serializedValue.readableBytes()));\n         } else if (kfLength == 0) {\n             // No Key Family\n             return null;\n         } else {\n-            String result = ENCODING.decode((ByteBuffer) serializedValue.slice().limit(kfLength)).toString();\n-            serializedValue.position(serializedValue.position() + kfLength);\n+            String result = ENCODING.decode(serializedValue.nioBuffer(serializedValue.readerIndex(), kfLength)).toString();\n+            serializedValue.readerIndex(serializedValue.readerIndex() + kfLength);\n             return result;\n         }\n     }\n"}}, {"oid": "d6585e8a2d84c0d179597697e65c5d6e2d2ed029", "url": "https://github.com/pravega/pravega/commit/d6585e8a2d84c0d179597697e65c5d6e2d2ed029", "message": "KeyFamilySerializer uses ByteBuf. Also restricting max length to 1KB.\nFixed a potential bug in KeyValueTableIteratorState.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-29T15:37:26Z", "type": "commit"}, {"oid": "55e7215f63520ca075cf4e459dcb608d23e01ca6", "url": "https://github.com/pravega/pravega/commit/55e7215f63520ca075cf4e459dcb608d23e01ca6", "message": "Merge remote-tracking branch 'remotes/origin/feature-key-value-tables' into issue-4570-kvt-data-path\n\n# Conflicts:\n#\tcommon/src/main/java/io/pravega/common/util/ArrayView.java", "committedDate": "2020-04-30T17:12:20Z", "type": "commit"}, {"oid": "8ee6e620d025979a28d61f98f0b3a4cf67752780", "url": "https://github.com/pravega/pravega/commit/8ee6e620d025979a28d61f98f0b3a4cf67752780", "message": "Using LeakDetectorTestSuite.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-30T17:16:09Z", "type": "commit"}, {"oid": "4ae1a4f134fc23950bc982c7a3608f1f9b705482", "url": "https://github.com/pravega/pravega/commit/4ae1a4f134fc23950bc982c7a3608f1f9b705482", "message": "checkstyle\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-04-30T18:00:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzIxOQ==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r418733219", "bodyText": "Just to confirm, the tests pass if this is 1 right?", "author": "tkaitchuck", "createdAt": "2020-05-01T20:53:10Z", "path": "client/src/test/java/io/pravega/client/tables/impl/KeyValueTableTestBase.java", "diffHunk": "@@ -0,0 +1,597 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.client.tables.impl;\n+\n+import io.pravega.client.stream.Serializer;\n+import io.pravega.client.stream.impl.UTF8StringSerializer;\n+import io.pravega.client.tables.BadKeyVersionException;\n+import io.pravega.client.tables.IteratorItem;\n+import io.pravega.client.tables.IteratorState;\n+import io.pravega.client.tables.KeyValueTable;\n+import io.pravega.client.tables.TableEntry;\n+import io.pravega.client.tables.TableKey;\n+import io.pravega.client.tables.Version;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.test.common.AssertExtensions;\n+import io.pravega.test.common.LeakDetectorTestSuite;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiPredicate;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.AccessLevel;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Base test suite for anything testing {@link KeyValueTable}s. This covers core functionality for {@link KeyValueTable}s\n+ * and currently applies both to {@link KeyValueTableImplTests} (using mocked Controller and Segment Store) and\n+ * `io.pravega.test.integration.KeyValueTableImplTests` (using real Segment Store and Wire Protocol).\n+ */\n+public abstract class KeyValueTableTestBase extends LeakDetectorTestSuite {\n+    //region Members\n+\n+    protected static final String NULL_KEY_FAMILY = \"[NULL]\"; // Used for HashMap keys.\n+    protected static final Serializer<Integer> KEY_SERIALIZER = new IntegerSerializer();\n+    protected static final Serializer<String> VALUE_SERIALIZER = new UTF8StringSerializer();\n+    private static final int DEFAULT_SEGMENT_COUNT = 4;\n+    private static final int DEFAULT_KEY_FAMILY_COUNT = 100;\n+    private static final int DEFAULT_KEYS_PER_KEY_FAMILY = 10;\n+    @Getter(AccessLevel.PROTECTED)\n+    private List<String> keyFamilies;\n+\n+    //endregion\n+\n+    // Setup and configuration\n+\n+    @Before\n+    public void setup() throws Exception {\n+        int count = getKeyFamilyCount();\n+        this.keyFamilies = new ArrayList<>();\n+        this.keyFamilies.add(null); // No key family.\n+        for (int i = 0; i < count; i++) {\n+            this.keyFamilies.add(String.format(\"KF[%d]\", i));\n+        }\n+\n+        this.keyFamilies = Collections.unmodifiableList(this.keyFamilies);\n+    }\n+\n+    @Override\n+    protected int getThreadPoolSize() {\n+        return 3;", "originalCommit": "4ae1a4f134fc23950bc982c7a3608f1f9b705482", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjIyOA==", "url": "https://github.com/pravega/pravega/pull/4687#discussion_r418736228", "bodyText": "Yes they do. But the tests run somewhat faster with 3 given that at least in one implementation of this class we run the entire segment store.", "author": "andreipaduroiu", "createdAt": "2020-05-01T21:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczMzIxOQ=="}], "type": "inlineReview", "revised_code": null}]}