{"pr_number": 4958, "pr_title": "Issue 4927 deleteKeyValueTableTest fails for InMemoryKVTableStore when using KVTOperationContext", "pr_createdAt": "2020-07-22T12:05:47Z", "pr_url": "https://github.com/pravega/pravega/pull/4958", "timeline": [{"oid": "f5416e20b9a80e8fbd7f75f58fb7771cbefac84c", "url": "https://github.com/pravega/pravega/commit/f5416e20b9a80e8fbd7f75f58fb7771cbefac84c", "message": "fix for InMemoryKVTMetadataStore\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-22T11:50:43Z", "type": "commit"}, {"oid": "5b376c253ae7eb4edf6a5a2cff5ebcf4cfede41e", "url": "https://github.com/pravega/pravega/commit/5b376c253ae7eb4edf6a5a2cff5ebcf4cfede41e", "message": "Merge remote-tracking branch 'upstream/master' into issue-4927-deletekvtabletest-fix", "committedDate": "2020-07-22T11:54:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTE3OQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458749179", "bodyText": "why is this being changed? what was wrong with taking the kvt from the context?", "author": "shiveshr", "createdAt": "2020-07-22T12:19:18Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -57,20 +51,12 @@ KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n \n     @Override\n     public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        KeyValueTable kvt;", "originalCommit": "5b376c253ae7eb4edf6a5a2cff5ebcf4cfede41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTE5Nw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458869197", "bodyText": "There is no benefit in taking KVT from context in case of InMemoryStore as all data is already in memory.\nWhen using KVT from context, the KVTable object is available in the context though it is removed from the scope. Besides it has State=\"Deleting\" which causes the isDeleted() method to never compete.", "author": "pbelgundi", "createdAt": "2020-07-22T15:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxMTAwMw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r459511003", "bodyText": "what is the delete method doing? perhaps it should be implemented such that it marks the entry as deleted and removes the entry from the map.\nthat way context will be able to get the correct value as well.", "author": "shiveshr", "createdAt": "2020-07-23T14:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzMjMxNw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r459532317", "bodyText": "It should all fall in place once Scopes are implemented correctly in InMemoryKVTMetadataStore.", "author": "pbelgundi", "createdAt": "2020-07-23T15:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "94f21fb22c65430122a37fb87f6c6c2fe9f325cd", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 22202105d2..57d9959d34 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -35,28 +36,25 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     @GuardedBy(\"$lock\")\n     private final Map<String, Integer> deletedKVTables = new HashMap<>();\n \n-    @Setter\n-    @GuardedBy(\"$lock\")\n-    private Map<String, InMemoryScope> scopes = new HashMap<>();\n-\n+    private final InMemoryStreamMetadataStore streamStore;\n+    private final ScheduledExecutorService executor;\n \n-    public InMemoryKVTMetadataStore(Executor executor) {\n+    public InMemoryKVTMetadataStore(StreamMetadataStore streamStore, ScheduledExecutorService executor) {\n         super(new InMemoryHostIndex());\n+        this.streamStore = (InMemoryStreamMetadataStore) streamStore;\n+        this.executor = executor;\n     }\n \n     @Override\n-    KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        if (!scopes.containsKey(scope)) {\n-            return new InMemoryKVTable(scope, name);\n+    @Synchronized\n+    KeyValueTable newKeyValueTable(String scope, String name) {\n+        if (this.streamStore.getScopes().containsKey(scope)) {\n+            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);\n+            if (kvtScope.checkTableExists(name)) {\n+                return kvtScope.getKeyValueTable(name);\n+            }\n         }\n-        InMemoryScope kvtScope = scopes.get(scope);\n-        Optional<InMemoryKVTable> kvTable = kvtScope.getKVTableFromScope(name);\n-        return kvTable.orElse(new InMemoryKVTable(scope, name));\n+       return new InMemoryKVTable(scope, name);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458749773", "bodyText": "why is the check on scopes?\nshouldnt the check be on table.. if the table doesnt exist, create it.. else return an already created table.. and this should be concurrency protected.", "author": "shiveshr", "createdAt": "2020-07-22T12:20:22Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -57,20 +51,12 @@ KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n \n     @Override\n     public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        KeyValueTable kvt;\n-        if (context != null) {\n-            kvt = context.getKvTable();\n-            assert kvt.getScopeName().equals(scope);\n-            assert kvt.getName().equals(name);\n-        } else {\n-            if (!scopes.containsKey(scope)) {\n-                return new InMemoryKVTable(scope, name);\n-            }\n-            InMemoryScope kvtScope = scopes.get(scope);\n-            Optional<InMemoryKVTable> kvTable = kvtScope.getKVTableFromScope(name);\n-            kvt = kvTable.orElse(new InMemoryKVTable(scope, name));\n+        if (!scopes.containsKey(scope)) {", "originalCommit": "5b376c253ae7eb4edf6a5a2cff5ebcf4cfede41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MDA5Mg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458750092", "bodyText": "and why are we creating kvt object if the scope doesnt exist?\nthis logic seems incorrect.", "author": "shiveshr", "createdAt": "2020-07-22T12:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjIxMg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r459492212", "bodyText": "This was added because scopes created in StreamStore are not available inside KVTStore. Will fix this in the PR for issue #4960.", "author": "pbelgundi", "createdAt": "2020-07-23T14:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxMTc5Ng==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r459511796", "bodyText": "still, the condition being added here with scopes doesnt exist seems to be introducing an incorrectness. Perhaps we should fix 4960 first before we fix this.", "author": "shiveshr", "createdAt": "2020-07-23T14:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyNzQ2Mw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r459527463", "bodyText": "Sure. I can raise the PR for 4960 and merge this after that.", "author": "pbelgundi", "createdAt": "2020-07-23T15:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjI2Mg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r461462262", "bodyText": "Fixed as part of this PR.", "author": "pbelgundi", "createdAt": "2020-07-28T09:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "94f21fb22c65430122a37fb87f6c6c2fe9f325cd", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 22202105d2..57d9959d34 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -35,28 +36,25 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     @GuardedBy(\"$lock\")\n     private final Map<String, Integer> deletedKVTables = new HashMap<>();\n \n-    @Setter\n-    @GuardedBy(\"$lock\")\n-    private Map<String, InMemoryScope> scopes = new HashMap<>();\n-\n+    private final InMemoryStreamMetadataStore streamStore;\n+    private final ScheduledExecutorService executor;\n \n-    public InMemoryKVTMetadataStore(Executor executor) {\n+    public InMemoryKVTMetadataStore(StreamMetadataStore streamStore, ScheduledExecutorService executor) {\n         super(new InMemoryHostIndex());\n+        this.streamStore = (InMemoryStreamMetadataStore) streamStore;\n+        this.executor = executor;\n     }\n \n     @Override\n-    KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        if (!scopes.containsKey(scope)) {\n-            return new InMemoryKVTable(scope, name);\n+    @Synchronized\n+    KeyValueTable newKeyValueTable(String scope, String name) {\n+        if (this.streamStore.getScopes().containsKey(scope)) {\n+            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);\n+            if (kvtScope.checkTableExists(name)) {\n+                return kvtScope.getKeyValueTable(name);\n+            }\n         }\n-        InMemoryScope kvtScope = scopes.get(scope);\n-        Optional<InMemoryKVTable> kvTable = kvtScope.getKVTableFromScope(name);\n-        return kvTable.orElse(new InMemoryKVTable(scope, name));\n+       return new InMemoryKVTable(scope, name);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0ODQ5OA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458848498", "bodyText": "Remove executor from the argument list.", "author": "andreipaduroiu", "createdAt": "2020-07-22T14:46:14Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -40,14 +39,9 @@\n     @GuardedBy(\"$lock\")\n     private Map<String, InMemoryScope> scopes = new HashMap<>();\n \n-    private final AtomicInt96 counter;\n-\n-    private final Executor executor;\n \n     public InMemoryKVTMetadataStore(Executor executor) {", "originalCommit": "5b376c253ae7eb4edf6a5a2cff5ebcf4cfede41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2OTczNA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r458869734", "bodyText": "Ok. Sure.", "author": "pbelgundi", "createdAt": "2020-07-22T15:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjM4NQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r461462385", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-28T09:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0ODQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c91dd2d4ff9a113b86bfad2c116064cd210e0c1c", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 22202105d2..a06912e133 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -40,7 +40,7 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     private Map<String, InMemoryScope> scopes = new HashMap<>();\n \n \n-    public InMemoryKVTMetadataStore(Executor executor) {\n+    public InMemoryKVTMetadataStore() {\n         super(new InMemoryHostIndex());\n     }\n \n"}}, {"oid": "c91dd2d4ff9a113b86bfad2c116064cd210e0c1c", "url": "https://github.com/pravega/pravega/commit/c91dd2d4ff9a113b86bfad2c116064cd210e0c1c", "message": "code review comments fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-23T14:32:25Z", "type": "commit"}, {"oid": "94f21fb22c65430122a37fb87f6c6c2fe9f325cd", "url": "https://github.com/pravega/pravega/commit/94f21fb22c65430122a37fb87f6c6c2fe9f325cd", "message": "fix for 4960\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-27T16:23:46Z", "type": "commit"}, {"oid": "80cd37e34be7f190c263f4740f600050eda8ea30", "url": "https://github.com/pravega/pravega/commit/80cd37e34be7f190c263f4740f600050eda8ea30", "message": "removed commented code\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-27T16:25:07Z", "type": "commit"}, {"oid": "4a123a491187d8bc8ecd80a7e656653c74f4d444", "url": "https://github.com/pravega/pravega/commit/4a123a491187d8bc8ecd80a7e656653c74f4d444", "message": "merge from master\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-28T09:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462037220", "bodyText": "streamstore.getScopes is returning a map which is not synchronization protected in its access here..\ninstead expose a syncrhonized method on the stream store for getting the scope.", "author": "shiveshr", "createdAt": "2020-07-29T04:53:21Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -36,48 +36,44 @@\n     @GuardedBy(\"$lock\")\n     private final Map<String, Integer> deletedKVTables = new HashMap<>();\n \n-    @Setter\n-    @GuardedBy(\"$lock\")\n-    private Map<String, InMemoryScope> scopes = new HashMap<>();\n-\n-    private final AtomicInt96 counter;\n-\n-    private final Executor executor;\n+    private final InMemoryStreamMetadataStore streamStore;\n+    private final ScheduledExecutorService executor;\n \n-    public InMemoryKVTMetadataStore(Executor executor) {\n+    public InMemoryKVTMetadataStore(StreamMetadataStore streamStore, ScheduledExecutorService executor) {\n         super(new InMemoryHostIndex());\n+        this.streamStore = (InMemoryStreamMetadataStore) streamStore;\n         this.executor = executor;\n-        this.counter = new AtomicInt96();\n     }\n \n     @Override\n-    KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        KeyValueTable kvt;\n-        if (context != null) {\n-            kvt = context.getKvTable();\n-            assert kvt.getScopeName().equals(scope);\n-            assert kvt.getName().equals(name);\n-        } else {\n-            if (!scopes.containsKey(scope)) {\n-                return new InMemoryKVTable(scope, name);\n+    @Synchronized\n+    KeyValueTable newKeyValueTable(String scope, String name) {\n+        if (this.streamStore.getScopes().containsKey(scope)) {\n+            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);", "originalCommit": "4a123a491187d8bc8ecd80a7e656653c74f4d444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzI3NQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462373275", "bodyText": "Sure.", "author": "pbelgundi", "createdAt": "2020-07-29T15:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NTU1Nw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462895557", "bodyText": "fixed. returning an immutable map from StreamStore so there is no need for synchronization.", "author": "pbelgundi", "createdAt": "2020-07-30T10:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxOTU2MQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462919561", "bodyText": "creating an immutable map each time its accessed here is costly as it will make a copy.\ninstead you can use Collections.unmodifiableMap which actually creates a wrapper decoration on the map which prohibits any changes to the map", "author": "shiveshr", "createdAt": "2020-07-30T11:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjQyOA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462922428", "bodyText": "actually i dont see you returning an immutable map.\nimmutable map is one in which you cannot add/remove/replace any entries.\nsetting the field as final doesnt make it immutable, it just means that field cannot be assigned a different value. but the object that the field refers to can still be immutable, as is the case here.", "author": "shiveshr", "createdAt": "2020-07-30T11:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NDU4NA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462964584", "bodyText": "Changed as discussed.", "author": "pbelgundi", "createdAt": "2020-07-30T12:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 57d9959d34..66844fe9bd 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -48,13 +49,14 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     @Override\n     @Synchronized\n     KeyValueTable newKeyValueTable(String scope, String name) {\n-        if (this.streamStore.getScopes().containsKey(scope)) {\n-            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);\n-            if (kvtScope.checkTableExists(name)) {\n-                return kvtScope.getKeyValueTable(name);\n-            }\n-        }\n-       return new InMemoryKVTable(scope, name);\n+        boolean scopeExists = this.streamStore.scopeExists(name);\n+        if (scopeExists) {\n+               InMemoryScope kvtScope = this.streamStore.getScope(scope);\n+               if (kvtScope.checkTableExists(name)) {\n+                 return kvtScope.getKeyValueTable(name);\n+               }\n+          }\n+        return new InMemoryKVTable(scope, name);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzM0Nw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462037347", "bodyText": "same here.", "author": "shiveshr", "createdAt": "2020-07-29T04:53:45Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -36,48 +36,44 @@\n     @GuardedBy(\"$lock\")\n     private final Map<String, Integer> deletedKVTables = new HashMap<>();\n \n-    @Setter\n-    @GuardedBy(\"$lock\")\n-    private Map<String, InMemoryScope> scopes = new HashMap<>();\n-\n-    private final AtomicInt96 counter;\n-\n-    private final Executor executor;\n+    private final InMemoryStreamMetadataStore streamStore;\n+    private final ScheduledExecutorService executor;\n \n-    public InMemoryKVTMetadataStore(Executor executor) {\n+    public InMemoryKVTMetadataStore(StreamMetadataStore streamStore, ScheduledExecutorService executor) {\n         super(new InMemoryHostIndex());\n+        this.streamStore = (InMemoryStreamMetadataStore) streamStore;\n         this.executor = executor;\n-        this.counter = new AtomicInt96();\n     }\n \n     @Override\n-    KeyValueTable newKeyValueTable(String scope, String kvTableName) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n-        KeyValueTable kvt;\n-        if (context != null) {\n-            kvt = context.getKvTable();\n-            assert kvt.getScopeName().equals(scope);\n-            assert kvt.getName().equals(name);\n-        } else {\n-            if (!scopes.containsKey(scope)) {\n-                return new InMemoryKVTable(scope, name);\n+    @Synchronized\n+    KeyValueTable newKeyValueTable(String scope, String name) {\n+        if (this.streamStore.getScopes().containsKey(scope)) {\n+            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);\n+            if (kvtScope.checkTableExists(name)) {\n+                return kvtScope.getKeyValueTable(name);\n             }\n-            InMemoryScope kvtScope = scopes.get(scope);\n-            Optional<InMemoryKVTable> kvTable = kvtScope.getKVTableFromScope(name);\n-            kvt = kvTable.orElse(new InMemoryKVTable(scope, name));\n         }\n-        return kvt;\n+       return new InMemoryKVTable(scope, name);\n     }\n \n     @Override\n     public Scope newScope(String scopeName) {\n         return getScope(scopeName);\n     }\n \n+    @Override\n+    @Synchronized\n+    public KeyValueTable getKVTable(String scope, final String name, KVTOperationContext context) {\n+        if (this.streamStore.getScopes().containsKey(scope)) {\n+            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);", "originalCommit": "4a123a491187d8bc8ecd80a7e656653c74f4d444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NjkyNg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462896926", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-30T10:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NDY1NQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462964655", "bodyText": "changed as discussed.", "author": "pbelgundi", "createdAt": "2020-07-30T12:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 57d9959d34..66844fe9bd 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -48,13 +49,14 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     @Override\n     @Synchronized\n     KeyValueTable newKeyValueTable(String scope, String name) {\n-        if (this.streamStore.getScopes().containsKey(scope)) {\n-            InMemoryScope kvtScope = this.streamStore.getScopes().get(scope);\n-            if (kvtScope.checkTableExists(name)) {\n-                return kvtScope.getKeyValueTable(name);\n-            }\n-        }\n-       return new InMemoryKVTable(scope, name);\n+        boolean scopeExists = this.streamStore.scopeExists(name);\n+        if (scopeExists) {\n+               InMemoryScope kvtScope = this.streamStore.getScope(scope);\n+               if (kvtScope.checkTableExists(name)) {\n+                 return kvtScope.getKeyValueTable(name);\n+               }\n+          }\n+        return new InMemoryKVTable(scope, name);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzc2Mg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462037762", "bodyText": "you dont need to do CompletableFuture.completedFuture().thenApply.\nInstead you can compute the value and then do CompletableFuture.completedFuture(value)", "author": "shiveshr", "createdAt": "2020-07-29T04:55:14Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -98,20 +94,26 @@ public Scope newScope(String scopeName) {\n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkScopeExists(String scope) {\n-        return CompletableFuture.completedFuture(scopes.containsKey(scope));\n+        return Futures.completeOn(CompletableFuture.completedFuture(this.streamStore.getScopes().containsKey(scope)), executor);\n     }\n \n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkTableExists(String scopeName, String kvt) {\n-        return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName)).thenApply(scope -> scope.checkTableExists(kvt));\n+        return Futures.completeOn(checkScopeExists(scopeName).thenCompose(exists -> {\n+            if (exists) {\n+                return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName))", "originalCommit": "4a123a491187d8bc8ecd80a7e656653c74f4d444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NDcxNw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462374717", "bodyText": "sure. fixed.", "author": "pbelgundi", "createdAt": "2020-07-29T15:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2bc05f980ed3b6a9b17eea3dfa368b7fc2a1e1d0", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 57d9959d34..f529ce049c 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -102,8 +102,7 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     public CompletableFuture<Boolean> checkTableExists(String scopeName, String kvt) {\n         return Futures.completeOn(checkScopeExists(scopeName).thenCompose(exists -> {\n             if (exists) {\n-                return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName))\n-                        .thenApply(scope -> scope.checkTableExists(kvt));\n+                return CompletableFuture.completedFuture(((InMemoryScope) getScope(scopeName)).checkTableExists(kvt));\n             }\n             return CompletableFuture.completedFuture(Boolean.FALSE);\n         }), executor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzkwNA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462037904", "bodyText": "isnt scope.checkTableExists returning a future?\nif so, shouldnt this be thenCompose?", "author": "shiveshr", "createdAt": "2020-07-29T04:55:46Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -98,20 +94,26 @@ public Scope newScope(String scopeName) {\n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkScopeExists(String scope) {\n-        return CompletableFuture.completedFuture(scopes.containsKey(scope));\n+        return Futures.completeOn(CompletableFuture.completedFuture(this.streamStore.getScopes().containsKey(scope)), executor);\n     }\n \n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkTableExists(String scopeName, String kvt) {\n-        return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName)).thenApply(scope -> scope.checkTableExists(kvt));\n+        return Futures.completeOn(checkScopeExists(scopeName).thenCompose(exists -> {\n+            if (exists) {\n+                return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName))\n+                        .thenApply(scope -> scope.checkTableExists(kvt));", "originalCommit": "4a123a491187d8bc8ecd80a7e656653c74f4d444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Nzc0MQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462897741", "bodyText": "fixed", "author": "pbelgundi", "createdAt": "2020-07-30T10:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzNzkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2bc05f980ed3b6a9b17eea3dfa368b7fc2a1e1d0", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\nindex 57d9959d34..f529ce049c 100644\n--- a/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java\n\n@@ -102,8 +102,7 @@ public class InMemoryKVTMetadataStore extends AbstractKVTableMetadataStore {\n     public CompletableFuture<Boolean> checkTableExists(String scopeName, String kvt) {\n         return Futures.completeOn(checkScopeExists(scopeName).thenCompose(exists -> {\n             if (exists) {\n-                return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName))\n-                        .thenApply(scope -> scope.checkTableExists(kvt));\n+                return CompletableFuture.completedFuture(((InMemoryScope) getScope(scopeName)).checkTableExists(kvt));\n             }\n             return CompletableFuture.completedFuture(Boolean.FALSE);\n         }), executor);\n"}}, {"oid": "2bc05f980ed3b6a9b17eea3dfa368b7fc2a1e1d0", "url": "https://github.com/pravega/pravega/commit/2bc05f980ed3b6a9b17eea3dfa368b7fc2a1e1d0", "message": "code review comments addressed\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-30T10:11:54Z", "type": "commit"}, {"oid": "ab57828de594eda65479e05fae1f2e82d04f04f4", "url": "https://github.com/pravega/pravega/commit/ab57828de594eda65479e05fae1f2e82d04f04f4", "message": "Merge remote-tracking branch 'upstream/master' into issue-4927-deletekvtabletest-fix", "committedDate": "2020-07-30T10:19:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462920270", "bodyText": "this can be reverted.", "author": "shiveshr", "createdAt": "2020-07-30T11:04:47Z", "path": "controller/src/main/java/io/pravega/controller/store/InMemoryScope.java", "diffHunk": "@@ -41,7 +41,7 @@\n     private HashMap<String, Integer> streamsPositionMap;\n \n     @GuardedBy(\"$lock\")\n-    private TreeMap<String, InMemoryKVTable> kvTablesMap;\n+    private final TreeMap<String, InMemoryKVTable> kvTablesMap =  new TreeMap<String, InMemoryKVTable>();", "originalCommit": "ab57828de594eda65479e05fae1f2e82d04f04f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTA2Ng==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462965066", "bodyText": "I'd prefer to have it initialized here to avoid NPEs.", "author": "pbelgundi", "createdAt": "2020-07-30T12:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4OTc4Nw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464189787", "bodyText": "no i mean init in constructor", "author": "shiveshr", "createdAt": "2020-08-03T04:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5OTM3Mw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464199373", "bodyText": "Construction initialization is good for usecases where the values used in building the object need to be passed to the constructor. Initializing at the time of declaration also takes away the need to synchronize the constructor and I don't see any downsides with initializing it this way.", "author": "pbelgundi", "createdAt": "2020-08-03T05:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyOTc4NA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464229784", "bodyText": "no downside, just consistency as other objects are initialized in the constructor.\nAlso constructor is implicitly synchronized and you dont need to synchronize a constructor.", "author": "shiveshr", "createdAt": "2020-08-03T07:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5MzUyNA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464393524", "bodyText": "Ok.", "author": "pbelgundi", "createdAt": "2020-08-03T12:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDI3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDUzMg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462920532", "bodyText": "it is more consistent to initialize this in the contructor as all other fields are also initialized in the constructor.", "author": "shiveshr", "createdAt": "2020-07-30T11:05:15Z", "path": "controller/src/main/java/io/pravega/controller/store/InMemoryScope.java", "diffHunk": "@@ -57,7 +57,6 @@ public String getName() {\n     public CompletableFuture<Void> createScope() {\n         this.sortedStreamsInScope = new TreeMap<>(Integer::compare);\n         this.streamsPositionMap = new HashMap<>();\n-        this.kvTablesMap =  new TreeMap<String, InMemoryKVTable>();", "originalCommit": "ab57828de594eda65479e05fae1f2e82d04f04f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMTU5OQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462921599", "bodyText": "also, all other fields are non final. as we set them to null in deleteScope. though logically that doesnt really give us anything. but since that is the pattern being used for all other objects, i would suggest we keep the same pattern for this field too.", "author": "shiveshr", "createdAt": "2020-07-30T11:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NDI2OA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462964268", "bodyText": "I don't like the idea of having data members point to null values and initializing them upfront or in the constructor helps avoid NPEs", "author": "pbelgundi", "createdAt": "2020-07-30T12:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5MjE0MQ==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464192141", "bodyText": "we should never be accessing a \"deleted\" scope object.\nThe purpose of setting all fields in the scope object to null should not cause NPE. And if it does, it would point to a bug that should be fixed.", "author": "shiveshr", "createdAt": "2020-08-03T04:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5OTk2Mg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464199962", "bodyText": "Whenever possible, I'd want to avoid null references to class data members in the code, as a good coding practice...", "author": "pbelgundi", "createdAt": "2020-08-03T05:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMDUzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMDgyNw==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462930827", "bodyText": "kvTablesMap is guarded by $lock so add synchronized annotation for this method", "author": "shiveshr", "createdAt": "2020-07-30T11:27:30Z", "path": "controller/src/main/java/io/pravega/controller/store/InMemoryScope.java", "diffHunk": "@@ -175,4 +165,7 @@ public void refresh() {\n         return CompletableFuture.completedFuture(null);\n     }\n \n+    public KeyValueTable getKeyValueTable(String name) {", "originalCommit": "ab57828de594eda65479e05fae1f2e82d04f04f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTM2NA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462965364", "bodyText": "done", "author": "pbelgundi", "createdAt": "2020-07-30T12:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/InMemoryScope.java b/controller/src/main/java/io/pravega/controller/store/InMemoryScope.java\nindex b095f40185..03fe12d806 100644\n--- a/controller/src/main/java/io/pravega/controller/store/InMemoryScope.java\n+++ b/controller/src/main/java/io/pravega/controller/store/InMemoryScope.java\n\n@@ -165,6 +166,7 @@ public class InMemoryScope implements Scope {\n         return CompletableFuture.completedFuture(null);\n     }\n \n+    @Synchronized\n     public KeyValueTable getKeyValueTable(String name) {\n         return kvTablesMap.get(name);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNDA1Mg==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462934052", "bodyText": "please add synchronized here as well as this is reading the scopes map which is concurrency protected.", "author": "shiveshr", "createdAt": "2020-07-30T11:34:25Z", "path": "controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java", "diffHunk": "@@ -74,7 +75,7 @@ public InMemoryStreamMetadataStore(Executor executor) {\n     }\n \n     public Map<String, InMemoryScope> getScopes() {", "originalCommit": "ab57828de594eda65479e05fae1f2e82d04f04f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTQ1Ng==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r462965456", "bodyText": "removed this method as discussed.", "author": "pbelgundi", "createdAt": "2020-07-30T12:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNDA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java b/controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java\nindex 0e7f4f84f6..edd09fd05a 100644\n--- a/controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java\n+++ b/controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java\n\n@@ -74,8 +73,14 @@ public class InMemoryStreamMetadataStore extends AbstractStreamMetadataStore {\n         this.counter = new AtomicInt96();\n     }\n \n-    public Map<String, InMemoryScope> getScopes() {\n-        return Collections.unmodifiableMap(scopes);\n+    @Synchronized\n+    public InMemoryScope getScope(String scopeName) {\n+        return scopes.get(scopeName);\n+    }\n+\n+    @Synchronized\n+    public boolean scopeExists(String scopeName) {\n+        return scopes.containsKey(scopeName);\n     }\n \n     @Override\n"}}, {"oid": "b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "url": "https://github.com/pravega/pravega/commit/b6a42fac35a7e205b9024a0b1ba2e29ec167c565", "message": "code review changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-30T12:28:53Z", "type": "commit"}, {"oid": "ae5d9c2a0ff1769615524ade0d1c743c1e630f18", "url": "https://github.com/pravega/pravega/commit/ae5d9c2a0ff1769615524ade0d1c743c1e630f18", "message": "typo fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-30T16:11:03Z", "type": "commit"}, {"oid": "915eabb6926a77a92107fd931fe9b2a05ae9ce90", "url": "https://github.com/pravega/pravega/commit/915eabb6926a77a92107fd931fe9b2a05ae9ce90", "message": "fix test failure\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-30T16:43:56Z", "type": "commit"}, {"oid": "64d1c0d1ee5732346046613d742ba9c43acf942e", "url": "https://github.com/pravega/pravega/commit/64d1c0d1ee5732346046613d742ba9c43acf942e", "message": "checkstyle fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-07-30T16:50:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTk0MA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464351940", "bodyText": "is there a check that ensures that \"create\" is called on the scope object before it is used.\nthis is returning the scope object, but where does it get added to the store?", "author": "shiveshr", "createdAt": "2020-08-03T11:22:33Z", "path": "controller/src/main/java/io/pravega/controller/store/kvtable/InMemoryKVTMetadataStore.java", "diffHunk": "@@ -98,20 +97,25 @@ public Scope newScope(String scopeName) {\n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkScopeExists(String scope) {\n-        return CompletableFuture.completedFuture(scopes.containsKey(scope));\n+        return Futures.completeOn(CompletableFuture.completedFuture(this.streamStore.scopeExists(scope)), executor);\n     }\n \n     @Override\n     @Synchronized\n     public CompletableFuture<Boolean> checkTableExists(String scopeName, String kvt) {\n-        return CompletableFuture.completedFuture((InMemoryScope) getScope(scopeName)).thenApply(scope -> scope.checkTableExists(kvt));\n+        return Futures.completeOn(checkScopeExists(scopeName).thenCompose(exists -> {\n+            if (exists) {\n+                return CompletableFuture.completedFuture(((InMemoryScope) getScope(scopeName)).checkTableExists(kvt));\n+            }\n+            return CompletableFuture.completedFuture(Boolean.FALSE);\n+        }), executor);\n     }\n \n     @Override\n     @Synchronized\n     public Scope getScope(final String scopeName) {\n-        if (scopes.containsKey(scopeName)) {\n-            return scopes.get(scopeName);\n+        if (this.streamStore.scopeExists(scopeName)) {\n+            return this.streamStore.getScope(scopeName);\n         } else {\n             return new InMemoryScope(scopeName);", "originalCommit": "64d1c0d1ee5732346046613d742ba9c43acf942e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5NjY2Ng==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464396666", "bodyText": "This is implemented in same lines as similar method in InMemoryMetadataStore:\nhttps://github.com/pravega/pravega/blob/master/controller/src/main/java/io/pravega/controller/store/stream/InMemoryStreamMetadataStore.java#L117", "author": "pbelgundi", "createdAt": "2020-08-03T12:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMjc2OA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464802768", "bodyText": "yes, but it looks incorrect in both places. we need to see if getScope should return scope not found if the scope does not exist in the store.", "author": "shiveshr", "createdAt": "2020-08-04T05:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwOTM0NA==", "url": "https://github.com/pravega/pravega/pull/4958#discussion_r464809344", "bodyText": "I agree, but it may need significant code refactoring as there are multiple dependent methods that would break.\nFiled: #5021", "author": "pbelgundi", "createdAt": "2020-08-04T05:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTk0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "63a05891611f084a80cd3cd9d1e8a0bbffb161d8", "url": "https://github.com/pravega/pravega/commit/63a05891611f084a80cd3cd9d1e8a0bbffb161d8", "message": "Merge branch 'master' into issue-4927-deletekvtabletest-fix", "committedDate": "2020-08-04T05:58:38Z", "type": "commit"}, {"oid": "274225aeacca58430f15c4ec75e3d03ce8ae5a2e", "url": "https://github.com/pravega/pravega/commit/274225aeacca58430f15c4ec75e3d03ce8ae5a2e", "message": "Merge branch 'master' into issue-4927-deletekvtabletest-fix", "committedDate": "2020-08-05T02:04:49Z", "type": "commit"}, {"oid": "feeaa0f246343c68fc7af44226facbf2a15105b5", "url": "https://github.com/pravega/pravega/commit/feeaa0f246343c68fc7af44226facbf2a15105b5", "message": "Merge remote-tracking branch 'upstream/master' into issue-4927-deletekvtabletest-fix", "committedDate": "2020-08-06T09:02:19Z", "type": "commit"}, {"oid": "711770abe1e7da3cf98290cec3f7cf9923271c0b", "url": "https://github.com/pravega/pravega/commit/711770abe1e7da3cf98290cec3f7cf9923271c0b", "message": "code coverage\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>", "committedDate": "2020-08-06T09:07:46Z", "type": "commit"}, {"oid": "974a496439fe3db96ca9829a40db060c1189228c", "url": "https://github.com/pravega/pravega/commit/974a496439fe3db96ca9829a40db060c1189228c", "message": "Merge branch 'issue-4927-deletekvtabletest-fix' of https://github.com/pbelgundi/pravega into issue-4927-deletekvtabletest-fix", "committedDate": "2020-08-06T09:24:19Z", "type": "commit"}]}