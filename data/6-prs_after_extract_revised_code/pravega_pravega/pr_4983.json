{"pr_number": 4983, "pr_title": "Issue 4982: Fix batch calculation in client", "pr_createdAt": "2020-07-27T17:44:01Z", "pr_url": "https://github.com/pravega/pravega/pull/4983", "timeline": [{"oid": "fc7e328aef9a224c47a4d92bf3fa693f740352c8", "url": "https://github.com/pravega/pravega/commit/fc7e328aef9a224c47a4d92bf3fa693f740352c8", "message": "Fix calculation of appendsInBatch.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-07-27T14:59:34Z", "type": "commit"}, {"oid": "ecf2946cb0359c0110cfa7cf348ee843eaaa90b2", "url": "https://github.com/pravega/pravega/commit/ecf2946cb0359c0110cfa7cf348ee843eaaa90b2", "message": "Fixed test.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-07-28T15:42:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDAxOQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462444019", "bodyText": "If this test is failing something is wrong.", "author": "tkaitchuck", "createdAt": "2020-07-29T16:51:57Z", "path": "client/src/test/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerTest.java", "diffHunk": "@@ -68,7 +68,7 @@ public void testReasonableLowerBound() {\n                 tracker.recordAck(i-100);\n             }\n         }\n-        assertTrue(tracker.getAppendBlockSize() >= size * 50);", "originalCommit": "ecf2946cb0359c0110cfa7cf348ee843eaaa90b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNDcwMQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462604701", "bodyText": "As the calculation has slightly changed, it looks like the append block size for this test is a bit lower than 50x, but still pretty close to it (40x or more).", "author": "RaulGracia", "createdAt": "2020-07-29T21:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NjQ0NQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462666445", "bodyText": "Does 45 work?", "author": "tkaitchuck", "createdAt": "2020-07-30T00:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzM1OA==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r464127358", "bodyText": "Yes, changed.", "author": "RaulGracia", "createdAt": "2020-08-02T21:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c461b8cfc953b6a892e4e1a333954b3374d9fa4d", "chunk": "diff --git a/client/src/test/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerTest.java b/client/src/test/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerTest.java\nindex 784c0e88e..55d667e68 100644\n--- a/client/src/test/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerTest.java\n+++ b/client/src/test/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerTest.java\n\n@@ -68,7 +68,7 @@ public class AppendBatchSizeTrackerTest {\n                 tracker.recordAck(i-100);\n             }\n         }\n-        assertTrue(tracker.getAppendBlockSize() >= size * 40);\n+        assertTrue(tracker.getAppendBlockSize() >= size * 45);\n     }\n     \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDYwOQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462444609", "bodyText": "If the problem here is the max of 1 then why not remove that rather than deleting the value which means that BASE_TIME_NANOS cannot be configured?", "author": "tkaitchuck", "createdAt": "2020-07-29T16:52:55Z", "path": "client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java", "diffHunk": "@@ -89,8 +89,7 @@ public int getAppendBlockSize() {\n         }\n         double nanosPerAppend = nanosBetweenAppends.getCurrentValue();\n         double appendsInMaxBatchTime = Math.max(1.0, (MAX_BATCH_TIME_MILLIS * NANOS_PER_MILLI) / nanosPerAppend);\n-        double appendsInTime = Math.max(1.0, BASE_TIME_NANOS / nanosPerAppend);", "originalCommit": "ecf2946cb0359c0110cfa7cf348ee843eaaa90b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MTczMA==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462461730", "bodyText": "Done, I kept previous structure but changed appendsInTime to be effectively 0 by default, which should be the same as it was before.", "author": "RaulGracia", "createdAt": "2020-07-29T17:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c26d9e66e104cf8a1aa17fc7a1acc9e6fbe07029", "chunk": "diff --git a/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java b/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\nindex 3532181f5..6e20e01e0 100644\n--- a/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\n+++ b/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\n\n@@ -89,7 +89,8 @@ public class AppendBatchSizeTrackerImpl implements AppendBatchSizeTracker {\n         }\n         double nanosPerAppend = nanosBetweenAppends.getCurrentValue();\n         double appendsInMaxBatchTime = Math.max(1.0, (MAX_BATCH_TIME_MILLIS * NANOS_PER_MILLI) / nanosPerAppend);\n-        double appendsInBatch = MathHelpers.minMax(appendsOutstanding.getCurrentValue() * OUTSTANDING_FRACTION, 1.0, appendsInMaxBatchTime);\n+        double appendsInTime = Math.max(0.0, BASE_TIME_NANOS / nanosPerAppend);\n+        double appendsInBatch = MathHelpers.minMax(appendsOutstanding.getCurrentValue() * OUTSTANDING_FRACTION + appendsInTime, 1.0, appendsInMaxBatchTime);\n         int size = (int) (appendsInBatch * eventSize.getCurrentValue()) + BASE_SIZE;\n         return MathHelpers.minMax(size, 0, MAX_BATCH_SIZE);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDk3Mg==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462444972", "bodyText": "If 1 event is a problem, perhaps a batch size of 0 would be better in these cases. So maybe change this 1 to 0.", "author": "tkaitchuck", "createdAt": "2020-07-29T16:53:33Z", "path": "client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java", "diffHunk": "@@ -89,8 +89,7 @@ public int getAppendBlockSize() {\n         }\n         double nanosPerAppend = nanosBetweenAppends.getCurrentValue();\n         double appendsInMaxBatchTime = Math.max(1.0, (MAX_BATCH_TIME_MILLIS * NANOS_PER_MILLI) / nanosPerAppend);\n-        double appendsInTime = Math.max(1.0, BASE_TIME_NANOS / nanosPerAppend);\n-        double appendsInBatch = MathHelpers.minMax(appendsOutstanding.getCurrentValue() * OUTSTANDING_FRACTION + appendsInTime, 1.0, appendsInMaxBatchTime);", "originalCommit": "ecf2946cb0359c0110cfa7cf348ee843eaaa90b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNDAxMw==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462604013", "bodyText": "With the previous change, we do not need to touch this line.", "author": "RaulGracia", "createdAt": "2020-07-29T21:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NjYyNQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r462666625", "bodyText": "Yes, but only because your test sends the exact same event size every time. If there were some slight variation we would want this to be 0, otherwise we would have the same problem you observed.", "author": "tkaitchuck", "createdAt": "2020-07-30T00:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2MDI4OQ==", "url": "https://github.com/pravega/pravega/pull/4983#discussion_r464260289", "bodyText": "As I shown, the change you propose seems to do not have a big impact on latency, but the max throughput for small events is significantly reduced. For this reason, I would rather keep the algorithm in its current form (similar to what was before), as it has been tested as a good baseline in a variety of situations. We can address further improvements on it on separate PRs, as the purpose of this PR is only to solve the write latency problem for low event rates and multiple segments.", "author": "RaulGracia", "createdAt": "2020-08-03T08:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c26d9e66e104cf8a1aa17fc7a1acc9e6fbe07029", "chunk": "diff --git a/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java b/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\nindex 3532181f5..6e20e01e0 100644\n--- a/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\n+++ b/client/src/main/java/io/pravega/client/connection/impl/AppendBatchSizeTrackerImpl.java\n\n@@ -89,7 +89,8 @@ public class AppendBatchSizeTrackerImpl implements AppendBatchSizeTracker {\n         }\n         double nanosPerAppend = nanosBetweenAppends.getCurrentValue();\n         double appendsInMaxBatchTime = Math.max(1.0, (MAX_BATCH_TIME_MILLIS * NANOS_PER_MILLI) / nanosPerAppend);\n-        double appendsInBatch = MathHelpers.minMax(appendsOutstanding.getCurrentValue() * OUTSTANDING_FRACTION, 1.0, appendsInMaxBatchTime);\n+        double appendsInTime = Math.max(0.0, BASE_TIME_NANOS / nanosPerAppend);\n+        double appendsInBatch = MathHelpers.minMax(appendsOutstanding.getCurrentValue() * OUTSTANDING_FRACTION + appendsInTime, 1.0, appendsInMaxBatchTime);\n         int size = (int) (appendsInBatch * eventSize.getCurrentValue()) + BASE_SIZE;\n         return MathHelpers.minMax(size, 0, MAX_BATCH_SIZE);\n     }\n"}}, {"oid": "c4c4f0e3b28c5d0f481df90a332097377771024a", "url": "https://github.com/pravega/pravega/commit/c4c4f0e3b28c5d0f481df90a332097377771024a", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-07-29T16:55:46Z", "type": "commit"}, {"oid": "c26d9e66e104cf8a1aa17fc7a1acc9e6fbe07029", "url": "https://github.com/pravega/pravega/commit/c26d9e66e104cf8a1aa17fc7a1acc9e6fbe07029", "message": "Set appendsInTime effectively to 0 keeping existing structure.\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-07-29T17:19:11Z", "type": "commit"}, {"oid": "d42b8fd858e7a802eb2bd107496b570f9f08a743", "url": "https://github.com/pravega/pravega/commit/d42b8fd858e7a802eb2bd107496b570f9f08a743", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-07-30T07:53:59Z", "type": "commit"}, {"oid": "4f7c6e66c7eb6871a2d74c4b14c627c531ce6e0f", "url": "https://github.com/pravega/pravega/commit/4f7c6e66c7eb6871a2d74c4b14c627c531ce6e0f", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-08-02T15:06:43Z", "type": "commit"}, {"oid": "c461b8cfc953b6a892e4e1a333954b3374d9fa4d", "url": "https://github.com/pravega/pravega/commit/c461b8cfc953b6a892e4e1a333954b3374d9fa4d", "message": "Changed assertion in test as per PR feedback\n\nSigned-off-by: Ra\u00fal Gracia <raul.gracia@emc.com>", "committedDate": "2020-08-02T21:47:52Z", "type": "commit"}, {"oid": "9dbcfb0f589644b4fe7b4e55455ce34377493d83", "url": "https://github.com/pravega/pravega/commit/9dbcfb0f589644b4fe7b4e55455ce34377493d83", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-08-04T07:34:04Z", "type": "commit"}, {"oid": "c5c10a91a9bf704443ef02b2693eb1b42a04bfc1", "url": "https://github.com/pravega/pravega/commit/c5c10a91a9bf704443ef02b2693eb1b42a04bfc1", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-08-04T17:46:01Z", "type": "commit"}, {"oid": "ffbb3f9391307e5f3bf6a28df8d6605706645a5d", "url": "https://github.com/pravega/pravega/commit/ffbb3f9391307e5f3bf6a28df8d6605706645a5d", "message": "Merge branch 'master' into issue-4982-fix-batching", "committedDate": "2020-08-04T21:24:02Z", "type": "commit"}]}