{"pr_number": 4789, "pr_title": "Issue 4792: API stubs for supporting offset/version based TableSegment reads.", "pr_createdAt": "2020-05-13T16:37:53Z", "pr_url": "https://github.com/pravega/pravega/pull/4789", "timeline": [{"oid": "df6ddaa58fded6128bad5fc35ddcd1ec817a29d5", "url": "https://github.com/pravega/pravega/commit/df6ddaa58fded6128bad5fc35ddcd1ec817a29d5", "message": "Initial API proposal on offset based TableSegment reads.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T18:17:19Z", "type": "commit"}, {"oid": "1e4e548363b9d4b5fd627e402fdef73d32a6693e", "url": "https://github.com/pravega/pravega/commit/1e4e548363b9d4b5fd627e402fdef73d32a6693e", "message": "Fix misordered writes.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T20:54:44Z", "type": "commit"}, {"oid": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "url": "https://github.com/pravega/pravega/commit/f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "message": "Add basic unit tests for new WireCommands.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-12T21:33:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4ODA2OQ==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r424788069", "bodyText": "Maybe make these two different so we also check that order is preserved.", "author": "tkaitchuck", "createdAt": "2020-05-13T23:29:51Z", "path": "shared/protocol/src/test/java/io/pravega/shared/protocol/netty/WireCommandsTest.java", "diffHunk": "@@ -807,6 +807,24 @@ public void testTableEntriesIteratorItem() throws IOException {\n         testCommand(cmd);\n     }\n \n+    @Test\n+    public void testReadTableEntriesDelta() throws IOException {\n+        WireCommands.ReadTableEntriesDelta cmd = new WireCommands.ReadTableEntriesDelta(l, testString1, \"\", 1L, 100);\n+        testCommand(cmd);\n+    }\n+\n+    @Test\n+    public void testtableEntriesDeltaRead() throws IOException {\n+        List<Map.Entry<WireCommands.TableKey, WireCommands.TableValue>> entries = Arrays.asList(\n+                new SimpleImmutableEntry<>(new WireCommands.TableKey(buf, l), new WireCommands.TableValue(buf)),", "originalCommit": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "672a07692f3a654dd6d4615c914df412ccbe2d38", "chunk": "diff --git a/shared/protocol/src/test/java/io/pravega/shared/protocol/netty/WireCommandsTest.java b/shared/protocol/src/test/java/io/pravega/shared/protocol/netty/WireCommandsTest.java\nindex 3358dfa58a..31b6e67527 100644\n--- a/shared/protocol/src/test/java/io/pravega/shared/protocol/netty/WireCommandsTest.java\n+++ b/shared/protocol/src/test/java/io/pravega/shared/protocol/netty/WireCommandsTest.java\n\n@@ -817,7 +817,7 @@ public class WireCommandsTest extends LeakDetectorTestSuite {\n     public void testtableEntriesDeltaRead() throws IOException {\n         List<Map.Entry<WireCommands.TableKey, WireCommands.TableValue>> entries = Arrays.asList(\n                 new SimpleImmutableEntry<>(new WireCommands.TableKey(buf, l), new WireCommands.TableValue(buf)),\n-                new SimpleImmutableEntry<>(new WireCommands.TableKey(buf, l), new WireCommands.TableValue(buf)));\n+                new SimpleImmutableEntry<>(new WireCommands.TableKey(buf, l + 1), new WireCommands.TableValue(buf)));\n         WireCommands.TableEntries tableEntries = new WireCommands.TableEntries(entries);\n \n         WireCommands.TableEntriesDeltaRead cmd = new WireCommands.TableEntriesDeltaRead(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1NjY4Mg==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r424856682", "bodyText": "we should read this value only if it available.Else the OLDEST_COMPATIBLE_VERSION will change.", "author": "shrids", "createdAt": "2020-05-14T03:56:07Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1652,15 +1653,17 @@ public void writeFields(DataOutput out) throws IOException {\n             out.writeUTF(segment);\n             out.writeUTF(delegationToken == null ? \"\" : delegationToken);\n             tableEntries.writeFields(out);\n+            out.writeLong(tableSegmentOffset);\n         }\n \n         public static WireCommand readFrom(ByteBufInputStream in, int length) throws IOException {\n             long requestId = in.readLong();\n             String segment = in.readUTF();\n             String delegationToken = in.readUTF();\n             TableEntries entries = (TableEntries) TableEntries.readFrom(in, in.available());\n+            long tableSegmentOffset = in.readLong();", "originalCommit": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTk0Mg==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r425289942", "bodyText": "Correct. Check out for other examples in this file; there should be a few that followed the same pattern.", "author": "andreipaduroiu", "createdAt": "2020-05-14T16:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1NjY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MDMzNQ==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r425290335", "bodyText": "And if not provided, then set it to that negative value I mentioned in the comment above.", "author": "andreipaduroiu", "createdAt": "2020-05-14T16:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1NjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "672a07692f3a654dd6d4615c914df412ccbe2d38", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex ecd5111520..db861c7f81 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -1661,7 +1662,7 @@ public final class WireCommands {\n             String segment = in.readUTF();\n             String delegationToken = in.readUTF();\n             TableEntries entries = (TableEntries) TableEntries.readFrom(in, in.available());\n-            long tableSegmentOffset = in.readLong();\n+            long tableSegmentOffset = (in.available() > 0 ) ? in.readLong() : NULL_TABLE_SEGMENT_OFFSET;\n \n             return new UpdateTableEntries(requestId, segment, delegationToken, entries, tableSegmentOffset);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1Njc2OQ==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r424856769", "bodyText": "same as above.", "author": "shrids", "createdAt": "2020-05-14T03:56:27Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1730,7 +1735,9 @@ public static WireCommand readFrom(ByteBufInputStream in, int length) throws IOE\n             for (int i = 0; i < numberOfKeys; i++) {\n                 keys.add((TableKey) TableKey.readFrom(in, in.available()));\n             }\n-            return new RemoveTableKeys(requestId, segment, delegationToken, keys);\n+            long tableSegmentOffset = in.readLong();", "originalCommit": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "672a07692f3a654dd6d4615c914df412ccbe2d38", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex ecd5111520..db861c7f81 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -1735,7 +1736,7 @@ public final class WireCommands {\n             for (int i = 0; i < numberOfKeys; i++) {\n                 keys.add((TableKey) TableKey.readFrom(in, in.available()));\n             }\n-            long tableSegmentOffset = in.readLong();\n+            long tableSegmentOffset = (in.available() > 0 ) ? in.readLong() : NULL_TABLE_SEGMENT_OFFSET;\n \n             return new RemoveTableKeys(requestId, segment, delegationToken, keys, tableSegmentOffset);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTI2Mw==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r425289263", "bodyText": "Default this to something negative such as -1 or Long.MIN_VALUE. The contract will be that if we are provided a negative value, the update will be unconditioned (on the length of the segment). Otherwise (0 included), we'll condition the update on the table segment having the specified length.\nI would further suggest encoding this as a public constant in the wire command itself.", "author": "andreipaduroiu", "createdAt": "2020-05-14T16:55:42Z", "path": "controller/src/main/java/io/pravega/controller/server/SegmentHelper.java", "diffHunk": "@@ -403,7 +403,7 @@ private String getTransactionName(String scope, String stream, long segmentId, U\n         RawClient connection = new RawClient(ModelHelper.encode(uri), connectionFactory);\n         final long requestId = connection.getFlow().asLong();\n         WireCommands.UpdateTableEntries request = new WireCommands.UpdateTableEntries(requestId, tableName, delegationToken,\n-                new WireCommands.TableEntries(wireCommandEntries));\n+                new WireCommands.TableEntries(wireCommandEntries), 0L);", "originalCommit": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTQxMg==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r425289412", "bodyText": "Same with Remove below.", "author": "andreipaduroiu", "createdAt": "2020-05-14T16:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "672a07692f3a654dd6d4615c914df412ccbe2d38", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/server/SegmentHelper.java b/controller/src/main/java/io/pravega/controller/server/SegmentHelper.java\nindex 6886be004a..22225a97ac 100644\n--- a/controller/src/main/java/io/pravega/controller/server/SegmentHelper.java\n+++ b/controller/src/main/java/io/pravega/controller/server/SegmentHelper.java\n\n@@ -403,7 +403,7 @@ public class SegmentHelper implements AutoCloseable {\n         RawClient connection = new RawClient(ModelHelper.encode(uri), connectionFactory);\n         final long requestId = connection.getFlow().asLong();\n         WireCommands.UpdateTableEntries request = new WireCommands.UpdateTableEntries(requestId, tableName, delegationToken,\n-                new WireCommands.TableEntries(wireCommandEntries), 0L);\n+                new WireCommands.TableEntries(wireCommandEntries), WireCommands.NULL_TABLE_SEGMENT_OFFSET);\n \n         return sendRequest(connection, requestId, request)\n                 .thenApply(rpl -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5NTcwMQ==", "url": "https://github.com/pravega/pravega/pull/4789#discussion_r425295701", "bodyText": "Have this throw UnsupportedOperationException and add a comment that it will be implemented with\n#4677", "author": "andreipaduroiu", "createdAt": "2020-05-14T17:05:50Z", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2182,6 +2189,78 @@ public boolean isFailure() {\n         }\n     }\n \n+    @Data\n+    public static final class ReadTableEntriesDelta implements Request, WireCommand {\n+        final WireCommandType type = WireCommandType.READ_TABLE_ENTRIES_DELTA;\n+        final long requestId;\n+        final String segment;\n+        @ToString.Exclude\n+        final String delegationToken;\n+        final long fromVersion;\n+        final int suggestedEntryCount;\n+\n+        @Override\n+        public void process(RequestProcessor cp) {\n+\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(segment);\n+            out.writeUTF(delegationToken == null ? \"\" : delegationToken);\n+            out.writeLong(fromVersion);\n+            out.writeInt(suggestedEntryCount);\n+        }\n+\n+        public static WireCommand readFrom(ByteBufInputStream in, int length) throws IOException {\n+            long requestId = in.readLong();\n+            String segment = in.readUTF();\n+            String delegationToken = in.readUTF();\n+            long fromVersion = in.readLong();\n+            int suggestedEntryCount = in.readInt();\n+\n+            return new ReadTableEntriesDelta(requestId, segment, delegationToken, fromVersion, suggestedEntryCount);\n+        }\n+    }\n+\n+    @Data\n+    public static final class TableEntriesDeltaRead implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.TABLE_ENTRIES_DELTA_READ;\n+        final long requestId;\n+        final String segment;\n+        final TableEntries tableEntries;\n+        final boolean shouldClear;\n+        final boolean reachedEnd;\n+        final long lastVersion;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) {\n+", "originalCommit": "f5f07d793d7b2c9ed6986cdcdd8260553f335d02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "672a07692f3a654dd6d4615c914df412ccbe2d38", "chunk": "diff --git a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\nindex ecd5111520..db861c7f81 100644\n--- a/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n+++ b/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java\n\n@@ -2234,8 +2235,9 @@ public final class WireCommands {\n         final boolean reachedEnd;\n         final long lastVersion;\n \n+        // TODO: Will be implemented as apart of: https://github.com/pravega/pravega/issues/4677\n         @Override\n-        public void process(ReplyProcessor cp) {\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n \n         }\n \n"}}, {"oid": "672a07692f3a654dd6d4615c914df412ccbe2d38", "url": "https://github.com/pravega/pravega/commit/672a07692f3a654dd6d4615c914df412ccbe2d38", "message": "Add checks if a tableSegmentOffset was provided.\nCreates a constant value signifying no offset was provided.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>", "committedDate": "2020-05-14T19:34:49Z", "type": "commit"}, {"oid": "85d2ba3d13d42ef345f72ee84d169b87f3d9b8b0", "url": "https://github.com/pravega/pravega/commit/85d2ba3d13d42ef345f72ee84d169b87f3d9b8b0", "message": "Merge branch 'master' into issue-4677-offset-table-reads", "committedDate": "2020-05-18T14:31:13Z", "type": "commit"}]}