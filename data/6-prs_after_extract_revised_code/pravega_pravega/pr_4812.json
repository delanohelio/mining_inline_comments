{"pr_number": 4812, "pr_title": "Issue 4811: Replace object-json mapping library for JWT", "pr_createdAt": "2020-05-26T09:45:52Z", "pr_url": "https://github.com/pravega/pravega/pull/4812", "timeline": [{"oid": "d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f", "url": "https://github.com/pravega/pravega/commit/d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f", "message": "Replace Gson with Jackson\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>", "committedDate": "2020-05-26T09:40:34Z", "type": "commit"}, {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "url": "https://github.com/pravega/pravega/commit/023537f0a445c403c8ec3fb4242228f7c351c2ba", "message": "Fix a test, and prevent non-null properties from getting serialized\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>", "committedDate": "2020-05-26T11:21:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzM4Mg==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430387382", "bodyText": "ObjectMapper can be a singleton, you will save a few allocations and CPU cycles, as ObjectMapper caches metadata\nprivate static final ObjectMapper MAPPER = new ObjectMapper();", "author": "eolivelli", "createdAt": "2020-05-26T12:51:31Z", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {\n+            return new ObjectMapper().readValue(jsonReader, JwtBody.class);", "originalCommit": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDI3Ng==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524276", "bodyText": "Sure, that's a good idea. I've made the change in the latest commit I've pushed.", "author": "ravisharda", "createdAt": "2020-05-26T15:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "chunk": "diff --git a/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java b/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\nindex e13b0c81e..084a001d6 100644\n--- a/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\n+++ b/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\n\n@@ -17,7 +17,7 @@ import lombok.Getter;\n import lombok.Setter;\n import lombok.SneakyThrows;\n \n-import java.io.StringReader;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODIyMA==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430388220", "bodyText": "nit (this is only a test):\njwtBody.toString().getBytes(StandardCharsets.US_ASCII)", "author": "eolivelli", "createdAt": "2020-05-26T12:52:54Z", "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +31,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes()),", "originalCommit": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDU5NA==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524594", "bodyText": "Sounds good. Thanks. Fixed.", "author": "ravisharda", "createdAt": "2020-05-26T15:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "chunk": "diff --git a/common/src/test/java/io/pravega/common/security/JwtUtilsTest.java b/common/src/test/java/io/pravega/common/security/JwtUtilsTest.java\nindex 8e94b3434..8681b31dd 100644\n--- a/common/src/test/java/io/pravega/common/security/JwtUtilsTest.java\n+++ b/common/src/test/java/io/pravega/common/security/JwtUtilsTest.java\n\n@@ -33,7 +34,7 @@ public class JwtUtilsTest {\n         //     }\n         JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes()),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes(StandardCharsets.US_ASCII)),\n                 \"base64-encoded-signature\");\n \n         assertNull(JwtUtils.extractExpirationTime(token));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTIwNA==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430389204", "bodyText": "what about:\njson.getBytes(StandardCharsets-UTF-8)", "author": "eolivelli", "createdAt": "2020-05-26T12:54:28Z", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java", "diffHunk": "@@ -26,7 +24,7 @@\n      * @return a Base64 encoded JSON representing the specified {@code jwtBodyPart}\n      */\n     public static String toCompact(JwtBody jwtBodyPart) {\n-        String json = new Gson().toJson(jwtBodyPart);\n+        String json = jwtBodyPart.toString();\n         return Base64.getEncoder().encodeToString(json.getBytes());", "originalCommit": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDc1MA==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524750", "bodyText": "Fixed.", "author": "ravisharda", "createdAt": "2020-05-26T15:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "chunk": "diff --git a/test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java b/test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java\nindex 221d67ff5..83e811526 100644\n--- a/test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java\n+++ b/test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java\n\n@@ -25,7 +26,7 @@ public class JwtTestUtils {\n      */\n     public static String toCompact(JwtBody jwtBodyPart) {\n         String json = jwtBodyPart.toString();\n-        return Base64.getEncoder().encodeToString(json.getBytes());\n+        return Base64.getEncoder().encodeToString(json.getBytes(StandardCharsets.UTF_8));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzE1Nw==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430393157", "bodyText": "no need for a StringReader", "author": "eolivelli", "createdAt": "2020-05-26T13:00:33Z", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {", "originalCommit": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNTI3MA==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430525270", "bodyText": "yeah, fixed.", "author": "ravisharda", "createdAt": "2020-05-26T15:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "chunk": "diff --git a/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java b/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\nindex e13b0c81e..084a001d6 100644\n--- a/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\n+++ b/test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java\n\n@@ -17,7 +17,7 @@ import lombok.Getter;\n import lombok.Setter;\n import lombok.SneakyThrows;\n \n-import java.io.StringReader;\n+import java.nio.charset.StandardCharsets;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzYzNw==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430393637", "bodyText": "can this 'toString()' return a null value ?", "author": "eolivelli", "createdAt": "2020-05-26T13:01:16Z", "path": "test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java", "diffHunk": "@@ -25,15 +24,13 @@ public void testSerialize() {\n                 .issuedAtTime(Instant.now().getEpochSecond())\n                 .expirationTime(Instant.now().plusSeconds(50).getEpochSecond())\n                 .build();\n-\n-        String json = new Gson().toJson(jwtBody);\n-        assertNotNull(json);\n+        assertNotNull(jwtBody.toString());", "originalCommit": "023537f0a445c403c8ec3fb4242228f7c351c2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNTEyMQ==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430525121", "bodyText": "I've modified the assertions to make them more relevant, given the change.", "author": "ravisharda", "createdAt": "2020-05-26T15:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "chunk": "diff --git a/test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java b/test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java\nindex 8c4c1c018..3c15c922f 100644\n--- a/test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java\n+++ b/test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java\n\n@@ -11,20 +11,23 @@ package io.pravega.test.common;\n \n import org.junit.Test;\n import java.time.Instant;\n+\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n public class JwtBodyTest {\n \n     @Test\n     public void testSerialize() {\n         JwtBody jwtBody = JwtBody.builder()\n-                .subject(\"subject\")\n+                .subject(\"testsubject\")\n                 .audience(\"segmentstore\")\n                 .issuedAtTime(Instant.now().getEpochSecond())\n                 .expirationTime(Instant.now().plusSeconds(50).getEpochSecond())\n                 .build();\n-        assertNotNull(jwtBody.toString());\n+        String jwtBodyJson = jwtBody.toString();\n+        assertTrue(jwtBodyJson.contains(\"testsubject\"));\n+        assertTrue(jwtBodyJson.contains(\"segmentstore\"));\n     }\n \n     @Test\n"}}, {"oid": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "url": "https://github.com/pravega/pravega/commit/27f2b04a7dcc913c347c13fff2fbf626bf118183", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>", "committedDate": "2020-05-26T15:55:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNjgyMQ==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430836821", "bodyText": "StandardCharsets.UTF8", "author": "shrids", "createdAt": "2020-05-27T03:26:23Z", "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +32,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes(StandardCharsets.US_ASCII)),", "originalCommit": "27f2b04a7dcc913c347c13fff2fbf626bf118183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzODU4Mw==", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430838583", "bodyText": "Since ASCII is a subset of UTF-8 and every ASCII text is also a UTF-8 text, and we use only ASCII characters in this particular test, I think it should be OK to use the specified charset.", "author": "ravisharda", "createdAt": "2020-05-27T03:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNjgyMQ=="}], "type": "inlineReview", "revised_code": null}]}