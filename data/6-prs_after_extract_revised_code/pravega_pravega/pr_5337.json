{"pr_number": 5337, "pr_title": "Issue 5320: Metrics and Stats Reporting Optimizations", "pr_createdAt": "2020-11-16T16:24:10Z", "pr_url": "https://github.com/pravega/pravega/pull/5337", "timeline": [{"oid": "835a40c973171a44bc9343f34d99f88aa815b1c1", "url": "https://github.com/pravega/pravega/commit/835a40c973171a44bc9343f34d99f88aa815b1c1", "message": "Trying to optimize SegmentStatsRecorder.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-12T01:21:47Z", "type": "commit"}, {"oid": "a638ad41170fa03855e05fb6e5fe0505981a4ce4", "url": "https://github.com/pravega/pravega/commit/a638ad41170fa03855e05fb6e5fe0505981a4ce4", "message": "SimpleCache.\nDynamicLoggerImpl rework\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-13T02:17:05Z", "type": "commit"}, {"oid": "a70879c02875dd8cc6f88f4049bb23c3b8c72103", "url": "https://github.com/pravega/pravega/commit/a70879c02875dd8cc6f88f4049bb23c3b8c72103", "message": "Not using String.format in ContainerMetadataUpdateTransaction constructor.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-13T16:00:54Z", "type": "commit"}, {"oid": "18e8ec2c0302665c9b399aabe12d1aeb4c770b04", "url": "https://github.com/pravega/pravega/commit/18e8ec2c0302665c9b399aabe12d1aeb4c770b04", "message": "SimpleCache: Using Duration as time in constructor.\nUnit tests for SimpleCache. Many bug fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-14T00:18:12Z", "type": "commit"}, {"oid": "ce359318655f5223e742986bc9cca12c30f71b7f", "url": "https://github.com/pravega/pravega/commit/ce359318655f5223e742986bc9cca12c30f71b7f", "message": "CacheMetrics uses Counters as opposed from DynamicLogger.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-14T00:48:46Z", "type": "commit"}, {"oid": "5f781cd3b48264d6f0b8090955dda182671ff957", "url": "https://github.com/pravega/pravega/commit/5f781cd3b48264d6f0b8090955dda182671ff957", "message": "Moved some metrics over to Counters (from DynamicLoggers).\n\nFixed a bug in DynamicLoggerImpl.updateCounterValue.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-14T01:07:33Z", "type": "commit"}, {"oid": "ed4517f14f50e544f22d91d9e8ddddabbddc557b", "url": "https://github.com/pravega/pravega/commit/ed4517f14f50e544f22d91d9e8ddddabbddc557b", "message": "ContainerMetrics switched from DynamicLogger to Meter.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-15T02:08:49Z", "type": "commit"}, {"oid": "238a97a99b067e5dd97ab45448150de256846a77", "url": "https://github.com/pravega/pravega/commit/238a97a99b067e5dd97ab45448150de256846a77", "message": "BookKeeperMetrics and TableSegmentStatsRecorderImpl moved off DynamicLogger onto Counters and Metrics.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-15T02:32:57Z", "type": "commit"}, {"oid": "48464c48071cc5561a88bb9e4f5d354ff8da9877", "url": "https://github.com/pravega/pravega/commit/48464c48071cc5561a88bb9e4f5d354ff8da9877", "message": "Moved some SegmentStatsRecorderImpl off DynamicLogger.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-15T02:52:16Z", "type": "commit"}, {"oid": "8f9d05f4af8a0e98aa6b7a848c446d6937842bd8", "url": "https://github.com/pravega/pravega/commit/8f9d05f4af8a0e98aa6b7a848c446d6937842bd8", "message": "Moved some SegmentStatsRecorderImpl off DynamicLogger.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-15T03:58:09Z", "type": "commit"}, {"oid": "fa9b8aee8d9e5aed60b46328f13d624b6e519f7a", "url": "https://github.com/pravega/pravega/commit/fa9b8aee8d9e5aed60b46328f13d624b6e519f7a", "message": "Merge remote-tracking branch 'origin/master' into issue-5320-optimize", "committedDate": "2020-11-16T16:23:06Z", "type": "commit"}, {"oid": "81453cb1c555b3ffe0726f20a9c5210223621d46", "url": "https://github.com/pravega/pravega/commit/81453cb1c555b3ffe0726f20a9c5210223621d46", "message": "Simplified SegmentStatsRecorderTest.\nReduced MetricsConfig.DYNAMIC_CACHE_SIZE to 100K (down from 10M).\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-16T16:58:49Z", "type": "commit"}, {"oid": "8caeffec2765693a5c4879bb190375fae645f39f", "url": "https://github.com/pravega/pravega/commit/8caeffec2765693a5c4879bb190375fae645f39f", "message": "AppendProcessorAdapter executes callbacks async.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-16T21:50:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3NjQ1MA==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r524876450", "bodyText": "Please be aware a min priority thread can be starved.", "author": "tkaitchuck", "createdAt": "2020-11-17T04:26:06Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/stat/AutoScaleMonitor.java", "diffHunk": "@@ -34,14 +34,14 @@\n     @VisibleForTesting\n     public AutoScaleMonitor(@NonNull StreamSegmentStore store, @NonNull EventStreamClientFactory clientFactory,\n                             @NonNull AutoScalerConfig configuration) {\n-        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(configuration.getThreadPoolSize(), \"auto-scaler\");\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(configuration.getThreadPoolSize(), \"auto-scaler\", Thread.MIN_PRIORITY);", "originalCommit": "8caeffec2765693a5c4879bb190375fae645f39f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIyMjQwNA==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525222404", "bodyText": "Fully aware of that. But calculating and generating autoscale metrics is of less importance than ingesting data itself. If we reach a situation where our CPUs are fully loaded, then we need to prioritize ingestion over this.\nThis CPU is mostly used for AutoScaleMonitor/Processor and SegmentStatsImpl cache cleanup and writing events to the Controller's auto scale stream.\nIn my local tests I have found this thread pool to take up considerable CPU. That is likely because, previously, the code in SegmentStatsRecorderImpl was executing one callback per Store append. Now that I've batched them together this should be less of a concern.", "author": "andreipaduroiu", "createdAt": "2020-11-17T15:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3NjQ1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NDU0MQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r524884541", "bodyText": "Is this being properly closed everywhere? (This is hard to check outside of an IDE)", "author": "tkaitchuck", "createdAt": "2020-11-17T04:57:21Z", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/cache/CacheMetrics.java", "diffHunk": "@@ -10,28 +10,41 @@\n package io.pravega.segmentstore.storage.cache;\n \n import io.pravega.shared.MetricsNames;\n-import io.pravega.shared.metrics.DynamicLogger;\n+import io.pravega.shared.metrics.Counter;\n import io.pravega.shared.metrics.MetricsProvider;\n+import io.pravega.shared.metrics.StatsLogger;\n \n /**\n- * Metrics for {@link CacheStorage}\n+ * Metrics for {@link DirectMemoryCache}.\n  */\n-final class CacheMetrics {\n-    private static final DynamicLogger DYNAMIC_LOGGER = MetricsProvider.getDynamicLogger();\n+final class CacheMetrics implements AutoCloseable {", "originalCommit": "8caeffec2765693a5c4879bb190375fae645f39f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxOTkxOQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525219919", "bodyText": "Yes. It's only used in DirectMemoryCache and I added a metrics.close when closing it.", "author": "andreipaduroiu", "createdAt": "2020-11-17T14:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NDU0MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "de82857b287949cdd884755ee26cd3b26d9b821b", "url": "https://github.com/pravega/pravega/commit/de82857b287949cdd884755ee26cd3b26d9b821b", "message": "Merge branch 'master' into issue-5320-optimize", "committedDate": "2020-11-17T14:57:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4Njk5NQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r524486995", "bodyText": "Please, add some description of this public class.", "author": "RaulGracia", "createdAt": "2020-11-16T18:34:18Z", "path": "common/src/main/java/io/pravega/common/util/SimpleCache.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.util;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.time.Duration;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+import javax.annotation.concurrent.ThreadSafe;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+@ThreadSafe\n+@Slf4j\n+public class SimpleCache<KeyT, ValueT> {", "originalCommit": "81453cb1c555b3ffe0726f20a9c5210223621d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NDMwMQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525384301", "bodyText": "Good catch. I totally forgot about this aspect.", "author": "andreipaduroiu", "createdAt": "2020-11-17T18:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4Njk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1429d81c88a018849f23ca82b234efa47336032e", "chunk": "diff --git a/common/src/main/java/io/pravega/common/util/SimpleCache.java b/common/src/main/java/io/pravega/common/util/SimpleCache.java\nindex 6f77016d8..94f4dce9f 100644\n--- a/common/src/main/java/io/pravega/common/util/SimpleCache.java\n+++ b/common/src/main/java/io/pravega/common/util/SimpleCache.java\n\n@@ -30,6 +30,23 @@ import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n \n+/**\n+ * Lightweight, thread-safe, key-value pair cache built on top of Java {@link HashMap} that supports eviction based on\n+ * a maximum size or last-access-time.\n+ *\n+ * Eviction of items is triggered by one of the following:\n+ * - Invoking {@link #cleanUp()}.\n+ * - Invoking {@link #putIfAbsent}, {@link #put} or {@link #get} for a Key that has expired or if the {@link #size()}\n+ * of the cache has exceeded {@link #getMaxSize()}.\n+ *\n+ * Every item access (upon insertion, updating or retrieval) will update the \"last-access-time\" of that item to the current\n+ * time. Upon eviction, items will be evicted beginning with the least-accessed one (i.e, the ones that have not been used\n+ * recently), in order of access time (oldest items first). Every eviction event will remove all expired items and any\n+ * unexpired items as needed if {@link #size()} exceeds {@link #getMaxSize()}.\n+ *\n+ * @param <KeyT>   Key Type.\n+ * @param <ValueT> Value Type.\n+ */\n @ThreadSafe\n @Slf4j\n public class SimpleCache<KeyT, ValueT> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4ODcxMQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r524488711", "bodyText": "Are we using Guava caches in other places of the Segment Store? It would be great to widespread the use of this effort within the codebase (even the Controller uses Guava cache).", "author": "RaulGracia", "createdAt": "2020-11-16T18:37:10Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/stat/AutoScaleProcessor.java", "diffHunk": "@@ -60,10 +56,9 @@\n     private static final long TEN_MINUTES = Duration.ofMinutes(10).toMillis();\n     private static final long TWENTY_MINUTES = Duration.ofMinutes(20).toMillis();\n     private static final int MAX_CACHE_SIZE = 1000000;\n-    private static final int INITIAL_CAPACITY = 1000;\n \n     private final EventStreamClientFactory clientFactory;\n-    private final Cache<String, Pair<Long, Long>> cache;\n+    private final SimpleCache<String, Pair<Long, Long>> cache;", "originalCommit": "81453cb1c555b3ffe0726f20a9c5210223621d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NDE2MA==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525384160", "bodyText": "From what I could measure, Guava cache has a significant overhead due to it doing more work. So it makes sense to keep it for those situations where the value to be cached is expensive to retrieve or compute (i.e., requires I/O). However, for small values which are easy to recalculate, it had too much overhead, hence the SimpleCache which is faster.\nAFAIK, there aren't any other places where Guava Cache is used. SLTS uses it, but in that case it's for one of those expensive values.", "author": "andreipaduroiu", "createdAt": "2020-11-17T18:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4ODcxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMTI5OQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525231299", "bodyText": "If we do not \"freeze\" these counters, are these metrics going to be reported even the segment is not there anymore?", "author": "RaulGracia", "createdAt": "2020-11-17T15:11:10Z", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/stat/TableSegmentStatsRecorderImpl.java", "diffHunk": "@@ -67,57 +69,42 @@ public void close() {\n \n     @Override\n     public void createTableSegment(String tableSegmentName, Duration elapsed) {\n-        getCreateSegment().reportSuccessEvent(elapsed);\n+        this.createSegment.reportSuccessEvent(elapsed);\n     }\n \n     @Override\n     public void deleteTableSegment(String tableSegmentName, Duration elapsed) {\n-        getDeleteSegment().reportSuccessEvent(elapsed);\n-        String[] segmentTags = segmentTags(tableSegmentName);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_UPDATE_CONDITIONAL, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_UPDATE, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_REMOVE_CONDITIONAL, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_REMOVE, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_GET, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_ITERATE_KEYS, segmentTags);\n-        getDynamicLogger().freezeCounter(MetricsNames.TABLE_SEGMENT_ITERATE_ENTRIES, segmentTags);\n+        this.deleteSegment.reportSuccessEvent(elapsed);", "originalCommit": "de82857b287949cdd884755ee26cd3b26d9b821b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NTcyOQ==", "url": "https://github.com/pravega/pravega/pull/5337#discussion_r525385729", "bodyText": "I completely removed these metrics. We were reporting both global metrics and per-segment metrics. However this seems to be overkill, especially for Table Segments. To avoid having to do unnecessary work, I decided to only keep the global metrics and get rid of the per-segment ones. Only the per-segment ones required DynamicLogger, and the other ones are properly closed when this class is closed.\nFYI, \"Freezing\" is only needed for Dynamic Loggers. The \"non-dynamic\" ones should be closed when they are no longer needed.", "author": "andreipaduroiu", "createdAt": "2020-11-17T18:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzMTI5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1429d81c88a018849f23ca82b234efa47336032e", "url": "https://github.com/pravega/pravega/commit/1429d81c88a018849f23ca82b234efa47336032e", "message": "Javadoc.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>", "committedDate": "2020-11-17T18:26:56Z", "type": "commit"}, {"oid": "9a737e6bde7cc79b2a36a3d2335e3fed37516d9d", "url": "https://github.com/pravega/pravega/commit/9a737e6bde7cc79b2a36a3d2335e3fed37516d9d", "message": "Merge remote-tracking branch 'ap/issue-5320-optimize' into issue-5320-optimize", "committedDate": "2020-11-17T18:27:02Z", "type": "commit"}, {"oid": "3da8ebf2ffccfeaf184263934c9ac0f78f34c43a", "url": "https://github.com/pravega/pravega/commit/3da8ebf2ffccfeaf184263934c9ac0f78f34c43a", "message": "Merge branch 'master' into issue-5320-optimize", "committedDate": "2020-11-18T16:44:18Z", "type": "commit"}]}