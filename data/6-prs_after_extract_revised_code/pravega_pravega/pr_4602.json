{"pr_number": 4602, "pr_title": "Issue 4601: (RollingStorage/ExtendedS3) S3 client consumes whole InputStream and causes java.lang.IllegalArgumentException", "pr_createdAt": "2020-03-09T21:06:06Z", "pr_url": "https://github.com/pravega/pravega/pull/4602", "timeline": [{"oid": "3559e6a5b1066a5714194b730e5cedeaaee82c79", "url": "https://github.com/pravega/pravega/commit/3559e6a5b1066a5714194b730e5cedeaaee82c79", "message": "Issue 4601 - RollingStorage now sends a BoundedInputStream for write because S3Client consumes entire InputStream.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-03-09T18:32:48Z", "type": "commit"}, {"oid": "7bc1d0882e339cb681d5d1ba945b3b70d66294d6", "url": "https://github.com/pravega/pravega/commit/7bc1d0882e339cb681d5d1ba945b3b70d66294d6", "message": "Issue 4601 - Fix S3ProxyImpl to match ECS bahavior for InvalidRange.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-03-09T20:37:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MzQ2Mw==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389963463", "bodyText": "Why remove this? This is exactly what we were trying to test for...", "author": "andreipaduroiu", "createdAt": "2020-03-09T21:10:11Z", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/StorageTestBase.java", "diffHunk": "@@ -406,8 +406,7 @@ private String getSegmentName(int id, String context) {\n             for (int j = 0; j < APPENDS_PER_SEGMENT; j++) {\n                 byte[] writeData = String.format(APPEND_FORMAT, segmentName, j).getBytes();\n \n-                // Append some garbage at the end to make sure we only write as much as instructed, and not the whole InputStream.\n-                val dataStream = new SequenceInputStream(new ByteArrayInputStream(writeData), new ByteArrayInputStream(extraData));\n+                val dataStream = new ByteArrayInputStream(writeData);", "originalCommit": "7bc1d0882e339cb681d5d1ba945b3b70d66294d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2ODc1MA==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389968750", "bodyText": "Now that we match mocks to match server behavior the test breaks.", "author": "sachin-j-joshi", "createdAt": "2020-03-09T21:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MzQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NzM0Nw==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389977347", "bodyText": "Given that these classes will get rewritten anyway with PDP-34 and that even right now, nobody accesses them directly except via RollingStorage, I think we should be fine with this change.", "author": "andreipaduroiu", "createdAt": "2020-03-09T21:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MzQ2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MTcyMQ==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389981721", "bodyText": "Here we have BoundedInputStream and the Length of Inputstream (or length to be written) - both are used to control the boundary? Not very clear about the relationship between the two - who's taking priority if the two values conflicting?", "author": "kevinhan88", "createdAt": "2020-03-09T21:50:31Z", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -321,7 +324,13 @@ public void write(SegmentHandle handle, long offset, InputStream data, int lengt\n             int writeLength = (int) Math.min(length - bytesWritten, h.getRollingPolicy().getMaxLength() - last.getLength());\n             assert writeLength > 0 : \"non-positive write length\";\n             long chunkOffset = offset + bytesWritten - last.getStartOffset();\n-            this.baseStorage.write(h.getActiveChunkHandle(), chunkOffset, data, writeLength);\n+\n+            // Use a BoundedInputStream to ensure that the underlying storage does not try to read more (or less) data\n+            // than we instructed it to. Invoking BoundedInputStream.close() will throw an IOException if baseStorage.write()\n+            // has not read all the bytes it was supposed to.", "originalCommit": "7bc1d0882e339cb681d5d1ba945b3b70d66294d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NzE2Ng==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389987166", "bodyText": "Actually the requirement is that we want them to be same. That's why we pass same writeLength on line 331 and 332.", "author": "sachin-j-joshi", "createdAt": "2020-03-09T22:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODA4OA==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389988088", "bodyText": "InputStreams do not have lengths. They have available() but that doesn't tell you much.\nYou need to pass the length to the API to tell it how much to write.\nYou need to (now) use a BoundedInputStream with a specific bound because some of those Tier 2 APIs do not respect that value. We want to make sure they do not under- or over-read.", "author": "andreipaduroiu", "createdAt": "2020-03-09T22:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDMwNQ==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389990305", "bodyText": "Then option 1 would be to create another method called \"writeWithBoundedInputStream\" to encapsulate this logic;\noption 2: at least add a runtime assert here to call out the logic.\noption 3: inside write() checks if the incoming InputStream is BoundedIS, if it is, honor the boundary defined by it.\nA method calling with overlapping input data is confusing hence error-prone.", "author": "kevinhan88", "createdAt": "2020-03-09T22:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MTcyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDgyNA==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389984824", "bodyText": "Can the 3 rollovers be reflected in the test code?", "author": "kevinhan88", "createdAt": "2020-03-09T21:57:54Z", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageTestBase.java", "diffHunk": "@@ -123,6 +124,37 @@ public void testWriteAfterHeaderMerge() throws Exception {\n         Assert.assertEquals(\"Unexpected number of chunks created.\", 1, readHandle.chunks().size());\n     }\n \n+    @Test\n+    public void testWriteOnRollOverBoundary() throws Exception {\n+        final String segmentName = \"Segment\";\n+        final int maxLength = 3; // Really small rolling length.\n+\n+        val seq1 = \"01234\";\n+        val seq2 = \"56789\";\n+        val totalWriteLength = seq1.length() + seq2.length();\n+\n+        @Cleanup\n+        val s = createStorage();\n+        s.initialize(1);\n+\n+        val writeHandle = s.create(segmentName, new SegmentRollingPolicy(maxLength), TIMEOUT)\n+                .thenCompose(v -> s.openWrite(segmentName)).join();\n+\n+        val byteInputStream1 = new ByteArrayInputStream(seq1.getBytes());\n+        val byteInputStream2 = new ByteArrayInputStream(seq2.getBytes());\n+\n+        val sequenceInputStream = new SequenceInputStream(byteInputStream1, byteInputStream2);\n+\n+        // This write should cause 3 rollovers.\n+        s.write(writeHandle, 0, sequenceInputStream, totalWriteLength, TIMEOUT).join();", "originalCommit": "7bc1d0882e339cb681d5d1ba945b3b70d66294d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NTk5Ng==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r389985996", "bodyText": "We write 10 bytes, with max rolling length set to 3.", "author": "sachin-j-joshi", "createdAt": "2020-03-09T22:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDYyMg==", "url": "https://github.com/pravega/pravega/pull/4602#discussion_r390004622", "bodyText": "Added additional checks.", "author": "sachin-j-joshi", "createdAt": "2020-03-09T22:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f83d454ccea823e45e3cebba71096f30b9f07892", "chunk": "diff --git a/segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageTestBase.java b/segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageTestBase.java\nindex 278ea5fba..5579b1fd2 100644\n--- a/segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageTestBase.java\n+++ b/segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageTestBase.java\n\n@@ -148,13 +148,27 @@ public abstract class RollingStorageTestBase extends StorageTestBase {\n         // This write should cause 3 rollovers.\n         s.write(writeHandle, 0, sequenceInputStream, totalWriteLength, TIMEOUT).join();\n \n+        // Check rollover actually happened as expected.\n+        RollingSegmentHandle checkHandle = (RollingSegmentHandle) s.openWrite(segmentName).join();\n+        val chunks = checkHandle.chunks();\n+        int numberOfRollovers = totalWriteLength / maxLength;\n+        Assert.assertEquals(numberOfRollovers + 1, chunks.size());\n+\n+        for (int i = 0; i < numberOfRollovers; i++) {\n+            Assert.assertEquals(maxLength * i, chunks.get(i).getStartOffset());\n+            Assert.assertEquals(maxLength, chunks.get(i).getLength());\n+        }\n+        // Last chunk has index == numberOfRollovers, as list is 0 based.\n+        Assert.assertEquals(numberOfRollovers * maxLength, chunks.get(numberOfRollovers).getStartOffset());\n+        Assert.assertEquals(1, chunks.get(numberOfRollovers).getLength());\n+\n+        // Now validate the contents written.\n         val readHandle = s.openRead(segmentName).join();\n         byte[] output = new byte[totalWriteLength];\n         s.read(readHandle, 0, output, 0, totalWriteLength, TIMEOUT).join();\n         Assert.assertEquals(seq1 + seq2, new String(output));\n     }\n \n-\n     @Override\n     protected void createSegment(String segmentName, Storage storage) {\n         storage.create(segmentName, new SegmentRollingPolicy(getSegmentRollingSize()), null).join();\n"}}, {"oid": "f83d454ccea823e45e3cebba71096f30b9f07892", "url": "https://github.com/pravega/pravega/commit/f83d454ccea823e45e3cebba71096f30b9f07892", "message": "Issue 4601 - Additional checks in unit tests to check proper rollover during test.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>", "committedDate": "2020-03-09T22:49:46Z", "type": "commit"}, {"oid": "e972bca5be0917b77553acdfaa7b589881b51e76", "url": "https://github.com/pravega/pravega/commit/e972bca5be0917b77553acdfaa7b589881b51e76", "message": "Merge branch 'master' into issue-4601-S3-Client-consumes-entire-inputstream", "committedDate": "2020-03-09T23:46:01Z", "type": "commit"}]}