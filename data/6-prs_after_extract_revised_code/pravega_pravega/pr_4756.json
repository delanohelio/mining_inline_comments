{"pr_number": 4756, "pr_title": "Issue 4736: Run scale workflow only if input matches the existing Epoch transition record", "pr_createdAt": "2020-04-29T13:46:49Z", "pr_url": "https://github.com/pravega/pravega/pull/4756", "timeline": [{"oid": "ad069a8c3904a7917ba9d2fc9d05585a4c70c922", "url": "https://github.com/pravega/pravega/commit/ad069a8c3904a7917ba9d2fc9d05585a4c70c922", "message": "Issue 4736\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-04-29T13:34:32Z", "type": "commit"}, {"oid": "1c6f33dcc6a1059a09d1eb2eea714267bfbcab93", "url": "https://github.com/pravega/pravega/commit/1c6f33dcc6a1059a09d1eb2eea714267bfbcab93", "message": "Merge branch 'master' into issue4736", "committedDate": "2020-04-30T02:36:16Z", "type": "commit"}, {"oid": "98698e6057389ce036fe052ce6402e34feb823e9", "url": "https://github.com/pravega/pravega/commit/98698e6057389ce036fe052ce6402e34feb823e9", "message": "Merge branch 'master' into issue4736", "committedDate": "2020-05-04T12:38:19Z", "type": "commit"}, {"oid": "1f716d0069d471014da4658cb2248124376c7040", "url": "https://github.com/pravega/pravega/commit/1f716d0069d471014da4658cb2248124376c7040", "message": "Merge branch 'master' into issue4736", "committedDate": "2020-05-05T05:34:34Z", "type": "commit"}, {"oid": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643", "url": "https://github.com/pravega/pravega/commit/847f5fbb9d43fd8e9513cb792f7412a24e2b8643", "message": "Merge branch 'master' into issue4736", "committedDate": "2020-05-08T04:33:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2Njc3OA==", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422766778", "bodyText": "Throwing a ConfilictException cause the writeBackPredicate of processScaleOpRequest to be true causing the event to written back, which effectively postpones the event, right ?", "author": "shrids", "createdAt": "2020-05-11T04:00:08Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");\n+                                return CompletableFuture.completedFuture(null);\n+                            } else {\n+                                log.info(\"Scale conflict.\");\n+                                throw new EpochTransitionOperationExceptions.ConflictException();", "originalCommit": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4MTUxOQ==", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422781519", "bodyText": "Yes. And that is the desired behaviour.", "author": "shiveshr", "createdAt": "2020-05-11T05:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2Njc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "07ec909ee9b1ec67895febbce61420d84c3073d1", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\nindex 8001c7344..fc50f1780 100644\n--- a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n+++ b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n\n@@ -121,8 +120,9 @@ public class ScaleOperationTask implements StreamTask<ScaleOpEvent> {\n                             } \n \n                             if (isManualScale) {\n-                                log.info(\"Found empty epoch transition record, scale processing is already completed.\");\n-                                return Futures.toVoid(future);\n+                                future = future.thenApply(x -> {\n+                                    throw new TaskExceptions.StartException(\"Scale Stream not started yet.\");\n+                                });\n                             } else {\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2NzMzNw==", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422767337", "bodyText": "The log can have additional data about the scale operation.", "author": "shrids", "createdAt": "2020-05-11T04:02:40Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");", "originalCommit": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ec909ee9b1ec67895febbce61420d84c3073d1", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\nindex 8001c7344..fc50f1780 100644\n--- a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n+++ b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n\n@@ -121,8 +120,9 @@ public class ScaleOperationTask implements StreamTask<ScaleOpEvent> {\n                             } \n \n                             if (isManualScale) {\n-                                log.info(\"Found empty epoch transition record, scale processing is already completed.\");\n-                                return Futures.toVoid(future);\n+                                future = future.thenApply(x -> {\n+                                    throw new TaskExceptions.StartException(\"Scale Stream not started yet.\");\n+                                });\n                             } else {\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2NzkwNg==", "url": "https://github.com/pravega/pravega/pull/4756#discussion_r422767906", "bodyText": "Scale conflict already causes a WARN message to be thrown in 79 line, Can we add more details to this log line?", "author": "shrids", "createdAt": "2020-05-11T04:05:10Z", "path": "controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java", "diffHunk": "@@ -126,7 +127,19 @@ public ScaleOperationTask(final StreamMetadataTasks streamMetadataTasks,\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n                             }\n-                        } \n+                        } else if (!RecordHelper.verifyRecordMatchesInput(scaleInput.getSegmentsToSeal(), scaleInput.getNewRanges(), isManualScale, record.getObject())) {\n+                            // ensure that we process the event only if the input matches the epoch transition record.\n+                            // if its manual scale and the event doesnt match, it means the scale has already completed. \n+                            // for auto scale, it means another scale is on going and just throw scale conflict exception \n+                            // which will result in this event being postponed. \n+                            if (isManualScale) {\n+                                log.info(\"Scale already completed.\");\n+                                return CompletableFuture.completedFuture(null);\n+                            } else {\n+                                log.info(\"Scale conflict.\");", "originalCommit": "847f5fbb9d43fd8e9513cb792f7412a24e2b8643", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ec909ee9b1ec67895febbce61420d84c3073d1", "chunk": "diff --git a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\nindex 8001c7344..fc50f1780 100644\n--- a/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n+++ b/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/ScaleOperationTask.java\n\n@@ -121,8 +120,9 @@ public class ScaleOperationTask implements StreamTask<ScaleOpEvent> {\n                             } \n \n                             if (isManualScale) {\n-                                log.info(\"Found empty epoch transition record, scale processing is already completed.\");\n-                                return Futures.toVoid(future);\n+                                future = future.thenApply(x -> {\n+                                    throw new TaskExceptions.StartException(\"Scale Stream not started yet.\");\n+                                });\n                             } else {\n                                 future = future.thenCompose(r -> streamMetadataStore.submitScale(scope, stream, scaleInput.getSegmentsToSeal(),\n                                         new ArrayList<>(scaleInput.getNewRanges()), scaleInput.getScaleTime(), record, context, executor));\n"}}, {"oid": "07ec909ee9b1ec67895febbce61420d84c3073d1", "url": "https://github.com/pravega/pravega/commit/07ec909ee9b1ec67895febbce61420d84c3073d1", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>", "committedDate": "2020-05-11T05:22:26Z", "type": "commit"}, {"oid": "6e1cd4b4e08df542462226f2f237017b99022d23", "url": "https://github.com/pravega/pravega/commit/6e1cd4b4e08df542462226f2f237017b99022d23", "message": "Merge branch 'issue4736' of https://github.com/shiveshr/pravega-1 into issue4736", "committedDate": "2020-05-11T05:23:12Z", "type": "commit"}]}