{"pr_number": 5176, "pr_title": "Issue 5171: (Bugfix) Ensure ByteStreamReader can read from deleted and recreated streams", "pr_createdAt": "2020-09-11T05:46:52Z", "pr_url": "https://github.com/pravega/pravega/pull/5176", "timeline": [{"oid": "f21329675de6905fbb3b5cd55fa05ce03c44ec67", "url": "https://github.com/pravega/pravega/commit/f21329675de6905fbb3b5cd55fa05ce03c44ec67", "message": "fix the segment fetch logic for readers.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-11T05:42:01Z", "type": "commit"}, {"oid": "4b846cc98ed33d699a0769e9f4853541ff44e3fb", "url": "https://github.com/pravega/pravega/commit/4b846cc98ed33d699a0769e9f4853541ff44e3fb", "message": "Stream recreate tests.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-11T06:29:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNDA2OA==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r486804068", "bodyText": "please use Java conventions for method names:\nverifyByteClientReadWrite", "author": "eolivelli", "createdAt": "2020-09-11T06:36:49Z", "path": "test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java", "diffHunk": "@@ -280,7 +281,47 @@ public void testBlockingRead() throws IOException {\n         writer.closeAndSeal();\n         assertEquals(-1, reader.read());\n     }\n-    \n+\n+    @Test(timeout = 30000)\n+    public void testRecreateStream() {\n+        String scope = \"ByteStreamTest\";\n+        String stream = \"stream\";\n+\n+        StreamConfiguration config = StreamConfiguration.builder().build();\n+        @Cleanup\n+        StreamManager streamManager = new StreamManagerImpl(controller, null);\n+        // create a scope\n+        assertTrue(\"Create scope failed\", streamManager.createScope(scope));\n+        // create a stream\n+        assertTrue(\"Create stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+        // delete the stream and recreate\n+        assertTrue(\"Seal stream operation failed\", streamManager.sealStream(scope, stream));\n+        assertTrue(\"Delete Stream operation failed\", streamManager.deleteStream(scope, stream));\n+        assertTrue(\"Recreate stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+    }\n+\n+    private void verify_byte_client_read_write(String scope, String stream) {", "originalCommit": "4b846cc98ed33d699a0769e9f4853541ff44e3fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTI0Mg==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r486811242", "bodyText": "fixed it.", "author": "shrids", "createdAt": "2020-09-11T06:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "03b742dc755389c157e778d91807724846ab8740", "chunk": "diff --git a/test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java b/test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java\nindex baa472e92..61cc4ae93 100644\n--- a/test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java\n+++ b/test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java\n\n@@ -295,16 +295,16 @@ public class ByteStreamTest extends LeakDetectorTestSuite {\n         // create a stream\n         assertTrue(\"Create stream failed\", streamManager.createStream(scope, stream, config));\n         // verify read and write.\n-        verify_byte_client_read_write(scope, stream);\n+        verifyByteClientReadWrite(scope, stream);\n         // delete the stream and recreate\n         assertTrue(\"Seal stream operation failed\", streamManager.sealStream(scope, stream));\n         assertTrue(\"Delete Stream operation failed\", streamManager.deleteStream(scope, stream));\n         assertTrue(\"Recreate stream failed\", streamManager.createStream(scope, stream, config));\n         // verify read and write.\n-        verify_byte_client_read_write(scope, stream);\n+        verifyByteClientReadWrite(scope, stream);\n     }\n \n-    private void verify_byte_client_read_write(String scope, String stream) {\n+    private void verifyByteClientReadWrite(String scope, String stream) {\n         @Cleanup\n         ByteStreamClientFactory client = createClientFactory(scope);\n \n"}}, {"oid": "03b742dc755389c157e778d91807724846ab8740", "url": "https://github.com/pravega/pravega/commit/03b742dc755389c157e778d91807724846ab8740", "message": "CR Change: fix naming convention.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-11T06:53:19Z", "type": "commit"}, {"oid": "d9a21db4581c23dbe6f2d1c350c616452153d64a", "url": "https://github.com/pravega/pravega/commit/d9a21db4581c23dbe6f2d1c350c616452153d64a", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-11T09:17:16Z", "type": "commit"}, {"oid": "a011b9592ab76c142693c9e55aac303f24b2cfcf", "url": "https://github.com/pravega/pravega/commit/a011b9592ab76c142693c9e55aac303f24b2cfcf", "message": "Improve test coverage.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-11T10:00:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MTQzMA==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r487061430", "bodyText": "If we want a version of this fix to go into 0.7.2, we will have to use segments.getSegments().size() here.", "author": "derekm", "createdAt": "2020-09-11T13:55:03Z", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,16 +48,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n-    }\n-\n-    private ByteStreamReader createByteStreamReaders(Segment segment) {\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStream()\n-                                                                                                                 .getStreamName()),\n-                                                                RuntimeException::new);\n-\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n+        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");\n+        Preconditions.checkState(segments.getNumberOfSegments() == 1, \"Stream is configured with more than one segment\");", "originalCommit": "a011b9592ab76c142693c9e55aac303f24b2cfcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1ced4c2e5678c4e958aef3d34fc72a765ce9b19", "chunk": "diff --git a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\nindex 1680d7c1f..380132170 100644\n--- a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n+++ b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n\n@@ -48,11 +51,20 @@ public class ByteStreamClientImpl implements ByteStreamClientFactory {\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n-        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");\n-        Preconditions.checkState(segments.getNumberOfSegments() == 1, \"Stream is configured with more than one segment\");\n-        Segment segment = segments.getSegments().iterator().next();\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(segments.getDelegationToken(), controller, segment);\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n+        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");\n+        Segment segment = segments.keySet().iterator().next();\n+        return createByteStreamReaders(segment);\n+    }\n+\n+    private ByteStreamReader createByteStreamReaders(Segment segment) {\n+        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n+                                                                                                          segment.getStream()\n+                                                                                                                 .getStreamName()),\n+                                                                RuntimeException::new);\n+\n+        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n         SegmentMetadataClient metaClient = metaStreamFactory.createSegmentMetadataClient(segment, tokenProvider);\n         long startOffset = metaClient.getSegmentInfo().getStartingOffset();\n         return new ByteStreamReaderImpl(inputStreamFactory.createInputStreamForSegment(segment, tokenProvider, startOffset),\n"}}, {"oid": "ceb2ae9c833d1fd55165a6878e10fb07e66177b6", "url": "https://github.com/pravega/pravega/commit/ceb2ae9c833d1fd55165a6878e10fb07e66177b6", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-14T14:25:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjkzMg==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488306932", "bodyText": "Why is it an error to create a reader on a sealed stream?", "author": "tkaitchuck", "createdAt": "2020-09-15T00:14:58Z", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,16 +48,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n-    }\n-\n-    private ByteStreamReader createByteStreamReaders(Segment segment) {\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStream()\n-                                                                                                                 .getStreamName()),\n-                                                                RuntimeException::new);\n-\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n+        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");", "originalCommit": "ceb2ae9c833d1fd55165a6878e10fb07e66177b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3Mjk5OA==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488372998", "bodyText": "Good catch, fixed it.", "author": "shrids", "createdAt": "2020-09-15T04:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c1ced4c2e5678c4e958aef3d34fc72a765ce9b19", "chunk": "diff --git a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\nindex 1680d7c1f..380132170 100644\n--- a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n+++ b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n\n@@ -48,11 +51,20 @@ public class ByteStreamClientImpl implements ByteStreamClientFactory {\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n-        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");\n-        Preconditions.checkState(segments.getNumberOfSegments() == 1, \"Stream is configured with more than one segment\");\n-        Segment segment = segments.getSegments().iterator().next();\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(segments.getDelegationToken(), controller, segment);\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n+        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");\n+        Segment segment = segments.keySet().iterator().next();\n+        return createByteStreamReaders(segment);\n+    }\n+\n+    private ByteStreamReader createByteStreamReaders(Segment segment) {\n+        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n+                                                                                                          segment.getStream()\n+                                                                                                                 .getStreamName()),\n+                                                                RuntimeException::new);\n+\n+        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n         SegmentMetadataClient metaClient = metaStreamFactory.createSegmentMetadataClient(segment, tokenProvider);\n         long startOffset = metaClient.getSegmentInfo().getStartingOffset();\n         return new ByteStreamReaderImpl(inputStreamFactory.createInputStreamForSegment(segment, tokenProvider, startOffset),\n"}}, {"oid": "595f1ccbe42d213ef37a999447052b6f97d13aec", "url": "https://github.com/pravega/pravega/commit/595f1ccbe42d213ef37a999447052b6f97d13aec", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-15T00:16:20Z", "type": "commit"}, {"oid": "c1ced4c2e5678c4e958aef3d34fc72a765ce9b19", "url": "https://github.com/pravega/pravega/commit/c1ced4c2e5678c4e958aef3d34fc72a765ce9b19", "message": "CR Changes: Sealed stream can be read .\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-15T04:12:10Z", "type": "commit"}, {"oid": "527136b8683698a0ddb8da6aa1cecb22ef73a733", "url": "https://github.com/pravega/pravega/commit/527136b8683698a0ddb8da6aa1cecb22ef73a733", "message": "Improve junit.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-15T04:16:10Z", "type": "commit"}, {"oid": "cb9a50d76b7f215f59b2a57130a16a442cefdadc", "url": "https://github.com/pravega/pravega/commit/cb9a50d76b7f215f59b2a57130a16a442cefdadc", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-15T04:19:21Z", "type": "commit"}, {"oid": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1", "url": "https://github.com/pravega/pravega/commit/41b8a54ed2a6782193f423ad665fffde0bdcd8b1", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-15T05:38:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMjY4Mw==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488702683", "bodyText": "Will this correctly handle truncated streams? Is timestamp here the same as epoch?", "author": "derekm", "createdAt": "2020-09-15T14:15:11Z", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));", "originalCommit": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNzI4MQ==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488707281", "bodyText": "yes, this API returns the segment pointing to the HEAD of the stream even for truncated streams.", "author": "shrids", "createdAt": "2020-09-15T14:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMjY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4ea73fbcf884c4e2b46caede28ee39f8dd8f12b8", "chunk": "diff --git a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\nindex 380132170..c391ebf91 100644\n--- a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n+++ b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n\n@@ -53,7 +53,7 @@ public class ByteStreamClientImpl implements ByteStreamClientFactory {\n     public ByteStreamReader createByteStreamReader(String streamName) {\n         // Fetch the segments pointing to the current HEAD of the stream.\n         Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n-        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");\n+        Preconditions.checkState(segments.size() == 1, \"ByteStreamReader supports single segment stream. Provided stream contains %s segments\", segments.size());\n         Segment segment = segments.keySet().iterator().next();\n         return createByteStreamReaders(segment);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2OTU5MQ==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488869591", "bodyText": "For debug-ability it would be good to have two different errors or include the size in the error message.", "author": "tkaitchuck", "createdAt": "2020-09-15T18:15:04Z", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n+        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");", "originalCommit": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MzkzOA==", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r489163938", "bodyText": "improved it.", "author": "shrids", "createdAt": "2020-09-16T05:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2OTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ea73fbcf884c4e2b46caede28ee39f8dd8f12b8", "chunk": "diff --git a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\nindex 380132170..c391ebf91 100644\n--- a/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n+++ b/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java\n\n@@ -53,7 +53,7 @@ public class ByteStreamClientImpl implements ByteStreamClientFactory {\n     public ByteStreamReader createByteStreamReader(String streamName) {\n         // Fetch the segments pointing to the current HEAD of the stream.\n         Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n-        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");\n+        Preconditions.checkState(segments.size() == 1, \"ByteStreamReader supports single segment stream. Provided stream contains %s segments\", segments.size());\n         Segment segment = segments.keySet().iterator().next();\n         return createByteStreamReaders(segment);\n     }\n"}}, {"oid": "7049e542d2bcc0f8bbb3d4e8f98d6503ab4c43e0", "url": "https://github.com/pravega/pravega/commit/7049e542d2bcc0f8bbb3d4e8f98d6503ab4c43e0", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-15T18:15:19Z", "type": "commit"}, {"oid": "4ea73fbcf884c4e2b46caede28ee39f8dd8f12b8", "url": "https://github.com/pravega/pravega/commit/4ea73fbcf884c4e2b46caede28ee39f8dd8f12b8", "message": "CR Changes: Improve error.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-09-16T04:57:27Z", "type": "commit"}, {"oid": "80109ce98915b4fbb0a733c0b98e8fe56c860b5a", "url": "https://github.com/pravega/pravega/commit/80109ce98915b4fbb0a733c0b98e8fe56c860b5a", "message": "Merge branch 'master' into issue-5171", "committedDate": "2020-09-16T14:25:59Z", "type": "commit"}]}