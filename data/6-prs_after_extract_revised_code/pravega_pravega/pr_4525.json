{"pr_number": 4525, "pr_title": "Issue 4540:  Prevent readers from waiting indefinitely if there is a partial/no response from the Segment Store.", "pr_createdAt": "2020-01-27T10:19:40Z", "pr_url": "https://github.com/pravega/pravega/pull/4525", "timeline": [{"oid": "097f7bb9fdf8b64f8273e8f2ca7708f9ef99b58d", "url": "https://github.com/pravega/pravega/commit/097f7bb9fdf8b64f8273e8f2ca7708f9ef99b58d", "message": "First version of fix.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-27T10:10:25Z", "type": "commit"}, {"oid": "40fa7fa2bd20b1ef56bd16e8a216f252ec592309", "url": "https://github.com/pravega/pravega/commit/40fa7fa2bd20b1ef56bd16e8a216f252ec592309", "message": "Checkstyle fix.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-27T10:16:18Z", "type": "commit"}, {"oid": "2bfc88b597937cd580e07665d720f256bd4dccdf", "url": "https://github.com/pravega/pravega/commit/2bfc88b597937cd580e07665d720f256bd4dccdf", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream", "committedDate": "2020-01-27T10:26:14Z", "type": "commit"}, {"oid": "197b5d8448c7ec0c76b0f0e22cd7c528230c1778", "url": "https://github.com/pravega/pravega/commit/197b5d8448c7ec0c76b0f0e22cd7c528230c1778", "message": "Fix junit failure.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-27T10:49:43Z", "type": "commit"}, {"oid": "1082e4ad7cf4e461161f8c16d48f6dc0a96e5364", "url": "https://github.com/pravega/pravega/commit/1082e4ad7cf4e461161f8c16d48f6dc0a96e5364", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream", "committedDate": "2020-01-28T02:48:29Z", "type": "commit"}, {"oid": "998637bac0643ca5a89f21194c7f27abe50ea080", "url": "https://github.com/pravega/pravega/commit/998637bac0643ca5a89f21194c7f27abe50ea080", "message": "Expand timout logic to EventStreamReader.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-28T05:07:55Z", "type": "commit"}, {"oid": "5b6ba6ac6973d79bb860b604e50c82988b77c2e6", "url": "https://github.com/pravega/pravega/commit/5b6ba6ac6973d79bb860b604e50c82988b77c2e6", "message": "Improve comments.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-28T05:16:38Z", "type": "commit"}, {"oid": "a28332cf08c730ef8202df5cbea8a8c1b1559994", "url": "https://github.com/pravega/pravega/commit/a28332cf08c730ef8202df5cbea8a8c1b1559994", "message": "Improve junits.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-28T10:00:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDgwOA==", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372120808", "bodyText": "This seems really aggressive. I don't see any reason this should be more aggressive than or different from RevisionedStreamClientImpl.READ_TIMEOUT_MS. In both cases we know the server has data and we are waiting to receive it.", "author": "tkaitchuck", "createdAt": "2020-01-28T23:42:02Z", "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -28,6 +29,10 @@\n @ToString\n class EventSegmentReaderImpl implements EventSegmentReader {\n \n+    /* Partial data timeout. This timeout is the maximum amount of time the reader will wait in the case of\n+     * partial data being received by the client. After this timeout the client will resend the request. */\n+    static final long READ_TIMEOUT_MS = 500;", "originalCommit": "a28332cf08c730ef8202df5cbea8a8c1b1559994", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyODE0Nw==", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372228147", "bodyText": "ok.Changed it to 30 seconds.", "author": "shrids", "createdAt": "2020-01-29T07:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMDgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "347984d7e3748f2f16ced6d62c4c8f4ccc870172", "chunk": "diff --git a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\nindex 09d303673..b1b22abea 100644\n--- a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n+++ b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n\n@@ -29,9 +30,11 @@ import lombok.extern.slf4j.Slf4j;\n @ToString\n class EventSegmentReaderImpl implements EventSegmentReader {\n \n-    /* Partial data timeout. This timeout is the maximum amount of time the reader will wait in the case of\n-     * partial data being received by the client. After this timeout the client will resend the request. */\n-    static final long READ_TIMEOUT_MS = 500;\n+    /*\n+     * This timeout is the maximum amount of time the reader will wait in the case of partial event data being received\n+     *  by the client. After this timeout the client will resend the request.\n+     */\n+    static final long PARTIAL_DATA_TIMEOUT = TimeUnit.SECONDS.toMillis(30);\n \n     @GuardedBy(\"$lock\")\n     private final ByteBuffer headerReadingBuffer = ByteBuffer.allocate(WireCommands.TYPE_PLUS_LENGTH_SIZE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMTIwMg==", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372121202", "bodyText": "I think this can be simplified to: in.setOffset(originalOffset, timeout);", "author": "tkaitchuck", "createdAt": "2020-01-28T23:43:26Z", "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -54,30 +59,44 @@ public long getOffset() {\n      */\n     @Override\n     @Synchronized\n-    public ByteBuffer read(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer read(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException {\n         long originalOffset = in.getOffset();\n-        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, timeout);\n+        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, firstByteTimeoutMillis);\n         boolean success = false;\n+        boolean timeout = false;\n         try {\n-            ByteBuffer result = readEvent(timeout);\n+            ByteBuffer result = readEvent(firstByteTimeoutMillis);\n             success = true;\n             return result;\n+        } catch (TimeoutException e) {\n+            timeout = true;\n+            log.warn(\"Timeout observed while trying to read data from Segment store, the read request will be retransmitted. Details: {}\", e.getMessage());\n+            return null;\n         } finally {\n-            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, timeout, success);\n+            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                in.setOffset(originalOffset);\n+                if (timeout) {", "originalCommit": "a28332cf08c730ef8202df5cbea8a8c1b1559994", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "347984d7e3748f2f16ced6d62c4c8f4ccc870172", "chunk": "diff --git a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\nindex 09d303673..b1b22abea 100644\n--- a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n+++ b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n\n@@ -75,11 +78,9 @@ class EventSegmentReaderImpl implements EventSegmentReader {\n         } finally {\n             LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                if (timeout) {\n-                    in.setOffset(originalOffset, true);\n-                } else {\n-                    in.setOffset(originalOffset);\n-                }\n+                // Reading failed, reset the offset to the original offset.\n+                // The read request is retransmitted only in the case of a timeout.\n+                in.setOffset(originalOffset, timeout);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMTU2OA==", "url": "https://github.com/pravega/pravega/pull/4525#discussion_r372121568", "bodyText": "Given three instances of this if and throw, it probably makes sense to have a private method.", "author": "tkaitchuck", "createdAt": "2020-01-28T23:44:39Z", "path": "client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java", "diffHunk": "@@ -54,30 +59,44 @@ public long getOffset() {\n      */\n     @Override\n     @Synchronized\n-    public ByteBuffer read(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer read(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException {\n         long originalOffset = in.getOffset();\n-        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, timeout);\n+        long traceId = LoggerHelpers.traceEnter(log, \"read\", in.getSegmentId(), originalOffset, firstByteTimeoutMillis);\n         boolean success = false;\n+        boolean timeout = false;\n         try {\n-            ByteBuffer result = readEvent(timeout);\n+            ByteBuffer result = readEvent(firstByteTimeoutMillis);\n             success = true;\n             return result;\n+        } catch (TimeoutException e) {\n+            timeout = true;\n+            log.warn(\"Timeout observed while trying to read data from Segment store, the read request will be retransmitted. Details: {}\", e.getMessage());\n+            return null;\n         } finally {\n-            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, timeout, success);\n+            LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                in.setOffset(originalOffset);\n+                if (timeout) {\n+                    in.setOffset(originalOffset, true);\n+                } else {\n+                    in.setOffset(originalOffset);\n+                }\n             }\n         }\n     }\n         \n-    public ByteBuffer readEvent(long timeout) throws EndOfSegmentException, SegmentTruncatedException {\n+    public ByteBuffer readEvent(long firstByteTimeoutMillis) throws EndOfSegmentException, SegmentTruncatedException, TimeoutException {\n         headerReadingBuffer.clear();\n-        int read = in.read(headerReadingBuffer, timeout);\n+        int read = in.read(headerReadingBuffer, firstByteTimeoutMillis);\n         if (read == 0) {\n+            // a resend will not be triggered in-case of a firstByteTimeout.\n             return null;\n         }\n         while (headerReadingBuffer.hasRemaining()) {\n-            in.read(headerReadingBuffer, Long.MAX_VALUE);\n+            if (in.read(headerReadingBuffer, READ_TIMEOUT_MS) == 0) {\n+                log.warn(\"Timeout out while trying to read WireCommand header during read of segment {} at offset {}\",", "originalCommit": "a28332cf08c730ef8202df5cbea8a8c1b1559994", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "347984d7e3748f2f16ced6d62c4c8f4ccc870172", "chunk": "diff --git a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\nindex 09d303673..b1b22abea 100644\n--- a/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n+++ b/client/src/main/java/io/pravega/client/segment/impl/EventSegmentReaderImpl.java\n\n@@ -75,11 +78,9 @@ class EventSegmentReaderImpl implements EventSegmentReader {\n         } finally {\n             LoggerHelpers.traceLeave(log, \"read\", traceId, in.getSegmentId(), originalOffset, firstByteTimeoutMillis, success);\n             if (!success) {\n-                if (timeout) {\n-                    in.setOffset(originalOffset, true);\n-                } else {\n-                    in.setOffset(originalOffset);\n-                }\n+                // Reading failed, reset the offset to the original offset.\n+                // The read request is retransmitted only in the case of a timeout.\n+                in.setOffset(originalOffset, timeout);\n             }\n         }\n     }\n"}}, {"oid": "347984d7e3748f2f16ced6d62c4c8f4ccc870172", "url": "https://github.com/pravega/pravega/commit/347984d7e3748f2f16ced6d62c4c8f4ccc870172", "message": "CR Changes: Increase the Timeout to 30 seconds.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-29T07:38:45Z", "type": "commit"}, {"oid": "3bc248bf6d3c76a28ae96a3e88b489884a0192d8", "url": "https://github.com/pravega/pravega/commit/3bc248bf6d3c76a28ae96a3e88b489884a0192d8", "message": "Add buffer capacity and current position in the logs.\n\nSigned-off-by: Sandeep <sandeep.shridhar@emc.com>", "committedDate": "2020-01-29T08:03:08Z", "type": "commit"}, {"oid": "acff83263709e4137aa81b4d7b06dc162bbc58f8", "url": "https://github.com/pravega/pravega/commit/acff83263709e4137aa81b4d7b06dc162bbc58f8", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream", "committedDate": "2020-01-30T08:21:32Z", "type": "commit"}, {"oid": "20d9ebb6dea1225e26f9f98ff770647c7fbb8ceb", "url": "https://github.com/pravega/pravega/commit/20d9ebb6dea1225e26f9f98ff770647c7fbb8ceb", "message": "Merge branch 'master' into issue-retryOnTimeoutRevisonedStream", "committedDate": "2020-01-30T18:47:59Z", "type": "commit"}]}