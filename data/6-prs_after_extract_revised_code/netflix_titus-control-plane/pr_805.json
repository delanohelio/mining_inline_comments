{"pr_number": 805, "pr_title": "Archaius2 dynamic proxy for Spring environment", "pr_createdAt": "2020-03-11T19:35:00Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/805", "timeline": [{"oid": "6759eaae6a27f121f8a58db96e812593f8bc0665", "url": "https://github.com/Netflix/titus-control-plane/commit/6759eaae6a27f121f8a58db96e812593f8bc0665", "message": "Archaius2 dynamic proxy for Spring environment", "committedDate": "2020-03-11T18:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0OTgwNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/805#discussion_r391249807", "bodyText": "wouldn't it be safer to just ignore this method and consider it not a configurable property? Especially as we are looking at all methods, including the inherited ones from parent interfaces.", "author": "fabiokung", "createdAt": "2020-03-11T20:28:59Z", "path": "titus-common/src/main/java/com/netflix/titus/common/util/archaius2/SpringProxyInvocationHandler.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.common.util.archaius2;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.google.common.base.Preconditions;\n+import com.netflix.archaius.api.annotations.Configuration;\n+import com.netflix.archaius.api.annotations.DefaultValue;\n+import com.netflix.archaius.api.annotations.PropertyName;\n+import com.netflix.titus.common.util.StringExt;\n+import com.netflix.titus.common.util.tuple.Either;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.env.Environment;\n+\n+class SpringProxyInvocationHandler implements InvocationHandler {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(SpringProxyInvocationHandler.class);\n+\n+    private interface MethodHandler {\n+        Object get() throws Throwable;\n+    }\n+\n+    private final Class<?> apiInterface;\n+    private final String prefix;\n+    private final Environment environment;\n+\n+    private final Map<Method, MethodHandler> methodWrappers;\n+\n+    SpringProxyInvocationHandler(Class<?> apiInterface, String prefix, Environment environment) {\n+        Preconditions.checkArgument(apiInterface.isInterface(), \"Not interface: %s\", apiInterface);\n+\n+        this.apiInterface = apiInterface;\n+\n+        String effectivePrefix = prefix;\n+        if (prefix == null) {\n+            Configuration configurationAnnotation = apiInterface.getAnnotation(Configuration.class);\n+            effectivePrefix = configurationAnnotation != null ? configurationAnnotation.prefix() : null;\n+        }\n+        this.prefix = StringExt.isEmpty(effectivePrefix) ? \"\" : (effectivePrefix.endsWith(\".\") ? effectivePrefix : effectivePrefix + '.');\n+        this.environment = environment;\n+\n+        Map<Method, MethodHandler> methodWrappers = new HashMap<>();\n+        for (Method method : apiInterface.getMethods()) {\n+            Preconditions.checkArgument(method.getParameterCount() == 0, \"Method with no parameters expected\");", "originalCommit": "6759eaae6a27f121f8a58db96e812593f8bc0665", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxMjM1NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/805#discussion_r391312355", "bodyText": "We cannot just ignore them. We could either:\n\nexecute them if a default implementation is provided (our type is interface not a class)\nthrow an exception if the method is called by the client, but do not fail eagerly in the constructor", "author": "tbak", "createdAt": "2020-03-11T22:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0OTgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "3acd84b92cabd77dcac0a7a01eb2de4eab901817", "chunk": "diff --git a/titus-common/src/main/java/com/netflix/titus/common/util/archaius2/SpringProxyInvocationHandler.java b/titus-common/src/main/java/com/netflix/titus/common/util/archaius2/SpringProxyInvocationHandler.java\nindex d1744a415..11988aadc 100644\n--- a/titus-common/src/main/java/com/netflix/titus/common/util/archaius2/SpringProxyInvocationHandler.java\n+++ b/titus-common/src/main/java/com/netflix/titus/common/util/archaius2/SpringProxyInvocationHandler.java\n\n@@ -32,6 +32,7 @@ import com.google.common.base.Preconditions;\n import com.netflix.archaius.api.annotations.Configuration;\n import com.netflix.archaius.api.annotations.DefaultValue;\n import com.netflix.archaius.api.annotations.PropertyName;\n+import com.netflix.titus.common.util.ReflectionExt;\n import com.netflix.titus.common.util.StringExt;\n import com.netflix.titus.common.util.tuple.Either;\n import org.slf4j.Logger;\n"}}, {"oid": "3acd84b92cabd77dcac0a7a01eb2de4eab901817", "url": "https://github.com/Netflix/titus-control-plane/commit/3acd84b92cabd77dcac0a7a01eb2de4eab901817", "message": "Code review updates", "committedDate": "2020-03-11T23:19:58Z", "type": "commit"}]}