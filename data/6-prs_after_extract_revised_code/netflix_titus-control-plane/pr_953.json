{"pr_number": 953, "pr_title": "rechecking agent status if not found in cache", "pr_createdAt": "2020-11-12T23:01:56Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/953", "timeline": [{"oid": "4cb00c248bb6060f551517d656cc792d3984283d", "url": "https://github.com/Netflix/titus-control-plane/commit/4cb00c248bb6060f551517d656cc792d3984283d", "message": "double checking agent status if not found in cache", "committedDate": "2020-11-12T22:57:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzAzNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r522517037", "bodyText": "Can LifecycleStatus be null?", "author": "joshi-keyur", "createdAt": "2020-11-12T23:59:25Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java", "diffHunk": "@@ -148,9 +147,15 @@ private boolean isAgentInstanceNotAvailable(String nodeName) {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            return true;\n+            // re-check with agent service to find an instance\n+            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n+                    .toBlocking()\n+                    .firstOrDefault(null);\n+            if (agentInstance != null) {\n+                return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;", "originalCommit": "4cb00c248bb6060f551517d656cc792d3984283d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0Mjc5NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r522542795", "bodyText": "Not sure, but an additional check won't hurt", "author": "amit-git", "createdAt": "2020-11-13T01:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA4MDMzMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r523080331", "bodyText": "It cannot but fine to be more defensive.", "author": "corindwyer", "createdAt": "2020-11-13T16:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzAzNw=="}], "type": "inlineReview", "revised_code": {"commit": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\nindex 02cdede45..d8faebe4c 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n\n@@ -151,7 +154,8 @@ public class NodeGcController extends BaseGcController<V1Node> {\n             AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n                     .toBlocking()\n                     .firstOrDefault(null);\n-            if (agentInstance != null) {\n+            if (agentInstance != null && agentInstance.getLifecycleStatus() != null) {\n+                logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n                 return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n             }\n             return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzI0MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r522517241", "bodyText": "Should we track how frequently this may be happening using a Counter?", "author": "joshi-keyur", "createdAt": "2020-11-12T23:59:58Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java", "diffHunk": "@@ -148,9 +147,15 @@ private boolean isAgentInstanceNotAvailable(String nodeName) {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            return true;\n+            // re-check with agent service to find an instance\n+            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n+                    .toBlocking()\n+                    .firstOrDefault(null);\n+            if (agentInstance != null) {\n+                return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;", "originalCommit": "4cb00c248bb6060f551517d656cc792d3984283d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0MTk0OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r522541949", "bodyText": "That's a good idea. I'll log that for now, can add more metrics if needed.", "author": "amit-git", "createdAt": "2020-11-13T01:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\nindex 02cdede45..d8faebe4c 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n\n@@ -151,7 +154,8 @@ public class NodeGcController extends BaseGcController<V1Node> {\n             AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n                     .toBlocking()\n                     .firstOrDefault(null);\n-            if (agentInstance != null) {\n+            if (agentInstance != null && agentInstance.getLifecycleStatus() != null) {\n+                logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n                 return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n             }\n             return false;\n"}}, {"oid": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "url": "https://github.com/Netflix/titus-control-plane/commit/bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "message": "additional logging before GCing a node", "committedDate": "2020-11-13T01:09:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA2NTU2Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r523065562", "bodyText": "In a new code, let's use spring-reactor API (Flux in this case).", "author": "tbak", "createdAt": "2020-11-13T16:34:39Z", "path": "titus-api/src/main/java/com/netflix/titus/api/agent/service/AgentManagementService.java", "diffHunk": "@@ -134,4 +133,13 @@\n      * event for each instance group or agent instance change (add/update/remove).\n      */\n     Observable<AgentEvent> events(boolean includeSnapshot);\n+\n+    /**\n+     * Looks up agent instance by its ID, asynchronously\n+     *\n+     * @param instanceId of the agent\n+     * @return Observable of AgentInstance\n+     */\n+    Observable<AgentInstance> getAgentInstanceAsync(String instanceId);", "originalCommit": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "681cae605488744eb3469e45d564f99affd49b93", "chunk": "diff --git a/titus-api/src/main/java/com/netflix/titus/api/agent/service/AgentManagementService.java b/titus-api/src/main/java/com/netflix/titus/api/agent/service/AgentManagementService.java\nindex 1b01532b3..8254a212f 100644\n--- a/titus-api/src/main/java/com/netflix/titus/api/agent/service/AgentManagementService.java\n+++ b/titus-api/src/main/java/com/netflix/titus/api/agent/service/AgentManagementService.java\n\n@@ -140,6 +141,6 @@ public interface AgentManagementService extends ReadOnlyAgentOperations {\n      * @param instanceId of the agent\n      * @return Observable of AgentInstance\n      */\n-    Observable<AgentInstance> getAgentInstanceAsync(String instanceId);\n+    Mono<AgentInstance> getAgentInstanceAsync(String instanceId);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA2ODQ3OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r523068479", "bodyText": "If after direct query agentInstance is null we should assume that it is not available, so check it first and return true?", "author": "tbak", "createdAt": "2020-11-13T16:38:39Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java", "diffHunk": "@@ -148,9 +150,16 @@ private boolean isAgentInstanceNotAvailable(String nodeName) {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            return true;\n+            // re-check with agent service to find an instance\n+            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n+                    .toBlocking()\n+                    .firstOrDefault(null);\n+            if (agentInstance != null && agentInstance.getLifecycleStatus() != null) {", "originalCommit": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA4NjYxMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r523086610", "bodyText": "yes, this could should also handle the case of the instance is explicitly gone in AWS. This assumes you can query for the state forever but the EC2 API returns a 404 after the instance has been stopped for an hour IIRC.", "author": "corindwyer", "createdAt": "2020-11-13T17:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA2ODQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "681cae605488744eb3469e45d564f99affd49b93", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\nindex d8faebe4c..7434991b2 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n\n@@ -150,13 +150,22 @@ public class NodeGcController extends BaseGcController<V1Node> {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            // re-check with agent service to find an instance\n-            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n-                    .toBlocking()\n-                    .firstOrDefault(null);\n-            if (agentInstance != null && agentInstance.getLifecycleStatus() != null) {\n-                logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n-                return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n+            // recheck with agent service to find an instance.\n+            // It is a blocking call that is bound by the timeout defined in\n+            // {@link com.netflix.titus.ext.aws.AwsConfiguration#getAwsRequestTimeoutMs()}\n+            AgentInstance agentInstance = null;\n+            try {\n+                agentInstance = agentManagementService.getAgentInstanceAsync(nodeName).block();\n+                if (agentInstance == null) {\n+                    // Assuming the instance is gone from AWS\n+                    return true;\n+                }\n+                if (agentInstance.getLifecycleStatus() != null) {\n+                    logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n+                    return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Exception getting instance status for {}\", nodeName, e);\n             }\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA4NDQ2Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r523084462", "bodyText": "Verify this has a short timeout on it. If not, update code.", "author": "corindwyer", "createdAt": "2020-11-13T17:02:54Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java", "diffHunk": "@@ -148,9 +150,16 @@ private boolean isAgentInstanceNotAvailable(String nodeName) {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            return true;\n+            // re-check with agent service to find an instance\n+            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n+                    .toBlocking()", "originalCommit": "bfcccad53c0b6c19edf04a45bb7b82b06f2ba5c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "681cae605488744eb3469e45d564f99affd49b93", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\nindex d8faebe4c..7434991b2 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/NodeGcController.java\n\n@@ -150,13 +150,22 @@ public class NodeGcController extends BaseGcController<V1Node> {\n \n         Optional<AgentInstance> agentInstanceOpt = agentManagementService.findAgentInstance(nodeName);\n         if (!agentInstanceOpt.isPresent()) {\n-            // re-check with agent service to find an instance\n-            AgentInstance agentInstance = agentManagementService.getAgentInstanceAsync(nodeName)\n-                    .toBlocking()\n-                    .firstOrDefault(null);\n-            if (agentInstance != null && agentInstance.getLifecycleStatus() != null) {\n-                logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n-                return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n+            // recheck with agent service to find an instance.\n+            // It is a blocking call that is bound by the timeout defined in\n+            // {@link com.netflix.titus.ext.aws.AwsConfiguration#getAwsRequestTimeoutMs()}\n+            AgentInstance agentInstance = null;\n+            try {\n+                agentInstance = agentManagementService.getAgentInstanceAsync(nodeName).block();\n+                if (agentInstance == null) {\n+                    // Assuming the instance is gone from AWS\n+                    return true;\n+                }\n+                if (agentInstance.getLifecycleStatus() != null) {\n+                    logger.info(\"Rechecked node {} to get status {}\", nodeName, agentInstance.getLifecycleStatus().getState());\n+                    return agentInstance.getLifecycleStatus().getState() == InstanceLifecycleState.Stopped;\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Exception getting instance status for {}\", nodeName, e);\n             }\n             return false;\n         }\n"}}, {"oid": "681cae605488744eb3469e45d564f99affd49b93", "url": "https://github.com/Netflix/titus-control-plane/commit/681cae605488744eb3469e45d564f99affd49b93", "message": "adding cloud connector api to fetch instance status", "committedDate": "2020-11-13T23:57:38Z", "type": "commit"}, {"oid": "28bf23a3deab61e2214ba7233d04de80ff6925ee", "url": "https://github.com/Netflix/titus-control-plane/commit/28bf23a3deab61e2214ba7233d04de80ff6925ee", "message": "cloud connector implementations supporting a single instance ID lookup method", "committedDate": "2020-11-14T01:13:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MDI3NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r524390275", "bodyText": "Wrap it into Mono.defer so a new request is create on each subscribe.", "author": "tbak", "createdAt": "2020-11-16T16:16:33Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java", "diffHunk": "@@ -223,6 +227,37 @@ public ResourceDimension getInstanceTypeResourceDimension(String instanceType) {\n                 });\n     }\n \n+    @Override\n+    public Mono<Instance> getInstance(String instanceId) {\n+        DescribeInstancesRequest req = new DescribeInstancesRequest()", "originalCommit": "28bf23a3deab61e2214ba7233d04de80ff6925ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba2f02d347fcebb329ea8b357a4fb484545c4cb1", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\nindex 327e097bf..f658b69cb 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\n\n@@ -229,33 +229,34 @@ public class AwsInstanceCloudConnector implements InstanceCloudConnector {\n \n     @Override\n     public Mono<Instance> getInstance(String instanceId) {\n-        DescribeInstancesRequest req = new DescribeInstancesRequest()\n-                .withInstanceIds(instanceId)\n-                .withSdkRequestTimeout((int) configuration.getAwsRequestTimeoutMs());\n-\n-        Mono<DescribeInstancesResult> instancesResult = AwsReactorExt.toMono(req, ec2Client::describeInstancesAsync);\n-        return instancesResult\n-                .filter(isr -> isr.getReservations() != null &&\n-                        !isr.getReservations().isEmpty() &&\n-                        !isr.getReservations().get(0).getInstances().isEmpty())\n-                .map(isr -> {\n-                    Reservation reservation = isr.getReservations().get(0);\n-                    return toInstance(reservation.getInstances().get(0));\n-                })\n-                .onErrorResume(e -> {\n-                    if (e instanceof AmazonEC2Exception) {\n-                        AmazonEC2Exception ec2Exception = (AmazonEC2Exception) e;\n-                        logger.warn(\"Exception fetching AWS instance {}\", instanceId, ec2Exception);\n-                        String errorCode = ec2Exception.getErrorCode();\n-                        int statusCode = ec2Exception.getStatusCode();\n-                        // Instance id provided is unknown / invalid\n-                        if (errorCode != null && errorCode.contains(ERROR_INSTANCE_NOT_FOUND) && statusCode == 400) {\n-                            return Mono.empty();\n+        return Mono.defer(() -> {\n+            DescribeInstancesRequest req = new DescribeInstancesRequest()\n+                    .withInstanceIds(instanceId)\n+                    .withSdkRequestTimeout((int) configuration.getAwsRequestTimeoutMs());\n+            Mono<DescribeInstancesResult> instancesResult = AwsReactorExt.toMono(req, ec2Client::describeInstancesAsync);\n+            return instancesResult\n+                    .filter(isr -> isr.getReservations() != null &&\n+                            !isr.getReservations().isEmpty() &&\n+                            !isr.getReservations().get(0).getInstances().isEmpty())\n+                    .map(isr -> {\n+                        Reservation reservation = isr.getReservations().get(0);\n+                        return toInstance(reservation.getInstances().get(0));\n+                    })\n+                    .onErrorResume(e -> {\n+                        if (e instanceof AmazonEC2Exception) {\n+                            AmazonEC2Exception ec2Exception = (AmazonEC2Exception) e;\n+                            String errorCode = ec2Exception.getErrorCode();\n+                            int statusCode = ec2Exception.getStatusCode();\n+                            // Instance id provided is unknown / invalid\n+                            if (errorCode != null && errorCode.contains(ERROR_INSTANCE_NOT_FOUND) && statusCode == 400) {\n+                                logger.info(\"AWS instance {} NOT FOUND\", instanceId);\n+                                return Mono.empty();\n+                            }\n                         }\n-                    }\n-                    // Any other exception should bubble up\n-                    return Mono.error(e);\n-                });\n+                        // Any other exception should bubble up\n+                        return Mono.error(e);\n+                    });\n+        });\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MzUxMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r524393513", "bodyText": "Move logger after 400 check, as the latter is ok case? Otherwise it will be a lot of noise in the log file.", "author": "tbak", "createdAt": "2020-11-16T16:20:59Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java", "diffHunk": "@@ -223,6 +227,37 @@ public ResourceDimension getInstanceTypeResourceDimension(String instanceType) {\n                 });\n     }\n \n+    @Override\n+    public Mono<Instance> getInstance(String instanceId) {\n+        DescribeInstancesRequest req = new DescribeInstancesRequest()\n+                .withInstanceIds(instanceId)\n+                .withSdkRequestTimeout((int) configuration.getAwsRequestTimeoutMs());\n+\n+        Mono<DescribeInstancesResult> instancesResult = AwsReactorExt.toMono(req, ec2Client::describeInstancesAsync);\n+        return instancesResult\n+                .filter(isr -> isr.getReservations() != null &&\n+                        !isr.getReservations().isEmpty() &&\n+                        !isr.getReservations().get(0).getInstances().isEmpty())\n+                .map(isr -> {\n+                    Reservation reservation = isr.getReservations().get(0);\n+                    return toInstance(reservation.getInstances().get(0));\n+                })\n+                .onErrorResume(e -> {\n+                    if (e instanceof AmazonEC2Exception) {\n+                        AmazonEC2Exception ec2Exception = (AmazonEC2Exception) e;\n+                        logger.warn(\"Exception fetching AWS instance {}\", instanceId, ec2Exception);", "originalCommit": "28bf23a3deab61e2214ba7233d04de80ff6925ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMTYyNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/953#discussion_r524431627", "bodyText": "It might be useful to have a log line for when instance is not found without stack trace.", "author": "corindwyer", "createdAt": "2020-11-16T17:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MzUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "ba2f02d347fcebb329ea8b357a4fb484545c4cb1", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\nindex 327e097bf..f658b69cb 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AwsInstanceCloudConnector.java\n\n@@ -229,33 +229,34 @@ public class AwsInstanceCloudConnector implements InstanceCloudConnector {\n \n     @Override\n     public Mono<Instance> getInstance(String instanceId) {\n-        DescribeInstancesRequest req = new DescribeInstancesRequest()\n-                .withInstanceIds(instanceId)\n-                .withSdkRequestTimeout((int) configuration.getAwsRequestTimeoutMs());\n-\n-        Mono<DescribeInstancesResult> instancesResult = AwsReactorExt.toMono(req, ec2Client::describeInstancesAsync);\n-        return instancesResult\n-                .filter(isr -> isr.getReservations() != null &&\n-                        !isr.getReservations().isEmpty() &&\n-                        !isr.getReservations().get(0).getInstances().isEmpty())\n-                .map(isr -> {\n-                    Reservation reservation = isr.getReservations().get(0);\n-                    return toInstance(reservation.getInstances().get(0));\n-                })\n-                .onErrorResume(e -> {\n-                    if (e instanceof AmazonEC2Exception) {\n-                        AmazonEC2Exception ec2Exception = (AmazonEC2Exception) e;\n-                        logger.warn(\"Exception fetching AWS instance {}\", instanceId, ec2Exception);\n-                        String errorCode = ec2Exception.getErrorCode();\n-                        int statusCode = ec2Exception.getStatusCode();\n-                        // Instance id provided is unknown / invalid\n-                        if (errorCode != null && errorCode.contains(ERROR_INSTANCE_NOT_FOUND) && statusCode == 400) {\n-                            return Mono.empty();\n+        return Mono.defer(() -> {\n+            DescribeInstancesRequest req = new DescribeInstancesRequest()\n+                    .withInstanceIds(instanceId)\n+                    .withSdkRequestTimeout((int) configuration.getAwsRequestTimeoutMs());\n+            Mono<DescribeInstancesResult> instancesResult = AwsReactorExt.toMono(req, ec2Client::describeInstancesAsync);\n+            return instancesResult\n+                    .filter(isr -> isr.getReservations() != null &&\n+                            !isr.getReservations().isEmpty() &&\n+                            !isr.getReservations().get(0).getInstances().isEmpty())\n+                    .map(isr -> {\n+                        Reservation reservation = isr.getReservations().get(0);\n+                        return toInstance(reservation.getInstances().get(0));\n+                    })\n+                    .onErrorResume(e -> {\n+                        if (e instanceof AmazonEC2Exception) {\n+                            AmazonEC2Exception ec2Exception = (AmazonEC2Exception) e;\n+                            String errorCode = ec2Exception.getErrorCode();\n+                            int statusCode = ec2Exception.getStatusCode();\n+                            // Instance id provided is unknown / invalid\n+                            if (errorCode != null && errorCode.contains(ERROR_INSTANCE_NOT_FOUND) && statusCode == 400) {\n+                                logger.info(\"AWS instance {} NOT FOUND\", instanceId);\n+                                return Mono.empty();\n+                            }\n                         }\n-                    }\n-                    // Any other exception should bubble up\n-                    return Mono.error(e);\n-                });\n+                        // Any other exception should bubble up\n+                        return Mono.error(e);\n+                    });\n+        });\n     }\n \n     @Override\n"}}, {"oid": "ba2f02d347fcebb329ea8b357a4fb484545c4cb1", "url": "https://github.com/Netflix/titus-control-plane/commit/ba2f02d347fcebb329ea8b357a4fb484545c4cb1", "message": "minor updates around log lines for aws instance lookup failure mode", "committedDate": "2020-11-16T18:05:24Z", "type": "commit"}]}