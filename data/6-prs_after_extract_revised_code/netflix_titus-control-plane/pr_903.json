{"pr_number": 903, "pr_title": "RFC - Make the kubeapiserver connector understand pod ips from kubelet", "pr_createdAt": "2020-08-26T21:58:02Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/903", "timeline": [{"oid": "253b77b7946c0f02818e5fc713b24256a72b31a9", "url": "https://github.com/Netflix/titus-control-plane/commit/253b77b7946c0f02818e5fc713b24256a72b31a9", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet", "committedDate": "2020-08-27T18:24:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODEwNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r478628107", "bodyText": "You can use equivalent method from Evaluators class in titus-common.", "author": "tbak", "createdAt": "2020-08-27T18:54:05Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java", "diffHunk": "@@ -148,6 +149,15 @@ public static Task attachPlacementData(Task task, Optional<TitusExecutorDetails>\n         }).orElse(task);\n     }\n \n+    public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n+        String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n+        Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n+        BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));", "originalCommit": "253b77b7946c0f02818e5fc713b24256a72b31a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyODk3NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479428975", "bodyText": "I see applyNotNull in Evaulators, but that won't help me against Empty strings though.", "author": "solarkennedy", "createdAt": "2020-08-28T17:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ac07a43619689f39f9d26e84536ad39bccac89bb", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\nindex 9219bc0d1..4f6642031 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n\n@@ -151,11 +151,15 @@ public final class JobManagerUtil {\n \n     public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n         String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n-        Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n-        BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n-        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n-        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n-        return task.toBuilder().addAllToTaskContext(newContext).build();\n+        if (ipv4 == null || ipv4.isEmpty()) {\n+            return task;\n+        } else {\n+            Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n+            BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n+            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n+            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n+            return task.toBuilder().addAllToTaskContext(newContext).build();\n+        }\n     }\n \n     public static Optional<String> parseEniResourceId(String resourceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODU0Mw==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r478628543", "bodyText": "You should check defensively that status is not null as well.", "author": "tbak", "createdAt": "2020-08-27T18:54:54Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java", "diffHunk": "@@ -148,6 +149,15 @@ public static Task attachPlacementData(Task task, Optional<TitusExecutorDetails>\n         }).orElse(task);\n     }\n \n+    public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n+        String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();", "originalCommit": "253b77b7946c0f02818e5fc713b24256a72b31a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyOTA2Ng==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479429066", "bodyText": "Good idea", "author": "solarkennedy", "createdAt": "2020-08-28T17:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNzEzNA==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479437134", "bodyText": "We should also add if(podWrapper.getV1Pod().getStatus() == null) { return task; }", "author": "tbak", "createdAt": "2020-08-28T17:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ac07a43619689f39f9d26e84536ad39bccac89bb", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\nindex 9219bc0d1..4f6642031 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n\n@@ -151,11 +151,15 @@ public final class JobManagerUtil {\n \n     public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n         String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n-        Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n-        BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n-        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n-        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n-        return task.toBuilder().addAllToTaskContext(newContext).build();\n+        if (ipv4 == null || ipv4.isEmpty()) {\n+            return task;\n+        } else {\n+            Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n+            BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n+            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n+            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n+            return task.toBuilder().addAllToTaskContext(newContext).build();\n+        }\n     }\n \n     public static Optional<String> parseEniResourceId(String resourceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTE5NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r478629194", "bodyText": "executorDetailsOpt == null || executorDetailsOpt.isEmpty()", "author": "tbak", "createdAt": "2020-08-27T18:56:04Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -290,8 +290,13 @@ static Task updateTaskStatus(PodWrapper podWrapper,\n                 .build();\n \n         Task fixedTask = fillInMissingStates(podWrapper, updatedTask);\n-        Task taskWithPlacementData = JobManagerUtil.attachPlacementData(fixedTask, executorDetailsOpt);\n-        Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithPlacementData, n)).orElse(taskWithPlacementData);\n+        Task taskWithExecutorData;\n+        if (executorDetailsOpt == null) {", "originalCommit": "253b77b7946c0f02818e5fc713b24256a72b31a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzMDI1NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479430254", "bodyText": "There is no method like that on this object (because it is optional?)\nThere is a isPresent, but it just checks for nullness too.", "author": "solarkennedy", "createdAt": "2020-08-28T17:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ac07a43619689f39f9d26e84536ad39bccac89bb", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 100a3b26e..4be48c170 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n\n@@ -291,10 +291,10 @@ public class KubeNotificationProcessor {\n \n         Task fixedTask = fillInMissingStates(podWrapper, updatedTask);\n         Task taskWithExecutorData;\n-        if (executorDetailsOpt == null) {\n-            taskWithExecutorData = JobManagerUtil.attachKubeletData(fixedTask, podWrapper);\n-        } else {\n+        if (executorDetailsOpt.isPresent()) {\n             taskWithExecutorData = JobManagerUtil.attachTitusExecutorData(fixedTask, executorDetailsOpt);\n+        } else {\n+            taskWithExecutorData = JobManagerUtil.attachKubeletData(fixedTask, podWrapper);\n         }\n         Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithExecutorData, n)).orElse(taskWithExecutorData);\n         Task taskWithAnnotations = addMissingAttributes(podWrapper, taskWithNodeMetadata);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTc1MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r478629751", "bodyText": "That is not need needed?", "author": "tbak", "createdAt": "2020-08-27T18:57:04Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -127,7 +127,21 @@ public static boolean isPodPhaseTerminal(String phase) {\n                     )\n             );\n             return Optional.of(titusExecutorDetails);\n+        } else if (!Strings.isNullOrEmpty(pod.getStatus().getPodIP())) {", "originalCommit": "253b77b7946c0f02818e5fc713b24256a72b31a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac07a43619689f39f9d26e84536ad39bccac89bb", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex e6f1b46e4..fadc2d215 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n\n@@ -127,21 +127,7 @@ public class KubeUtil {\n                     )\n             );\n             return Optional.of(titusExecutorDetails);\n-        } else if (!Strings.isNullOrEmpty(pod.getStatus().getPodIP())) {\n-            TitusExecutorDetails titusExecutorDetails = new TitusExecutorDetails(\n-                    Collections.emptyMap(),\n-                    new TitusExecutorDetails.NetworkConfiguration(\n-                            true,\n-                            pod.getStatus().getPodIP(),\n-                            \"UnknownEniIPv6Address\",\n-                            \"UnknownEniIpAddress\",\n-                            \"UnknownEniId\",\n-                            \"UnknownResourceId\"\n-                            )\n-            );\n-            return Optional.of(titusExecutorDetails);\n         }\n-\n         return Optional.empty();\n     }\n \n"}}, {"oid": "ac07a43619689f39f9d26e84536ad39bccac89bb", "url": "https://github.com/Netflix/titus-control-plane/commit/ac07a43619689f39f9d26e84536ad39bccac89bb", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet", "committedDate": "2020-08-28T17:09:27Z", "type": "forcePushed"}, {"oid": "3eb607a9a6dedf2edf30a39cb67329ed22fef603", "url": "https://github.com/Netflix/titus-control-plane/commit/3eb607a9a6dedf2edf30a39cb67329ed22fef603", "message": "Added test case for pod ips in kubelet", "committedDate": "2020-08-28T17:32:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMTE5MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479501191", "bodyText": "minor: formatting is odd here. There's code style config file for IntelliJ you can use in the codequality/ folder", "author": "fabiokung", "createdAt": "2020-08-28T19:42:35Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java", "diffHunk": "@@ -148,6 +149,20 @@ public static Task attachPlacementData(Task task, Optional<TitusExecutorDetails>\n         }).orElse(task);\n     }\n \n+    public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n+        if(podWrapper.getV1Pod().getStatus() == null) { return task; }", "originalCommit": "3eb607a9a6dedf2edf30a39cb67329ed22fef603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\nindex 3d78f06d4..61a3b548a 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n\n@@ -150,17 +150,19 @@ public final class JobManagerUtil {\n     }\n \n     public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n-        if(podWrapper.getV1Pod().getStatus() == null) { return task; }\n+        if (podWrapper.getV1Pod().getStatus() == null) {\n+            return task;\n+        }\n         String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n         if (ipv4 == null || ipv4.isEmpty()) {\n             return task;\n-        } else {\n-            Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n-            BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n-            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n-            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n-            return task.toBuilder().addAllToTaskContext(newContext).build();\n         }\n+\n+        Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n+        BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n+        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n+        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n+        return task.toBuilder().addAllToTaskContext(newContext).build();\n     }\n \n     public static Optional<String> parseEniResourceId(String resourceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMTUzNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479501535", "bodyText": "minor: remove the else (previous if clause already has an early return) and reduce indentation level", "author": "fabiokung", "createdAt": "2020-08-28T19:43:22Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java", "diffHunk": "@@ -148,6 +149,20 @@ public static Task attachPlacementData(Task task, Optional<TitusExecutorDetails>\n         }).orElse(task);\n     }\n \n+    public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n+        if(podWrapper.getV1Pod().getStatus() == null) { return task; }\n+        String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n+        if (ipv4 == null || ipv4.isEmpty()) {\n+            return task;\n+        } else {", "originalCommit": "3eb607a9a6dedf2edf30a39cb67329ed22fef603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\nindex 3d78f06d4..61a3b548a 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/JobManagerUtil.java\n\n@@ -150,17 +150,19 @@ public final class JobManagerUtil {\n     }\n \n     public static Task attachKubeletData(Task task, PodWrapper podWrapper) {\n-        if(podWrapper.getV1Pod().getStatus() == null) { return task; }\n+        if (podWrapper.getV1Pod().getStatus() == null) {\n+            return task;\n+        }\n         String ipv4 = podWrapper.getV1Pod().getStatus().getPodIP();\n         if (ipv4 == null || ipv4.isEmpty()) {\n             return task;\n-        } else {\n-            Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n-            BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n-            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n-            contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n-            return task.toBuilder().addAllToTaskContext(newContext).build();\n         }\n+\n+        Map<String, String> newContext = new HashMap<>(task.getTaskContext());\n+        BiConsumer<String, String> contextSetter = (key, value) -> StringExt.applyIfNonEmpty(value, v -> newContext.put(key, v));\n+        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, ipv4);\n+        contextSetter.accept(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IPV4, ipv4);\n+        return task.toBuilder().addAllToTaskContext(newContext).build();\n     }\n \n     public static Optional<String> parseEniResourceId(String resourceId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMzM3MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479503370", "bodyText": "odd formatting, please use the code-style rules in codequality/", "author": "fabiokung", "createdAt": "2020-08-28T19:47:29Z", "path": "titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java", "diffHunk": "@@ -45,16 +45,7 @@\n import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodPhase;\n import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodWrapper;\n import com.netflix.titus.testkit.model.job.JobGenerator;\n-import io.kubernetes.client.openapi.models.V1ContainerState;\n-import io.kubernetes.client.openapi.models.V1ContainerStateRunning;\n-import io.kubernetes.client.openapi.models.V1ContainerStateWaiting;\n-import io.kubernetes.client.openapi.models.V1ContainerStatus;\n-import io.kubernetes.client.openapi.models.V1Node;\n-import io.kubernetes.client.openapi.models.V1NodeAddress;\n-import io.kubernetes.client.openapi.models.V1NodeStatus;\n-import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1Pod;\n-import io.kubernetes.client.openapi.models.V1PodStatus;\n+import io.kubernetes.client.openapi.models.*;", "originalCommit": "3eb607a9a6dedf2edf30a39cb67329ed22fef603", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTg1NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479511855", "bodyText": "Ah! I should have read CONTRIBUTING!", "author": "solarkennedy", "createdAt": "2020-08-28T20:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMzM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "chunk": "diff --git a/titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java b/titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java\nindex d6f6732de..9fa687058 100644\n--- a/titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java\n+++ b/titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java\n\n@@ -45,7 +45,16 @@ import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodEvent;\n import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodPhase;\n import com.netflix.titus.master.mesos.kubeapiserver.direct.model.PodWrapper;\n import com.netflix.titus.testkit.model.job.JobGenerator;\n-import io.kubernetes.client.openapi.models.*;\n+import io.kubernetes.client.openapi.models.V1ContainerState;\n+import io.kubernetes.client.openapi.models.V1ContainerStateRunning;\n+import io.kubernetes.client.openapi.models.V1ContainerStateWaiting;\n+import io.kubernetes.client.openapi.models.V1ContainerStatus;\n+import io.kubernetes.client.openapi.models.V1Node;\n+import io.kubernetes.client.openapi.models.V1NodeAddress;\n+import io.kubernetes.client.openapi.models.V1NodeStatus;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodStatus;\n import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Before;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMzkyMg==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479503922", "bodyText": "instead of doing this here, did you consider changing the logic in KubeUtil.getTitusExecutorDetails(pod), and checking whether pod.getStatus().getPodIP() should be used instead of annotations there? Centralizing this logic in that method looks cleaner to me. As more metadata is added to the kubelet path, I think it will be easier to keep both code paths more consistent in there.", "author": "fabiokung", "createdAt": "2020-08-28T19:48:44Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -290,8 +290,13 @@ static Task updateTaskStatus(PodWrapper podWrapper,\n                 .build();\n \n         Task fixedTask = fillInMissingStates(podWrapper, updatedTask);\n-        Task taskWithPlacementData = JobManagerUtil.attachPlacementData(fixedTask, executorDetailsOpt);\n-        Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithPlacementData, n)).orElse(taskWithPlacementData);\n+        Task taskWithExecutorData;\n+        if (executorDetailsOpt.isPresent()) {", "originalCommit": "3eb607a9a6dedf2edf30a39cb67329ed22fef603", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMzk3NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479513975", "bodyText": "I feel like I'm getting conflicting review here. I originally had this logic in getTitusExecutorDetails, but @tbak asked me to check if executorDetailsOpt was present first and do it this way (pretty sure if I'm interpreting his intent).", "author": "solarkennedy", "createdAt": "2020-08-28T20:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxODA1OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479518059", "bodyText": "My point was that TitusExecutorDetails is a legacy data structure that we want to get rid off.\nI think it would be better to move the new function into KubeUtil, but keep it separate as it is now.", "author": "tbak", "createdAt": "2020-08-28T20:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwMzkyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyMjA5OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/903#discussion_r479522098", "bodyText": "minor: missed formatting here", "author": "fabiokung", "createdAt": "2020-08-28T20:33:38Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -132,6 +132,7 @@ public static boolean isPodPhaseTerminal(String phase) {\n     }\n \n     public static Optional<V1ContainerState> findContainerState(V1Pod pod) {\n+        if(pod.getStatus() == null) { return Optional.empty(); }", "originalCommit": "c9da78c2266510e1e1dcdeb9170af79fc292dee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 7eb4d42a0..4ae3617af 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n\n@@ -132,7 +132,9 @@ public class KubeUtil {\n     }\n \n     public static Optional<V1ContainerState> findContainerState(V1Pod pod) {\n-        if(pod.getStatus() == null) { return Optional.empty(); }\n+        if (pod.getStatus() == null) {\n+            return Optional.empty();\n+        }\n         List<V1ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n         if (containerStatuses != null) {\n             for (V1ContainerStatus status : containerStatuses) {\n"}}, {"oid": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "url": "https://github.com/Netflix/titus-control-plane/commit/e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet", "committedDate": "2020-08-28T22:34:28Z", "type": "commit"}, {"oid": "e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "url": "https://github.com/Netflix/titus-control-plane/commit/e4ce6b420c0f48f3659f1bbe3523b07e971c448f", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet", "committedDate": "2020-08-28T22:34:28Z", "type": "forcePushed"}]}