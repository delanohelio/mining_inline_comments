{"pr_number": 878, "pr_title": "Use KubeClient async API to launch pods", "pr_createdAt": "2020-06-24T23:12:28Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/878", "timeline": [{"oid": "abb84baceb3e44a94025ea2f6fd8e32475c95505", "url": "https://github.com/Netflix/titus-control-plane/commit/abb84baceb3e44a94025ea2f6fd8e32475c95505", "message": "Use KubeClient async API to launch pods", "committedDate": "2020-06-24T23:08:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzNzkxMg==", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445237912", "bodyText": "add docs explaining that this method will still block until all requests are finished (so we still expect the Fenzo thread to be blocked while all requests are in-flight, but requests will be executed concurrently)", "author": "fabiokung", "createdAt": "2020-06-25T00:08:59Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {", "originalCommit": "abb84baceb3e44a94025ea2f6fd8e32475c95505", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2552f77c5b98982c8c1d7a08777d3ad93f98f863", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\nindex 735be6d3f..3c179b8c0 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n\n@@ -278,7 +279,7 @@ public class KubeApiServerIntegrator implements VirtualMachineMasterService {\n         }\n     }\n \n-    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+    private void launchTasksConcurrently(List<TaskInfoRequest> requests) {\n         List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n         for (TaskInfoRequest request : requests) {\n             V1Pod v1Pod = taskInfoToPod(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODEzNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238137", "bodyText": "I suggest adding a doOnComplete() callback to record latencies on each individual operation (DefaultSchedulingService will still record the latency of the whole operation until all requests are finished).", "author": "fabiokung", "createdAt": "2020-06-25T00:09:57Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))", "originalCommit": "abb84baceb3e44a94025ea2f6fd8e32475c95505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5NjA3OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445796079", "bodyText": "We record request level latencies in okhttp interceptor.", "author": "tbak", "createdAt": "2020-06-25T19:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "2552f77c5b98982c8c1d7a08777d3ad93f98f863", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\nindex 735be6d3f..3c179b8c0 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n\n@@ -278,7 +279,7 @@ public class KubeApiServerIntegrator implements VirtualMachineMasterService {\n         }\n     }\n \n-    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+    private void launchTasksConcurrently(List<TaskInfoRequest> requests) {\n         List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n         for (TaskInfoRequest request : requests) {\n             V1Pod v1Pod = taskInfoToPod(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODcwNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445238707", "bodyText": "consider adding a concurrency limit to the merge so we avoid overloading kube-apiserver during big bursts", "author": "fabiokung", "createdAt": "2020-06-25T00:12:01Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java", "diffHunk": "@@ -259,6 +278,36 @@ public void launchTasks(List<TaskInfoRequest> requests, List<VirtualMachineLease\n         }\n     }\n \n+    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+        List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n+        for (TaskInfoRequest request : requests) {\n+            V1Pod v1Pod = taskInfoToPod(request);\n+            Mono<Void> podAddAction = KubeUtil\n+                    .<V1Pod>toReact(handler -> kubeApiFacade.getCoreV1Api().createNamespacedPodAsync(\n+                            KUBERNETES_NAMESPACE, v1Pod, null, null, null, handler\n+                    ))\n+                    .doOnSubscribe(subscription -> {\n+                        launchTaskCounter.increment();\n+                        logger.info(\"creating pod: {}\", v1Pod);\n+                        podSizeMetrics.record(KubeUtil.estimatePodSize(v1Pod));\n+                    })\n+                    .timeout(Duration.ofMillis(directKubeConfiguration.getKubeApiClientTimeoutMs()))\n+                    .ignoreElement()\n+                    .cast(Void.class)\n+                    .onErrorResume(error -> {\n+                        logger.error(\"Unable to create pod with error: {}\", KubeUtil.toErrorDetails(error), error);\n+                        return Mono.empty();\n+                    });\n+            podAddActions.add(podAddAction);\n+        }\n+\n+        try {\n+            Flux.merge(podAddActions).blockLast();", "originalCommit": "abb84baceb3e44a94025ea2f6fd8e32475c95505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzOTI2Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/878#discussion_r445239262", "bodyText": "also consider mergeDelayError to allow partial failures mirroring the previous behavior from launchTasksSync", "author": "fabiokung", "createdAt": "2020-06-25T00:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzODcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "2552f77c5b98982c8c1d7a08777d3ad93f98f863", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\nindex 735be6d3f..3c179b8c0 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java\n\n@@ -278,7 +279,7 @@ public class KubeApiServerIntegrator implements VirtualMachineMasterService {\n         }\n     }\n \n-    private void launchTasksAsync(List<TaskInfoRequest> requests) {\n+    private void launchTasksConcurrently(List<TaskInfoRequest> requests) {\n         List<Mono<Void>> podAddActions = new ArrayList<>(requests.size());\n         for (TaskInfoRequest request : requests) {\n             V1Pod v1Pod = taskInfoToPod(request);\n"}}, {"oid": "2552f77c5b98982c8c1d7a08777d3ad93f98f863", "url": "https://github.com/Netflix/titus-control-plane/commit/2552f77c5b98982c8c1d7a08777d3ad93f98f863", "message": "Code review updates", "committedDate": "2020-06-25T20:57:40Z", "type": "commit"}]}