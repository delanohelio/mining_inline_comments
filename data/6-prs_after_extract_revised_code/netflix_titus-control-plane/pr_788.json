{"pr_number": 788, "pr_title": "Miscellaneous updates", "pr_createdAt": "2020-02-25T23:53:29Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/788", "timeline": [{"oid": "928388c111a7c50cc06e75864bc1dcaa409e1afd", "url": "https://github.com/Netflix/titus-control-plane/commit/928388c111a7c50cc06e75864bc1dcaa409e1afd", "message": "Miscellaneous updates", "committedDate": "2020-02-25T23:50:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMzk4OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/788#discussion_r384203989", "bodyText": "Failed phase can also have a deletion timestamp.", "author": "corindwyer", "createdAt": "2020-02-26T00:10:17Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -193,11 +196,31 @@ public void shutdown() {\n         return ReactorExt.toMono(v3JobOperations.updateTask(\n                 task.getId(),\n                 currentTask -> {\n-                    TaskStatus newStatus = TaskStatus.newBuilder()\n-                            .withState(newTaskState)\n-                            .withReasonCode(TaskStatus.REASON_NORMAL)\n-                            .withReasonMessage(\"Kube pod notification\")\n-                            .build();\n+                    TaskStatus newStatus;\n+\n+                    if (newTaskState != TaskState.Finished) {\n+                        newStatus = TaskStatus.newBuilder()\n+                                .withState(newTaskState)\n+                                .withReasonCode(TaskStatus.REASON_NORMAL)\n+                                .withReasonMessage(\"Kube pod notification\")\n+                                .build();\n+                    } else {\n+                        TaskStatus.Builder newStatusBuilder = TaskStatus.newBuilder().withState(TaskState.Finished);\n+\n+                        if(\"failed\".equalsIgnoreCase(pod.getStatus().getPhase())) {\n+                            newStatusBuilder", "originalCommit": "928388c111a7c50cc06e75864bc1dcaa409e1afd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "effc530416886a61d213c9969232bc238d735635", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex f9f329e8e..340ae1bba 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n\n@@ -207,13 +207,13 @@ public class KubeNotificationProcessor {\n                     } else {\n                         TaskStatus.Builder newStatusBuilder = TaskStatus.newBuilder().withState(TaskState.Finished);\n \n-                        if(\"failed\".equalsIgnoreCase(pod.getStatus().getPhase())) {\n+                        boolean hasDeletionTimestamp = pod.getMetadata().getDeletionTimestamp() != null;\n+\n+                        if (\"failed\".equalsIgnoreCase(pod.getStatus().getPhase())) {\n                             newStatusBuilder\n-                                    .withReasonCode(TaskStatus.REASON_FAILED)\n+                                    .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : TaskStatus.REASON_FAILED)\n                                     .withReasonMessage(Evaluators.getOrDefault(pod.getStatus().getMessage(), \"Pod execution failed\"));\n                         } else {\n-                            boolean hasDeletionTimestamp = pod.getMetadata().getDeletionTimestamp() != null;\n-\n                             newStatusBuilder\n                                     .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : REASON_NORMAL)\n                                     .withReasonMessage(\"Kube pod notification\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwNjgxMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/788#discussion_r384206811", "bodyText": "minor: s/notSet/unknown", "author": "fabiokung", "createdAt": "2020-02-26T00:17:16Z", "path": "titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/SpectatorAdmissionController.java", "diffHunk": "@@ -42,18 +44,18 @@ public AdmissionControllerResponse apply(AdmissionControllerRequest request) {\n             AdmissionControllerResponse result = delegate.apply(request);\n \n             registry.counter(METRIC_NAME,\n-                    \"callerId\", request.getCallerId(),\n-                    \"endpointName\", request.getEndpointName(),\n+                    \"callerId\", getNonEmptyOrDefault(request.getCallerId(), \"notSet\"),", "originalCommit": "928388c111a7c50cc06e75864bc1dcaa409e1afd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTM2OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/788#discussion_r384585369", "bodyText": "I have purposefully chose different word, as we use unknown in many places in the code already. I want here something that is distinct, as we know that an empty value is a bug. Maybe better would be requiredButNotSet.", "author": "tbak", "createdAt": "2020-02-26T15:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwNjgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "effc530416886a61d213c9969232bc238d735635", "chunk": "diff --git a/titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/SpectatorAdmissionController.java b/titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/SpectatorAdmissionController.java\nindex 0770cd5c3..d9263ff2f 100644\n--- a/titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/SpectatorAdmissionController.java\n+++ b/titus-common/src/main/java/com/netflix/titus/common/util/loadshedding/SpectatorAdmissionController.java\n\n@@ -44,18 +44,18 @@ public class SpectatorAdmissionController implements AdmissionController {\n             AdmissionControllerResponse result = delegate.apply(request);\n \n             registry.counter(METRIC_NAME,\n-                    \"callerId\", getNonEmptyOrDefault(request.getCallerId(), \"notSet\"),\n-                    \"endpointName\", getNonEmptyOrDefault(request.getEndpointName(), \"notSet)\"),\n+                    \"callerId\", getNonEmptyOrDefault(request.getCallerId(), \"requiredButNotSet\"),\n+                    \"endpointName\", getNonEmptyOrDefault(request.getEndpointName(), \"requiredButNotSet)\"),\n                     \"allowed\", \"\" + result.isAllowed(),\n-                    \"decisionPoint\", getNonEmptyOrDefault(result.getDecisionPoint(), \"notSet\"),\n-                    \"equivalenceGroup\", getNonEmptyOrDefault(result.getEquivalenceGroup(), \"notSet\")\n+                    \"decisionPoint\", getNonEmptyOrDefault(result.getDecisionPoint(), \"requiredButNotSet\"),\n+                    \"equivalenceGroup\", getNonEmptyOrDefault(result.getEquivalenceGroup(), \"requiredButNotSet\")\n             ).increment();\n \n             return result;\n         } catch (Exception e) {\n             registry.counter(METRIC_NAME,\n-                    \"callerId\", getNonEmptyOrDefault(request.getCallerId(), \"notSet\"),\n-                    \"endpointName\", getNonEmptyOrDefault(request.getEndpointName(), \"notSet\"),\n+                    \"callerId\", getNonEmptyOrDefault(request.getCallerId(), \"requiredButNotSet\"),\n+                    \"endpointName\", getNonEmptyOrDefault(request.getEndpointName(), \"requiredButNotSet\"),\n                     \"error\", e.getClass().getSimpleName()\n             ).increment();\n \n"}}, {"oid": "effc530416886a61d213c9969232bc238d735635", "url": "https://github.com/Netflix/titus-control-plane/commit/effc530416886a61d213c9969232bc238d735635", "message": "Code review updates", "committedDate": "2020-02-26T17:01:27Z", "type": "commit"}]}