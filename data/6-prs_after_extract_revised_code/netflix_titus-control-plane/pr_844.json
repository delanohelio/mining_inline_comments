{"pr_number": 844, "pr_title": "Add a Kube backend constraint", "pr_createdAt": "2020-05-07T17:00:24Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/844", "timeline": [{"oid": "4851ca44d2b0f0dec1561602e6aabece6a1afc46", "url": "https://github.com/Netflix/titus-control-plane/commit/4851ca44d2b0f0dec1561602e6aabece6a1afc46", "message": "Add a Kube backend constraint to restrict placement to nodes running a specific Kube backend version", "committedDate": "2020-05-07T16:56:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2MzExMg==", "url": "https://github.com/Netflix/titus-control-plane/pull/844#discussion_r421663112", "bodyText": "javadoc is wrong", "author": "corindwyer", "createdAt": "2020-05-07T17:13:32Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java", "diffHunk": "@@ -83,18 +90,23 @@ private KubeConstants() {\n     /**\n      * Machine in a farzone have the farzone taint set with its name as a value.\n      */\n-    public static final String TAINT_FARZONE = TITUS_TAINT_DOMAIN + \"farzone\";\n+    public static final String TAINT_FARZONE = TITUS_NODE_DOMAIN + \"farzone\";\n \n     /**\n      * Machines with the taint value 'flex' belong to the flex tier. Machines with the taint 'critical' belong to\n      * the critical tiers.\n      */\n-    public static final String TAINT_TIER = TITUS_TAINT_DOMAIN + \"tier\";\n+    public static final String TAINT_TIER = TITUS_NODE_DOMAIN + \"tier\";\n+\n+    /**\n+     * Taint added to each GPU instance.\n+     */\n+    public static final String TAINT_GPU_INSTANCE = TITUS_NODE_DOMAIN + \"gpu\";\n \n     /**\n      * Taint added to each GPU instance.", "originalCommit": "4851ca44d2b0f0dec1561602e6aabece6a1afc46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "406e43a2477d541ffc1a344b37ca6df9a5b9026e", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\nindex 5bbf75a1a..8e7635b74 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\n\n@@ -104,7 +104,8 @@ public final class KubeConstants {\n     public static final String TAINT_GPU_INSTANCE = TITUS_NODE_DOMAIN + \"gpu\";\n \n     /**\n-     * Taint added to each GPU instance.\n+     * Taint added to nodes with experimental backends or backends which should not be a default scheduling targets,\n+     * unless explicitly requested.\n      */\n     public static final String TAINT_KUBE_BACKEND = TITUS_NODE_DOMAIN + \"backend\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNzE4OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/844#discussion_r421707189", "bodyText": "nice catch! Can you please add test cases to KubeNotificationProcessorTest so we ensure no regressions going forward?", "author": "fabiokung", "createdAt": "2020-05-07T18:27:30Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -235,7 +235,7 @@ public void shutdown() {\n                     Task fixedTask = fillInMissingStates(pod, updatedTask);\n                     Task taskWithPlacementData = JobManagerUtil.attachPlacementData(fixedTask, executorDetailsOpt);\n                     Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithPlacementData, n)).orElse(taskWithPlacementData);\n-                    Task taskWithAnnotations = addMissingAttributes(pod, updatedTask);\n+                    Task taskWithAnnotations = addMissingAttributes(pod, taskWithNodeMetadata);", "originalCommit": "4851ca44d2b0f0dec1561602e6aabece6a1afc46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "406e43a2477d541ffc1a344b37ca6df9a5b9026e", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex db3eb62ca..e9e7c296a 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n\n@@ -198,54 +199,61 @@ public class KubeNotificationProcessor {\n                                         Optional<V1Node> node) {\n         return ReactorExt.toMono(v3JobOperations.updateTask(\n                 task.getId(),\n-                currentTask -> {\n-                    TaskStatus newStatus;\n-\n-                    if (newTaskState != TaskState.Finished) {\n-                        newStatus = TaskStatus.newBuilder()\n-                                .withState(newTaskState)\n-                                .withReasonCode(TaskStatus.REASON_NORMAL)\n-                                .withReasonMessage(\"Kube pod notification\")\n-                                .build();\n-                    } else {\n-                        TaskStatus.Builder newStatusBuilder = TaskStatus.newBuilder().withState(TaskState.Finished);\n-\n-                        boolean hasDeletionTimestamp = pod.getMetadata().getDeletionTimestamp() != null;\n-\n-                        if (\"failed\".equalsIgnoreCase(pod.getStatus().getPhase())) {\n-                            newStatusBuilder\n-                                    .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : TaskStatus.REASON_FAILED)\n-                                    .withReasonMessage(Evaluators.getOrDefault(pod.getStatus().getMessage(), \"Pod execution failed\"));\n-                        } else {\n-                            newStatusBuilder\n-                                    .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : REASON_NORMAL)\n-                                    .withReasonMessage(\"Kube pod notification\");\n-                        }\n-\n-                        newStatus = newStatusBuilder.build();\n-                    }\n-\n-                    List<TaskStatus> newHistory = CollectionsExt.copyAndAdd(currentTask.getStatusHistory(), currentTask.getStatus());\n-\n-                    Task updatedTask = currentTask.toBuilder()\n-                            .withStatus(newStatus)\n-                            .withStatusHistory(newHistory)\n-                            .build();\n-\n-                    Task fixedTask = fillInMissingStates(pod, updatedTask);\n-                    Task taskWithPlacementData = JobManagerUtil.attachPlacementData(fixedTask, executorDetailsOpt);\n-                    Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithPlacementData, n)).orElse(taskWithPlacementData);\n-                    Task taskWithAnnotations = addMissingAttributes(pod, taskWithNodeMetadata);\n-\n-                    return Optional.of(taskWithAnnotations);\n-                },\n+                currentTask -> Optional.of(updateTaskStatus(pod, newTaskState, executorDetailsOpt, node, currentTask)),\n                 V3JobOperations.Trigger.Kube,\n                 \"Kube pod notification\",\n                 KUBE_CALL_METADATA\n         ));\n     }\n \n-    private Task attachNodeMetadata(Task task, V1Node node) {\n+    @VisibleForTesting\n+    static Task updateTaskStatus(V1Pod pod,\n+                                 TaskState newTaskState,\n+                                 Optional<TitusExecutorDetails> executorDetailsOpt,\n+                                 Optional<V1Node> node,\n+                                 Task currentTask) {\n+        TaskStatus newStatus;\n+\n+        if (newTaskState != TaskState.Finished) {\n+            newStatus = TaskStatus.newBuilder()\n+                    .withState(newTaskState)\n+                    .withReasonCode(TaskStatus.REASON_NORMAL)\n+                    .withReasonMessage(\"Kube pod notification\")\n+                    .build();\n+        } else {\n+            TaskStatus.Builder newStatusBuilder = TaskStatus.newBuilder().withState(TaskState.Finished);\n+\n+            boolean hasDeletionTimestamp = pod.getMetadata().getDeletionTimestamp() != null;\n+\n+            if (\"failed\".equalsIgnoreCase(pod.getStatus().getPhase())) {\n+                newStatusBuilder\n+                        .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : TaskStatus.REASON_FAILED)\n+                        .withReasonMessage(Evaluators.getOrDefault(pod.getStatus().getMessage(), \"Pod execution failed\"));\n+            } else {\n+                newStatusBuilder\n+                        .withReasonCode(hasDeletionTimestamp ? REASON_TASK_KILLED : REASON_NORMAL)\n+                        .withReasonMessage(\"Kube pod notification\");\n+            }\n+\n+            newStatus = newStatusBuilder.build();\n+        }\n+\n+        List<TaskStatus> newHistory = CollectionsExt.copyAndAdd(currentTask.getStatusHistory(), currentTask.getStatus());\n+\n+        Task updatedTask = currentTask.toBuilder()\n+                .withStatus(newStatus)\n+                .withStatusHistory(newHistory)\n+                .build();\n+\n+        Task fixedTask = fillInMissingStates(pod, updatedTask);\n+        Task taskWithPlacementData = JobManagerUtil.attachPlacementData(fixedTask, executorDetailsOpt);\n+        Task taskWithNodeMetadata = node.map(n -> attachNodeMetadata(taskWithPlacementData, n)).orElse(taskWithPlacementData);\n+        Task taskWithAnnotations = addMissingAttributes(pod, taskWithNodeMetadata);\n+\n+        return taskWithAnnotations;\n+    }\n+\n+    private static Task attachNodeMetadata(Task task, V1Node node) {\n         Map<String, String> annotations = node.getMetadata().getAnnotations();\n         if (CollectionsExt.isNullOrEmpty(annotations)) {\n             return task;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMjQ1Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/844#discussion_r421712457", "bodyText": "I think we should stick with DNS naming conventions for annotations and labels, so all lowercase characters:\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set\nI suggest .../job-id and .../task-id. See how machine-id and machine-group were chosen below, rather than machineId. Alternatively, it could also be .../jobid and .../taskid.", "author": "fabiokung", "createdAt": "2020-05-07T18:36:28Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java", "diffHunk": "@@ -41,21 +41,33 @@ private KubeConstants() {\n \n     public static final String NODE_LABEL_INSTANCE_TYPE = \"beta.kubernetes.io/instance-type\";\n \n+    /**\n+     * Common prefix for Titus node annotations/labels and taints.\n+     */\n+    public static final String TITUS_NODE_DOMAIN = \"node.titus.netflix.com/\";\n+\n+    /**\n+     * Common prefix for Titus V3 job API specific annotations/labels.\n+     */\n+    public static final String TITUS_V3_JOB_DOMAIN = \"v3.job.titus.netflix.com/\";\n+\n     /*\n-     * Titus node labels.\n+     * Titus pod labels.\n      */\n \n-    public static final String NODE_LABEL_MACHINE_ID = \"titus/machine-id\";\n+    public static final String POD_LABEL_JOB_ID = TITUS_V3_JOB_DOMAIN + \"jobId\";", "originalCommit": "4851ca44d2b0f0dec1561602e6aabece6a1afc46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwMzY4Mw==", "url": "https://github.com/Netflix/titus-control-plane/pull/844#discussion_r421803683", "bodyText": "I like the idea. Changing this to job-id and task-id.", "author": "tbak", "createdAt": "2020-05-07T21:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMjQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "406e43a2477d541ffc1a344b37ca6df9a5b9026e", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\nindex 5bbf75a1a..8e7635b74 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeConstants.java\n\n@@ -55,9 +55,9 @@ public final class KubeConstants {\n      * Titus pod labels.\n      */\n \n-    public static final String POD_LABEL_JOB_ID = TITUS_V3_JOB_DOMAIN + \"jobId\";\n+    public static final String POD_LABEL_JOB_ID = TITUS_V3_JOB_DOMAIN + \"job-id\";\n \n-    public static final String POD_LABEL_TASK_ID = TITUS_V3_JOB_DOMAIN + \"taskId\";\n+    public static final String POD_LABEL_TASK_ID = TITUS_V3_JOB_DOMAIN + \"task-id\";\n \n     /*\n      * Titus node labels.\n"}}, {"oid": "406e43a2477d541ffc1a344b37ca6df9a5b9026e", "url": "https://github.com/Netflix/titus-control-plane/commit/406e43a2477d541ffc1a344b37ca6df9a5b9026e", "message": "Code review updates", "committedDate": "2020-05-07T22:02:26Z", "type": "commit"}]}