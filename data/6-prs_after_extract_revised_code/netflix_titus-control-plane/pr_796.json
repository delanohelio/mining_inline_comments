{"pr_number": 796, "pr_title": "create accountId amazon client provider and use it in the load balancer integration", "pr_createdAt": "2020-03-02T16:36:31Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/796", "timeline": [{"oid": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "url": "https://github.com/Netflix/titus-control-plane/commit/c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "message": "create accountId amazon client provider and use it in the load balancer integration", "committedDate": "2020-03-02T16:34:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386508767", "bodyText": "Is it ok to create many of those during initialization if there are concurrent calls?", "author": "tbak", "createdAt": "2020-03-02T16:39:15Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "originalCommit": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MjQzMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386592430", "bodyText": "\ud83d\udc4d probably not a huge deal, it might just increase the number of thread (pools) and connections during initialization a bit, but I agree it would be probably better to do a simple double-checked lock of the whole thing here and serialize calls", "author": "fabiokung", "createdAt": "2020-03-02T19:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNDA4OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386634089", "bodyText": "Fixed", "author": "corindwyer", "createdAt": "2020-03-02T20:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwODc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\nindex bb90b7eed..cd780b786 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n\n@@ -1,7 +1,7 @@\n package com.netflix.titus.ext.aws;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.inject.Inject;\n import javax.inject.Singleton;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwOTQ5Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386509492", "bodyText": "Is it an invariant that account id is always set in the load balancer id?", "author": "tbak", "createdAt": "2020-03-02T16:40:24Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/loadbalancer/AwsLoadBalancerConnector.java", "diffHunk": "@@ -173,14 +175,19 @@ public Completable isValid(String loadBalancerId) {\n                     Set<String> ips = result.getTargetHealthDescriptions().stream()\n                             .map(description -> description.getTarget().getId())\n                             .collect(Collectors.toSet());\n-                    return new LoadBalancer(id, LoadBalancer.State.ACTIVE, ips);\n+                    return new LoadBalancer(loadBalancerId, LoadBalancer.State.ACTIVE, ips);\n                 })\n                 .onErrorResumeNext(throwable -> {\n                     connectorMetrics.failure(AwsLoadBalancerConnectorMetrics.AwsLoadBalancerMethods.DescribeTargetHealth, throwable, startTime);\n                     if (throwable instanceof TargetGroupNotFoundException) {\n-                        return Single.just(new LoadBalancer(id, LoadBalancer.State.REMOVED, Collections.emptySet()));\n+                        return Single.just(new LoadBalancer(loadBalancerId, LoadBalancer.State.REMOVED, Collections.emptySet()));\n                     }\n                     return Single.error(throwable);\n                 });\n     }\n+\n+    private AmazonElasticLoadBalancingAsync getClient(String loadBalancerId) {\n+        Arn arn = Arn.fromString(loadBalancerId);\n+        return clientProvider.getLoadBalancingClient(arn.getAccountId());", "originalCommit": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NDIwMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386594200", "bodyText": "yes, a valid ARN must always contain the accountId and Arn.fromString(loadBalancerId) does the validation.", "author": "corindwyer", "createdAt": "2020-03-02T19:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwOTQ5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTcxNA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386519714", "bodyText": "Looks like we are using string representation arn.toString() returned by this function. Do we need to build Arn object or would we rather build a string and return just that?", "author": "joshi-keyur", "createdAt": "2020-03-02T16:56:42Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n+            String region = configuration.getRegion().trim().toLowerCase();\n+            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n+            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                    .withCredentials(credentialsProvider)\n+                    .withRegion(region)\n+                    .build();\n+        });\n+    }\n+\n+    private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n+        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n+            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n+            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n+            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+\n+            return new STSAssumeRoleSessionCredentialsProvider.Builder(roleArn.toString(), roleSessionName)\n+                    .withStsClient(stsClient)\n+                    .withRoleSessionDurationSeconds(roleSessionDurationSeconds)\n+                    .build();\n+        });\n+    }\n+\n+    private Arn getControlPlaneRoleArnForAccount(String accountId) {", "originalCommit": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyMjM4NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386522384", "bodyText": "I am using the ARN builder in order for it to provide validations and guarantee what is outputted is a valid ARN.", "author": "corindwyer", "createdAt": "2020-03-02T17:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\nindex bb90b7eed..cd780b786 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n\n@@ -1,7 +1,7 @@\n package com.netflix.titus.ext.aws;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.inject.Inject;\n import javax.inject.Singleton;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5ODE2MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386598160", "bodyText": "How do we make sure the credentials provider in the Map is still valid and has not expired the session duration when first constructed?", "author": "joshi-keyur", "createdAt": "2020-03-02T19:21:37Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.titus.ext.aws;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.amazonaws.arn.Arn;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsync;\n+import com.amazonaws.services.elasticloadbalancingv2.AmazonElasticLoadBalancingAsyncClientBuilder;\n+import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsync;\n+\n+@Singleton\n+public class AmazonClientProvider {\n+\n+    private final AwsConfiguration configuration;\n+    private final AWSSecurityTokenServiceAsync stsClient;\n+\n+    private ConcurrentMap<String, AWSCredentialsProvider> awsCredentialsByAccountId = new ConcurrentHashMap<>();\n+    private ConcurrentMap<String, AmazonElasticLoadBalancingAsync> loadBalancerClients = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public AmazonClientProvider(AwsConfiguration configuration,\n+                                AWSSecurityTokenServiceAsync stsClient) {\n+        this.configuration = configuration;\n+        this.stsClient = stsClient;\n+    }\n+\n+    public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n+        return loadBalancerClients.computeIfAbsent(accountId, id -> {", "originalCommit": "c8ada91d64cf552f454d1116c70a1e29d5dd58a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzg4Ng==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386633886", "bodyText": "The STSAssumeRoleSessionCredentialsProvider has a background thread that does the automatic refreshing.", "author": "corindwyer", "createdAt": "2020-03-02T20:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5ODE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\nindex bb90b7eed..cd780b786 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n\n@@ -1,7 +1,7 @@\n package com.netflix.titus.ext.aws;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.inject.Inject;\n import javax.inject.Singleton;\n \n"}}, {"oid": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "url": "https://github.com/Netflix/titus-control-plane/commit/30c6b707dc58633bef7f543c1cccf19c60ff0d73", "message": "add double checked log to providers", "committedDate": "2020-03-02T20:28:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTk0Mw==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386641943", "bodyText": "minor: sinchronize on an instance level mutex just to avoid issues when this class is not being used as a singleton (e.g.: tests)", "author": "fabiokung", "createdAt": "2020-03-02T20:49:59Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {", "originalCommit": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzg1Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386643852", "bodyText": "Fixed", "author": "corindwyer", "createdAt": "2020-03-02T20:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fe8eb8eb1eb272fb070959150ff49a9d05cd04d9", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\nindex cd780b786..43ea8b745 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n\n@@ -31,7 +31,7 @@ public class AmazonClientProvider {\n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n         AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n         if (client == null) {\n-            synchronized (AmazonClientProvider.class) {\n+            synchronized (this) {\n                 client = loadBalancerClients.get(accountId);\n                 if (client == null) {\n                     String region = configuration.getRegion().trim().toLowerCase();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjIwMg==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386642202", "bodyText": "same as above", "author": "fabiokung", "createdAt": "2020-03-02T20:50:31Z", "path": "titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java", "diffHunk": "@@ -29,27 +29,43 @@ public AmazonClientProvider(AwsConfiguration configuration,\n     }\n \n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n-        return loadBalancerClients.computeIfAbsent(accountId, id -> {\n-            String region = configuration.getRegion().trim().toLowerCase();\n-            AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(id);\n-            return AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n-                    .withCredentials(credentialsProvider)\n-                    .withRegion(region)\n-                    .build();\n-        });\n+        AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n+        if (client == null) {\n+            synchronized (AmazonClientProvider.class) {\n+                client = loadBalancerClients.get(accountId);\n+                if (client == null) {\n+                    String region = configuration.getRegion().trim().toLowerCase();\n+                    AWSCredentialsProvider credentialsProvider = getAwsCredentialsProvider(accountId);\n+                    client = AmazonElasticLoadBalancingAsyncClientBuilder.standard()\n+                            .withCredentials(credentialsProvider)\n+                            .withRegion(region)\n+                            .build();\n+                    loadBalancerClients.put(accountId, client);\n+                }\n+            }\n+        }\n+        return client;\n     }\n \n     private AWSCredentialsProvider getAwsCredentialsProvider(String accountId) {\n-        return awsCredentialsByAccountId.computeIfAbsent(accountId, id -> {\n-            String roleSessionName = configuration.getControlPlaneRoleSessionName();\n-            int roleSessionDurationSeconds = configuration.getControlPlaneRoleSessionDurationSeconds();\n-            Arn roleArn = getControlPlaneRoleArnForAccount(id);\n+        AWSCredentialsProvider credentialsProvider = awsCredentialsByAccountId.get(accountId);\n+        if (credentialsProvider == null) {\n+            synchronized (AmazonClientProvider.class) {", "originalCommit": "30c6b707dc58633bef7f543c1cccf19c60ff0d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzg4MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/796#discussion_r386643880", "bodyText": "Fixed", "author": "corindwyer", "createdAt": "2020-03-02T20:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "fe8eb8eb1eb272fb070959150ff49a9d05cd04d9", "chunk": "diff --git a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\nindex cd780b786..43ea8b745 100644\n--- a/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n+++ b/titus-ext/aws/src/main/java/com/netflix/titus/ext/aws/AmazonClientProvider.java\n\n@@ -31,7 +31,7 @@ public class AmazonClientProvider {\n     public AmazonElasticLoadBalancingAsync getLoadBalancingClient(String accountId) {\n         AmazonElasticLoadBalancingAsync client = loadBalancerClients.get(accountId);\n         if (client == null) {\n-            synchronized (AmazonClientProvider.class) {\n+            synchronized (this) {\n                 client = loadBalancerClients.get(accountId);\n                 if (client == null) {\n                     String region = configuration.getRegion().trim().toLowerCase();\n"}}, {"oid": "fe8eb8eb1eb272fb070959150ff49a9d05cd04d9", "url": "https://github.com/Netflix/titus-control-plane/commit/fe8eb8eb1eb272fb070959150ff49a9d05cd04d9", "message": "synchronize on the instance instead of class", "committedDate": "2020-03-02T20:53:31Z", "type": "commit"}]}