{"pr_number": 782, "pr_title": "Job constraints to Kube primitives mapping", "pr_createdAt": "2020-02-20T06:20:03Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/782", "timeline": [{"oid": "e10f2f73163f82ee074e70028bdf39f53734d060", "url": "https://github.com/Netflix/titus-control-plane/commit/e10f2f73163f82ee074e70028bdf39f53734d060", "message": "Job constraints to Kube primitives mapping", "committedDate": "2020-02-20T06:38:43Z", "type": "commit"}, {"oid": "e10f2f73163f82ee074e70028bdf39f53734d060", "url": "https://github.com/Netflix/titus-control-plane/commit/e10f2f73163f82ee074e70028bdf39f53734d060", "message": "Job constraints to Kube primitives mapping", "committedDate": "2020-02-20T06:38:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDY2MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382144660", "bodyText": "it seems SchedulingConstaintValidator assumes they are always lowercase", "author": "fabiokung", "createdAt": "2020-02-20T17:22:26Z", "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/JobConstraints.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.api.jobmanager;\n+\n+import java.util.Set;\n+\n+import static com.netflix.titus.common.util.CollectionsExt.asSet;\n+\n+/**\n+ * Constants and functions for job soft and hard constraints. Constraint names are case insensitive.", "originalCommit": "e10f2f73163f82ee074e70028bdf39f53734d060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1ODI4Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382158282", "bodyText": "We ignore case, so it is ok for a user to pass for example ExclusiveHost", "author": "tbak", "createdAt": "2020-02-20T17:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDY2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NjY2MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382146660", "bodyText": "should we add this only if isOwnedByKubeScheduler()? Any harm in adding it when tasks are being scheduled by Fenzo? (i.e.: will it negatively impact other controllers?)", "author": "fabiokung", "createdAt": "2020-02-20T17:26:01Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultTaskToPodConverter.java", "diffHunk": "@@ -114,7 +122,8 @@ public V1Pod apply(Job<?> job, Task task) {\n                 .schedulerName(\"default-scheduler\")\n                 .containers(Collections.singletonList(container))\n                 .terminationGracePeriodSeconds(POD_TERMINATION_GRACE_PERIOD_SECONDS)\n-                .restartPolicy(NEVER_RESTART_POLICY);\n+                .restartPolicy(NEVER_RESTART_POLICY)\n+                .affinity(podAffinityFactory.buildV1Affinity(job, task));", "originalCommit": "e10f2f73163f82ee074e70028bdf39f53734d060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1ODYxOA==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382158618", "bodyText": "This check is made earlier. This code is executed only with direct (non Fenzo) scheduling.", "author": "tbak", "createdAt": "2020-02-20T17:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NjY2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwOTkxMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382709913", "bodyText": "Boolean.valueOf?", "author": "corindwyer", "createdAt": "2020-02-21T17:28:38Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.JobConstraints;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+import io.kubernetes.client.models.V1LabelSelector;\n+import io.kubernetes.client.models.V1LabelSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeAffinity;\n+import io.kubernetes.client.models.V1NodeSelector;\n+import io.kubernetes.client.models.V1NodeSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeSelectorTerm;\n+import io.kubernetes.client.models.V1PodAffinityTerm;\n+import io.kubernetes.client.models.V1PodAntiAffinity;\n+import io.kubernetes.client.models.V1PreferredSchedulingTerm;\n+import io.kubernetes.client.models.V1WeightedPodAffinityTerm;\n+\n+@Singleton\n+public class DefaultPodAffinityFactory implements PodAffinityFactory {\n+\n+    private static final int EXCLUSIVE_HOST_WEIGHT = 100;\n+    private static final int UNIQUE_HOST_WEIGHT = 100;\n+    private static final int NODE_AFFINITY_WEIGHT = 100;\n+\n+    @Inject\n+    public DefaultPodAffinityFactory() {\n+    }\n+\n+    @Override\n+    public V1Affinity buildV1Affinity(Job<?> job, Task task) {\n+        return new Processor(job, task).build();\n+    }\n+\n+    private class Processor {\n+\n+        private final Job<?> job;\n+        private final Task task;\n+        private final V1Affinity v1Affinity;\n+\n+        private Processor(Job<?> job, Task task) {\n+            this.job = job;\n+            this.task = task;\n+            this.v1Affinity = new V1Affinity();\n+\n+            processJobConstraints(job.getJobDescriptor().getContainer().getHardConstraints(), true);\n+            processJobConstraints(job.getJobDescriptor().getContainer().getSoftConstraints(), false);\n+        }\n+\n+        private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {", "originalCommit": "e10f2f73163f82ee074e70028bdf39f53734d060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMDc4OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382720789", "bodyText": "Yes. Even better with Boolean.parseBoolean", "author": "tbak", "createdAt": "2020-02-21T17:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwOTkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0345e7423d3efc54a296d239798a068e34a96b69", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\nindex 2c33800bf..312200b59 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n\n@@ -69,11 +69,11 @@ public class DefaultPodAffinityFactory implements PodAffinityFactory {\n         }\n \n         private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n-            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n+            if (Boolean.parseBoolean(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n                 addExclusiveHostConstraint(hard);\n             }\n \n-            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.UNIQUE_HOST))) {\n+            if (Boolean.parseBoolean(constraints.get(JobConstraints.UNIQUE_HOST))) {\n                 addUniqueHostConstraint(hard);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwOTk3Ng==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382709976", "bodyText": "Boolean.valueOf?", "author": "corindwyer", "createdAt": "2020-02-21T17:28:46Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.api.jobmanager.JobConstraints;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+import io.kubernetes.client.models.V1LabelSelector;\n+import io.kubernetes.client.models.V1LabelSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeAffinity;\n+import io.kubernetes.client.models.V1NodeSelector;\n+import io.kubernetes.client.models.V1NodeSelectorRequirement;\n+import io.kubernetes.client.models.V1NodeSelectorTerm;\n+import io.kubernetes.client.models.V1PodAffinityTerm;\n+import io.kubernetes.client.models.V1PodAntiAffinity;\n+import io.kubernetes.client.models.V1PreferredSchedulingTerm;\n+import io.kubernetes.client.models.V1WeightedPodAffinityTerm;\n+\n+@Singleton\n+public class DefaultPodAffinityFactory implements PodAffinityFactory {\n+\n+    private static final int EXCLUSIVE_HOST_WEIGHT = 100;\n+    private static final int UNIQUE_HOST_WEIGHT = 100;\n+    private static final int NODE_AFFINITY_WEIGHT = 100;\n+\n+    @Inject\n+    public DefaultPodAffinityFactory() {\n+    }\n+\n+    @Override\n+    public V1Affinity buildV1Affinity(Job<?> job, Task task) {\n+        return new Processor(job, task).build();\n+    }\n+\n+    private class Processor {\n+\n+        private final Job<?> job;\n+        private final Task task;\n+        private final V1Affinity v1Affinity;\n+\n+        private Processor(Job<?> job, Task task) {\n+            this.job = job;\n+            this.task = task;\n+            this.v1Affinity = new V1Affinity();\n+\n+            processJobConstraints(job.getJobDescriptor().getContainer().getHardConstraints(), true);\n+            processJobConstraints(job.getJobDescriptor().getContainer().getSoftConstraints(), false);\n+        }\n+\n+        private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n+                addExclusiveHostConstraint(hard);\n+            }\n+\n+            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.UNIQUE_HOST))) {", "originalCommit": "e10f2f73163f82ee074e70028bdf39f53734d060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0345e7423d3efc54a296d239798a068e34a96b69", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\nindex 2c33800bf..312200b59 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n\n@@ -69,11 +69,11 @@ public class DefaultPodAffinityFactory implements PodAffinityFactory {\n         }\n \n         private void processJobConstraints(Map<String, String> constraints, boolean hard) {\n-            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n+            if (Boolean.parseBoolean(constraints.get(JobConstraints.EXCLUSIVE_HOST))) {\n                 addExclusiveHostConstraint(hard);\n             }\n \n-            if (\"true\".equalsIgnoreCase(constraints.get(JobConstraints.UNIQUE_HOST))) {\n+            if (Boolean.parseBoolean(constraints.get(JobConstraints.UNIQUE_HOST))) {\n                 addUniqueHostConstraint(hard);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMTA0MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/782#discussion_r382711041", "bodyText": "Can you add javadocs here?", "author": "corindwyer", "createdAt": "2020-02-21T17:30:59Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import io.kubernetes.client.models.V1Affinity;\n+\n+public interface PodAffinityFactory {", "originalCommit": "e10f2f73163f82ee074e70028bdf39f53734d060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0345e7423d3efc54a296d239798a068e34a96b69", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java\nindex 948668e04..ba66e2dde 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/PodAffinityFactory.java\n\n@@ -20,6 +20,10 @@ import com.netflix.titus.api.jobmanager.model.job.Job;\n import com.netflix.titus.api.jobmanager.model.job.Task;\n import io.kubernetes.client.models.V1Affinity;\n \n+/**\n+ * Builds pod affinity and ant-affinity rules for a job/task. This includes both the job level hard and soft\n+ * constraints, as well as Titus system level constraints.\n+ */\n public interface PodAffinityFactory {\n \n     V1Affinity buildV1Affinity(Job<?> job, Task task);\n"}}, {"oid": "0345e7423d3efc54a296d239798a068e34a96b69", "url": "https://github.com/Netflix/titus-control-plane/commit/0345e7423d3efc54a296d239798a068e34a96b69", "message": "Code review updates", "committedDate": "2020-02-21T17:54:40Z", "type": "commit"}]}