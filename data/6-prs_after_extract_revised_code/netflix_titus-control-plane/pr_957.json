{"pr_number": 957, "pr_title": "Initial persistent volume GC functionality", "pr_createdAt": "2020-11-18T18:27:21Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/957", "timeline": [{"oid": "d3013f536473aae5f54e3f8d96784396a3e7f182", "url": "https://github.com/Netflix/titus-control-plane/commit/d3013f536473aae5f54e3f8d96784396a3e7f182", "message": "Initial persistent volume GC functionality", "committedDate": "2020-11-18T18:23:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyOTk0OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/957#discussion_r526329949", "bodyText": "Add metadata.getName() != null ?", "author": "tbak", "createdAt": "2020-11-18T18:35:45Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.kubernetes.controller;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.model.job.ebs.EbsVolume;\n+import com.netflix.titus.api.jobmanager.service.V3JobOperations;\n+import com.netflix.titus.common.framework.scheduler.LocalScheduler;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.limiter.tokenbucket.FixedIntervalTokenBucketConfiguration;\n+import com.netflix.titus.master.mesos.kubeapiserver.KubeUtil;\n+import com.netflix.titus.runtime.connector.kubernetes.KubeApiFacade;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolume;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.netflix.titus.runtime.kubernetes.KubeConstants.NOT_FOUND;\n+\n+@Singleton\n+public class PersistentVolumeUnassociatedGcController extends BaseGcController<V1PersistentVolume> {\n+    private static final Logger logger = LoggerFactory.getLogger(PersistentVolumeUnassociatedGcController.class);\n+\n+    public static final String PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER = \"persistentVolumeUnassociatedGcController\";\n+    public static final String PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER_DESCRIPTION = \"GC persistent volumes that are no longer associated with active jobs.\";\n+\n+    private final KubeApiFacade kubeApiFacade;\n+    private final KubeControllerConfiguration kubeControllerConfiguration;\n+    private final V3JobOperations v3JobOperations;\n+\n+    private final Map<String, Long> markedPersistentVolumes = new ConcurrentHashMap<>();\n+\n+    @Inject\n+    public PersistentVolumeUnassociatedGcController(TitusRuntime titusRuntime,\n+                                                    LocalScheduler scheduler,\n+                                                    @Named(PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER) FixedIntervalTokenBucketConfiguration tokenBucketConfiguration,\n+                                                    @Named(PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER) ControllerConfiguration controllerConfiguration,\n+                                                    KubeApiFacade kubeApiFacade,\n+                                                    KubeControllerConfiguration kubeControllerConfiguration,\n+                                                    V3JobOperations v3JobOperations) {\n+        super(\n+                PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER,\n+                PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER_DESCRIPTION,\n+                titusRuntime,\n+                scheduler,\n+                tokenBucketConfiguration,\n+                controllerConfiguration\n+        );\n+\n+        this.kubeApiFacade = kubeApiFacade;\n+        this.kubeControllerConfiguration = kubeControllerConfiguration;\n+        this.v3JobOperations = v3JobOperations;\n+    }\n+\n+    @Override\n+    public boolean shouldGc() {\n+        return kubeApiFacade.getPersistentVolumeInformer().hasSynced();\n+    }\n+\n+    @Override\n+    public List<V1PersistentVolume> getItemsToGc() {\n+        Set<String> currentEbsVolumes = v3JobOperations.getJobs().stream()\n+                .flatMap(job -> job.getJobDescriptor().getContainer().getContainerResources().getEbsVolumes().stream())\n+                .map(EbsVolume::getVolumeId)\n+                .collect(Collectors.toSet());\n+        return kubeApiFacade.getPersistentVolumeInformer().getIndexer().list().stream()\n+                .filter(pv -> isPersistentVolumeUnassociated(pv, currentEbsVolumes))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public boolean gcItem(V1PersistentVolume pv) {\n+        String volumeName = KubeUtil.getMetadataName(pv.getMetadata());\n+        try {\n+            kubeApiFacade.getCoreV1Api().deletePersistentVolume(\n+                    volumeName,\n+                    null,\n+                    null,\n+                    1,\n+                    null,\n+                    null,\n+                    null\n+            );\n+            logger.info(\"Successfully deleted persistent volume {}\", volumeName);\n+            return true;\n+        } catch (ApiException e) {\n+            if (!e.getMessage().equalsIgnoreCase(NOT_FOUND)) {\n+                logger.error(\"Failed to delete persistent volume: {} with error: \", volumeName, e);\n+            }\n+        } catch (Exception e) {\n+            logger.error(\"Failed to delete persistent volume: {} with error: \", volumeName, e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if the persistent volume has not been associated with an active job for enough time.\n+     */\n+    @VisibleForTesting\n+    boolean isPersistentVolumeUnassociated(V1PersistentVolume pv, Set<String> ebsVolumeIds) {\n+        V1ObjectMeta metadata = pv.getMetadata();\n+        V1PersistentVolumeStatus status = pv.getStatus();\n+\n+        if (metadata == null || status == null) {", "originalCommit": "d3013f536473aae5f54e3f8d96784396a3e7f182", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ebb69e003a7ed87e6ded03363a2d959bd998b0", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\nindex 425a74367..612b67321 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\n\n@@ -30,6 +30,7 @@ import com.netflix.titus.api.jobmanager.model.job.ebs.EbsVolume;\n import com.netflix.titus.api.jobmanager.service.V3JobOperations;\n import com.netflix.titus.common.framework.scheduler.LocalScheduler;\n import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.StringExt;\n import com.netflix.titus.common.util.limiter.tokenbucket.FixedIntervalTokenBucketConfiguration;\n import com.netflix.titus.master.mesos.kubeapiserver.KubeUtil;\n import com.netflix.titus.runtime.connector.kubernetes.KubeApiFacade;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzMDU1MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/957#discussion_r526330551", "bodyText": "A short comment explaining what it is?", "author": "tbak", "createdAt": "2020-11-18T18:36:44Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.kubernetes.controller;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.model.job.ebs.EbsVolume;\n+import com.netflix.titus.api.jobmanager.service.V3JobOperations;\n+import com.netflix.titus.common.framework.scheduler.LocalScheduler;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.limiter.tokenbucket.FixedIntervalTokenBucketConfiguration;\n+import com.netflix.titus.master.mesos.kubeapiserver.KubeUtil;\n+import com.netflix.titus.runtime.connector.kubernetes.KubeApiFacade;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolume;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.netflix.titus.runtime.kubernetes.KubeConstants.NOT_FOUND;\n+\n+@Singleton\n+public class PersistentVolumeUnassociatedGcController extends BaseGcController<V1PersistentVolume> {\n+    private static final Logger logger = LoggerFactory.getLogger(PersistentVolumeUnassociatedGcController.class);\n+\n+    public static final String PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER = \"persistentVolumeUnassociatedGcController\";\n+    public static final String PERSISTENT_VOLUME_UNASSOCIATED_GC_CONTROLLER_DESCRIPTION = \"GC persistent volumes that are no longer associated with active jobs.\";\n+\n+    private final KubeApiFacade kubeApiFacade;\n+    private final KubeControllerConfiguration kubeControllerConfiguration;\n+    private final V3JobOperations v3JobOperations;\n+\n+    private final Map<String, Long> markedPersistentVolumes = new ConcurrentHashMap<>();", "originalCommit": "d3013f536473aae5f54e3f8d96784396a3e7f182", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57ebb69e003a7ed87e6ded03363a2d959bd998b0", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\nindex 425a74367..612b67321 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/kubernetes/controller/PersistentVolumeUnassociatedGcController.java\n\n@@ -30,6 +30,7 @@ import com.netflix.titus.api.jobmanager.model.job.ebs.EbsVolume;\n import com.netflix.titus.api.jobmanager.service.V3JobOperations;\n import com.netflix.titus.common.framework.scheduler.LocalScheduler;\n import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.StringExt;\n import com.netflix.titus.common.util.limiter.tokenbucket.FixedIntervalTokenBucketConfiguration;\n import com.netflix.titus.master.mesos.kubeapiserver.KubeUtil;\n import com.netflix.titus.runtime.connector.kubernetes.KubeApiFacade;\n"}}, {"oid": "57ebb69e003a7ed87e6ded03363a2d959bd998b0", "url": "https://github.com/Netflix/titus-control-plane/commit/57ebb69e003a7ed87e6ded03363a2d959bd998b0", "message": "Review comments to better handle kube null objects", "committedDate": "2020-11-19T00:16:11Z", "type": "commit"}]}