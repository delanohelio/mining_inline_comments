{"pr_number": 914, "pr_title": "Task termination on bad node condition", "pr_createdAt": "2020-09-08T00:34:26Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/914", "timeline": [{"oid": "b865482039c7249139b28c49986a4e26152c2daa", "url": "https://github.com/Netflix/titus-control-plane/commit/b865482039c7249139b28c49986a4e26152c2daa", "message": "node resolvers- agentManagement and k8s, support bad node condition check", "committedDate": "2020-09-04T06:13:52Z", "type": "commit"}, {"oid": "19cdfab85033596697108e157364ee3fcb2383c0", "url": "https://github.com/Netflix/titus-control-plane/commit/19cdfab85033596697108e157364ee3fcb2383c0", "message": "first cut : node condition control loop for relocation service", "committedDate": "2020-09-05T04:10:26Z", "type": "commit"}, {"oid": "98560768fc138c54000a1631bbac602799c3e474", "url": "https://github.com/Netflix/titus-control-plane/commit/98560768fc138c54000a1631bbac602799c3e474", "message": "unit test for task filtering based on bad node list and eligible job ids", "committedDate": "2020-09-05T06:36:17Z", "type": "commit"}, {"oid": "5f91b61bdf2659fcbdbc8d1b3508e85f229eeed9", "url": "https://github.com/Netflix/titus-control-plane/commit/5f91b61bdf2659fcbdbc8d1b3508e85f229eeed9", "message": "unit test node condition controller (not working yet)", "committedDate": "2020-09-05T18:55:15Z", "type": "commit"}, {"oid": "ab03a8f2adb271cabeac4e097ac981285d018a6c", "url": "https://github.com/Netflix/titus-control-plane/commit/ab03a8f2adb271cabeac4e097ac981285d018a6c", "message": "unit test fixed for nodeConditionCtrl, node condition recency threshold support added", "committedDate": "2020-09-05T22:27:49Z", "type": "commit"}, {"oid": "404f2231f08790936ec4656ec12b9f418e873c9f", "url": "https://github.com/Netflix/titus-control-plane/commit/404f2231f08790936ec4656ec12b9f418e873c9f", "message": "node condition controller interface, default impl refactoring", "committedDate": "2020-09-07T06:21:17Z", "type": "commit"}, {"oid": "ebb8207ede834697239cac51115f8e5924083d98", "url": "https://github.com/Netflix/titus-control-plane/commit/ebb8207ede834697239cac51115f8e5924083d98", "message": "debug line for control loop iteration (node condition controller)", "committedDate": "2020-09-08T00:12:25Z", "type": "commit"}, {"oid": "788f6772a646f76c3171483680c5dc447c487ec7", "url": "https://github.com/Netflix/titus-control-plane/commit/788f6772a646f76c3171483680c5dc447c487ec7", "message": "fixing RelocationIntegrationTest", "committedDate": "2020-09-08T04:26:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMjcyMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485032721", "bodyText": "Import added with no other code changes.", "author": "tbak", "createdAt": "2020-09-08T16:01:56Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java", "diffHunk": "@@ -35,6 +35,7 @@\n import com.netflix.titus.common.util.CollectionsExt;\n import com.netflix.titus.common.util.time.Clock;\n import com.netflix.titus.common.util.tuple.Pair;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java\nindex bdb9367b5..158cc5d23 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/descheduler/DefaultDeschedulerService.java\n\n@@ -35,7 +35,6 @@ import com.netflix.titus.common.runtime.TitusRuntime;\n import com.netflix.titus.common.util.CollectionsExt;\n import com.netflix.titus.common.util.time.Clock;\n import com.netflix.titus.common.util.tuple.Pair;\n-import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n import com.netflix.titus.supplementary.relocation.connector.Node;\n import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n import com.netflix.titus.supplementary.relocation.model.DeschedulingFailure;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDQ2NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485060464", "bodyText": "All upper case?", "author": "tbak", "createdAt": "2020-09-08T16:47:30Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\nindex 2e1143145..573cd5d31 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n\n@@ -11,6 +11,7 @@ import java.util.stream.Collectors;\n import com.google.common.annotations.VisibleForTesting;\n import com.netflix.titus.api.jobmanager.JobAttributes;\n import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n import com.netflix.titus.api.model.callmetadata.CallMetadata;\n import com.netflix.titus.api.model.callmetadata.Caller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDcyNA==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485060724", "bodyText": "Why not built in the field initialization?", "author": "tbak", "createdAt": "2020-09-08T16:47:58Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;\n+\n+    static {\n+        Caller caller = Caller.newBuilder().withCallerType(CallerType.Application).withId(\"titusrelocation\").build();\n+        callMetadata = CallMetadata.newBuilder().withCallers(Collections.singletonList(caller)).withCallReason(\"Bad Node Condition\").build();", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\nindex 2e1143145..573cd5d31 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n\n@@ -11,6 +11,7 @@ import java.util.stream.Collectors;\n import com.google.common.annotations.VisibleForTesting;\n import com.netflix.titus.api.jobmanager.JobAttributes;\n import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n import com.netflix.titus.api.model.callmetadata.CallMetadata;\n import com.netflix.titus.api.model.callmetadata.Caller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MTg4NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485061885", "bodyText": "Should we check the value as well (value == true)?", "author": "tbak", "createdAt": "2020-09-08T16:50:04Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata callMetadata;\n+\n+    static {\n+        Caller caller = Caller.newBuilder().withCallerType(CallerType.Application).withId(\"titusrelocation\").build();\n+        callMetadata = CallMetadata.newBuilder().withCallers(Collections.singletonList(caller)).withCallReason(\"Bad Node Condition\").build();\n+    }\n+\n+    private ScheduleReference scheduleReference;\n+\n+\n+    public DefaultNodeConditionController(RelocationConfiguration relocationConfiguration,\n+                                          NodeDataResolver nodeDataResolver,\n+                                          JobDataReplicator jobDataReplicator,\n+                                          ReadOnlyJobOperations jobOperations,\n+                                          JobManagementClient jobManagementClient,\n+                                          TitusRuntime titusRuntime) {\n+        this.configuration = relocationConfiguration;\n+        this.nodeDataResolver = nodeDataResolver;\n+        this.jobDataReplicator = jobDataReplicator;\n+        this.jobOperations = jobOperations;\n+        this.jobManagementClient = jobManagementClient;\n+        this.metrics = new NodeConditionCtrlMetrics(titusRuntime.getRegistry());\n+        this.titusRuntime = titusRuntime;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.info(\"Activating DefaultNodeConditionController\");\n+        ScheduleDescriptor nodeConditionControlLoopSchedulerDescriptor = ScheduleDescriptor.newBuilder()\n+                .withName(\"nodeConditionCtrl\")\n+                .withDescription(\"Node Condition control loop\")\n+                .withInitialDelay(Duration.ZERO)\n+                .withInterval(Duration.ofMillis(configuration.getNodeConditionControlLoopIntervalMs()))\n+                .withTimeout(Duration.ofMillis(configuration.getNodeConditionControlLoopTimeoutMs()))\n+                .withRetryerSupplier(() -> Retryers.exponentialBackoff(1, 5, TimeUnit.MINUTES))\n+                .build();\n+        this.scheduleReference = titusRuntime.getLocalScheduler().scheduleMono(nodeConditionControlLoopSchedulerDescriptor,\n+                this::handleNodesWithBadCondition, Schedulers.parallel());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        if (scheduleReference != null) {\n+            scheduleReference.cancel();\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    Mono<Void> handleNodesWithBadCondition(ExecutionContext executionContext) {\n+        int iterationCount = executionContext.getExecutionId().getTotal();\n+        logger.debug(\"Starting node condition controller iteration {} ...\", iterationCount);\n+        if (hasStaleData()) {\n+            logger.info(\"Stale data. Skipping the node condition control loop iteration- {} \", iterationCount);\n+            return Mono.empty();\n+        }\n+        return handleNodesWithBadCondition();\n+    }\n+\n+    private boolean hasStaleData() {\n+        long dataStaleness = getDataStalenessMs();\n+        boolean stale = dataStaleness > configuration.getDataStalenessThresholdMs();\n+        metrics.setStaleness(stale, dataStaleness);\n+        return stale;\n+    }\n+\n+    private long getDataStalenessMs() {\n+        return Math.max(nodeDataResolver.getStalenessMs(), jobDataReplicator.getStalenessMs());\n+    }\n+\n+    @Override\n+    public Mono<Void> handleNodesWithBadCondition() {\n+        // Identify bad nodes from node resolver\n+        Map<String, Node> badConditionNodesById = nodeDataResolver.resolve().entrySet().stream().filter(nodeEntry -> nodeEntry.getValue().isInBadCondition())\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+\n+        // Find jobs that are eligible for bad node condition treatment\n+        Set<String> eligibleJobIds = jobOperations.getJobs().stream().filter(job ->\n+                job.getJobDescriptor().getAttributes().containsKey(JobAttributes.JOB_PARAMETER_TERMINATE_ON_BAD_AGENT))", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1MTUxNg==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r489151516", "bodyText": "Good catch", "author": "amit-git", "createdAt": "2020-09-16T04:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MTg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\nindex 2e1143145..573cd5d31 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n\n@@ -11,6 +11,7 @@ import java.util.stream.Collectors;\n import com.google.common.annotations.VisibleForTesting;\n import com.netflix.titus.api.jobmanager.JobAttributes;\n import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n import com.netflix.titus.api.model.callmetadata.CallMetadata;\n import com.netflix.titus.api.model.callmetadata.Caller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MzU5MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485063590", "bodyText": "Just a marek interface? This is internal method that should not be called by an external client.", "author": "tbak", "createdAt": "2020-09-08T16:53:03Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import com.netflix.titus.api.common.LeaderActivationListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+public interface NodeConditionController extends LeaderActivationListener {\n+   Mono<Void> handleNodesWithBadCondition();", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java\nindex d108d09c4..04bd1d432 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionController.java\n\n@@ -6,5 +6,4 @@ import org.slf4j.LoggerFactory;\n import reactor.core.publisher.Mono;\n \n public interface NodeConditionController extends LeaderActivationListener {\n-   Mono<Void> handleNodesWithBadCondition();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDEwNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485064107", "bodyText": "We should also report metrics for terminated tasks and evacuated nodes.", "author": "tbak", "createdAt": "2020-09-08T16:54:02Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import com.netflix.spectator.api.Gauge;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.titus.supplementary.relocation.RelocationMetrics;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class NodeConditionCtrlMetrics {", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1MzA5MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r489153090", "bodyText": "It makes sense to include terminated tasks metric here since the control loop here isn't aware of potential node evacuation scenarios", "author": "amit-git", "createdAt": "2020-09-16T04:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java\nindex 1c6c6cc9f..079458542 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/NodeConditionCtrlMetrics.java\n\n@@ -12,14 +12,20 @@ public class NodeConditionCtrlMetrics {\n     public static String NODE_CONDITION_METRICS_PREFIX = RelocationMetrics.METRIC_ROOT + \"nodeConditionCtrl.\";\n     private final Gauge stalenessStatusGauge;\n     private final Gauge stalenessTimeGauge;\n+    private final Gauge numTasksTerminated;\n \n     public NodeConditionCtrlMetrics(Registry registry) {\n         this.stalenessStatusGauge = registry.gauge(NODE_CONDITION_METRICS_PREFIX + \"stalenessStatus\");\n         this.stalenessTimeGauge = registry.gauge(NODE_CONDITION_METRICS_PREFIX + \"stalenessMs\");\n+        numTasksTerminated = registry.gauge(NODE_CONDITION_METRICS_PREFIX + \"numTasksTerminated\");\n     }\n \n     void setStaleness(boolean stalenessStatus, long stalenessMs) {\n         stalenessStatusGauge.set(stalenessStatus ? 1 : 0);\n         stalenessTimeGauge.set(stalenessMs);\n     }\n+\n+    void setTasksTerminated(int tasksTerminated) {\n+        numTasksTerminated.set(tasksTerminated);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NzE2Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r485067167", "bodyText": "Uppercase?", "author": "tbak", "createdAt": "2020-09-08T16:59:20Z", "path": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.netflix.spectator.api.DefaultRegistry;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.TaskAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.BatchJobTask;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.Task;\n+import com.netflix.titus.api.jobmanager.model.job.ext.BatchJobExt;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.model.ExecutionId;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.testkit.model.job.JobGenerator;\n+import org.junit.Test;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultNodeConditionControllerTest {\n+\n+    enum NodeIds {\n+        node1,", "originalCommit": "788f6772a646f76c3171483680c5dc447c487ec7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java b/titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java\nindex 0c3c43cb4..be54c7415 100644\n--- a/titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java\n+++ b/titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionControllerTest.java\n\n@@ -41,9 +41,9 @@ import static org.mockito.Mockito.when;\n public class DefaultNodeConditionControllerTest {\n \n     enum NodeIds {\n-        node1,\n-        node2,\n-        node3\n+        NODE_1,\n+        NODE_2,\n+        NODE_3\n     }\n \n     @Test\n"}}, {"oid": "8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "url": "https://github.com/Netflix/titus-control-plane/commit/8d1cc74ec57cb6e5a74a8cde7761bc5b2236941a", "message": "updates from review comments", "committedDate": "2020-09-16T19:08:34Z", "type": "commit"}, {"oid": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "url": "https://github.com/Netflix/titus-control-plane/commit/e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "message": "adding metric to track task terminations on bad node condition", "committedDate": "2020-09-21T18:39:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0OTkyMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492849921", "bodyText": "add javadocs for all these new configs", "author": "corindwyer", "createdAt": "2020-09-22T15:54:02Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java", "diffHunk": "@@ -50,4 +50,23 @@\n \n     @DefaultValue(\"NONE\")\n     String getNodeRelocationRequiredImmediatelyTaints();\n+\n+    @DefaultValue(\"UncorrectableMemoryFailure\")", "originalCommit": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b936d6676abaad63545d2b6e0bb9f0ca419ee535", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java\nindex 4057618af..de6bb41a9 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/RelocationConfiguration.java\n\n@@ -63,9 +63,16 @@ public interface RelocationConfiguration {\n     @DefaultValue(\"60000\")\n     long getNodeConditionControlLoopIntervalMs();\n \n+    /**\n+     * Node condition control loop timeout in Millis.\n+     */\n     @DefaultValue(\"300000\")\n     long getNodeConditionControlLoopTimeoutMs();\n \n+    /**\n+     * It represents the last N seconds threshold for which the latest node condition is sustained\n+     * It helps us avoid picking up node conditions that are reached for a very short duration\n+     */\n     @DefaultValue(\"300\")\n     int getNodeConditionTransitionTimeThresholdSeconds();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1NjQ4OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492856489", "bodyText": "Boolean.valueOf to make this cleaner/safer.", "author": "corindwyer", "createdAt": "2020-09-22T16:02:58Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java", "diffHunk": "@@ -47,4 +51,24 @@ static boolean isOwnedByScheduler(String schedulerName, V1Node node) {\n                 KubeConstants.TAINT_SCHEDULER.equals(taint.getKey()) && schedulerName.equals(taint.getValue())\n         );\n     }\n+\n+    @VisibleForTesting\n+    static boolean hasBadCondition(V1Node node, Function<String, Matcher> badConditionExpression,\n+                                   int nodeConditionTransitionTimeThresholdSeconds) {\n+        if (node.getStatus() != null && node.getStatus().getConditions() != null) {\n+            return node.getStatus().getConditions().stream()\n+                    .anyMatch(v1NodeCondition -> badConditionExpression.apply(v1NodeCondition.getType()).matches() &&\n+                            v1NodeCondition.getStatus().equals(\"True\") &&", "originalCommit": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzODQxMg==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492938412", "bodyText": "Good catch", "author": "amit-git", "createdAt": "2020-09-22T18:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1NjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b936d6676abaad63545d2b6e0bb9f0ca419ee535", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java\nindex 5931e5bb4..ee1a771d7 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/NodePredicates.java\n\n@@ -58,7 +58,7 @@ public class NodePredicates {\n         if (node.getStatus() != null && node.getStatus().getConditions() != null) {\n             return node.getStatus().getConditions().stream()\n                     .anyMatch(v1NodeCondition -> badConditionExpression.apply(v1NodeCondition.getType()).matches() &&\n-                            v1NodeCondition.getStatus().equals(\"True\") &&\n+                            Boolean.parseBoolean(v1NodeCondition.getStatus()) &&\n                             !isNodeConditionTransitionedRecently(v1NodeCondition, nodeConditionTransitionTimeThresholdSeconds));\n         }\n         return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2MTg0OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/914#discussion_r492861848", "bodyText": "I think using a more descriptive reason here would be better like: This task was automatically terminated because the underlying host had issues.", "author": "corindwyer", "createdAt": "2020-09-22T16:10:41Z", "path": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.netflix.titus.supplementary.relocation.workflow;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.netflix.titus.api.jobmanager.JobAttributes;\n+import com.netflix.titus.api.jobmanager.model.job.Job;\n+import com.netflix.titus.api.jobmanager.model.job.JobDescriptor;\n+import com.netflix.titus.api.jobmanager.service.ReadOnlyJobOperations;\n+import com.netflix.titus.api.model.callmetadata.CallMetadata;\n+import com.netflix.titus.api.model.callmetadata.Caller;\n+import com.netflix.titus.api.model.callmetadata.CallerType;\n+import com.netflix.titus.common.framework.scheduler.ExecutionContext;\n+import com.netflix.titus.common.framework.scheduler.ScheduleReference;\n+import com.netflix.titus.common.framework.scheduler.model.ScheduleDescriptor;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.retry.Retryers;\n+import com.netflix.titus.runtime.connector.jobmanager.JobDataReplicator;\n+import com.netflix.titus.runtime.connector.jobmanager.JobManagementClient;\n+import com.netflix.titus.supplementary.relocation.RelocationConfiguration;\n+import com.netflix.titus.supplementary.relocation.connector.Node;\n+import com.netflix.titus.supplementary.relocation.connector.NodeDataResolver;\n+import com.netflix.titus.supplementary.relocation.util.RelocationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+\n+public class DefaultNodeConditionController implements NodeConditionController {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultNodeConditionController.class);\n+    private final RelocationConfiguration configuration;\n+    private final NodeDataResolver nodeDataResolver;\n+    private final JobDataReplicator jobDataReplicator;\n+    private final ReadOnlyJobOperations jobOperations;\n+    private final JobManagementClient jobManagementClient;\n+    private final NodeConditionCtrlMetrics metrics;\n+    private final TitusRuntime titusRuntime;\n+\n+    private static final CallMetadata CALL_METADATA = buildCallMetadata();\n+    private static final String CALLER_APP_ID = \"titusrelocation\";\n+    private static final String CALL_REASON = \"Bad Node Condition\";", "originalCommit": "e9b707237deb2964d6b5ce6a9f97d72aeb3699a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b936d6676abaad63545d2b6e0bb9f0ca419ee535", "chunk": "diff --git a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\nindex 156f8034c..8da459315 100644\n--- a/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n+++ b/titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/DefaultNodeConditionController.java\n\n@@ -45,7 +45,7 @@ public class DefaultNodeConditionController implements NodeConditionController {\n \n     private static final CallMetadata CALL_METADATA = buildCallMetadata();\n     private static final String CALLER_APP_ID = \"titusrelocation\";\n-    private static final String CALL_REASON = \"Bad Node Condition\";\n+    private static final String CALL_REASON = \"This task was automatically terminated because the underlying host had issues.\";\n \n     private ScheduleReference scheduleReference;\n \n"}}, {"oid": "b936d6676abaad63545d2b6e0bb9f0ca419ee535", "url": "https://github.com/Netflix/titus-control-plane/commit/b936d6676abaad63545d2b6e0bb9f0ca419ee535", "message": "Updates from PR review - II", "committedDate": "2020-09-22T20:34:22Z", "type": "commit"}]}