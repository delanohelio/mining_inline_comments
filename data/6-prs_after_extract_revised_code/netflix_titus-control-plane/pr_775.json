{"pr_number": 775, "pr_title": "Shared Kube informer", "pr_createdAt": "2020-02-14T20:19:23Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/775", "timeline": [{"oid": "a242e90fabe2c580f77bb288910e194bba7f5221", "url": "https://github.com/Netflix/titus-control-plane/commit/a242e90fabe2c580f77bb288910e194bba7f5221", "message": "Shared Kube informer", "committedDate": "2020-02-14T20:17:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMDUxMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379630511", "bodyText": "minor nit: first time I read the code, the name Factory implied to me that new instances would be returned for each call, since this is providing singletons (memoized instances), maybe rename this class to ...Provider, or ...Holder?", "author": "fabiokung", "createdAt": "2020-02-14T20:29:13Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFactory.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.common.util.ExceptionExt;\n+import com.netflix.titus.common.util.guice.annotation.Deactivator;\n+import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.models.V1Node;\n+import io.kubernetes.client.models.V1NodeList;\n+import io.kubernetes.client.models.V1Pod;\n+import io.kubernetes.client.models.V1PodList;\n+import io.kubernetes.client.util.CallGeneratorParams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.netflix.titus.master.mesos.kubeapiserver.KubeUtil.createSharedInformerFactory;\n+\n+@Singleton\n+public class DefaultKubeApiFactory implements KubeApiFactory {", "originalCommit": "a242e90fabe2c580f77bb288910e194bba7f5221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMjY5NQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379632695", "bodyText": "Provider would be better suffix, but it is used by Guice, and it would be confusing.\nI will try to find a better name.", "author": "tbak", "createdAt": "2020-02-14T20:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzMxMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379633310", "bodyText": "well, I already used ...Provider in some other places :-)", "author": "fabiokung", "createdAt": "2020-02-14T20:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\nsimilarity index 62%\nrename from titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFactory.java\nrename to titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\nindex 9c6baa861..208dc14dc 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\n\n@@ -20,10 +20,16 @@ import javax.annotation.PreDestroy;\n import javax.inject.Inject;\n import javax.inject.Singleton;\n \n+import com.netflix.titus.common.runtime.TitusRuntime;\n import com.netflix.titus.common.util.ExceptionExt;\n import com.netflix.titus.common.util.guice.annotation.Deactivator;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResource;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResourceList;\n+import com.squareup.okhttp.Call;\n import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.ApiException;\n import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.apis.CustomObjectsApi;\n import io.kubernetes.client.informer.SharedIndexInformer;\n import io.kubernetes.client.informer.SharedInformerFactory;\n import io.kubernetes.client.models.V1Node;\n"}}, {"oid": "5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "url": "https://github.com/Netflix/titus-control-plane/commit/5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "message": "Code review updates", "committedDate": "2020-02-14T21:23:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1Njk1Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379656952", "bodyText": "Since these are now centrally managed, would be nice to have gauges that show their current size.", "author": "corindwyer", "createdAt": "2020-02-14T21:39:46Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java", "diffHunk": "@@ -119,8 +148,9 @@ private void activate() {\n                         apiClient\n                 );\n \n-                this.nodeInformer = createNodeInformer(sharedInformerFactory, coreV1Api);\n-                this.podInformer = createPodInformer(sharedInformerFactory, coreV1Api);\n+                this.nodeInformer = createNodeInformer(sharedInformerFactory);", "originalCommit": "5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2ODYyMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379668621", "bodyText": "I am working on metrics in another PR. I will include this as well.", "author": "tbak", "createdAt": "2020-02-14T22:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1Njk1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4OTMxMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379689311", "bodyText": "you can drop this TODO, I wanted to use jackson instead of gson to get support for immutable POJOs, but it's not worth the effort", "author": "fabiokung", "createdAt": "2020-02-14T23:33:34Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.ExceptionExt;\n+import com.netflix.titus.common.util.guice.annotation.Deactivator;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResource;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResourceList;\n+import com.squareup.okhttp.Call;\n+import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.ApiException;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.apis.CustomObjectsApi;\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.models.V1Node;\n+import io.kubernetes.client.models.V1NodeList;\n+import io.kubernetes.client.models.V1Pod;\n+import io.kubernetes.client.models.V1PodList;\n+import io.kubernetes.client.util.CallGeneratorParams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.netflix.titus.master.mesos.kubeapiserver.KubeUtil.createSharedInformerFactory;\n+\n+@Singleton\n+public class DefaultKubeApiFacade implements KubeApiFacade {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultKubeApiFacade.class);\n+\n+    private static final String KUBERNETES_NAMESPACE = \"default\";\n+\n+    private static final String OPPORTUNISTIC_RESOURCE_GROUP = \"titus.netflix.com\";\n+    private static final String OPPORTUNISTIC_RESOURCE_VERSION = \"v1\";\n+    private static final String OPPORTUNISTIC_RESOURCE_NAMESPACE = \"default\";\n+    private static final String OPPORTUNISTIC_RESOURCE_PLURAL = \"opportunistic-resources\";\n+\n+    private final DirectKubeConfiguration configuration;\n+\n+    private final ApiClient apiClient;\n+    private final CoreV1Api coreV1Api;\n+    private final CustomObjectsApi customObjectsApi;\n+    private final TitusRuntime titusRuntime;\n+\n+    private final Object activationLock = new Object();\n+\n+    private volatile SharedInformerFactory sharedInformerFactory;\n+    private volatile SharedIndexInformer<V1Node> nodeInformer;\n+    private volatile SharedIndexInformer<V1Pod> podInformer;\n+    private volatile SharedIndexInformer<V1OpportunisticResource> opportunisticResourceInformer;\n+\n+    private volatile boolean deactivated;\n+\n+    @Inject\n+    public DefaultKubeApiFacade(DirectKubeConfiguration configuration, ApiClient apiClient, TitusRuntime titusRuntime) {\n+        this.configuration = configuration;\n+        this.apiClient = apiClient;\n+        this.coreV1Api = new CoreV1Api(apiClient);\n+        this.customObjectsApi = new CustomObjectsApi(apiClient);\n+        this.titusRuntime = titusRuntime;\n+    }\n+\n+    @PreDestroy\n+    public void shutdown() {\n+        if (sharedInformerFactory != null) {\n+            sharedInformerFactory.stopAllRegisteredInformers();\n+        }\n+    }\n+\n+    @Deactivator\n+    public void deactivate() {\n+        if (!deactivated) {\n+            synchronized (activationLock) {\n+                shutdown();\n+                this.deactivated = true;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ApiClient getApiClient() {\n+        activate();\n+        return apiClient;\n+    }\n+\n+    @Override\n+    public CoreV1Api getCoreV1Api() {\n+        activate();\n+        return coreV1Api;\n+    }\n+\n+    @Override\n+    public CustomObjectsApi getCustomObjectsApi() {\n+        activate();\n+        return customObjectsApi;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1Node> getNodeInformer() {\n+        activate();\n+        return nodeInformer;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1Pod> getPodInformer() {\n+        activate();\n+        return podInformer;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1OpportunisticResource> getOpportunisticResourceInformer() {\n+        activate();\n+        return opportunisticResourceInformer;\n+    }\n+\n+    private void activate() {\n+        synchronized (activationLock) {\n+            if (deactivated) {\n+                throw new IllegalStateException(\"Deactivated\");\n+            }\n+\n+            if (sharedInformerFactory != null) {\n+                return;\n+            }\n+\n+            try {\n+                this.sharedInformerFactory = createSharedInformerFactory(\n+                        \"kube-api-server-integrator-shared-informer-\",\n+                        apiClient\n+                );\n+\n+                this.nodeInformer = createNodeInformer(sharedInformerFactory);\n+                this.podInformer = createPodInformer(sharedInformerFactory);\n+                this.opportunisticResourceInformer = createOpportunisticResourceInformer(sharedInformerFactory);\n+\n+                sharedInformerFactory.startAllRegisteredInformers();\n+\n+                logger.info(\"Kube node and pod informers activated\");\n+            } catch (Exception e) {\n+                logger.error(\"Could not initialize Kube client shared informer\", e);\n+                if (sharedInformerFactory != null) {\n+                    ExceptionExt.silent(() -> sharedInformerFactory.stopAllRegisteredInformers());\n+                }\n+                sharedInformerFactory = null;\n+                nodeInformer = null;\n+                podInformer = null;\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private SharedIndexInformer<V1Node> createNodeInformer(SharedInformerFactory sharedInformerFactory) {\n+        return sharedInformerFactory.sharedIndexInformerFor(\n+                (CallGeneratorParams params) -> coreV1Api.listNodeCall(\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        params.resourceVersion,\n+                        params.timeoutSeconds,\n+                        params.watch,\n+                        null,\n+                        null),\n+                V1Node.class,\n+                V1NodeList.class,\n+                configuration.getKubeApiServerIntegratorRefreshIntervalMs()\n+        );\n+    }\n+\n+    private SharedIndexInformer<V1Pod> createPodInformer(SharedInformerFactory sharedInformerFactory) {\n+        return sharedInformerFactory.sharedIndexInformerFor(\n+                (CallGeneratorParams params) -> coreV1Api.listNamespacedPodCall(\n+                        KUBERNETES_NAMESPACE,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        params.resourceVersion,\n+                        params.timeoutSeconds,\n+                        params.watch,\n+                        null,\n+                        null\n+                ),\n+                V1Pod.class,\n+                V1PodList.class,\n+                configuration.getKubeApiServerIntegratorRefreshIntervalMs()\n+        );\n+    }\n+\n+    private SharedIndexInformer<V1OpportunisticResource> createOpportunisticResourceInformer(SharedInformerFactory sharedInformerFactory) {\n+        // TODO(fabio): enhance the kube client to support custom JSON deserialization options", "originalCommit": "5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c0e91345e5e3d632be9f2632217cfda91a7fd80", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\nindex 208dc14dc..097c31944 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\n\n@@ -209,7 +209,6 @@ public class DefaultKubeApiFacade implements KubeApiFacade {\n     }\n \n     private SharedIndexInformer<V1OpportunisticResource> createOpportunisticResourceInformer(SharedInformerFactory sharedInformerFactory) {\n-        // TODO(fabio): enhance the kube client to support custom JSON deserialization options\n         return sharedInformerFactory.sharedIndexInformerFor(\n                 this::listOpportunisticResourcesCall,\n                 V1OpportunisticResource.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5MDUwMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379690503", "bodyText": "probably safe to remove this try catch now and the return null below", "author": "fabiokung", "createdAt": "2020-02-14T23:37:48Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.direct;\n+\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import com.netflix.titus.common.util.ExceptionExt;\n+import com.netflix.titus.common.util.guice.annotation.Deactivator;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResource;\n+import com.netflix.titus.master.mesos.kubeapiserver.model.v1.V1OpportunisticResourceList;\n+import com.squareup.okhttp.Call;\n+import io.kubernetes.client.ApiClient;\n+import io.kubernetes.client.ApiException;\n+import io.kubernetes.client.apis.CoreV1Api;\n+import io.kubernetes.client.apis.CustomObjectsApi;\n+import io.kubernetes.client.informer.SharedIndexInformer;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.models.V1Node;\n+import io.kubernetes.client.models.V1NodeList;\n+import io.kubernetes.client.models.V1Pod;\n+import io.kubernetes.client.models.V1PodList;\n+import io.kubernetes.client.util.CallGeneratorParams;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.netflix.titus.master.mesos.kubeapiserver.KubeUtil.createSharedInformerFactory;\n+\n+@Singleton\n+public class DefaultKubeApiFacade implements KubeApiFacade {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultKubeApiFacade.class);\n+\n+    private static final String KUBERNETES_NAMESPACE = \"default\";\n+\n+    private static final String OPPORTUNISTIC_RESOURCE_GROUP = \"titus.netflix.com\";\n+    private static final String OPPORTUNISTIC_RESOURCE_VERSION = \"v1\";\n+    private static final String OPPORTUNISTIC_RESOURCE_NAMESPACE = \"default\";\n+    private static final String OPPORTUNISTIC_RESOURCE_PLURAL = \"opportunistic-resources\";\n+\n+    private final DirectKubeConfiguration configuration;\n+\n+    private final ApiClient apiClient;\n+    private final CoreV1Api coreV1Api;\n+    private final CustomObjectsApi customObjectsApi;\n+    private final TitusRuntime titusRuntime;\n+\n+    private final Object activationLock = new Object();\n+\n+    private volatile SharedInformerFactory sharedInformerFactory;\n+    private volatile SharedIndexInformer<V1Node> nodeInformer;\n+    private volatile SharedIndexInformer<V1Pod> podInformer;\n+    private volatile SharedIndexInformer<V1OpportunisticResource> opportunisticResourceInformer;\n+\n+    private volatile boolean deactivated;\n+\n+    @Inject\n+    public DefaultKubeApiFacade(DirectKubeConfiguration configuration, ApiClient apiClient, TitusRuntime titusRuntime) {\n+        this.configuration = configuration;\n+        this.apiClient = apiClient;\n+        this.coreV1Api = new CoreV1Api(apiClient);\n+        this.customObjectsApi = new CustomObjectsApi(apiClient);\n+        this.titusRuntime = titusRuntime;\n+    }\n+\n+    @PreDestroy\n+    public void shutdown() {\n+        if (sharedInformerFactory != null) {\n+            sharedInformerFactory.stopAllRegisteredInformers();\n+        }\n+    }\n+\n+    @Deactivator\n+    public void deactivate() {\n+        if (!deactivated) {\n+            synchronized (activationLock) {\n+                shutdown();\n+                this.deactivated = true;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public ApiClient getApiClient() {\n+        activate();\n+        return apiClient;\n+    }\n+\n+    @Override\n+    public CoreV1Api getCoreV1Api() {\n+        activate();\n+        return coreV1Api;\n+    }\n+\n+    @Override\n+    public CustomObjectsApi getCustomObjectsApi() {\n+        activate();\n+        return customObjectsApi;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1Node> getNodeInformer() {\n+        activate();\n+        return nodeInformer;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1Pod> getPodInformer() {\n+        activate();\n+        return podInformer;\n+    }\n+\n+    @Override\n+    public SharedIndexInformer<V1OpportunisticResource> getOpportunisticResourceInformer() {\n+        activate();\n+        return opportunisticResourceInformer;\n+    }\n+\n+    private void activate() {\n+        synchronized (activationLock) {\n+            if (deactivated) {\n+                throw new IllegalStateException(\"Deactivated\");\n+            }\n+\n+            if (sharedInformerFactory != null) {\n+                return;\n+            }\n+\n+            try {\n+                this.sharedInformerFactory = createSharedInformerFactory(\n+                        \"kube-api-server-integrator-shared-informer-\",\n+                        apiClient\n+                );\n+\n+                this.nodeInformer = createNodeInformer(sharedInformerFactory);\n+                this.podInformer = createPodInformer(sharedInformerFactory);\n+                this.opportunisticResourceInformer = createOpportunisticResourceInformer(sharedInformerFactory);\n+\n+                sharedInformerFactory.startAllRegisteredInformers();\n+\n+                logger.info(\"Kube node and pod informers activated\");\n+            } catch (Exception e) {\n+                logger.error(\"Could not initialize Kube client shared informer\", e);\n+                if (sharedInformerFactory != null) {\n+                    ExceptionExt.silent(() -> sharedInformerFactory.stopAllRegisteredInformers());\n+                }\n+                sharedInformerFactory = null;\n+                nodeInformer = null;\n+                podInformer = null;\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private SharedIndexInformer<V1Node> createNodeInformer(SharedInformerFactory sharedInformerFactory) {\n+        return sharedInformerFactory.sharedIndexInformerFor(\n+                (CallGeneratorParams params) -> coreV1Api.listNodeCall(\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        params.resourceVersion,\n+                        params.timeoutSeconds,\n+                        params.watch,\n+                        null,\n+                        null),\n+                V1Node.class,\n+                V1NodeList.class,\n+                configuration.getKubeApiServerIntegratorRefreshIntervalMs()\n+        );\n+    }\n+\n+    private SharedIndexInformer<V1Pod> createPodInformer(SharedInformerFactory sharedInformerFactory) {\n+        return sharedInformerFactory.sharedIndexInformerFor(\n+                (CallGeneratorParams params) -> coreV1Api.listNamespacedPodCall(\n+                        KUBERNETES_NAMESPACE,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        null,\n+                        params.resourceVersion,\n+                        params.timeoutSeconds,\n+                        params.watch,\n+                        null,\n+                        null\n+                ),\n+                V1Pod.class,\n+                V1PodList.class,\n+                configuration.getKubeApiServerIntegratorRefreshIntervalMs()\n+        );\n+    }\n+\n+    private SharedIndexInformer<V1OpportunisticResource> createOpportunisticResourceInformer(SharedInformerFactory sharedInformerFactory) {\n+        // TODO(fabio): enhance the kube client to support custom JSON deserialization options\n+        return sharedInformerFactory.sharedIndexInformerFor(\n+                this::listOpportunisticResourcesCall,\n+                V1OpportunisticResource.class,\n+                V1OpportunisticResourceList.class,\n+                configuration.getKubeOpportunisticRefreshIntervalMs()\n+        );\n+    }\n+\n+    private Call listOpportunisticResourcesCall(CallGeneratorParams params) {\n+        try {", "originalCommit": "5a9adaa37a2d2dbf95115bc3c881777e5efdca70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5MTczMQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/775#discussion_r379691731", "bodyText": "This method throws checked exception. Wrapping it with IllegalStateException", "author": "tbak", "createdAt": "2020-02-14T23:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5MDUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8c0e91345e5e3d632be9f2632217cfda91a7fd80", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\nindex 208dc14dc..097c31944 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultKubeApiFacade.java\n\n@@ -209,7 +209,6 @@ public class DefaultKubeApiFacade implements KubeApiFacade {\n     }\n \n     private SharedIndexInformer<V1OpportunisticResource> createOpportunisticResourceInformer(SharedInformerFactory sharedInformerFactory) {\n-        // TODO(fabio): enhance the kube client to support custom JSON deserialization options\n         return sharedInformerFactory.sharedIndexInformerFor(\n                 this::listOpportunisticResourcesCall,\n                 V1OpportunisticResource.class,\n"}}, {"oid": "8c0e91345e5e3d632be9f2632217cfda91a7fd80", "url": "https://github.com/Netflix/titus-control-plane/commit/8c0e91345e5e3d632be9f2632217cfda91a7fd80", "message": "Code review updates", "committedDate": "2020-02-14T23:42:49Z", "type": "commit"}]}