{"pr_number": 765, "pr_title": "use job runtime limits as the runtime prediction when sensible", "pr_createdAt": "2020-02-07T23:21:40Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/765", "timeline": [{"oid": "fd76190fec6441404268d1ac45e39f6eb8d0f024", "url": "https://github.com/Netflix/titus-control-plane/commit/fd76190fec6441404268d1ac45e39f6eb8d0f024", "message": "reduce the minimum job runtime limit to 5s\n\n... from 60s. This will allow jobs with shorter runtime limits to get\nscheduled opportunistically even without predictions.", "committedDate": "2020-02-14T01:12:44Z", "type": "forcePushed"}, {"oid": "a017af18c687f490d989ab5cf7059a98602dfe8d", "url": "https://github.com/Netflix/titus-control-plane/commit/a017af18c687f490d989ab5cf7059a98602dfe8d", "message": "reduce the minimum job runtime limit to 5s\n\n... from 60s. This will allow jobs with shorter runtime limits to get\nscheduled opportunistically even without predictions.", "committedDate": "2020-02-14T01:29:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379503387", "bodyText": "The description is probably incorrect: the more specific type is required? We do not change type here. It looks like a function composition. In that case this method could be generalized to accept an array of operators.", "author": "tbak", "createdAt": "2020-02-14T15:48:35Z", "path": "titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java", "diffHunk": "@@ -37,4 +40,14 @@\n         }\n         return opt;\n     }\n+\n+    /**\n+     * {@link UnaryOperator} does not have an equivalent of {@link Function#andThen(Function)}, so this can be used when\n+     * the more specific type is required.\n+     */\n+    public static <T> UnaryOperator<T> andThen(UnaryOperator<T> op, UnaryOperator<T> after) {", "originalCommit": "a017af18c687f490d989ab5cf7059a98602dfe8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzODQ3Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379538477", "bodyText": "By more specific type here I mean returning back a UnaryOperator rather than a Function (I\u2019m not referring to the generic type T). The implementation is just a copy-and-pasta of Function#andThen(Function), but returning a UnaryOperator (more specific type) back.\nDoes it mane more sense now? Any suggestion on how to make the doc more clear?", "author": "fabiokung", "createdAt": "2020-02-14T16:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1MTM5Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379551397", "bodyText": "Makes sense. Maybe you can change it to: the more specific type (UnaryOperator) is required to avoid any confusion.", "author": "tbak", "createdAt": "2020-02-14T17:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwMzM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "405d4cff099abbba6707ad4d65cc5258f31be057", "chunk": "diff --git a/titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java b/titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java\nindex 788a4c867..b608fc335 100644\n--- a/titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java\n+++ b/titus-common/src/main/java/com/netflix/titus/common/util/FunctionExt.java\n\n@@ -40,14 +37,4 @@ public final class FunctionExt {\n         }\n         return opt;\n     }\n-\n-    /**\n-     * {@link UnaryOperator} does not have an equivalent of {@link Function#andThen(Function)}, so this can be used when\n-     * the more specific type is required.\n-     */\n-    public static <T> UnaryOperator<T> andThen(UnaryOperator<T> op, UnaryOperator<T> after) {\n-        Objects.requireNonNull(after);\n-        return (T t) -> after.apply(op.apply(t));\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379506340", "bodyText": "In DifferenceResolverUtils we have:\nlong runtimeLimitMs = Math.max(60_000, batchJob.getJobDescriptor().getExtensions().getRuntimeLimitMs());\nWe did this to prevent to unnecessary terminations, due to slowness in state propagation. The runtime limit for a job should be an actual limit + delta. Delta ~60sec is an amount we set here, assuming actual execution time is 0.", "author": "tbak", "createdAt": "2020-02-14T15:53:38Z", "path": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @FieldInvariant(value = \"value <= @constraints.getMaxBatchJobSize()\", message = \"Batch job too big #{value} > #{@constraints.getMaxBatchJobSize()}\")\n     private final int size;\n \n-    @Min(value = 60_000, message = \"Runtime limit too low (must be at least 60sec, but is #{#root}[ms])\")\n+    @Min(value = 5_000, message = \"Runtime limit too low (must be at least 5sec, but is #{#root}[ms])\")", "originalCommit": "a017af18c687f490d989ab5cf7059a98602dfe8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNzA5NA==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379537094", "bodyText": "Good catch. I was planning to update this as well and forgot it. I will get it fixed.", "author": "fabiokung", "createdAt": "2020-02-14T16:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMDU0MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/765#discussion_r379700540", "bodyText": "@tbak since we already check that state == TaskState.Started in DifferenceResolverUtils, I don't think we need to account for propagation delays. I made the fix to always use the same min from BatchJobExt, but that is just a safeguard.\nLet me know what you think.", "author": "fabiokung", "createdAt": "2020-02-15T00:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "405d4cff099abbba6707ad4d65cc5258f31be057", "chunk": "diff --git a/titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java b/titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java\nindex 40f8b1f38..b8d25adda 100644\n--- a/titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java\n+++ b/titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/ext/BatchJobExt.java\n\n@@ -34,7 +34,7 @@ public class BatchJobExt implements JobDescriptor.JobDescriptorExt {\n     @FieldInvariant(value = \"value <= @constraints.getMaxBatchJobSize()\", message = \"Batch job too big #{value} > #{@constraints.getMaxBatchJobSize()}\")\n     private final int size;\n \n-    @Min(value = 5_000, message = \"Runtime limit too low (must be at least 5sec, but is #{#root}[ms])\")\n+    @Min(value = 60_000, message = \"Runtime limit too low (must be at least 60sec, but is #{#root}[ms])\")\n     @FieldInvariant(value = \"value <= @constraints.getMaxRuntimeLimitSec() * 1000\", message = \"Runtime limit too high #{value} > #{@constraints.getMaxRuntimeLimitSec() * 1000}\")\n     private final long runtimeLimitMs;\n \n"}}, {"oid": "405d4cff099abbba6707ad4d65cc5258f31be057", "url": "https://github.com/Netflix/titus-control-plane/commit/405d4cff099abbba6707ad4d65cc5258f31be057", "message": "ignore input attributes that are to be generated", "committedDate": "2020-02-14T22:09:04Z", "type": "commit"}, {"oid": "588f0d64973c63b7b9d4d32f896c6ea51a81a22c", "url": "https://github.com/Netflix/titus-control-plane/commit/588f0d64973c63b7b9d4d32f896c6ea51a81a22c", "message": "cap runtime predictions to the job runtime limit\n\nNo point in predicting a runtime higher than the configured job runtime\nlimit. The runtime limit also act as a fallback when there are no\npredictions available for a job.", "committedDate": "2020-02-14T22:09:04Z", "type": "commit"}, {"oid": "e04f7efaf44cbfbbb43ce3a710452d5656741d27", "url": "https://github.com/Netflix/titus-control-plane/commit/e04f7efaf44cbfbbb43ce3a710452d5656741d27", "message": "reduce the minimum job runtime limit to 5s\n\n... from 60s. This will allow jobs with shorter runtime limits to get\nscheduled opportunistically even without predictions.", "committedDate": "2020-02-14T22:09:04Z", "type": "commit"}, {"oid": "b5b2112494ba64ff5a84c3024f8879ccdd21a682", "url": "https://github.com/Netflix/titus-control-plane/commit/b5b2112494ba64ff5a84c3024f8879ccdd21a682", "message": "integration tests: support for scaling down agents", "committedDate": "2020-02-14T22:09:04Z", "type": "commit"}, {"oid": "b6931a7e2827b338c8f98fe6cdfd694545795a43", "url": "https://github.com/Netflix/titus-control-plane/commit/b6931a7e2827b338c8f98fe6cdfd694545795a43", "message": "improve OpportunisticCpuSchedulingTest flakiness\n\n... by avoiding \"Stuck in Launched\" situations", "committedDate": "2020-02-15T00:27:12Z", "type": "commit"}, {"oid": "b6931a7e2827b338c8f98fe6cdfd694545795a43", "url": "https://github.com/Netflix/titus-control-plane/commit/b6931a7e2827b338c8f98fe6cdfd694545795a43", "message": "improve OpportunisticCpuSchedulingTest flakiness\n\n... by avoiding \"Stuck in Launched\" situations", "committedDate": "2020-02-15T00:27:12Z", "type": "forcePushed"}, {"oid": "cdc370d0599e34e4e63df0013d48cdbd0b5dbc1b", "url": "https://github.com/Netflix/titus-control-plane/commit/cdc370d0599e34e4e63df0013d48cdbd0b5dbc1b", "message": "improve javadoc", "committedDate": "2020-02-15T00:34:41Z", "type": "commit"}]}