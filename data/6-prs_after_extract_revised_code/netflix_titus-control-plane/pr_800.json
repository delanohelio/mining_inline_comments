{"pr_number": 800, "pr_title": "Add farzone support", "pr_createdAt": "2020-03-04T23:15:25Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/800", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388422178", "bodyText": "The first ipv4 ip address should be used as the host ip like in:\nhttps://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453", "author": "corindwyer", "createdAt": "2020-03-05T16:47:58Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -264,6 +266,16 @@ private Task attachNodeMetadata(Task task, V1Node node) {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n+        List<V1NodeAddress> addresses = node.getStatus().getAddresses();", "originalCommit": "364c6a14e43e5ee4064a76c64a96ad3a624c873b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNDUyNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388424525", "bodyText": "@corindwyer I have seen your recent PR. We should share your address filter in both places. Once you merge, I will rebase and create a function in KubeUtil.", "author": "tbak", "createdAt": "2020-03-05T16:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNzI5Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388427292", "bodyText": "Sounds good. I already merged.", "author": "corindwyer", "createdAt": "2020-03-05T16:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "9f905c8121ea84179c18abaa794810077dbbee6d", "chunk": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 373de600d..340ae1bba 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n\n@@ -266,16 +264,6 @@ public class KubeNotificationProcessor {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n-        List<V1NodeAddress> addresses = node.getStatus().getAddresses();\n-        if (!CollectionsExt.isNullOrEmpty(addresses)) {\n-            addresses.forEach(address -> {\n-                if (StringExt.isNotEmpty(address.getAddress()) && \"InternalIP\".equals(address.getType())) {\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, address.getAddress());\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, address.getAddress());\n-                }\n-            });\n-        }\n-\n         if (agentAttributes.isEmpty()) {\n             return task;\n         }\n"}}, {"oid": "9f905c8121ea84179c18abaa794810077dbbee6d", "url": "https://github.com/Netflix/titus-control-plane/commit/9f905c8121ea84179c18abaa794810077dbbee6d", "message": "Add farzone support", "committedDate": "2020-03-05T16:52:31Z", "type": "commit"}, {"oid": "372302aaacc312652a402b6b28e0739d7013cb76", "url": "https://github.com/Netflix/titus-control-plane/commit/372302aaacc312652a402b6b28e0739d7013cb76", "message": "Add agent host attributes", "committedDate": "2020-03-05T16:52:31Z", "type": "commit"}, {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "message": "Reuse node IP extractor from KubeApiServerIntegrator", "committedDate": "2020-03-05T17:16:57Z", "type": "commit"}, {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "message": "Reuse node IP extractor from KubeApiServerIntegrator", "committedDate": "2020-03-05T17:16:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjIzMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388446230", "bodyText": "this looks incorrectly indented", "author": "corindwyer", "createdAt": "2020-03-05T17:26:12Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -191,4 +197,12 @@ public static boolean isOwnedByKubeScheduler(V1Pod v1Pod) {\n         }\n         return false;\n     }\n+\n+    public static String getNodeIpV4Address(V1Node node) {\n+        return   node.getStatus().getAddresses().stream()", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTkyOA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388491928", "bodyText": "why not centralize this check into the kubeSchedulerPredicate?", "author": "fabiokung", "createdAt": "2020-03-05T18:51:16Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java", "diffHunk": "@@ -238,7 +244,7 @@ public BatchDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzkyMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388497920", "bodyText": "I have tried that, but the code is in a different subproject.", "author": "tbak", "createdAt": "2020-03-05T19:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTkyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjIyMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388492220", "bodyText": "same as above, centralize this into the predicate", "author": "fabiokung", "createdAt": "2020-03-05T18:51:45Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java", "diffHunk": "@@ -261,7 +267,7 @@ public ServiceDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODI0MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388498240", "bodyText": "I have tried that, but the code is in a different subproject.", "author": "tbak", "createdAt": "2020-03-05T19:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjIyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDI2MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388494261", "bodyText": "could this be generalized to any availabilityZones? Does it matter that it is a farzone? I'd recommend naming this isAvailabilityZoneOwnedByKubeScheduler() and configuration.getAvailabilityZonesOwnedByKubeScheduler(), or similar.\nIOW, can we abstract away that some AZs are farzones?", "author": "fabiokung", "createdAt": "2020-03-05T18:55:22Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -148,4 +161,48 @@ public static String formatV1ContainerState(V1ContainerState containerState) {\n \n         return \"{state=<not set>}\";\n     }\n+\n+    /**\n+     * If a job has an availability zone hard constraint with a farzone id, return this farzone id.\n+     */\n+    public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job) {\n+        List<String> farzones = configuration.getFarzones();", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTYzNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388499635", "bodyText": "It is more than an additional zone. Farzones are excluded from the default scheduling, and there is extra logic around that. I would prefer to keep it explicit.", "author": "tbak", "createdAt": "2020-03-05T19:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDI2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTEwNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388495105", "bodyText": "same, generalize to any AZs, farzone or not", "author": "fabiokung", "createdAt": "2020-03-05T18:56:44Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -181,6 +186,12 @@ private void addNodeAffinityPreferredSelectorConstraint(String key, String value\n             term.addMatchExpressionsItem(requirement);\n         }\n \n+        private void processFarzoneConstraints() {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTc5OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388499799", "bodyText": "See my comment above ^^^.", "author": "tbak", "createdAt": "2020-03-05T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTEwNQ=="}], "type": "inlineReview", "revised_code": null}]}