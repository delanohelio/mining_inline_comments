{"pr_number": 804, "pr_title": "add job descriptor annotation", "pr_createdAt": "2020-03-09T16:13:53Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/804", "timeline": [{"oid": "79260c79073becdec5ccf6ed2970b198b7f05edb", "url": "https://github.com/Netflix/titus-control-plane/commit/79260c79073becdec5ccf6ed2970b198b7f05edb", "message": "add job descriptor annotation", "committedDate": "2020-03-09T16:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5OTI0Nw==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r389799247", "bodyText": "worth using a try-with-resources here (and move some of the declarations outside of the try-catch block) just to avoid leaking the stream on errors?", "author": "fabiokung", "createdAt": "2020-03-09T16:16:34Z", "path": "titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java", "diffHunk": "@@ -540,4 +543,24 @@ public static String startWithLowercase(String text) {\n         }\n         return Optional.of(result);\n     }\n+\n+    /**\n+     * GZip a string and base64 encode the result in order to compress a string while keeping the String type.\n+     *\n+     * @return gzipped and base64 encoded string.\n+     */\n+    public static String gzipAndBase64Encode(String s) {\n+        if (StringExt.isEmpty(s)) {\n+            return s;\n+        }\n+        try {\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            GZIPOutputStream gzip = new GZIPOutputStream(out);\n+            gzip.write(s.getBytes());\n+            gzip.close();", "originalCommit": "79260c79073becdec5ccf6ed2970b198b7f05edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTUzNw==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r391809537", "bodyText": "I like this idea, but will address it in a followup PR.", "author": "corindwyer", "createdAt": "2020-03-12T18:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5OTI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "76a0c756a09cafe4c4068fd064cd7da3b076450c", "chunk": "diff --git a/titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java b/titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java\nindex 9d384d977..257e59986 100644\n--- a/titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java\n+++ b/titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java\n\n@@ -563,4 +565,26 @@ public final class StringExt {\n             throw ExceptionExt.rethrow(e);\n         }\n     }\n-}\n+\n+    public static Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName) {\n+        if (isEmpty(getterName)) {\n+            return Either.ofError(new IllegalArgumentException(\"getter name is empty\"));\n+        }\n+        int prefixLen;\n+        if (getterName.startsWith(\"get\")) {\n+            prefixLen = 3;\n+        } else if (getterName.startsWith(\"is\")) {\n+            prefixLen = 2;\n+        } else if (getterName.startsWith(\"has\")) {\n+            prefixLen = 3;\n+        } else {\n+            return Either.ofError(new IllegalArgumentException(String.format(\"getter '%s' does not start with a valid prefix (get|is|has)\", getterName)));\n+        }\n+\n+        if (getterName.length() == prefixLen) {\n+            return Either.ofError(new IllegalArgumentException(String.format(\"getter '%s' has only prefix with empty base name\", getterName)));\n+        }\n+\n+        return Either.ofValue(Character.toLowerCase(getterName.charAt(prefixLen)) + getterName.substring(prefixLen + 1));\n+    }\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNDM1Mw==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r389804353", "bodyText": "minor: use ObjectMappers.storeMapper()#writeValue(OutputStream, Object) to save some heap space, avoid String allocations and unnecessary UTF-16 shenanigans.\nThat way you can also pass in a GZIPOutputStream directly to the writeValue() method and allow chunked encoding of the whole jobDescriptor.", "author": "fabiokung", "createdAt": "2020-03-09T16:24:22Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -209,4 +213,24 @@ public static String getNodeIpV4Address(V1Node node) {\n                 .map(V1NodeAddress::getAddress)\n                 .orElse(\"UnknownIpAddress\");\n     }\n+\n+    public static Map<String, String> createPodAnnotations(\n+            Job<?> job,\n+            byte[] containerInfoData,\n+            Map<String, String> passthroughAttributes,\n+            boolean includeJobDescriptor\n+    ) {\n+        String encodedContainerInfo = Base64.getEncoder().encodeToString(containerInfoData);\n+\n+        Map<String, String> annotations = new HashMap<>(passthroughAttributes);\n+        annotations.putAll(PerformanceToolUtil.toAnnotations(job));\n+        annotations.put(\"containerInfo\", encodedContainerInfo);\n+\n+        if (includeJobDescriptor) {\n+            String jobDescriptorJson = CommonObjectMappers.writeValueAsString(ObjectMappers.storeMapper(), job.getJobDescriptor());", "originalCommit": "79260c79073becdec5ccf6ed2970b198b7f05edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTU2MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r391809561", "bodyText": "I like this idea, but will address it in a followup PR.", "author": "corindwyer", "createdAt": "2020-03-12T18:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNDM1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MTI3MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r389851271", "bodyText": "Looks like this assertion is unique to the input in this case.\nShould we generalize the test and possibly validate the decoded-gunzipped output is the same as input?\nAlso empty string is an interesting case since its output is non-empty. Maybe also handle that instead of returning an empty string. Curious to know what you think.", "author": "joshi-keyur", "createdAt": "2020-03-09T17:38:04Z", "path": "titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java", "diffHunk": "@@ -81,4 +81,11 @@ public void testParseDurationList() {\n                 Duration.ofMillis(1), Duration.ofMillis(2), Duration.ofMillis(3)\n         );\n     }\n+\n+    @Test\n+    public void testGzipAndBase64Encode() {\n+        String input = \"{aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:bbbbbbbbbbbbbbbbbbbbbbbbbbb}\";\n+        String output = StringExt.gzipAndBase64Encode(input);\n+        assertThat(output.length()).isLessThan(input.length());", "originalCommit": "79260c79073becdec5ccf6ed2970b198b7f05edb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTk1MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/804#discussion_r391809950", "bodyText": "I didn't go do that because I didn't write the decode and ungzip method, but I will think about this some more and potentially change it in a followup PR.", "author": "corindwyer", "createdAt": "2020-03-12T18:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1MTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "76a0c756a09cafe4c4068fd064cd7da3b076450c", "chunk": "diff --git a/titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java b/titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java\nindex 5fa61b0f1..3c1efdab6 100644\n--- a/titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java\n+++ b/titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java\n\n@@ -88,4 +89,26 @@ public class StringExtTest {\n         String output = StringExt.gzipAndBase64Encode(input);\n         assertThat(output.length()).isLessThan(input.length());\n     }\n+  \n+    @Test\n+    public void testNameFromJavaBeanGetter() {\n+        assertNameFromJavaBeanGetterReturnsName(\"getMyName\", \"myName\");\n+        assertNameFromJavaBeanGetterReturnsName(\"isMyName\", \"myName\");\n+        assertNameFromJavaBeanGetterReturnsName(\"hasMyName\", \"myName\");\n+\n+        assertNameFromJavaBeanGetterReturnsError(\"badPrefix\");\n+        assertNameFromJavaBeanGetterReturnsError(\"\");\n+        assertNameFromJavaBeanGetterReturnsError(\"has\");\n+    }\n+\n+    private void assertNameFromJavaBeanGetterReturnsName(String methodName, String propertyName) {\n+        Either<String, IllegalArgumentException> result = StringExt.nameFromJavaBeanGetter(methodName);\n+        assertThat(result.hasValue()).isTrue();\n+        assertThat(result.getValue()).isEqualTo(propertyName);\n+    }\n+\n+    private void assertNameFromJavaBeanGetterReturnsError(String methodName) {\n+        Either<String, IllegalArgumentException> result = StringExt.nameFromJavaBeanGetter(methodName);\n+        assertThat(result.hasError()).isTrue();\n+    }\n }\n\\ No newline at end of file\n"}}, {"oid": "76a0c756a09cafe4c4068fd064cd7da3b076450c", "url": "https://github.com/Netflix/titus-control-plane/commit/76a0c756a09cafe4c4068fd064cd7da3b076450c", "message": "Merge branch 'master' into job-descriptor-annotation", "committedDate": "2020-03-12T18:26:31Z", "type": "commit"}]}