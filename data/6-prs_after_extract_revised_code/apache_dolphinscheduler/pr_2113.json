{"pr_number": 2113, "pr_title": "access field handle of FileDescriptor in ProcessImplForWin32 by reflection for portability", "pr_createdAt": "2020-03-08T05:20:51Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/2113", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNjc0NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2113#discussion_r389336745", "bodyText": "I'm unfamiliar with exception strategy in DolphinScheduler so it would be better our committers can check whether the exception thrown obeys conventions.", "author": "tisonkun", "createdAt": "2020-03-08T05:22:01Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java", "diffHunk": "@@ -33,8 +34,17 @@\n import static com.sun.jna.platform.win32.WinBase.STILL_ACTIVE;\n \n public class ProcessImplForWin32 extends Process {\n-    private static final sun.misc.JavaIOFileDescriptorAccess fdAccess\n-            = sun.misc.SharedSecrets.getJavaIOFileDescriptorAccess();\n+\n+    private static final Field FD_ACCESS;\n+\n+    static{\n+        try {\n+            FD_ACCESS = FileDescriptor.class.getDeclaredField(\"fd\");\n+            FD_ACCESS.setAccessible(true);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(e);", "originalCommit": "31be59d294f24c4b47e481244100bf6064f5acfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed6765ae31f2bee41d373fb178cbb1f027547c4b", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\nindex f9c1ba760..c9db8b911 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n\n@@ -37,7 +37,7 @@ public class ProcessImplForWin32 extends Process {\n \n     private static final Field FD_ACCESS;\n \n-    static{\n+    static {\n         try {\n             FD_ACCESS = FileDescriptor.class.getDeclaredField(\"fd\");\n             FD_ACCESS.setAccessible(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNjc1MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2113#discussion_r389336751", "bodyText": "ditto", "author": "tisonkun", "createdAt": "2020-03-08T05:22:12Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java", "diffHunk": "@@ -46,6 +56,22 @@\n \n     private static final WinNT.HANDLE JAVA_INVALID_HANDLE_VALUE = new WinNT.HANDLE(Pointer.createConstant(-1));\n \n+    private static void setFd(FileDescriptor obj, long fd) {\n+        try {\n+            FD_ACCESS.set(obj, fd);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);", "originalCommit": "31be59d294f24c4b47e481244100bf6064f5acfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\nindex f9c1ba760..fe51891d2 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n\n@@ -56,17 +56,17 @@ public class ProcessImplForWin32 extends Process {\n \n     private static final WinNT.HANDLE JAVA_INVALID_HANDLE_VALUE = new WinNT.HANDLE(Pointer.createConstant(-1));\n \n-    private static void setFd(FileDescriptor obj, long fd) {\n+    private static void setHandle(FileDescriptor obj, long handle) {\n         try {\n-            FD_ACCESS.set(obj, fd);\n+            FD_HANDLE.set(obj, handle);\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n-    private static long getFd(FileDescriptor obj) {\n+    private static long getHandle(FileDescriptor obj) {\n         try {\n-            return (Long) FD_ACCESS.get(obj);\n+            return (Long) FD_HANDLE.get(obj);\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzNjc1NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2113#discussion_r389336755", "bodyText": "ditto", "author": "tisonkun", "createdAt": "2020-03-08T05:22:17Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java", "diffHunk": "@@ -46,6 +56,22 @@\n \n     private static final WinNT.HANDLE JAVA_INVALID_HANDLE_VALUE = new WinNT.HANDLE(Pointer.createConstant(-1));\n \n+    private static void setFd(FileDescriptor obj, long fd) {\n+        try {\n+            FD_ACCESS.set(obj, fd);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static long getFd(FileDescriptor obj) {\n+        try {\n+            return (Long) FD_ACCESS.get(obj);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);", "originalCommit": "31be59d294f24c4b47e481244100bf6064f5acfd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\nindex f9c1ba760..fe51891d2 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/process/ProcessImplForWin32.java\n\n@@ -56,17 +56,17 @@ public class ProcessImplForWin32 extends Process {\n \n     private static final WinNT.HANDLE JAVA_INVALID_HANDLE_VALUE = new WinNT.HANDLE(Pointer.createConstant(-1));\n \n-    private static void setFd(FileDescriptor obj, long fd) {\n+    private static void setHandle(FileDescriptor obj, long handle) {\n         try {\n-            FD_ACCESS.set(obj, fd);\n+            FD_HANDLE.set(obj, handle);\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n-    private static long getFd(FileDescriptor obj) {\n+    private static long getHandle(FileDescriptor obj) {\n         try {\n-            return (Long) FD_ACCESS.get(obj);\n+            return (Long) FD_HANDLE.get(obj);\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(e);\n         }\n"}}, {"oid": "ed6765ae31f2bee41d373fb178cbb1f027547c4b", "url": "https://github.com/apache/dolphinscheduler/commit/ed6765ae31f2bee41d373fb178cbb1f027547c4b", "message": "access field fd of FileDescriptor in ProcessImplForWin32 by reflection for portability\n\nCurrent implementation relies on `sun.misc.JavaIOFileDescriptorAccess`\nwhich is only accessible on oraclejdk8.\n\nBasically the demand is getting & setting `fd` field of `FileDescriptor`,\nso we can directly do that with reflection.\n\nThough, I suspect the necessity we introduce ProcessImplForWin32. Maybe\nwe could have a better way to support worker server to run bat script.", "committedDate": "2020-03-08T05:26:44Z", "type": "forcePushed"}, {"oid": "1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "url": "https://github.com/apache/dolphinscheduler/commit/1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "message": "access field handle of FileDescriptor in ProcessImplForWin32 by reflection for portability\n\nCurrent implementation relies on `sun.misc.JavaIOFileDescriptorAccess`\nwhich is only accessible on oraclejdk8.\n\nBasically the demand is getting & setting `handle` field of\n`FileDescriptor`, so we can directly do that with reflection.\n\nThough, I suspect the necessity we introduce ProcessImplForWin32. Maybe\nwe could have a better way to support worker server to run bat script.", "committedDate": "2020-03-08T09:48:02Z", "type": "commit"}, {"oid": "1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "url": "https://github.com/apache/dolphinscheduler/commit/1fb86a6a419fc6e681dc78f6b8585d6c6e74103a", "message": "access field handle of FileDescriptor in ProcessImplForWin32 by reflection for portability\n\nCurrent implementation relies on `sun.misc.JavaIOFileDescriptorAccess`\nwhich is only accessible on oraclejdk8.\n\nBasically the demand is getting & setting `handle` field of\n`FileDescriptor`, so we can directly do that with reflection.\n\nThough, I suspect the necessity we introduce ProcessImplForWin32. Maybe\nwe could have a better way to support worker server to run bat script.", "committedDate": "2020-03-08T09:48:02Z", "type": "forcePushed"}, {"oid": "9042b83f6fccc9d49634f05c506d9dbe0715c443", "url": "https://github.com/apache/dolphinscheduler/commit/9042b83f6fccc9d49634f05c506d9dbe0715c443", "message": "harden initialization of ProcessImplForWin32", "committedDate": "2020-03-09T01:57:21Z", "type": "commit"}, {"oid": "b22bce61d2e15fa4239cb9ee358fb5a3f7a69fc6", "url": "https://github.com/apache/dolphinscheduler/commit/b22bce61d2e15fa4239cb9ee358fb5a3f7a69fc6", "message": "ignore ShellTaskTest#testHandleForWindows outside Windows", "committedDate": "2020-03-09T02:42:17Z", "type": "forcePushed"}, {"oid": "b22bce61d2e15fa4239cb9ee358fb5a3f7a69fc6", "url": "https://github.com/apache/dolphinscheduler/commit/b22bce61d2e15fa4239cb9ee358fb5a3f7a69fc6", "message": "ignore ShellTaskTest#testHandleForWindows outside Windows", "committedDate": "2020-03-09T02:42:17Z", "type": "commit"}]}