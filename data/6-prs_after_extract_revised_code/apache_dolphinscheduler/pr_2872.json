{"pr_number": 2872, "pr_title": "Using Jackson instead of Fastjson", "pr_createdAt": "2020-06-02T07:58:44Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/2872", "timeline": [{"oid": "a9f72c20812323794067a6b1358d27a131469703", "url": "https://github.com/apache/dolphinscheduler/commit/a9f72c20812323794067a6b1358d27a131469703", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T07:54:34Z", "type": "commit"}, {"oid": "e386af700d4276882e7b272041d1014a2ce4ca36", "url": "https://github.com/apache/dolphinscheduler/commit/e386af700d4276882e7b272041d1014a2ce4ca36", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T09:22:39Z", "type": "commit"}, {"oid": "39d2713d0a3122f0bbc6b15fee959b14108cd980", "url": "https://github.com/apache/dolphinscheduler/commit/39d2713d0a3122f0bbc6b15fee959b14108cd980", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T10:19:21Z", "type": "commit"}, {"oid": "3ccd96aabbadb284a49b9d2d9d4ca9dbf3f38a53", "url": "https://github.com/apache/dolphinscheduler/commit/3ccd96aabbadb284a49b9d2d9d4ca9dbf3f38a53", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T10:42:04Z", "type": "commit"}, {"oid": "48735a8bf4f0b6448c9e11caa03d927cc4161c6a", "url": "https://github.com/apache/dolphinscheduler/commit/48735a8bf4f0b6448c9e11caa03d927cc4161c6a", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T11:07:24Z", "type": "commit"}, {"oid": "f26e246706c6d89b49190a0eb9347e23bcd3144e", "url": "https://github.com/apache/dolphinscheduler/commit/f26e246706c6d89b49190a0eb9347e23bcd3144e", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T12:00:49Z", "type": "commit"}, {"oid": "dea2d4634dee5eaf8d4f22c4376032b3d8b1268a", "url": "https://github.com/apache/dolphinscheduler/commit/dea2d4634dee5eaf8d4f22c4376032b3d8b1268a", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-02T12:13:23Z", "type": "commit"}, {"oid": "33bd6586dd118acd29d8ab0eea155a6be5de3d7a", "url": "https://github.com/apache/dolphinscheduler/commit/33bd6586dd118acd29d8ab0eea155a6be5de3d7a", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-03T01:19:59Z", "type": "commit"}, {"oid": "bb089288c4fe8e228d119737dfd10c2b21f7328b", "url": "https://github.com/apache/dolphinscheduler/commit/bb089288c4fe8e228d119737dfd10c2b21f7328b", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-03T04:40:28Z", "type": "commit"}, {"oid": "8bab8abcd23cd6a03d8b567901da7b5959566f69", "url": "https://github.com/apache/dolphinscheduler/commit/8bab8abcd23cd6a03d8b567901da7b5959566f69", "message": "ut fix", "committedDate": "2020-06-03T11:21:19Z", "type": "commit"}, {"oid": "9c36829278b4e5ff2259bfe0014c19e5345e349d", "url": "https://github.com/apache/dolphinscheduler/commit/9c36829278b4e5ff2259bfe0014c19e5345e349d", "message": "ut fix", "committedDate": "2020-06-03T12:05:07Z", "type": "commit"}, {"oid": "4a10157506c0659e6bff20fdb47b930a4630b1c1", "url": "https://github.com/apache/dolphinscheduler/commit/4a10157506c0659e6bff20fdb47b930a4630b1c1", "message": "ut fix", "committedDate": "2020-06-04T01:42:41Z", "type": "commit"}, {"oid": "6205e687c2c96bf0a87e300081d1395e509b26c3", "url": "https://github.com/apache/dolphinscheduler/commit/6205e687c2c96bf0a87e300081d1395e509b26c3", "message": "annotation reset", "committedDate": "2020-06-04T02:11:11Z", "type": "commit"}, {"oid": "572ee0fc6474bc238761eca79848e8f12fff22c8", "url": "https://github.com/apache/dolphinscheduler/commit/572ee0fc6474bc238761eca79848e8f12fff22c8", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-04T08:23:59Z", "type": "commit"}, {"oid": "4197ee8a8f3fcf238cba3186db04bf5f18ac2073", "url": "https://github.com/apache/dolphinscheduler/commit/4197ee8a8f3fcf238cba3186db04bf5f18ac2073", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-04T08:46:11Z", "type": "commit"}, {"oid": "32863755eccabec6d88028011e0c394417b248fb", "url": "https://github.com/apache/dolphinscheduler/commit/32863755eccabec6d88028011e0c394417b248fb", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-04T08:56:31Z", "type": "commit"}, {"oid": "9ada3c7aacbae76d23d3d49c68ce03b3c8336db1", "url": "https://github.com/apache/dolphinscheduler/commit/9ada3c7aacbae76d23d3d49c68ce03b3c8336db1", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-04T09:20:24Z", "type": "commit"}, {"oid": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "url": "https://github.com/apache/dolphinscheduler/commit/9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "message": "Using Jackson instead of Fastjson", "committedDate": "2020-06-04T09:56:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzE3NA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435903174", "bodyText": "the type of 'list' variable is List , why replace String with Object", "author": "gabrywu", "createdAt": "2020-06-05T12:57:28Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java", "diffHunk": "@@ -116,9 +116,9 @@ private String getTextTypeMessage(String content,boolean showAll){\n             }\n \n             StringBuilder contents = new StringBuilder(100);\n-            for (String str : list){\n+            for (Object obj : list){", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMTM5MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436231390", "bodyText": "JSONUtils.toList will return List< LinkedHashMap > and will Cause exception : LinkedHashMap cannot be cast to String", "author": "simon824", "createdAt": "2020-06-06T02:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMzE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java b/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java\nindex 063a4a4e8..7331df391 100644\n--- a/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java\n+++ b/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java\n\n@@ -107,18 +109,11 @@ public class DefaultHTMLTemplate implements AlertTemplate {\n     private String getTextTypeMessage(String content,boolean showAll){\n \n         if (StringUtils.isNotEmpty(content)){\n-            List<String> list;\n-            try {\n-                list = JSONUtils.toList(content,String.class);\n-            }catch (Exception e){\n-                logger.error(\"json format exception\",e);\n-                return null;\n-            }\n-\n+            ArrayNode list = JSONUtils.parseArray(content);\n             StringBuilder contents = new StringBuilder(100);\n-            for (Object obj : list){\n+            for (JsonNode jsonNode : list){\n                 contents.append(Constants.TR);\n-                contents.append(Constants.TD).append(obj).append(Constants.TD_END);\n+                contents.append(Constants.TD).append(jsonNode.toString()).append(Constants.TD_END);\n                 contents.append(Constants.TR_END);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNzc1Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435907753", "bodyText": "parseObject is hard to understand ,suggest add parseMap method ,refer to the following code\nTypeReference<HashMap<String, String>> typeRef  = new TypeReference<HashMap<String, String>>() {}; Map<String, String> map = mapper.readValue(jsonInput, typeRef);", "author": "gabrywu", "createdAt": "2020-06-05T13:05:45Z", "path": "dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java", "diffHunk": "@@ -99,9 +99,7 @@ public static String getToken() throws IOException {\n                 response.close();\n             }\n \n-            Map<String, Object> map = JSON.parseObject(resp,\n-                    new TypeToken<Map<String, Object>>() {\n-                    }.getType());\n+            Map<String, Object> map = JSONUtils.parseObject(resp, Map.class);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDY0Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436230643", "bodyText": "ok\uff0cI will fix all similar problems", "author": "simon824", "createdAt": "2020-06-06T02:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwNzc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java b/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java\nindex 03cd53c0c..bebb70bae 100644\n--- a/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java\n+++ b/dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java\n\n@@ -99,8 +101,12 @@ public class EnterpriseWeChatUtils {\n                 response.close();\n             }\n \n-            Map<String, Object> map = JSONUtils.parseObject(resp, Map.class);\n-            return map.get(\"access_token\").toString();\n+            Map<String, String> map = JSONUtils.toMap(resp);\n+            if (map != null) {\n+                return map.get(\"access_token\");\n+            } else {\n+                return null;\n+            }\n         } finally {\n             httpClient.close();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDczNA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435910734", "bodyText": "why still using the fastjson annotation?", "author": "gabrywu", "createdAt": "2020-06-05T13:11:29Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java", "diffHunk": "@@ -1,7 +1,7 @@\n package org.apache.dolphinscheduler.api.dto.resources;\n \n-import com.alibaba.fastjson.annotation.JSONField;\n import com.alibaba.fastjson.annotation.JSONType;\n+import com.alibaba.fastjson.annotation.JSONField;", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMTAwOA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436231008", "bodyText": "sorry\uff0cI missed it\ni will fix it later", "author": "simon824", "createdAt": "2020-06-06T02:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMDczNA=="}], "type": "inlineReview", "revised_code": {"commit": "c5b3f35bd4f217df31cd1fba8eb605e52909f972", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java\nindex 3f7c227ae..6a5b6e335 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/ResourceComponent.java\n\n@@ -1,7 +1,6 @@\n package org.apache.dolphinscheduler.api.dto.resources;\n \n-import com.alibaba.fastjson.annotation.JSONType;\n-import com.alibaba.fastjson.annotation.JSONField;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import org.apache.dolphinscheduler.common.enums.ResourceType;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMjYwNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435922605", "bodyText": "paramObject is ObjectNode ,why not use toString directly ?", "author": "gabrywu", "createdAt": "2020-06-05T13:31:54Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -161,15 +159,15 @@\n             return result;\n         }\n         //check password\uff0cif the password is not updated, set to the old password.\n-        JSONObject paramObject = JSON.parseObject(parameter);\n-        String password = paramObject.getString(Constants.PASSWORD);\n+        ObjectNode paramObject = JSONUtils.parseObject(parameter);\n+        String password = paramObject.path(Constants.PASSWORD).asText();\n         if (StringUtils.isBlank(password)) {\n             String oldConnectionParams = dataSource.getConnectionParams();\n-            JSONObject oldParams = JSON.parseObject(oldConnectionParams);\n-            paramObject.put(Constants.PASSWORD, oldParams.getString(Constants.PASSWORD));\n+            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n+            paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n         }\n         // connectionParams json\n-        String connectionParams = paramObject.toJSONString();\n+        String connectionParams = JSONUtils.toJsonString(paramObject);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMTA1Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436231056", "bodyText": "ok\uff0cI will fix all similar problems", "author": "simon824", "createdAt": "2020-06-06T02:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMjYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\nindex a702ffe1e..735cd8ce8 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n\n@@ -167,7 +167,7 @@ public class DataSourceService extends BaseService{\n             paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n         }\n         // connectionParams json\n-        String connectionParams = JSONUtils.toJsonString(paramObject);\n+        String connectionParams = paramObject.toString();\n \n         Boolean isConnection = checkConnection(type, connectionParams);\n         if (!isConnection) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMjg2Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435922866", "bodyText": "object is ObjectNode ,why not use toString directly ?", "author": "gabrywu", "createdAt": "2020-06-05T13:32:21Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -315,9 +313,9 @@ private void handlePasswd(List<DataSource> dataSourceList) {\n         for (DataSource dataSource : dataSourceList) {\n \n             String connectionParams  = dataSource.getConnectionParams();\n-            JSONObject  object = JSON.parseObject(connectionParams);\n+            ObjectNode  object = JSONUtils.parseObject(connectionParams);\n             object.put(Constants.PASSWORD, Constants.XXXXXX);\n-            dataSource.setConnectionParams(JSONUtils.toJson(object));\n+            dataSource.setConnectionParams(JSONUtils.toJsonString(object));", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\nindex a702ffe1e..735cd8ce8 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n\n@@ -315,7 +315,7 @@ public class DataSourceService extends BaseService{\n             String connectionParams  = dataSource.getConnectionParams();\n             ObjectNode  object = JSONUtils.parseObject(connectionParams);\n             object.put(Constants.PASSWORD, Constants.XXXXXX);\n-            dataSource.setConnectionParams(JSONUtils.toJsonString(object));\n+            dataSource.setConnectionParams(object.toString());\n \n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDQ5MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435924490", "bodyText": "suggest use TypeReference to parse 'other' variable\nTypeReference<HashMap<String, String>> typeRef  = new TypeReference<HashMap<String, String>>() {}; Map<String, String> map = mapper.readValue(jsonInput, typeRef);", "author": "gabrywu", "createdAt": "2020-06-05T13:34:59Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java", "diffHunk": "@@ -526,8 +524,7 @@ public String buildParameter(String name, String desc, DbType type, String host,\n             parameterMap.put(Constants.PRINCIPAL,principal);\n         }\n         if (other != null && !\"\".equals(other)) {\n-            LinkedHashMap<String, String> map = JSON.parseObject(other, new TypeReference<LinkedHashMap<String, String>>() {\n-            });\n+            LinkedHashMap<String, String> map = JSONUtils.parseObject(other, LinkedHashMap.class);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\nindex a702ffe1e..735cd8ce8 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java\n\n@@ -524,7 +524,7 @@ public class DataSourceService extends BaseService{\n             parameterMap.put(Constants.PRINCIPAL,principal);\n         }\n         if (other != null && !\"\".equals(other)) {\n-            LinkedHashMap<String, String> map = JSONUtils.parseObject(other, LinkedHashMap.class);\n+            Map<String, String> map = JSONUtils.toMap(other);\n             if (map.size() > 0) {\n                 StringBuilder otherSb = new StringBuilder();\n                 for (Map.Entry<String, String> entry: map.entrySet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDUyOA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435930528", "bodyText": "It's better add test code into JSONUtils.toJsonString to cover the List parameter", "author": "gabrywu", "createdAt": "2020-06-05T13:44:41Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -636,7 +636,7 @@ private void downloadProcessDefinitionFile(HttpServletResponse response, List<Pr\n         try {\n             out = response.getOutputStream();\n             buff = new BufferedOutputStream(out);\n-            buff.write(JSON.toJSONString(processDefinitionList).getBytes(StandardCharsets.UTF_8));\n+            buff.write(JSONUtils.toJsonString(processDefinitionList).getBytes(StandardCharsets.UTF_8));", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDU2NA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436230564", "bodyText": "ok", "author": "simon824", "createdAt": "2020-06-06T02:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDUyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMTkyOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r435931929", "bodyText": "why not use JSONUtils.toList", "author": "gabrywu", "createdAt": "2020-06-05T13:46:51Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -756,8 +756,13 @@ private boolean checkTaskHasSubProcess(String taskType) {\n     public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile file, String currentProjectName) {\n         Map<String, Object> result = new HashMap<>(5);\n         String processMetaJson = FileUtils.file2String(file);\n-        List<ProcessMeta> processMetaList = JSON.parseArray(processMetaJson, ProcessMeta.class);\n+        List<ProcessMeta> processMetaList = new ArrayList<>();\n \n+        try {\n+            processMetaList = JSONUtils.getMapper().readValue(processMetaJson, new TypeReference<List<ProcessMeta>>() {});", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMDUxNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436230517", "bodyText": "toList will return List< LinkedHashMap > and will Cause  exception :\n\" Could not write JSON: java.util.LinkedHashMap cannot be cast to org.apache.dolphinscheduler.common.process.Property\"", "author": "simon824", "createdAt": "2020-06-06T02:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java\nindex b76bfd00e..c3d8516ed 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java\n\n@@ -756,13 +756,8 @@ public class ProcessDefinitionService extends BaseDAGService {\n     public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile file, String currentProjectName) {\n         Map<String, Object> result = new HashMap<>(5);\n         String processMetaJson = FileUtils.file2String(file);\n-        List<ProcessMeta> processMetaList = new ArrayList<>();\n+        List<ProcessMeta>  processMetaList = JSONUtils.toList(processMetaJson, ProcessMeta.class);\n \n-        try {\n-            processMetaList = JSONUtils.getMapper().readValue(processMetaJson, new TypeReference<List<ProcessMeta>>() {});\n-        } catch (Exception e) {\n-            logger.error(\"parse list exception!\", e);\n-        }\n         //check file content\n         if (CollectionUtils.isEmpty(processMetaList)) {\n             putMsg(result, Status.DATA_IS_NULL, \"fileContent\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2Nzg5Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436667893", "bodyText": "getMapper,createArrayNode,createObjectNode better private ,we should not use ObjectMapper directly", "author": "gabrywu", "createdAt": "2020-06-08T12:50:47Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java", "diffHunk": "@@ -50,23 +50,42 @@ private JSONUtils() {\n         objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true).setTimeZone(TimeZone.getDefault());\n     }\n \n+    public static ObjectMapper getMapper() {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\nindex 97212154a..63611cc7d 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\n\n@@ -50,10 +51,6 @@ public class JSONUtils {\n         objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true).setTimeZone(TimeZone.getDefault());\n     }\n \n-    public static ObjectMapper getMapper() {\n-        return objectMapper;\n-    }\n-\n \n     public static ArrayNode createArrayNode() {\n         return objectMapper.createArrayNode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2ODg2Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436668867", "bodyText": "don't use getMapper directly , abstract one method to deserialize List<?>", "author": "gabrywu", "createdAt": "2020-06-08T12:52:29Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java", "diffHunk": "@@ -551,7 +562,13 @@ private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) thr\n             String localParams = map.get(LOCAL_PARAMS);\n             if (localParams != null && !localParams.isEmpty()) {\n                 localParams = ParameterUtils.convertParameterPlaceholders(localParams, timeParams);\n-                List<Property> localParamsList = JSON.parseArray(localParams, Property.class);\n+                List<Property> localParamsList = new ArrayList<>();\n+                try {\n+                    localParamsList = JSONUtils.getMapper().readValue(localParams, new TypeReference<List<Property>>() {});", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java\nindex 725ffc00b..5d5eb006f 100644\n--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java\n+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java\n\n@@ -563,11 +555,7 @@ public class ProcessInstanceService extends BaseDAGService {\n             if (localParams != null && !localParams.isEmpty()) {\n                 localParams = ParameterUtils.convertParameterPlaceholders(localParams, timeParams);\n                 List<Property> localParamsList = new ArrayList<>();\n-                try {\n-                    localParamsList = JSONUtils.getMapper().readValue(localParams, new TypeReference<List<Property>>() {});\n-                } catch (Exception e) {\n-                    logger.error(\"parse list exception!\", e);\n-                }\n+                localParamsList = JSONUtils.toList(localParams, Property.class);\n \n                 Map<String,Object> localParamsMap = new HashMap<>();\n                 localParamsMap.put(\"taskType\",taskNode.getType());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Nzk3OA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436677978", "bodyText": "why remove the 'throws JSONException', I think it's better not remove", "author": "gabrywu", "createdAt": "2020-06-08T13:03:39Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -408,9 +406,8 @@ public boolean isYarnEnabled() {\n      *\n      * @param applicationId application id\n      * @return the return may be null or there may be other parse exceptions\n-     * @throws JSONException json exception\n      */\n-    public ExecutionStatus getApplicationStatus(String applicationId) throws JSONException {\n+    public ExecutionStatus getApplicationStatus(String applicationId)  {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\nindex 360f4514b..e57201d74 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n\n@@ -407,7 +408,7 @@ public class HadoopUtils implements Closeable {\n      * @param applicationId application id\n      * @return the return may be null or there may be other parse exceptions\n      */\n-    public ExecutionStatus getApplicationStatus(String applicationId)  {\n+    public ExecutionStatus getApplicationStatus(String applicationId) throws NullPointerException {\n         if (StringUtils.isEmpty(applicationId)) {\n             return null;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MzMxOA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436683318", "bodyText": "result = jsonObject.path(\"job\").path(\"state\").asText() always assign a value to result ,which empty string indicating a null value . In original logic ,null value will throw NPE in the following switch. Now the result is empty string ,then getApplicationStatus method will return ExecutionStatus.RUNNING_EXEUTION. I think you'd better optimize the switch logic. only a suggestion", "author": "gabrywu", "createdAt": "2020-06-08T13:09:28Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -421,15 +418,15 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws JSONExc\n \n         String responseContent = HttpUtils.get(applicationUrl);\n         if (responseContent != null) {\n-            JSONObject jsonObject = JSON.parseObject(responseContent);\n-            result = jsonObject.getJSONObject(\"app\").getString(\"finalStatus\");\n+            ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            result = jsonObject.path(\"app\").path(\"finalStatus\").asText();\n         } else {\n             //may be in job history\n             String jobHistoryUrl = getJobHistoryUrl(applicationId);\n             logger.info(\"jobHistoryUrl={}\", jobHistoryUrl);\n             responseContent = HttpUtils.get(jobHistoryUrl);\n-            JSONObject jsonObject = JSONObject.parseObject(responseContent);\n-            result = jsonObject.getJSONObject(\"job\").getString(\"state\");\n+            ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            result = jsonObject.path(\"job\").path(\"state\").asText();", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\nindex 360f4514b..e57201d74 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n\n@@ -426,6 +427,9 @@ public class HadoopUtils implements Closeable {\n             logger.info(\"jobHistoryUrl={}\", jobHistoryUrl);\n             responseContent = HttpUtils.get(jobHistoryUrl);\n             ObjectNode jsonObject = JSONUtils.parseObject(responseContent);\n+            if (!jsonObject.has(\"job\")){\n+                throw new NullPointerException();\n+            }\n             result = jsonObject.path(\"job\").path(\"state\").asText();\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NjM0Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436686342", "bodyText": "jsonObject.get(\"clusterInfo\") will throw NPE", "author": "gabrywu", "createdAt": "2020-06-08T13:12:39Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java", "diffHunk": "@@ -669,10 +667,10 @@ public static String getRMState(String url) {\n                 return null;\n             }\n             //to json\n-            JSONObject jsonObject = JSON.parseObject(retStr);\n+            ObjectNode jsonObject = JSONUtils.parseObject(retStr);\n \n             //get ResourceManager state\n-            return jsonObject.getJSONObject(\"clusterInfo\").getString(\"haState\");\n+            return jsonObject.get(\"clusterInfo\").path(\"haState\").asText();", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\nindex 360f4514b..e57201d74 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java\n\n@@ -670,6 +674,9 @@ public class HadoopUtils implements Closeable {\n             ObjectNode jsonObject = JSONUtils.parseObject(retStr);\n \n             //get ResourceManager state\n+            if (!jsonObject.has(\"clusterInfo\")){\n+                return null;\n+            }\n             return jsonObject.get(\"clusterInfo\").path(\"haState\").asText();\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4OTk3NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436689975", "bodyText": "don't use getMapper directly", "author": "gabrywu", "createdAt": "2020-06-08T13:16:35Z", "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java", "diffHunk": "@@ -271,7 +279,16 @@ public String getGlobalParams() {\n     }\n \n     public void setGlobalParams(String globalParams) {\n-        this.globalParamList = JSON.parseArray(globalParams, Property.class);\n+        if (globalParams == null){\n+            this.globalParamList = new ArrayList<>();\n+        }else {\n+            try {\n+                this.globalParamList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java b/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\nindex 2eb65b126..6b4a83dfd 100644\n--- a/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\n+++ b/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\n\n@@ -282,12 +285,7 @@ public class ProcessDefinition {\n         if (globalParams == null){\n             this.globalParamList = new ArrayList<>();\n         }else {\n-            try {\n-                this.globalParamList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {\n-                });\n-            } catch (IOException e) {\n-                logger.error(\"json parse exception!\", e);\n-            }\n+            this.globalParamList = JSONUtils.toList(globalParams, Property.class);\n         }\n         this.globalParams = globalParams;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDQ0Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436690443", "bodyText": "don't use getMapper directly", "author": "gabrywu", "createdAt": "2020-06-08T13:17:06Z", "path": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java", "diffHunk": "@@ -280,15 +297,21 @@ public void setGlobalParams(String globalParams) {\n     }\n \n     public void setGlobalParamList(List<Property> globalParamList) {\n-        this.globalParams = JSON.toJSONString(globalParamList);\n+        this.globalParams = JSONUtils.toJsonString(globalParamList);\n         this.globalParamList = globalParamList;\n     }\n \n     public Map<String, String> getGlobalParamMap() {\n-        List<Property> propList;\n+        List<Property> propList = new ArrayList<> ();\n \n         if (globalParamMap == null && StringUtils.isNotEmpty(globalParams)) {\n-            propList = JSON.parseArray(globalParams, Property.class);\n+            try {\n+                propList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java b/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\nindex 2eb65b126..6b4a83dfd 100644\n--- a/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\n+++ b/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java\n\n@@ -305,13 +303,7 @@ public class ProcessDefinition {\n         List<Property> propList = new ArrayList<> ();\n \n         if (globalParamMap == null && StringUtils.isNotEmpty(globalParams)) {\n-            try {\n-                propList = JSONUtils.getMapper().readValue(globalParams, new TypeReference<List<Property>>() {\n-                });\n-            } catch (IOException e) {\n-                logger.error(\"json parse exception!\", e);\n-            }\n-\n+            propList = JSONUtils.toList(globalParams,Property.class);\n             globalParamMap = propList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5Mjg2NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436692865", "bodyText": "wow, what's format of this file!", "author": "gabrywu", "createdAt": "2020-06-08T13:19:44Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\nindex affa17c08..603f8a088 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\n\n@@ -1 +1 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\n\nimport java.io.Serializable;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteRequestCommand implements Serializable {\n\n    /**\n     *  task execution context\n     */\n    private String taskExecutionContext;\n\n    public String getTaskExecutionContext() {\n        return taskExecutionContext;\n    }\n\n    public void setTaskExecutionContext(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    public TaskExecuteRequestCommand() {\n    }\n\n    public TaskExecuteRequestCommand(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_REQUEST);\n        byte[] body = JacksonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteRequestCommand{\" +\n                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteRequestCommand implements Serializable {\n\n    /**\n     *  task execution context\n     */\n    private String taskExecutionContext;\n\n    public String getTaskExecutionContext() {\n        return taskExecutionContext;\n    }\n\n    public void setTaskExecutionContext(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    public TaskExecuteRequestCommand() {\n    }\n\n    public TaskExecuteRequestCommand(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_REQUEST);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteRequestCommand{\" +\n                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MzE2MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436693160", "bodyText": "wow, what's format of this file!", "author": "gabrywu", "createdAt": "2020-06-08T13:20:02Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\nindex a965849ca..796e4dc35 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\n\n@@ -1 +1 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteAckCommand implements Serializable {\n\n    /**\n     * taskInstanceId\n     */\n    private int taskInstanceId;\n\n    /**\n     * startTime\n     */\n    private Date startTime;\n\n    /**\n     * host\n     */\n    private String host;\n\n    /**\n     * status\n     */\n    private int status;\n\n    /**\n     * logPath\n     */\n    private String logPath;\n\n    /**\n     * executePath\n     */\n    private String executePath;\n\n    public Date getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(Date startTime) {\n        this.startTime = startTime;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public String getLogPath() {\n        return logPath;\n    }\n\n    public void setLogPath(String logPath) {\n        this.logPath = logPath;\n    }\n\n    public String getExecutePath() {\n        return executePath;\n    }\n\n    public void setExecutePath(String executePath) {\n        this.executePath = executePath;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_ACK);\n        byte[] body = JacksonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteAckCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", startTime=\" + startTime +\n                \", host='\" + host + '\\'' +\n                \", status=\" + status +\n                \", logPath='\" + logPath + '\\'' +\n                \", executePath='\" + executePath + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteAckCommand implements Serializable {\n\n    /**\n     * taskInstanceId\n     */\n    private int taskInstanceId;\n\n    /**\n     * startTime\n     */\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n    private Date startTime;\n\n    /**\n     * host\n     */\n    private String host;\n\n    /**\n     * status\n     */\n    private int status;\n\n    /**\n     * logPath\n     */\n    private String logPath;\n\n    /**\n     * executePath\n     */\n    private String executePath;\n\n    public Date getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(Date startTime) {\n        this.startTime = startTime;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public String getLogPath() {\n        return logPath;\n    }\n\n    public void setLogPath(String logPath) {\n        this.logPath = logPath;\n    }\n\n    public String getExecutePath() {\n        return executePath;\n    }\n\n    public void setExecutePath(String executePath) {\n        this.executePath = executePath;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_ACK);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteAckCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", startTime=\" + startTime +\n                \", host='\" + host + '\\'' +\n                \", status=\" + status +\n                \", logPath='\" + logPath + '\\'' +\n                \", executePath='\" + executePath + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NDcxMg==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436694712", "bodyText": "wow, what's format of this file!", "author": "gabrywu", "createdAt": "2020-06-08T13:21:41Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\nindex 4ac4bbb36..0ea34fe39 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\n\n@@ -1 +1 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task response command\n */\npublic class TaskExecuteResponseCommand implements Serializable {\n\n\n    public TaskExecuteResponseCommand() {\n    }\n\n    public TaskExecuteResponseCommand(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    /**\n     *  task instance id\n     */\n    private int taskInstanceId;\n\n    /**\n     *  status\n     */\n    private int status;\n\n\n    /**\n     *  end time\n     */\n    private Date endTime;\n\n\n    /**\n     * processId\n     */\n    private int processId;\n\n    /**\n     * appIds\n     */\n    private String appIds;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public Date getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(Date endTime) {\n        this.endTime = endTime;\n    }\n\n    public int getProcessId() {\n        return processId;\n    }\n\n    public void setProcessId(int processId) {\n        this.processId = processId;\n    }\n\n    public String getAppIds() {\n        return appIds;\n    }\n\n    public void setAppIds(String appIds) {\n        this.appIds = appIds;\n    }\n\n    /**\n     * package response command\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\n        byte[] body = JacksonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteResponseCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", status=\" + status +\n                \", endTime=\" + endTime +\n                \", processId=\" + processId +\n                \", appIds='\" + appIds + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task response command\n */\npublic class TaskExecuteResponseCommand implements Serializable {\n\n\n    public TaskExecuteResponseCommand() {\n    }\n\n    public TaskExecuteResponseCommand(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    /**\n     *  task instance id\n     */\n    private int taskInstanceId;\n\n    /**\n     *  status\n     */\n    private int status;\n\n\n    /**\n     *  end time\n     */\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n    private Date endTime;\n\n\n    /**\n     * processId\n     */\n    private int processId;\n\n    /**\n     * appIds\n     */\n    private String appIds;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public Date getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(Date endTime) {\n        this.endTime = endTime;\n    }\n\n    public int getProcessId() {\n        return processId;\n    }\n\n    public void setProcessId(int processId) {\n        this.processId = processId;\n    }\n\n    public String getAppIds() {\n        return appIds;\n    }\n\n    public void setAppIds(String appIds) {\n        this.appIds = appIds;\n    }\n\n    /**\n     * package response command\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteResponseCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", status=\" + status +\n                \", endTime=\" + endTime +\n                \", processId=\" + processId +\n                \", appIds='\" + appIds + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTAwNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436695007", "bodyText": "wow, what's format of this file!", "author": "gabrywu", "createdAt": "2020-06-08T13:21:58Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  kill task request command\r */\rpublic class TaskKillRequestCommand implements Serializable {\r\r    /**\r     *  task id\r     */\r    private int taskInstanceId;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillRequestCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  kill task request command\r */\rpublic class TaskKillRequestCommand implements Serializable {\r\r    /**\r     *  task id\r     */\r    private int taskInstanceId;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_REQUEST);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillRequestCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                '}';\r    }\r}\r", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java\nindex d1855e42e..092e462a1 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java\n\n@@ -1 +1 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\n\nimport java.io.Serializable;\n\n/**\n *  kill task request command\n */\npublic class TaskKillRequestCommand implements Serializable {\n\n    /**\n     *  task id\n     */\n    private int taskInstanceId;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_KILL_REQUEST);\n        byte[] body = JacksonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskKillRequestCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\n\n/**\n *  kill task request command\n */\npublic class TaskKillRequestCommand implements Serializable {\n\n    /**\n     *  task id\n     */\n    private int taskInstanceId;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_KILL_REQUEST);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskKillRequestCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                '}';\n    }\n}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTIyNg==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436695226", "bodyText": "wow, what's format of this file!", "author": "gabrywu", "createdAt": "2020-06-08T13:22:12Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\rimport java.util.List;\r\r/**\r *  kill task response command\r */\rpublic class TaskKillResponseCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * other resource manager appId , for example : YARN etc\r     */\r    protected List<String> appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public List<String> getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(List<String> appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", processId=\" + processId +\r                \", appIds=\" + appIds +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\r\rimport java.io.Serializable;\rimport java.util.List;\r\r/**\r *  kill task response command\r */\rpublic class TaskKillResponseCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * other resource manager appId , for example : YARN etc\r     */\r    protected List<String> appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public List<String> getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(List<String> appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_KILL_RESPONSE);\r        byte[] body = JacksonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskKillResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", processId=\" + processId +\r                \", appIds=\" + appIds +\r                '}';\r    }\r}\r", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java\nindex 2f35e5892..9dc0c541d 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java\n\n@@ -1 +1 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JacksonSerializer;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n *  kill task response command\n */\npublic class TaskKillResponseCommand implements Serializable {\n\n    /**\n     * taskInstanceId\n     */\n    private int taskInstanceId;\n\n    /**\n     * host\n     */\n    private String host;\n\n    /**\n     * status\n     */\n    private int status;\n\n\n    /**\n     * processId\n     */\n    private int processId;\n\n    /**\n     * other resource manager appId , for example : YARN etc\n     */\n    protected List<String> appIds;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public int getProcessId() {\n        return processId;\n    }\n\n    public void setProcessId(int processId) {\n        this.processId = processId;\n    }\n\n    public List<String> getAppIds() {\n        return appIds;\n    }\n\n    public void setAppIds(List<String> appIds) {\n        this.appIds = appIds;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_KILL_RESPONSE);\n        byte[] body = JacksonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskKillResponseCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", host='\" + host + '\\'' +\n                \", status=\" + status +\n                \", processId=\" + processId +\n                \", appIds=\" + appIds +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n *  kill task response command\n */\npublic class TaskKillResponseCommand implements Serializable {\n\n    /**\n     * taskInstanceId\n     */\n    private int taskInstanceId;\n\n    /**\n     * host\n     */\n    private String host;\n\n    /**\n     * status\n     */\n    private int status;\n\n\n    /**\n     * processId\n     */\n    private int processId;\n\n    /**\n     * other resource manager appId , for example : YARN etc\n     */\n    protected List<String> appIds;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public int getProcessId() {\n        return processId;\n    }\n\n    public void setProcessId(int processId) {\n        this.processId = processId;\n    }\n\n    public List<String> getAppIds() {\n        return appIds;\n    }\n\n    public void setAppIds(List<String> appIds) {\n        this.appIds = appIds;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_KILL_RESPONSE);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskKillResponseCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", host='\" + host + '\\'' +\n                \", status=\" + status +\n                \", processId=\" + processId +\n                \", appIds=\" + appIds +\n                '}';\n    }\n}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzAzNg==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697036", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:24:12Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setPath(String path) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.GET_LOG_BYTES_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java\nindex 4dc9af486..e4b21e2f8 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java\n\n@@ -56,7 +56,7 @@ public class GetLogBytesRequestCommand implements Serializable {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.GET_LOG_BYTES_REQUEST);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzQ5Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697496", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:24:38Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setData(byte[] data) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.GET_LOG_BYTES_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java\nindex 32d1a5bea..349ec0385 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java\n\n@@ -57,7 +57,7 @@ public class GetLogBytesResponseCommand implements Serializable {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.GET_LOG_BYTES_RESPONSE);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzY0NA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697644", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:24:48Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java", "diffHunk": "@@ -84,7 +84,7 @@ public void setLimit(int limit) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.ROLL_VIEW_LOG_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java\nindex eeccc5860..00129c7e7 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java\n\n@@ -84,7 +84,7 @@ public class RollViewLogRequestCommand implements Serializable {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.ROLL_VIEW_LOG_REQUEST);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NzgxNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697815", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:24:59Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setMsg(String msg) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.ROLL_VIEW_LOG_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java\nindex dca2feed2..a4f4f86c9 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java\n\n@@ -57,7 +57,7 @@ public class RollViewLogResponseCommand implements Serializable {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.ROLL_VIEW_LOG_RESPONSE);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5Nzk5OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436697999", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:25:09Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setPath(String path) {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.VIEW_WHOLE_LOG_REQUEST);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java\nindex 646d05c32..1d51653ea 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java\n\n@@ -56,7 +56,7 @@ public class ViewLogRequestCommand implements Serializable {\n     public Command convert2Command(){\n         Command command = new Command();\n         command.setType(CommandType.VIEW_WHOLE_LOG_REQUEST);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5ODE5OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436698199", "bodyText": "It's better to rename JacksonSerialize to JsonSerializer", "author": "gabrywu", "createdAt": "2020-06-08T13:25:20Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java", "diffHunk": "@@ -57,7 +57,7 @@ public void setMsg(String msg) {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.VIEW_WHOLE_LOG_RESPONSE);\n-        byte[] body = FastJsonSerializer.serialize(this);\n+        byte[] body = JacksonSerializer.serialize(this);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java\nindex 970d1c07b..6940104f7 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java\n\n@@ -57,7 +57,7 @@ public class ViewLogResponseCommand implements Serializable {\n     public Command convert2Command(long opaque){\n         Command command = new Command(opaque);\n         command.setType(CommandType.VIEW_WHOLE_LOG_RESPONSE);\n-        byte[] body = JacksonSerializer.serialize(this);\n+        byte[] body = JsonSerializer.serialize(this);\n         command.setBody(body);\n         return command;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDY4MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700681", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker. You'd better make sure about this will not have any impact on invoker.", "author": "gabrywu", "createdAt": "2020-06-08T13:28:28Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -31,7 +39,13 @@\n \t * @return byte array\n \t */\n \tpublic static <T> byte[] serialize(T obj)  {\n-\t\tString json = JSON.toJSONString(obj);\n+        String json = \"\";", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNTU3OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r437135579", "bodyText": "toJSONString will not throw exceptions", "author": "simon824", "createdAt": "2020-06-09T04:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDY4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDc0OA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700748", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker", "author": "gabrywu", "createdAt": "2020-06-08T13:28:34Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -42,7 +56,14 @@\n \t * @return string\n \t */\n \tpublic static <T> String serializeToString(T obj)  {\n-\t\treturn JSON.toJSONString(obj);\n+\t\tString json = \"\";\n+\t\ttry {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMDkzOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436700939", "bodyText": "In original logic ,if obj can't format to json ,exceptions throw. However current method return empty string ,which maybe change the logic of the invoker", "author": "gabrywu", "createdAt": "2020-06-08T13:28:50Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JacksonSerializer.java", "diffHunk": "@@ -54,7 +75,15 @@\n \t * @return deserialize type\n \t */\n \tpublic static <T> T deserialize(byte[] src, Class<T> clazz) {\n-\t\treturn JSON.parseObject(src, clazz);\n+\n+        String json = new String(src, StandardCharsets.UTF_8);", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMjU1Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436702556", "bodyText": "not use getMapper directly", "author": "gabrywu", "createdAt": "2020-06-08T13:31:01Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -152,7 +153,13 @@ public void run() {\n         // global params string\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n-            List<Property> globalParamsList = JSONObject.parseArray(globalParamsStr, Property.class);\n+            List<Property> globalParamsList = new ArrayList<>();\n+\n+            try {", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\nindex 17b4b1771..b964a7289 100644\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\n\n@@ -154,12 +154,7 @@ public class TaskExecuteThread implements Runnable {\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n             List<Property> globalParamsList = new ArrayList<>();\n-\n-            try {\n-                globalParamsList = JSONUtils.getMapper().readValue(globalParamsStr, new TypeReference<List<Property>>() {});\n-            } catch (Exception e) {\n-                logger.error(\"parse list exception!\", e);\n-            }\n+            globalParamsList = JSONUtils.toList(globalParamsStr, Property.class);\n             globalParamsMap.putAll(globalParamsList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue)));\n         }\n         return globalParamsMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODMwNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436708305", "bodyText": "better abstract this logic to one method of JSONUtils which put array to ObjectNode", "author": "gabrywu", "createdAt": "2020-06-08T13:39:49Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java", "diffHunk": "@@ -236,64 +222,90 @@ private String buildDataxJsonFile()\n \n     /**\n      * build datax job config\n-     * \n+     *\n      * @return collection of datax job config JSONObject\n      * @throws SQLException if error throws SQLException\n      */\n-    private List<JSONObject> buildDataxJobContentJson() throws SQLException {\n-        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n+    private List<ObjectNode> buildDataxJobContentJson() throws SQLException {\n \n+        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n \n         BaseDataSource dataSourceCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 dataxTaskExecutionContext.getSourceConnectionParams());\n \n         BaseDataSource dataTargetCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataxTaskExecutionContext.getTargetConnectionParams());\n \n-        List<JSONObject> readerConnArr = new ArrayList<>();\n-        JSONObject readerConn = new JSONObject();\n-        readerConn.put(\"querySql\", new String[] {dataXParameters.getSql()});\n-        readerConn.put(\"jdbcUrl\", new String[] {dataSourceCfg.getJdbcUrl()});\n+        List<ObjectNode> readerConnArr = new ArrayList<>();\n+        ObjectNode readerConn = JSONUtils.createObjectNode();\n+\n+        ArrayNode sqlArr = readerConn.putArray(\"querySql\");\n+        for (String sql : new String[]{dataXParameters.getSql()}) {\n+            sqlArr.add(sql);\n+        }\n+\n+        ArrayNode urlArr = readerConn.putArray(\"jdbcUrl\");\n+        for (String url : new String[]{dataSourceCfg.getJdbcUrl()}) {\n+            urlArr.add(url);\n+        }\n+\n         readerConnArr.add(readerConn);\n \n-        JSONObject readerParam = new JSONObject();\n+        ObjectNode readerParam = JSONUtils.createObjectNode();\n         readerParam.put(\"username\", dataSourceCfg.getUser());\n         readerParam.put(\"password\", dataSourceCfg.getPassword());\n-        readerParam.put(\"connection\", readerConnArr);\n+        readerParam.putArray(\"connection\").addAll(readerConnArr);\n \n-        JSONObject reader = new JSONObject();\n+\n+        ObjectNode reader = JSONUtils.createObjectNode();\n         reader.put(\"name\", DataxUtils.getReaderPluginName(DbType.of(dataxTaskExecutionContext.getSourcetype())));\n-        reader.put(\"parameter\", readerParam);\n+        reader.set(\"parameter\", readerParam);\n+\n+        List<ObjectNode> writerConnArr = new ArrayList<>();\n+        ObjectNode writerConn = JSONUtils.createObjectNode();", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\nindex f85dfb8a3..723ded4f2 100755\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\n\n@@ -278,7 +275,9 @@ public class DataxTask extends AbstractTask {\n         String[] columns = parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataSourceCfg, dataXParameters.getSql());\n+\n         ArrayNode columnArr = writerParam.putArray(\"column\");\n+        columnArr.addAll()\n         for (String column : columns) {\n             columnArr.add(column);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwOTE0NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r436709145", "bodyText": "why not use addAll", "author": "gabrywu", "createdAt": "2020-06-08T13:41:03Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java", "diffHunk": "@@ -236,64 +222,90 @@ private String buildDataxJsonFile()\n \n     /**\n      * build datax job config\n-     * \n+     *\n      * @return collection of datax job config JSONObject\n      * @throws SQLException if error throws SQLException\n      */\n-    private List<JSONObject> buildDataxJobContentJson() throws SQLException {\n-        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n+    private List<ObjectNode> buildDataxJobContentJson() throws SQLException {\n \n+        DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();\n \n         BaseDataSource dataSourceCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 dataxTaskExecutionContext.getSourceConnectionParams());\n \n         BaseDataSource dataTargetCfg = DataSourceFactory.getDatasource(DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataxTaskExecutionContext.getTargetConnectionParams());\n \n-        List<JSONObject> readerConnArr = new ArrayList<>();\n-        JSONObject readerConn = new JSONObject();\n-        readerConn.put(\"querySql\", new String[] {dataXParameters.getSql()});\n-        readerConn.put(\"jdbcUrl\", new String[] {dataSourceCfg.getJdbcUrl()});\n+        List<ObjectNode> readerConnArr = new ArrayList<>();\n+        ObjectNode readerConn = JSONUtils.createObjectNode();\n+\n+        ArrayNode sqlArr = readerConn.putArray(\"querySql\");\n+        for (String sql : new String[]{dataXParameters.getSql()}) {\n+            sqlArr.add(sql);\n+        }\n+\n+        ArrayNode urlArr = readerConn.putArray(\"jdbcUrl\");\n+        for (String url : new String[]{dataSourceCfg.getJdbcUrl()}) {\n+            urlArr.add(url);\n+        }\n+\n         readerConnArr.add(readerConn);\n \n-        JSONObject readerParam = new JSONObject();\n+        ObjectNode readerParam = JSONUtils.createObjectNode();\n         readerParam.put(\"username\", dataSourceCfg.getUser());\n         readerParam.put(\"password\", dataSourceCfg.getPassword());\n-        readerParam.put(\"connection\", readerConnArr);\n+        readerParam.putArray(\"connection\").addAll(readerConnArr);\n \n-        JSONObject reader = new JSONObject();\n+\n+        ObjectNode reader = JSONUtils.createObjectNode();\n         reader.put(\"name\", DataxUtils.getReaderPluginName(DbType.of(dataxTaskExecutionContext.getSourcetype())));\n-        reader.put(\"parameter\", readerParam);\n+        reader.set(\"parameter\", readerParam);\n+\n+        List<ObjectNode> writerConnArr = new ArrayList<>();\n+        ObjectNode writerConn = JSONUtils.createObjectNode();\n+        ArrayNode tableArr = writerConn.putArray(\"table\");\n+        for (String table : new String[]{dataXParameters.getTargetTable()}) {\n+            tableArr.add(table);\n+        }\n \n-        List<JSONObject> writerConnArr = new ArrayList<>();\n-        JSONObject writerConn = new JSONObject();\n-        writerConn.put(\"table\", new String[] {dataXParameters.getTargetTable()});\n         writerConn.put(\"jdbcUrl\", dataTargetCfg.getJdbcUrl());\n         writerConnArr.add(writerConn);\n \n-        JSONObject writerParam = new JSONObject();\n+        ObjectNode writerParam = JSONUtils.createObjectNode();\n         writerParam.put(\"username\", dataTargetCfg.getUser());\n         writerParam.put(\"password\", dataTargetCfg.getPassword());\n-        writerParam.put(\"column\",\n-            parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n-                    DbType.of(dataxTaskExecutionContext.getTargetType()),\n-                    dataSourceCfg, dataXParameters.getSql()));\n-        writerParam.put(\"connection\", writerConnArr);\n+\n+        String[] columns = parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n+                DbType.of(dataxTaskExecutionContext.getTargetType()),\n+                dataSourceCfg, dataXParameters.getSql());\n+        ArrayNode columnArr = writerParam.putArray(\"column\");", "originalCommit": "9a92ab79822c1804fe5931ed3c2ec8e2dcb45eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzNzY3OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r437137679", "bodyText": "The type of columns is String[] , addAll() only accept ArrayNode", "author": "simon824", "createdAt": "2020-06-09T04:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwOTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMjk4NA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438122984", "bodyText": "ok", "author": "gabrywu", "createdAt": "2020-06-10T13:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwOTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\nindex f85dfb8a3..723ded4f2 100755\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java\n\n@@ -278,7 +275,9 @@ public class DataxTask extends AbstractTask {\n         String[] columns = parsingSqlColumnNames(DbType.of(dataxTaskExecutionContext.getSourcetype()),\n                 DbType.of(dataxTaskExecutionContext.getTargetType()),\n                 dataSourceCfg, dataXParameters.getSql());\n+\n         ArrayNode columnArr = writerParam.putArray(\"column\");\n+        columnArr.addAll()\n         for (String column : columns) {\n             columnArr.add(column);\n         }\n"}}, {"oid": "6e907f150c3b06a6fc11e0eee8ca0f403d101962", "url": "https://github.com/apache/dolphinscheduler/commit/6e907f150c3b06a6fc11e0eee8ca0f403d101962", "message": "1. specified jackson Date format.\n2. remove getMapper method,replace with toList()\n3. rewrite toList method,support constructCollectionType.\n4. parseObject(resp, Map.class) replace to toMap() method\n5. rename JacksonSerialize to JsonSerializer\n\nrewrite createArrayNode,createObjectNode method will Affect too many lines \uff0ci will fix it in the next pr.", "committedDate": "2020-06-09T05:02:50Z", "type": "commit"}, {"oid": "2c590450ab579b6c4db74222ac08a3a7892480b9", "url": "https://github.com/apache/dolphinscheduler/commit/2c590450ab579b6c4db74222ac08a3a7892480b9", "message": "Merge pull request #1 from apache/dev\n\nmerge", "committedDate": "2020-06-09T06:08:39Z", "type": "commit"}, {"oid": "8cabb7a907f408d46b442e9f2635d6e97454aac3", "url": "https://github.com/apache/dolphinscheduler/commit/8cabb7a907f408d46b442e9f2635d6e97454aac3", "message": "1. specified jackson Date format.\n2. remove getMapper method,replace with toList()\n3. rewrite toList method,support constructCollectionType.\n4. parseObject(resp, Map.class) replace to toMap() method\n5. rename JacksonSerialize to JsonSerializer\n\nrewrite createArrayNode,createObjectNode method will Affect too many lines \uff0ci will fix it in the next pr.", "committedDate": "2020-06-09T06:15:13Z", "type": "commit"}, {"oid": "c5b3f35bd4f217df31cd1fba8eb605e52909f972", "url": "https://github.com/apache/dolphinscheduler/commit/c5b3f35bd4f217df31cd1fba8eb605e52909f972", "message": "replace fastjson annotation", "committedDate": "2020-06-09T06:37:16Z", "type": "commit"}, {"oid": "fad09075f9dd4542ded0be6a490bfe83415dedd5", "url": "https://github.com/apache/dolphinscheduler/commit/fad09075f9dd4542ded0be6a490bfe83415dedd5", "message": "remove fastjson maven dependence", "committedDate": "2020-06-10T01:16:28Z", "type": "commit"}, {"oid": "7d45e116bb98776c42f817c484172eabc8cac441", "url": "https://github.com/apache/dolphinscheduler/commit/7d45e116bb98776c42f817c484172eabc8cac441", "message": "remove fastjson license", "committedDate": "2020-06-10T01:29:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5ODE3MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438098170", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "author": "gabrywu", "createdAt": "2020-06-10T12:54:26Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport com.fasterxml.jackson.annotation.JsonFormat;\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteAckCommand implements Serializable {\r\r    /**\r     * taskInstanceId\r     */\r    private int taskInstanceId;\r\r    /**\r     * startTime\r     */\r    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r    private Date startTime;\r\r    /**\r     * host\r     */\r    private String host;\r\r    /**\r     * status\r     */\r    private int status;\r\r    /**\r     * logPath\r     */\r    private String logPath;\r\r    /**\r     * executePath\r     */\r    private String executePath;\r\r    public Date getStartTime() {\r        return startTime;\r    }\r\r    public void setStartTime(Date startTime) {\r        this.startTime = startTime;\r    }\r\r    public String getHost() {\r        return host;\r    }\r\r    public void setHost(String host) {\r        this.host = host;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public String getLogPath() {\r        return logPath;\r    }\r\r    public void setLogPath(String logPath) {\r        this.logPath = logPath;\r    }\r\r    public String getExecutePath() {\r        return executePath;\r    }\r\r    public void setExecutePath(String executePath) {\r        this.executePath = executePath;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_ACK);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteAckCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", startTime=\" + startTime +\r                \", host='\" + host + '\\'' +\r                \", status=\" + status +\r                \", logPath='\" + logPath + '\\'' +\r                \", executePath='\" + executePath + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\nindex 796e4dc35..135c14975 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java\n\n@@ -1 +1,133 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteAckCommand implements Serializable {\n\n    /**\n     * taskInstanceId\n     */\n    private int taskInstanceId;\n\n    /**\n     * startTime\n     */\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n    private Date startTime;\n\n    /**\n     * host\n     */\n    private String host;\n\n    /**\n     * status\n     */\n    private int status;\n\n    /**\n     * logPath\n     */\n    private String logPath;\n\n    /**\n     * executePath\n     */\n    private String executePath;\n\n    public Date getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(Date startTime) {\n        this.startTime = startTime;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public String getLogPath() {\n        return logPath;\n    }\n\n    public void setLogPath(String logPath) {\n        this.logPath = logPath;\n    }\n\n    public String getExecutePath() {\n        return executePath;\n    }\n\n    public void setExecutePath(String executePath) {\n        this.executePath = executePath;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_ACK);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteAckCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", startTime=\" + startTime +\n                \", host='\" + host + '\\'' +\n                \", status=\" + status +\n                \", logPath='\" + logPath + '\\'' +\n                \", executePath='\" + executePath + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.remote.command;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+/**\n+ *  execute task request command\n+ */\n+public class TaskExecuteAckCommand implements Serializable {\n+\n+    /**\n+     * taskInstanceId\n+     */\n+    private int taskInstanceId;\n+\n+    /**\n+     * startTime\n+     */\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n+    private Date startTime;\n+\n+    /**\n+     * host\n+     */\n+    private String host;\n+\n+    /**\n+     * status\n+     */\n+    private int status;\n+\n+    /**\n+     * logPath\n+     */\n+    private String logPath;\n+\n+    /**\n+     * executePath\n+     */\n+    private String executePath;\n+\n+    public Date getStartTime() {\n+        return startTime;\n+    }\n+\n+    public void setStartTime(Date startTime) {\n+        this.startTime = startTime;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public int getTaskInstanceId() {\n+        return taskInstanceId;\n+    }\n+\n+    public void setTaskInstanceId(int taskInstanceId) {\n+        this.taskInstanceId = taskInstanceId;\n+    }\n+\n+    public String getLogPath() {\n+        return logPath;\n+    }\n+\n+    public void setLogPath(String logPath) {\n+        this.logPath = logPath;\n+    }\n+\n+    public String getExecutePath() {\n+        return executePath;\n+    }\n+\n+    public void setExecutePath(String executePath) {\n+        this.executePath = executePath;\n+    }\n+\n+    /**\n+     *  package request command\n+     *\n+     * @return command\n+     */\n+    public Command convert2Command(){\n+        Command command = new Command();\n+        command.setType(CommandType.TASK_EXECUTE_ACK);\n+        byte[] body = JsonSerializer.serialize(this);\n+        command.setBody(body);\n+        return command;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TaskExecuteAckCommand{\" +\n+                \"taskInstanceId=\" + taskInstanceId +\n+                \", startTime=\" + startTime +\n+                \", host='\" + host + '\\'' +\n+                \", status=\" + status +\n+                \", logPath='\" + logPath + '\\'' +\n+                \", executePath='\" + executePath + '\\'' +\n+                '}';\n+    }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5ODI4Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438098286", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "author": "gabrywu", "createdAt": "2020-06-10T12:54:39Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\r\r/**\r *  execute task request command\r */\rpublic class TaskExecuteRequestCommand implements Serializable {\r\r    /**\r     *  task execution context\r     */\r    private String taskExecutionContext;\r\r    public String getTaskExecutionContext() {\r        return taskExecutionContext;\r    }\r\r    public void setTaskExecutionContext(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    public TaskExecuteRequestCommand() {\r    }\r\r    public TaskExecuteRequestCommand(String taskExecutionContext) {\r        this.taskExecutionContext = taskExecutionContext;\r    }\r\r    /**\r     *  package request command\r     *\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_REQUEST);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteRequestCommand{\" +\r                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\nindex 603f8a088..4ae28e3ca 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java\n\n@@ -1 +1,67 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\n\n/**\n *  execute task request command\n */\npublic class TaskExecuteRequestCommand implements Serializable {\n\n    /**\n     *  task execution context\n     */\n    private String taskExecutionContext;\n\n    public String getTaskExecutionContext() {\n        return taskExecutionContext;\n    }\n\n    public void setTaskExecutionContext(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    public TaskExecuteRequestCommand() {\n    }\n\n    public TaskExecuteRequestCommand(String taskExecutionContext) {\n        this.taskExecutionContext = taskExecutionContext;\n    }\n\n    /**\n     *  package request command\n     *\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_REQUEST);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteRequestCommand{\" +\n                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.remote.command;\n+\n+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n+\n+import java.io.Serializable;\n+\n+/**\n+ *  execute task request command\n+ */\n+public class TaskExecuteRequestCommand implements Serializable {\n+\n+    /**\n+     *  task execution context\n+     */\n+    private String taskExecutionContext;\n+\n+    public String getTaskExecutionContext() {\n+        return taskExecutionContext;\n+    }\n+\n+    public void setTaskExecutionContext(String taskExecutionContext) {\n+        this.taskExecutionContext = taskExecutionContext;\n+    }\n+\n+    public TaskExecuteRequestCommand() {\n+    }\n+\n+    public TaskExecuteRequestCommand(String taskExecutionContext) {\n+        this.taskExecutionContext = taskExecutionContext;\n+    }\n+\n+    /**\n+     *  package request command\n+     *\n+     * @return command\n+     */\n+    public Command convert2Command(){\n+        Command command = new Command();\n+        command.setType(CommandType.TASK_EXECUTE_REQUEST);\n+        byte[] body = JsonSerializer.serialize(this);\n+        command.setBody(body);\n+        return command;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TaskExecuteRequestCommand{\" +\n+                \"taskExecutionContext='\" + taskExecutionContext + '\\'' +\n+                '}';\n+    }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5OTAxNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438099017", "bodyText": "please change windows new line 'CR' to linux new line 'LF'", "author": "gabrywu", "createdAt": "2020-06-10T12:55:49Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java", "diffHunk": "@@ -1 +1 @@\n-/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = FastJsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r\n\\ No newline at end of file\n+/*\r * Licensed to the Apache Software Foundation (ASF) under one or more\r * contributor license agreements.  See the NOTICE file distributed with\r * this work for additional information regarding copyright ownership.\r * The ASF licenses this file to You under the Apache License, Version 2.0\r * (the \"License\"); you may not use this file except in compliance with\r * the License.  You may obtain a copy of the License at\r *\r *    http://www.apache.org/licenses/LICENSE-2.0\r *\r * Unless required by applicable law or agreed to in writing, software\r * distributed under the License is distributed on an \"AS IS\" BASIS,\r * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r * See the License for the specific language governing permissions and\r * limitations under the License.\r */\rpackage org.apache.dolphinscheduler.remote.command;\r\rimport com.fasterxml.jackson.annotation.JsonFormat;\rimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\r\rimport java.io.Serializable;\rimport java.util.Date;\r\r/**\r *  execute task response command\r */\rpublic class TaskExecuteResponseCommand implements Serializable {\r\r\r    public TaskExecuteResponseCommand() {\r    }\r\r    public TaskExecuteResponseCommand(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    /**\r     *  task instance id\r     */\r    private int taskInstanceId;\r\r    /**\r     *  status\r     */\r    private int status;\r\r\r    /**\r     *  end time\r     */\r    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r    private Date endTime;\r\r\r    /**\r     * processId\r     */\r    private int processId;\r\r    /**\r     * appIds\r     */\r    private String appIds;\r\r\r    public int getTaskInstanceId() {\r        return taskInstanceId;\r    }\r\r    public void setTaskInstanceId(int taskInstanceId) {\r        this.taskInstanceId = taskInstanceId;\r    }\r\r    public int getStatus() {\r        return status;\r    }\r\r    public void setStatus(int status) {\r        this.status = status;\r    }\r\r    public Date getEndTime() {\r        return endTime;\r    }\r\r    public void setEndTime(Date endTime) {\r        this.endTime = endTime;\r    }\r\r    public int getProcessId() {\r        return processId;\r    }\r\r    public void setProcessId(int processId) {\r        this.processId = processId;\r    }\r\r    public String getAppIds() {\r        return appIds;\r    }\r\r    public void setAppIds(String appIds) {\r        this.appIds = appIds;\r    }\r\r    /**\r     * package response command\r     * @return command\r     */\r    public Command convert2Command(){\r        Command command = new Command();\r        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\r        byte[] body = JsonSerializer.serialize(this);\r        command.setBody(body);\r        return command;\r    }\r\r    @Override\r    public String toString() {\r        return \"TaskExecuteResponseCommand{\" +\r                \"taskInstanceId=\" + taskInstanceId +\r                \", status=\" + status +\r                \", endTime=\" + endTime +\r                \", processId=\" + processId +\r                \", appIds='\" + appIds + '\\'' +\r                '}';\r    }\r}\r", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "chunk": "diff --git a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\nindex 0ea34fe39..e559334f4 100644\n--- a/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\n+++ b/dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java\n\n@@ -1 +1,129 @@\n-/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.dolphinscheduler.remote.command;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n *  execute task response command\n */\npublic class TaskExecuteResponseCommand implements Serializable {\n\n\n    public TaskExecuteResponseCommand() {\n    }\n\n    public TaskExecuteResponseCommand(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    /**\n     *  task instance id\n     */\n    private int taskInstanceId;\n\n    /**\n     *  status\n     */\n    private int status;\n\n\n    /**\n     *  end time\n     */\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n    private Date endTime;\n\n\n    /**\n     * processId\n     */\n    private int processId;\n\n    /**\n     * appIds\n     */\n    private String appIds;\n\n\n    public int getTaskInstanceId() {\n        return taskInstanceId;\n    }\n\n    public void setTaskInstanceId(int taskInstanceId) {\n        this.taskInstanceId = taskInstanceId;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public Date getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(Date endTime) {\n        this.endTime = endTime;\n    }\n\n    public int getProcessId() {\n        return processId;\n    }\n\n    public void setProcessId(int processId) {\n        this.processId = processId;\n    }\n\n    public String getAppIds() {\n        return appIds;\n    }\n\n    public void setAppIds(String appIds) {\n        this.appIds = appIds;\n    }\n\n    /**\n     * package response command\n     * @return command\n     */\n    public Command convert2Command(){\n        Command command = new Command();\n        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\n        byte[] body = JsonSerializer.serialize(this);\n        command.setBody(body);\n        return command;\n    }\n\n    @Override\n    public String toString() {\n        return \"TaskExecuteResponseCommand{\" +\n                \"taskInstanceId=\" + taskInstanceId +\n                \", status=\" + status +\n                \", endTime=\" + endTime +\n                \", processId=\" + processId +\n                \", appIds='\" + appIds + '\\'' +\n                '}';\n    }\n}\n\\ No newline at end of file\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dolphinscheduler.remote.command;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+/**\n+ *  execute task response command\n+ */\n+public class TaskExecuteResponseCommand implements Serializable {\n+\n+\n+    public TaskExecuteResponseCommand() {\n+    }\n+\n+    public TaskExecuteResponseCommand(int taskInstanceId) {\n+        this.taskInstanceId = taskInstanceId;\n+    }\n+\n+    /**\n+     *  task instance id\n+     */\n+    private int taskInstanceId;\n+\n+    /**\n+     *  status\n+     */\n+    private int status;\n+\n+\n+    /**\n+     *  end time\n+     */\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\n+    private Date endTime;\n+\n+\n+    /**\n+     * processId\n+     */\n+    private int processId;\n+\n+    /**\n+     * appIds\n+     */\n+    private String appIds;\n+\n+\n+    public int getTaskInstanceId() {\n+        return taskInstanceId;\n+    }\n+\n+    public void setTaskInstanceId(int taskInstanceId) {\n+        this.taskInstanceId = taskInstanceId;\n+    }\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public Date getEndTime() {\n+        return endTime;\n+    }\n+\n+    public void setEndTime(Date endTime) {\n+        this.endTime = endTime;\n+    }\n+\n+    public int getProcessId() {\n+        return processId;\n+    }\n+\n+    public void setProcessId(int processId) {\n+        this.processId = processId;\n+    }\n+\n+    public String getAppIds() {\n+        return appIds;\n+    }\n+\n+    public void setAppIds(String appIds) {\n+        this.appIds = appIds;\n+    }\n+\n+    /**\n+     * package response command\n+     * @return command\n+     */\n+    public Command convert2Command(){\n+        Command command = new Command();\n+        command.setType(CommandType.TASK_EXECUTE_RESPONSE);\n+        byte[] body = JsonSerializer.serialize(this);\n+        command.setBody(body);\n+        return command;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TaskExecuteResponseCommand{\" +\n+                \"taskInstanceId=\" + taskInstanceId +\n+                \", status=\" + status +\n+                \", endTime=\" + endTime +\n+                \", processId=\" + processId +\n+                \", appIds='\" + appIds + '\\'' +\n+                '}';\n+    }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjIwMQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438102201", "bodyText": "why not user JsonUtils tool class ,just suggestion ,nonstrict", "author": "gabrywu", "createdAt": "2020-06-10T13:00:26Z", "path": "dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JsonSerializer.java", "diffHunk": "@@ -42,7 +56,14 @@\n \t * @return string\n \t */\n \tpublic static <T> String serializeToString(T obj)  {\n-\t\treturn JSON.toJSONString(obj);\n+\t\tString json = \"\";\n+\t\ttry {\n+\t\t\t json = objectMapper.writeValueAsString(obj);", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTAxNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438105017", "bodyText": "better use Collections.EMPTY_LIST", "author": "gabrywu", "createdAt": "2020-06-10T13:04:39Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java", "diffHunk": "@@ -107,11 +121,13 @@ public static String toJson(Object object) {\n         if (StringUtils.isEmpty(json)) {\n             return new ArrayList<>();", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfecfb799b91459e825c2104ab6fa25d07e4f7f1", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\nindex c78ceb2d5..20209c0a9 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java\n\n@@ -119,7 +119,7 @@ public class JSONUtils {\n      */\n     public static <T> List<T> toList(String json, Class<T> clazz) {\n         if (StringUtils.isEmpty(json)) {\n-            return new ArrayList<>();\n+            return Collections.emptyList();\n         }\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNjk2MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438106960", "bodyText": "why not assign the result of JSONUtils.toList to globalParamsList directly", "author": "gabrywu", "createdAt": "2020-06-10T13:07:29Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java", "diffHunk": "@@ -152,7 +153,8 @@ public void run() {\n         // global params string\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n-            List<Property> globalParamsList = JSONObject.parseArray(globalParamsStr, Property.class);\n+            List<Property> globalParamsList = new ArrayList<>();", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\nindex b964a7289..677f09e11 100644\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java\n\n@@ -153,8 +153,7 @@ public class TaskExecuteThread implements Runnable {\n         // global params string\n         String globalParamsStr = taskExecutionContext.getGlobalParams();\n         if (globalParamsStr != null) {\n-            List<Property> globalParamsList = new ArrayList<>();\n-            globalParamsList = JSONUtils.toList(globalParamsStr, Property.class);\n+            List<Property> globalParamsList = JSONUtils.toList(globalParamsStr, Property.class);\n             globalParamsMap.putAll(globalParamsList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue)));\n         }\n         return globalParamsMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMjM5Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2872#discussion_r438112392", "bodyText": "do you mind move tempObj definition to this position ?", "author": "gabrywu", "createdAt": "2020-06-10T13:15:56Z", "path": "dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java", "diffHunk": "@@ -205,16 +206,16 @@ public Boolean verifyIsNeedCreateCommand(Command command){\n         CommandType commandType = command.getCommandType();\n \n         if(cmdTypeMap.containsKey(commandType)){\n-            JSONObject cmdParamObj = (JSONObject) JSON.parse(command.getCommandParam());\n-            JSONObject tempObj;\n-            int processInstanceId = cmdParamObj.getInteger(CMDPARAM_RECOVER_PROCESS_ID_STRING);\n+            ObjectNode cmdParamObj = JSONUtils.parseObject(command.getCommandParam());\n+            ObjectNode tempObj;\n+            int processInstanceId = cmdParamObj.path(CMDPARAM_RECOVER_PROCESS_ID_STRING).asInt();\n \n             List<Command> commands = commandMapper.selectList(null);\n             // for all commands\n             for (Command tmpCommand:commands){\n                 if(cmdTypeMap.containsKey(tmpCommand.getCommandType())){\n-                    tempObj = (JSONObject) JSON.parse(tmpCommand.getCommandParam());\n-                    if(tempObj != null && processInstanceId == tempObj.getInteger(CMDPARAM_RECOVER_PROCESS_ID_STRING)){\n+                    tempObj = JSONUtils.parseObject(tmpCommand.getCommandParam());", "originalCommit": "7d45e116bb98776c42f817c484172eabc8cac441", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "chunk": "diff --git a/dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java b/dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java\nindex 127369331..237f2a828 100644\n--- a/dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java\n+++ b/dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java\n\n@@ -207,14 +207,13 @@ public class ProcessService {\n \n         if(cmdTypeMap.containsKey(commandType)){\n             ObjectNode cmdParamObj = JSONUtils.parseObject(command.getCommandParam());\n-            ObjectNode tempObj;\n             int processInstanceId = cmdParamObj.path(CMDPARAM_RECOVER_PROCESS_ID_STRING).asInt();\n \n             List<Command> commands = commandMapper.selectList(null);\n             // for all commands\n             for (Command tmpCommand:commands){\n                 if(cmdTypeMap.containsKey(tmpCommand.getCommandType())){\n-                    tempObj = JSONUtils.parseObject(tmpCommand.getCommandParam());\n+                    ObjectNode tempObj = JSONUtils.parseObject(tmpCommand.getCommandParam());\n                     if(tempObj != null && processInstanceId == tempObj.path(CMDPARAM_RECOVER_PROCESS_ID_STRING).asInt()){\n                         isNeedCreate = false;\n                         break;\n"}}, {"oid": "f643981f489e34dff84f23ffa9d559a7e398cb4b", "url": "https://github.com/apache/dolphinscheduler/commit/f643981f489e34dff84f23ffa9d559a7e398cb4b", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. Format code", "committedDate": "2020-06-11T02:14:15Z", "type": "commit"}, {"oid": "4e37be68af658f4b79cd9744e7e0aea8d538188f", "url": "https://github.com/apache/dolphinscheduler/commit/4e37be68af658f4b79cd9744e7e0aea8d538188f", "message": "Update SqoopTaskTest.java", "committedDate": "2020-06-12T01:18:00Z", "type": "commit"}, {"oid": "094d09ba74062dc8a828d87ba8e9d3d9a14c42a8", "url": "https://github.com/apache/dolphinscheduler/commit/094d09ba74062dc8a828d87ba8e9d3d9a14c42a8", "message": "Update pom.xml", "committedDate": "2020-06-12T01:20:28Z", "type": "commit"}, {"oid": "b5a296f4cdf991ec22544ef1cde8b8dbf8a2cdd5", "url": "https://github.com/apache/dolphinscheduler/commit/b5a296f4cdf991ec22544ef1cde8b8dbf8a2cdd5", "message": "Update pom.xml", "committedDate": "2020-06-12T01:21:07Z", "type": "commit"}, {"oid": "71619ed29bc9ff3f34a5308576711d86779392a6", "url": "https://github.com/apache/dolphinscheduler/commit/71619ed29bc9ff3f34a5308576711d86779392a6", "message": "Update pom.xml", "committedDate": "2020-06-12T01:22:44Z", "type": "commit"}, {"oid": "0b11275880a52a67ff1b77b0c51c48fa2d3211c1", "url": "https://github.com/apache/dolphinscheduler/commit/0b11275880a52a67ff1b77b0c51c48fa2d3211c1", "message": "Merge pull request #2 from apache/dev\n\nmerge", "committedDate": "2020-06-12T01:22:58Z", "type": "commit"}, {"oid": "65841a5709aa681e7b3df6d8cdc10b575fdb9d7b", "url": "https://github.com/apache/dolphinscheduler/commit/65841a5709aa681e7b3df6d8cdc10b575fdb9d7b", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. solve conflict", "committedDate": "2020-06-12T01:31:04Z", "type": "commit"}, {"oid": "cfecfb799b91459e825c2104ab6fa25d07e4f7f1", "url": "https://github.com/apache/dolphinscheduler/commit/cfecfb799b91459e825c2104ab6fa25d07e4f7f1", "message": "1. change windows new line 'CR' to linux new line 'LF'\n2. solve conflict", "committedDate": "2020-06-12T01:59:40Z", "type": "commit"}, {"oid": "24120a4641c014a4c9dcdb36cfa787f2b660822e", "url": "https://github.com/apache/dolphinscheduler/commit/24120a4641c014a4c9dcdb36cfa787f2b660822e", "message": "fix the bad code smell", "committedDate": "2020-06-12T03:27:42Z", "type": "commit"}, {"oid": "65953fe2573d4358c4bbc023cf8f04f6343345bb", "url": "https://github.com/apache/dolphinscheduler/commit/65953fe2573d4358c4bbc023cf8f04f6343345bb", "message": "fix testBuildDataxJobContentJson", "committedDate": "2020-06-12T04:10:17Z", "type": "commit"}, {"oid": "1b7d8ee236990747ecfc40726092cb352cd91f36", "url": "https://github.com/apache/dolphinscheduler/commit/1b7d8ee236990747ecfc40726092cb352cd91f36", "message": "fix the bad code smell", "committedDate": "2020-06-12T04:35:18Z", "type": "commit"}]}