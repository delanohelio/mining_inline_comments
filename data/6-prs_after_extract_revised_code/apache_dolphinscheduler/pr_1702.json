{"pr_number": 1702, "pr_title": " Fix bug: Use try-with-resources or close this \"Statement\" in a \"finally\" clause.", "pr_createdAt": "2020-01-03T13:48:15Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/1702", "timeline": [{"oid": "0ec518123da50772d5e6fd4c961dd3ed46cc6cfd", "url": "https://github.com/apache/dolphinscheduler/commit/0ec518123da50772d5e6fd4c961dd3ed46cc6cfd", "message": "#1701  Fix bug: Use try-with-resources or close this \"Statement\" in a \"finally\" clause.", "committedDate": "2020-01-03T13:28:03Z", "type": "commit"}, {"oid": "f26bd5c345b6c850b09fd37520d84083bc750a11", "url": "https://github.com/apache/dolphinscheduler/commit/f26bd5c345b6c850b09fd37520d84083bc750a11", "message": "fix some indent", "committedDate": "2020-01-03T13:42:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzc3Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367887772", "bodyText": "remove this line", "author": "Technoboy-", "createdAt": "2020-01-17T11:18:40Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -243,46 +233,35 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\n \t\t\t\t\tsql = command.toString().replaceAll(\"\\\\{\\\\{APPDB\\\\}\\\\}\", dbName);\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql : \" + sql);\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(sql);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(sql);\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql : {}\", sql);\n+                    \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(sql);\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2a8371b9fddb0541f674b972483a485fb861d30", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\nindex b1797b396..bbc937c89 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n\n@@ -257,7 +257,7 @@ public class ScriptRunner {\n                             }\n                         }   \n                     } catch (SQLException e) {\n-                        logger.error(e.getMessage(),e);\n+                        logger.error(\"SQLException\", e);\n                         throw e;\n                     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzk3MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367887971", "bodyText": "logger.error(\"SQLException\", e);", "author": "Technoboy-", "createdAt": "2020-01-17T11:19:11Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -243,46 +233,35 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\n \t\t\t\t\tsql = command.toString().replaceAll(\"\\\\{\\\\{APPDB\\\\}\\\\}\", dbName);\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql : \" + sql);\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(sql);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(sql);\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql : {}\", sql);\n+                    \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(sql);\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");\n+                                }\n+                            }\n+                        }   \n+                    } catch (SQLException e) {\n+                        logger.error(e.getMessage(),e);", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2a8371b9fddb0541f674b972483a485fb861d30", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\nindex b1797b396..bbc937c89 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n\n@@ -257,7 +257,7 @@ public class ScriptRunner {\n                             }\n                         }   \n                     } catch (SQLException e) {\n-                        logger.error(e.getMessage(),e);\n+                        logger.error(\"SQLException\", e);\n                         throw e;\n                     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODA5Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888092", "bodyText": "remove", "author": "Technoboy-", "createdAt": "2020-01-17T11:19:27Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -291,11 +270,11 @@ private void runScript(Connection conn, Reader reader , String dbName) throws IO\n \t\t\t}\n \n \t\t} catch (SQLException e) {\n-\t\t\tlogger.error(\"Error executing: \" + sql);\n+\t\t\tlogger.error(\"Error executing: {}\", sql);\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\te.fillInStackTrace();", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2a8371b9fddb0541f674b972483a485fb861d30", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\nindex b1797b396..bbc937c89 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n\n@@ -270,7 +270,6 @@ public class ScriptRunner {\n \t\t\t}\n \n \t\t} catch (SQLException e) {\n-\t\t\tlogger.error(\"Error executing: {}\", sql);\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\te.fillInStackTrace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODE1MA==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888150", "bodyText": "remove", "author": "Technoboy-", "createdAt": "2020-01-17T11:19:36Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -207,11 +197,11 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t}\n \n \t\t} catch (SQLException e) {\n-\t\t\tlogger.error(\"Error executing: \" + command.toString());\n+\t\t\tlogger.error(\"Error executing: {}\", command);\n \t\t\tthrow e;\n \t\t} catch (IOException e) {\n \t\t\te.fillInStackTrace();", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODIzNg==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888236", "bodyText": "add more info", "author": "Technoboy-", "createdAt": "2020-01-17T11:19:50Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -161,44 +161,34 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql:\"+command.toString());\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(command.toString());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(command.toString());\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql: {}\", command);\n \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(command.toString());\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2a8371b9fddb0541f674b972483a485fb861d30", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\nindex b1797b396..bbc937c89 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n\n@@ -184,7 +184,7 @@ public class ScriptRunner {\n                             }\n                         }   \n                     } catch (SQLException e) {\n-                        logger.error(e.getMessage(),e);\n+                        logger.error(\"SQLException\", e);\n                         throw e;\n                     }\n                     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODM0NA==", "url": "https://github.com/apache/dolphinscheduler/pull/1702#discussion_r367888344", "bodyText": "logger.error(\"SQLException\", e);", "author": "Technoboy-", "createdAt": "2020-01-17T11:20:09Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java", "diffHunk": "@@ -161,44 +161,34 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx\n \t\t\t\t\t\t|| fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n \t\t\t\t\tcommand.append(line.substring(0, line.lastIndexOf(getDelimiter())));\n \t\t\t\t\tcommand.append(\" \");\n-\t\t\t\t\tStatement statement = conn.createStatement();\n-\t\t\t\t\tboolean hasResults = false;\n-\t\t\t\t\tlogger.info(\"sql:\"+command.toString());\n-\t\t\t\t\tif (stopOnError) {\n-\t\t\t\t\t\thasResults = statement.execute(command.toString());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tstatement.execute(command.toString());\n-\t\t\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\t\t\tlogger.error(e.getMessage(),e);\n-\t\t\t\t\t\t\tthrow e;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tResultSet rs = statement.getResultSet();\n-\t\t\t\t\tif (hasResults && rs != null) {\n-\t\t\t\t\t\tResultSetMetaData md = rs.getMetaData();\n-\t\t\t\t\t\tint cols = md.getColumnCount();\n-\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\tString name = md.getColumnLabel(i);\n-\t\t\t\t\t\t\tlogger.info(name + \"\\t\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\twhile (rs.next()) {\n-\t\t\t\t\t\t\tfor (int i = 0; i < cols; i++) {\n-\t\t\t\t\t\t\t\tString value = rs.getString(i);\n-\t\t\t\t\t\t\t\tlogger.info(value + \"\\t\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tlogger.info(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+                    logger.info(\"sql: {}\", command);\n \n+                    try (Statement statement = conn.createStatement()) {\n+                        statement.execute(command.toString());\n+                        try (ResultSet rs = statement.getResultSet()) {\n+                            if (stopOnError && rs != null) {\n+                                ResultSetMetaData md = rs.getMetaData();\n+                                int cols = md.getColumnCount();\n+                                for (int i = 0; i < cols; i++) {\n+                                    String name = md.getColumnLabel(i);\n+                                    logger.info(\"{} \\t\", name);\n+                                }\n+                                logger.info(\"\");\n+                                while (rs.next()) {\n+                                    for (int i = 0; i < cols; i++) {\n+                                        String value = rs.getString(i);\n+                                        logger.info(\"{} \\t\", value);\n+                                    }\n+                                    logger.info(\"\");\n+                                }\n+                            }\n+                        }   \n+                    } catch (SQLException e) {\n+                        logger.error(e.getMessage(),e);", "originalCommit": "f26bd5c345b6c850b09fd37520d84083bc750a11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2a8371b9fddb0541f674b972483a485fb861d30", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\nindex b1797b396..bbc937c89 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java\n\n@@ -184,7 +184,7 @@ public class ScriptRunner {\n                             }\n                         }   \n                     } catch (SQLException e) {\n-                        logger.error(e.getMessage(),e);\n+                        logger.error(\"SQLException\", e);\n                         throw e;\n                     }\n                     \n"}}, {"oid": "c2a8371b9fddb0541f674b972483a485fb861d30", "url": "https://github.com/apache/dolphinscheduler/commit/c2a8371b9fddb0541f674b972483a485fb861d30", "message": "refix code smell", "committedDate": "2020-02-06T10:15:04Z", "type": "commit"}]}