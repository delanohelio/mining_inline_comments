{"pr_number": 3659, "pr_title": "[Feature]Add Python task \"task variable / result transfer\" implementation", "pr_createdAt": "2020-09-03T16:56:17Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/3659", "timeline": [{"oid": "fb2aa9422b19b9bac3a32b080008a43c3cf766f9", "url": "https://github.com/apache/dolphinscheduler/commit/fb2aa9422b19b9bac3a32b080008a43c3cf766f9", "message": "\u589e\u52a0Python Task\u7684\u201c\u4efb\u52a1\u53d8\u91cf/\u7ed3\u679c\u4f20\u9012\u201d\u5b9e\u73b0\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-03T16:55:07Z", "type": "commit"}, {"oid": "57d541e66e45d58ac8770044f54839dcfb8d3326", "url": "https://github.com/apache/dolphinscheduler/commit/57d541e66e45d58ac8770044f54839dcfb8d3326", "message": "add two files license\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-07T13:44:30Z", "type": "commit"}, {"oid": "0816f1e927a714121b363854dbf50898b73cae22", "url": "https://github.com/apache/dolphinscheduler/commit/0816f1e927a714121b363854dbf50898b73cae22", "message": "fix 'server/worker/task/AbstractCommandExecutor.java' code style\nSigned-off-by: 1941815847Cy4 <1941815847cy4@kuaishou.com>", "committedDate": "2020-09-07T14:12:22Z", "type": "commit"}, {"oid": "f3ff00c01b5ae487c00d3ec460ab919280642fe1", "url": "https://github.com/apache/dolphinscheduler/commit/f3ff00c01b5ae487c00d3ec460ab919280642fe1", "message": "update DB\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-09T07:27:25Z", "type": "commit"}, {"oid": "ef2551190ecd4837bee85782bb9542c723be07bc", "url": "https://github.com/apache/dolphinscheduler/commit/ef2551190ecd4837bee85782bb9542c723be07bc", "message": "update DB -- 2\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-09T10:51:29Z", "type": "commit"}, {"oid": "05bc0a35390c11d93270395d173f70d59b9861fe", "url": "https://github.com/apache/dolphinscheduler/commit/05bc0a35390c11d93270395d173f70d59b9861fe", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-10T17:09:27Z", "type": "commit"}, {"oid": "0e1d794fdf1c34920b925c8f69158fbce63da0c1", "url": "https://github.com/apache/dolphinscheduler/commit/0e1d794fdf1c34920b925c8f69158fbce63da0c1", "message": "fix codestyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-10T17:16:48Z", "type": "commit"}, {"oid": "095b483be4b2e7beb003362d058f24c44bb6effa", "url": "https://github.com/apache/dolphinscheduler/commit/095b483be4b2e7beb003362d058f24c44bb6effa", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-11T04:48:32Z", "type": "commit"}, {"oid": "e6ea62eb720e111b451ef5e211d477655fdaf8c0", "url": "https://github.com/apache/dolphinscheduler/commit/e6ea62eb720e111b451ef5e211d477655fdaf8c0", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-11T09:06:23Z", "type": "commit"}, {"oid": "e30a694be4279ccca2273fef14f5e6ab3054abb0", "url": "https://github.com/apache/dolphinscheduler/commit/e30a694be4279ccca2273fef14f5e6ab3054abb0", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-11T09:57:53Z", "type": "commit"}, {"oid": "09d8f93288a217f75c17965169b36b054c62af2d", "url": "https://github.com/apache/dolphinscheduler/commit/09d8f93288a217f75c17965169b36b054c62af2d", "message": "add VarPoolUtils Test\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:05:05Z", "type": "commit"}, {"oid": "4ae9650080673a2650598c00107bd476ebffd036", "url": "https://github.com/apache/dolphinscheduler/commit/4ae9650080673a2650598c00107bd476ebffd036", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:18:32Z", "type": "commit"}, {"oid": "26712136a08dc4e5f8f1641e5af95d55f3758cdc", "url": "https://github.com/apache/dolphinscheduler/commit/26712136a08dc4e5f8f1641e5af95d55f3758cdc", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:28:34Z", "type": "commit"}, {"oid": "a144389494c763bede0708070bc2c27d47ff1a22", "url": "https://github.com/apache/dolphinscheduler/commit/a144389494c763bede0708070bc2c27d47ff1a22", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:31:17Z", "type": "commit"}, {"oid": "45f5a110aa23c86d394226fb17dc1259ff603d7f", "url": "https://github.com/apache/dolphinscheduler/commit/45f5a110aa23c86d394226fb17dc1259ff603d7f", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:37:54Z", "type": "commit"}, {"oid": "2250460b7f8ada819cc72e8aabbabbf465831da4", "url": "https://github.com/apache/dolphinscheduler/commit/2250460b7f8ada819cc72e8aabbabbf465831da4", "message": "fix VarPoolUtilsTest codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-13T16:54:27Z", "type": "commit"}, {"oid": "d4318d1055d9c7c6ee76e30998485d17e8f294bc", "url": "https://github.com/apache/dolphinscheduler/commit/d4318d1055d9c7c6ee76e30998485d17e8f294bc", "message": "add test config for VarPoolUtilsTest\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-14T09:17:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4Nzg3OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r487787879", "bodyText": "You need to use Assert to determine whether the result is correct, not just print logs.", "author": "simon824", "createdAt": "2020-09-14T09:50:00Z", "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.common.utils.VarPoolUtils;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VarPoolUtilsTest {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtils.class);\n+    \n+    @Test\n+    public void testSetTaskNodeLocalParams() {\n+        String taskJson = \"{\\\"conditionResult\\\":\\\"{\\\\\\\"successNode\\\\\\\":[\\\\\\\"\\\\\\\"],\\\\\\\"failedNode\\\\\\\":[\\\\\\\"\\\\\\\"]}\\\",\"\n+            + \"\\\"conditionsTask\\\":false,\\\"depList\\\":[],\\\"dependence\\\":\\\"{}\\\",\\\"forbidden\\\":false,\\\"id\\\":\\\"tasks-75298\\\",\\\"maxRetryTimes\\\":0,\\\"name\\\":\\\"a1\\\",\"\n+            + \"\\\"params\\\":\\\"{\\\\\\\"rawScript\\\\\\\":\\\\\\\"print(\\\\\\\\\\\\\\\"this is python task \\\\\\\\\\\\\\\",${p0})\\\\\\\",\"\n+            + \"\\\\\\\"localParams\\\\\\\":[{\\\\\\\"prop\\\\\\\":\\\\\\\"p1\\\\\\\",\\\\\\\"direct\\\\\\\":\\\\\\\"IN\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"VARCHAR\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"1\\\\\\\"}],\"\n+            + \"\\\\\\\"resourceList\\\\\\\":[]}\\\",\\\"preTasks\\\":\\\"[]\\\",\\\"retryInterval\\\":1,\\\"runFlag\\\":\\\"NORMAL\\\",\\\"taskInstancePriority\\\":\\\"MEDIUM\\\",\"\n+            + \"\\\"taskTimeoutParameter\\\":{\\\"enable\\\":false,\\\"interval\\\":0},\\\"timeout\\\":\\\"{\\\\\\\"enable\\\\\\\":false,\\\\\\\"strategy\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\"\n+            + \"\\\"type\\\":\\\"PYTHON\\\",\\\"workerGroup\\\":\\\"default\\\"}\";\n+        TaskNode taskNode = JSONUtils.parseObject(taskJson, TaskNode.class);\n+        \n+        VarPoolUtils.setTaskNodeLocalParams(taskNode, \"p1\", \"test1\");\n+        logger.info(JSONUtils.toJsonString(taskNode));\n+        \n+        ConcurrentHashMap<String, Object> propToValue = new ConcurrentHashMap<String, Object>();\n+        propToValue.put(\"p1\", \"test2\");\n+        \n+        VarPoolUtils.setTaskNodeLocalParams(taskNode, propToValue);\n+        logger.info(JSONUtils.toJsonString(taskNode));\n+    }\n+    \n+    @Test\n+    public void testConvertVarPoolToMap() throws Exception {\n+        String varPool = \"p1,66$guyinyou$p2,69$guyinyou$\";\n+        ConcurrentHashMap<String, Object> propToValue = new ConcurrentHashMap<String, Object>();\n+        VarPoolUtils.convertVarPoolToMap(propToValue, varPool);\n+        logger.info(propToValue.toString());\n+    }\n+    \n+    @Test\n+    public void testConvertPythonScriptPlaceholders() throws Exception {\n+        String rawScript = \"print(${p1});\\n${setShareVar(${p1},3)};\\n${setShareVar(${p2},4)};\";\n+        rawScript = VarPoolUtils.convertPythonScriptPlaceholders(rawScript);\n+        logger.info(rawScript);", "originalCommit": "d4318d1055d9c7c6ee76e30998485d17e8f294bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fccd13fb6bb05f40993c9a8e4781420bbc266bb", "chunk": "diff --git a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java b/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\nindex d8a978962..991e8f3d9 100644\n--- a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\n+++ b/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\n\n@@ -23,6 +23,7 @@ import org.apache.dolphinscheduler.common.utils.VarPoolUtils;\n \n import java.util.concurrent.ConcurrentHashMap;\n \n+import org.junit.Assert;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"oid": "2fccd13fb6bb05f40993c9a8e4781420bbc266bb", "url": "https://github.com/apache/dolphinscheduler/commit/2fccd13fb6bb05f40993c9a8e4781420bbc266bb", "message": "fix unit test\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-14T10:56:23Z", "type": "commit"}, {"oid": "5145e1bc8ea4eddf1179fbd46d0ad270f86cb051", "url": "https://github.com/apache/dolphinscheduler/commit/5145e1bc8ea4eddf1179fbd46d0ad270f86cb051", "message": "fix codeStyle\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-14T11:01:16Z", "type": "commit"}, {"oid": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "url": "https://github.com/apache/dolphinscheduler/commit/1c11264eb12e3c9bc51c41b03aef004739d48d48", "message": "fix VarPoolUtilsTest.java\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-15T06:03:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDA1Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r488344052", "bodyText": "please rename VarPoolUtils to VarPoolUtilsTest", "author": "simon824", "createdAt": "2020-09-15T02:25:55Z", "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.utils.JSONUtils;\n+import org.apache.dolphinscheduler.common.utils.VarPoolUtils;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class VarPoolUtilsTest {\n+    \n+    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtils.class);\n+    ", "originalCommit": "5145e1bc8ea4eddf1179fbd46d0ad270f86cb051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "chunk": "diff --git a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java b/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\nindex 91dcfb63d..a4de979dc 100644\n--- a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\n+++ b/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\n\n@@ -30,7 +30,7 @@ import org.slf4j.LoggerFactory;\n \n public class VarPoolUtilsTest {\n     \n-    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtils.class);\n+    private static final Logger logger = LoggerFactory.getLogger(VarPoolUtilsTest.class);\n     \n     @Test\n     public void testSetTaskNodeLocalParams() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTQ2OA==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489109468", "bodyText": "Please replace with another separator here, don't use your name.", "author": "simon824", "createdAt": "2020-09-16T01:35:16Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java", "diffHunk": "@@ -347,8 +351,13 @@ public void run() {\n                     long lastFlushTime = System.currentTimeMillis();\n \n                     while ((line = inReader.readLine()) != null) {\n-                        logBuffer.add(line);\n-                        lastFlushTime = flush(lastFlushTime);\n+                        if (line.startsWith(\"${setValue(\")) {\n+                            varPool.append(line.substring(\"${setValue(\".length(), line.length() - 2));\n+                            varPool.append(\"$guyinyou$\");", "originalCommit": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3f7798ffaf88832cca5657d71b4b0411cf36be0", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java\nindex 47b6ea707..dddd1a64b 100644\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java\n\n@@ -353,7 +353,7 @@ public abstract class AbstractCommandExecutor {\n                     while ((line = inReader.readLine()) != null) {\n                         if (line.startsWith(\"${setValue(\")) {\n                             varPool.append(line.substring(\"${setValue(\".length(), line.length() - 2));\n-                            varPool.append(\"$guyinyou$\");\n+                            varPool.append(\"$VarPool$\");\n                         } else {\n                             logBuffer.add(line);\n                             lastFlushTime = flush(lastFlushTime);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwOTUzNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489109535", "bodyText": "Please replace with another separator here, don't use your name.", "author": "simon824", "createdAt": "2020-09-16T01:35:31Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.utils;\n+\n+import org.apache.dolphinscheduler.common.model.TaskNode;\n+import org.apache.dolphinscheduler.common.task.TaskParams;\n+\n+import java.text.ParseException;\n+import java.util.Map;\n+\n+public class VarPoolUtils {\n+    /**\n+     * getTaskNodeLocalParam\n+     * @param taskNode taskNode\n+     * @param prop prop\n+     * @return localParamForProp\n+     */\n+    public static Object getTaskNodeLocalParam(TaskNode taskNode, String prop) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return null;\n+        }\n+        return taskParams.getLocalParamValue(prop);\n+    }\n+    \n+    /**\n+     * setTaskNodeLocalParams\n+     * @param taskNode taskNode\n+     * @param prop LocalParamName\n+     * @param value LocalParamValue\n+     */\n+    public static void setTaskNodeLocalParams(TaskNode taskNode, String prop, Object value) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return;\n+        }\n+        taskParams.setLocalParamValue(prop, value);\n+        taskNode.setParams(JSONUtils.toJsonString(taskParams));\n+    }\n+\n+    /**\n+     * setTaskNodeLocalParams\n+     * @param taskNode taskNode\n+     * @param propToValue propToValue\n+     */\n+    public static void setTaskNodeLocalParams(TaskNode taskNode, Map<String, Object> propToValue) {\n+        String taskParamsJson = taskNode.getParams();\n+        TaskParams taskParams = JSONUtils.parseObject(taskParamsJson, TaskParams.class);\n+        if (taskParams == null) {\n+            return;\n+        }\n+        taskParams.setLocalParamValue(propToValue);\n+        taskNode.setParams(JSONUtils.toJsonString(taskParams));\n+    }\n+\n+    /**\n+     * convertVarPoolToMap\n+     * @param propToValue propToValue\n+     * @param varPool varPool\n+     * @throws ParseException ParseException\n+     */\n+    public static void convertVarPoolToMap(Map<String, Object> propToValue, String varPool) throws ParseException {\n+        if (varPool == null) {\n+            return;\n+        }\n+        String[] splits = varPool.split(\"\\\\$guyinyou\\\\$\");", "originalCommit": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3f7798ffaf88832cca5657d71b4b0411cf36be0", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java\nindex dd53e2d82..7cd97bd76 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java\n\n@@ -80,7 +80,7 @@ public class VarPoolUtils {\n         if (varPool == null) {\n             return;\n         }\n-        String[] splits = varPool.split(\"\\\\$guyinyou\\\\$\");\n+        String[] splits = varPool.split(\"\\\\$VarPool\\\\$\");\n         for (String kv : splits) {\n             String[] kvs = kv.split(\",\");\n             if (kvs.length == 2) {\n"}}, {"oid": "c3f7798ffaf88832cca5657d71b4b0411cf36be0", "url": "https://github.com/apache/dolphinscheduler/commit/c3f7798ffaf88832cca5657d71b4b0411cf36be0", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-16T04:54:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4OTA4MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489189081", "bodyText": "Keep this test class path consistent with the original class", "author": "simon824", "createdAt": "2020-09-16T06:18:58Z", "path": "dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.server.utils;\n+", "originalCommit": "1c11264eb12e3c9bc51c41b03aef004739d48d48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3b2636c7da30218c17db4b741c3281e2c3f6d28", "chunk": "diff --git a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java b/dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/VarPoolUtilsTest.java\nsimilarity index 97%\nrename from dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\nrename to dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/VarPoolUtilsTest.java\nindex a4de979dc..692988ab2 100644\n--- a/dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/VarPoolUtilsTest.java\n+++ b/dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/VarPoolUtilsTest.java\n\n@@ -15,7 +15,7 @@\n  * limitations under the License.\n  */\n \n-package org.apache.dolphinscheduler.server.utils;\n+package org.apache.dolphinscheduler.common.utils;\n \n import org.apache.dolphinscheduler.common.model.TaskNode;\n import org.apache.dolphinscheduler.common.utils.JSONUtils;\n"}}, {"oid": "a3b2636c7da30218c17db4b741c3281e2c3f6d28", "url": "https://github.com/apache/dolphinscheduler/commit/a3b2636c7da30218c17db4b741c3281e2c3f6d28", "message": "change the test class path\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-16T09:53:15Z", "type": "commit"}, {"oid": "d8ac39ed788689ab531f573e1389495412f6fe30", "url": "https://github.com/apache/dolphinscheduler/commit/d8ac39ed788689ab531f573e1389495412f6fe30", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-16T10:31:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NTYwOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489395609", "bodyText": "If there is no other way to deal with this error, then you should print the error message", "author": "zixi0825", "createdAt": "2020-09-16T12:25:45Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java", "diffHunk": "@@ -38,103 +38,110 @@\n  */\n public class PythonTask extends AbstractTask {\n \n-  /**\n-   *  python parameters\n-   */\n-  private PythonParameters pythonParameters;\n-\n-  /**\n-   *  task dir\n-   */\n-  private String taskDir;\n-\n-  /**\n-   * python command executor\n-   */\n-  private PythonCommandExecutor pythonCommandExecutor;\n-\n-  /**\n-   * taskExecutionContext\n-   */\n-  private TaskExecutionContext taskExecutionContext;\n-\n-  /**\n-   * constructor\n-   * @param taskExecutionContext taskExecutionContext\n-   * @param logger    logger\n-   */\n-  public PythonTask(TaskExecutionContext taskExecutionContext, Logger logger) {\n-    super(taskExecutionContext, logger);\n-    this.taskExecutionContext = taskExecutionContext;\n-\n-    this.pythonCommandExecutor = new PythonCommandExecutor(this::logHandle,\n-            taskExecutionContext,\n-            logger);\n-  }\n-\n-  @Override\n-  public void init() {\n-    logger.info(\"python task params {}\", taskExecutionContext.getTaskParams());\n-\n-    pythonParameters = JSONUtils.parseObject(taskExecutionContext.getTaskParams(), PythonParameters.class);\n-\n-    if (!pythonParameters.checkParameters()) {\n-      throw new RuntimeException(\"python task params is not valid\");\n+    /**\n+     *  python parameters\n+     */\n+    private PythonParameters pythonParameters;\n+\n+    /**\n+     *    task dir\n+     */\n+    private String taskDir;\n+\n+    /**\n+     * python command executor\n+     */\n+    private PythonCommandExecutor pythonCommandExecutor;\n+\n+    /**\n+     * taskExecutionContext\n+     */\n+    private TaskExecutionContext taskExecutionContext;\n+\n+    /**\n+     * constructor\n+     * @param taskExecutionContext taskExecutionContext\n+     * @param logger        logger\n+     */\n+    public PythonTask(TaskExecutionContext taskExecutionContext, Logger logger) {\n+        super(taskExecutionContext, logger);\n+        this.taskExecutionContext = taskExecutionContext;\n+\n+        this.pythonCommandExecutor = new PythonCommandExecutor(this::logHandle,\n+                        taskExecutionContext,\n+                        logger);\n     }\n-  }\n \n-  @Override\n-  public void handle() throws Exception {\n-    try {\n-      //  construct process\n-      CommandExecuteResult commandExecuteResult = pythonCommandExecutor.run(buildCommand());\n+    @Override\n+    public void init() {\n+        logger.info(\"python task params {}\", taskExecutionContext.getTaskParams());\n \n-      setExitStatusCode(commandExecuteResult.getExitStatusCode());\n-      setAppIds(commandExecuteResult.getAppIds());\n-      setProcessId(commandExecuteResult.getProcessId());\n-    }\n-    catch (Exception e) {\n-      logger.error(\"python task failure\", e);\n-      setExitStatusCode(Constants.EXIT_CODE_FAILURE);\n-      throw e;\n-    }\n-  }\n-\n-  @Override\n-  public void cancelApplication(boolean cancelApplication) throws Exception {\n-    // cancel process\n-    pythonCommandExecutor.cancelApplication();\n-  }\n-\n-  /**\n-   * build command\n-   * @return raw python script\n-   * @throws Exception exception\n-   */\n-  private String buildCommand() throws Exception {\n-    String rawPythonScript = pythonParameters.getRawScript().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n-\n-    // replace placeholder\n-    Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),\n-            taskExecutionContext.getDefinedParams(),\n-            pythonParameters.getLocalParametersMap(),\n-            CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),\n-            taskExecutionContext.getScheduleTime());\n-    if (paramsMap != null){\n-      rawPythonScript = ParameterUtils.convertParameterPlaceholders(rawPythonScript, ParamUtils.convert(paramsMap));\n-    }\n+        pythonParameters = JSONUtils.parseObject(taskExecutionContext.getTaskParams(), PythonParameters.class);\n \n-    logger.info(\"raw python script : {}\", pythonParameters.getRawScript());\n-    logger.info(\"task dir : {}\", taskDir);\n-\n-    return rawPythonScript;\n-  }\n+        if (!pythonParameters.checkParameters()) {\n+            throw new RuntimeException(\"python task params is not valid\");\n+        }\n+    }\n \n-  @Override\n-  public AbstractParameters getParameters() {\n-    return pythonParameters;\n-  }\n+    @Override\n+    public void handle() throws Exception {\n+        try {\n+            //    construct process\n+            CommandExecuteResult commandExecuteResult = pythonCommandExecutor.run(buildCommand());\n+\n+            setExitStatusCode(commandExecuteResult.getExitStatusCode());\n+            setAppIds(commandExecuteResult.getAppIds());\n+            setProcessId(commandExecuteResult.getProcessId());\n+            setVarPool(pythonCommandExecutor.getVarPool());\n+        }\n+        catch (Exception e) {\n+            logger.error(\"python task failure\", e);\n+            setExitStatusCode(Constants.EXIT_CODE_FAILURE);\n+            throw e;\n+        }\n+    }\n \n+    @Override\n+    public void cancelApplication(boolean cancelApplication) throws Exception {\n+        // cancel process\n+        pythonCommandExecutor.cancelApplication();\n+    }\n \n+    /**\n+     * build command\n+     * @return raw python script\n+     * @throws Exception exception\n+     */\n+    private String buildCommand() throws Exception {\n+        String rawPythonScript = pythonParameters.getRawScript().replaceAll(\"\\\\r\\\\n\", \"\\n\");\n+\n+        // replace placeholder\n+        Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),\n+                        taskExecutionContext.getDefinedParams(),\n+                        pythonParameters.getLocalParametersMap(),\n+                        CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),\n+                        taskExecutionContext.getScheduleTime());\n+        \n+        try {\n+            rawPythonScript = VarPoolUtils.convertPythonScriptPlaceholders(rawPythonScript);\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+            // TODO: handle exception", "originalCommit": "d8ac39ed788689ab531f573e1389495412f6fe30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java\nindex 21284c142..6e561c1ca 100644\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java\n\n@@ -126,7 +126,7 @@ public class PythonTask extends AbstractTask {\n             rawPythonScript = VarPoolUtils.convertPythonScriptPlaceholders(rawPythonScript);\n         }\n         catch (StringIndexOutOfBoundsException e) {\n-            // TODO: handle exception\n+            logger.error(\"setShareVar field format error, raw python script : {}\", rawPythonScript);\n         }\n         \n         if (paramsMap != null) {\n"}}, {"oid": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "url": "https://github.com/apache/dolphinscheduler/commit/0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "message": "fix \"print the error message\"\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-16T12:48:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzODc2OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489838769", "bodyText": "propToValue  may cause Nullpointerexception", "author": "simon824", "createdAt": "2020-09-17T01:03:01Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.task;\n+\n+import java.util.Map;\n+\n+public class TaskParams {\n+\n+    private String rawScript;\n+    private Map<String, String>[] localParams;\n+\n+    public void setRawScript(String rawScript) {\n+        this.rawScript = rawScript;\n+    }\n+\n+    public void setLocalParams(Map<String, String>[] localParams) {\n+        this.localParams = localParams;\n+    }\n+\n+    public String getRawScript() {\n+        return rawScript;\n+    }\n+\n+    public void setLocalParamValue(String prop, Object value) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            if (localParams[i].get(\"prop\").equals(prop)) {\n+                localParams[i].put(\"value\", (String)value);\n+            }\n+        }\n+    }\n+\n+    public void setLocalParamValue(Map<String, Object> propToValue) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            String prop = localParams[i].get(\"prop\");\n+            if (propToValue.containsKey(prop)) {", "originalCommit": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ca9de436a754ff84c8ed715b0b27e8326ee3587", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\nindex fd68cb3f6..abea2d95b 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\n\n@@ -37,7 +37,7 @@ public class TaskParams {\n     }\n \n     public void setLocalParamValue(String prop, Object value) {\n-        if (localParams == null) {\n+        if (localParams == null || value == null) {\n             return;\n         }\n         for (int i = 0; i < localParams.length; i++) {\n"}}, {"oid": "7ca9de436a754ff84c8ed715b0b27e8326ee3587", "url": "https://github.com/apache/dolphinscheduler/commit/7ca9de436a754ff84c8ed715b0b27e8326ee3587", "message": "fix bug\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-18T05:06:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5ODA5OA==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489398098", "bodyText": "only print logger here?  can you add a comment about it?", "author": "gaojun2048", "createdAt": "2020-09-16T12:29:54Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "diffHunk": "@@ -651,14 +653,22 @@ private void setTaskNodeSkip(List<String> taskNodesSkipList){\n      * submit post node\n      * @param parentNodeName parent node name\n      */\n+    private Map<String,Object> propToValue = new ConcurrentHashMap<String, Object>();\n     private void submitPostNode(String parentNodeName){\n \n         List<String> submitTaskNodeList = parsePostNodeList(parentNodeName);\n \n         List<TaskInstance> taskInstances = new ArrayList<>();\n         for(String taskNode : submitTaskNodeList){\n+            try {\n+                VarPoolUtils.convertVarPoolToMap(propToValue, processInstance.getVarPool());\n+            } catch (ParseException e) {\n+                logger.error(\"parse {} exception\", processInstance.getVarPool(), e);", "originalCommit": "d8ac39ed788689ab531f573e1389495412f6fe30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDUyOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r494374529", "bodyText": "Thank you for your proposal. I think about it carefully, but I still can't think of how to deal with the wrong situation. Moreover, under normal circumstances, varpool will only be empty or generated according to the normal format. Generally, there will be no error.", "author": "guyinyou", "createdAt": "2020-09-24T14:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5ODA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NzE0NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r494677145", "bodyText": "Some times varpool may updated by other people in some case . So , if the value of varpool not normal and can not convert to map , you can throw a RuntimeException.", "author": "gaojun2048", "createdAt": "2020-09-25T00:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5ODA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MTY4OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r494741689", "bodyText": "You're right. I'll take it", "author": "guyinyou", "createdAt": "2020-09-25T04:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5ODA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "chunk": "diff --git a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java\nindex 488a214e9..3c28e1665 100644\n--- a/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java\n+++ b/dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java\n\n@@ -664,6 +664,7 @@ public class MasterExecThread implements Runnable {\n                 VarPoolUtils.convertVarPoolToMap(propToValue, processInstance.getVarPool());\n             } catch (ParseException e) {\n                 logger.error(\"parse {} exception\", processInstance.getVarPool(), e);\n+                throw new RuntimeException();\n             }\n             TaskNode taskNodeObject = dag.getNode(taskNode);\n             VarPoolUtils.setTaskNodeLocalParams(taskNodeObject, propToValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjI3Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r489426276", "bodyText": "propToValue may be null", "author": "gaojun2048", "createdAt": "2020-09-16T13:13:54Z", "path": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dolphinscheduler.common.task;\n+\n+import java.util.Map;\n+\n+public class TaskParams {\n+\n+    private String rawScript;\n+    private Map<String, String>[] localParams;\n+\n+    public void setRawScript(String rawScript) {\n+        this.rawScript = rawScript;\n+    }\n+\n+    public void setLocalParams(Map<String, String>[] localParams) {\n+        this.localParams = localParams;\n+    }\n+\n+    public String getRawScript() {\n+        return rawScript;\n+    }\n+\n+    public void setLocalParamValue(String prop, Object value) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            if (localParams[i].get(\"prop\").equals(prop)) {\n+                localParams[i].put(\"value\", (String)value);\n+            }\n+        }\n+    }\n+\n+    public void setLocalParamValue(Map<String, Object> propToValue) {\n+        if (localParams == null) {\n+            return;\n+        }\n+        for (int i = 0; i < localParams.length; i++) {\n+            String prop = localParams[i].get(\"prop\");\n+            if (propToValue.containsKey(prop)) {", "originalCommit": "0f0a2d9583bde5c6bcce2d1ea452ef26b5f055bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MzY5MA==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r494363690", "bodyText": "I have fixed that on commits \"7ca9de4\"", "author": "guyinyou", "createdAt": "2020-09-24T14:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7ca9de436a754ff84c8ed715b0b27e8326ee3587", "chunk": "diff --git a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\nindex fd68cb3f6..abea2d95b 100644\n--- a/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\n+++ b/dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskParams.java\n\n@@ -37,7 +37,7 @@ public class TaskParams {\n     }\n \n     public void setLocalParamValue(String prop, Object value) {\n-        if (localParams == null) {\n+        if (localParams == null || value == null) {\n             return;\n         }\n         for (int i = 0; i < localParams.length; i++) {\n"}}, {"oid": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "url": "https://github.com/apache/dolphinscheduler/commit/3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "message": "fix\nSigned-off-by: \u53e4\u5d1f\u4f51", "committedDate": "2020-09-25T04:30:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5NTIwNw==", "url": "https://github.com/apache/dolphinscheduler/pull/3659#discussion_r533995207", "bodyText": "there is bug will cause the origin param be replace by the task param,so the task will get nothing when use  taskExecutionContext.getTaskParams()", "author": "hei12138", "createdAt": "2020-12-02T08:56:18Z", "path": "dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java", "diffHunk": "@@ -651,14 +653,23 @@ private void setTaskNodeSkip(List<String> taskNodesSkipList){\n      * submit post node\n      * @param parentNodeName parent node name\n      */\n+    private Map<String,Object> propToValue = new ConcurrentHashMap<String, Object>();\n     private void submitPostNode(String parentNodeName){\n \n         List<String> submitTaskNodeList = parsePostNodeList(parentNodeName);\n \n         List<TaskInstance> taskInstances = new ArrayList<>();\n         for(String taskNode : submitTaskNodeList){\n+            try {\n+                VarPoolUtils.convertVarPoolToMap(propToValue, processInstance.getVarPool());\n+            } catch (ParseException e) {\n+                logger.error(\"parse {} exception\", processInstance.getVarPool(), e);\n+                throw new RuntimeException();\n+            }\n+            TaskNode taskNodeObject = dag.getNode(taskNode);\n+            VarPoolUtils.setTaskNodeLocalParams(taskNodeObject, propToValue);", "originalCommit": "3a871b61e9ce145c6cf9346aab4757d3cd2b362d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}