{"pr_number": 848, "pr_title": "Phoenix-5947 Add tests and extensions to Schema Extraction Tool utility", "pr_createdAt": "2020-07-28T14:25:33Z", "pr_url": "https://github.com/apache/phoenix/pull/848", "timeline": [{"oid": "bb66f8dd39399028dcf6cfdece62e0c55da541ac", "url": "https://github.com/apache/phoenix/commit/bb66f8dd39399028dcf6cfdece62e0c55da541ac", "message": "add unit tests and fixes to the Extraction Tool", "committedDate": "2020-07-28T14:09:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMjcwNQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r461722705", "bodyText": "This PR does not completely support the multiple column families, especially if there are different properties for each column family as mentioned by Goeffrey on the previous review. Let's modify this if clause to be specific unless you want to include the change in this one and completely get rid of \"Not Supported Exception\".", "author": "swaroopak", "createdAt": "2020-07-28T16:42:43Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -54,9 +55,6 @@ public String process() throws Exception {\n         if (ddl != null) {\n             return ddl;\n         }\n-        if(this.table.getColumnFamilies().size() > 1 ) {", "originalCommit": "bb66f8dd39399028dcf6cfdece62e0c55da541ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "url": "https://github.com/apache/phoenix/commit/1e63d93b0c1e6e74f2b024efcf17b6381999048b", "message": "support multiple CFs with distinct properties", "committedDate": "2020-07-29T22:30:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODEzNg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462648136", "bodyText": "This should be available in other parts of the code. You can just import here.", "author": "swaroopak", "createdAt": "2020-07-29T23:32:38Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -1,35 +1,35 @@\n package org.apache.phoenix.schema;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Sets;\n+import com.google.inject.internal.util.$ImmutableCollection;\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.HTableDescriptor;\n import org.apache.hadoop.hbase.TableName;\n import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n import org.apache.hadoop.hbase.util.Bytes;\n import org.apache.phoenix.jdbc.PhoenixConnection;\n import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.query.QueryConstants;\n import org.apache.phoenix.util.MetaDataUtil;\n import org.apache.phoenix.util.PhoenixRuntime;\n import org.apache.phoenix.util.SchemaUtil;\n \n import java.io.IOException;\n import java.sql.Connection;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class SchemaExtractionProcessor {\n \n-    public static final String\n-            FEATURE_NOT_SUPPORTED_ON_EXTRACTION_TOOL =\n-            \"Multiple CF feature not supported on extraction tool\";\n+    public static final List<String> SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES = ImmutableList.of(", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -1,12 +1,9 @@\n package org.apache.phoenix.schema;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Sets;\n-import com.google.inject.internal.util.$ImmutableCollection;\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.HColumnDescriptor;\n-import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.HTableDescriptor;\n import org.apache.hadoop.hbase.TableName;\n import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODIzNQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462648235", "bodyText": "Avoid import *", "author": "swaroopak", "createdAt": "2020-07-29T23:32:54Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -1,35 +1,35 @@\n package org.apache.phoenix.schema;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Sets;\n+import com.google.inject.internal.util.$ImmutableCollection;\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.HColumnDescriptor;\n+import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.HTableDescriptor;\n import org.apache.hadoop.hbase.TableName;\n import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n import org.apache.hadoop.hbase.util.Bytes;\n import org.apache.phoenix.jdbc.PhoenixConnection;\n import org.apache.phoenix.mapreduce.util.ConnectionUtil;\n import org.apache.phoenix.query.ConnectionQueryServices;\n+import org.apache.phoenix.query.QueryConstants;\n import org.apache.phoenix.util.MetaDataUtil;\n import org.apache.phoenix.util.PhoenixRuntime;\n import org.apache.phoenix.util.SchemaUtil;\n \n import java.io.IOException;\n import java.sql.Connection;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -1,12 +1,9 @@\n package org.apache.phoenix.schema;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Sets;\n-import com.google.inject.internal.util.$ImmutableCollection;\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hbase.HColumnDescriptor;\n-import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.HTableDescriptor;\n import org.apache.hadoop.hbase.TableName;\n import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODU0Mg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462648542", "bodyText": "nit: cfMap or cfToPropertyValueMap", "author": "swaroopak", "createdAt": "2020-07-29T23:34:01Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0ODcxMw==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462648713", "bodyText": "space before {", "author": "swaroopak", "createdAt": "2020-07-29T23:34:39Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            for(HColumnDescriptor columnDescriptor: columnDescriptors){", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTMzOA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462649338", "bodyText": "space before { and at other similar spots", "author": "swaroopak", "createdAt": "2020-07-29T23:36:31Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            for(HColumnDescriptor columnDescriptor: columnDescriptors){\n+                String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n+                ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n+                // check if it is universal properties\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                    definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+                    continue;\n+                }\n+                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                set.add(value);\n+            }\n+            if (set.size() > 1){", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTY5Nw==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462649697", "bodyText": "let's call it globalValue", "author": "swaroopak", "createdAt": "2020-07-29T23:37:41Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MjMzMg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462652332", "bodyText": "nit: cfPropertyValueSet", "author": "swaroopak", "createdAt": "2020-07-29T23:46:18Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MzM0MQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462653341", "bodyText": "Let's say there are 3 CFs and only 2 of them have VERSIONS=2. Would this work? Let's add a test if we don't have one to cover this scenario.", "author": "swaroopak", "createdAt": "2020-07-29T23:49:31Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            for(HColumnDescriptor columnDescriptor: columnDescriptors){\n+                String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n+                ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n+                // check if it is universal properties\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                    definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+                    continue;\n+                }\n+                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                set.add(value);\n+            }\n+            if (set.size() > 1){", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODgwMg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463158802", "bodyText": "Yes it's working with only 2 of them having VERSIONS=2. The size of the set will be 2 in this case. I'll add a test to cover this scenario.", "author": "Qinrui98", "createdAt": "2020-07-30T17:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MzM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NTY4OA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462655688", "bodyText": "I think we can maintain a map of [propertyValue and occurances] and execute line no. 273 only when exactly one entry from the map has occurrences equal to the no. of column families.\nAlso, good to refactor this logic in another function.", "author": "swaroopak", "createdAt": "2020-07-29T23:57:30Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable defaultValue = entry.getValue();\n+            Map<String, String> CFMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            for(HColumnDescriptor columnDescriptor: columnDescriptors){\n+                String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n+                ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n+                // check if it is universal properties\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                    definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+                    continue;\n+                }\n+                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                set.add(value);", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -249,28 +249,28 @@ public class SchemaExtractionProcessor {\n \n     private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n         Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n-        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()){\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable defaultValue = entry.getValue();\n-            Map<String, String> CFMap = new HashMap<String, String>();\n-            Set<ImmutableBytesWritable> set = new HashSet<ImmutableBytesWritable>();\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n             for(HColumnDescriptor columnDescriptor: columnDescriptors){\n                 String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n                 ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n                 // check if it is universal properties\n-                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))){\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n                     definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n-                    continue;\n+                    break;\n                 }\n-                CFMap.put(columnFamilyName, Bytes.toString(value.get()));\n-                set.add(value);\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n             }\n-            if (set.size() > 1){\n-                for(Map.Entry<String, String> mapEntry: CFMap.entrySet()){\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n                     definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());\n                 }\n             } else {\n-                definedProps.put(Bytes.toString(key.get()), Bytes.toString(defaultValue.get()));\n+                definedProps.put(Bytes.toString(key.get()), Bytes.toString(globalValue.get()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NjU2MA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462656560", "bodyText": "nit: this if condition is duplicated in the else part. Please refactor it by extracting common parts and executing specific Array related logic when if clause passes.", "author": "swaroopak", "createdAt": "2020-07-30T00:00:09Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -374,20 +397,49 @@ private String getColumnInfoStringForView(PTable table, PTable baseTable) {\n \n     private String extractColumn(PColumn column) {\n         String colName = column.getName().getString();\n+        if (column.getFamilyName() != null){\n+            String colFamilyName = column.getFamilyName().getString();\n+            // check if it is default column family name\n+            colName = colFamilyName.equals(QueryConstants.DEFAULT_COLUMN_FAMILY)? colName : String.format(\"\\\"%s\\\".\\\"%s\\\"\", colFamilyName, colName);\n+        }\n+        boolean isArrayType = column.getDataType().isArrayType();\n         String type = column.getDataType().getSqlTypeName();\n+        Integer maxLength = column.getMaxLength();\n+        Integer arrSize = column.getArraySize();\n+        Integer scale = column.getScale();\n         StringBuilder buf = new StringBuilder(colName);\n         buf.append(' ');\n-        buf.append(type);\n-        Integer maxLength = column.getMaxLength();\n-        if (maxLength != null) {\n-            buf.append('(');\n-            buf.append(maxLength);\n-            Integer scale = column.getScale();\n-            if (scale != null) {\n-                buf.append(',');\n-                buf.append(scale); // has both max length and scale. For ex- decimal(10,2)\n+\n+        if (isArrayType) {\n+            String arrayPrefix = type.split(\"\\\\s+\")[0];\n+            buf.append(arrayPrefix);\n+            if (maxLength != null) {", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\nindex ce1a09410..afba6aaf3 100644\n--- a/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n+++ b/phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java\n\n@@ -413,15 +413,7 @@ public class SchemaExtractionProcessor {\n         if (isArrayType) {\n             String arrayPrefix = type.split(\"\\\\s+\")[0];\n             buf.append(arrayPrefix);\n-            if (maxLength != null) {\n-                buf.append('(');\n-                buf.append(maxLength);\n-                if (scale != null) {\n-                    buf.append(',');\n-                    buf.append(scale); // has both max length and scale. For ex- decimal(10,2)\n-                }\n-                buf.append(')');\n-            }\n+            appendMaxLengthAndScale(buf, maxLength, scale);\n             buf.append(' ');\n             buf.append(\"ARRAY\");\n             if (arrSize != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NjkxMA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462656910", "bodyText": "Thanks for adding this.", "author": "swaroopak", "createdAt": "2020-07-30T00:01:24Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +206,188 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFs() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n+                \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(true, compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateIndexStatementWithColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String indexName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, \\\"av\\\".\\\"_\\\" CHAR(1), v2 VARCHAR)\");\n+            String createIndexStatement = \"CREATE INDEX \"+ indexName + \" ON \"+pTableFullName+ \"(\\\"av\\\".\\\"_\\\")\";\n+            conn.createStatement().execute(createIndexStatement);\n+            conn.commit();\n+\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            String [] args2 = {\"-tb\", indexName, \"-s\", schemaName};\n+            set.run(args2);\n+            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    private boolean compareProperties(String prop1, String prop2){", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a13afa29a0414f6149642a279e7a482a4a9dedaa", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex b60b0a01f..78c7a919c 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -360,6 +360,34 @@ public class SchemaExtractionToolIT extends BaseTest {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithMultipleCFs2() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(true, compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n     @Test\n     public void testCreateIndexStatementWithColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzE0Ng==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462657146", "bodyText": "nit: remove the commented code", "author": "swaroopak", "createdAt": "2020-07-30T00:02:09Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -33,22 +30,21 @@ public void testCreateTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n         String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n+        String createTable = \"CREATE TABLE \"+ pTableFullName + \"(K VARCHAR NOT NULL PRIMARY KEY, \"\n+                + \"V1 VARCHAR, V2 VARCHAR) TTL=2592000, IMMUTABLE_ROWS=TRUE, DISABLE_WAL=TRUE\";\n \n         try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+ pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n+            conn.createStatement().execute(createTable);\n             conn.commit();\n             String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n \n             SchemaExtractionTool set = new SchemaExtractionTool();\n             set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n             set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1).replace(\" \",\"\");\n-            Assert.assertEquals(3, actualProperties.split(\",\").length);\n+            //String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1).replace(\" \",\"\");", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex b60b0a01f..8502bcb35 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -31,7 +31,6 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String schemaName = generateUniqueName();\n         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n         String createTable = \"CREATE TABLE \"+ pTableFullName + \"(K VARCHAR NOT NULL PRIMARY KEY, \"\n                 + \"V1 VARCHAR, V2 VARCHAR) TTL=2592000, IMMUTABLE_ROWS=TRUE, DISABLE_WAL=TRUE\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzM3MQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462657371", "bodyText": "can use assertTrue directly.", "author": "swaroopak", "createdAt": "2020-07-30T00:03:01Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +206,188 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFs() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n+                \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(true, compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a13afa29a0414f6149642a279e7a482a4a9dedaa", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex b60b0a01f..78c7a919c 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -360,6 +360,34 @@ public class SchemaExtractionToolIT extends BaseTest {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithMultipleCFs2() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(true, compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n     @Test\n     public void testCreateIndexStatementWithColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NzYyNw==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r462657627", "bodyText": "nit: could you please remove this variable? It is not used anymore.", "author": "swaroopak", "createdAt": "2020-07-30T00:04:01Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -33,22 +30,21 @@ public void testCreateTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n         String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";", "originalCommit": "1e63d93b0c1e6e74f2b024efcf17b6381999048b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d64d2181405117b79f4e723678f3db85501663a2", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex b60b0a01f..8502bcb35 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -31,7 +31,6 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String schemaName = generateUniqueName();\n         Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n         String createTable = \"CREATE TABLE \"+ pTableFullName + \"(K VARCHAR NOT NULL PRIMARY KEY, \"\n                 + \"V1 VARCHAR, V2 VARCHAR) TTL=2592000, IMMUTABLE_ROWS=TRUE, DISABLE_WAL=TRUE\";\n \n"}}, {"oid": "4fa8f10577f99bd7232e1bd5b2a196c3f2c19ea3", "url": "https://github.com/apache/phoenix/commit/4fa8f10577f99bd7232e1bd5b2a196c3f2c19ea3", "message": "p table stash", "committedDate": "2020-07-30T16:16:08Z", "type": "commit"}, {"oid": "a13afa29a0414f6149642a279e7a482a4a9dedaa", "url": "https://github.com/apache/phoenix/commit/a13afa29a0414f6149642a279e7a482a4a9dedaa", "message": "add additional tests", "committedDate": "2020-07-30T17:27:13Z", "type": "commit"}, {"oid": "d64d2181405117b79f4e723678f3db85501663a2", "url": "https://github.com/apache/phoenix/commit/d64d2181405117b79f4e723678f3db85501663a2", "message": "add more tests and refactor", "committedDate": "2020-07-30T18:29:39Z", "type": "commit"}, {"oid": "15831283360d140e55a8fc091d6db64f41f71445", "url": "https://github.com/apache/phoenix/commit/15831283360d140e55a8fc091d6db64f41f71445", "message": "add imports back", "committedDate": "2020-07-30T18:40:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1OTM5MQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463259391", "bodyText": "Several of these tests are of the form:\n\nCreate a table according to some SQL and table name\nRun SchemaExtractionTool\nAssert that output is equal to the original SQL.\n\nCan we extract that logic into a helper function and you just pass in different tablename and SQL in each test?", "author": "gjacoby126", "createdAt": "2020-07-30T20:42:43Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +204,242 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTgyNg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463285826", "bodyText": "Yes I'll extract the common part into a helper function and avoid duplicated code here.", "author": "Qinrui98", "createdAt": "2020-07-30T21:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1OTM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6fd9e0853e801009e7f9895eb604d5459996815d", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex 2c452fc42..1078f29f0 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -172,244 +128,186 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String viewName = generateUniqueName();\n         String childView = generateUniqueName();\n         String indexName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n-\n-            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n-                    + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n-                    + \"AS SELECT * FROM \"+pTableFullName;\n-\n-            String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n-\n-            conn.createStatement().execute(createView);\n-            conn.createStatement().execute(createView1);\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.commit();\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n+        String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+        String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+                + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n+                + \"AS SELECT * FROM \"+pTableFullName;\n+        String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n+        String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(createTableStmt);\n+        queries.add(createView);\n+        queries.add(createView1);\n+        queries.add(createIndexStatement);\n+        String result = runSchemaExtractionTool(schemaName, indexName, null, queries);\n+        Assert.assertEquals(createIndexStatement.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testSaltedTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n-            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n     public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(15) NOT NULL, \" +\n-                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"c_var_array VARCHAR ARRAY, \" +\n-                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithUniversalCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+    @Test\n+    public void testCreateTableWithCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+    public void testCreateTableWithMultipleCF() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n                 \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        final String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+    public void testCreateTableWithMultipleCFProperties3() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n-                \"DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+        String properties = \"\\\"av\\\".DATA_BLOCK_ENCODING=DIFF, \\\"bv\\\".DATA_BLOCK_ENCODING=DIFF, \\\"cv\\\".DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String simplifiedProperties = \"DATA_BLOCK_ENCODING=DIFF, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(simplifiedProperties, getProperties(result)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2MTk4Ng==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463261986", "bodyText": "Good edge case to check!", "author": "gjacoby126", "createdAt": "2020-07-30T20:47:57Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +204,242 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd9e0853e801009e7f9895eb604d5459996815d", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex 2c452fc42..1078f29f0 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -172,244 +128,186 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String viewName = generateUniqueName();\n         String childView = generateUniqueName();\n         String indexName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n-\n-            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n-                    + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n-                    + \"AS SELECT * FROM \"+pTableFullName;\n-\n-            String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n-\n-            conn.createStatement().execute(createView);\n-            conn.createStatement().execute(createView1);\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.commit();\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n+        String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+        String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+                + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n+                + \"AS SELECT * FROM \"+pTableFullName;\n+        String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n+        String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(createTableStmt);\n+        queries.add(createView);\n+        queries.add(createView1);\n+        queries.add(createIndexStatement);\n+        String result = runSchemaExtractionTool(schemaName, indexName, null, queries);\n+        Assert.assertEquals(createIndexStatement.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testSaltedTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n-            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n     public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(15) NOT NULL, \" +\n-                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"c_var_array VARCHAR ARRAY, \" +\n-                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithUniversalCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+    @Test\n+    public void testCreateTableWithCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+    public void testCreateTableWithMultipleCF() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n                 \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        final String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+    public void testCreateTableWithMultipleCFProperties3() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n-                \"DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+        String properties = \"\\\"av\\\".DATA_BLOCK_ENCODING=DIFF, \\\"bv\\\".DATA_BLOCK_ENCODING=DIFF, \\\"cv\\\".DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String simplifiedProperties = \"DATA_BLOCK_ENCODING=DIFF, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(simplifiedProperties, getProperties(result)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NTY1NA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463265654", "bodyText": "nit: comment on what exactly you're checking here would be useful.", "author": "gjacoby126", "createdAt": "2020-07-30T20:55:05Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +204,242 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithDefaultCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd9e0853e801009e7f9895eb604d5459996815d", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex 2c452fc42..1078f29f0 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -172,244 +128,186 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String viewName = generateUniqueName();\n         String childView = generateUniqueName();\n         String indexName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n-\n-            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n-                    + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n-                    + \"AS SELECT * FROM \"+pTableFullName;\n-\n-            String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n-\n-            conn.createStatement().execute(createView);\n-            conn.createStatement().execute(createView1);\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.commit();\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n+        String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+        String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+                + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n+                + \"AS SELECT * FROM \"+pTableFullName;\n+        String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n+        String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(createTableStmt);\n+        queries.add(createView);\n+        queries.add(createView1);\n+        queries.add(createIndexStatement);\n+        String result = runSchemaExtractionTool(schemaName, indexName, null, queries);\n+        Assert.assertEquals(createIndexStatement.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testSaltedTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n-            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n     public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(15) NOT NULL, \" +\n-                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"c_var_array VARCHAR ARRAY, \" +\n-                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithUniversalCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+    @Test\n+    public void testCreateTableWithCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+    public void testCreateTableWithMultipleCF() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n                 \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        final String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+    public void testCreateTableWithMultipleCFProperties3() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n-                \"DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+        String properties = \"\\\"av\\\".DATA_BLOCK_ENCODING=DIFF, \\\"bv\\\".DATA_BLOCK_ENCODING=DIFF, \\\"cv\\\".DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String simplifiedProperties = \"DATA_BLOCK_ENCODING=DIFF, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(simplifiedProperties, getProperties(result)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NjA2OA==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463266068", "bodyText": "nit: please use a more informative name.", "author": "gjacoby126", "createdAt": "2020-07-30T20:55:47Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +204,242 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithDefaultCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n+                \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFProperties2() throws Exception {", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd9e0853e801009e7f9895eb604d5459996815d", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex 2c452fc42..1078f29f0 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -172,244 +128,186 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String viewName = generateUniqueName();\n         String childView = generateUniqueName();\n         String indexName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n-\n-            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n-                    + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n-                    + \"AS SELECT * FROM \"+pTableFullName;\n-\n-            String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n-\n-            conn.createStatement().execute(createView);\n-            conn.createStatement().execute(createView1);\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.commit();\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n+        String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+        String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+                + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n+                + \"AS SELECT * FROM \"+pTableFullName;\n+        String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n+        String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(createTableStmt);\n+        queries.add(createView);\n+        queries.add(createView1);\n+        queries.add(createIndexStatement);\n+        String result = runSchemaExtractionTool(schemaName, indexName, null, queries);\n+        Assert.assertEquals(createIndexStatement.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testSaltedTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n-            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n     public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(15) NOT NULL, \" +\n-                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"c_var_array VARCHAR ARRAY, \" +\n-                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithUniversalCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+    @Test\n+    public void testCreateTableWithCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+    public void testCreateTableWithMultipleCF() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n                 \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        final String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+    public void testCreateTableWithMultipleCFProperties3() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n-                \"DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+        String properties = \"\\\"av\\\".DATA_BLOCK_ENCODING=DIFF, \\\"bv\\\".DATA_BLOCK_ENCODING=DIFF, \\\"cv\\\".DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String simplifiedProperties = \"DATA_BLOCK_ENCODING=DIFF, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(simplifiedProperties, getProperties(result)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2NjY4Mw==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463266683", "bodyText": "likewise, please specify what you're trying to show here. You also might want to extract \"set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)\" into a function with a user-friendly name since you do this operation in many tests, I think to get the properties.", "author": "gjacoby126", "createdAt": "2020-07-30T20:57:05Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -210,4 +204,242 @@ public void testCreateViewIndexStatement() throws Exception {\n             Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n         }\n     }\n+\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n+            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithPKConstraint() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(15) NOT NULL, \" +\n+                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithArrayColumn() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"c_var_array VARCHAR ARRAY, \" +\n+                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithDefaultCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n+                \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+            String query = \"create table \" + pTableFullName +\n+                    \"(a_char CHAR(15) NOT NULL, \" +\n+                    \"b_char CHAR(10) NOT NULL, \" +\n+                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+            conn.createStatement().execute(query);\n+            conn.commit();\n+            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n+            SchemaExtractionTool set = new SchemaExtractionTool();\n+            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n+            set.run(args);\n+\n+            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fd9e0853e801009e7f9895eb604d5459996815d", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex 2c452fc42..1078f29f0 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -172,244 +128,186 @@ public class SchemaExtractionToolIT extends BaseTest {\n         String viewName = generateUniqueName();\n         String childView = generateUniqueName();\n         String indexName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n-\n-            String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n-                    + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n-                    + \"AS SELECT * FROM \"+pTableFullName;\n-\n-            String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n-\n-            conn.createStatement().execute(createView);\n-            conn.createStatement().execute(createView1);\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.commit();\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n+        String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n+        String childviewName = SchemaUtil.getQualifiedTableName(schemaName, childView);\n+        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+                + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n+                + \"AS SELECT * FROM \"+pTableFullName;\n+        String createView1 = \"CREATE VIEW \"+childviewName + \" AS SELECT * FROM \"+viewFullName;\n+        String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+childviewName+\"(id1) INCLUDE (v1)\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(createTableStmt);\n+        queries.add(createView);\n+        queries.add(createView1);\n+        queries.add(createIndexStatement);\n+        String result = runSchemaExtractionTool(schemaName, indexName, null, queries);\n+        Assert.assertEquals(createIndexStatement.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testSaltedTableStatement() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-            String actualProperties = set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1);\n-            Assert.assertEquals(true, actualProperties.contains(\"SALT_BUCKETS=16\"));\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n     public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(15) NOT NULL, \" +\n-                    \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String [] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"c_var_array VARCHAR ARRAY, \" +\n-                    \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, DISABLE_TABLE_SOR=true, REPLICATION_SCOPE=1\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                    \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithUniversalCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertEquals(query.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+    @Test\n+    public void testCreateTableWithCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n+                \"DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties() throws Exception {\n+    public void testCreateTableWithMultipleCF() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=3, \" +\n                 \"\\\"cv\\\".VERSIONS=4, DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        final String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(properties, getProperties(result)));\n     }\n \n     @Test\n-    public void testCreateTableWithMultipleCFProperties2() throws Exception {\n+    public void testCreateTableWithMultipleCFProperties3() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"\\\"av\\\".VERSIONS=2, \\\"bv\\\".VERSIONS=2, \" +\n-                \"DATA_BLOCK_ENCODING=DIFF, \" +\n-                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, DISABLE_TABLE_SOR=true, MULTI_TENANT=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            String query = \"create table \" + pTableFullName +\n-                    \"(a_char CHAR(15) NOT NULL, \" +\n-                    \"b_char CHAR(10) NOT NULL, \" +\n-                    \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                    \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-            conn.createStatement().execute(query);\n-            conn.commit();\n-            String[] args = {\"-tb\", tableName, \"-s\", schemaName};\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            set.run(args);\n-\n-            Assert.assertTrue(compareProperties(properties, set.getOutput().substring(set.getOutput().lastIndexOf(\")\")+1)));\n-        }\n+        String properties = \"\\\"av\\\".DATA_BLOCK_ENCODING=DIFF, \\\"bv\\\".DATA_BLOCK_ENCODING=DIFF, \\\"cv\\\".DATA_BLOCK_ENCODING=DIFF, \" +\n+                \"IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String simplifiedProperties = \"DATA_BLOCK_ENCODING=DIFF, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(compareProperties(simplifiedProperties, getProperties(result)));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MTM5NQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463271395", "bodyText": "I'm curious why we're qualifying the CF properties in one flat HashSet instead of a HashSet<String, HashSet<String, String>>? Can we guarantee that no CF properties will ever have a period in them?", "author": "gjacoby126", "createdAt": "2020-07-30T21:06:33Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -250,12 +247,31 @@ private void setHTableProperties(HTableDescriptor htd) {\n         }\n     }\n \n-    private void setHColumnFamilyProperties(HColumnDescriptor columnDescriptor) {\n-        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptor.getValues();\n-        for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n+    private void setHColumnFamilyProperties(HColumnDescriptor[] columnDescriptors) {\n+        Map<ImmutableBytesWritable, ImmutableBytesWritable> propsMap = columnDescriptors[0].getValues();\n+        for(Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> entry : propsMap.entrySet()) {\n             ImmutableBytesWritable key = entry.getKey();\n-            ImmutableBytesWritable value = entry.getValue();\n-            definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+            ImmutableBytesWritable globalValue = entry.getValue();\n+            Map<String, String> cfToPropertyValueMap = new HashMap<String, String>();\n+            Set<ImmutableBytesWritable> cfPropertyValueSet = new HashSet<ImmutableBytesWritable>();\n+            for(HColumnDescriptor columnDescriptor: columnDescriptors) {\n+                String columnFamilyName = Bytes.toString(columnDescriptor.getName());\n+                ImmutableBytesWritable value = columnDescriptor.getValues().get(key);\n+                // check if it is universal properties\n+                if (SYNCED_DATA_TABLE_AND_INDEX_COL_FAM_PROPERTIES.contains(Bytes.toString(key.get()))) {\n+                    definedProps.put(Bytes.toString(key.get()), Bytes.toString(value.get()));\n+                    break;\n+                }\n+                cfToPropertyValueMap.put(columnFamilyName, Bytes.toString(value.get()));\n+                cfPropertyValueSet.add(value);\n+            }\n+            if (cfPropertyValueSet.size() > 1) {\n+                for(Map.Entry<String, String> mapEntry: cfToPropertyValueMap.entrySet()) {\n+                    definedProps.put(String.format(\"%s.%s\",  mapEntry.getKey(), Bytes.toString(key.get())), mapEntry.getValue());", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NTQwNQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463285405", "bodyText": "@gjacoby126 We are trying to find common CF property so that we don't need to specify it for every column family in the output string. Are you suggesting that we could use hashmap instead?\nUpdate: I reviewed the grammar of the column family name and we use underscore as the separator between words.", "author": "Qinrui98", "createdAt": "2020-07-30T21:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MTM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI3MjE4Mg==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r463272182", "bodyText": "Good catch for salted tables, those are easy to miss.", "author": "gjacoby126", "createdAt": "2020-07-30T21:08:19Z", "path": "phoenix-tools/src/main/java/org/apache/phoenix/schema/SchemaExtractionProcessor.java", "diffHunk": "@@ -312,9 +336,8 @@ public Connection getConnection() throws SQLException {\n \n     private String getColumnInfoStringForTable(PTable table) {\n         StringBuilder colInfo = new StringBuilder();\n-\n-        List<PColumn> columns = table.getColumns();\n-        List<PColumn> pkColumns = table.getPKColumns();\n+        List<PColumn> columns = table.getBucketNum() == null ? table.getColumns() : table.getColumns().subList(1, table.getColumns().size());", "originalCommit": "15831283360d140e55a8fc091d6db64f41f71445", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6fd9e0853e801009e7f9895eb604d5459996815d", "url": "https://github.com/apache/phoenix/commit/6fd9e0853e801009e7f9895eb604d5459996815d", "message": "refactor IT tests", "committedDate": "2020-08-03T20:59:24Z", "type": "commit"}, {"oid": "fbf621e75a9d5c2f68e9497574b1fc70fc67ec1b", "url": "https://github.com/apache/phoenix/commit/fbf621e75a9d5c2f68e9497574b1fc70fc67ec1b", "message": "fix IT tests typo", "committedDate": "2020-08-03T21:28:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMTAzOQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r464711039", "bodyText": "I feel this and testCreateTableWithNonDefaultColumnFamily can be clubbed into one test?", "author": "swaroopak", "createdAt": "2020-08-03T23:19:01Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -58,156 +130,251 @@ public void testCreateTableStatement_tenant() throws Exception {\n         String viewName = generateUniqueName();\n         String schemaName = generateUniqueName();\n         String tenantId = \"abc\";\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-        SchemaExtractionTool set;\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n         String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+        String createViewStmt = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n                 + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n                 + \"AS SELECT * FROM \"+pTableFullName;\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            conn.commit();\n-        }\n-        try (Connection conn = getTenantConnection(getUrl(), tenantId)) {\n-            conn.createStatement().execute(createView);\n-            conn.commit();\n-        }\n-        String [] args = {\"-tb\", viewName, \"-s\", schemaName, \"-t\", tenantId};\n-        set.run(args);\n-        Assert.assertEquals(createView.toUpperCase(), set.getOutput().toUpperCase());\n+        List<String> queries1 = new ArrayList<String>(){};\n+        queries1.add(createTableStmt);\n+        runSchemaExtractionTool(schemaName, tableName, null, queries1);\n+        List<String> queries2 = new ArrayList<String>();\n+        queries2.add(createViewStmt);\n+        String result2 = runSchemaExtractionTool(schemaName, viewName, tenantId, queries2);\n+        Assert.assertEquals(createViewStmt.toUpperCase(), result2.toUpperCase());\n     }\n \n-    private Connection getTenantConnection(String url, String tenantId) throws SQLException {\n-        Properties props = new Properties();\n-        props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n-        return DriverManager.getConnection(url, props);\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n-    public void testCreateIndexStatement() throws Exception {\n+    public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String indexName = generateUniqueName();\n-        String indexName1 = generateUniqueName();\n-        String indexName2 = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+pTableFullName+\"(v1 DESC) INCLUDE (v2)\";\n-\n-            String createIndexStatement1 = \"CREATE INDEX \"+indexName1 + \" ON \"+pTableFullName+\"(v2 DESC) INCLUDE (v1)\";\n-\n-            String createIndexStatement2 = \"CREATE INDEX \"+indexName2 + \" ON \"+pTableFullName+\"(k)\";\n-\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.createStatement().execute(createIndexStatement1);\n-            conn.createStatement().execute(createIndexStatement2);\n-            conn.commit();\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-\n-            String [] args1 = {\"-tb\", indexName1, \"-s\", schemaName};\n-            set.run(args1);\n-            Assert.assertEquals(createIndexStatement1.toUpperCase(), set.getOutput().toUpperCase());\n-\n-            String [] args2 = {\"-tb\", indexName2, \"-s\", schemaName};\n-            set.run(args2);\n-            Assert.assertEquals(createIndexStatement2.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n-    public void testCreateViewStatement() throws Exception {\n+    public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String viewName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n+    }\n \n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String viewFullName1 = SchemaUtil.getQualifiedTableName(schemaName, viewName+\"1\");\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {", "originalCommit": "fbf621e75a9d5c2f68e9497574b1fc70fc67ec1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9456d69ef937cbeaffba8746219d086c74fc81ab", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex fe7c31ee7..ff672e42d 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -192,49 +192,11 @@ public class SchemaExtractionToolIT extends BaseTest {\n         Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n-    @Test\n-    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n-        String tableName = generateUniqueName();\n-        String schemaName = generateUniqueName();\n-        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String query = \"create table \" + pTableFullName +\n-                \"(a_char CHAR(15) NOT NULL, \" +\n-                \"b_char CHAR(10) NOT NULL, \" +\n-                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n-        List<String> queries = new ArrayList<String>(){};\n-        queries.add(query);\n-        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n-        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n-    }\n-\n-    @Test\n-    public void testCreateTableWithUniversalCFProperties() throws Exception {\n-        String tableName = generateUniqueName();\n-        String schemaName = generateUniqueName();\n-        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String query = \"create table \" + pTableFullName +\n-                \"(a_char CHAR(15) NOT NULL, \" +\n-                \"b_char CHAR(10) NOT NULL, \" +\n-                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-        List<String> queries = new ArrayList<String>(){};\n-        queries.add(query);\n-        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n-        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n-    }\n-\n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv, SALT_BUCKETS=16, MULTI_TENANT=true\";\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n         String query = \"create table \" + pTableFullName +\n                 \"(a_char CHAR(15) NOT NULL, \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMTI1NQ==", "url": "https://github.com/apache/phoenix/pull/848#discussion_r464711255", "bodyText": "even this can be clubbed with above one as there is only one extra property here.", "author": "swaroopak", "createdAt": "2020-08-03T23:19:35Z", "path": "phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java", "diffHunk": "@@ -58,156 +130,251 @@ public void testCreateTableStatement_tenant() throws Exception {\n         String viewName = generateUniqueName();\n         String schemaName = generateUniqueName();\n         String tenantId = \"abc\";\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-        SchemaExtractionTool set;\n+        String createTableStmt = \"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n+                + \"v1 VARCHAR, v2 VARCHAR)\";\n         String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-        String createView = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n+        String createViewStmt = \"CREATE VIEW \"+viewFullName + \"(id1 BIGINT, id2 BIGINT NOT NULL, \"\n                 + \"id3 VARCHAR NOT NULL CONSTRAINT PKVIEW PRIMARY KEY (id2, id3 DESC)) \"\n                 + \"AS SELECT * FROM \"+pTableFullName;\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-            conn.commit();\n-        }\n-        try (Connection conn = getTenantConnection(getUrl(), tenantId)) {\n-            conn.createStatement().execute(createView);\n-            conn.commit();\n-        }\n-        String [] args = {\"-tb\", viewName, \"-s\", schemaName, \"-t\", tenantId};\n-        set.run(args);\n-        Assert.assertEquals(createView.toUpperCase(), set.getOutput().toUpperCase());\n+        List<String> queries1 = new ArrayList<String>(){};\n+        queries1.add(createTableStmt);\n+        runSchemaExtractionTool(schemaName, tableName, null, queries1);\n+        List<String> queries2 = new ArrayList<String>();\n+        queries2.add(createViewStmt);\n+        String result2 = runSchemaExtractionTool(schemaName, viewName, tenantId, queries2);\n+        Assert.assertEquals(createViewStmt.toUpperCase(), result2.toUpperCase());\n     }\n \n-    private Connection getTenantConnection(String url, String tenantId) throws SQLException {\n-        Properties props = new Properties();\n-        props.setProperty(PhoenixRuntime.TENANT_ID_ATTRIB, tenantId);\n-        return DriverManager.getConnection(url, props);\n+    @Test\n+    public void testSaltedTableStatement() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_integer integer not null CONSTRAINT pk PRIMARY KEY (a_integer)) SALT_BUCKETS=16\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertTrue(getProperties(result).contains(\"SALT_BUCKETS=16\"));\n     }\n \n     @Test\n-    public void testCreateIndexStatement() throws Exception {\n+    public void testCreateTableWithPKConstraint() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String indexName = generateUniqueName();\n-        String indexName1 = generateUniqueName();\n-        String indexName2 = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n-\n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-\n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k VARCHAR NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-\n-            String createIndexStatement = \"CREATE INDEX \"+indexName + \" ON \"+pTableFullName+\"(v1 DESC) INCLUDE (v2)\";\n-\n-            String createIndexStatement1 = \"CREATE INDEX \"+indexName1 + \" ON \"+pTableFullName+\"(v2 DESC) INCLUDE (v1)\";\n-\n-            String createIndexStatement2 = \"CREATE INDEX \"+indexName2 + \" ON \"+pTableFullName+\"(k)\";\n-\n-            conn.createStatement().execute(createIndexStatement);\n-            conn.createStatement().execute(createIndexStatement1);\n-            conn.createStatement().execute(createIndexStatement2);\n-            conn.commit();\n-            SchemaExtractionTool set = new SchemaExtractionTool();\n-            set.setConf(conn.unwrap(PhoenixConnection.class).getQueryServices().getConfiguration());\n-\n-            String [] args = {\"-tb\", indexName, \"-s\", schemaName};\n-            set.run(args);\n-            Assert.assertEquals(createIndexStatement.toUpperCase(), set.getOutput().toUpperCase());\n-\n-            String [] args1 = {\"-tb\", indexName1, \"-s\", schemaName};\n-            set.run(args1);\n-            Assert.assertEquals(createIndexStatement1.toUpperCase(), set.getOutput().toUpperCase());\n-\n-            String [] args2 = {\"-tb\", indexName2, \"-s\", schemaName};\n-            set.run(args2);\n-            Assert.assertEquals(createIndexStatement2.toUpperCase(), set.getOutput().toUpperCase());\n-        }\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(15) NOT NULL, \" +\n+                \"c_bigint BIGINT NOT NULL CONSTRAINT PK PRIMARY KEY (a_char, b_char, c_bigint)) IMMUTABLE_ROWS=TRUE\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n     @Test\n-    public void testCreateViewStatement() throws Exception {\n+    public void testCreateTableWithArrayColumn() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String viewName = generateUniqueName();\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-        String properties = \"TTL=2592000,IMMUTABLE_ROWS=true,DISABLE_WAL=true\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"c_var_array VARCHAR ARRAY, \" +\n+                \"d_char_array CHAR(15) ARRAY[3] CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=2592000, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n+    }\n \n-        try (Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+    @Test\n+    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n+                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n+    }\n \n-            String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-            conn.createStatement().execute(\"CREATE TABLE \"+pTableFullName + \"(k BIGINT NOT NULL PRIMARY KEY, \"\n-                    + \"v1 VARCHAR, v2 VARCHAR)\"\n-                    + properties);\n-            String viewFullName = SchemaUtil.getQualifiedTableName(schemaName, viewName);\n-            String viewFullName1 = SchemaUtil.getQualifiedTableName(schemaName, viewName+\"1\");\n+    @Test\n+    public void testCreateTableWithUniversalCFProperties() throws Exception {\n+        String tableName = generateUniqueName();\n+        String schemaName = generateUniqueName();\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n+        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n+        String query = \"create table \" + pTableFullName +\n+                \"(a_char CHAR(15) NOT NULL, \" +\n+                \"b_char CHAR(10) NOT NULL, \" +\n+                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n+                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n+        List<String> queries = new ArrayList<String>(){};\n+        queries.add(query);\n+        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n+        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n+    }\n \n+    @Test\n+    public void testCreateTableWithDefaultCFProperties() throws Exception {", "originalCommit": "fbf621e75a9d5c2f68e9497574b1fc70fc67ec1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9456d69ef937cbeaffba8746219d086c74fc81ab", "chunk": "diff --git a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\nindex fe7c31ee7..ff672e42d 100644\n--- a/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n+++ b/phoenix-tools/src/it/java/org/apache/phoenix/schema/SchemaExtractionToolIT.java\n\n@@ -192,49 +192,11 @@ public class SchemaExtractionToolIT extends BaseTest {\n         Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n     }\n \n-    @Test\n-    public void testCreateTableWithNonDefaultColumnFamily() throws Exception {\n-        String tableName = generateUniqueName();\n-        String schemaName = generateUniqueName();\n-        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String query = \"create table \" + pTableFullName +\n-                \"(a_char CHAR(15) NOT NULL, \" +\n-                \"b_char CHAR(10) NOT NULL, \" +\n-                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" +\n-                \"TTL=1209600, IMMUTABLE_ROWS=true, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, SALT_BUCKETS=16, MULTI_TENANT=true\";\n-        List<String> queries = new ArrayList<String>(){};\n-        queries.add(query);\n-        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n-        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n-    }\n-\n-    @Test\n-    public void testCreateTableWithUniversalCFProperties() throws Exception {\n-        String tableName = generateUniqueName();\n-        String schemaName = generateUniqueName();\n-        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1\";\n-        String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n-        String query = \"create table \" + pTableFullName +\n-                \"(a_char CHAR(15) NOT NULL, \" +\n-                \"b_char CHAR(10) NOT NULL, \" +\n-                \"\\\"av\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"bv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"cv\\\".\\\"_\\\" CHAR(1), \" +\n-                \"\\\"dv\\\".\\\"_\\\" CHAR(1) CONSTRAINT PK PRIMARY KEY (a_char, b_char)) \" + properties;\n-        List<String> queries = new ArrayList<String>(){};\n-        queries.add(query);\n-        String result = runSchemaExtractionTool(schemaName, tableName, null, queries);\n-        Assert.assertEquals(query.toUpperCase(), result.toUpperCase());\n-    }\n-\n     @Test\n     public void testCreateTableWithDefaultCFProperties() throws Exception {\n         String tableName = generateUniqueName();\n         String schemaName = generateUniqueName();\n-        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv\";\n+        String properties = \"KEEP_DELETED_CELLS=TRUE, TTL=1209600, IMMUTABLE_STORAGE_SCHEME=ONE_CELL_PER_COLUMN, REPLICATION_SCOPE=1, DEFAULT_COLUMN_FAMILY=cv, SALT_BUCKETS=16, MULTI_TENANT=true\";\n         String pTableFullName = SchemaUtil.getQualifiedTableName(schemaName, tableName);\n         String query = \"create table \" + pTableFullName +\n                 \"(a_char CHAR(15) NOT NULL, \" +\n"}}, {"oid": "9456d69ef937cbeaffba8746219d086c74fc81ab", "url": "https://github.com/apache/phoenix/commit/9456d69ef937cbeaffba8746219d086c74fc81ab", "message": "merge tests", "committedDate": "2020-08-04T00:00:05Z", "type": "commit"}]}