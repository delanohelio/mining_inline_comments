{"pr_number": 951, "pr_title": "PHOENIX-5895: Leverage WALCellFilter in the SystemCatalogWALEntryFilter to replicate system catalog table", "pr_createdAt": "2020-11-02T06:39:40Z", "pr_url": "https://github.com/apache/phoenix/pull/951", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NTc3Mw==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r515785773", "bodyText": "nit: this could be filteredTenantEntry.getEdit().size()) ?", "author": "virajjasani", "createdAt": "2020-11-02T07:42:13Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java", "diffHunk": "@@ -134,11 +135,16 @@ public void testSystemCatalogWALEntryFilter() throws Exception {\n \n     //verify that the tenant view WAL.Entry passes the filter and the non-tenant view does not\n     SystemCatalogWALEntryFilter filter = new SystemCatalogWALEntryFilter();\n-    Assert.assertNull(filter.filter(nonTenantEntry));\n-    WAL.Entry filteredTenantEntry = filter.filter(tenantEntry);\n+    // Chain the system catalog WAL entry filter to ChainWALEntryFilter\n+    ChainWALEntryFilter chainWALEntryFilter = new ChainWALEntryFilter(filter);\n+    // Asserting the WALEdit for non tenant has cells before getting filtered\n+    Assert.assertTrue(nonTenantEntry.getEdit().size() > 0);\n+    // All the cells will get removed by the filter since they do not belong to tenant\n+    Assert.assertTrue(\"Non tenant edits for system catalog got \", chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());\n+    WAL.Entry filteredTenantEntry = chainWALEntryFilter.filter(tenantEntry);\n     Assert.assertNotNull(\"Tenant view was filtered when it shouldn't be!\", filteredTenantEntry);\n     Assert.assertEquals(tenantEntry.getEdit().size(),\n-        filter.filter(tenantEntry).getEdit().size());\n+        chainWALEntryFilter.filter(tenantEntry).getEdit().size());", "originalCommit": "5649d8ee01b2fb9d53a4a62a23b5e423957cbac0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2373aa8fb73714efa83457d1c205cfe2e44d8f42", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java b/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\nindex b6843405a..4a704a66b 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\n\n@@ -140,11 +140,12 @@ public class SystemCatalogWALEntryFilterIT extends ParallelStatsDisabledIT {\n     // Asserting the WALEdit for non tenant has cells before getting filtered\n     Assert.assertTrue(nonTenantEntry.getEdit().size() > 0);\n     // All the cells will get removed by the filter since they do not belong to tenant\n-    Assert.assertTrue(\"Non tenant edits for system catalog got \", chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());\n+    Assert.assertTrue(\"Non tenant edits for system catalog should not get filtered\",\n+        chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());\n     WAL.Entry filteredTenantEntry = chainWALEntryFilter.filter(tenantEntry);\n     Assert.assertNotNull(\"Tenant view was filtered when it shouldn't be!\", filteredTenantEntry);\n-    Assert.assertEquals(tenantEntry.getEdit().size(),\n-        chainWALEntryFilter.filter(tenantEntry).getEdit().size());\n+    Assert.assertEquals(\"filtered entry is not correct\",\n+        tenantEntry.getEdit().size(), filteredTenantEntry.getEdit().size());\n \n     //now check that a WAL.Entry with cells from both a tenant and a non-tenant\n     //catalog row only allow the tenant cells through\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NzM1OQ==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r515787359", "bodyText": "Not related to this changes, but wondering if we need to construct ImmutableBytesWritable object.\nCan this method impl be reduced to:\n    return cell.getRowArray()[cell.getRowOffset()] != QueryConstants.SEPARATOR_BYTE;", "author": "virajjasani", "createdAt": "2020-11-02T07:46:07Z", "path": "phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java", "diffHunk": "@@ -35,30 +36,30 @@\n  * be copied. This WALEntryFilter will only allow tenant-owned rows in SYSTEM.CATALOG to\n  * be replicated. Data from all other tables is automatically passed.\n  */\n-public class SystemCatalogWALEntryFilter implements WALEntryFilter {\n+public class SystemCatalogWALEntryFilter implements WALEntryFilter, WALCellFilter {\n+  // This is an optimization to just skip the cell filter if we do not care about\n+  // cell filter for certain WALEdits.\n+  private boolean skipCellFilter;\n \n   @Override\n   public WAL.Entry filter(WAL.Entry entry) {\n-\n+    // We use the WALCellFilter to filter the cells from entry, WALEntryFilter\n+    // should not block anything\n     //if the WAL.Entry's table isn't System.Catalog or System.Child_Link, it auto-passes this filter\n-    //TODO: when Phoenix drops support for pre-1.3 versions of HBase, redo as a WALCellFilter\n     if (!SchemaUtil.isMetaTable(entry.getKey().getTableName().getName())){\n-      return entry;\n+      skipCellFilter = true;\n+    } else {\n+      skipCellFilter = false;\n     }\n+    return entry;\n+  }\n \n-    List<Cell> cells = entry.getEdit().getCells();\n-    List<Cell> cellsToRemove = Lists.newArrayList();\n-    for (Cell cell : cells) {\n-      if (!isTenantRowCell(cell)){\n-        cellsToRemove.add(cell);\n-      }\n-    }\n-    cells.removeAll(cellsToRemove);\n-    if (cells.size() > 0) {\n-      return entry;\n-    } else {\n-      return null;\n+  @Override\n+  public Cell filterCell(WAL.Entry entry, Cell cell) {\n+    if (skipCellFilter) {\n+      return cell;\n     }\n+    return isTenantRowCell(cell) ? cell : null;\n   }\n \n   private boolean isTenantRowCell(Cell cell) {", "originalCommit": "5649d8ee01b2fb9d53a4a62a23b5e423957cbac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNDM1OQ==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r516334359", "bodyText": "@virajjasani - yes, I believe that will work. ImmutableBytesWritable.get() just returns the underlying byte array", "author": "gjacoby126", "createdAt": "2020-11-02T23:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE0MDk2Mg==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r517140962", "bodyText": "yes, it should be same, I will change that\n  public byte [] get() {\n    if (this.bytes == null) {\n      throw new IllegalStateException(\"Uninitialiized. Null constructor \" +\n        \"called w/o accompaying readFields invocation\");\n    }\n    return this.bytes;\n  }", "author": "sandeepvinayak", "createdAt": "2020-11-04T07:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4NzM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2373aa8fb73714efa83457d1c205cfe2e44d8f42", "chunk": "diff --git a/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java b/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\nindex 4b2cbaa58..904efba40 100644\n--- a/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\n+++ b/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\n\n@@ -36,16 +32,20 @@ import org.apache.phoenix.thirdparty.com.google.common.collect.Lists;\n  * be copied. This WALEntryFilter will only allow tenant-owned rows in SYSTEM.CATALOG to\n  * be replicated. Data from all other tables is automatically passed.\n  */\n-public class SystemCatalogWALEntryFilter implements WALEntryFilter, WALCellFilter {\n-  // This is an optimization to just skip the cell filter if we do not care about\n-  // cell filter for certain WALEdits.\n+public class SystemCatalogWALEntryFilter implements\n+    WALEntryFilter, WALCellFilter {\n+  /**\n+   * This is an optimization to just skip the cell filter if we do not care\n+   * about cell filter for certain WALEdits.\n+   */\n   private boolean skipCellFilter;\n \n   @Override\n   public WAL.Entry filter(WAL.Entry entry) {\n     // We use the WALCellFilter to filter the cells from entry, WALEntryFilter\n     // should not block anything\n-    //if the WAL.Entry's table isn't System.Catalog or System.Child_Link, it auto-passes this filter\n+    //if the WAL.Entry's table isn't System.Catalog or System.Child_Link,\n+    // it auto-passes this filter\n     if (!SchemaUtil.isMetaTable(entry.getKey().getTableName().getName())){\n       skipCellFilter = true;\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgwNTg1OQ==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r515805859", "bodyText": "nit: we can get rid of List and Lists imports", "author": "virajjasani", "createdAt": "2020-11-02T08:27:01Z", "path": "phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java", "diffHunk": "@@ -21,6 +21,7 @@\n \n import org.apache.hadoop.hbase.Cell;\n import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n+import org.apache.hadoop.hbase.replication.WALCellFilter;\n import org.apache.hadoop.hbase.replication.WALEntryFilter;\n import org.apache.hadoop.hbase.wal.WAL;\n import org.apache.phoenix.query.QueryConstants;", "originalCommit": "5649d8ee01b2fb9d53a4a62a23b5e423957cbac0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2373aa8fb73714efa83457d1c205cfe2e44d8f42", "chunk": "diff --git a/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java b/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\nindex 4b2cbaa58..904efba40 100644\n--- a/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\n+++ b/phoenix-core/src/main/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilter.java\n\n@@ -17,17 +17,13 @@\n  */\n package org.apache.phoenix.replication;\n \n-import java.util.List;\n-\n import org.apache.hadoop.hbase.Cell;\n-import org.apache.hadoop.hbase.io.ImmutableBytesWritable;\n import org.apache.hadoop.hbase.replication.WALCellFilter;\n import org.apache.hadoop.hbase.replication.WALEntryFilter;\n import org.apache.hadoop.hbase.wal.WAL;\n import org.apache.phoenix.query.QueryConstants;\n import org.apache.phoenix.util.SchemaUtil;\n \n-import org.apache.phoenix.thirdparty.com.google.common.collect.Lists;\n \n /**\n  * Standard replication of the SYSTEM.CATALOG table can be dangerous because schemas\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNDg4MQ==", "url": "https://github.com/apache/phoenix/pull/951#discussion_r516334881", "bodyText": "nit: system catalog get", "author": "gjacoby126", "createdAt": "2020-11-02T23:38:08Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java", "diffHunk": "@@ -134,11 +135,16 @@ public void testSystemCatalogWALEntryFilter() throws Exception {\n \n     //verify that the tenant view WAL.Entry passes the filter and the non-tenant view does not\n     SystemCatalogWALEntryFilter filter = new SystemCatalogWALEntryFilter();\n-    Assert.assertNull(filter.filter(nonTenantEntry));\n-    WAL.Entry filteredTenantEntry = filter.filter(tenantEntry);\n+    // Chain the system catalog WAL entry filter to ChainWALEntryFilter\n+    ChainWALEntryFilter chainWALEntryFilter = new ChainWALEntryFilter(filter);\n+    // Asserting the WALEdit for non tenant has cells before getting filtered\n+    Assert.assertTrue(nonTenantEntry.getEdit().size() > 0);\n+    // All the cells will get removed by the filter since they do not belong to tenant\n+    Assert.assertTrue(\"Non tenant edits for system catalog got \", chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());", "originalCommit": "5649d8ee01b2fb9d53a4a62a23b5e423957cbac0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2373aa8fb73714efa83457d1c205cfe2e44d8f42", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java b/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\nindex b6843405a..4a704a66b 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/replication/SystemCatalogWALEntryFilterIT.java\n\n@@ -140,11 +140,12 @@ public class SystemCatalogWALEntryFilterIT extends ParallelStatsDisabledIT {\n     // Asserting the WALEdit for non tenant has cells before getting filtered\n     Assert.assertTrue(nonTenantEntry.getEdit().size() > 0);\n     // All the cells will get removed by the filter since they do not belong to tenant\n-    Assert.assertTrue(\"Non tenant edits for system catalog got \", chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());\n+    Assert.assertTrue(\"Non tenant edits for system catalog should not get filtered\",\n+        chainWALEntryFilter.filter(nonTenantEntry).getEdit().isEmpty());\n     WAL.Entry filteredTenantEntry = chainWALEntryFilter.filter(tenantEntry);\n     Assert.assertNotNull(\"Tenant view was filtered when it shouldn't be!\", filteredTenantEntry);\n-    Assert.assertEquals(tenantEntry.getEdit().size(),\n-        chainWALEntryFilter.filter(tenantEntry).getEdit().size());\n+    Assert.assertEquals(\"filtered entry is not correct\",\n+        tenantEntry.getEdit().size(), filteredTenantEntry.getEdit().size());\n \n     //now check that a WAL.Entry with cells from both a tenant and a non-tenant\n     //catalog row only allow the tenant cells through\n"}}, {"oid": "2373aa8fb73714efa83457d1c205cfe2e44d8f42", "url": "https://github.com/apache/phoenix/commit/2373aa8fb73714efa83457d1c205cfe2e44d8f42", "message": "Addressing comments", "committedDate": "2020-11-04T07:38:54Z", "type": "forcePushed"}, {"oid": "5eee6352d19494cf2e10c5d67307dd16acfcda32", "url": "https://github.com/apache/phoenix/commit/5eee6352d19494cf2e10c5d67307dd16acfcda32", "message": "Leverage WALCellFilter in the SystemCatalogWALEntryFilter to replicate system catalog table", "committedDate": "2020-11-12T00:08:03Z", "type": "forcePushed"}, {"oid": "eb8ff61dc6bc2ca666a2fd01d8a09b578cbea804", "url": "https://github.com/apache/phoenix/commit/eb8ff61dc6bc2ca666a2fd01d8a09b578cbea804", "message": "PHOENIX-5895 Leverage WALCellFilter in the SystemCatalogWALEntryFilter to replicate system catalog table", "committedDate": "2020-11-12T00:10:41Z", "type": "commit"}, {"oid": "eb8ff61dc6bc2ca666a2fd01d8a09b578cbea804", "url": "https://github.com/apache/phoenix/commit/eb8ff61dc6bc2ca666a2fd01d8a09b578cbea804", "message": "PHOENIX-5895 Leverage WALCellFilter in the SystemCatalogWALEntryFilter to replicate system catalog table", "committedDate": "2020-11-12T00:10:41Z", "type": "forcePushed"}]}