{"pr_number": 782, "pr_title": "PHOENIX-5875 - Optional logging for IndexTool verification", "pr_createdAt": "2020-05-19T00:13:18Z", "pr_url": "https://github.com/apache/phoenix/pull/782", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NjEyMg==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r427486122", "bodyText": "These tests should move into IndexToolForNonTxGlobalIndexIT after the recent restructuring of IndexToolIT", "author": "kadirozde", "createdAt": "2020-05-19T17:45:48Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java", "diffHunk": "@@ -617,6 +618,125 @@ public void testSplitIndex() throws Exception {\n         }\n     }\n \n+    @Test", "originalCommit": "8fa5c788be1d4225385532cc5c61596b3ee089b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3943ce2e811e0e24e15d76880f62870a852c61b7", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\nindex 54f2de8e7..531061851 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\n\n@@ -618,125 +624,6 @@ public class IndexToolIT extends BaseUniqueNamesOwnClusterIT {\n         }\n     }\n \n-    @Test\n-    public void testDisableOutputLogging() throws Exception {\n-        if (!mutable || transactional || useSnapshot || localIndex) {\n-            return;\n-        }\n-\n-        String schemaName = generateUniqueName();\n-        String dataTableName = generateUniqueName();\n-        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n-        String indexTableName = generateUniqueName();\n-        String indexTableFullName = SchemaUtil.getTableName(schemaName, indexTableName);\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try(Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String stmString1 =\n-                \"CREATE TABLE \" + dataTableFullName\n-                    + \" (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, ZIP INTEGER) \"\n-                    + tableDDLOptions;\n-            conn.createStatement().execute(stmString1);\n-            String upsertQuery = String.format(\"UPSERT INTO %s VALUES(?, ?, ?)\", dataTableFullName);\n-            PreparedStatement stmt1 = conn.prepareStatement(upsertQuery);\n-\n-            // insert two rows\n-            upsertRow(stmt1, 1);\n-            upsertRow(stmt1, 2);\n-            conn.commit();\n-\n-            //create ASYNC\n-            String stmtString2 =\n-                String.format(\n-                    \"CREATE INDEX %s ON %s (LPAD(UPPER(NAME, 'en_US'),8,'x')||'_xyz') ASYNC \",\n-                    indexTableName, dataTableFullName);\n-            conn.createStatement().execute(stmtString2);\n-            conn.commit();\n-\n-            // run the index MR job as ONLY so the index doesn't get rebuilt. Should be 2 missing\n-            //rows. We pass in --disable-logging BEFORE to silence the output logging to\n-            // PHOENIX_INDEX_TOOL, since ONLY logs BEFORE the (non-existent in this case)\n-            // rebuild\n-           assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.ONLY,\n-               IndexTool.IndexDisableLoggingType.BEFORE, null, schemaName, dataTableName, indexTableName,\n-               indexTableFullName, 0);\n-\n-            //now check that disabling logging AFTER leaves only the BEFORE logs on a BOTH run\n-            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.AFTER,\n-                IndexVerificationOutputRepository.PHASE_BEFORE_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, 0);\n-\n-            truncateTable(conn,\n-                TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-            truncateTable(conn, TableName.valueOf(indexTableFullName));\n-\n-            //now check that disabling logging BEFORE creates only the AFTER logs on a BOTH run\n-            //the index tool run fails validation at the end because we suppressed the BEFORE logs\n-            //which prevented the rebuild from working properly, but that's ok for this test.\n-            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.BEFORE,\n-                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, -1);\n-\n-            truncateTable(conn, TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-            truncateTable(conn, TableName.valueOf(indexTableFullName));\n-\n-            //now check that disabling logging BOTH creates no logs on a BOTH run\n-            assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.BOTH,\n-                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, -1);\n-\n-        }\n-    }\n-\n-    public void truncateTable(Connection conn, TableName tableName) throws SQLException,\n-        IOException {\n-        Scan scan = new Scan();\n-        HBaseAdmin admin = conn.unwrap(PhoenixConnection.class).getQueryServices().\n-            getAdmin();\n-        HConnection hbaseConn = admin.getConnection();\n-        HTableInterface table = hbaseConn.getTable(tableName);\n-        try (ResultScanner scanner = table.getScanner(scan)) {\n-            for (Result r : scanner) {\n-                Delete del = new Delete(r.getRow());\n-                table.delete(del);\n-            }\n-        }\n-    }\n-\n-    private void assertDisableLogging(Connection conn, int expectedRows,\n-                                      IndexTool.IndexVerifyType verifyType,\n-                                      IndexTool.IndexDisableLoggingType disableLoggingType,\n-                                      byte[] expectedPhase,\n-                                      String schemaName, String dataTableName,\n-                                      String indexTableName, String indexTableFullName,\n-                                      int expectedStatus) throws Exception {\n-        IndexTool tool = runIndexTool(true, false, schemaName, dataTableName, indexTableName,\n-            null,\n-            expectedStatus, verifyType,  \"-et\",\n-            Long.toString(EnvironmentEdgeManager.currentTimeMillis()),\"-dl\", disableLoggingType.toString());\n-        assertNotNull(tool);\n-        assertNotNull(tool.getEndTime());\n-        byte[] indexTableFullNameBytes = Bytes.toBytes(indexTableFullName);\n-\n-        IndexVerificationOutputRepository outputRepository =\n-            new IndexVerificationOutputRepository(indexTableFullNameBytes, conn);\n-        List<IndexVerificationOutputRow> rows =\n-            outputRepository.getOutputRows(tool.getEndTime(),\n-                indexTableFullNameBytes);\n-        assertEquals(expectedRows, rows.size());\n-        if (expectedRows > 0) {\n-            assertArrayEquals(expectedPhase, rows.get(0).getPhaseValue());\n-        }\n-        TestUtil.dumpTable(conn,\n-            TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-    }\n-\n     public static void assertExplainPlan(boolean localIndex, String actualExplainPlan,\n             String dataTableFullName, String indexTableFullName) {\n         String expectedExplainPlan;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MDUyMA==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r427540520", "bodyText": "So, we cannot disable logging for ONLY mode?", "author": "priyankporwal", "createdAt": "2020-05-19T19:16:06Z", "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java", "diffHunk": "@@ -235,6 +272,11 @@ public static IndexVerifyType fromValue(byte[] value) {\n     private static final Option END_TIME_OPTION = new Option(\"et\", \"endtime\",\n             true, \"End time for indextool rebuild or verify\");\n \n+    private static final Option DISABLE_LOGGING_OPTION = new Option(\"dl\",\n+        \"disable-logging\", true\n+        , \"Disable logging of failed verification rows for BEFORE, \" +", "originalCommit": "8fa5c788be1d4225385532cc5c61596b3ee089b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1NjkzMA==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r427556930", "bodyText": "@priyankporwal ONLY counts as BEFORE.", "author": "gjacoby126", "createdAt": "2020-05-19T19:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MDUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "3943ce2e811e0e24e15d76880f62870a852c61b7", "chunk": "diff --git a/phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java b/phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java\nindex 4a5e58d16..3a06c756e 100644\n--- a/phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java\n+++ b/phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java\n\n@@ -267,11 +272,14 @@ public class IndexTool extends Configured implements Tool {\n             + \"If specified, truncates the index table and rebuilds (optional)\");\n \n     private static final Option HELP_OPTION = new Option(\"h\", \"help\", false, \"Help\");\n-    private static final Option START_TIME_OPTION = new Option(\"st\", \"starttime\",\n+    private static final Option START_TIME_OPTION = new Option(\"st\", \"start-time\",\n             true, \"Start time for indextool rebuild or verify\");\n-    private static final Option END_TIME_OPTION = new Option(\"et\", \"endtime\",\n+    private static final Option END_TIME_OPTION = new Option(\"et\", \"end-time\",\n             true, \"End time for indextool rebuild or verify\");\n \n+    private static final Option RETRY_VERIFY_OPTION = new Option(\"rv\", \"retry-verify\",\n+            true, \"Max scan ts of the last rebuild/verify that needs to be retried incrementally\");\n+\n     private static final Option DISABLE_LOGGING_OPTION = new Option(\"dl\",\n         \"disable-logging\", true\n         , \"Disable logging of failed verification rows for BEFORE, \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDExMA==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r427614110", "bodyText": "You would need to rebase with latest 4.x I suppose.", "author": "swaroopak", "createdAt": "2020-05-19T21:35:15Z", "path": "phoenix-core/src/main/java/org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java", "diffHunk": "@@ -88,6 +88,8 @@\n     public static final String INDEX_REBUILD_PAGING = \"_IndexRebuildPaging\";\n     // Index verification type done by the index tool\n     public static final String INDEX_REBUILD_VERIFY_TYPE = \"_IndexRebuildVerifyType\";\n+    public static final String INDEX_REBUILD_DISABLE_LOGGING_VERIFY_TYPE =", "originalCommit": "8fa5c788be1d4225385532cc5c61596b3ee089b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNTU4NA==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r428815584", "bodyText": "Done.", "author": "gjacoby126", "createdAt": "2020-05-21T17:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDExMA=="}], "type": "inlineReview", "revised_code": {"commit": "3943ce2e811e0e24e15d76880f62870a852c61b7", "chunk": "diff --git a/phoenix-core/src/main/java/org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java b/phoenix-core/src/main/java/org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java\nindex 3a3f471d2..4d6129541 100644\n--- a/phoenix-core/src/main/java/org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java\n+++ b/phoenix-core/src/main/java/org/apache/phoenix/coprocessor/BaseScannerRegionObserver.java\n\n@@ -88,6 +88,7 @@ abstract public class BaseScannerRegionObserver extends BaseRegionObserver {\n     public static final String INDEX_REBUILD_PAGING = \"_IndexRebuildPaging\";\n     // Index verification type done by the index tool\n     public static final String INDEX_REBUILD_VERIFY_TYPE = \"_IndexRebuildVerifyType\";\n+    public static final String INDEX_RETRY_VERIFY = \"_IndexRetryVerify\";\n     public static final String INDEX_REBUILD_DISABLE_LOGGING_VERIFY_TYPE =\n         \"_IndexRebuildDisableLoggingVerifyType\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3ODgxNw==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r428378817", "bodyText": "Do you want to rename this as deleteAll? It doesn't call truncate as this name suggests", "author": "gokceni", "createdAt": "2020-05-21T00:19:09Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java", "diffHunk": "@@ -617,6 +618,125 @@ public void testSplitIndex() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDisableOutputLogging() throws Exception {\n+        if (!mutable || transactional || useSnapshot || localIndex) {\n+            return;\n+        }\n+\n+        String schemaName = generateUniqueName();\n+        String dataTableName = generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = generateUniqueName();\n+        String indexTableFullName = SchemaUtil.getTableName(schemaName, indexTableName);\n+        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n+\n+        try(Connection conn = DriverManager.getConnection(getUrl(), props)) {\n+            String stmString1 =\n+                \"CREATE TABLE \" + dataTableFullName\n+                    + \" (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, ZIP INTEGER) \"\n+                    + tableDDLOptions;\n+            conn.createStatement().execute(stmString1);\n+            String upsertQuery = String.format(\"UPSERT INTO %s VALUES(?, ?, ?)\", dataTableFullName);\n+            PreparedStatement stmt1 = conn.prepareStatement(upsertQuery);\n+\n+            // insert two rows\n+            upsertRow(stmt1, 1);\n+            upsertRow(stmt1, 2);\n+            conn.commit();\n+\n+            //create ASYNC\n+            String stmtString2 =\n+                String.format(\n+                    \"CREATE INDEX %s ON %s (LPAD(UPPER(NAME, 'en_US'),8,'x')||'_xyz') ASYNC \",\n+                    indexTableName, dataTableFullName);\n+            conn.createStatement().execute(stmtString2);\n+            conn.commit();\n+\n+            // run the index MR job as ONLY so the index doesn't get rebuilt. Should be 2 missing\n+            //rows. We pass in --disable-logging BEFORE to silence the output logging to\n+            // PHOENIX_INDEX_TOOL, since ONLY logs BEFORE the (non-existent in this case)\n+            // rebuild\n+           assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.ONLY,\n+               IndexTool.IndexDisableLoggingType.BEFORE, null, schemaName, dataTableName, indexTableName,\n+               indexTableFullName, 0);\n+\n+            //now check that disabling logging AFTER leaves only the BEFORE logs on a BOTH run\n+            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n+                IndexTool.IndexDisableLoggingType.AFTER,\n+                IndexVerificationOutputRepository.PHASE_BEFORE_VALUE, schemaName,\n+                dataTableName, indexTableName,\n+                indexTableFullName, 0);\n+\n+            truncateTable(conn,\n+                TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n+            truncateTable(conn, TableName.valueOf(indexTableFullName));\n+\n+            //now check that disabling logging BEFORE creates only the AFTER logs on a BOTH run\n+            //the index tool run fails validation at the end because we suppressed the BEFORE logs\n+            //which prevented the rebuild from working properly, but that's ok for this test.\n+            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n+                IndexTool.IndexDisableLoggingType.BEFORE,\n+                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n+                dataTableName, indexTableName,\n+                indexTableFullName, -1);\n+\n+            truncateTable(conn, TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n+            truncateTable(conn, TableName.valueOf(indexTableFullName));\n+\n+            //now check that disabling logging BOTH creates no logs on a BOTH run\n+            assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.BOTH,\n+                IndexTool.IndexDisableLoggingType.BOTH,\n+                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n+                dataTableName, indexTableName,\n+                indexTableFullName, -1);\n+\n+        }\n+    }\n+\n+    public void truncateTable(Connection conn, TableName tableName) throws SQLException,", "originalCommit": "8fa5c788be1d4225385532cc5c61596b3ee089b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3943ce2e811e0e24e15d76880f62870a852c61b7", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\nindex 54f2de8e7..531061851 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexToolIT.java\n\n@@ -618,125 +624,6 @@ public class IndexToolIT extends BaseUniqueNamesOwnClusterIT {\n         }\n     }\n \n-    @Test\n-    public void testDisableOutputLogging() throws Exception {\n-        if (!mutable || transactional || useSnapshot || localIndex) {\n-            return;\n-        }\n-\n-        String schemaName = generateUniqueName();\n-        String dataTableName = generateUniqueName();\n-        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n-        String indexTableName = generateUniqueName();\n-        String indexTableFullName = SchemaUtil.getTableName(schemaName, indexTableName);\n-        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);\n-\n-        try(Connection conn = DriverManager.getConnection(getUrl(), props)) {\n-            String stmString1 =\n-                \"CREATE TABLE \" + dataTableFullName\n-                    + \" (ID INTEGER NOT NULL PRIMARY KEY, NAME VARCHAR, ZIP INTEGER) \"\n-                    + tableDDLOptions;\n-            conn.createStatement().execute(stmString1);\n-            String upsertQuery = String.format(\"UPSERT INTO %s VALUES(?, ?, ?)\", dataTableFullName);\n-            PreparedStatement stmt1 = conn.prepareStatement(upsertQuery);\n-\n-            // insert two rows\n-            upsertRow(stmt1, 1);\n-            upsertRow(stmt1, 2);\n-            conn.commit();\n-\n-            //create ASYNC\n-            String stmtString2 =\n-                String.format(\n-                    \"CREATE INDEX %s ON %s (LPAD(UPPER(NAME, 'en_US'),8,'x')||'_xyz') ASYNC \",\n-                    indexTableName, dataTableFullName);\n-            conn.createStatement().execute(stmtString2);\n-            conn.commit();\n-\n-            // run the index MR job as ONLY so the index doesn't get rebuilt. Should be 2 missing\n-            //rows. We pass in --disable-logging BEFORE to silence the output logging to\n-            // PHOENIX_INDEX_TOOL, since ONLY logs BEFORE the (non-existent in this case)\n-            // rebuild\n-           assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.ONLY,\n-               IndexTool.IndexDisableLoggingType.BEFORE, null, schemaName, dataTableName, indexTableName,\n-               indexTableFullName, 0);\n-\n-            //now check that disabling logging AFTER leaves only the BEFORE logs on a BOTH run\n-            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.AFTER,\n-                IndexVerificationOutputRepository.PHASE_BEFORE_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, 0);\n-\n-            truncateTable(conn,\n-                TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-            truncateTable(conn, TableName.valueOf(indexTableFullName));\n-\n-            //now check that disabling logging BEFORE creates only the AFTER logs on a BOTH run\n-            //the index tool run fails validation at the end because we suppressed the BEFORE logs\n-            //which prevented the rebuild from working properly, but that's ok for this test.\n-            assertDisableLogging(conn, 2, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.BEFORE,\n-                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, -1);\n-\n-            truncateTable(conn, TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-            truncateTable(conn, TableName.valueOf(indexTableFullName));\n-\n-            //now check that disabling logging BOTH creates no logs on a BOTH run\n-            assertDisableLogging(conn, 0, IndexTool.IndexVerifyType.BOTH,\n-                IndexTool.IndexDisableLoggingType.BOTH,\n-                IndexVerificationOutputRepository.PHASE_AFTER_VALUE, schemaName,\n-                dataTableName, indexTableName,\n-                indexTableFullName, -1);\n-\n-        }\n-    }\n-\n-    public void truncateTable(Connection conn, TableName tableName) throws SQLException,\n-        IOException {\n-        Scan scan = new Scan();\n-        HBaseAdmin admin = conn.unwrap(PhoenixConnection.class).getQueryServices().\n-            getAdmin();\n-        HConnection hbaseConn = admin.getConnection();\n-        HTableInterface table = hbaseConn.getTable(tableName);\n-        try (ResultScanner scanner = table.getScanner(scan)) {\n-            for (Result r : scanner) {\n-                Delete del = new Delete(r.getRow());\n-                table.delete(del);\n-            }\n-        }\n-    }\n-\n-    private void assertDisableLogging(Connection conn, int expectedRows,\n-                                      IndexTool.IndexVerifyType verifyType,\n-                                      IndexTool.IndexDisableLoggingType disableLoggingType,\n-                                      byte[] expectedPhase,\n-                                      String schemaName, String dataTableName,\n-                                      String indexTableName, String indexTableFullName,\n-                                      int expectedStatus) throws Exception {\n-        IndexTool tool = runIndexTool(true, false, schemaName, dataTableName, indexTableName,\n-            null,\n-            expectedStatus, verifyType,  \"-et\",\n-            Long.toString(EnvironmentEdgeManager.currentTimeMillis()),\"-dl\", disableLoggingType.toString());\n-        assertNotNull(tool);\n-        assertNotNull(tool.getEndTime());\n-        byte[] indexTableFullNameBytes = Bytes.toBytes(indexTableFullName);\n-\n-        IndexVerificationOutputRepository outputRepository =\n-            new IndexVerificationOutputRepository(indexTableFullNameBytes, conn);\n-        List<IndexVerificationOutputRow> rows =\n-            outputRepository.getOutputRows(tool.getEndTime(),\n-                indexTableFullNameBytes);\n-        assertEquals(expectedRows, rows.size());\n-        if (expectedRows > 0) {\n-            assertArrayEquals(expectedPhase, rows.get(0).getPhaseValue());\n-        }\n-        TestUtil.dumpTable(conn,\n-            TableName.valueOf(IndexVerificationOutputRepository.OUTPUT_TABLE_NAME));\n-    }\n-\n     public static void assertExplainPlan(boolean localIndex, String actualExplainPlan,\n             String dataTableFullName, String indexTableFullName) {\n         String expectedExplainPlan;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3OTQwNQ==", "url": "https://github.com/apache/phoenix/pull/782#discussion_r428379405", "bodyText": "nit:spacing is off", "author": "gokceni", "createdAt": "2020-05-21T00:21:05Z", "path": "phoenix-core/src/main/java/org/apache/phoenix/mapreduce/index/IndexTool.java", "diffHunk": "@@ -320,9 +363,52 @@ public CommandLine parseOptions(String[] args) {\n         if (splitIndex && cmdLine.hasOption(PARTIAL_REBUILD_OPTION.getOpt())) {\n             throw new IllegalStateException(\"Cannot split index for a partial rebuild, as the index table is dropped\");\n         }\n+        if (loggingDisabledMismatchesVerifyOption(cmdLine)){\n+            throw new IllegalStateException(\"Can't disable index verification logging when no \" +\n+                \"index verification or the wrong kind of index verification has been requested. \" +\n+                \"VerifyType: [\" + cmdLine.getOptionValue(VERIFY_OPTION.getOpt()) + \"] and \" +\n+                \"DisableLoggingType: [\"\n+                + cmdLine.getOptionValue(DISABLE_LOGGING_OPTION.getOpt()) + \"]\");\n+        }\n         return cmdLine;\n     }\n \n+    private boolean loggingDisabledMismatchesVerifyOption(CommandLine cmdLine) {\n+        boolean loggingDisabled = cmdLine.hasOption(DISABLE_LOGGING_OPTION.getOpt());\n+        if (!loggingDisabled) {\n+            return false;\n+        }\n+        boolean hasVerifyOption =\n+            cmdLine.hasOption(VERIFY_OPTION.getOpt());\n+        if (!hasVerifyOption) {\n+            return true;\n+        }\n+        String loggingDisableValue = cmdLine.getOptionValue(DISABLE_LOGGING_OPTION.getOpt());\n+        String verifyValue = cmdLine.getOptionValue(VERIFY_OPTION.getOpt());\n+        IndexDisableLoggingType loggingDisableType = IndexDisableLoggingType.fromValue(loggingDisableValue);\n+        if (loggingDisableType != IndexDisableLoggingType.BEFORE &&\n+            loggingDisableType != IndexDisableLoggingType.AFTER &&\n+        loggingDisableType != IndexDisableLoggingType.BOTH) {", "originalCommit": "8fa5c788be1d4225385532cc5c61596b3ee089b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "3943ce2e811e0e24e15d76880f62870a852c61b7", "url": "https://github.com/apache/phoenix/commit/3943ce2e811e0e24e15d76880f62870a852c61b7", "message": "PHOENIX-5875 - Optional logging for IndexTool verification", "committedDate": "2020-05-21T02:53:06Z", "type": "forcePushed"}, {"oid": "242515f1ac83843b50c2086eebc8337c80b65603", "url": "https://github.com/apache/phoenix/commit/242515f1ac83843b50c2086eebc8337c80b65603", "message": "PHOENIX-5875 - Optional logging for IndexTool verification", "committedDate": "2020-05-21T04:02:45Z", "type": "forcePushed"}, {"oid": "217f3d649eb76aa4fc29ce6f46a01e51e07daace", "url": "https://github.com/apache/phoenix/commit/217f3d649eb76aa4fc29ce6f46a01e51e07daace", "message": "PHOENIX-5875 - Optional logging for IndexTool verification", "committedDate": "2020-05-21T17:49:28Z", "type": "commit"}, {"oid": "217f3d649eb76aa4fc29ce6f46a01e51e07daace", "url": "https://github.com/apache/phoenix/commit/217f3d649eb76aa4fc29ce6f46a01e51e07daace", "message": "PHOENIX-5875 - Optional logging for IndexTool verification", "committedDate": "2020-05-21T17:49:28Z", "type": "forcePushed"}]}