{"pr_number": 734, "pr_title": "PHOENIX-5768 Supporting partial overwrites for immutable tables with \u2026", "pr_createdAt": "2020-03-12T16:33:33Z", "pr_url": "https://github.com/apache/phoenix/pull/734", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NTA0Ng==", "url": "https://github.com/apache/phoenix/pull/734#discussion_r391875046", "bodyText": "Good to have a comment explaining what this is (and discouraging people from trying it :-) )", "author": "gjacoby126", "createdAt": "2020-03-12T20:24:43Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/GlobalIndexCheckerIT.java", "diffHunk": "@@ -195,6 +198,37 @@ public void testPartialRowUpdate() throws Exception {\n         conn.close();\n     }\n \n+    @Test", "originalCommit": "26b3ca69ec0371560dcb2a157c8857808b783c89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwODE0OA==", "url": "https://github.com/apache/phoenix/pull/734#discussion_r392708148", "bodyText": "I added the comment", "author": "kadirozde", "createdAt": "2020-03-15T20:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg3NTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "915b0bf5b2942dc13787dc17fcd37c6796afc62d", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/GlobalIndexCheckerIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/GlobalIndexCheckerIT.java\nindex 30268f90d..8e4a89cc6 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/GlobalIndexCheckerIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/GlobalIndexCheckerIT.java\n\n@@ -198,6 +198,27 @@ public class GlobalIndexCheckerIT extends BaseUniqueNamesOwnClusterIT {\n         conn.close();\n     }\n \n+    /**\n+     * Phoenix allows immutable tables with indexes to be overwritten partially as long as the indexed columns are not\n+     * updated during partial overwrites. However, there is no check/enforcement for this. The immutable index mutations\n+     * are prepared at the client side without reading existing data table rows. This means the index mutations\n+     * prepared by the client will be partial when the data table row mutations are partial. The new indexing design\n+     * assumes index rows are always full and all cells within an index row have the same timestamp. On the read path,\n+     * GlobalIndexChecker returns only the cells with the most recent timestamp of the row. This means that if the\n+     * client updates the same row multiple times, the client will read back only the most recent update which could be\n+     * partial. To support the partial updates for immutable indexes, GlobalIndexChecker allows cells with different\n+     * timestamps to be be returned to the client for immutable tables even though this breaks the design assumption.\n+     * This test is to verify the partial row update support for immutable tables.\n+     *\n+     * Allowing partial overwrites on immutable indexes is a broken model in the first place. Assuring correctness in\n+     * the presence of failures does not seem possible without using something similar to the solution for mutable\n+     * indexes.\n+     *\n+     * Immutable indexes should be used only for really immutable tables and for these tables, overwrites\n+     * should be due to failures and should be idempotent. For everything else, mutable tables should be used\n+     *\n+     * @throws Exception\n+     */\n     @Test\n     public void testPartialRowUpdateForImmutable() throws Exception {\n         if (async || encoded) {\n"}}, {"oid": "915b0bf5b2942dc13787dc17fcd37c6796afc62d", "url": "https://github.com/apache/phoenix/commit/915b0bf5b2942dc13787dc17fcd37c6796afc62d", "message": "PHOENIX-5768 Supporting partial overwrites for immutable tables with indexes", "committedDate": "2020-03-15T20:08:39Z", "type": "forcePushed"}, {"oid": "915b0bf5b2942dc13787dc17fcd37c6796afc62d", "url": "https://github.com/apache/phoenix/commit/915b0bf5b2942dc13787dc17fcd37c6796afc62d", "message": "PHOENIX-5768 Supporting partial overwrites for immutable tables with indexes", "committedDate": "2020-03-15T20:08:39Z", "type": "commit"}]}