{"pr_number": 961, "pr_title": "PHOENIX-6218 Rows deleted count is incorrect for immutable tables with indexes", "pr_createdAt": "2020-11-10T22:58:46Z", "pr_url": "https://github.com/apache/phoenix/pull/961", "timeline": [{"oid": "7b6111b6d4c555bd77dfc0c7b5d0a1a38706404c", "url": "https://github.com/apache/phoenix/commit/7b6111b6d4c555bd77dfc0c7b5d0a1a38706404c", "message": "PHOENIX-6218 Rows deleted count is incorrect for immutable tables with indexes\n\nMutationState.join() ignores index rows in row count so totalRowCount calculated\nwill reflect the data table always and the index table only if the bestPlan\nuses the index table. So ignore the other index tables when determining\nthe number of tables updated.", "committedDate": "2020-11-10T22:55:29Z", "type": "commit"}, {"oid": "3d3ed1db669777174bf869876fc73cacab71c3e7", "url": "https://github.com/apache/phoenix/commit/3d3ed1db669777174bf869876fc73cacab71c3e7", "message": "Always return the number of rows deleted in the mutation state object.\nThis way we don't have to fix the inflated row count by dividing the\nnumber of tables updated.\nWorks for DELETE queries with and without LIMIT filter.", "committedDate": "2020-11-12T04:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTQ1Nw==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522481457", "bodyText": "Setup code looks copy-pasted multiple times; could you please extract to a helper method?", "author": "gjacoby126", "createdAt": "2020-11-12T22:48:57Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java", "diffHunk": "@@ -630,4 +632,181 @@ public Thread newThread(Runnable r) {\n         }\n     }\n \n+    @Test\n+    public void testDeleteCount_PK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_limit() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+\n+            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+                + this.tableDDLOptions);\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n+\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+\n+            PreparedStatement dataPreparedStatement =\n+                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+            for (int i = 1; i <= 10; i++) {\n+                dataPreparedStatement.setInt(1, i);\n+                dataPreparedStatement.setInt(2, i + 1);\n+                dataPreparedStatement.setInt(3, i * 2);\n+                dataPreparedStatement.execute();\n+            }\n+            conn.commit();\n+\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n+            assertEquals(3, deleteStmt.executeUpdate());\n+            conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_noCoveredColumn() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();", "originalCommit": "3d3ed1db669777174bf869876fc73cacab71c3e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NjMxMg==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522486312", "bodyText": "Sure, will do that", "author": "tkhurana", "createdAt": "2020-11-12T22:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java\nindex af3dd09f0..6e3743267 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/ImmutableIndexIT.java\n\n@@ -632,142 +632,81 @@ public class ImmutableIndexIT extends BaseUniqueNamesOwnClusterIT {\n         }\n     }\n \n-    @Test\n-    public void testDeleteCount_PK() throws Exception {\n-        String schemaName = generateUniqueName();\n-        String dataTableName = \"TBL_\" + generateUniqueName();\n+    private void setupForDeleteCount(Connection conn, String schemaName, String dataTableName,\n+            String indexTableName1, String indexTableName2) throws SQLException {\n+\n         String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n-        String indexTableName = \"IND_\" + generateUniqueName();\n \n-        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+        conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+            + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+            + this.tableDDLOptions);\n \n-            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n-                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n-                + this.tableDDLOptions);\n+        if (indexTableName1 != null) {\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName1, dataTableFullName));\n+        }\n \n+        if (indexTableName2 != null) {\n             conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n-\n-            PreparedStatement dataPreparedStatement =\n-                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n-            for (int i = 1; i <= 10; i++) {\n-                dataPreparedStatement.setInt(1, i);\n-                dataPreparedStatement.setInt(2, i + 1);\n-                dataPreparedStatement.setInt(3, i * 2);\n-                dataPreparedStatement.execute();\n-            }\n-            conn.commit();\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+        }\n \n-            PreparedStatement deleteStmt =\n-                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n-            assertEquals(5, deleteStmt.executeUpdate());\n-            conn.commit();\n+        PreparedStatement dataPreparedStatement =\n+            conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+        for (int i = 1; i <= 10; i++) {\n+            dataPreparedStatement.setInt(1, i);\n+            dataPreparedStatement.setInt(2, i + 1);\n+            dataPreparedStatement.setInt(3, i * 2);\n+            dataPreparedStatement.execute();\n         }\n+        conn.commit();\n     }\n \n     @Test\n-    public void testDeleteCount_nonPK() throws Exception {\n+    public void testDeleteCount_PK() throws Exception {\n         String schemaName = generateUniqueName();\n         String dataTableName = \"TBL_\" + generateUniqueName();\n         String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n         String indexTableName = \"IND_\" + generateUniqueName();\n-        String indexTableName2 = \"IND_\" + generateUniqueName();\n \n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n-\n-            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n-                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n-                + this.tableDDLOptions);\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n-\n-            PreparedStatement dataPreparedStatement =\n-                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n-            for (int i = 1; i <= 10; i++) {\n-                dataPreparedStatement.setInt(1, i);\n-                dataPreparedStatement.setInt(2, i + 1);\n-                dataPreparedStatement.setInt(3, i * 2);\n-                dataPreparedStatement.execute();\n-            }\n-            conn.commit();\n+            setupForDeleteCount(conn, schemaName, dataTableName, indexTableName, null);\n \n             PreparedStatement deleteStmt =\n-                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n             assertEquals(5, deleteStmt.executeUpdate());\n             conn.commit();\n         }\n     }\n \n     @Test\n-    public void testDeleteCount_limit() throws Exception {\n+    public void testDeleteCount_nonPK() throws Exception {\n         String schemaName = generateUniqueName();\n         String dataTableName = \"TBL_\" + generateUniqueName();\n         String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n-        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName1 = \"IND_\" + generateUniqueName();\n         String indexTableName2 = \"IND_\" + generateUniqueName();\n \n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n-\n-            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n-                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n-                + this.tableDDLOptions);\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n-\n-            PreparedStatement dataPreparedStatement =\n-                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n-            for (int i = 1; i <= 10; i++) {\n-                dataPreparedStatement.setInt(1, i);\n-                dataPreparedStatement.setInt(2, i + 1);\n-                dataPreparedStatement.setInt(3, i * 2);\n-                dataPreparedStatement.execute();\n-            }\n-            conn.commit();\n+            setupForDeleteCount(conn, schemaName, dataTableName, indexTableName1, indexTableName2);\n \n             PreparedStatement deleteStmt =\n-                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n-            assertEquals(3, deleteStmt.executeUpdate());\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n             conn.commit();\n         }\n     }\n \n     @Test\n-    public void testDeleteCount_noCoveredColumn() throws Exception {\n+    public void testDeleteCount_limit() throws Exception {\n         String schemaName = generateUniqueName();\n         String dataTableName = \"TBL_\" + generateUniqueName();\n         String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n-        String indexTableName = \"IND_\" + generateUniqueName();\n+        String indexTableName1 = \"IND_\" + generateUniqueName();\n         String indexTableName2 = \"IND_\" + generateUniqueName();\n \n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n-\n-            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n-                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n-                + this.tableDDLOptions);\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL1)\", indexTableName, dataTableFullName));\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL2)\", indexTableName2, dataTableFullName));\n-\n-            PreparedStatement dataPreparedStatement =\n-                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n-            for (int i = 1; i <= 10; i++) {\n-                dataPreparedStatement.setInt(1, i);\n-                dataPreparedStatement.setInt(2, i + 1);\n-                dataPreparedStatement.setInt(3, i * 2);\n-                dataPreparedStatement.execute();\n-            }\n-            conn.commit();\n+            setupForDeleteCount(conn, schemaName, dataTableName, indexTableName1, indexTableName2);\n \n             PreparedStatement deleteStmt =\n                 conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6 LIMIT 3\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522483197", "bodyText": "is there a reason we need this test carried over from the immutable index test but not the others?", "author": "gjacoby126", "createdAt": "2020-11-12T22:51:11Z", "path": "phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java", "diffHunk": "@@ -899,6 +899,39 @@ public void testUpdateNonIndexedColumn() throws Exception {\n       }\n   }\n \n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();", "originalCommit": "3d3ed1db669777174bf869876fc73cacab71c3e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NzQ3MQ==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522497471", "bodyText": "I just wanted to make sure I didn't break anything for mutable indexes so added a test to verify. The bug only applies to immutable index but the code is shared between both immutable and mutable. I could carry all the tests. What do you suggest ? @gjacoby126", "author": "tkhurana", "createdAt": "2020-11-12T23:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwMTk2NQ==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522501965", "bodyText": "I'd lean toward carrying them all over. It seems like we had a testing gap around affected row counts and you've written a good set of tests to cover that gap for both kinds of table (even if we have no reason to think there's anything wrong with mutable tables).\nWith the right common helper methods it won't add much code and I don't expect it to lengthen test suite runtime much.", "author": "gjacoby126", "createdAt": "2020-11-12T23:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNTUwMg==", "url": "https://github.com/apache/phoenix/pull/961#discussion_r522505502", "bodyText": "Sounds good", "author": "tkhurana", "createdAt": "2020-11-12T23:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "chunk": "diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java\nindex 48ae49b1d..dfc7a8add 100644\n--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java\n+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/index/MutableIndexIT.java\n\n@@ -898,32 +898,63 @@ public class MutableIndexIT extends ParallelStatsDisabledIT {\n           IndexScrutiny.scrutinizeIndex(conn, fullTableName, fullIndexName);\n       }\n   }\n+    private void setupForDeleteCount(Connection conn, String schemaName, String dataTableName,\n+        String indexTableName1, String indexTableName2) throws SQLException {\n+\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+\n+        conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n+            + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n+            + this.tableDDLOptions);\n+\n+        if (indexTableName1 != null) {\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName1, dataTableFullName));\n+        }\n+\n+        if (indexTableName2 != null) {\n+            conn.createStatement().execute(String.format(\n+                \"CREATE INDEX %s ON %s (VAL2) INCLUDE (VAL1)\", indexTableName2, dataTableFullName));\n+        }\n+\n+        PreparedStatement dataPreparedStatement =\n+            conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n+        for (int i = 1; i <= 10; i++) {\n+            dataPreparedStatement.setInt(1, i);\n+            dataPreparedStatement.setInt(2, i + 1);\n+            dataPreparedStatement.setInt(3, i * 2);\n+            dataPreparedStatement.execute();\n+        }\n+        conn.commit();\n+    }\n \n     @Test\n-    public void testDeleteCount_nonPK() throws Exception {\n+    public void testDeleteCount_PK() throws Exception {\n         String schemaName = generateUniqueName();\n         String dataTableName = \"TBL_\" + generateUniqueName();\n         String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n         String indexTableName = \"IND_\" + generateUniqueName();\n \n         try (Connection conn = DriverManager.getConnection(getUrl())) {\n+            setupForDeleteCount(conn, schemaName, dataTableName, indexTableName, null);\n \n-            conn.createStatement().execute(\"CREATE TABLE \" + dataTableFullName\n-                + \" (ID INTEGER NOT NULL PRIMARY KEY, VAL1 INTEGER, VAL2 INTEGER) \"\n-                + this.tableDDLOptions);\n-\n-            conn.createStatement().execute(String.format(\n-                \"CREATE INDEX %s ON %s (VAL1) INCLUDE (VAL2)\", indexTableName, dataTableFullName));\n-\n-            PreparedStatement dataPreparedStatement =\n-                conn.prepareStatement(\"UPSERT INTO \" + dataTableFullName + \" VALUES(?,?,?)\");\n-            for (int i = 1; i <= 10; i++) {\n-                dataPreparedStatement.setInt(1, i);\n-                dataPreparedStatement.setInt(2, i + 1);\n-                dataPreparedStatement.setInt(3, i * 2);\n-                dataPreparedStatement.execute();\n-            }\n+            PreparedStatement deleteStmt =\n+                conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE ID > 5\");\n+            assertEquals(5, deleteStmt.executeUpdate());\n             conn.commit();\n+        }\n+    }\n+\n+    @Test\n+    public void testDeleteCount_nonPK() throws Exception {\n+        String schemaName = generateUniqueName();\n+        String dataTableName = \"TBL_\" + generateUniqueName();\n+        String dataTableFullName = SchemaUtil.getTableName(schemaName, dataTableName);\n+        String indexTableName1 = \"IND_\" + generateUniqueName();\n+        String indexTableName2 = \"IND_\" + generateUniqueName();\n+\n+        try (Connection conn = DriverManager.getConnection(getUrl())) {\n+            setupForDeleteCount(conn, schemaName, dataTableName, indexTableName1, indexTableName2);\n \n             PreparedStatement deleteStmt =\n                 conn.prepareStatement(\"DELETE FROM \" + dataTableFullName + \" WHERE VAL1 > 6\");\n"}}, {"oid": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "url": "https://github.com/apache/phoenix/commit/a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "message": "Refactor tests to reduce duplicate code. Also, added similar tests for\nmutable indexes.", "committedDate": "2020-11-13T02:16:15Z", "type": "commit"}, {"oid": "a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "url": "https://github.com/apache/phoenix/commit/a511e38519d7de9658dd7d6bdd4f061f45f70ed2", "message": "Refactor tests to reduce duplicate code. Also, added similar tests for\nmutable indexes.", "committedDate": "2020-11-13T02:16:15Z", "type": "forcePushed"}]}