{"pr_number": 253, "pr_title": "[MOB-1896] allow token to be set with same email or userId", "pr_createdAt": "2020-07-21T21:48:22Z", "pr_url": "https://github.com/Iterable/iterable-android-sdk/pull/253", "timeline": [{"oid": "fd1cbaabb910bc602d2622da043f336507f7711d", "url": "https://github.com/Iterable/iterable-android-sdk/commit/fd1cbaabb910bc602d2622da043f336507f7711d", "message": "allow token to be set with same email or userId", "committedDate": "2020-07-21T21:47:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTEzNQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458415135", "bodyText": "I think it should be\nelse if (email == _email && (_authToken == null || _authToken != authToken)) {\n//update the authToken\n}\n\nOnly if the email passed in the function is the one already been set in Iterable, we should update the token.\nIf the email is new, we should perform log out, log in and then store the auth.", "author": "Ayyanchira", "createdAt": "2020-07-21T22:03:31Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && (_authToken == null || _authToken != authToken)) {", "originalCommit": "fd1cbaabb910bc602d2622da043f336507f7711d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3648b4944ab08b771426e18caef749dbb5064454", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex bc6a7d0..5eb97af 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -298,7 +298,7 @@ private static final String TAG = \"IterableApi\";\n             storeAuthData();\n \n             onLogIn();\n-        } else if (email != null && (_authToken == null || _authToken != authToken)) {\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n             _authToken = authToken;\n             storeAuthData();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTgyMQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458415821", "bodyText": "Just like with email,\nwe might have to check if userId == !userId && (_authToken == null || _authToken != authToken)) {\n//update authToken\n}", "author": "Ayyanchira", "createdAt": "2020-07-21T22:05:05Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -324,20 +324,20 @@ public void setUserId(@Nullable String userId) {\n      * @param authToken Authorization token\n      */\n     public void setUserId(@Nullable String userId, @Nullable String authToken) {\n-        if (_userId != null && _userId.equals(userId)) {\n-            return;\n-        }\n+        if (_userId != null && !_userId.equals(userId)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && userId == null) {\n-            return;\n-        }\n+            _email = null;\n+            _userId = userId;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = null;\n-        _userId = userId;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (userId != null & (_authToken == null || _authToken != authToken)) {", "originalCommit": "fd1cbaabb910bc602d2622da043f336507f7711d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3648b4944ab08b771426e18caef749dbb5064454", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex bc6a7d0..5eb97af 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -334,7 +334,7 @@ private static final String TAG = \"IterableApi\";\n             storeAuthData();\n \n             onLogIn();\n-        } else if (userId != null & (_authToken == null || _authToken != authToken)) {\n+        } else if (userId != null && userId.equals(_userId) && (_authToken == null || _authToken != authToken)) {\n             _authToken = authToken;\n             storeAuthData();\n         }\n"}}, {"oid": "3648b4944ab08b771426e18caef749dbb5064454", "url": "https://github.com/Iterable/iterable-android-sdk/commit/3648b4944ab08b771426e18caef749dbb5064454", "message": "add stricter checks for setting auth data", "committedDate": "2020-07-21T23:43:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458483413", "bodyText": "we will need to set _email to new email", "author": "Ayyanchira", "createdAt": "2020-07-22T01:39:16Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = email;\n+            _userId = null;\n+            _authToken = authToken;\n+\n+            storeAuthData();\n \n-        onLogOut();\n-        _email = email;\n-        _userId = null;\n-        _authToken = authToken;\n-        storeAuthData();\n-        onLogIn();\n+            onLogIn();\n+        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _authToken = authToken;", "originalCommit": "3648b4944ab08b771426e18caef749dbb5064454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MjkwOQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r458942909", "bodyText": "It's already the same by that point", "author": "roninopf", "createdAt": "2020-07-22T16:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwMDM2NA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459100364", "bodyText": "Not when _email(current email) is null as stated in above comments. If null case is handled on top, else if part can be considered as just updating the authToken", "author": "Ayyanchira", "createdAt": "2020-07-22T21:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTgyOA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459149828", "bodyText": "This got really confusing to follow the flow for something so important, so I simplified it. The handling of null and setting info accurately should be right, now, if I haven't messed anything else up!", "author": "roninopf", "createdAt": "2020-07-23T00:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ4MzQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "efea88220596dbd60c1dcd7126ca14b2f5a88e12", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex 5eb97af..a3e360a 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -288,19 +288,28 @@ private static final String TAG = \"IterableApi\";\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && !_email.equals(email)) {\n+        if (email == null) {\n             onLogOut();\n \n-            _email = email;\n+            _email = null;\n             _userId = null;\n+            _authToken = null;\n+\n+            storeAuthData();\n+        } else if (_email.equals(email) && _authToken != authToken) {\n             _authToken = authToken;\n \n             storeAuthData();\n+        } else if (!_email.equals(email)) {\n+            onLogOut();\n \n-            onLogIn();\n-        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _email = email;\n+            _userId = null;\n             _authToken = authToken;\n+\n             storeAuthData();\n+\n+            onLogIn();\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTkyNA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459079924", "bodyText": "This will skip execution if _email (current email) is null. The tests caught that.", "author": "vbabenkoru", "createdAt": "2020-07-22T20:59:58Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,20 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (_email != null && !_email.equals(email)) {", "originalCommit": "3648b4944ab08b771426e18caef749dbb5064454", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NTU5MQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459095591", "bodyText": "Ah, because it should empty out authentication info if it's null.", "author": "roninopf", "createdAt": "2020-07-22T21:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3OTkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "efea88220596dbd60c1dcd7126ca14b2f5a88e12", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex 5eb97af..a3e360a 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -288,19 +288,28 @@ private static final String TAG = \"IterableApi\";\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && !_email.equals(email)) {\n+        if (email == null) {\n             onLogOut();\n \n-            _email = email;\n+            _email = null;\n             _userId = null;\n+            _authToken = null;\n+\n+            storeAuthData();\n+        } else if (_email.equals(email) && _authToken != authToken) {\n             _authToken = authToken;\n \n             storeAuthData();\n+        } else if (!_email.equals(email)) {\n+            onLogOut();\n \n-            onLogIn();\n-        } else if (email != null && email.equals(_email) && (_authToken == null || _authToken != authToken)) {\n+            _email = email;\n+            _userId = null;\n             _authToken = authToken;\n+\n             storeAuthData();\n+\n+            onLogIn();\n         }\n     }\n \n"}}, {"oid": "efea88220596dbd60c1dcd7126ca14b2f5a88e12", "url": "https://github.com/Iterable/iterable-android-sdk/commit/efea88220596dbd60c1dcd7126ca14b2f5a88e12", "message": "simplify auth flow conditions", "committedDate": "2020-07-23T00:01:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MzkyMg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459673922", "bodyText": "I think this still doesn't do what we want it to do.. We don't want to run logout/login if current email & userId are null, and the new email is also null.", "author": "vbabenkoru", "createdAt": "2020-07-23T19:19:46Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,29 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (email == null) {", "originalCommit": "efea88220596dbd60c1dcd7126ca14b2f5a88e12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9289d2f90dae400b87ce93490afc7dccd675cb9a", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex a3e360a..eeabb59 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -288,29 +288,31 @@ private static final String TAG = \"IterableApi\";\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (email == null) {\n-            onLogOut();\n+        if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;\n+            }\n \n-            _email = null;\n-            _userId = null;\n-            _authToken = null;\n+            if (_authToken != null && _authToken.equals(authToken)) {\n+                return;\n+            }\n \n-            storeAuthData();\n-        } else if (_email.equals(email) && _authToken != authToken) {\n             _authToken = authToken;\n-\n             storeAuthData();\n-        } else if (!_email.equals(email)) {\n-            onLogOut();\n \n-            _email = email;\n-            _userId = null;\n-            _authToken = authToken;\n-\n-            storeAuthData();\n+            return;\n+        }\n \n-            onLogIn();\n+        if (_email == null && _userId == null && email == null) {\n+            return;\n         }\n+\n+        onLogOut();\n+        _email = email;\n+        _userId = null;\n+        _authToken = authToken;\n+        storeAuthData();\n+        onLogIn();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDMxNA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459674314", "bodyText": "Since we don't check for nullity of _email here, if we pass an non-null email when the current _email is null, it will throw an exception.", "author": "vbabenkoru", "createdAt": "2020-07-23T19:20:26Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -288,20 +288,29 @@ public void setEmail(@Nullable String email) {\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (_email != null && _email.equals(email)) {\n-            return;\n-        }\n+        if (email == null) {\n+            onLogOut();\n \n-        if (_email == null && _userId == null && email == null) {\n-            return;\n-        }\n+            _email = null;\n+            _userId = null;\n+            _authToken = null;\n+\n+            storeAuthData();\n+        } else if (_email.equals(email) && _authToken != authToken) {", "originalCommit": "efea88220596dbd60c1dcd7126ca14b2f5a88e12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9289d2f90dae400b87ce93490afc7dccd675cb9a", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex a3e360a..eeabb59 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -288,29 +288,31 @@ private static final String TAG = \"IterableApi\";\n      * @param authToken Authorization token\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n-        if (email == null) {\n-            onLogOut();\n+        if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;\n+            }\n \n-            _email = null;\n-            _userId = null;\n-            _authToken = null;\n+            if (_authToken != null && _authToken.equals(authToken)) {\n+                return;\n+            }\n \n-            storeAuthData();\n-        } else if (_email.equals(email) && _authToken != authToken) {\n             _authToken = authToken;\n-\n             storeAuthData();\n-        } else if (!_email.equals(email)) {\n-            onLogOut();\n \n-            _email = email;\n-            _userId = null;\n-            _authToken = authToken;\n-\n-            storeAuthData();\n+            return;\n+        }\n \n-            onLogIn();\n+        if (_email == null && _userId == null && email == null) {\n+            return;\n         }\n+\n+        onLogOut();\n+        _email = email;\n+        _userId = null;\n+        _authToken = authToken;\n+        storeAuthData();\n+        onLogIn();\n     }\n \n     /**\n"}}, {"oid": "9289d2f90dae400b87ce93490afc7dccd675cb9a", "url": "https://github.com/Iterable/iterable-android-sdk/commit/9289d2f90dae400b87ce93490afc7dccd675cb9a", "message": "add token cases after reverting to existing flow", "committedDate": "2020-07-24T00:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459805703", "bodyText": "if we return here,\nwe won't perform setEmail for where developer doesnt want to implement authToken at all. authToken and _authToken being null should still allow setEmail operation", "author": "Ayyanchira", "createdAt": "2020-07-24T00:57:56Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -289,6 +289,17 @@ public void setEmail(@Nullable String email) {\n      */\n     public void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n+            if (_authToken == null && authToken == null) {\n+                return;", "originalCommit": "9289d2f90dae400b87ce93490afc7dccd675cb9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzNTMzMA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r459835330", "bodyText": "Hmm, this is only for when the previous and new emails are the same. Nothing should happen, right? That was the previous behavior too. It just used to return.", "author": "roninopf", "createdAt": "2020-07-24T03:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTc0NQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460169745", "bodyText": "oh yes.. looks good here.", "author": "Ayyanchira", "createdAt": "2020-07-24T16:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MDcyMQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460170721", "bodyText": "I strongly feel we should have multiple tests written for it first. Kind of -> if those pass, all good", "author": "Ayyanchira", "createdAt": "2020-07-24T16:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3ODUxNA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460178514", "bodyText": "I'll see if I can fit tests into this PR.", "author": "roninopf", "createdAt": "2020-07-24T17:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "b2157dc6d41300e43a92665963be297e8aa6df6f", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex eeabb59..b6e256f 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -287,7 +287,7 @@ private static final String TAG = \"IterableApi\";\n      * @param email User email\n      * @param authToken Authorization token\n      */\n-    public void setEmail(@Nullable String email, @Nullable String authToken) {\n+    private void setEmail(@Nullable String email, @Nullable String authToken) {\n         if (_email != null && _email.equals(email)) {\n             if (_authToken == null && authToken == null) {\n                 return;\n"}}, {"oid": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8", "url": "https://github.com/Iterable/iterable-android-sdk/commit/0c1f2e4e07e5b3729722ca0b375ac981faf562f8", "message": "add auth consistency unit tests", "committedDate": "2020-07-24T19:54:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460356083", "bodyText": "What do we need this for?", "author": "vbabenkoru", "createdAt": "2020-07-25T03:02:39Z", "path": "iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java", "diffHunk": "@@ -1223,6 +1245,10 @@ protected void registerDeviceToken(@Nullable String email, @Nullable String user\n         }\n     }\n \n+    protected String getAuthToken() {", "originalCommit": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxNzk0MA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461017940", "bodyText": "Oh! I suggested that in case we need to check authToken within our IterableAPI classes internally. Could be useful in test. And possibly in RN too (later).", "author": "Ayyanchira", "createdAt": "2020-07-27T16:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzU2Mw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461063563", "bodyText": "Yeah, it was only to let the tests verify the authentication token directly. Otherwise the tests had no (easy) way to check them.", "author": "roninopf", "createdAt": "2020-07-27T17:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzA3Mg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461097072", "bodyText": "Hmm, interesting, I didn't know protected was accessible from tests.. I've always used package-private (no modifier) for this.", "author": "vbabenkoru", "createdAt": "2020-07-27T18:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODQ3NA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461098474", "bodyText": "\"Protected data member and method are only accessible by the classes of the same package and the subclasses present in any package.\"\nTIL! I thought they were only accessible by the subclasses.", "author": "vbabenkoru", "createdAt": "2020-07-27T18:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODkyNw==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461098927", "bodyText": "Oh!!! When I read package-private above, I realized thats I wanted to tell before!\ud83d\ude05 But yeah strange that protected worked too", "author": "Ayyanchira", "createdAt": "2020-07-27T18:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTQwNA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099404", "bodyText": "However in this case we don't have subclasses of IterableApi, so it would also work with package-private. Let me take a look at how getEmail/getUserId are declared..", "author": "vbabenkoru", "createdAt": "2020-07-27T18:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDE5Ng==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100196", "bodyText": "They're package-private.. I think next to them would also be a better place for it. @roninopf Could you remove protected keyword and move this method right below getUserId() in \"Package-Protected Functions\" group?", "author": "vbabenkoru", "createdAt": "2020-07-27T18:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjI1OQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106259", "bodyText": "Done", "author": "roninopf", "createdAt": "2020-07-27T19:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjQ0OA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106448", "bodyText": "Is it protected causing the failure in travis?", "author": "Ayyanchira", "createdAt": "2020-07-27T19:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNjg4NQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461106885", "bodyText": "@Ayyanchira Oh, right. Let's make it package-private to make it visible to tests.", "author": "vbabenkoru", "createdAt": "2020-07-27T19:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8553e73c501c8763bafb0c33b5ae000b090b5b91", "chunk": "diff --git a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\nindex c9067b5..d18df7b 100644\n--- a/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n+++ b/iterableapi/src/main/java/com/iterable/iterableapi/IterableApi.java\n\n@@ -1245,10 +1253,6 @@ private static final String TAG = \"IterableApi\";\n         }\n     }\n \n-    protected String getAuthToken() {\n-        return _authToken;\n-    }\n-\n //---------------------------------------------------------------------------------------\n //endregion\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r460356282", "bodyText": "Since these tests aren't testing persistence, I think these shouldn't have *Persistence suffixes.\nThe tests checking persistence create a new instance of IterableApi to make sure it doesn't have values in memory and loads them from disk.", "author": "vbabenkoru", "createdAt": "2020-07-25T03:05:03Z", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java", "diffHunk": "@@ -630,4 +630,194 @@ public void testTrackInAppDeleteWithNullParameters() throws Exception {\n         assertNull(requestJson.optString(IterableConstants.KEY_INBOX_SESSION_ID, null));\n     }\n \n+    @Test\n+    public void testSetEmailWithTokenPersistence() throws Exception {", "originalCommit": "0c1f2e4e07e5b3729722ca0b375ac981faf562f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzY4Ng==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461063686", "bodyText": "Will change the suffix", "author": "roninopf", "createdAt": "2020-07-27T17:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDU1OA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461094558", "bodyText": "Renamed to *Status. There might be something better? But at least now it's not implying disk data.", "author": "roninopf", "createdAt": "2020-07-27T18:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1NjI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5df512bdcd0c04cb2ee1df721a5a8a26bdeca3c4", "chunk": "diff --git a/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java b/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java\nindex 0ff708b..8ef6166 100644\n--- a/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java\n+++ b/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiTest.java\n\n@@ -630,194 +630,5 @@ public class IterableApiTest extends BaseTest {\n         assertNull(requestJson.optString(IterableConstants.KEY_INBOX_SESSION_ID, null));\n     }\n \n-    @Test\n-    public void testSetEmailWithTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setEmail(email, token);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-    }\n-\n-    @Test\n-    public void testSetUserIdWithTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String userId = \"testUserId\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setUserId(userId, token);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-    }\n-\n-    @Test\n-    public void testSameEmailWithNewTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setEmail(email, token);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        String newToken = \"asdf\";\n-\n-        IterableApi.getInstance().setEmail(email, newToken);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), newToken);\n-    }\n-\n-    @Test\n-    public void testSameUserIdWithNewTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String userId = \"testUserId\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setUserId(userId, token);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        String newToken = \"asdf\";\n-\n-        IterableApi.getInstance().setUserId(userId, newToken);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), newToken);\n-    }\n-\n-    @Test\n-    public void testSetSameEmailAndRemoveTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setEmail(email, token);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        IterableApi.getInstance().setEmail(email);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-    }\n-\n-    @Test\n-    public void testSetSameUserIdAndRemoveTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String userId = \"testUserId\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setUserId(userId, token);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        IterableApi.getInstance().setUserId(userId);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-    }\n \n-    @Test\n-    public void testSetSameEmailPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-\n-        IterableApi.getInstance().setEmail(email);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertNull(IterableApi.getInstance().getUserId());\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-\n-        IterableApi.getInstance().setEmail(email);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertNull(IterableApi.getInstance().getUserId());\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-    }\n-\n-    @Test\n-    public void testSetSameUserIdPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String userId = \"testUserId\";\n-\n-        IterableApi.getInstance().setUserId(userId);\n-\n-        assertNull(IterableApi.getInstance().getEmail());\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-\n-        IterableApi.getInstance().setUserId(userId);\n-\n-        assertNull(IterableApi.getInstance().getEmail());\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertNull(IterableApi.getInstance().getAuthToken());\n-    }\n-\n-    @Test\n-    public void testSetSameEmailWithSameTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setEmail(email, token);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        IterableApi.getInstance().setEmail(email, token);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-    }\n-\n-    @Test\n-    public void testSetSameUserIdWithSameTokenPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String userId = \"testUserId\";\n-        String token = \"token\";\n-\n-        IterableApi.getInstance().setUserId(userId, token);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-\n-        IterableApi.getInstance().setUserId(userId, token);\n-\n-        assertEquals(IterableApi.getInstance().getUserId(), userId);\n-        assertEquals(IterableApi.getInstance().getAuthToken(), token);\n-    }\n-\n-    @Test\n-    public void testLogOutPersistence() throws Exception {\n-        IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n-\n-        String email = \"test@example.com\";\n-\n-        IterableApi.getInstance().setEmail(email);\n-\n-        assertEquals(IterableApi.getInstance().getEmail(), email);\n-\n-        IterableApi.getInstance().setEmail(null);\n-\n-        assertNull(IterableApi.getInstance().getEmail());\n-    }\n }\n"}}, {"oid": "5df512bdcd0c04cb2ee1df721a5a8a26bdeca3c4", "url": "https://github.com/Iterable/iterable-android-sdk/commit/5df512bdcd0c04cb2ee1df721a5a8a26bdeca3c4", "message": "split authentication tests to separate file", "committedDate": "2020-07-27T18:07:01Z", "type": "commit"}, {"oid": "5ba4515e3102cab95c979797a6e353c0c24a0cd2", "url": "https://github.com/Iterable/iterable-android-sdk/commit/5ba4515e3102cab95c979797a6e353c0c24a0cd2", "message": "rename auth tests for clarity", "committedDate": "2020-07-27T18:43:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461096450", "bodyText": "What does *Status suffix mean?", "author": "vbabenkoru", "createdAt": "2020-07-27T18:47:15Z", "path": "iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.iterable.iterableapi;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.robolectric.RuntimeEnvironment;\n+\n+import java.io.IOException;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+\n+public class IterableApiAuthTests extends BaseTest {\n+\n+    private IterableUtil.IterableUtilImpl originalIterableUtil;\n+    private IterableUtil.IterableUtilImpl iterableUtilSpy;\n+\n+    @Before\n+    public void setUp() {\n+        reInitIterableApi();\n+\n+        originalIterableUtil = IterableUtil.instance;\n+        iterableUtilSpy = spy(originalIterableUtil);\n+        IterableUtil.instance = iterableUtilSpy;\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        IterableUtil.instance = originalIterableUtil;\n+        iterableUtilSpy = null;\n+    }\n+\n+    private void reInitIterableApi() {\n+        IterableApi.sharedInstance = spy(new IterableApi());\n+        IterableInAppManager inAppManagerMock = mock(IterableInAppManager.class);\n+        doReturn(inAppManagerMock).when(IterableApi.sharedInstance).getInAppManager();\n+    }\n+\n+    @Test\n+    public void testSetEmailWithTokenStatus() throws Exception {", "originalCommit": "5ba4515e3102cab95c979797a6e353c0c24a0cd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTU0Mg==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099542", "bodyText": "It's supposed to represent the status of the authentication data; I couldn't think of a good suffix that didn't make it more confusing, but I wanted to at least evade *Persistence.", "author": "roninopf", "createdAt": "2020-07-27T18:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5OTk2Ng==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461099966", "bodyText": "Just plain\ntestSetEmailWithToken\ntestSetEmailEmptyToken\ntestSetEmailWithNullToken\ntestSetNullEmailWithToken\nkind of names would also work", "author": "Ayyanchira", "createdAt": "2020-07-27T18:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDU0NQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100545", "bodyText": "I think it won't lose anything without the suffix.. testSetEmailWithToken makes sense.", "author": "vbabenkoru", "createdAt": "2020-07-27T18:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMDcyOQ==", "url": "https://github.com/Iterable/iterable-android-sdk/pull/253#discussion_r461100729", "bodyText": "Okay! I'll just drop it. I think you're right.", "author": "roninopf", "createdAt": "2020-07-27T18:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f12d63659051eb25fff7f658b133a4f48f17fa2", "chunk": "diff --git a/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java b/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java\nindex da61002..fb9d7b8 100644\n--- a/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java\n+++ b/iterableapi/src/test/java/com/iterable/iterableapi/IterableApiAuthTests.java\n\n@@ -40,7 +40,7 @@ public class IterableApiAuthTests extends BaseTest {\n     }\n \n     @Test\n-    public void testSetEmailWithTokenStatus() throws Exception {\n+    public void testSetEmailWithToken() throws Exception {\n         IterableApi.initialize(RuntimeEnvironment.application, \"apiKey\");\n \n         String email = \"test@example.com\";\n"}}, {"oid": "1f12d63659051eb25fff7f658b133a4f48f17fa2", "url": "https://github.com/Iterable/iterable-android-sdk/commit/1f12d63659051eb25fff7f658b133a4f48f17fa2", "message": "remove suffix", "committedDate": "2020-07-27T18:56:08Z", "type": "commit"}, {"oid": "3d9aa1d4144b86e4235e1b994b1114b2aa7fcaa7", "url": "https://github.com/Iterable/iterable-android-sdk/commit/3d9aa1d4144b86e4235e1b994b1114b2aa7fcaa7", "message": "add userId logout test, make them more rigorous", "committedDate": "2020-07-27T18:58:31Z", "type": "commit"}, {"oid": "8553e73c501c8763bafb0c33b5ae000b090b5b91", "url": "https://github.com/Iterable/iterable-android-sdk/commit/8553e73c501c8763bafb0c33b5ae000b090b5b91", "message": "set auth token accessor to package-protected", "committedDate": "2020-07-27T19:05:04Z", "type": "commit"}, {"oid": "b2157dc6d41300e43a92665963be297e8aa6df6f", "url": "https://github.com/Iterable/iterable-android-sdk/commit/b2157dc6d41300e43a92665963be297e8aa6df6f", "message": "Merge branch 'master' into MOB-1896-allow-token-change", "committedDate": "2020-07-27T19:28:45Z", "type": "commit"}, {"oid": "d3f29c2dd3036a83f27e8ccde78a922aa333500f", "url": "https://github.com/Iterable/iterable-android-sdk/commit/d3f29c2dd3036a83f27e8ccde78a922aa333500f", "message": "set authentication functions to package private", "committedDate": "2020-07-27T19:31:58Z", "type": "commit"}]}