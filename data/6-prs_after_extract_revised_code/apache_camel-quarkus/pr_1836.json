{"pr_number": 1836, "pr_title": "RSS native support", "pr_createdAt": "2020-09-25T10:54:04Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1836", "timeline": [{"oid": "c54879e1dfaed82d5f6345b9f50bb74c817e549c", "url": "https://github.com/apache/camel-quarkus/commit/c54879e1dfaed82d5f6345b9f50bb74c817e549c", "message": "RSS native support\n\nFixes #1711", "committedDate": "2020-09-25T10:50:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1Nzg4NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1836#discussion_r494957885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        InputStream stream = Thread.currentThread().getContextClassLoader()\n          \n          \n            \n                                .getResourceAsStream(\"com/rometools/rome/rome.properties\");\n          \n          \n            \n                    try (InputStream stream = Thread.currentThread().getContextClassLoader()\n          \n          \n            \n                                .getResourceAsStream(\"com/rometools/rome/rome.properties\")) {\n          \n      \n    \n    \n  \n\nStreams should be closed. A followup would be enough", "author": "ppalaga", "createdAt": "2020-09-25T12:37:21Z", "path": "extensions/rss/deployment/src/main/java/org/apache/camel/quarkus/component/rss/deployment/RssProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.rss.deployment;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+class RssProcessor {\n+\n+    private static final String FEATURE = \"camel-rss\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem nativeImageResources() {\n+        return new NativeImageResourceBuildItem(\"com/rometools/rome/rome.properties\");\n+    }\n+\n+    @BuildStep\n+    IndexDependencyBuildItem indexDependencies() {\n+        return new IndexDependencyBuildItem(\"com.rometools\", \"rome\");\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        // Register for reflection feed parser / generator classes from rome.properties\n+        try {\n+            InputStream stream = Thread.currentThread().getContextClassLoader()\n+                    .getResourceAsStream(\"com/rometools/rome/rome.properties\");", "originalCommit": "c54879e1dfaed82d5f6345b9f50bb74c817e549c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}