{"pr_number": 1879, "pr_title": "Shiro native support #1844", "pr_createdAt": "2020-10-06T14:34:37Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1879", "timeline": [{"oid": "1905fec46a3a836ba7234c74f625206de9c0e423", "url": "https://github.com/apache/camel-quarkus/commit/1905fec46a3a836ba7234c74f625206de9c0e423", "message": "Shiro native support #1844", "committedDate": "2020-10-06T15:43:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4NjIxNw==", "url": "https://github.com/apache/camel-quarkus/pull/1879#discussion_r500486217", "bodyText": "My understanding is that every user of camel-shiro would need to do that. I wonder if something like ShiroSecurityPolicy working from resource could provide value here.", "author": "aldettinger", "createdAt": "2020-10-06T17:50:35Z", "path": "integration-tests/shiro/src/main/java/org/apache/camel/quarkus/component/shiro/it/ShiroRouteBuilder.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.shiro.it;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.CamelAuthorizationException;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.shiro.security.ShiroSecurityPolicy;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+import org.apache.shiro.authc.LockedAccountException;\n+import org.apache.shiro.authc.UnknownAccountException;\n+import org.apache.shiro.authz.Permission;\n+import org.apache.shiro.authz.permission.WildcardPermission;\n+\n+public class ShiroRouteBuilder extends RouteBuilder {\n+    public static final String DIRECT_SECURE_ENDPOINT = \"direct:secureEndpoint\";\n+    public static final String DIRECT_SECURE_WITH_ROLES = \"direct:secureWithRoles\";\n+    public static final String DIRECT_SECURE_WITH_PERMISSIONS = \"direct:secureWithPermissions\";\n+\n+    @Override\n+    public void configure() throws Exception {\n+        InputStream resource = ShiroRouteBuilder.class.getResourceAsStream(\"/securityConfig.ini\");\n+        byte[] bytes = getContext().getTypeConverter().convertTo(byte[].class, resource);\n+        Files.write(Paths.get(\"target\", \"securityConfig.ini\"), bytes);\n+        String securityConfig = \"target/securityConfig.ini\";", "originalCommit": "1905fec46a3a836ba7234c74f625206de9c0e423", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc3MDAwOA==", "url": "https://github.com/apache/camel-quarkus/pull/1879#discussion_r500770008", "bodyText": "It's a nice idea. I'll try to use resource, which would make this few lines obsolete. In case it would need some small changes in camel-shiro, I'll prepare it also (PR needs to be against camel-master, so it won't cause any problems)", "author": "JiriOndrusek", "createdAt": "2020-10-07T06:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4NjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1NzczMA==", "url": "https://github.com/apache/camel-quarkus/pull/1879#discussion_r500857730", "bodyText": "I've removed unnecessary code, shiro allows to use classpath resources, which works correctly in native", "author": "JiriOndrusek", "createdAt": "2020-10-07T09:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4NjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "3a75f01b0dbfd8bc4dd0ce0b69656b0f030965cf", "chunk": "diff --git a/integration-tests/shiro/src/main/java/org/apache/camel/quarkus/component/shiro/it/ShiroRouteBuilder.java b/integration-tests/shiro/src/main/java/org/apache/camel/quarkus/component/shiro/it/ShiroRouteBuilder.java\ndeleted file mode 100644\nindex b5be67048..000000000\n--- a/integration-tests/shiro/src/main/java/org/apache/camel/quarkus/component/shiro/it/ShiroRouteBuilder.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.component.shiro.it;\n-\n-import java.io.InputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.apache.camel.CamelAuthorizationException;\n-import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.shiro.security.ShiroSecurityPolicy;\n-import org.apache.shiro.authc.AuthenticationException;\n-import org.apache.shiro.authc.IncorrectCredentialsException;\n-import org.apache.shiro.authc.LockedAccountException;\n-import org.apache.shiro.authc.UnknownAccountException;\n-import org.apache.shiro.authz.Permission;\n-import org.apache.shiro.authz.permission.WildcardPermission;\n-\n-public class ShiroRouteBuilder extends RouteBuilder {\n-    public static final String DIRECT_SECURE_ENDPOINT = \"direct:secureEndpoint\";\n-    public static final String DIRECT_SECURE_WITH_ROLES = \"direct:secureWithRoles\";\n-    public static final String DIRECT_SECURE_WITH_PERMISSIONS = \"direct:secureWithPermissions\";\n-\n-    @Override\n-    public void configure() throws Exception {\n-        InputStream resource = ShiroRouteBuilder.class.getResourceAsStream(\"/securityConfig.ini\");\n-        byte[] bytes = getContext().getTypeConverter().convertTo(byte[].class, resource);\n-        Files.write(Paths.get(\"target\", \"securityConfig.ini\"), bytes);\n-        String securityConfig = \"target/securityConfig.ini\";\n-\n-        onException(CamelAuthorizationException.class, UnknownAccountException.class, IncorrectCredentialsException.class,\n-                LockedAccountException.class, AuthenticationException.class).to(\"mock:authenticationException\");\n-        //policy ignores roles or permissions\n-        final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy(securityConfig, ShiroResource.passPhrase);\n-        securityPolicy.setBase64(true);\n-\n-        from(DIRECT_SECURE_ENDPOINT).policy(securityPolicy).to(\"mock:success\");\n-\n-        //policy respects roles\n-        List<String> rolesList = new ArrayList<>();\n-        rolesList.add(\"sec-level2\");\n-        rolesList.add(\"sec-level3\");\n-\n-        final ShiroSecurityPolicy securityPolicyWithRoles = new ShiroSecurityPolicy(securityConfig,\n-                ShiroResource.passPhrase,\n-                true);\n-        securityPolicyWithRoles.setRolesList(rolesList);\n-\n-        from(DIRECT_SECURE_WITH_ROLES).policy(securityPolicyWithRoles).to(\"mock:success\");\n-\n-        //policy respects permissions\n-        List<Permission> permissionsList = Collections.singletonList(new WildcardPermission(\"earth1:writeonly:*\"));\n-\n-        final ShiroSecurityPolicy securityPolicyWithPermissions = new ShiroSecurityPolicy(securityConfig,\n-                ShiroResource.passPhrase, true, permissionsList);\n-\n-        from(DIRECT_SECURE_WITH_PERMISSIONS).policy(securityPolicyWithPermissions).to(\"mock:success\");\n-\n-    }\n-}\n"}}, {"oid": "3a75f01b0dbfd8bc4dd0ce0b69656b0f030965cf", "url": "https://github.com/apache/camel-quarkus/commit/3a75f01b0dbfd8bc4dd0ce0b69656b0f030965cf", "message": "Automatic changes caused by changes in upstream doc.", "committedDate": "2020-10-07T06:45:52Z", "type": "commit"}, {"oid": "028ffd4b409ed58fc1c9a6103599c02cc2e82aad", "url": "https://github.com/apache/camel-quarkus/commit/028ffd4b409ed58fc1c9a6103599c02cc2e82aad", "message": "Shiro native support #1844", "committedDate": "2020-10-07T06:46:23Z", "type": "forcePushed"}, {"oid": "5011f671729aef499005b19fc795971e8056d0e4", "url": "https://github.com/apache/camel-quarkus/commit/5011f671729aef499005b19fc795971e8056d0e4", "message": "Shiro native support #1844", "committedDate": "2020-10-07T08:15:02Z", "type": "forcePushed"}, {"oid": "3c6742da49281dade4d0763cb137e778a85189af", "url": "https://github.com/apache/camel-quarkus/commit/3c6742da49281dade4d0763cb137e778a85189af", "message": "Shiro native support #1844", "committedDate": "2020-10-07T09:09:34Z", "type": "commit"}, {"oid": "3c6742da49281dade4d0763cb137e778a85189af", "url": "https://github.com/apache/camel-quarkus/commit/3c6742da49281dade4d0763cb137e778a85189af", "message": "Shiro native support #1844", "committedDate": "2020-10-07T09:09:34Z", "type": "forcePushed"}]}