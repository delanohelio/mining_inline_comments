{"pr_number": 1715, "pr_title": "Weather native support fixes #1631", "pr_createdAt": "2020-09-07T13:50:01Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1715", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1Mjc4OA==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484452788", "bodyText": "This can be removed as long as we have other proper tests.", "author": "ppalaga", "createdAt": "2020-09-07T14:04:44Z", "path": "integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.weather.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.ConsumerTemplate;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.weather.WeatherConstants;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/weather\")\n+@ApplicationScoped\n+public class WeatherResource {\n+\n+    private static final Logger LOG = Logger.getLogger(WeatherResource.class);\n+\n+    private static final String COMPONENT_WEATHER = \"weather\";\n+    @Inject\n+    CamelContext context;\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n+    @Inject\n+    ConsumerTemplate consumerTemplate;\n+\n+    @Path(\"load/component/weather\")\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response loadComponentWeather() throws Exception {\n+        /* This is an autogenerated test */\n+        if (context.getComponent(COMPONENT_WEATHER) != null) {\n+            return Response.ok().build();\n+        }\n+        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_WEATHER);\n+        return Response.status(500, COMPONENT_WEATHER + \" could not be loaded from the Camel context\").build();\n+    }", "originalCommit": "bcf8ffdb5703de68749a6f4954cb7f9b3147f398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0MzA3Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484743072", "bodyText": "done !!", "author": "zbendhiba", "createdAt": "2020-09-08T08:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1Mjc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "e5f96ab150101669e00a52ee6badac340dbd3106", "chunk": "diff --git a/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java b/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\nindex 5f68010a3..a5fa3bc94 100644\n--- a/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\n+++ b/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\n\n@@ -38,6 +38,9 @@ public class WeatherResource {\n     private static final Logger LOG = Logger.getLogger(WeatherResource.class);\n \n     private static final String COMPONENT_WEATHER = \"weather\";\n+\n+    private static final String APPID = \"9162755b2efa555823cfe0451d7fff38\";\n+\n     @Inject\n     CamelContext context;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MTQwNg==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484461406", "bodyText": "BTW, restassured allows for matching JSON payload attribs against Matchers https://github.com/rest-assured/rest-assured/wiki/Usage#example-1---json It would perhaps suit here too.", "author": "ppalaga", "createdAt": "2020-09-07T14:21:21Z", "path": "integration-tests/weather/src/test/java/org/apache/camel/quarkus/component/weather/it/WeatherTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.weather.it;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+@QuarkusTest\n+class WeatherTest {\n+\n+    @Test\n+    public void loadComponentWeather() {\n+        /* A simple autogenerated test */\n+        RestAssured.get(\"/weather/load/component/weather\")\n+                .then()\n+                .statusCode(200);\n+    }\n+\n+    @Test\n+    public void loadByLocationName() {\n+        RestAssured.given()\n+                .get(\"/weather/location/London,uk\")\n+                .then()\n+                .statusCode(200)\n+                .body(containsString(\"name\\\":\\\"London\\\"\"), containsString(\"\\\"country\\\":\\\"GB\\\"\"), containsString(\"weather\"),", "originalCommit": "bcf8ffdb5703de68749a6f4954cb7f9b3147f398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0MzUwNQ==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484743505", "bodyText": "done!! Thanks!! I've changed that.", "author": "zbendhiba", "createdAt": "2020-09-08T08:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e5f96ab150101669e00a52ee6badac340dbd3106", "chunk": "diff --git a/integration-tests/weather/src/test/java/org/apache/camel/quarkus/component/weather/it/WeatherTest.java b/integration-tests/weather/src/test/java/org/apache/camel/quarkus/component/weather/it/WeatherTest.java\nindex 5238ceb76..f60db187e 100644\n--- a/integration-tests/weather/src/test/java/org/apache/camel/quarkus/component/weather/it/WeatherTest.java\n+++ b/integration-tests/weather/src/test/java/org/apache/camel/quarkus/component/weather/it/WeatherTest.java\n\n@@ -20,29 +20,21 @@ import io.quarkus.test.junit.QuarkusTest;\n import io.restassured.RestAssured;\n import org.junit.jupiter.api.Test;\n \n-import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasKey;\n \n @QuarkusTest\n class WeatherTest {\n \n-    @Test\n-    public void loadComponentWeather() {\n-        /* A simple autogenerated test */\n-        RestAssured.get(\"/weather/load/component/weather\")\n-                .then()\n-                .statusCode(200);\n-    }\n-\n     @Test\n     public void loadByLocationName() {\n         RestAssured.given()\n                 .get(\"/weather/location/London,uk\")\n                 .then()\n                 .statusCode(200)\n-                .body(containsString(\"name\\\":\\\"London\\\"\"), containsString(\"\\\"country\\\":\\\"GB\\\"\"), containsString(\"weather\"),\n-                        containsString(\"temp_min\"),\n-                        containsString(\"temp_max\"));\n-        ;\n+                .body(\"name\", equalTo(\"London\"))\n+                .body(\"sys.country\", equalTo(\"GB\"))\n+                .body(\"main\", hasKey(\"temp\"));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjE3Ng==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484462176", "bodyText": "(As lazy as I am to look myself, sorry) are the constants in appid=9162755b2efa555823cfe0451d7fff38&geolocationAccessKey=test&geolocationRequestHostIP=test really necessary? Aren't those supposed to be secrets?", "author": "ppalaga", "createdAt": "2020-09-07T14:22:51Z", "path": "integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.weather.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.ConsumerTemplate;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.weather.WeatherConstants;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/weather\")\n+@ApplicationScoped\n+public class WeatherResource {\n+\n+    private static final Logger LOG = Logger.getLogger(WeatherResource.class);\n+\n+    private static final String COMPONENT_WEATHER = \"weather\";\n+    @Inject\n+    CamelContext context;\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n+    @Inject\n+    ConsumerTemplate consumerTemplate;\n+\n+    @Path(\"load/component/weather\")\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response loadComponentWeather() throws Exception {\n+        /* This is an autogenerated test */\n+        if (context.getComponent(COMPONENT_WEATHER) != null) {\n+            return Response.ok().build();\n+        }\n+        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_WEATHER);\n+        return Response.status(500, COMPONENT_WEATHER + \" could not be loaded from the Camel context\").build();\n+    }\n+\n+    @Path(\"location/{location}\")\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response getWeatherByLocation(@PathParam(\"location\") String location) {\n+        LOG.infof(\"Retrieve weather with location : %s\", location);\n+        final String response = producerTemplate.requestBodyAndHeader(\n+                \"weather:foo?location=random&appid=9162755b2efa555823cfe0451d7fff38&geolocationAccessKey=test&geolocationRequestHostIP=test\",", "originalCommit": "bcf8ffdb5703de68749a6f4954cb7f9b3147f398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMDg5MQ==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484710891", "bodyText": "Only the appid is mandatory. It doesn't have a label security and it is used in the get URI call for openweather API (https://openweathermap.org/appid). The 2 others are not mandatory, they are used only if we want to determine the current geoLocation. I'll remove them from my REST endpoints.", "author": "zbendhiba", "createdAt": "2020-09-08T07:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc1ODE2Nw==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484758167", "bodyText": "Hm... what appid is that then? Your personal or perhaps copied from Camel? In any case, I think we should consider putting the appid into the application.properties and comment there that it is Camel community's (or whoever else's) testing appid that people should change when copying the code to their apps.", "author": "ppalaga", "createdAt": "2020-09-08T08:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMzcxNQ==", "url": "https://github.com/apache/camel-quarkus/pull/1715#discussion_r484803715", "bodyText": "it was the one from camel integration tests.\ndone !!", "author": "zbendhiba", "createdAt": "2020-09-08T10:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e5f96ab150101669e00a52ee6badac340dbd3106", "chunk": "diff --git a/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java b/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\nindex 5f68010a3..a5fa3bc94 100644\n--- a/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\n+++ b/integration-tests/weather/src/main/java/org/apache/camel/quarkus/component/weather/it/WeatherResource.java\n\n@@ -38,6 +38,9 @@ public class WeatherResource {\n     private static final Logger LOG = Logger.getLogger(WeatherResource.class);\n \n     private static final String COMPONENT_WEATHER = \"weather\";\n+\n+    private static final String APPID = \"9162755b2efa555823cfe0451d7fff38\";\n+\n     @Inject\n     CamelContext context;\n \n"}}, {"oid": "e5f96ab150101669e00a52ee6badac340dbd3106", "url": "https://github.com/apache/camel-quarkus/commit/e5f96ab150101669e00a52ee6badac340dbd3106", "message": "Weather native support fixes #1631", "committedDate": "2020-09-08T08:21:45Z", "type": "forcePushed"}, {"oid": "f99be9bba8ca8bc2f78578f609abe402eec7aeff", "url": "https://github.com/apache/camel-quarkus/commit/f99be9bba8ca8bc2f78578f609abe402eec7aeff", "message": "Weather native support fixes #1631", "committedDate": "2020-09-08T10:03:50Z", "type": "forcePushed"}, {"oid": "8724718177388e6809ad3e450cc1cf268399d822", "url": "https://github.com/apache/camel-quarkus/commit/8724718177388e6809ad3e450cc1cf268399d822", "message": "Weather native support fixes #1631", "committedDate": "2020-09-08T10:06:26Z", "type": "commit"}, {"oid": "8724718177388e6809ad3e450cc1cf268399d822", "url": "https://github.com/apache/camel-quarkus/commit/8724718177388e6809ad3e450cc1cf268399d822", "message": "Weather native support fixes #1631", "committedDate": "2020-09-08T10:06:26Z", "type": "forcePushed"}]}