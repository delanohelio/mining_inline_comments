{"pr_number": 1828, "pr_title": "String template native support #1694", "pr_createdAt": "2020-09-24T12:08:11Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2ODM5MA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494268390", "bodyText": "Maybe we should not do this. See my comments in #1807.", "author": "jamesnetherton", "createdAt": "2020-09-24T12:19:51Z", "path": "extensions/stringtemplate/deployment/src/main/java/org/apache/camel/quarkus/component/stringtemplate/deployment/StringtemplateProcessor.java", "diffHunk": "@@ -17,30 +17,23 @@\n package org.apache.camel.quarkus.component.stringtemplate.deployment;\n \n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.support.DefaultExchange;\n \n class StringtemplateProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(StringtemplateProcessor.class);\n     private static final String FEATURE = \"camel-stringtemplate\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithMethods() {\n+        return new ReflectiveClassBuildItem(true, false,\n+                //required for values in properties\n+                DefaultExchange.class.getName());", "originalCommit": "156b1610f18c74e0d72132cdda1c1c85713e39a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5ODczOA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494298738", "bodyText": "If it may be security vulnerability, I'll remove corresponding test, I'll remove this build item and add into limitations, that this feature is not supported in native mode. @jamesnetherton Do you agree?", "author": "JiriOndrusek", "createdAt": "2020-09-24T13:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2ODM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTc2OA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494309768", "bodyText": "Fine with me \ud83d\udc4d", "author": "jamesnetherton", "createdAt": "2020-09-24T13:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2ODM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDQyMQ==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494844421", "bodyText": "I've fixed it as I suggested. (also discovered a bug in camel component - https://issues.apache.org/jira/browse/CAMEL-15577)", "author": "JiriOndrusek", "createdAt": "2020-09-25T08:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2ODM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0ODU2NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494848565", "bodyText": "Maybe we should not do this. See my comments in #1807.\n\nI thought the same when I saw it, but I was not able to find the place where Claus mentioned that allowContextMapAll is a security vulnerabilty fix. Thanks for mentioning #1807 @jamesnetherton !", "author": "ppalaga", "createdAt": "2020-09-25T08:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2ODM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "2393ad2516408e1de75ac2844bf65035ed364b34", "chunk": "diff --git a/extensions/stringtemplate/deployment/src/main/java/org/apache/camel/quarkus/component/stringtemplate/deployment/StringtemplateProcessor.java b/extensions/stringtemplate/deployment/src/main/java/org/apache/camel/quarkus/component/stringtemplate/deployment/StringtemplateProcessor.java\nindex be1d4b12f..3b1f7d831 100644\n--- a/extensions/stringtemplate/deployment/src/main/java/org/apache/camel/quarkus/component/stringtemplate/deployment/StringtemplateProcessor.java\n+++ b/extensions/stringtemplate/deployment/src/main/java/org/apache/camel/quarkus/component/stringtemplate/deployment/StringtemplateProcessor.java\n\n@@ -18,8 +18,6 @@ package org.apache.camel.quarkus.component.stringtemplate.deployment;\n \n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n-import org.apache.camel.support.DefaultExchange;\n \n class StringtemplateProcessor {\n \n"}}, {"oid": "2393ad2516408e1de75ac2844bf65035ed364b34", "url": "https://github.com/apache/camel-quarkus/commit/2393ad2516408e1de75ac2844bf65035ed364b34", "message": "String template native support #1694", "committedDate": "2020-09-25T08:47:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494844792", "bodyText": "I've added test for native to verify that parameter allowContextMapAll is disabled.\nBut because there are usually no special tests for native mode, I'd like to ask. @jamesnetherton , @ppalaga   Should I keep it or remove it?", "author": "JiriOndrusek", "createdAt": "2020-09-25T08:52:53Z", "path": "integration-tests/stringtemplate/src/test/java/org/apache/camel/quarkus/component/stringtemplate/it/StringtemplateIT.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.stringtemplate.it;\n+\n+import java.util.Collections;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+@NativeImageTest\n+class StringtemplateIT extends StringtemplateTest {\n+\n+    @Test\n+    public void testDisabledContextMapAll() {\n+        //allowContextMapAll has to be disabled in native mode\n+        RestAssured.given()", "originalCommit": "2393ad2516408e1de75ac2844bf65035ed364b34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NzE3OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494847179", "bodyText": "No problem with having a special test for native. We definitely had such in the past, not sure we still have them elsewhere.", "author": "ppalaga", "createdAt": "2020-09-25T08:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1NDQ5OA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494854498", "bodyText": "We should agree on whether this is the right thing to do.\nOriginally, I saw the 'fix' to #1807 as purely a documentation exercise. Where we just state for each affected extension that contextMapAll = true will not work in native mode.\nPotentially forcing contextMapAll to false is a bit confusing because you would run into problems at runtime. Where as without it, the native build would fail, so it's sort like a 'fail fast'.", "author": "jamesnetherton", "createdAt": "2020-09-25T09:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1OTIxNg==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494859216", "bodyText": "So, removing substitution (which forcescontextMapAll = true), rewriting limitations (that exchange.properties won't work) and removing test, should be the correct solution, yes?", "author": "JiriOndrusek", "createdAt": "2020-09-25T09:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MDk0OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494860949", "bodyText": "IMO, yes. @ppalaga WDYT?", "author": "jamesnetherton", "createdAt": "2020-09-25T09:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MzkwMA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494863900", "bodyText": "I think about documentation like this one:\n\nIf property allowContextMapAll is set to true there is a limitation in native mode. Reflective calls to methods\nof several classes in camel are not allowed (for example org.apache.camel.support.DefaultExchange). Therefore\nsome expression won't work (for example `<exchange.properties.*>).\nYou can allow reflective calls to such classes (for example by application.properties), but keep in mind that it brings\nsome security risks.\n\nWDYT? @ppalaga , @jamesnetherton", "author": "JiriOndrusek", "createdAt": "2020-09-25T09:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NTkyNw==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494875927", "bodyText": "+1 for removing the substitution and letting the native compilation fail", "author": "ppalaga", "createdAt": "2020-09-25T09:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3ODEzMA==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494878130", "bodyText": "Sounds ok to me. Maybe tweak some expression to some expressions.", "author": "jamesnetherton", "createdAt": "2020-09-25T09:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MzQ1Nw==", "url": "https://github.com/apache/camel-quarkus/pull/1828#discussion_r494893457", "bodyText": "done", "author": "JiriOndrusek", "createdAt": "2020-09-25T10:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NDc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "968d0b9adefd43a5486243590d48a21d2e9630e0", "chunk": "diff --git a/integration-tests/stringtemplate/src/test/java/org/apache/camel/quarkus/component/stringtemplate/it/StringtemplateIT.java b/integration-tests/stringtemplate/src/test/java/org/apache/camel/quarkus/component/stringtemplate/it/StringtemplateIT.java\nindex c4fa88c55..485390b98 100644\n--- a/integration-tests/stringtemplate/src/test/java/org/apache/camel/quarkus/component/stringtemplate/it/StringtemplateIT.java\n+++ b/integration-tests/stringtemplate/src/test/java/org/apache/camel/quarkus/component/stringtemplate/it/StringtemplateIT.java\n\n@@ -16,32 +16,9 @@\n  */\n package org.apache.camel.quarkus.component.stringtemplate.it;\n \n-import java.util.Collections;\n-\n import io.quarkus.test.junit.NativeImageTest;\n-import io.restassured.RestAssured;\n-import io.restassured.http.ContentType;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n \n @NativeImageTest\n class StringtemplateIT extends StringtemplateTest {\n \n-    @Test\n-    public void testDisabledContextMapAll() {\n-        //allowContextMapAll has to be disabled in native mode\n-        RestAssured.given()\n-                .queryParam(\"body\", \"\")\n-                .queryParam(\"template\", \"//template/allowContextMapAll.tm\")\n-                .queryParam(\"parameters\", \"allowContextMapAll=true\")\n-                .contentType(ContentType.JSON)\n-                .body(Collections.emptyMap())\n-                .post(\"/stringtemplate/template\")\n-                .then()\n-                .statusCode(201)\n-                .body(containsString(\n-                        \"Exchange is .\"));\n-    }\n-\n }\n"}}, {"oid": "bd845d3959984d575441d3e79cd9a58095b6aa34", "url": "https://github.com/apache/camel-quarkus/commit/bd845d3959984d575441d3e79cd9a58095b6aa34", "message": "String template native support #1694", "committedDate": "2020-09-25T09:00:15Z", "type": "forcePushed"}, {"oid": "968d0b9adefd43a5486243590d48a21d2e9630e0", "url": "https://github.com/apache/camel-quarkus/commit/968d0b9adefd43a5486243590d48a21d2e9630e0", "message": "String template native support #1694", "committedDate": "2020-09-25T10:19:18Z", "type": "forcePushed"}, {"oid": "e33ffef7483b8ca2240f9eb195145f110e6811ac", "url": "https://github.com/apache/camel-quarkus/commit/e33ffef7483b8ca2240f9eb195145f110e6811ac", "message": "String template native support #1694", "committedDate": "2020-09-25T13:38:39Z", "type": "forcePushed"}, {"oid": "38e459181d2079a8f356b8b9c42943fb62da6904", "url": "https://github.com/apache/camel-quarkus/commit/38e459181d2079a8f356b8b9c42943fb62da6904", "message": "String template native support #1694", "committedDate": "2020-09-29T08:55:59Z", "type": "commit"}, {"oid": "38e459181d2079a8f356b8b9c42943fb62da6904", "url": "https://github.com/apache/camel-quarkus/commit/38e459181d2079a8f356b8b9c42943fb62da6904", "message": "String template native support #1694", "committedDate": "2020-09-29T08:55:59Z", "type": "forcePushed"}]}