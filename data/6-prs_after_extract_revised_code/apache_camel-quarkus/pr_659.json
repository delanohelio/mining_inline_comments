{"pr_number": 659, "pr_title": "Create a Camel ReactiveStreams extension (initial implementation)", "pr_createdAt": "2020-01-23T11:05:53Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/659", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Njk4Mg==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370086982", "bodyText": "Is this really necessary? If so we'll need to whitelist in https://github.com/apache/camel-quarkus/pull/647/files/36102f2f069a3e3ad9aa27255b2c6b6f80d78b70#diff-87b8f9583824da15e8833362367682ecR79", "author": "ppalaga", "createdAt": "2020-01-23T12:22:48Z", "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));", "originalCommit": "08760814a9f079adbf0149df07fec15c54ba1b7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMTEwOA==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370101108", "bodyText": "It probably not, I'll check but I really dislike the idea to have to make changes to core in order to register something an extension eventually need", "author": "lburgazzoli", "createdAt": "2020-01-23T12:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Njk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "chunk": "diff --git a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\nindex 17c6e34cd..e5de2a4cf 100644\n--- a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n+++ b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n\n@@ -24,7 +24,6 @@ import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Overridable;\n import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n import org.apache.camel.quarkus.core.Flags;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MDg2NQ==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370090865", "bodyText": "Why optional? Are there alternative implementations already now (or planned in near future)? Are we not unnecessarily overcomplicating it?", "author": "ppalaga", "createdAt": "2020-01-23T12:32:28Z", "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));\n+    }\n+\n+    @BuildStep(onlyIf = Flags.MainEnabled.class)\n+    void beans(BuildProducer<AdditionalBeanBuildItem> beanProducer) {\n+        beanProducer.produce(AdditionalBeanBuildItem.unremovableOf(ReactiveStreamsProducers.class));\n+    }\n+\n+    @Overridable\n+    @BuildStep\n+    @Record(value = ExecutionTime.STATIC_INIT, optional = true)\n+    public ReactiveStreamsServiceFactoryBuildItem defaultReactiveStreamsServiceFactory(", "originalCommit": "08760814a9f079adbf0149df07fec15c54ba1b7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5OTU5Mg==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370099592", "bodyText": "yes there are some additional implementations I''d like to make later on, please have a look about how camel-reactive-extension works.", "author": "lburgazzoli", "createdAt": "2020-01-23T12:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MDg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "chunk": "diff --git a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\nindex 17c6e34cd..e5de2a4cf 100644\n--- a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n+++ b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n\n@@ -24,7 +24,6 @@ import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Overridable;\n import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n import org.apache.camel.quarkus.core.Flags;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MTM4Mg==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370091382", "bodyText": "Injectable beans should be documented.", "author": "ppalaga", "createdAt": "2020-01-23T12:33:40Z", "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));\n+    }\n+\n+    @BuildStep(onlyIf = Flags.MainEnabled.class)\n+    void beans(BuildProducer<AdditionalBeanBuildItem> beanProducer) {\n+        beanProducer.produce(AdditionalBeanBuildItem.unremovableOf(ReactiveStreamsProducers.class));", "originalCommit": "08760814a9f079adbf0149df07fec15c54ba1b7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "chunk": "diff --git a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\nindex 17c6e34cd..e5de2a4cf 100644\n--- a/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n+++ b/extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java\n\n@@ -24,7 +24,6 @@ import io.quarkus.deployment.annotations.ExecutionTime;\n import io.quarkus.deployment.annotations.Overridable;\n import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n import org.apache.camel.quarkus.core.Flags;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MjMxMA==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370092310", "bodyText": "Could the class be static maybe?", "author": "ppalaga", "createdAt": "2020-01-23T12:35:50Z", "path": "extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsServiceFactory;\n+import org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsServiceFactory;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+@Recorder\n+public class ReactiveStreamsRecorder {\n+    public RuntimeValue<CamelReactiveStreamsServiceFactory> createDefaultReactiveStreamsServiceFactory() {\n+        return new RuntimeValue<>(new DefaultCamelReactiveStreamsServiceFactory());\n+    }\n+\n+    public RuntimeValue<ReactiveStreamsComponent> createReactiveStreamsComponent(\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+        return new RuntimeValue<>(new QuarkusReactiveStreamsComponent(serviceFactory.getValue()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void publishCamelReactiveStreamsService(\n+            BeanContainer beanContainer,\n+            RuntimeValue<CamelContext> camelContext,\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+\n+        // register to the container\n+        beanContainer.instance(ReactiveStreamsProducers.class).init(\n+                camelContext.getValue(),\n+                serviceFactory.getValue());\n+    }\n+\n+    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {", "originalCommit": "08760814a9f079adbf0149df07fec15c54ba1b7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "chunk": "diff --git a/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java b/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\nindex ea6b1a0ee..2e731d39b 100644\n--- a/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\n+++ b/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\n\n@@ -50,26 +50,30 @@ public class ReactiveStreamsRecorder {\n                 serviceFactory.getValue());\n     }\n \n-    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n+    private static class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n         private final CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory;\n+        private final Object lock;\n         private CamelReactiveStreamsService reactiveStreamService;\n \n         public QuarkusReactiveStreamsComponent(CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory) {\n             this.reactiveStreamServiceFactory = reactiveStreamServiceFactory;\n+            this.lock = new Object();\n         }\n \n         @Override\n-        public synchronized CamelReactiveStreamsService getReactiveStreamsService() {\n-            if (reactiveStreamService == null) {\n-                this.reactiveStreamService = reactiveStreamServiceFactory.newInstance(\n-                        getCamelContext(),\n-                        getInternalEngineConfiguration());\n+        public CamelReactiveStreamsService getReactiveStreamsService() {\n+            synchronized (this.lock) {\n+                if (reactiveStreamService == null) {\n+                    this.reactiveStreamService = reactiveStreamServiceFactory.newInstance(\n+                            getCamelContext(),\n+                            getInternalEngineConfiguration());\n \n-                try {\n-                    // Start the service and add it to the Camel context to expose managed attributes\n-                    getCamelContext().addService(this.reactiveStreamService, true, true);\n-                } catch (Exception e) {\n-                    throw new RuntimeCamelException(e);\n+                    try {\n+                        // Start the service and add it to the Camel context to expose managed attributes\n+                        getCamelContext().addService(this.reactiveStreamService, true, true);\n+                    } catch (Exception e) {\n+                        throw new RuntimeCamelException(e);\n+                    }\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NTI5NA==", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370095294", "bodyText": "It could perhaps be made less deadlock-prone using synchronize(this.lock) (the lock being from ServiceSupport)?", "author": "ppalaga", "createdAt": "2020-01-23T12:43:02Z", "path": "extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsServiceFactory;\n+import org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsServiceFactory;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+@Recorder\n+public class ReactiveStreamsRecorder {\n+    public RuntimeValue<CamelReactiveStreamsServiceFactory> createDefaultReactiveStreamsServiceFactory() {\n+        return new RuntimeValue<>(new DefaultCamelReactiveStreamsServiceFactory());\n+    }\n+\n+    public RuntimeValue<ReactiveStreamsComponent> createReactiveStreamsComponent(\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+        return new RuntimeValue<>(new QuarkusReactiveStreamsComponent(serviceFactory.getValue()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void publishCamelReactiveStreamsService(\n+            BeanContainer beanContainer,\n+            RuntimeValue<CamelContext> camelContext,\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+\n+        // register to the container\n+        beanContainer.instance(ReactiveStreamsProducers.class).init(\n+                camelContext.getValue(),\n+                serviceFactory.getValue());\n+    }\n+\n+    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n+        private final CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory;\n+        private CamelReactiveStreamsService reactiveStreamService;\n+\n+        public QuarkusReactiveStreamsComponent(CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory) {\n+            this.reactiveStreamServiceFactory = reactiveStreamServiceFactory;\n+        }\n+\n+        @Override\n+        public synchronized CamelReactiveStreamsService getReactiveStreamsService() {", "originalCommit": "08760814a9f079adbf0149df07fec15c54ba1b7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "chunk": "diff --git a/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java b/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\nindex ea6b1a0ee..2e731d39b 100644\n--- a/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\n+++ b/extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java\n\n@@ -50,26 +50,30 @@ public class ReactiveStreamsRecorder {\n                 serviceFactory.getValue());\n     }\n \n-    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n+    private static class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n         private final CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory;\n+        private final Object lock;\n         private CamelReactiveStreamsService reactiveStreamService;\n \n         public QuarkusReactiveStreamsComponent(CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory) {\n             this.reactiveStreamServiceFactory = reactiveStreamServiceFactory;\n+            this.lock = new Object();\n         }\n \n         @Override\n-        public synchronized CamelReactiveStreamsService getReactiveStreamsService() {\n-            if (reactiveStreamService == null) {\n-                this.reactiveStreamService = reactiveStreamServiceFactory.newInstance(\n-                        getCamelContext(),\n-                        getInternalEngineConfiguration());\n+        public CamelReactiveStreamsService getReactiveStreamsService() {\n+            synchronized (this.lock) {\n+                if (reactiveStreamService == null) {\n+                    this.reactiveStreamService = reactiveStreamServiceFactory.newInstance(\n+                            getCamelContext(),\n+                            getInternalEngineConfiguration());\n \n-                try {\n-                    // Start the service and add it to the Camel context to expose managed attributes\n-                    getCamelContext().addService(this.reactiveStreamService, true, true);\n-                } catch (Exception e) {\n-                    throw new RuntimeCamelException(e);\n+                    try {\n+                        // Start the service and add it to the Camel context to expose managed attributes\n+                        getCamelContext().addService(this.reactiveStreamService, true, true);\n+                    } catch (Exception e) {\n+                        throw new RuntimeCamelException(e);\n+                    }\n                 }\n             }\n \n"}}, {"oid": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "url": "https://github.com/apache/camel-quarkus/commit/16f831dc410cecd135644a5f4b7dcf7468a9f651", "message": "Create a Camel ReactiveStreams extension #304", "committedDate": "2020-01-23T13:44:16Z", "type": "forcePushed"}, {"oid": "9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "url": "https://github.com/apache/camel-quarkus/commit/9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "message": "Create a Camel ReactiveStreams extension #304", "committedDate": "2020-01-23T13:49:50Z", "type": "commit"}, {"oid": "9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "url": "https://github.com/apache/camel-quarkus/commit/9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "message": "Create a Camel ReactiveStreams extension #304", "committedDate": "2020-01-23T13:49:50Z", "type": "forcePushed"}]}