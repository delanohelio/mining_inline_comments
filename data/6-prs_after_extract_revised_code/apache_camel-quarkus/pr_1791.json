{"pr_number": 1791, "pr_title": "Disruptor native support", "pr_createdAt": "2020-09-15T08:21:22Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1791", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4NDA1OA==", "url": "https://github.com/apache/camel-quarkus/pull/1791#discussion_r488484058", "bodyText": "I appreciate the comment!", "author": "ppalaga", "createdAt": "2020-09-15T08:29:43Z", "path": "extensions/disruptor/deployment/src/main/java/org/apache/camel/quarkus/component/disruptor/deployment/DisruptorProcessor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.disruptor.deployment;\n+\n+import com.lmax.disruptor.BlockingWaitStrategy;\n+import com.lmax.disruptor.BusySpinWaitStrategy;\n+import com.lmax.disruptor.SleepingWaitStrategy;\n+import com.lmax.disruptor.YieldingWaitStrategy;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelServiceFilterBuildItem;\n+\n+class DisruptorProcessor {\n+    private static final String FEATURE = \"camel-disruptor\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem excludeDisruptorVM() {\n+        // The disruptor-vm provide support for communication across CamelContext instances but\n+        // since camel-quarkus support a single CamelContext, the component does not make sense.\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(\"disruptor-vm\"));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem reflectiveClasses(CombinedIndexBuildItem index) {\n+        // Note: this should be kept in sink with org.apache.camel.component.disruptor.DisruptorWaitStrategy\n+        return new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                BlockingWaitStrategy.class,\n+                SleepingWaitStrategy.class,\n+                BusySpinWaitStrategy.class,\n+                YieldingWaitStrategy.class);\n+    }\n+\n+    @BuildStep\n+    RuntimeReinitializedClassBuildItem reinitializedRingBufferFields() {\n+        // The `com.lmax.disruptor.RingBufferFields` class uses sun.misc.Unsafe behind the scenes to compute some static\n+        // fields and that confuses graalvm which emits warnings like:\n+        //\n+        //   Warning: RecomputeFieldValue.ArrayBaseOffset automatic substitution failed. The automatic substitution\n+        //   registration was attempted because a call to jdk.internal.misc.Unsafe.arrayBaseOffset(Class) was detected\n+        //   in the static initializer of com.lmax.disruptor.RingBufferFields. Detailed failure reason(s): Could not\n+        //   determine the field where the value produced by the call to jdk.internal.misc.Unsafe.arrayBaseOffset(Class)\n+        //   for the array base offset computation is stored. The call is not directly followed by a field store or by\n+        //   a sign extend node followed directly by a field store.\n+        //\n+        // Even if this is reported as a warning and the native compilation succeed, some static field are not computed\n+        // properly which result in weird result as runtime. For such reason, the static init method need to re-run at\n+        // runtime.", "originalCommit": "21e8ff0757e957834628d9edbefdf413033c5046", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2a482308981e75d96352c38151ece260a2f5215f", "url": "https://github.com/apache/camel-quarkus/commit/2a482308981e75d96352c38151ece260a2f5215f", "message": "Disruptor native support #1597", "committedDate": "2020-09-15T09:02:49Z", "type": "commit"}, {"oid": "2a482308981e75d96352c38151ece260a2f5215f", "url": "https://github.com/apache/camel-quarkus/commit/2a482308981e75d96352c38151ece260a2f5215f", "message": "Disruptor native support #1597", "committedDate": "2020-09-15T09:02:49Z", "type": "forcePushed"}]}