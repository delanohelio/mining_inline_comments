{"pr_number": 597, "pr_title": "Create a camel-http extension", "pr_createdAt": "2020-01-05T23:07:17Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/597", "timeline": [{"oid": "91022cdb675f48790abe81e73c0451c161797130", "url": "https://github.com/apache/camel-quarkus/commit/91022cdb675f48790abe81e73c0451c161797130", "message": "Create a camel-http extension #596", "committedDate": "2020-01-05T23:11:13Z", "type": "forcePushed"}, {"oid": "ef402b1894d3890c044668b5dc40d6341496bb9e", "url": "https://github.com/apache/camel-quarkus/commit/ef402b1894d3890c044668b5dc40d6341496bb9e", "message": "Create a camel-http extension #596", "committedDate": "2020-01-05T23:12:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODA4Mg==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363188082", "bodyText": "Would not HttpClientProcessor be a better place for this?\nBTW, if we auto-enable SSL, should we not auto-enable NativeImageEnableAllCharsetsBuildItem too? (I assume the HTTP client offers the option to decode the response body using the encoding (which can be any encoding) sent by the server)", "author": "ppalaga", "createdAt": "2020-01-06T07:51:21Z", "path": "extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.http.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+class HttpProcessor {\n+    public static final String FEATURE = \"camel-http\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n+        return new ExtensionSslNativeSupportBuildItem(FEATURE);", "originalCommit": "ef402b1894d3890c044668b5dc40d6341496bb9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIxNzYzMw==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363217633", "bodyText": "Would not HttpClientProcessor be a better place for this?\n\nthink it is the component that has the option to use ssl or not so I think the support extension should not impose to bring ssl into the game\n\nBTW, if we auto-enable SSL, should we not auto-enable NativeImageEnableAllCharsetsBuildItem too? (I assume the HTTP client offers the option to decode the response body using the encoding (which can be any encoding) sent by the server)\n\nThis may be a separate issue as we may have other extensions affected, minding opening an additional issue ?", "author": "lburgazzoli", "createdAt": "2020-01-06T09:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIxOTczNA==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363219734", "bodyText": "I think it is the component that has the option to use ssl or not\n\n(Thinking loud, not imposing any particular view) That would certainly be OK, if we were likely to have components using http client that would not need HTTPS. Are we really likely to have HTTP-client-dependent components not needing HTTPS?\nAsking also because the AHC has it in support module and it would perhaps be practical to do it similarly for both. (I am not implying which of the two needs to be fixed)", "author": "ppalaga", "createdAt": "2020-01-06T09:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyMTcxMw==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363221713", "bodyText": "probably not but I think support extension should in general not force specific behaviours.\nI think one of the goal of such support extension is to be moved at quarkus soon or later so I'd go for do the bare minimum.", "author": "lburgazzoli", "createdAt": "2020-01-06T09:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyNTc1Mw==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363225753", "bodyText": "Created #599", "author": "ppalaga", "createdAt": "2020-01-06T09:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a28ec14f8220aa2028cec98cefec888ff25a2c1b", "chunk": "diff --git a/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java b/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java\ndeleted file mode 100644\nindex 7ce395114..000000000\n--- a/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.component.http.deployment;\n-\n-import io.quarkus.deployment.annotations.BuildProducer;\n-import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n-import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n-\n-class HttpProcessor {\n-    public static final String FEATURE = \"camel-http\";\n-\n-    @BuildStep\n-    FeatureBuildItem feature() {\n-        return new FeatureBuildItem(FEATURE);\n-    }\n-\n-    @BuildStep\n-    ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n-        return new ExtensionSslNativeSupportBuildItem(FEATURE);\n-    }\n-\n-    @BuildStep\n-    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n-        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, \"org.apache.camel.component.http.HttpMethods\"));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODEzOQ==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363188139", "bodyText": "Would not HttpClientProcessor be a better place for this?", "author": "ppalaga", "createdAt": "2020-01-06T07:51:32Z", "path": "extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.http.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+class HttpProcessor {\n+    public static final String FEATURE = \"camel-http\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n+        return new ExtensionSslNativeSupportBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, \"org.apache.camel.component.http.HttpMethods\"));", "originalCommit": "ef402b1894d3890c044668b5dc40d6341496bb9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIxMjc4Nw==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363212787", "bodyText": "it is an Apache Camel class", "author": "lburgazzoli", "createdAt": "2020-01-06T09:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIxNjcxMw==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363216713", "bodyText": "Lets see if we can avoid this reflection code in camel: https://issues.apache.org/jira/browse/CAMEL-14361", "author": "davsclaus", "createdAt": "2020-01-06T09:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzIyMDAxMA==", "url": "https://github.com/apache/camel-quarkus/pull/597#discussion_r363220010", "bodyText": "it is an Apache Camel class\n\nI am blind, sorry.", "author": "ppalaga", "createdAt": "2020-01-06T09:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4ODEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a28ec14f8220aa2028cec98cefec888ff25a2c1b", "chunk": "diff --git a/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java b/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java\ndeleted file mode 100644\nindex 7ce395114..000000000\n--- a/extensions/http/deployment/src/main/java/org/apache/camel/quarkus/component/http/deployment/HttpProcessor.java\n+++ /dev/null\n\n@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.component.http.deployment;\n-\n-import io.quarkus.deployment.annotations.BuildProducer;\n-import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n-import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n-\n-class HttpProcessor {\n-    public static final String FEATURE = \"camel-http\";\n-\n-    @BuildStep\n-    FeatureBuildItem feature() {\n-        return new FeatureBuildItem(FEATURE);\n-    }\n-\n-    @BuildStep\n-    ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n-        return new ExtensionSslNativeSupportBuildItem(FEATURE);\n-    }\n-\n-    @BuildStep\n-    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n-        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, \"org.apache.camel.component.http.HttpMethods\"));\n-    }\n-}\n"}}, {"oid": "a28ec14f8220aa2028cec98cefec888ff25a2c1b", "url": "https://github.com/apache/camel-quarkus/commit/a28ec14f8220aa2028cec98cefec888ff25a2c1b", "message": "Add IntelliJ IDEA's lsp output dir to gitignore", "committedDate": "2020-01-06T10:07:52Z", "type": "commit"}, {"oid": "759bddb8a483857ee956570a0442941b89b79cf1", "url": "https://github.com/apache/camel-quarkus/commit/759bddb8a483857ee956570a0442941b89b79cf1", "message": "Create a camel-http extension #596", "committedDate": "2020-01-06T10:07:52Z", "type": "commit"}, {"oid": "759bddb8a483857ee956570a0442941b89b79cf1", "url": "https://github.com/apache/camel-quarkus/commit/759bddb8a483857ee956570a0442941b89b79cf1", "message": "Create a camel-http extension #596", "committedDate": "2020-01-06T10:07:52Z", "type": "forcePushed"}]}