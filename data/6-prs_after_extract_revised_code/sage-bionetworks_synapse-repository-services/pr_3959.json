{"pr_number": 3959, "pr_title": "R298 plfm 6108", "pr_createdAt": "2020-03-03T03:00:43Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959", "timeline": [{"oid": "c575bad530c08d6e2204a41a9891930659f37ff7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c575bad530c08d6e2204a41a9891930659f37ff7", "message": "DTOs", "committedDate": "2020-03-02T20:14:19Z", "type": "commit"}, {"oid": "acbea62925e0f44c1f08af318db51ed0ffba2aba", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/acbea62925e0f44c1f08af318db51ed0ffba2aba", "message": "Forgot to remove", "committedDate": "2020-03-02T20:51:43Z", "type": "commit"}, {"oid": "c7688d7d71918c55f12bcceed5029c105e54bfdb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c7688d7d71918c55f12bcceed5029c105e54bfdb", "message": "JUnit", "committedDate": "2020-03-02T23:57:33Z", "type": "commit"}, {"oid": "445c530bbc52d48c41ca538fa156baf282fae5fa", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/445c530bbc52d48c41ca538fa156baf282fae5fa", "message": "More JUnit5", "committedDate": "2020-03-03T02:15:51Z", "type": "commit"}, {"oid": "9052a34dd95e8411d64893fa8b6e82f49cd975d4", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9052a34dd95e8411d64893fa8b6e82f49cd975d4", "message": "Cleanup", "committedDate": "2020-03-03T02:56:33Z", "type": "commit"}, {"oid": "5360bedc8839c53d5cf30498a25490716830aef7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/5360bedc8839c53d5cf30498a25490716830aef7", "message": "Merge branch 'release-300' into r298-plfm-6108", "committedDate": "2020-03-03T02:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzOTE3Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387239176", "bodyText": "toJSONObject.\nWe could create a dedicated mapper for the json structure that JIRA expects.", "author": "marcomarasca", "createdAt": "2020-03-03T19:20:33Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/BasicIssue.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.sagebionetworks.repo.util.jrjc;\n+\n+import org.json.simple.JSONObject;\n+\n+import java.util.Map;\n+\n+public class BasicIssue {\n+    private String summary;\n+    private String projectId;\n+    private Long issueTypeId;\n+    private Map<String, String> customFields;\n+\n+    public String getSummary() {\n+        return summary;\n+    }\n+\n+    public void setSummary(String summary) {\n+        this.summary = summary;\n+    }\n+\n+    public String getProjectId() {\n+        return projectId;\n+    }\n+\n+    public void setProjectId(String projectId) {\n+        this.projectId = projectId;\n+    }\n+\n+    public Long getIssueTypeId() {\n+        return issueTypeId;\n+    }\n+\n+    public void setIssueTypeId(Long issueTypeId) {\n+        this.issueTypeId = issueTypeId;\n+    }\n+\n+    public Map<String, String> getCustomFields() {\n+        return customFields;\n+    }\n+\n+    public void setCustomFields(Map<String, String> customFields) {\n+        this.customFields = customFields;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((summary == null) ? 0 : summary.hashCode());\n+        result = prime * result + ((projectId == null) ? 0 : projectId.hashCode());\n+        result = prime * result + ((issueTypeId == null) ? 0 : issueTypeId.hashCode());\n+        result = prime * result + ((customFields == null) ? 0 : customFields.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        BasicIssue other = (BasicIssue) obj;\n+        if (summary == null) {\n+            if (other.summary != null)\n+                return false;\n+        } else if (!summary.equals(other.summary))\n+            return false;\n+        if (projectId == null) {\n+            if (other.projectId != null)\n+                return false;\n+        } else if (!projectId.equals(other.projectId))\n+            return false;\n+        if (issueTypeId == null) {\n+            if (other.issueTypeId != null)\n+                return false;\n+        } else if (!issueTypeId.equals(other.issueTypeId))\n+            return false;\n+        if (customFields == null) {\n+            if (other.customFields != null)\n+                return false;\n+        } else if (!customFields.equals(other.customFields))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BasicIssue [summary=\" + summary + \", issueTypeId=\" + issueTypeId\n+            + \", projectId=\" + projectId + \", fields=\" + customFields + \"]\";\n+    }\n+\n+    public JSONObject toJONObject() {", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/BasicIssue.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/BasicIssue.java\nindex 09c1fa10ff..4580e67edc 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/BasicIssue.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/BasicIssue.java\n\n@@ -91,22 +91,6 @@ public class BasicIssue {\n             + \", projectId=\" + projectId + \", fields=\" + customFields + \"]\";\n     }\n \n-    public JSONObject toJONObject() {\n-        JSONObject issue = new JSONObject();\n-        JSONObject issueFields = new JSONObject();\n-        issueFields.put(\"summary\", this.summary);\n-        JSONObject o = new JSONObject();\n-        o.put(\"id\", this.projectId);\n-        issueFields.put(\"project\", o);\n-        o = new JSONObject();\n-        o.put(\"id\", this.issueTypeId);\n-        issueFields.put(\"issuetype\", o);\n-        if (customFields != null && !customFields.keySet().isEmpty()) {\n-            for (String k: customFields.keySet()) {\n-                issueFields.put(k, this.customFields.get(k));\n-            }\n-        }\n-        issue.put(\"fields\", issueFields);\n-        return issue;\n-    }\n }\n+\n+\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MjI5NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387242294", "bodyText": "Cast to string can be removed", "author": "marcomarasca", "createdAt": "2020-03-03T19:26:20Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java", "diffHunk": "@@ -21,17 +21,17 @@ public static String createFlagIssue(JiraClient jiraClient, String principalId,\n         params.put(JIRA_PRINCIPAL_ID_ISSUE_FIELD_NAME, principalId);\n         params.put(JIRA_USER_DISPLAY_NAME_ISSUE_FIELD_NAME, displayName);\n         params.put(JIRA_SYNAPSE_ENTITY_ID_FIELD_NAME, dataObjectId);\n-        JSONObject createdIssue = createIssue(jiraClient, JIRA_FLAG_ISSUE_TYPE_NAME, FLAG_SUMMARY, params);\n-\t\treturn (String) createdIssue.get(\"key\");\n+        CreatedIssue createdIssue = createIssue(jiraClient, JIRA_FLAG_ISSUE_TYPE_NAME, FLAG_SUMMARY, params);\n+\t\treturn (String) createdIssue.getKey();", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\nindex 4daf7147e8..1493b8bc55 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\n\n@@ -22,7 +22,7 @@ public class JRJCHelper {\n         params.put(JIRA_USER_DISPLAY_NAME_ISSUE_FIELD_NAME, displayName);\n         params.put(JIRA_SYNAPSE_ENTITY_ID_FIELD_NAME, dataObjectId);\n         CreatedIssue createdIssue = createIssue(jiraClient, JIRA_FLAG_ISSUE_TYPE_NAME, FLAG_SUMMARY, params);\n-\t\treturn (String) createdIssue.getKey();\n+\t\treturn createdIssue.getKey();\n \t}\n \t\n \tpublic static String createRestrictIssue(JiraClient jiraClient, String principalId, String displayName, String dataObjectId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NTcxNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387245714", "bodyText": "This could be null, we should probably handle this if the JIRA api changes again", "author": "marcomarasca", "createdAt": "2020-03-03T19:32:37Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java", "diffHunk": "@@ -41,28 +41,28 @@ public static String createRestrictIssue(JiraClient jiraClient, String principal\n \t * @param params a map from field names to field values\n \t * @return\n \t */\n-\tpublic static JSONObject createIssue(JiraClient jiraClient, String issueTypeName, String summary, Map<String,String> params) {\n-\t\tJSONObject projectInfo = jiraClient.getProjectInfo(JIRA_PROJECT_KEY, issueTypeName);\n-\t\tString projectId = (String) projectInfo.get(\"id\");\n-\t\tLong issueTypeId = (Long) projectInfo.get(\"issueTypeId\");\n-\n+\tpublic static CreatedIssue createIssue(JiraClient jiraClient, String issueTypeName, String summary, Map<String,String> params) {\n+\t\tProjectInfo projectInfo = jiraClient.getProjectInfo(JIRA_PROJECT_KEY, issueTypeName);\n+\t\tString projectId = projectInfo.getProjectId();\n+\t\tLong issueTypeId = projectInfo.getIssueTypeId();\n \t\tMap<String, String> fieldsMap = jiraClient.getFields();\n-\t\tJSONObject issue = new JSONObject();\n-\t\tJSONObject issueFields = new JSONObject();\n-\t\tJSONObject o = new JSONObject();\n-\t\tissueFields.put(\"summary\", summary);\n-\t\to = new JSONObject();\n-\t\to.put(\"id\", projectId);\n-\t\tissueFields.put(\"project\", o);\n-\t\to = new JSONObject();\n-\t\to.put(\"id\", issueTypeId);\n-\t\tissueFields.put(\"issuetype\", o);\n+\n+\t\tBasicIssue basicIssue = new BasicIssue();\n+\t\tbasicIssue.setProjectId(projectId);\n+\t\tbasicIssue.setIssueTypeId(issueTypeId);\n+\t\tbasicIssue.setSummary(summary);\n+\t\tbasicIssue.setCustomFields(mapParams(fieldsMap, params));\n+\n+\t\tCreatedIssue createdIssue = jiraClient.createIssue(basicIssue);\n+\t\treturn createdIssue;\n+\t}\n+\n+\tprivate static Map<String, String> mapParams(Map<String, String>fieldsMap, Map<String, String> params) {\n+\t\tMap<String, String> mapped = new HashMap<>();\n \t\tfor (String k: params.keySet()) {\n \t\t\tString fk = fieldsMap.get(k);", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c08d2dad7ee45e2121be630cb04b886620518b24", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\nindex 4daf7147e8..036305e43b 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JRJCHelper.java\n\n@@ -61,6 +61,10 @@ public class JRJCHelper {\n \t\tMap<String, String> mapped = new HashMap<>();\n \t\tfor (String k: params.keySet()) {\n \t\t\tString fk = fieldsMap.get(k);\n+\t\t\t// check that we could map field name to field id\n+\t\t\tif (fk == null) {\n+\t\t\t\tthrow new JiraClientException(String.format(\"Could not map field name '%s'\", k));\n+\t\t\t}\n \t\t\tmapped.put(fk, params.get(k));\n \t\t}\n \t\treturn mapped;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzUxMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387247512", "bodyText": "This should return a CreatedIssue and avoid overriding the instance (Maybe a static method or better an external mapper)", "author": "marcomarasca", "createdAt": "2020-03-03T19:36:03Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/CreatedIssue.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.sagebionetworks.repo.util.jrjc;\n+\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+\n+import java.util.Objects;\n+\n+public class CreatedIssue {\n+\n+    private String id;\n+    private String key;\n+    private String url;\n+\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(String key) {\n+        this.key = key;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null)\n+            return false;\n+        if (getClass() != o.getClass())\n+            return false;\n+        CreatedIssue other = (CreatedIssue) o;\n+        if (id == null) {\n+            if (other.id != null)\n+                return false;\n+        } else if (!id.equals(other.id))\n+            return false;\n+        if (key == null) {\n+            if (other.key != null)\n+                return false;\n+        } else if (!key.equals(other.key))\n+            return false;\n+        if (url == null) {\n+            if (other.url != null)\n+                return false;\n+        } else if (!url.equals(other.url))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\n+        result = prime * result + ((key == null) ? 0 : key.hashCode());\n+        result = prime * result + ((url == null) ? 0 : url.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CreatedIssue [id=\" + id + \", key=\" + key + \", url=\" + url + \"]\";\n+    }\n+\n+    public void initFromJSONObject(JSONObject jsonObject) {", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/CreatedIssue.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/CreatedIssue.java\nindex 34c5a253cd..e47fa2e816 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/CreatedIssue.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/CreatedIssue.java\n\n@@ -78,13 +78,4 @@ public class CreatedIssue {\n         return \"CreatedIssue [id=\" + id + \", key=\" + key + \", url=\" + url + \"]\";\n     }\n \n-    public void initFromJSONObject(JSONObject jsonObject) {\n-        if (!(jsonObject.containsKey(\"id\") && jsonObject.containsKey(\"key\") && jsonObject.containsKey(\"self\"))) {\n-            throw new JiraClientException(\"Error creating CreatedIssue from JSON\");\n-        }\n-        this.setId((String) jsonObject.get(\"id\"));\n-        this.setKey((String) jsonObject.get(\"key\"));\n-        this.setUrl((String) jsonObject.get(\"self\"));\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MjgzNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387252834", "bodyText": "public modifier", "author": "marcomarasca", "createdAt": "2020-03-03T19:46:08Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/BasicIssueTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.sagebionetworks.repo.util.jrjc;\n+\n+import org.json.simple.JSONObject;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class BasicIssueTest {", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/BasicIssueTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/BasicIssueTest.java\ndeleted file mode 100644\nindex 9fb172030d..0000000000\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/BasicIssueTest.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-package org.sagebionetworks.repo.util.jrjc;\n-\n-import org.json.simple.JSONObject;\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class BasicIssueTest {\n-\n-    @Test\n-    void testToJSONObject() {\n-        BasicIssue issue = new BasicIssue();\n-        issue.setSummary(\"mySummary\");\n-        issue.setProjectId(\"myProjectId\");\n-        issue.setIssueTypeId(1001L);\n-        Map<String, String> fields = new HashMap<>();\n-        fields.put(\"myKey1\", \"myVal1\");\n-        fields.put(\"myKey2\", \"myVal2\");\n-        issue.setCustomFields(fields);\n-        JSONObject jsonIssue = issue.toJONObject();\n-        assertNotNull(jsonIssue);\n-        JSONObject jsonFields = (JSONObject)jsonIssue.get(\"fields\");\n-        assertEquals(issue.getSummary(), jsonFields.get(\"summary\"));\n-        assertEquals(issue.getProjectId(), ((JSONObject)jsonFields.get(\"project\")).get(\"id\"));\n-        assertEquals(issue.getIssueTypeId(), ((JSONObject)jsonFields.get(\"issuetype\")).get(\"id\"));\n-        for (String k: fields.keySet()) {\n-            assertEquals(fields.get(k), (jsonFields.get(k)));\n-        }\n-    }\n-\n-    @Test\n-    void testToJSONObjectNoFields() {\n-        BasicIssue issue = new BasicIssue();\n-        issue.setSummary(\"mySummary\");\n-        issue.setProjectId(\"myProjectId\");\n-        issue.setIssueTypeId(1001L);\n-        JSONObject jsonIssue = issue.toJONObject();\n-        assertNotNull(jsonIssue);\n-        JSONObject jsonFields = (JSONObject)jsonIssue.get(\"fields\");\n-        assertNotNull(jsonFields);\n-        assertEquals(3, jsonFields.size());\n-        assertEquals(issue.getSummary(), jsonFields.get(\"summary\"));\n-        assertEquals(issue.getProjectId(), ((JSONObject)jsonFields.get(\"project\")).get(\"id\"));\n-        assertEquals(issue.getIssueTypeId(), ((JSONObject)jsonFields.get(\"issuetype\")).get(\"id\"));\n-    }\n-\n-    @Test\n-    void testToJSONObjectEmptyFields() {\n-        BasicIssue issue = new BasicIssue();\n-        issue.setSummary(\"mySummary\");\n-        issue.setProjectId(\"myProjectId\");\n-        issue.setIssueTypeId(1001L);\n-        JSONObject jsonIssue = issue.toJONObject();\n-        assertNotNull(jsonIssue);\n-        JSONObject jsonFields = (JSONObject)jsonIssue.get(\"fields\");\n-        assertNotNull(jsonFields);\n-        assertEquals(3, jsonFields.size());\n-        assertEquals(issue.getSummary(), jsonFields.get(\"summary\"));\n-        assertEquals(issue.getProjectId(), ((JSONObject)jsonFields.get(\"project\")).get(\"id\"));\n-        assertEquals(issue.getIssueTypeId(), ((JSONObject)jsonFields.get(\"issuetype\")).get(\"id\"));\n-        assertNull(jsonFields.get(\"fields\"));\n-    }\n-\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTM5Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387255392", "bodyText": "Use @InjectMocks instead of the reflection", "author": "marcomarasca", "createdAt": "2020-03-03T19:50:45Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java", "diffHunk": "@@ -37,18 +36,14 @@\n     private static final String USERNAME = \"userName\";\n     private static final String USERAPIKEY = \"userApiKey\";\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         jiraClient = new JiraClientImpl();\n         ReflectionTestUtils.setField(jiraClient, \"httpClient\", mockHttpClient);", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\nindex d9f1bf26de..1e7b922825 100644\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\n+++ b/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\n\n@@ -27,25 +31,22 @@ import static org.mockito.Mockito.when;\n @ExtendWith(MockitoExtension.class)\n public class JiraClientImplTest {\n \n+    @Mock\n+    private StackConfiguration mockConfig;\n     @Mock\n     private SimpleHttpClient mockHttpClient;\n+\n     @Mock\n     private SimpleHttpResponse mockResponse;\n \n-    private JiraClientImpl jiraClient;\n     private static final String USERNAME = \"userName\";\n     private static final String USERAPIKEY = \"userApiKey\";\n \n-    @BeforeEach\n-    public void setUp() throws Exception {\n-        jiraClient = new JiraClientImpl();\n-        ReflectionTestUtils.setField(jiraClient, \"httpClient\", mockHttpClient);\n-        ReflectionTestUtils.setField(jiraClient, \"USERNAME\", USERNAME);\n-        ReflectionTestUtils.setField(jiraClient, \"APIKEY\", USERAPIKEY);\n-    }\n+    @InjectMocks\n+    private JiraClientImpl jiraClient;\n \n     @Test\n-    public void getProjectInfo() throws Exception {\n+    public void testGetProjectInfo() throws Exception {\n         String expectedJson =\n                 \"{  \\\"id\\\": \\\"10000\\\",\" +\n                 \"  \\\"issueTypes\\\": [\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MDc4MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387260780", "bodyText": "You can inject the StackConfiguration with @autowire since the manager imports it as a bean.", "author": "marcomarasca", "createdAt": "2020-03-03T20:00:45Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -11,6 +12,7 @@\n import org.json.simple.parser.ParseException;\n import org.sagebionetworks.simpleHttpClient.*;\n import org.sagebionetworks.url.HttpMethod;\n+import org.springframework.beans.factory.annotation.Autowired;", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2Mzk0NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r387263945", "bodyText": "add the test prefix to test methods", "author": "marcomarasca", "createdAt": "2020-03-03T20:07:01Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java", "diffHunk": "@@ -37,18 +36,14 @@\n     private static final String USERNAME = \"userName\";\n     private static final String USERAPIKEY = \"userApiKey\";\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         jiraClient = new JiraClientImpl();\n         ReflectionTestUtils.setField(jiraClient, \"httpClient\", mockHttpClient);\n         ReflectionTestUtils.setField(jiraClient, \"USERNAME\", USERNAME);\n         ReflectionTestUtils.setField(jiraClient, \"APIKEY\", USERAPIKEY);\n     }\n \n-    @After\n-    public void tearDown() throws Exception {\n-    }\n-\n     @Test\n     public void getProjectInfo() throws Exception {", "originalCommit": "5360bedc8839c53d5cf30498a25490716830aef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9902dc9772477ba8722ccea431467b1fe2e309e2", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\nindex d9f1bf26de..1e7b922825 100644\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\n+++ b/services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JiraClientImplTest.java\n\n@@ -27,25 +31,22 @@ import static org.mockito.Mockito.when;\n @ExtendWith(MockitoExtension.class)\n public class JiraClientImplTest {\n \n+    @Mock\n+    private StackConfiguration mockConfig;\n     @Mock\n     private SimpleHttpClient mockHttpClient;\n+\n     @Mock\n     private SimpleHttpResponse mockResponse;\n \n-    private JiraClientImpl jiraClient;\n     private static final String USERNAME = \"userName\";\n     private static final String USERAPIKEY = \"userApiKey\";\n \n-    @BeforeEach\n-    public void setUp() throws Exception {\n-        jiraClient = new JiraClientImpl();\n-        ReflectionTestUtils.setField(jiraClient, \"httpClient\", mockHttpClient);\n-        ReflectionTestUtils.setField(jiraClient, \"USERNAME\", USERNAME);\n-        ReflectionTestUtils.setField(jiraClient, \"APIKEY\", USERAPIKEY);\n-    }\n+    @InjectMocks\n+    private JiraClientImpl jiraClient;\n \n     @Test\n-    public void getProjectInfo() throws Exception {\n+    public void testGetProjectInfo() throws Exception {\n         String expectedJson =\n                 \"{  \\\"id\\\": \\\"10000\\\",\" +\n                 \"  \\\"issueTypes\\\": [\" +\n"}}, {"oid": "9902dc9772477ba8722ccea431467b1fe2e309e2", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9902dc9772477ba8722ccea431467b1fe2e309e2", "message": "CR changes", "committedDate": "2020-03-10T00:43:50Z", "type": "commit"}, {"oid": "231c587fbee6b927fb76dbe840021eef0f188de0", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/231c587fbee6b927fb76dbe840021eef0f188de0", "message": "Typo", "committedDate": "2020-03-10T18:11:23Z", "type": "commit"}, {"oid": "386bc5b60aa959b2904a180e864211fb5b0784e8", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/386bc5b60aa959b2904a180e864211fb5b0784e8", "message": "Merge branch 'release-301' into r298-plfm-6108", "committedDate": "2020-03-10T18:12:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNDE4NA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r391204184", "bodyText": "Can remove", "author": "xschildw", "createdAt": "2020-03-11T19:16:15Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -28,7 +30,7 @@\n \tpublic static final String NAME_KEY = \"name\";\n \tpublic static final String ID_KEY = \"id\";\n \n-\tprivate final SimpleHttpClient httpClient;\n+\tprivate SimpleHttpClient httpClient;\n \tprivate String USERNAME;", "originalCommit": "386bc5b60aa959b2904a180e864211fb5b0784e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c08d2dad7ee45e2121be630cb04b886620518b24", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\nindex 33071795e4..cf123ccb52 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n\n@@ -31,8 +30,6 @@ public class JiraClientImpl implements JiraClient {\n \tpublic static final String ID_KEY = \"id\";\n \n \tprivate SimpleHttpClient httpClient;\n-\tprivate String USERNAME;\n-\tprivate String APIKEY;\n \tprivate static final Integer TIME_OUT = 30 * 1000; // 30 seconds\n \tprivate static final String JIRA_API_PROJECT_URL = \"/rest/api/3/project/\";\n \tprivate static final String JIRA_API_FIELDS_URL = \"/rest/api/3/field/\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNTM0Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r391205343", "bodyText": "Change name of method", "author": "xschildw", "createdAt": "2020-03-11T19:18:27Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -196,4 +198,36 @@ static void handleResponseStatus(int status) {\n \t\theaders.put(HttpHeaders.USER_AGENT, USER_AGENT);\n \t\treturn headers;\n \t}\n+\n+\tprivate static JSONObject toJSONObject(BasicIssue basicIssue) {\n+\t\tJSONObject issue = new JSONObject();\n+\t\tJSONObject issueFields = new JSONObject();\n+\t\tissueFields.put(\"summary\", basicIssue.getSummary());\n+\t\tJSONObject o = new JSONObject();\n+\t\to.put(\"id\", basicIssue.getProjectId());\n+\t\tissueFields.put(\"project\", o);\n+\t\to = new JSONObject();\n+\t\to.put(\"id\", basicIssue.getIssueTypeId());\n+\t\tissueFields.put(\"issuetype\", o);\n+\t\tif (basicIssue.getCustomFields() != null) {\n+\t\t\tfor (String k: basicIssue.getCustomFields().keySet()) {\n+\t\t\t\tissueFields.put(k, basicIssue.getCustomFields().get(k));\n+\t\t\t}\n+\t\t}\n+\t\tissue.put(\"fields\", issueFields);\n+\t\treturn issue;\n+\t}\n+\n+\tprivate static CreatedIssue fromJSONObject(JSONObject jsonObject) {", "originalCommit": "386bc5b60aa959b2904a180e864211fb5b0784e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c08d2dad7ee45e2121be630cb04b886620518b24", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\nindex 33071795e4..cf123ccb52 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n\n@@ -199,7 +145,7 @@ public class JiraClientImpl implements JiraClient {\n \t\treturn headers;\n \t}\n \n-\tprivate static JSONObject toJSONObject(BasicIssue basicIssue) {\n+\tprivate static String searializeBasicIssue(BasicIssue basicIssue) {\n \t\tJSONObject issue = new JSONObject();\n \t\tJSONObject issueFields = new JSONObject();\n \t\tissueFields.put(\"summary\", basicIssue.getSummary());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNjE4OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r391206189", "bodyText": "Also  move to static", "author": "xschildw", "createdAt": "2020-03-11T19:20:02Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java", "diffHunk": "@@ -39,16 +41,17 @@\n \tprivate static final String JIRA_PROJECT_ISSUE_TYPES_KEY = \"issueTypes\";\n \tprivate static final String JIRA_PROJECT_ID_KEY = \"id\";\n \n+\t@Autowired\n+\tprivate StackConfiguration config;\n+\n \tpublic JiraClientImpl() {\n \t\tSimpleHttpClientConfig httpClientConfig = new SimpleHttpClientConfig();\n \t\thttpClientConfig.setSocketTimeoutMs(TIME_OUT);\n \t\thttpClient = new SimpleHttpClientImpl(httpClientConfig);\n-\t\tUSERNAME = StackConfigurationSingleton.singleton().getJiraUserEmail();\n-\t\tAPIKEY = StackConfigurationSingleton.singleton().getJiraUserApikey();\n \t}\n \n \t@Override\n-\tpublic JSONObject getProjectInfo(String projectKey, String issueTypeName) {\n+\tpublic ProjectInfo getProjectInfo(String projectKey, String issueTypeName) {\n \t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\");", "originalCommit": "386bc5b60aa959b2904a180e864211fb5b0784e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c08d2dad7ee45e2121be630cb04b886620518b24", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\nindex 33071795e4..cf123ccb52 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/util/jrjc/JiraClientImpl.java\n\n@@ -52,37 +49,11 @@ public class JiraClientImpl implements JiraClient {\n \n \t@Override\n \tpublic ProjectInfo getProjectInfo(String projectKey, String issueTypeName) {\n-\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, \"SG\");\n+\t\tSimpleHttpRequest req = createRequest(JIRA_API_PROJECT_URL, projectKey);\n \n \t\tString json = execRequest(HttpMethod.GET, req, null);\n \n-\t\tLong issueTypeId = null;\n-\t\tString projectId = null;\n-\t\ttry {\n-\t\t\tJSONParser parser = new JSONParser();\n-\t\t\tJSONObject pInfo = (JSONObject) parser.parse(json);\n-\t\t\tJSONArray issueTypeNames = (JSONArray)pInfo.get(JIRA_PROJECT_ISSUE_TYPES_KEY);\n-\t\t\tIterator<JSONObject> it = issueTypeNames.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tJSONObject issueType = it.next();\n-\t\t\t\tString name = (String) issueType.get(NAME_KEY);\n-\t\t\t\tif (issueTypeName.equalsIgnoreCase(name)) {\n-\t\t\t\t\tif (issueType.get(ID_KEY) != null) {\n-\t\t\t\t\t\tissueTypeId = Long.valueOf((String) issueType.get(ID_KEY));\n-\t\t\t\t\t}\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (issueTypeId == null) {\n-\t\t\t\tthrow new JiraClientException(String.format(\"Could not find the issue typeId for issue type {}\", issueTypeName));\n-\t\t\t}\n-\t\t\tprojectId = (String) pInfo.get(JIRA_PROJECT_ID_KEY);\n-\t\t}\n-\t\tcatch (ParseException e) {\n-\t\t\tthrow new JiraClientException(\"JIRA client: error processing JSON\", e);\n-\t\t}\n-\t\tProjectInfo projectInfo = new ProjectInfo(projectId, issueTypeId);\n-\t\treturn projectInfo;\n+\t\treturn parseProjectInfo(json, issueTypeName);\n \t}\n \n \t@Override\n"}}, {"oid": "c08d2dad7ee45e2121be630cb04b886620518b24", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c08d2dad7ee45e2121be630cb04b886620518b24", "message": "Review", "committedDate": "2020-03-13T20:34:53Z", "type": "commit"}, {"oid": "9f0f867ee820ee6896d0ec51e9eafaa856803098", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9f0f867ee820ee6896d0ec51e9eafaa856803098", "message": "Fix dependencies", "committedDate": "2020-03-13T21:41:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjAzNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3959#discussion_r392542034", "bodyText": "Put whens back inline", "author": "xschildw", "createdAt": "2020-03-14T01:02:50Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/util/jrjc/JRJCHelperTest.java", "diffHunk": "@@ -94,4 +86,33 @@ public void testCreateFlagIssue() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void testCreateIssueBadMapping() throws Exception {\n+\t\tMap<String,String> badFields = new HashMap<String, String>();\n+\t\tbadFields.put(\"Synapse Principal ID\", \"id1\");\n+\t\tbadFields.put(\"Synapse User Name\", \"id2\"); // This one does not map\n+\t\tbadFields.put(\"Synapse Data Object\", \"id3\");\n+\t\twhen(jiraClient.getFields()).thenReturn(badFields);\n+\n+\t\t// Call under test\n+\t\tAssertions.assertThrows(JiraClientException.class, () -> {\n+\t\t\t\tJRJCHelper.createFlagIssue(jiraClient, TEST_PRINCIPAL_ID, TEST_DISPLAY_NAME, TEST_DATA_OBJECT_ID);\n+\t\t\t}\n+\t\t);\n+\n+\t}\n+\n+\tprivate void initFields() {\n+\t\twhen(mockCreatedIssue.getKey()).thenReturn(\"SG-101\");", "originalCommit": "9f0f867ee820ee6896d0ec51e9eafaa856803098", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}