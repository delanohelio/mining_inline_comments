{"pr_number": 3993, "pr_title": "PLFM-6189", "pr_createdAt": "2020-04-08T22:59:57Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3993", "timeline": [{"oid": "344f353b2e7c8f80cc966061fb43d94d493331d3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/344f353b2e7c8f80cc966061fb43d94d493331d3", "message": "PLFM-6189: Use DelegatingFilterProxy to include the spring context", "committedDate": "2020-04-07T22:51:54Z", "type": "commit"}, {"oid": "287d464568bc131eab46e3b7ea0a5534351d6acf", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/287d464568bc131eab46e3b7ea0a5534351d6acf", "message": "PLFM-6189: Report bad credential metrics", "committedDate": "2020-04-08T06:57:52Z", "type": "commit"}, {"oid": "b03529e08ec12de60afe4a750388bc73b9878563", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/b03529e08ec12de60afe4a750388bc73b9878563", "message": "PLFM-6189: Get rid of OncePerRequestFilter due to logging conflict", "committedDate": "2020-04-08T18:29:20Z", "type": "commit"}, {"oid": "66b6c665d31e0e4de2d0f1ac237c0a3684837978", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/66b6c665d31e0e4de2d0f1ac237c0a3684837978", "message": "PLFM-6189: Get rids of final method to workaround CGLIB proxies limitations", "committedDate": "2020-04-08T22:09:46Z", "type": "commit"}, {"oid": "15ddbf1780bf481ac5bf500a99b37d769286dbcc", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/15ddbf1780bf481ac5bf500a99b37d769286dbcc", "message": "PLFM-6189: Added integration test for validation", "committedDate": "2020-04-08T22:16:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5ODU3Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3993#discussion_r406398573", "bodyText": "consider\nthrow new IllegalArgumentException(\"Invalid Basic authentication header\", e);", "author": "brucehoff", "createdAt": "2020-04-09T18:32:51Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java", "diffHunk": "@@ -16,19 +17,33 @@\n import org.springframework.http.HttpStatus;\n \n public class HttpAuthUtil {\n+\t\n+\tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n \n \tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) return null;\n-\n+\t\t\n+\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n \t\tString base64EncodedCredentials = header.substring(AuthorizationConstants.BASIC_PREFIX.length()).trim();\n-\t\tString basicCredentials = new String(Base64.getDecoder().decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n+\t\tString basicCredentials = null;\n+\t\t\n+\t\ttry {\n+\t\t\tbasicCredentials = new String(BASE64_DECODER.decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n+\t\t} catch(IllegalArgumentException e) {\n+\t\t\treturn null;", "originalCommit": "15ddbf1780bf481ac5bf500a99b37d769286dbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d0103958ee15e42c047fd0ed58171b8ac16bdad", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\nindex dc665d8888..3a1fc17746 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n\n@@ -19,32 +19,47 @@ import org.springframework.http.HttpStatus;\n public class HttpAuthUtil {\n \t\n \tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n+\tprivate static final String INVALID_AUTH_MSG_FORMAT = \"Invalid Authorization header for basic authentication (%s)\"; \n \n-\tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n+\t/**\n+\t * Extracts the credentials from the Authorization header following the basic authentication scheme\n+\t * \n+\t * @param httpRequest The http request\n+\t * @return An optional that contains the credentials if present in the Authorization header\n+\t * @throws IllegalArgumentException If the authorization header does not follow the basic authentication scheme and/or it's invalid\n+\t */\n+\tpublic static Optional<UserNameAndPassword> getBasicAuthenticationCredentials(HttpServletRequest httpRequest) throws IllegalArgumentException {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\t\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n-\t\t\treturn null;\n+\n+\t\tif (StringUtils.isBlank(header)) {\n+\t\t\treturn Optional.empty();\n \t\t}\n-\t\t\n+\n+\t\tif (!header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\tthrow new IllegalArgumentException(String.format(INVALID_AUTH_MSG_FORMAT,\n+\t\t\t\t\t\"Missing \\\"\" + AuthorizationConstants.BASIC_PREFIX + \"\\\" prefix\"));\n+\t\t}\n+\n \t\tString base64EncodedCredentials = header.substring(AuthorizationConstants.BASIC_PREFIX.length()).trim();\n \t\tString basicCredentials = null;\n-\t\t\n+\n \t\ttry {\n \t\t\tbasicCredentials = new String(BASE64_DECODER.decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n-\t\t} catch(IllegalArgumentException e) {\n-\t\t\treturn null;\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Malformed Base64 encoding: \" + e.getMessage()), e);\n \t\t}\n-\t\t\t\n+\n \t\tint colon = basicCredentials.indexOf(\":\");\n-\t\t\n-\t\tif (colon>0 && colon<basicCredentials.length()-1) {\n+\n+\t\tif (colon > 0 && colon < basicCredentials.length() - 1) {\n \t\t\tString name = basicCredentials.substring(0, colon);\n-\t\t\tString password = basicCredentials.substring(colon+1);\n-\t\t\treturn new UserNameAndPassword(name, password);\n+\t\t\tString password = basicCredentials.substring(colon + 1);\n+\t\t\treturn Optional.of(new UserNameAndPassword(name, password));\n \t\t}\n-\t\t\n-\t\treturn null;\n+\n+\t\tthrow new IllegalArgumentException(\n+\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Decoded credentials should be colon separated\"));\n \t}\n \n \tpublic static String getBearerTokenFromStandardAuthorizationHeader(HttpServletRequest httpRequest) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5OTczOA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3993#discussion_r406399738", "bodyText": "if Authorization header is present but is NOT Basic, then raise an exception", "author": "brucehoff", "createdAt": "2020-04-09T18:34:56Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java", "diffHunk": "@@ -16,19 +17,33 @@\n import org.springframework.http.HttpStatus;\n \n public class HttpAuthUtil {\n+\t\n+\tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n \n \tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) return null;\n-\n+\t\t\n+\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\treturn null;", "originalCommit": "15ddbf1780bf481ac5bf500a99b37d769286dbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d0103958ee15e42c047fd0ed58171b8ac16bdad", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\nindex dc665d8888..3a1fc17746 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n\n@@ -19,32 +19,47 @@ import org.springframework.http.HttpStatus;\n public class HttpAuthUtil {\n \t\n \tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n+\tprivate static final String INVALID_AUTH_MSG_FORMAT = \"Invalid Authorization header for basic authentication (%s)\"; \n \n-\tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n+\t/**\n+\t * Extracts the credentials from the Authorization header following the basic authentication scheme\n+\t * \n+\t * @param httpRequest The http request\n+\t * @return An optional that contains the credentials if present in the Authorization header\n+\t * @throws IllegalArgumentException If the authorization header does not follow the basic authentication scheme and/or it's invalid\n+\t */\n+\tpublic static Optional<UserNameAndPassword> getBasicAuthenticationCredentials(HttpServletRequest httpRequest) throws IllegalArgumentException {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\t\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n-\t\t\treturn null;\n+\n+\t\tif (StringUtils.isBlank(header)) {\n+\t\t\treturn Optional.empty();\n \t\t}\n-\t\t\n+\n+\t\tif (!header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\tthrow new IllegalArgumentException(String.format(INVALID_AUTH_MSG_FORMAT,\n+\t\t\t\t\t\"Missing \\\"\" + AuthorizationConstants.BASIC_PREFIX + \"\\\" prefix\"));\n+\t\t}\n+\n \t\tString base64EncodedCredentials = header.substring(AuthorizationConstants.BASIC_PREFIX.length()).trim();\n \t\tString basicCredentials = null;\n-\t\t\n+\n \t\ttry {\n \t\t\tbasicCredentials = new String(BASE64_DECODER.decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n-\t\t} catch(IllegalArgumentException e) {\n-\t\t\treturn null;\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Malformed Base64 encoding: \" + e.getMessage()), e);\n \t\t}\n-\t\t\t\n+\n \t\tint colon = basicCredentials.indexOf(\":\");\n-\t\t\n-\t\tif (colon>0 && colon<basicCredentials.length()-1) {\n+\n+\t\tif (colon > 0 && colon < basicCredentials.length() - 1) {\n \t\t\tString name = basicCredentials.substring(0, colon);\n-\t\t\tString password = basicCredentials.substring(colon+1);\n-\t\t\treturn new UserNameAndPassword(name, password);\n+\t\t\tString password = basicCredentials.substring(colon + 1);\n+\t\t\treturn Optional.of(new UserNameAndPassword(name, password));\n \t\t}\n-\t\t\n-\t\treturn null;\n+\n+\t\tthrow new IllegalArgumentException(\n+\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Decoded credentials should be colon separated\"));\n \t}\n \n \tpublic static String getBearerTokenFromStandardAuthorizationHeader(HttpServletRequest httpRequest) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMDM3NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3993#discussion_r406400375", "bodyText": "Raise exception if colon<0 or colon>=basicCredentials.length()", "author": "brucehoff", "createdAt": "2020-04-09T18:36:05Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java", "diffHunk": "@@ -16,19 +17,33 @@\n import org.springframework.http.HttpStatus;\n \n public class HttpAuthUtil {\n+\t\n+\tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n \n \tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) return null;\n-\n+\t\t\n+\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n \t\tString base64EncodedCredentials = header.substring(AuthorizationConstants.BASIC_PREFIX.length()).trim();\n-\t\tString basicCredentials = new String(Base64.getDecoder().decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n+\t\tString basicCredentials = null;\n+\t\t\n+\t\ttry {\n+\t\t\tbasicCredentials = new String(BASE64_DECODER.decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n+\t\t} catch(IllegalArgumentException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\t\n \t\tint colon = basicCredentials.indexOf(\":\");\n+\t\t", "originalCommit": "15ddbf1780bf481ac5bf500a99b37d769286dbcc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d0103958ee15e42c047fd0ed58171b8ac16bdad", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\nindex dc665d8888..3a1fc17746 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/HttpAuthUtil.java\n\n@@ -19,32 +19,47 @@ import org.springframework.http.HttpStatus;\n public class HttpAuthUtil {\n \t\n \tprivate static final Decoder BASE64_DECODER = Base64.getDecoder();\n+\tprivate static final String INVALID_AUTH_MSG_FORMAT = \"Invalid Authorization header for basic authentication (%s)\"; \n \n-\tpublic static UserNameAndPassword getBasicAuthenticationCredentials(HttpServletRequest httpRequest) {\n+\t/**\n+\t * Extracts the credentials from the Authorization header following the basic authentication scheme\n+\t * \n+\t * @param httpRequest The http request\n+\t * @return An optional that contains the credentials if present in the Authorization header\n+\t * @throws IllegalArgumentException If the authorization header does not follow the basic authentication scheme and/or it's invalid\n+\t */\n+\tpublic static Optional<UserNameAndPassword> getBasicAuthenticationCredentials(HttpServletRequest httpRequest) throws IllegalArgumentException {\n \t\tString header = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\n-\t\t\n-\t\tif (StringUtils.isBlank(header) || !header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n-\t\t\treturn null;\n+\n+\t\tif (StringUtils.isBlank(header)) {\n+\t\t\treturn Optional.empty();\n \t\t}\n-\t\t\n+\n+\t\tif (!header.startsWith(AuthorizationConstants.BASIC_PREFIX)) {\n+\t\t\tthrow new IllegalArgumentException(String.format(INVALID_AUTH_MSG_FORMAT,\n+\t\t\t\t\t\"Missing \\\"\" + AuthorizationConstants.BASIC_PREFIX + \"\\\" prefix\"));\n+\t\t}\n+\n \t\tString base64EncodedCredentials = header.substring(AuthorizationConstants.BASIC_PREFIX.length()).trim();\n \t\tString basicCredentials = null;\n-\t\t\n+\n \t\ttry {\n \t\t\tbasicCredentials = new String(BASE64_DECODER.decode(base64EncodedCredentials), StandardCharsets.UTF_8);\n-\t\t} catch(IllegalArgumentException e) {\n-\t\t\treturn null;\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Malformed Base64 encoding: \" + e.getMessage()), e);\n \t\t}\n-\t\t\t\n+\n \t\tint colon = basicCredentials.indexOf(\":\");\n-\t\t\n-\t\tif (colon>0 && colon<basicCredentials.length()-1) {\n+\n+\t\tif (colon > 0 && colon < basicCredentials.length() - 1) {\n \t\t\tString name = basicCredentials.substring(0, colon);\n-\t\t\tString password = basicCredentials.substring(colon+1);\n-\t\t\treturn new UserNameAndPassword(name, password);\n+\t\t\tString password = basicCredentials.substring(colon + 1);\n+\t\t\treturn Optional.of(new UserNameAndPassword(name, password));\n \t\t}\n-\t\t\n-\t\treturn null;\n+\n+\t\tthrow new IllegalArgumentException(\n+\t\t\t\tString.format(INVALID_AUTH_MSG_FORMAT, \"Decoded credentials should be colon separated\"));\n \t}\n \n \tpublic static String getBearerTokenFromStandardAuthorizationHeader(HttpServletRequest httpRequest) {\n"}}, {"oid": "0d0103958ee15e42c047fd0ed58171b8ac16bdad", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0d0103958ee15e42c047fd0ed58171b8ac16bdad", "message": "PLFM-6189: Adds more granular handling of basic auth errors", "committedDate": "2020-04-09T23:49:48Z", "type": "commit"}, {"oid": "396940485477705a6581f934d5bc66407cb98e1e", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/396940485477705a6581f934d5bc66407cb98e1e", "message": "PLFM-6189: Removes optional anti-pattern", "committedDate": "2020-04-10T19:12:46Z", "type": "commit"}]}