{"pr_number": 4040, "pr_title": "Plfm 6161 e", "pr_createdAt": "2020-05-12T18:42:32Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040", "timeline": [{"oid": "6717baa2c4f1f3fea6be6ed8f434bd4f09a77e22", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/6717baa2c4f1f3fea6be6ed8f434bd4f09a77e22", "message": "code review changes and missing tests", "committedDate": "2020-05-08T02:00:24Z", "type": "commit"}, {"oid": "fdd69a065971c19d08ac612956ded7b7165fbe0c", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/fdd69a065971c19d08ac612956ded7b7165fbe0c", "message": "sub-schema iterator", "committedDate": "2020-05-09T01:20:06Z", "type": "commit"}, {"oid": "d2374f4fb08d6f6d630f459dbd7efbcf90af0e76", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d2374f4fb08d6f6d630f459dbd7efbcf90af0e76", "message": "depth first iterator and bind dependencies at the dao level", "committedDate": "2020-05-12T00:20:14Z", "type": "commit"}, {"oid": "36a9fd5530adcc13f52de0396c8c1d9b6bfe347a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/36a9fd5530adcc13f52de0396c8c1d9b6bfe347a", "message": "schema managers adds dependencies", "committedDate": "2020-05-12T01:44:45Z", "type": "commit"}, {"oid": "a506628128e6407924887d707fb7088e816e466e", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a506628128e6407924887d707fb7088e816e466e", "message": "fixed manager tests and added missing test", "committedDate": "2020-05-12T18:39:49Z", "type": "commit"}, {"oid": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/524f4cd89cb0b77eca32a6645768a561cc819bd6", "message": "need to run more than once an hour to detect in test", "committedDate": "2020-05-12T20:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4MDE4Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424080186", "bodyText": "If you want to enforce the random access constant guarantee consider using an array, or alternatively check the instanceOf RandomAccess marker interface.", "author": "marcomarasca", "createdAt": "2020-05-12T22:57:00Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/schema/JsonSchemaDaoImpl.java", "diffHunk": "@@ -395,4 +415,30 @@ public JsonSchemaVersionInfo getVersionLatestInfo(String organizationName, Strin\n \t\t\t\t\t\t+ COL_JSON_SCHEMA_NAME + \" = ? ORDER BY V.\" + COL_JSON_SCHEMA_VER_ID + \" LIMIT ? OFFSET ?\",\n \t\t\t\tSCHEMA_VERSION_INFO_MAPPER, organizationName, schemaName, limit, offset);\n \t}\n+\n+\t@WriteTransaction\n+\tvoid bindDependencies(String versionId, ArrayList<SchemaDependency> dependencies) {", "originalCommit": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NTM1OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424085358", "bodyText": "You can probably remove the return", "author": "marcomarasca", "createdAt": "2020-05-12T23:11:47Z", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.sagebionetworks.repo.model.schema;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+/**\n+ * Provides iterators over the sub-schema of JsonSchemas.\n+ *\n+ */\n+public class SubSchemaIterable {\n+\n+\t/**\n+\t * Create a depth first iterator for the given schema.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tpublic static Iterable<JsonSchema> depthFirstIterable(JsonSchema root) {\n+\t\tValidateArgument.required(root, \"JsonSchema\");\n+\t\treturn () -> {\n+\t\t\treturn createDepthFirstList(root).iterator();", "originalCommit": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4NjYyMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424086620", "bodyText": "This might throw if the list of not of JsonSchema.", "author": "marcomarasca", "createdAt": "2020-05-12T23:15:56Z", "path": "lib/models/src/main/java/org/sagebionetworks/repo/model/schema/SubSchemaIterable.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.sagebionetworks.repo.model.schema;\n+\n+import java.lang.reflect.Field;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.sagebionetworks.util.ValidateArgument;\n+\n+/**\n+ * Provides iterators over the sub-schema of JsonSchemas.\n+ *\n+ */\n+public class SubSchemaIterable {\n+\n+\t/**\n+\t * Create a depth first iterator for the given schema.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tpublic static Iterable<JsonSchema> depthFirstIterable(JsonSchema root) {\n+\t\tValidateArgument.required(root, \"JsonSchema\");\n+\t\treturn () -> {\n+\t\t\treturn createDepthFirstList(root).iterator();\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Create a flat list including only the direct children of the given schema.\n+\t * This method is not recursive.\n+\t * \n+\t * @param root\n+\t * @return\n+\t */\n+\tstatic List<JsonSchema> createListOfChildren(JsonSchema root) {\n+\t\tList<JsonSchema> list = new LinkedList<JsonSchema>();\n+\t\ttry {\n+\t\t\tField[] fields = JsonSchema.class.getDeclaredFields();\n+\t\t\tfor (Field field : fields) {\n+\t\t\t\tif (!field.isAccessible()) {\n+\t\t\t\t\tfield.setAccessible(true);\n+\t\t\t\t}\n+\t\t\t\t// is it a schema\n+\t\t\t\tif (JsonSchema.class == field.getType()) {\n+\t\t\t\t\tJsonSchema schema = (JsonSchema) field.get(root);\n+\t\t\t\t\tif (schema != null) {\n+\t\t\t\t\t\tlist.add(schema);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// is it a list of schemas?\n+\t\t\t\tif (List.class == field.getType()) {\n+\t\t\t\t\tList<JsonSchema> schemaList = (List<JsonSchema>) field.get(root);", "originalCommit": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTI3Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424091276", "bodyText": "You can probably remove this import", "author": "marcomarasca", "createdAt": "2020-05-12T23:30:43Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/schema/JsonSchemaManagerImplTest.java", "diffHunk": "@@ -38,18 +41,30 @@\n import org.sagebionetworks.repo.model.dbo.schema.JsonSchemaDao;\n import org.sagebionetworks.repo.model.dbo.schema.NewSchemaVersionRequest;\n import org.sagebionetworks.repo.model.dbo.schema.OrganizationDao;\n+import org.sagebionetworks.repo.model.dbo.schema.SchemaDependency;\n import org.sagebionetworks.repo.model.schema.CreateOrganizationRequest;\n import org.sagebionetworks.repo.model.schema.CreateSchemaRequest;\n import org.sagebionetworks.repo.model.schema.CreateSchemaResponse;\n import org.sagebionetworks.repo.model.schema.JsonSchema;\n+import org.sagebionetworks.repo.model.schema.JsonSchemaInfo;\n import org.sagebionetworks.repo.model.schema.JsonSchemaVersionInfo;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoResponse;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaVersionInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaVersionInfoResponse;\n+import org.sagebionetworks.repo.model.schema.ListOrganizationsRequest;\n+import org.sagebionetworks.repo.model.schema.ListOrganizationsResponse;\n import org.sagebionetworks.repo.model.schema.Organization;\n import org.sagebionetworks.repo.model.util.AccessControlListUtil;\n+import org.sagebionetworks.repo.web.NotFoundException;\n import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\n import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\n import org.sagebionetworks.schema.id.SchemaId;\n import org.sagebionetworks.schema.parser.SchemaIdParser;\n \n+import com.google.common.collect.Lists;\n+import com.mchange.v2.cfg.MConfig;", "originalCommit": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NTUzNw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4040#discussion_r424095537", "bodyText": "We might want to truncate the data in a before to increase the change that it the worker to put it there?", "author": "marcomarasca", "createdAt": "2020-05-12T23:44:40Z", "path": "services/workers/src/test/java/org/sagebionetworks/schema/worker/SynpaseSchemaBootstrapWorkerTest.java", "diffHunk": "@@ -1,21 +1,48 @@\n package org.sagebionetworks.schema.worker;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.sagebionetworks.repo.manager.schema.JsonSchemaManager;\n+import org.sagebionetworks.repo.model.schema.JsonSchemaInfo;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoRequest;\n+import org.sagebionetworks.repo.model.schema.ListJsonSchemaInfoResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n \n @ExtendWith(SpringExtension.class)\n @ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n public class SynpaseSchemaBootstrapWorkerTest {\n+\t\n+\tpublic static final long MAX_WAIT_MS = 60*1000*2;\n \n \t@Autowired\n \tprivate JsonSchemaManager jsonSchemaManager;\n \t\n \t@Test\n-\tpublic void testRun() {\n-\t\t\n+\tpublic void testRun() throws InterruptedException {", "originalCommit": "524f4cd89cb0b77eca32a6645768a561cc819bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}