{"pr_number": 4213, "pr_title": "PLFM-6445: Multipart Copy", "pr_createdAt": "2020-10-02T00:27:19Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213", "timeline": [{"oid": "ace191170ebad73e04359e1324f8ae6d5760c8e7", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ace191170ebad73e04359e1324f8ae6d5760c8e7", "message": "PLFM-6445: Added MultipartUploadCopyRequest DTO", "committedDate": "2020-10-01T08:20:28Z", "type": "commit"}, {"oid": "cb3973fd9e62e0fdd40d2c639d3822f091794965", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cb3973fd9e62e0fdd40d2c639d3822f091794965", "message": "PLFM-6445: Cleanup", "committedDate": "2020-10-01T08:20:40Z", "type": "commit"}, {"oid": "3dbadf037652395eae1066362840c8129e07e0f6", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3dbadf037652395eae1066362840c8129e07e0f6", "message": "PLFM-6445: Normalize request data to DB columns", "committedDate": "2020-10-01T08:21:20Z", "type": "commit"}, {"oid": "61580fd6cafd3a4454484bd178ef2a3460ddf475", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/61580fd6cafd3a4454484bd178ef2a3460ddf475", "message": "PLFM-6445: Refactoring, supports starting multipart copy", "committedDate": "2020-10-01T08:21:51Z", "type": "commit"}, {"oid": "e78662ee61dd7341f5d51367667cefa474790d07", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e78662ee61dd7341f5d51367667cefa474790d07", "message": "PLFM-6445: Refactor to include signed headers", "committedDate": "2020-10-01T18:36:29Z", "type": "commit"}, {"oid": "cc599212ea4823f26004e53b8fe2b6b7b2094aee", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/cc599212ea4823f26004e53b8fe2b6b7b2094aee", "message": "PLFM-6445: Fix JSON formatting", "committedDate": "2020-10-01T19:29:29Z", "type": "commit"}, {"oid": "c20aa174331dbb5eb75b688f7470a877634e9522", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/c20aa174331dbb5eb75b688f7470a877634e9522", "message": "PLFM-6445: Store the source file handle rather than de-normalize", "committedDate": "2020-10-01T19:30:12Z", "type": "commit"}, {"oid": "363abdac721c1833245d8e03900b71664187cf91", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/363abdac721c1833245d8e03900b71664187cf91", "message": "PLFM-6445: Multipart copy, pre-signed URL step", "committedDate": "2020-10-01T23:02:26Z", "type": "commit"}, {"oid": "16e9f3fdc606b7ad89e0e0c309d70f880d8b7efb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/16e9f3fdc606b7ad89e0e0c309d70f880d8b7efb", "message": "PLFM-6445: Multipart copy, add part step", "committedDate": "2020-10-01T23:02:49Z", "type": "commit"}, {"oid": "9932694d34697ea813d75ce94d94ee6fdd99e04a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9932694d34697ea813d75ce94d94ee6fdd99e04a", "message": "PLFM-6445: Multipart copy, complete step", "committedDate": "2020-10-01T23:02:59Z", "type": "commit"}, {"oid": "0077f26d1902a0de8179e911ddbc29b72e7a0536", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/0077f26d1902a0de8179e911ddbc29b72e7a0536", "message": "PLFM-6445: Multipart copy, integration test", "committedDate": "2020-10-01T23:52:58Z", "type": "commit"}, {"oid": "3eb0a63623320a2904414d73c004b236633d3e3a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/3eb0a63623320a2904414d73c004b236633d3e3a", "message": "PLFM-6445: Expose multipart copy to the API", "committedDate": "2020-10-02T00:25:33Z", "type": "commit"}, {"oid": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/406b4df7f1bc12c9db0cff760126a16fd33a612a", "message": "PLFM-6445: Renamed requestHeaders to signedHeaders", "committedDate": "2020-10-02T00:37:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0NTU2NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499045565", "bodyText": "if bucket is equal they are in the same region (one less call to S3).", "author": "john-hill", "createdAt": "2020-10-02T20:53:33Z", "path": "lib/lib-upload/src/main/java/org/sagebionetworks/upload/multipart/S3MultipartUploadDAOImpl.java", "diffHunk": "@@ -48,22 +62,53 @@\n \t@Override\r\n \tpublic String initiateMultipartUpload(String bucket, String key,\r\n \t\t\tMultipartUploadRequest request) {\r\n-\t\tString contentType = request.getContentType();\r\n-\t\tif (StringUtils.isEmpty(contentType)) {\r\n-\t\t\tcontentType = \"application/octet-stream\";\r\n+\t\tfinal String contentType = getContentType(request.getContentType());\r\n+\t\t\r\n+\t\treturn initiateMultipartUpload(bucket, key, contentType, request.getFileName(), request.getContentMD5Hex());\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic String initiateMultipartUploadCopy(String bucket, String key, MultipartUploadCopyRequest request, FileHandle fileHandle) {\r\n+\t\tfinal String contentType = getContentType(fileHandle.getContentType());\r\n+\t\t\r\n+\t\tif (!(fileHandle instanceof S3FileHandle)) {\r\n+\t\t\tthrow new UnsupportedOperationException(\"The file handle must point to an S3 location.\");\r\n \t\t}\r\n+\r\n+\t\tvalidateSameRegionCopy(((S3FileHandle) fileHandle).getBucketName(), bucket);\r\n+\t\t\r\n+\t\treturn initiateMultipartUpload(bucket, key, contentType, request.getFileName(), fileHandle.getContentMd5());\r\n+\t}\r\n+\t\r\n+\tprivate String initiateMultipartUpload(String bucket, String key, String contentType, String fileName, String contentMD5) {\r\n \t\tObjectMetadata objectMetadata = new ObjectMetadata();\r\n+\t\t\r\n \t\tobjectMetadata.setContentType(contentType);\r\n-\t\tobjectMetadata.setContentDisposition(ContentDispositionUtils\r\n-\t\t\t\t.getContentDispositionValue(request.getFileName()));\r\n-\t\tobjectMetadata.setContentMD5(BinaryUtils.toBase64(BinaryUtils\r\n-\t\t\t\t.fromHex(request.getContentMD5Hex())));\r\n+\t\tobjectMetadata.setContentDisposition(ContentDispositionUtils.getContentDispositionValue(fileName));\r\n+\t\tobjectMetadata.setContentMD5(BinaryUtils.toBase64(BinaryUtils.fromHex(contentMD5)));\r\n+\t\t\r\n \t\tInitiateMultipartUploadResult result = s3Client\r\n-\t\t\t\t.initiateMultipartUpload(new InitiateMultipartUploadRequest(\r\n-\t\t\t\t\t\tbucket, key, objectMetadata)\r\n+\t\t\t\t.initiateMultipartUpload(new InitiateMultipartUploadRequest(bucket, key, objectMetadata)\r\n \t\t\t\t.withCannedACL(CannedAccessControlList.BucketOwnerFullControl));\r\n+\t\t\r\n \t\treturn result.getUploadId();\r\n \t}\r\n+\t\r\n+\tprivate void validateSameRegionCopy(String sourceBucket, String destinationBucket) {\r\n+\t\tRegion sourceRegion = s3Client.getRegionForBucket(sourceBucket);\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0ODYxNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499048614", "bodyText": "startByte and endByte", "author": "john-hill", "createdAt": "2020-10-02T21:01:36Z", "path": "lib/lib-upload/src/main/java/org/sagebionetworks/upload/multipart/S3MultipartUploadDAOImpl.java", "diffHunk": "@@ -72,15 +117,84 @@ public String initiateMultipartUpload(String bucket, String key,\n \t * createPreSignedPutUrl(java.lang.String, java.lang.String)\r\n \t */\r\n \t@Override\r\n-\tpublic URL createPreSignedPutUrl(String bucket, String partKey, String contentType) {\r\n+\tpublic PresignedUrl createPartUploadPreSignedUrl(String bucket, String partKey, String contentType) {\r\n \t\tlong expiration = System.currentTimeMillis()+ PRE_SIGNED_URL_EXPIRATION_MS;\r\n+\t\t\r\n \t\tGeneratePresignedUrlRequest request = new GeneratePresignedUrlRequest(\r\n \t\t\t\tbucket, partKey).withMethod(HttpMethod.PUT).withExpiration(\r\n \t\t\t\tnew Date(expiration));\r\n-\t\tif(StringUtils.isNotEmpty(contentType)){\r\n+\t\t\r\n+\t\tPresignedUrl presignedUrl = new PresignedUrl();\r\n+\t\t\r\n+\t\tif (StringUtils.isNotEmpty(contentType)){\r\n \t\t\trequest.setContentType(contentType);\r\n+\t\t\tpresignedUrl.withSignedHeader(HttpHeaders.CONTENT_TYPE, contentType);\r\n \t\t}\r\n-\t\treturn s3Client.generatePresignedUrl(request);\r\n+\t\t\r\n+\t\tURL url = s3Client.generatePresignedUrl(request);\r\n+\r\n+\t\tpresignedUrl.withUrl(url);\r\n+\t\t\r\n+\t\treturn presignedUrl;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic PresignedUrl createPartUploadCopyPresignedUrl(CompositeMultipartUploadStatus status, long partNumber,\r\n+\t\t\tString contentType) {\r\n+\t\tif (status.getSourceFileHandleId() == null) {\r\n+\t\t\tthrow new IllegalStateException(\"Expected a source file, found none.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (status.getFileSize() == null) {\r\n+\t\t\tthrow new IllegalStateException(\"Expected the source file size, found none.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (status.getPartSize() == null) {\r\n+\t\t\tthrow new IllegalStateException(\"Expected a part size, found none.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (status.getSourceBucket() == null) {\r\n+\t\t\tthrow new IllegalStateException(\"Expected the source file bucket, found none.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (status.getSourceKey() == null) {\r\n+\t\t\tthrow new IllegalStateException(\"Expected the source file bucket key, found none.\");\r\n+\t\t}\r\n+\t\t\r\n+\t\t// Computes the byte range\r\n+\t\tlong bytePosition = (partNumber - 1) * status.getPartSize();\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NzAxOA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499087018", "bodyText": "We need to validate with AWS support if the copy guarantees integrity. If not we can potentially open a stream to the source object for the range of bytes to compute the MD5 and compare it with the added one (not ideal but still better than re-uploading).", "author": "marcomarasca", "createdAt": "2020-10-02T23:24:20Z", "path": "lib/lib-upload/src/main/java/org/sagebionetworks/upload/multipart/S3MultipartUploadDAOImpl.java", "diffHunk": "@@ -110,6 +224,11 @@ public void validateAndAddPart(AddPartRequest request) {\n \t\ts3Client.deleteObject(request.getBucket(), request.getPartKey());\r\n \t}\r\n \r\n+\t@Override\r\n+\tpublic void validatePartCopy(CompositeMultipartUploadStatus status, long partNumber, String partMD5Hex) {\r\n+\t\t// Nothing to validate\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzQzNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499097434", "bodyText": "this might be a good fit for variable args", "author": "john-hill", "createdAt": "2020-10-03T00:31:43Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/file/MultipartManagerV2Impl.java", "diffHunk": "@@ -21,139 +17,233 @@\n import org.sagebionetworks.repo.model.dao.FileHandleDao;\r\n import org.sagebionetworks.repo.model.dbo.file.CompositeMultipartUploadStatus;\r\n import org.sagebionetworks.repo.model.dbo.file.CreateMultipartRequest;\r\n+import org.sagebionetworks.repo.model.dbo.file.MultipartRequestUtils;\r\n import org.sagebionetworks.repo.model.dbo.file.MultipartUploadDAO;\r\n import org.sagebionetworks.repo.model.file.AddPartRequest;\r\n import org.sagebionetworks.repo.model.file.AddPartResponse;\r\n import org.sagebionetworks.repo.model.file.AddPartState;\r\n import org.sagebionetworks.repo.model.file.BatchPresignedUploadUrlRequest;\r\n import org.sagebionetworks.repo.model.file.BatchPresignedUploadUrlResponse;\r\n+import org.sagebionetworks.repo.model.file.CloudProviderFileHandleInterface;\r\n import org.sagebionetworks.repo.model.file.CompleteMultipartRequest;\r\n+import org.sagebionetworks.repo.model.file.FileHandle;\r\n+import org.sagebionetworks.repo.model.file.FileHandleAssociation;\r\n import org.sagebionetworks.repo.model.file.GoogleCloudFileHandle;\r\n+import org.sagebionetworks.repo.model.file.MultipartRequest;\r\n+import org.sagebionetworks.repo.model.file.MultipartUploadCopyRequest;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadRequest;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadState;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadStatus;\r\n import org.sagebionetworks.repo.model.file.PartMD5;\r\n import org.sagebionetworks.repo.model.file.PartPresignedUrl;\r\n import org.sagebionetworks.repo.model.file.PartUtils;\r\n import org.sagebionetworks.repo.model.file.S3FileHandle;\r\n-import org.sagebionetworks.repo.model.file.CloudProviderFileHandleInterface;\r\n import org.sagebionetworks.repo.model.file.UploadType;\r\n import org.sagebionetworks.repo.model.jdo.NameValidation;\r\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\r\n import org.sagebionetworks.repo.transactions.WriteTransaction;\r\n-import org.sagebionetworks.schema.adapter.JSONEntity;\r\n-import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\r\n-import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\r\n+import org.sagebionetworks.upload.multipart.CloudServiceMultipartUploadDAO;\r\n import org.sagebionetworks.upload.multipart.CloudServiceMultipartUploadDAOProvider;\r\n import org.sagebionetworks.upload.multipart.MultipartUploadUtils;\r\n+import org.sagebionetworks.upload.multipart.PresignedUrl;\r\n import org.sagebionetworks.util.ValidateArgument;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n \r\n-\r\n+@Service\r\n public class MultipartManagerV2Impl implements MultipartManagerV2 {\r\n \r\n \t@Autowired\r\n-\tCloudServiceMultipartUploadDAOProvider cloudServiceMultipartUploadDAOProvider;\r\n+\tprivate CloudServiceMultipartUploadDAOProvider cloudServiceMultipartUploadDAOProvider;\r\n \r\n \t@Autowired\r\n-\tMultipartUploadDAO multipartUploadDAO;\r\n+\tprivate MultipartUploadDAO multipartUploadDAO;\r\n \r\n \t@Autowired\r\n-\tFileHandleDao fileHandleDao;\r\n+\tprivate FileHandleDao fileHandleDao;\r\n \r\n \t@Autowired\r\n-\tProjectSettingsManager projectSettingsManager;\r\n+\tprivate ProjectSettingsManager projectSettingsManager;\r\n \r\n \t@Autowired\r\n-\tIdGenerator idGenerator;\r\n+\tprivate IdGenerator idGenerator;\r\n+\t\r\n+\t@Autowired\r\n+\tprivate FileHandleAuthorizationManager authManager;\r\n+\t\r\n \r\n-\t/*\r\n-\t * (non-Javadoc)\r\n-\t * \r\n-\t * @see org.sagebionetworks.repo.manager.file.MultipartManagerV2#\r\n-\t * startOrResumeMultipartUpload(org.sagebionetworks.repo.model.UserInfo,\r\n-\t * org.sagebionetworks.repo.model.file.MultipartUploadRequest,\r\n-\t * java.lang.Boolean)\r\n-\t */\r\n-\t@WriteTransaction\r\n \t@Override\r\n-\tpublic MultipartUploadStatus startOrResumeMultipartUpload(UserInfo user,\r\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  MultipartUploadRequest request, boolean forceRestart) {\r\n-\t\tValidateArgument.required(user, \"UserInfo\");\r\n-\t\tValidateArgument.required(user.getId(), \"UserInfo.getId\");\r\n-\t\tValidateArgument.required(request, \"MultipartUploadRequest\");\r\n-\t\tValidateArgument.requiredNotEmpty(request.getFileName(),\r\n-\t\t\t\t\"MultipartUploadRequest.fileName\");\r\n-\t\tValidateArgument.required(request.getFileSizeBytes(),\r\n-\t\t\t\t\"MultipartUploadRequest.fileSizeBytes\");\r\n-\t\tValidateArgument.required(request.getPartSizeBytes(),\r\n-\t\t\t\t\"MultipartUploadRequest.PartSizeBytes\");\r\n-\t\tValidateArgument.requiredNotEmpty(request.getContentMD5Hex(),\r\n-\t\t\t\t\"MultipartUploadRequest.MD5Hex\");\r\n-\r\n-\t\t//validate file name\r\n-\t\tNameValidation.validateName(request.getFileName());\r\n-\r\n-\t\t// anonymous cannot upload. See: PLFM-2621.\r\n-\t\tif (AuthorizationUtils.isUserAnonymous(user)) {\r\n-\t\t\tthrow new UnauthorizedException(\"Anonymous cannot upload files.\");\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartOperation(UserInfo user, MultipartRequest request, boolean forceRestart) {\r\n+\t\tValidateArgument.required(request, \"request\");\r\n+\t\t\r\n+\t\tif (request instanceof MultipartUploadRequest) {\r\n+\t\t\treturn startOrResumeMultipartUpload(user, (MultipartUploadRequest) request, forceRestart);\r\n+\t\t} else if (request instanceof MultipartUploadCopyRequest) {\r\n+\t\t\treturn startOrResumeMultipartUploadCopy(user, (MultipartUploadCopyRequest) request, forceRestart);\r\n \t\t}\r\n-\t\t// The MD5 is used to identify if this upload request already exists for\r\n-\t\t// this user.\r\n-\t\tString requestMD5Hex = calculateMD5AsHex(request);\r\n+\t\t\r\n+\t\tthrow new UnsupportedOperationException(\"Request type unsupported: \" + request.getClass().getSimpleName());\r\n+\t}\r\n+\r\n+\t@Override\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartUpload(UserInfo user, MultipartUploadRequest request, boolean forceRestart) {\r\n+\t\treturn startOrResumeMultipartRequest(user, request, forceRestart, this::validateMultipartUpload, this::createNewMultipartUpload);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request, boolean forceRestart) {\r\n+\t\treturn startOrResumeMultipartRequest(user, request, forceRestart, this::validateMultipartUploadCopy, this::createNewMultipartUploadCopy);\r\n+\t}\r\n+\t\r\n+\tprivate <T extends MultipartRequest> MultipartUploadStatus startOrResumeMultipartRequest(UserInfo user, T request, boolean forceRestart, MultipartRequestValidator<T> validator, MultipartRequestInitiator<T> initiator) {\r\n+\t\t\r\n+\t\tvalidator.validate(user, request);\r\n+\t\t\r\n+\t\t// The MD5 is used to identify if this upload request already exists for this user.\r\n+\t\tString requestMD5Hex = MultipartRequestUtils.calculateMD5AsHex(request);\r\n+\t\t\r\n \t\t// Clear all data if this is a forced restart\r\n \t\tif (forceRestart) {\r\n \t\t\tmultipartUploadDAO.deleteUploadStatus(user.getId(), requestMD5Hex);\r\n \t\t}\r\n \r\n \t\t// Has an upload already been started for this user and request\r\n-\t\tCompositeMultipartUploadStatus status = multipartUploadDAO\r\n-\t\t\t\t.getUploadStatus(user.getId(), requestMD5Hex);\r\n+\t\tCompositeMultipartUploadStatus status = multipartUploadDAO.getUploadStatus(user.getId(), requestMD5Hex);\r\n+\t\t\r\n \t\tif (status == null) {\r\n+\t\t\tStorageLocationSetting storageLocation = projectSettingsManager.getStorageLocationSetting(request.getStorageLocationId());\r\n+\r\n \t\t\t// Since the status for this file does not exist, create it.\r\n-\t\t\tstatus = createNewMultipartUpload(user, request, requestMD5Hex);\r\n+\t\t\tstatus = initiator.initiate(user, request, requestMD5Hex, storageLocation);\r\n \t\t}\r\n+\t\t\r\n \t\t// Calculate the parts state for this file.\r\n \t\tString partsState = setupPartState(status);\r\n+\t\t\r\n \t\tstatus.getMultipartUploadStatus().setPartsState(partsState);\r\n+\t\t\r\n \t\treturn status.getMultipartUploadStatus();\r\n \t}\r\n+\t\r\n+\tprivate void validateMultipartRequest(UserInfo user, MultipartRequest request) {\r\n+\t\tValidateArgument.required(user, \"UserInfo\");\r\n+\t\tValidateArgument.required(user.getId(), \"UserInfo.getId\");\r\n+\t\tValidateArgument.required(request, \"request\");\r\n+\t\t\r\n+\t\tString requestClass = request.getClass().getSimpleName();\r\n+\t\t\r\n+\t\tValidateArgument.required(request.getPartSizeBytes(), requestClass + \".PartSizeBytes\");\r\n+\r\n+\t\t// anonymous cannot upload. See: PLFM-2621.\r\n+\t\tif (AuthorizationUtils.isUserAnonymous(user)) {\r\n+\t\t\tthrow new UnauthorizedException(\"Anonymous cannot upload files.\");\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tprivate void validateMultipartUpload(UserInfo user, MultipartUploadRequest request) {\r\n+\t\tvalidateMultipartRequest(user, request);\r\n+\t\tValidateArgument.requiredNotEmpty(request.getFileName(), \"MultipartUploadRequest.fileName\");\r\n+\t\tValidateArgument.required(request.getFileSizeBytes(), \"MultipartUploadRequest.fileSizeBytes\");\r\n+\t\tValidateArgument.requiredNotEmpty(request.getContentMD5Hex(), \"MultipartUploadRequest.MD5Hex\");\r\n+\r\n+\t\t//validate file name\r\n+\t\tNameValidation.validateName(request.getFileName());\r\n+\t}\r\n+\t\r\n+\tprivate void validateMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request) {\r\n+\t\tvalidateMultipartRequest(user, request);\r\n+\t\tValidateArgument.required(request.getSourceFileHandleAssociation(), \"MultipartUploadCopyRequest.sourceFileHandleAssociation\");\r\n+\t\tValidateArgument.required(request.getStorageLocationId(), \"MultipartUploadCopyRequest.storageLocationId\");\r\n+\t\t\r\n+\t\tif (!StringUtils.isBlank(request.getFileName())) {\r\n+\t\t\t//validate file name\r\n+\t\t\tNameValidation.validateName(request.getFileName());\r\n+\t\t}\r\n+\t}\r\n \r\n \t/**\r\n \t * Create a new multi-part upload both in the cloud service and the database.\r\n \t * \r\n \t * @param user\r\n \t * @param request\r\n-\t * @param requestMD5Hex\r\n+\t * @param requestHash\r\n \t * @return\r\n \t */\r\n-\tprivate CompositeMultipartUploadStatus createNewMultipartUpload(\r\n-\t\t\tUserInfo user, MultipartUploadRequest request, String requestMD5Hex) {\r\n-\t\t// This is the first time we have seen this request.\r\n-\t\tStorageLocationSetting locationSettings = getStorageLocationSettings(request.getStorageLocationId());\r\n-\t\tUploadType uploadType;\r\n-\t\tif (locationSettings == null) { // Null location represents Synapse S3 storage.\r\n-\t\t\tuploadType = UploadType.S3;\r\n-\t\t} else {\r\n-\t\t\tuploadType = locationSettings.getUploadType();\r\n-\t\t}\r\n+\tprivate CompositeMultipartUploadStatus createNewMultipartUpload(UserInfo user, MultipartUploadRequest request, String requestHash, StorageLocationSetting storageLocation) {\r\n+\t\tUploadType uploadType = storageLocation == null ? UploadType.S3 : storageLocation.getUploadType();\r\n+\t\t\r\n \t\t// the bucket depends on the upload location used.\r\n-\t\tString bucket = MultipartUtils.getBucket(locationSettings);\r\n+\t\tString bucket = MultipartUtils.getBucket(storageLocation);\r\n \t\t// create a new key for this file.\r\n-\t\tString key = MultipartUtils.createNewKey(user.getId().toString(),\r\n-\t\t\t\trequest.getFileName(), locationSettings);\r\n-\t\tString uploadToken = cloudServiceMultipartUploadDAOProvider\r\n-\t\t\t\t.getCloudServiceMultipartUploadDao(uploadType)\r\n-\t\t\t\t.initiateMultipartUpload(bucket, key, request);\r\n-\t\tString requestJson = createRequestJSON(request);\r\n+\t\tString key = MultipartUtils.createNewKey(user.getId().toString(), request.getFileName(), storageLocation);\r\n+\t\t\r\n+\t\tString uploadToken = getCloudServiceMultipartDao(uploadType).initiateMultipartUpload(bucket, key, request);\r\n+\t\t\r\n+\t\tString requestJson = MultipartRequestUtils.createRequestJSON(request);\r\n \t\t// How many parts will be needed to upload this file?\r\n-\t\tint numberParts = PartUtils.calculateNumberOfParts(request.getFileSizeBytes(),\r\n-\t\t\t\trequest.getPartSizeBytes());\r\n+\t\tint numberParts = PartUtils.calculateNumberOfParts(request.getFileSizeBytes(), request.getPartSizeBytes());\r\n \t\t// Start the upload\r\n \t\treturn multipartUploadDAO\r\n \t\t\t\t.createUploadStatus(new CreateMultipartRequest(user.getId(),\r\n-\t\t\t\t\t\trequestMD5Hex, requestJson, uploadToken, uploadType,\r\n-\t\t\t\t\t\tbucket, key, numberParts));\r\n+\t\t\t\t\t\trequestHash, requestJson, uploadToken, uploadType,\r\n+\t\t\t\t\t\tbucket, key, numberParts, request.getPartSizeBytes()));\r\n+\t}\r\n+\t\r\n+\tprivate CompositeMultipartUploadStatus createNewMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request, String requestHash, StorageLocationSetting storageLocation) {\r\n+\t\tUploadType uploadType = storageLocation.getUploadType();\r\n+\t\t\r\n+\t\tFileHandleAssociation association = request.getSourceFileHandleAssociation();\r\n+\t\t\r\n+\t\t// Verifies that the user can download the source file\r\n+\t\tauthManager.canDownLoadFile(user, Arrays.asList(association))\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NzUyNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499097524", "bodyText": "destination", "author": "john-hill", "createdAt": "2020-10-03T00:32:29Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/file/MultipartManagerV2Impl.java", "diffHunk": "@@ -21,139 +17,233 @@\n import org.sagebionetworks.repo.model.dao.FileHandleDao;\r\n import org.sagebionetworks.repo.model.dbo.file.CompositeMultipartUploadStatus;\r\n import org.sagebionetworks.repo.model.dbo.file.CreateMultipartRequest;\r\n+import org.sagebionetworks.repo.model.dbo.file.MultipartRequestUtils;\r\n import org.sagebionetworks.repo.model.dbo.file.MultipartUploadDAO;\r\n import org.sagebionetworks.repo.model.file.AddPartRequest;\r\n import org.sagebionetworks.repo.model.file.AddPartResponse;\r\n import org.sagebionetworks.repo.model.file.AddPartState;\r\n import org.sagebionetworks.repo.model.file.BatchPresignedUploadUrlRequest;\r\n import org.sagebionetworks.repo.model.file.BatchPresignedUploadUrlResponse;\r\n+import org.sagebionetworks.repo.model.file.CloudProviderFileHandleInterface;\r\n import org.sagebionetworks.repo.model.file.CompleteMultipartRequest;\r\n+import org.sagebionetworks.repo.model.file.FileHandle;\r\n+import org.sagebionetworks.repo.model.file.FileHandleAssociation;\r\n import org.sagebionetworks.repo.model.file.GoogleCloudFileHandle;\r\n+import org.sagebionetworks.repo.model.file.MultipartRequest;\r\n+import org.sagebionetworks.repo.model.file.MultipartUploadCopyRequest;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadRequest;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadState;\r\n import org.sagebionetworks.repo.model.file.MultipartUploadStatus;\r\n import org.sagebionetworks.repo.model.file.PartMD5;\r\n import org.sagebionetworks.repo.model.file.PartPresignedUrl;\r\n import org.sagebionetworks.repo.model.file.PartUtils;\r\n import org.sagebionetworks.repo.model.file.S3FileHandle;\r\n-import org.sagebionetworks.repo.model.file.CloudProviderFileHandleInterface;\r\n import org.sagebionetworks.repo.model.file.UploadType;\r\n import org.sagebionetworks.repo.model.jdo.NameValidation;\r\n import org.sagebionetworks.repo.model.project.StorageLocationSetting;\r\n import org.sagebionetworks.repo.transactions.WriteTransaction;\r\n-import org.sagebionetworks.schema.adapter.JSONEntity;\r\n-import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;\r\n-import org.sagebionetworks.schema.adapter.org.json.EntityFactory;\r\n+import org.sagebionetworks.upload.multipart.CloudServiceMultipartUploadDAO;\r\n import org.sagebionetworks.upload.multipart.CloudServiceMultipartUploadDAOProvider;\r\n import org.sagebionetworks.upload.multipart.MultipartUploadUtils;\r\n+import org.sagebionetworks.upload.multipart.PresignedUrl;\r\n import org.sagebionetworks.util.ValidateArgument;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n \r\n-\r\n+@Service\r\n public class MultipartManagerV2Impl implements MultipartManagerV2 {\r\n \r\n \t@Autowired\r\n-\tCloudServiceMultipartUploadDAOProvider cloudServiceMultipartUploadDAOProvider;\r\n+\tprivate CloudServiceMultipartUploadDAOProvider cloudServiceMultipartUploadDAOProvider;\r\n \r\n \t@Autowired\r\n-\tMultipartUploadDAO multipartUploadDAO;\r\n+\tprivate MultipartUploadDAO multipartUploadDAO;\r\n \r\n \t@Autowired\r\n-\tFileHandleDao fileHandleDao;\r\n+\tprivate FileHandleDao fileHandleDao;\r\n \r\n \t@Autowired\r\n-\tProjectSettingsManager projectSettingsManager;\r\n+\tprivate ProjectSettingsManager projectSettingsManager;\r\n \r\n \t@Autowired\r\n-\tIdGenerator idGenerator;\r\n+\tprivate IdGenerator idGenerator;\r\n+\t\r\n+\t@Autowired\r\n+\tprivate FileHandleAuthorizationManager authManager;\r\n+\t\r\n \r\n-\t/*\r\n-\t * (non-Javadoc)\r\n-\t * \r\n-\t * @see org.sagebionetworks.repo.manager.file.MultipartManagerV2#\r\n-\t * startOrResumeMultipartUpload(org.sagebionetworks.repo.model.UserInfo,\r\n-\t * org.sagebionetworks.repo.model.file.MultipartUploadRequest,\r\n-\t * java.lang.Boolean)\r\n-\t */\r\n-\t@WriteTransaction\r\n \t@Override\r\n-\tpublic MultipartUploadStatus startOrResumeMultipartUpload(UserInfo user,\r\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  MultipartUploadRequest request, boolean forceRestart) {\r\n-\t\tValidateArgument.required(user, \"UserInfo\");\r\n-\t\tValidateArgument.required(user.getId(), \"UserInfo.getId\");\r\n-\t\tValidateArgument.required(request, \"MultipartUploadRequest\");\r\n-\t\tValidateArgument.requiredNotEmpty(request.getFileName(),\r\n-\t\t\t\t\"MultipartUploadRequest.fileName\");\r\n-\t\tValidateArgument.required(request.getFileSizeBytes(),\r\n-\t\t\t\t\"MultipartUploadRequest.fileSizeBytes\");\r\n-\t\tValidateArgument.required(request.getPartSizeBytes(),\r\n-\t\t\t\t\"MultipartUploadRequest.PartSizeBytes\");\r\n-\t\tValidateArgument.requiredNotEmpty(request.getContentMD5Hex(),\r\n-\t\t\t\t\"MultipartUploadRequest.MD5Hex\");\r\n-\r\n-\t\t//validate file name\r\n-\t\tNameValidation.validateName(request.getFileName());\r\n-\r\n-\t\t// anonymous cannot upload. See: PLFM-2621.\r\n-\t\tif (AuthorizationUtils.isUserAnonymous(user)) {\r\n-\t\t\tthrow new UnauthorizedException(\"Anonymous cannot upload files.\");\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartOperation(UserInfo user, MultipartRequest request, boolean forceRestart) {\r\n+\t\tValidateArgument.required(request, \"request\");\r\n+\t\t\r\n+\t\tif (request instanceof MultipartUploadRequest) {\r\n+\t\t\treturn startOrResumeMultipartUpload(user, (MultipartUploadRequest) request, forceRestart);\r\n+\t\t} else if (request instanceof MultipartUploadCopyRequest) {\r\n+\t\t\treturn startOrResumeMultipartUploadCopy(user, (MultipartUploadCopyRequest) request, forceRestart);\r\n \t\t}\r\n-\t\t// The MD5 is used to identify if this upload request already exists for\r\n-\t\t// this user.\r\n-\t\tString requestMD5Hex = calculateMD5AsHex(request);\r\n+\t\t\r\n+\t\tthrow new UnsupportedOperationException(\"Request type unsupported: \" + request.getClass().getSimpleName());\r\n+\t}\r\n+\r\n+\t@Override\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartUpload(UserInfo user, MultipartUploadRequest request, boolean forceRestart) {\r\n+\t\treturn startOrResumeMultipartRequest(user, request, forceRestart, this::validateMultipartUpload, this::createNewMultipartUpload);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\t@WriteTransaction\r\n+\tpublic MultipartUploadStatus startOrResumeMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request, boolean forceRestart) {\r\n+\t\treturn startOrResumeMultipartRequest(user, request, forceRestart, this::validateMultipartUploadCopy, this::createNewMultipartUploadCopy);\r\n+\t}\r\n+\t\r\n+\tprivate <T extends MultipartRequest> MultipartUploadStatus startOrResumeMultipartRequest(UserInfo user, T request, boolean forceRestart, MultipartRequestValidator<T> validator, MultipartRequestInitiator<T> initiator) {\r\n+\t\t\r\n+\t\tvalidator.validate(user, request);\r\n+\t\t\r\n+\t\t// The MD5 is used to identify if this upload request already exists for this user.\r\n+\t\tString requestMD5Hex = MultipartRequestUtils.calculateMD5AsHex(request);\r\n+\t\t\r\n \t\t// Clear all data if this is a forced restart\r\n \t\tif (forceRestart) {\r\n \t\t\tmultipartUploadDAO.deleteUploadStatus(user.getId(), requestMD5Hex);\r\n \t\t}\r\n \r\n \t\t// Has an upload already been started for this user and request\r\n-\t\tCompositeMultipartUploadStatus status = multipartUploadDAO\r\n-\t\t\t\t.getUploadStatus(user.getId(), requestMD5Hex);\r\n+\t\tCompositeMultipartUploadStatus status = multipartUploadDAO.getUploadStatus(user.getId(), requestMD5Hex);\r\n+\t\t\r\n \t\tif (status == null) {\r\n+\t\t\tStorageLocationSetting storageLocation = projectSettingsManager.getStorageLocationSetting(request.getStorageLocationId());\r\n+\r\n \t\t\t// Since the status for this file does not exist, create it.\r\n-\t\t\tstatus = createNewMultipartUpload(user, request, requestMD5Hex);\r\n+\t\t\tstatus = initiator.initiate(user, request, requestMD5Hex, storageLocation);\r\n \t\t}\r\n+\t\t\r\n \t\t// Calculate the parts state for this file.\r\n \t\tString partsState = setupPartState(status);\r\n+\t\t\r\n \t\tstatus.getMultipartUploadStatus().setPartsState(partsState);\r\n+\t\t\r\n \t\treturn status.getMultipartUploadStatus();\r\n \t}\r\n+\t\r\n+\tprivate void validateMultipartRequest(UserInfo user, MultipartRequest request) {\r\n+\t\tValidateArgument.required(user, \"UserInfo\");\r\n+\t\tValidateArgument.required(user.getId(), \"UserInfo.getId\");\r\n+\t\tValidateArgument.required(request, \"request\");\r\n+\t\t\r\n+\t\tString requestClass = request.getClass().getSimpleName();\r\n+\t\t\r\n+\t\tValidateArgument.required(request.getPartSizeBytes(), requestClass + \".PartSizeBytes\");\r\n+\r\n+\t\t// anonymous cannot upload. See: PLFM-2621.\r\n+\t\tif (AuthorizationUtils.isUserAnonymous(user)) {\r\n+\t\t\tthrow new UnauthorizedException(\"Anonymous cannot upload files.\");\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tprivate void validateMultipartUpload(UserInfo user, MultipartUploadRequest request) {\r\n+\t\tvalidateMultipartRequest(user, request);\r\n+\t\tValidateArgument.requiredNotEmpty(request.getFileName(), \"MultipartUploadRequest.fileName\");\r\n+\t\tValidateArgument.required(request.getFileSizeBytes(), \"MultipartUploadRequest.fileSizeBytes\");\r\n+\t\tValidateArgument.requiredNotEmpty(request.getContentMD5Hex(), \"MultipartUploadRequest.MD5Hex\");\r\n+\r\n+\t\t//validate file name\r\n+\t\tNameValidation.validateName(request.getFileName());\r\n+\t}\r\n+\t\r\n+\tprivate void validateMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request) {\r\n+\t\tvalidateMultipartRequest(user, request);\r\n+\t\tValidateArgument.required(request.getSourceFileHandleAssociation(), \"MultipartUploadCopyRequest.sourceFileHandleAssociation\");\r\n+\t\tValidateArgument.required(request.getStorageLocationId(), \"MultipartUploadCopyRequest.storageLocationId\");\r\n+\t\t\r\n+\t\tif (!StringUtils.isBlank(request.getFileName())) {\r\n+\t\t\t//validate file name\r\n+\t\t\tNameValidation.validateName(request.getFileName());\r\n+\t\t}\r\n+\t}\r\n \r\n \t/**\r\n \t * Create a new multi-part upload both in the cloud service and the database.\r\n \t * \r\n \t * @param user\r\n \t * @param request\r\n-\t * @param requestMD5Hex\r\n+\t * @param requestHash\r\n \t * @return\r\n \t */\r\n-\tprivate CompositeMultipartUploadStatus createNewMultipartUpload(\r\n-\t\t\tUserInfo user, MultipartUploadRequest request, String requestMD5Hex) {\r\n-\t\t// This is the first time we have seen this request.\r\n-\t\tStorageLocationSetting locationSettings = getStorageLocationSettings(request.getStorageLocationId());\r\n-\t\tUploadType uploadType;\r\n-\t\tif (locationSettings == null) { // Null location represents Synapse S3 storage.\r\n-\t\t\tuploadType = UploadType.S3;\r\n-\t\t} else {\r\n-\t\t\tuploadType = locationSettings.getUploadType();\r\n-\t\t}\r\n+\tprivate CompositeMultipartUploadStatus createNewMultipartUpload(UserInfo user, MultipartUploadRequest request, String requestHash, StorageLocationSetting storageLocation) {\r\n+\t\tUploadType uploadType = storageLocation == null ? UploadType.S3 : storageLocation.getUploadType();\r\n+\t\t\r\n \t\t// the bucket depends on the upload location used.\r\n-\t\tString bucket = MultipartUtils.getBucket(locationSettings);\r\n+\t\tString bucket = MultipartUtils.getBucket(storageLocation);\r\n \t\t// create a new key for this file.\r\n-\t\tString key = MultipartUtils.createNewKey(user.getId().toString(),\r\n-\t\t\t\trequest.getFileName(), locationSettings);\r\n-\t\tString uploadToken = cloudServiceMultipartUploadDAOProvider\r\n-\t\t\t\t.getCloudServiceMultipartUploadDao(uploadType)\r\n-\t\t\t\t.initiateMultipartUpload(bucket, key, request);\r\n-\t\tString requestJson = createRequestJSON(request);\r\n+\t\tString key = MultipartUtils.createNewKey(user.getId().toString(), request.getFileName(), storageLocation);\r\n+\t\t\r\n+\t\tString uploadToken = getCloudServiceMultipartDao(uploadType).initiateMultipartUpload(bucket, key, request);\r\n+\t\t\r\n+\t\tString requestJson = MultipartRequestUtils.createRequestJSON(request);\r\n \t\t// How many parts will be needed to upload this file?\r\n-\t\tint numberParts = PartUtils.calculateNumberOfParts(request.getFileSizeBytes(),\r\n-\t\t\t\trequest.getPartSizeBytes());\r\n+\t\tint numberParts = PartUtils.calculateNumberOfParts(request.getFileSizeBytes(), request.getPartSizeBytes());\r\n \t\t// Start the upload\r\n \t\treturn multipartUploadDAO\r\n \t\t\t\t.createUploadStatus(new CreateMultipartRequest(user.getId(),\r\n-\t\t\t\t\t\trequestMD5Hex, requestJson, uploadToken, uploadType,\r\n-\t\t\t\t\t\tbucket, key, numberParts));\r\n+\t\t\t\t\t\trequestHash, requestJson, uploadToken, uploadType,\r\n+\t\t\t\t\t\tbucket, key, numberParts, request.getPartSizeBytes()));\r\n+\t}\r\n+\t\r\n+\tprivate CompositeMultipartUploadStatus createNewMultipartUploadCopy(UserInfo user, MultipartUploadCopyRequest request, String requestHash, StorageLocationSetting storageLocation) {\r\n+\t\tUploadType uploadType = storageLocation.getUploadType();\r\n+\t\t\r\n+\t\tFileHandleAssociation association = request.getSourceFileHandleAssociation();\r\n+\t\t\r\n+\t\t// Verifies that the user can download the source file\r\n+\t\tauthManager.canDownLoadFile(user, Arrays.asList(association))\r\n+\t\t\t.stream()\r\n+\t\t\t.filter(status -> status.getStatus().isAuthorized())\r\n+\t\t\t.findFirst()\r\n+\t\t\t.orElseThrow(() -> \r\n+\t\t\t\tnew UnauthorizedException(\"The user is not authorized to access the source file.\")\r\n+\t\t\t);\r\n+\t\t\r\n+\t\t// Makes sure the user owns the storage location, note that the storage location id is required in the request\r\n+\t\tif (!user.isAdmin() && !user.getId().equals(storageLocation.getCreatedBy())) {\r\n+\t\t\tthrow new UnauthorizedException(\"The user does not own the storage location.\");\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMTEwNQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4213#discussion_r499101105", "bodyText": "remove the types if not used.", "author": "john-hill", "createdAt": "2020-10-03T01:02:35Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/file/MultiPartRequestType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.sagebionetworks.repo.model.dbo.file;\r\n+\r\n+import org.sagebionetworks.repo.model.file.MultipartRequest;\r\n+import org.sagebionetworks.repo.model.file.MultipartUploadRequest;\r\n+import org.sagebionetworks.repo.model.file.MultipartUploadCopyRequest;\r\n+\r\n+public enum MultiPartRequestType {\r", "originalCommit": "406b4df7f1bc12c9db0cff760126a16fd33a612a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}