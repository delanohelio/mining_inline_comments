{"pr_number": 4021, "pr_title": "PLFM-6158 - Part C: Initial refactoring of EntityField dependency", "pr_createdAt": "2020-04-27T23:07:48Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4021", "timeline": [{"oid": "e93d421277793cd401b507b8c2e6960fe1785544", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e93d421277793cd401b507b8c2e6960fe1785544", "message": "PLFM-6158: Initial approach to get rid of EntityField", "committedDate": "2020-04-27T22:30:38Z", "type": "commit"}, {"oid": "e9d5d0e9ae8c4ce413fddb879227538ad436042f", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/e9d5d0e9ae8c4ce413fddb879227538ad436042f", "message": "PLFM-6158: Deprecate method that depends on EntityField", "committedDate": "2020-04-27T22:40:51Z", "type": "commit"}, {"oid": "f58f16819ace774610aa83eb54a7440df50279a5", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/f58f16819ace774610aa83eb54a7440df50279a5", "message": "PLFM-6158: Additional parameterization by object type", "committedDate": "2020-04-27T23:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0Njg4OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4021#discussion_r416246888", "bodyText": "Convert EntityField to be more generic -> ObjectField, and use it statically in many places, but not all.", "author": "john-hill", "createdAt": "2020-04-28T00:46:03Z", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -934,6 +938,37 @@ public void createViewSnapshotFromEntityReplication(ObjectType objectType, Long\n \t\t\toutputStream.writeNext(row);\r\n \t\t});\r\n \t}\r\n+\t\r\n+\t// Translates the Column Model schema into a column metadata schema, that maps to the object/annotation replication index\r\n+\tList<ColumnMetadata> translateSchema(ObjectType objectType, List<ColumnModel> schema) {\r\n+\t\treturn schema.stream()\r\n+\t\t\t.map((ColumnModel columnModel) -> translateColumnModel(objectType, columnModel))\r\n+\t\t\t.collect(Collectors.toList());\r\n+\t}\r\n+\t\r\n+\tColumnMetadata translateColumnModel(ObjectType objectType, ColumnModel model) {\r\n+\t\t// First determine if this an object column or an annotation\r\n+\t\tOptional<EntityField> entityField = findObjectField(objectType, model);\r\n+\t\t\r\n+\t\tString selectColumnForId = SQLUtils.getColumnNameForId(model.getId());\r\n+\t\tboolean isObjectReplicationField;\r\n+\t\tString selectColumnName;\r\n+\t\t\r\n+\t\tif (entityField.isPresent()) {\r\n+\t\t\tisObjectReplicationField = true;\r\n+\t\t\tselectColumnName = entityField.get().getDatabaseColumnName();\r\n+\t\t} else {\r\n+\t\t\tisObjectReplicationField = false;\r\n+\t\t\tselectColumnName = SQLUtils.translateColumnTypeToAnnotationValueName(model.getColumnType());\r\n+\t\t}\r\n+\t\t\r\n+\t\treturn new ColumnMetadata(model, selectColumnName, selectColumnForId, isObjectReplicationField);\r\n+\t}\r\n+\t\r\n+\tOptional<EntityField> findObjectField(ObjectType objectType, ColumnModel model) {\r", "originalCommit": "f58f16819ace774610aa83eb54a7440df50279a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI1MTk2MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4021#discussion_r416251960", "bodyText": "needs a test or revert to the tested code.", "author": "john-hill", "createdAt": "2020-04-28T01:01:11Z", "path": "lib/lib-table-cluster/src/main/java/org/sagebionetworks/table/cluster/TableIndexDAOImpl.java", "diffHunk": "@@ -934,6 +938,37 @@ public void createViewSnapshotFromEntityReplication(ObjectType objectType, Long\n \t\t\toutputStream.writeNext(row);\r\n \t\t});\r\n \t}\r\n+\t\r\n+\t// Translates the Column Model schema into a column metadata schema, that maps to the object/annotation replication index\r\n+\tList<ColumnMetadata> translateSchema(ObjectType objectType, List<ColumnModel> schema) {\r\n+\t\treturn schema.stream()\r\n+\t\t\t.map((ColumnModel columnModel) -> translateColumnModel(objectType, columnModel))\r\n+\t\t\t.collect(Collectors.toList());\r\n+\t}\r\n+\t\r\n+\tColumnMetadata translateColumnModel(ObjectType objectType, ColumnModel model) {\r", "originalCommit": "f58f16819ace774610aa83eb54a7440df50279a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}