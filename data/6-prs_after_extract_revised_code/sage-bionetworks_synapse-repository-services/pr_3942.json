{"pr_number": 3942, "pr_title": "STS Move Restrictions", "pr_createdAt": "2020-02-13T03:38:20Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942", "timeline": [{"oid": "98f9be4df60e77392cbb45e141b4e2687925f20f", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/98f9be4df60e77392cbb45e141b4e2687925f20f", "message": "STS Move Restrictions", "committedDate": "2020-02-13T02:32:25Z", "type": "commit"}, {"oid": "27b76c2c62d542a34d5496356aa4836f31b164b8", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/27b76c2c62d542a34d5496356aa4836f31b164b8", "message": "Merge branch 'develop' into plfm-6007\n\nConflicts:\n\tservices/repository/src/main/java/org/sagebionetworks/repo/web/service/metadata/FileEntityMetadataProvider.java\n\tservices/repository/src/test/java/org/sagebionetworks/repo/web/service/metadata/FileEntityMetadataProviderTest.java", "committedDate": "2020-02-13T02:35:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1ODMzMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379658333", "bodyText": "separate the trash from this call", "author": "john-hill", "createdAt": "2020-02-14T21:42:49Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/NodeManagerImpl.java", "diffHunk": "@@ -713,8 +714,17 @@ public ChildStatsResponse getChildrenStats(ChildStatsRequest request) {\n \t}\n \n \t@Override\n-\tpublic boolean isEntityEmpty(String entityId) {\n-\t\treturn !nodeDao.doesNodeHaveChildren(entityId);\n+\tpublic boolean isEntityEmpty(String entityId, boolean checkTrash) {", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjY3MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379662670", "bodyText": "this can be removed if can only restore to original location", "author": "john-hill", "createdAt": "2020-02-14T21:55:06Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/ProjectSettingsManager.java", "diffHunk": "@@ -21,6 +21,13 @@\n \tOptional<ProjectSetting> getProjectSettingByProjectAndType(UserInfo userInfo, String projectId, ProjectSettingsType type)\n \t\t\tthrows DatastoreException, NotFoundException;\n \n+\t/**\n+\t * This gets the project setting (storage location setting) for the given entity without checking authorization.\n+\t * This method is mainly called by validation logic which may try to get project settings for entities inside the\n+\t * trash can. This should only be used by methods which have already checked authorization.\n+\t */\n+\tOptional<ProjectSetting> getProjectSettingByEntityUnchecked(String entityId);", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MzQxNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379663414", "bodyText": "rename to doesEntityHaveTrashedChildren", "author": "john-hill", "createdAt": "2020-02-14T21:57:10Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/trash/TrashManagerImpl.java", "diffHunk": "@@ -50,12 +51,21 @@\n \t@Autowired\n \tprivate AccessControlListDAO aclDAO;\n \n+\t@Autowired\n+\tprivate StsManager stsManager;\n+\n \t@Autowired\n \tprivate TrashCanDao trashCanDao;\n \t\n \t@Autowired\n \tprivate TransactionalMessenger transactionalMessenger;\n \n+\t@Override\n+\tpublic boolean doesParentHaveTrashedEntities(String parentId) {", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjA0Nw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379702047", "bodyText": "folderId->moveCanidateId", "author": "john-hill", "createdAt": "2020-02-15T00:43:31Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Component\n+public class StsManagerImpl implements StsManager {\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Override\n+\tpublic void validateCanAddFile(UserInfo userInfo, String fileHandleId, String parentId) {\n+\t\t// Is the file STS-enabled?\n+\t\t// Note that getRawFileHandle throws if the file handle exists, but the storage location ID might be null.\n+\t\tFileHandle fileHandle = fileHandleManager.getRawFileHandleUnchecked(fileHandleId);\n+\t\tLong fileStorageLocationId = fileHandle.getStorageLocationId();\n+\t\tStorageLocationSetting fileStorageLocationSetting = projectSettingsManager.getStorageLocationSetting(\n+\t\t\t\tfileStorageLocationId);\n+\t\tboolean fileStsEnabled = projectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting);\n+\n+\t\t// Is the parent STS-enabled?\n+\t\tLong parentStorageLocationId = null;\n+\t\tboolean parentStsEnabled = false;\n+\t\tOptional<UploadDestinationListSetting> projectSetting = projectSettingsManager.getProjectSettingForNode(\n+\t\t\t\tuserInfo, parentId, ProjectSettingsType.upload, UploadDestinationListSetting.class);\n+\t\tif (projectSetting.isPresent()) {\n+\t\t\t// Short-cut: Just grab the first storage location ID. We only compare storage location IDs if STS is\n+\t\t\t// enabled, and folders with STS enabled can't have multiple storage locations.\n+\t\t\tparentStsEnabled = projectSettingsManager.isStsStorageLocationSetting(projectSetting.get());\n+\t\t\tparentStorageLocationId = projectSetting.get().getLocations().get(0);\n+\t\t}\n+\n+\t\t// If either the file's storage location or the parent's storage location has STS enabled, then the storage\n+\t\t// locations must be the same. ie, Files in STS-enabled Storage Locations must be placed in a folder with the\n+\t\t// same storage location, and folders with STS-enabled Storage Locations can only contain files from that\n+\t\t// storage location.\n+\t\tif ((fileStsEnabled || parentStsEnabled) && !Objects.equals(fileStorageLocationId, parentStorageLocationId)) {\n+\t\t\t// Determine which error message to throw depending on whether the file is STS-enabled or the parent.\n+\t\t\tif (fileStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Files in STS-enabled storage locations can only be placed in \" +\n+\t\t\t\t\t\t\"folders with the same storage location\");\n+\t\t\t}\n+\t\t\t//noinspection ConstantConditions\n+\t\t\tif (parentStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Folders with STS-enabled storage locations can only accept \" +\n+\t\t\t\t\t\t\"files with the same storage location\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void validateCanMoveFolder(UserInfo userInfo, String folderId, String oldParentId, String newParentId) {", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwMjEwNQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379702105", "bodyText": "isCanidateSTSRoot", "author": "john-hill", "createdAt": "2020-02-15T00:43:59Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/sts/StsManagerImpl.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSetting;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Component\n+public class StsManagerImpl implements StsManager {\n+\t@Autowired\n+\tprivate FileHandleManager fileHandleManager;\n+\n+\t@Autowired\n+\tprivate ProjectSettingsManager projectSettingsManager;\n+\n+\t@Override\n+\tpublic void validateCanAddFile(UserInfo userInfo, String fileHandleId, String parentId) {\n+\t\t// Is the file STS-enabled?\n+\t\t// Note that getRawFileHandle throws if the file handle exists, but the storage location ID might be null.\n+\t\tFileHandle fileHandle = fileHandleManager.getRawFileHandleUnchecked(fileHandleId);\n+\t\tLong fileStorageLocationId = fileHandle.getStorageLocationId();\n+\t\tStorageLocationSetting fileStorageLocationSetting = projectSettingsManager.getStorageLocationSetting(\n+\t\t\t\tfileStorageLocationId);\n+\t\tboolean fileStsEnabled = projectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting);\n+\n+\t\t// Is the parent STS-enabled?\n+\t\tLong parentStorageLocationId = null;\n+\t\tboolean parentStsEnabled = false;\n+\t\tOptional<UploadDestinationListSetting> projectSetting = projectSettingsManager.getProjectSettingForNode(\n+\t\t\t\tuserInfo, parentId, ProjectSettingsType.upload, UploadDestinationListSetting.class);\n+\t\tif (projectSetting.isPresent()) {\n+\t\t\t// Short-cut: Just grab the first storage location ID. We only compare storage location IDs if STS is\n+\t\t\t// enabled, and folders with STS enabled can't have multiple storage locations.\n+\t\t\tparentStsEnabled = projectSettingsManager.isStsStorageLocationSetting(projectSetting.get());\n+\t\t\tparentStorageLocationId = projectSetting.get().getLocations().get(0);\n+\t\t}\n+\n+\t\t// If either the file's storage location or the parent's storage location has STS enabled, then the storage\n+\t\t// locations must be the same. ie, Files in STS-enabled Storage Locations must be placed in a folder with the\n+\t\t// same storage location, and folders with STS-enabled Storage Locations can only contain files from that\n+\t\t// storage location.\n+\t\tif ((fileStsEnabled || parentStsEnabled) && !Objects.equals(fileStorageLocationId, parentStorageLocationId)) {\n+\t\t\t// Determine which error message to throw depending on whether the file is STS-enabled or the parent.\n+\t\t\tif (fileStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Files in STS-enabled storage locations can only be placed in \" +\n+\t\t\t\t\t\t\"folders with the same storage location\");\n+\t\t\t}\n+\t\t\t//noinspection ConstantConditions\n+\t\t\tif (parentStsEnabled) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Folders with STS-enabled storage locations can only accept \" +\n+\t\t\t\t\t\t\"files with the same storage location\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void validateCanMoveFolder(UserInfo userInfo, String folderId, String oldParentId, String newParentId) {\n+\t\tif (oldParentId.equals(newParentId)) {\n+\t\t\t// Folder is not being moved. Trivial.\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Folder is being moved. STS restrictions may apply.\n+\t\tboolean isRootFolder = false;", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDM4MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/3942#discussion_r379704380", "bodyText": "local param with a name can help readers", "author": "john-hill", "createdAt": "2020-02-15T01:02:02Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/sts/StsManagerImplTest.java", "diffHunk": "@@ -0,0 +1,371 @@\n+package org.sagebionetworks.repo.manager.sts;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.sagebionetworks.repo.manager.ProjectSettingsManager;\n+import org.sagebionetworks.repo.manager.file.FileHandleManager;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.file.S3FileHandle;\n+import org.sagebionetworks.repo.model.project.ProjectSettingsType;\n+import org.sagebionetworks.repo.model.project.S3StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.StorageLocationSetting;\n+import org.sagebionetworks.repo.model.project.UploadDestinationListSetting;\n+\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class StsManagerImplTest {\n+\tprivate static final String FILE_HANDLE_ID = \"file-handle-id\";\n+\tprivate static final String FOLDER_ID = \"syn1111\";\n+\tprivate static final String PARENT_ENTITY_ID = \"syn2222\";\n+\tprivate static final String NEW_PARENT_ID = \"syn3333\";\n+\tprivate static final String OLD_PARENT_ID = \"syn4444\";\n+\tprivate static final UserInfo USER_INFO = new UserInfo(false);\n+\n+\tprivate static final long STS_STORAGE_LOCATION_ID = 123;\n+\tprivate static final long NON_STS_STORAGE_LOCATION_ID = 456;\n+\tprivate static final long DIFFERENT_STS_STORAGE_LOCATION_ID = 789;\n+\n+\t@Mock\n+\tprivate FileHandleManager mockFileHandleManager;\n+\n+\t@Mock\n+\tprivate ProjectSettingsManager mockProjectSettingsManager;\n+\n+\t@InjectMocks\n+\tprivate StsManagerImpl stsManager;\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInSameStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInDifferentStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(true, DIFFERENT_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInNonStsParent() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithProjectSetting(false, NON_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_StsFileInParentWithoutProjectSettings() {\n+\t\tsetupFile(true);\n+\t\tsetupFolderWithoutProjectSetting();\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Files in STS-enabled storage locations can only be placed in folders with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInStsParent() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Folders with STS-enabled storage locations can only accept files with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInNonStsParent() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithProjectSetting(false, NON_STS_STORAGE_LOCATION_ID);\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_NonStsFileInParentWithoutProjectSettings() {\n+\t\tsetupFile(false);\n+\t\tsetupFolderWithoutProjectSetting();\n+\t\t// Method under test - Does not throw.\n+\t\tstsManager.validateCanAddFile(USER_INFO, FILE_HANDLE_ID, PARENT_ENTITY_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanAddFile_FileWithoutStorageLocationInStsParent() {\n+\t\t// Edge-case: Files can be created without a storage location. These go to Synapse default storage (which has\n+\t\t// no STS).\n+\t\tS3FileHandle fileHandle = new S3FileHandle();\n+\t\tfileHandle.setId(FILE_HANDLE_ID);\n+\t\tfileHandle.setStorageLocationId(null);\n+\n+\t\twhen(mockFileHandleManager.getRawFileHandleUnchecked(FILE_HANDLE_ID)).thenReturn(fileHandle);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(null)).thenReturn(null);\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting((StorageLocationSetting) null)).thenReturn(false);\n+\n+\t\tsetupFolderWithProjectSetting(true, STS_STORAGE_LOCATION_ID);\n+\n+\t\t// Method under test - Throws.\n+\t\tException ex = assertThrows(IllegalArgumentException.class, () -> stsManager.validateCanAddFile(USER_INFO,\n+\t\t\t\tFILE_HANDLE_ID, PARENT_ENTITY_ID));\n+\t\tassertEquals(\"Folders with STS-enabled storage locations can only accept files with the same storage location\",\n+\t\t\t\tex.getMessage());\n+\t}\n+\n+\tprivate void setupFile(boolean isSts) {\n+\t\tlong storageLocationId = isSts ? STS_STORAGE_LOCATION_ID : NON_STS_STORAGE_LOCATION_ID;\n+\n+\t\t// Mock file handle manager.\n+\t\tS3FileHandle fileHandle = new S3FileHandle();\n+\t\tfileHandle.setId(FILE_HANDLE_ID);\n+\t\tfileHandle.setStorageLocationId(storageLocationId);\n+\t\twhen(mockFileHandleManager.getRawFileHandleUnchecked(FILE_HANDLE_ID)).thenReturn(fileHandle);\n+\n+\t\t// Mock project settings manager.\n+\t\tS3StorageLocationSetting fileStorageLocationSetting = new S3StorageLocationSetting();\n+\t\tfileStorageLocationSetting.setStorageLocationId(storageLocationId);\n+\t\twhen(mockProjectSettingsManager.getStorageLocationSetting(storageLocationId)).thenReturn(\n+\t\t\t\tfileStorageLocationSetting);\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting(fileStorageLocationSetting)).thenReturn(isSts);\n+\t}\n+\n+\tprivate void setupFolderWithoutProjectSetting() {\n+\t\twhen(mockProjectSettingsManager.getProjectSettingForNode(USER_INFO, PARENT_ENTITY_ID,\n+\t\t\t\tProjectSettingsType.upload, UploadDestinationListSetting.class)).thenReturn(Optional.empty());\n+\t}\n+\n+\tprivate void setupFolderWithProjectSetting(boolean isSts, long folderStorageLocationId) {\n+\t\tUploadDestinationListSetting folderProjectSetting = new UploadDestinationListSetting();\n+\t\tfolderProjectSetting.setLocations(ImmutableList.of(folderStorageLocationId));\n+\t\twhen(mockProjectSettingsManager.getProjectSettingForNode(USER_INFO, PARENT_ENTITY_ID,\n+\t\t\t\tProjectSettingsType.upload, UploadDestinationListSetting.class))\n+\t\t\t\t.thenReturn(Optional.of(folderProjectSetting));\n+\t\twhen(mockProjectSettingsManager.isStsStorageLocationSetting(folderProjectSetting)).thenReturn(isSts);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanMoveFolder_NotMoved() {\n+\t\tstsManager.validateCanMoveFolder(USER_INFO, FOLDER_ID, OLD_PARENT_ID, OLD_PARENT_ID);\n+\t}\n+\n+\t@Test\n+\tpublic void validateCanMoveFolder_moveRootStsFolderToParentWithoutProjectSettings() {\n+\t\tsetupOldFolderWithProjectSetting(true, true);", "originalCommit": "27b76c2c62d542a34d5496356aa4836f31b164b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}