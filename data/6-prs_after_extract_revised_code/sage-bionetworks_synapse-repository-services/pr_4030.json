{"pr_number": 4030, "pr_title": "Plfm 6218", "pr_createdAt": "2020-05-01T15:15:14Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030", "timeline": [{"oid": "a01df2056a643fbfb9e8a77e132472dc1478c886", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a01df2056a643fbfb9e8a77e132472dc1478c886", "message": "PLFM-6218 add DAO level logic to correctly paginate", "committedDate": "2020-05-01T15:13:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MjIwMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418592200", "bodyText": "Thank you for the comment with the easy to read sql!  To comprehend, I only had to go to the real sql to figure out what the table aliases referenced.", "author": "jay-hodgson", "createdAt": "2020-05-01T15:28:46Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImpl.java", "diffHunk": "@@ -136,6 +139,38 @@\n \tprivate static final String LIMIT = \"LIMIT\";\n \tprivate static final String OFFSET = \"OFFSET\";\n \n+\t/*\n+\tselect s.submission_serialized, ss.modified_on\n+\tfrom s, ss\n+\twhere s.id=ss.s_id and\n+\ts.ar_id=? and\n+\tss.state='approved' and\n+\tss.modified_on = \n+\tselect(max(ss2.modified_on)\n+\tfrom s2, ss2\n+\twhere \n+\ts2.ar_id=s.ar_id and s2.rp_id=s.rp_id\n+\tand s2.id=ss2.s_id and ss2.state=approved\n+\tgroup by s2.ar_id, s2.rp_id)\n+\torder by ss.modified_on asc;\n+\t*/", "originalCommit": "a01df2056a643fbfb9e8a77e132472dc1478c886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2MTM0MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418661341", "bodyText": "I just replaced the hand written pseudo-code with the actual generated SQL.", "author": "brucehoff", "createdAt": "2020-05-01T18:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MjIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "chunk": "diff --git a/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImpl.java b/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImpl.java\nindex fa9dd18606..a232c61fd0 100644\n--- a/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImpl.java\n+++ b/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImpl.java\n\n@@ -140,20 +140,17 @@ public class DBOSubmissionDAOImpl implements SubmissionDAO{\n \tprivate static final String OFFSET = \"OFFSET\";\n \n \t/*\n-\tselect s.submission_serialized, ss.modified_on\n-\tfrom s, ss\n-\twhere s.id=ss.s_id and\n-\ts.ar_id=? and\n-\tss.state='approved' and\n-\tss.modified_on = \n-\tselect(max(ss2.modified_on)\n-\tfrom s2, ss2\n-\twhere \n-\ts2.ar_id=s.ar_id and s2.rp_id=s.rp_id\n-\tand s2.id=ss2.s_id and ss2.state=approved\n-\tgroup by s2.ar_id, s2.rp_id)\n-\torder by ss.modified_on asc;\n-\t*/\n+\t * SELECT s.SUBMISSION_SERIALIZED, ss.MODIFIED_ON \n+\t * FROM DATA_ACCESS_SUBMISSION s, DATA_ACCESS_SUBMISSION_STATUS ss  \n+\t * WHERE s.ID = ss.SUBMISSION_ID AND s.ACCESS_REQUIREMENT_ID = ? \n+\t * AND ss.STATE = 'APPROVED' AND ss.MODIFIED_ON = (\n+\t * \t\tSELECT MAX(ss2.MODIFIED_ON) \n+\t * \t\tFROM DATA_ACCESS_SUBMISSION s2, DATA_ACCESS_SUBMISSION_STATUS ss2  \n+\t * \t\tWHERE s2.ID = ss2.SUBMISSION_ID AND s2.ACCESS_REQUIREMENT_ID = s.ACCESS_REQUIREMENT_ID AND \n+\t * \t\ts2.RESEARCH_PROJECT_ID = s.RESEARCH_PROJECT_ID AND ss2.STATE = 'APPROVED' \n+\t * \t\tGROUP BY s2.ACCESS_REQUIREMENT_ID, s2.RESEARCH_PROJECT_ID ) \n+\t * ORDER BY ss.MODIFIED_ON;\n+\t */\n \tprivate static final String SQL_LIST_SUBMISSION_INFO = \n \t\t\t\"SELECT s.\"+COL_DATA_ACCESS_SUBMISSION_SUBMISSION_SERIALIZED+\", ss.\"+COL_DATA_ACCESS_SUBMISSION_STATUS_MODIFIED_ON\n \t\t\t+ \" FROM \"+TABLE_DATA_ACCESS_SUBMISSION+\" s, \"+ TABLE_DATA_ACCESS_SUBMISSION_STATUS+\" ss \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NzU1Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418597556", "bodyText": "I need to take some notes to understand this test, let's spend extra time on this section during our meeting this afternoon.", "author": "jay-hodgson", "createdAt": "2020-05-01T15:40:06Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java", "diffHunk": "@@ -281,9 +314,74 @@ public void testListSubmissions() {\n \t\t\t\tfalse, 10L, 0L);\n \t\tassertNotNull(submissions);\n \t\tassertEquals(0, submissions.size());\n-\n-\t\tsubmissionDao.delete(dto1.getId());\n-\t\tsubmissionDao.delete(dto2.getId());\n+\t}\n+\t\n+\tprivate static SubmissionInfo createSubmissionInfo(ResearchProject rp, long modifiedOn) {\n+\t\tSubmissionInfo result = new SubmissionInfo();\n+\t\tresult.setInstitution(rp.getInstitution());\n+\t\tresult.setIntendedDataUseStatement(rp.getIntendedDataUseStatement());\n+\t\tresult.setProjectLead(rp.getProjectLead());\n+\t\tresult.setModifiedOn(new Date(modifiedOn));\n+\t\treturn result;\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListInfoForApprovedSubmissions() {", "originalCommit": "a01df2056a643fbfb9e8a77e132472dc1478c886", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1OTA4OA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418659088", "bodyText": "Yes, this is the crucial part of the code review.", "author": "brucehoff", "createdAt": "2020-05-01T17:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NzU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "chunk": "diff --git a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\nindex 5c62b8fbed..4761b54876 100644\n--- a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n+++ b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n\n@@ -379,7 +382,10 @@ public class DBOSubmissionDAOImplTest {\n \t\tassertEquals(expected, actual);\n \t\t\n \t\t\n-\t\t// check that pagination works right:  If I get the second page of size *one*, I should just get dto4\n+\t\t// check that pagination works right:  If I get the first page of size *one*, I should just get dto3\n+\t\tactual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 1, 0);\n+\t\tassertEquals(ImmutableList.of(dto3Info), actual);\n+\t\t// If I get the second page of size *one*, I should just get dto4\n \t\tactual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 1, 1);\n \t\tassertEquals(ImmutableList.of(dto4Info), actual);\n \t}\n"}}, {"oid": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/31d68b9662a551e0866a6e69bd537c81d5215d7b", "message": "PLFM-6218 improved the comment on the new SQL query", "committedDate": "2020-05-01T17:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3Mjc4Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418772786", "bodyText": "backup.getSubmissionSerialized()", "author": "jay-hodgson", "createdAt": "2020-05-01T23:04:12Z", "path": "lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmission.java", "diffHunk": "@@ -212,9 +233,30 @@ public MigrationType getMigratableTableType() {\n \t\treturn MigrationType.DATA_ACCESS_SUBMISSION;\n \t}\n \n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().allowTypes(Submission.class).build();\n+\n \t@Override\n \tpublic MigratableTableTranslation<DBOSubmission, DBOSubmission> getTranslator() {\n-\t\treturn new BasicMigratableTableTranslation<DBOSubmission>();\n+\t\treturn new MigratableTableTranslation<DBOSubmission,DBOSubmission>(){\n+\n+\t\t\t@Override\n+\t\t\tpublic DBOSubmission createDatabaseObjectFromBackup(DBOSubmission backup) {\n+\t\t\t\tif (backup.getResearchProjectId()==null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tSubmission submission = (Submission)JDOSecondaryPropertyUtils.decompressObject(X_STREAM, \n+\t\t\t\t\t\t\t\tsubmissionSerialized);\t", "originalCommit": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "chunk": "diff --git a/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmission.java b/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmission.java\nindex 6d7ad81cd0..bbdbae59c8 100644\n--- a/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmission.java\n+++ b/lib/jdomodels/src/main/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmission.java\n\n@@ -244,7 +244,7 @@ public class DBOSubmission implements MigratableDatabaseObject<DBOSubmission, DB\n \t\t\t\tif (backup.getResearchProjectId()==null) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tSubmission submission = (Submission)JDOSecondaryPropertyUtils.decompressObject(X_STREAM, \n-\t\t\t\t\t\t\t\tsubmissionSerialized);\t\n+\t\t\t\t\t\t\t\tbackup.getSubmissionSerialized());\t\n \t\t\t\t\t\tbackup.setResearchProjectId(Long.parseLong(submission.getResearchProjectSnapshot().getId()));\n \t\t\t\t\t} catch (IOException e) {\n \t\t\t\t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3MzYzMw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418773633", "bodyText": "Replace backup with new DBOSubmission() to catch bug.", "author": "jay-hodgson", "createdAt": "2020-05-01T23:08:00Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.sagebionetworks.repo.model.dbo.dao.dataaccess;\n+\n+import org.junit.jupiter.api.Test;\n+import org.sagebionetworks.repo.model.UnmodifiableXStream;\n+import org.sagebionetworks.repo.model.dataaccess.ResearchProject;\n+import org.sagebionetworks.repo.model.dataaccess.Submission;\n+import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class DBOSubmissionTest {\n+\tprivate static final UnmodifiableXStream X_STREAM = UnmodifiableXStream.builder().allowTypes(Submission.class).build();\n+\n+\t@Test\n+\tpublic void testMigrationTranslator() throws Exception {\n+\t\tResearchProject researchProject = new ResearchProject();\n+\t\tString id = \"101\";\n+\t\tresearchProject.setId(id);\n+\t\tSubmission submission = new Submission();\n+\t\tsubmission.setResearchProjectSnapshot(researchProject);\n+\t\tDBOSubmission backup = new DBOSubmission();\n+\t\tbackup.setAccessRequirementId(1L);\n+\t\tbackup.setCreatedBy(2L);\n+\t\tbackup.setCreatedOn(3L);\n+\t\tbackup.setDataAccessRequestId(4L);\n+\t\tbackup.setEtag(\"etag\");\n+\t\tbackup.setId(5L);\n+\t\tbackup.setSubmissionSerialized(JDOSecondaryPropertyUtils.compressObject(X_STREAM, submission));\n+\t\t\n+\t\t// Note, we have NOT set the research project id in backup\n+\t\tassertNull(backup.getResearchProjectId());\n+\t\t\n+\t\tDBOSubmission dbo = backup.getTranslator().createDatabaseObjectFromBackup(backup);", "originalCommit": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "chunk": "diff --git a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionTest.java b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionTest.java\nindex 55ddfb55ac..5ae66224d8 100644\n--- a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionTest.java\n+++ b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionTest.java\n\n@@ -30,7 +30,7 @@ public class DBOSubmissionTest {\n \t\t// Note, we have NOT set the research project id in backup\n \t\tassertNull(backup.getResearchProjectId());\n \t\t\n-\t\tDBOSubmission dbo = backup.getTranslator().createDatabaseObjectFromBackup(backup);\n+\t\tDBOSubmission dbo = (new DBOSubmission()).getTranslator().createDatabaseObjectFromBackup(backup);\n \t\t\n \t\tassertEquals(Long.parseLong(id), dbo.getResearchProjectId().longValue());\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDU2NQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418774565", "bodyText": "clean up accessRequirement2", "author": "jay-hodgson", "createdAt": "2020-05-01T23:11:49Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java", "diffHunk": "@@ -119,16 +140,24 @@ public void before() {\n \t\tadd.setType(AccessType.GAIN_ACCESS);\n \t\trequest.setAccessorChanges(Arrays.asList(add));\n \t\trequest = requestDao.create(request);\n+\t\t\n+\t\tdtosToDelete = new ArrayList<String>();\n \t}\n \n \t@After\n \tpublic void after() {\n+\t\tfor (String id: dtosToDelete) {\n+\t\t\tsubmissionDao.delete(id);\n+\t\t}\n \t\tif (request != null) {\n \t\t\trequestDao.delete(request.getId());\n \t\t}\n \t\tif (researchProject != null) {\n \t\t\tresearchProjectDao.delete(researchProject.getId());\n \t\t}\n+\t\tif (researchProject2 != null) {\n+\t\t\tresearchProjectDao.delete(researchProject2.getId());\n+\t\t}\n \t\tif (accessRequirement != null) {\n \t\t\taccessRequirementDAO.delete(accessRequirement.getId().toString());\n \t\t}", "originalCommit": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "chunk": "diff --git a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\nindex 5c62b8fbed..4761b54876 100644\n--- a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n+++ b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n\n@@ -161,6 +161,9 @@ public class DBOSubmissionDAOImplTest {\n \t\tif (accessRequirement != null) {\n \t\t\taccessRequirementDAO.delete(accessRequirement.getId().toString());\n \t\t}\n+\t\tif (accessRequirement2 != null) {\n+\t\t\taccessRequirementDAO.delete(accessRequirement2.getId().toString());\n+\t\t}\n \t\tif (node != null) {\n \t\t\tnodeDao.delete(node.getId());\n \t\t\tnode = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NjY2Mg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4030#discussion_r418776662", "bodyText": "Could you add a test to get a limit of 1 and offset of 0, and make sure you get dto3Info?", "author": "jay-hodgson", "createdAt": "2020-05-01T23:21:10Z", "path": "lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java", "diffHunk": "@@ -281,9 +314,74 @@ public void testListSubmissions() {\n \t\t\t\tfalse, 10L, 0L);\n \t\tassertNotNull(submissions);\n \t\tassertEquals(0, submissions.size());\n-\n-\t\tsubmissionDao.delete(dto1.getId());\n-\t\tsubmissionDao.delete(dto2.getId());\n+\t}\n+\t\n+\tprivate static SubmissionInfo createSubmissionInfo(ResearchProject rp, long modifiedOn) {\n+\t\tSubmissionInfo result = new SubmissionInfo();\n+\t\tresult.setInstitution(rp.getInstitution());\n+\t\tresult.setIntendedDataUseStatement(rp.getIntendedDataUseStatement());\n+\t\tresult.setProjectLead(rp.getProjectLead());\n+\t\tresult.setModifiedOn(new Date(modifiedOn));\n+\t\treturn result;\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testListInfoForApprovedSubmissions() {\n+\t\t// create a submission for research project 1\n+\t\tlong modifiedOn = System.currentTimeMillis();\n+\t\tSubmission dto1 = createSubmission(accessRequirement, researchProject, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto1).getSubmissionId() );\n+\t\tmodifiedOn += 60000L;\n+\t\tsubmissionDao.updateSubmissionStatus(dto1.getId(), SubmissionState.APPROVED, null, user1.getId(), modifiedOn);\n+\t\t\t\n+\t\t// create a submission for research project 2\n+\t\tmodifiedOn += 60000L;\n+\t\tSubmission dto2 = createSubmission(accessRequirement, researchProject2, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto2).getSubmissionId() );\t\n+\t\tmodifiedOn += 60000L;\n+\t\tsubmissionDao.updateSubmissionStatus(dto2.getId(), SubmissionState.APPROVED, null, user1.getId(), modifiedOn);\n+\t\t\n+\t\t// now create another, later submission for research project 2\n+\t\tmodifiedOn += 60000L;\n+\t\tSubmission dto3 = createSubmission(accessRequirement, researchProject2, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto3).getSubmissionId() );\t\n+\t\tmodifiedOn += 60000L;\n+\t\tsubmissionDao.updateSubmissionStatus(dto3.getId(), SubmissionState.APPROVED, null, user1.getId(), modifiedOn);\n+\t\tSubmissionInfo dto3Info = createSubmissionInfo(researchProject2, modifiedOn);\n+\t\t\n+\t\t// now create another, later submission for research project 1\n+\t\tmodifiedOn += 60000L;\n+\t\tSubmission dto4 = createSubmission(accessRequirement, researchProject, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto4).getSubmissionId() );\t\n+\t\tmodifiedOn += 60000L;\n+\t\tsubmissionDao.updateSubmissionStatus(dto4.getId(), SubmissionState.APPROVED, null, user1.getId(), modifiedOn);\n+\t\tSubmissionInfo dto4Info = createSubmissionInfo(researchProject, modifiedOn);\n+\t\t\n+\t\t// create another submission for some other access requirement.  (Shouldn't see it in the results.)\n+\t\tmodifiedOn += 60000L;\n+\t\tSubmission dto5 = createSubmission(accessRequirement2, researchProject, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto5).getSubmissionId() );\t\n+\t\tmodifiedOn += 60000L;\n+\t\tsubmissionDao.updateSubmissionStatus(dto5.getId(), SubmissionState.APPROVED, null, user1.getId(), modifiedOn);\n+\t\t\n+\t\t// create a submission which is NOT approved.  (Shouldn't see it in the results.)\n+\t\tmodifiedOn += 60000L;\n+\t\tSubmission dto6 = createSubmission(accessRequirement, researchProject, modifiedOn);\n+\t\tdtosToDelete.add( submissionDao.createSubmission(dto6).getSubmissionId() );\t\n+\t\t\n+\t\t// we should get back dto3 , then dto4, in that order\n+\t\tList<SubmissionInfo> expected = ImmutableList.of(dto3Info, dto4Info);\n+\n+\t\t// method under test\n+\t\tList<SubmissionInfo> actual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 10, 0);\n+\t\t\n+\t\tassertEquals(expected, actual);\n+\t\t\n+\t\t\n+\t\t// check that pagination works right:  If I get the second page of size *one*, I should just get dto4\n+\t\tactual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 1, 1);", "originalCommit": "31d68b9662a551e0866a6e69bd537c81d5215d7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "chunk": "diff --git a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\nindex 5c62b8fbed..4761b54876 100644\n--- a/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n+++ b/lib/jdomodels/src/test/java/org/sagebionetworks/repo/model/dbo/dao/dataaccess/DBOSubmissionDAOImplTest.java\n\n@@ -379,7 +382,10 @@ public class DBOSubmissionDAOImplTest {\n \t\tassertEquals(expected, actual);\n \t\t\n \t\t\n-\t\t// check that pagination works right:  If I get the second page of size *one*, I should just get dto4\n+\t\t// check that pagination works right:  If I get the first page of size *one*, I should just get dto3\n+\t\tactual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 1, 0);\n+\t\tassertEquals(ImmutableList.of(dto3Info), actual);\n+\t\t// If I get the second page of size *one*, I should just get dto4\n \t\tactual = submissionDao.listInfoForApprovedSubmissions(accessRequirement.getId().toString(), 1, 1);\n \t\tassertEquals(ImmutableList.of(dto4Info), actual);\n \t}\n"}}, {"oid": "d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/d40590f02124d611a5eb0b3f1a826b805d5ad2ee", "message": "PLFM-6218: Updates from code review", "committedDate": "2020-05-01T23:36:03Z", "type": "commit"}]}