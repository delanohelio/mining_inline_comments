{"pr_number": 4020, "pr_title": "PLFM-5170-VI rolling back initial approach, applied to 33 controllers", "pr_createdAt": "2020-04-25T23:09:04Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020", "timeline": [{"oid": "1fdeeeb8e6eef3a0b3112583ae3a3efa934ad540", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1fdeeeb8e6eef3a0b3112583ae3a3efa934ad540", "message": "PLFM-5170-VI rolling back initial approach, applied to 33 controllers", "committedDate": "2020-04-29T01:40:02Z", "type": "commit"}, {"oid": "1fdeeeb8e6eef3a0b3112583ae3a3efa934ad540", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/1fdeeeb8e6eef3a0b3112583ae3a3efa934ad540", "message": "PLFM-5170-VI rolling back initial approach, applied to 33 controllers", "committedDate": "2020-04-29T01:40:02Z", "type": "forcePushed"}, {"oid": "18cd7767405fbbd5a9be1d5bced71eab7055f988", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/18cd7767405fbbd5a9be1d5bced71eab7055f988", "message": "PLFM-5170-VI rolling back initial approach, applied to 33 controllers", "committedDate": "2020-04-29T01:57:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTk4MQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417481981", "bodyText": "Double check that if the Auth header is considered a \"custom\" header?", "author": "marcomarasca", "createdAt": "2020-04-29T17:19:47Z", "path": "services/authutil/src/main/java/org/sagebionetworks/authutil/SimpleCORSFilter.java", "diffHunk": "@@ -31,7 +30,9 @@\n \tpublic static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\r\n \tpublic static final String ALL_ORIGINS = \"*\";\r\n \tpublic static final String METHODS = \"POST, GET, PUT, DELETE\";\r\n-\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + AuthorizationConstants.SESSION_TOKEN_PARAM;\r\n+\tpublic static final String HEADERS = \"Origin, X-Requested-With, Content-Type, Accept, \" + \r\n+\t\t\tAuthorizationConstants.SESSION_TOKEN_PARAM +\r\n+\t\t\", \"+AuthorizationConstants.AUTHORIZATION_HEADER_NAME;\r", "originalCommit": "18cd7767405fbbd5a9be1d5bced71eab7055f988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyMTkwNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417621904", "bodyText": "Per Jay, this is correct.", "author": "brucehoff", "createdAt": "2020-04-29T21:26:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTk4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4NzI0Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417487246", "bodyText": "userId.toString() not needed as it's already a String", "author": "marcomarasca", "createdAt": "2020-04-29T17:28:22Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/oauth/OpenIDConnectManagerImpl.java", "diffHunk": "@@ -360,52 +361,20 @@ public OIDCTokenResponse getAccessToken(String code, String verifiedClientId, St\n \t}\n \t\n \t@Override\n-\tpublic UserInfo getUserAuthorization(String oauthToken) {\n-\t\tJwt<JwsHeader,Claims> accessToken = null;\n-\t\ttry {\n-\t\t\taccessToken = oidcTokenHelper.parseJWT(oauthToken);\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\tthrow new UnauthenticatedException(\"Could not interpret access token.\", e);\n-\t\t}\n+\tpublic Object getUserInfo(String accessTokenParam, String oauthEndpoint) {\n+\t\tJwt<JwsHeader,Claims> accessToken = oidcTokenHelper.parseJWT(accessTokenParam);\n \t\tClaims accessTokenClaims = accessToken.getBody();\n \t\tString oauthClientId = accessTokenClaims.getAudience();\n-\t\t\n-\t\tif (oauthClientId == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Missing 'audience' value in the OAuth Access Token.\");\n-\t\t}\n \n-\t\tvalidateClientVerificationStatus(oauthClientId);\n-\t\t\n \t\tList<OAuthScope> scopes = ClaimsJsonUtil.getScopeFromClaims(accessTokenClaims);\n \t\tMap<OIDCClaimName, OIDCClaimsRequestDetails> oidcClaims = ClaimsJsonUtil.getOIDCClaimsFromClaimSet(accessTokenClaims);\n \n \t\tString ppid = accessTokenClaims.getSubject();\n \n \t\t// userId is used to retrieve the user info\n \t\tString userId = getUserIdFromPPID(ppid, oauthClientId);\n-\t\t// If the user belongs to the admin group they are an admin\n-\t\tSet<Long> groups = userManager.getUserGroups(Long.parseLong(userId));\n-\t\t\n-\t\t// Check to see if the user is an Admin\n-\t\tboolean isAdmin = groups.contains(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.ADMINISTRATORS_GROUP.getPrincipalId());\n-\t\t// we don't let clients besides Synapse itself have admin access\n-\t\tboolean adminAccessAllowed = oauthClientId.equals(AuthorizationConstants.SYNAPSE_OAUTH_CLIENT_ID);\n-\t\tboolean hasAllScopes = scopes.containsAll(Arrays.asList(OAuthScope.values()));\n-\n-\t\tUserInfo result = new UserInfo(isAdmin && hasAllScopes && adminAccessAllowed);\n-\t\tresult.setId(Long.parseLong(userId));\n-\t\tresult.setGroups(groups);\n-\t\tresult.setOidcClaims(oidcClaims);\n-\t\tresult.setScopes(scopes);\n-\t\treturn result;\n-\t}\t\n-\t\n-\t@Override\n-\tpublic Object getUserInfo(UserInfo userAuthorization, String oauthClientId, String oauthEndpoint) {\n-\t\tLong userId = userAuthorization.getId();\n-\t\tDate authTime = authDao.getSessionValidatedOn(userId);\n \n-\t\tMap<OIDCClaimName,Object> userInfo = getUserInfo(userId.toString(), userAuthorization.getScopes(), userAuthorization.getOidcClaims());\n+\t\tMap<OIDCClaimName,Object> userInfo = getUserInfo(userId.toString(), scopes, oidcClaims);", "originalCommit": "18cd7767405fbbd5a9be1d5bced71eab7055f988", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NjE1MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417496150", "bodyText": "Double check with Jay that this does not break the web client", "author": "marcomarasca", "createdAt": "2020-04-29T17:43:01Z", "path": "services/repository/src/main/java/org/sagebionetworks/repo/web/filter/JsonpCallbackFilter.java", "diffHunk": "@@ -47,6 +47,10 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n \t\t\tif(sessionToken != null){\r\n \t\t\t\tthrow new ServletException(\"JSONP callbacks are only allowed on public methods with no 'sessionToken'\");\r\n \t\t\t}\r\n+\t\t\tString accessToken = httpRequest.getHeader(AuthorizationConstants.AUTHORIZATION_HEADER_NAME);\r", "originalCommit": "18cd7767405fbbd5a9be1d5bced71eab7055f988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyOTY2Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4020#discussion_r417629666", "bodyText": "Per Jay, this feature is most likely no longer used and therefore the change is irrelevant.", "author": "brucehoff", "createdAt": "2020-04-29T21:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NjE1MA=="}], "type": "inlineReview", "revised_code": null}]}