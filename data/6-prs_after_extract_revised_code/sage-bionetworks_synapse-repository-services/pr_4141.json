{"pr_number": 4141, "pr_title": "PLFM 6363.1 - Personal Access Tokens", "pr_createdAt": "2020-07-17T16:30:56Z", "pr_url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141", "timeline": [{"oid": "ea75ae9803674bc2f12435071b7bb878b2f363cb", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/ea75ae9803674bc2f12435071b7bb878b2f363cb", "message": "Update comment to reference JIRA", "committedDate": "2020-07-17T16:28:03Z", "type": "commit"}, {"oid": "a2f143de1522807dd9e02f24a59593aee187032c", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/a2f143de1522807dd9e02f24a59593aee187032c", "message": "Personal access tokens services + manager", "committedDate": "2020-07-17T16:30:15Z", "type": "commit"}, {"oid": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/9edaae2ac11dbc660aef6ad27e41e7be903c2449", "message": "Fix tests", "committedDate": "2020-07-17T17:00:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MDM0OQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456570349", "bodyText": "document the order in which the tokens are returned", "author": "brucehoff", "createdAt": "2020-07-17T17:14:52Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 728bcfba6f..6e0d037fc5 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -363,7 +376,8 @@ public class AuthenticationController {\n \t}\n \n \t/**\n-\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Metadata for active and expired\n+\t * tokens will be returned in reverse-chronological order by creation date. Metadata for revoked tokens cannot be returned.\n \t * @param userId\n \t * @param nextPageToken\n \t * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MTM1Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456571356", "bodyText": "document where to find the tokenId in the token, i.e., it's the JWT ID.", "author": "brucehoff", "createdAt": "2020-07-17T17:16:45Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN_ID, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecord getPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@PathVariable(value = UrlHelpers.ID_PATH_VARIABLE) Long tokenId\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecord(userId, tokenId);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n+\t * @param userId\r\n+\t * @param tokenId\r", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 728bcfba6f..6e0d037fc5 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -363,7 +376,8 @@ public class AuthenticationController {\n \t}\n \n \t/**\n-\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Metadata for active and expired\n+\t * tokens will be returned in reverse-chronological order by creation date. Metadata for revoked tokens cannot be returned.\n \t * @param userId\n \t * @param nextPageToken\n \t * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MTQ3Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456571473", "bodyText": "document where to find the tokenId", "author": "brucehoff", "createdAt": "2020-07-17T17:17:02Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 728bcfba6f..6e0d037fc5 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -363,7 +376,8 @@ public class AuthenticationController {\n \t}\n \n \t/**\n-\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Metadata for active and expired\n+\t * tokens will be returned in reverse-chronological order by creation date. Metadata for revoked tokens cannot be returned.\n \t * @param userId\n \t * @param nextPageToken\n \t * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3MzgzMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456573832", "bodyText": "missing optional next page token", "author": "brucehoff", "createdAt": "2020-07-17T17:21:42Z", "path": "client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java", "diffHunk": "@@ -3613,6 +3618,29 @@ public String retrieveApiKey() throws SynapseException {\n \t\treturn getJSONEntity(getAuthEndpoint(),\"/secretKey\", SecretKey.class).getSecretKey();\n \t}\n \n+\t@Override\n+\tpublic String createPersonalAccessToken(AccessTokenGenerationRequest request) throws SynapseException {\n+\t\tValidateArgument.required(request, \"request\");\n+\t\treturn postJSONEntity(getAuthEndpoint(), AUTH_PERSONAL_ACCESS_TOKEN, request, AccessTokenGenerationResponse.class).getToken();\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecord retrievePersonalAccessTokenRecord(String tokenId) throws SynapseException {\n+\t\tValidateArgument.required(tokenId, \"tokenId\");\n+\t\treturn getJSONEntity(getAuthEndpoint(), AUTH_PERSONAL_ACCESS_TOKEN + \"/\" + tokenId, AccessTokenRecord.class);\n+\t}\n+\n+\t@Override\n+\tpublic AccessTokenRecordList retrievePersonalAccessTokenRecords() throws SynapseException {", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java b/client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java\nindex fc7acbce9d..ccd1bee30c 100644\n--- a/client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java\n+++ b/client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClientImpl.java\n\n@@ -3631,8 +3631,12 @@ public class SynapseClientImpl extends BaseClientImpl implements SynapseClient {\n \t}\n \n \t@Override\n-\tpublic AccessTokenRecordList retrievePersonalAccessTokenRecords() throws SynapseException {\n-\t\treturn getJSONEntity(getAuthEndpoint(), AUTH_PERSONAL_ACCESS_TOKEN, AccessTokenRecordList.class);\n+\tpublic AccessTokenRecordList retrievePersonalAccessTokenRecords(String nextPageToken) throws SynapseException {\n+\t\tString uri = AUTH_PERSONAL_ACCESS_TOKEN;\n+\t\tif (nextPageToken != null) {\n+\t\t\turi += \"?\" + NEXT_PAGE_TOKEN_PARAM + nextPageToken;\n+\t\t}\n+\t\treturn getJSONEntity(getAuthEndpoint(), uri, AccessTokenRecordList.class);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3NDQ3MA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456574470", "bodyText": "@RequiredScope({modify, authorize})", "author": "brucehoff", "createdAt": "2020-07-17T17:23:01Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r\n+\t * header `Authorization: Bearer \\<token\\>`. The token will expire if unused for 180 days.\r\n+\t * The token cannot be re-retrieved after the initial creation.\r\n+\t * @param userId\r\n+\t * @param request\r\n+\t * @param uriComponentsBuilder\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({authorize})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.POST)\r\n+\tpublic @ResponseBody AccessTokenGenerationResponse createPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestBody(required=true) AccessTokenGenerationRequest request,\r\n+\t\t\tUriComponentsBuilder uriComponentsBuilder\r\n+\t) {\r\n+\t\treturn authenticationService.createPersonalAccessToken(userId, request, OpenIDConnectController.getEndpoint(uriComponentsBuilder));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\r\n+\t * @param userId\r\n+\t * @param nextPageToken\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecordList getPersonalAccessTokens(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@RequestParam(value = UrlHelpers.NEXT_PAGE_TOKEN_PARAM, required=false) String nextPageToken\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecords(userId, nextPageToken);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Retrieve metadata for a particular personal access token. Metadata for revoked tokens cannot be retrieved.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t * @return\r\n+\t */\r\n+\t@RequiredScope({view})\r\n+\t@ResponseStatus(HttpStatus.OK)\r\n+\t@RequestMapping(value = UrlHelpers.AUTH_PERSONAL_ACCESS_TOKEN_ID, method = RequestMethod.GET)\r\n+\tpublic @ResponseBody\r\n+\tAccessTokenRecord getPersonalAccessToken(\r\n+\t\t\t@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId,\r\n+\t\t\t@PathVariable(value = UrlHelpers.ID_PATH_VARIABLE) Long tokenId\r\n+\t) {\r\n+\t\treturn authenticationService.getPersonalAccessTokenRecord(userId, tokenId);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n+\t * @param userId\r\n+\t * @param tokenId\r\n+\t */\r\n+\t@RequiredScope({view, authorize})\r", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 728bcfba6f..6e0d037fc5 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -363,7 +376,8 @@ public class AuthenticationController {\n \t}\n \n \t/**\n-\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Metadata for active and expired\n+\t * tokens will be returned in reverse-chronological order by creation date. Metadata for revoked tokens cannot be returned.\n \t * @param userId\n \t * @param nextPageToken\n \t * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU3ODcxNA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456578714", "bodyText": "In the documentation of the authentication controller differentiate between access tokens and personal access tokens, including the facts that (1) PATs are not linked to any third party OAuth client and (2) while ATs have a strict 24 hour lifetime, PATs are long lived.  As such it's critical to treat PATs as sensitive credentials, like passwords.", "author": "brucehoff", "createdAt": "2020-07-17T17:31:58Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -335,4 +341,75 @@ public void unbindExternalAliasFromAccount(\n \t\tauthenticationService.unbindExternalID(userId, providerEnum, alias);\r\n \t}\r\n \r\n+\r\n+\t/**\r\n+\t * Issues a personal access token to authorize scoped access to Synapse resources. To use the token, use the HTTP\r", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 728bcfba6f..6e0d037fc5 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -363,7 +376,8 @@ public class AuthenticationController {\n \t}\n \n \t/**\n-\t * Retrieve metadata for all personal access tokens issued for the requesting user. Excludes revoked tokens.\n+\t * Retrieve metadata for all personal access tokens issued for the requesting user. Metadata for active and expired\n+\t * tokens will be returned in reverse-chronological order by creation date. Metadata for revoked tokens cannot be returned.\n \t * @param userId\n \t * @param nextPageToken\n \t * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4MzkzNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456583936", "bodyText": "add a comment that this checks the OIDC spec when isPersonalAccessToken==false.  When ==true, the checks are similar but not identical.", "author": "brucehoff", "createdAt": "2020-07-17T17:42:33Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java", "diffHunk": "@@ -148,14 +150,15 @@ public void testGenerateOIDCIdentityToken() throws Exception {\n \t\tassertTrue(claims.get(OIDCClaimName.email_verified.name(), Boolean.class));\n \t\tassertEquals(\"University of Example\", claims.get(OIDCClaimName.company.name(), String.class));\n \t\tassertEquals(TOKEN_ID, claims.getId());\n+\t\tassertEquals(TokenType.OIDC_ID.name(), claims.get(OIDCClaimName.token_type.name(), String.class));\n \t\t\n \t\t// This checks the other fields set in the method under test\n-\t\tclientValidation(oidcToken, NONCE);\n+\t\tjwtValidation(oidcToken, false, NONCE);\n \t}\n \n     // let's check that our JWTs fulfill the OIDC spec by checking that they meet the requirements for client validation:\t\n \t// https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\n-\tprivate void clientValidation(String jwtString, String nonce) throws ParseException {\n+\tprivate void jwtValidation(String jwtString, boolean isPersonalAccessToken, String nonce) throws ParseException {", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\nindex 582b599338..8486bd3a6b 100644\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\n+++ b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\n\n@@ -150,14 +150,22 @@ public class OIDCTokenHelperImplTest {\n \t\tassertTrue(claims.get(OIDCClaimName.email_verified.name(), Boolean.class));\n \t\tassertEquals(\"University of Example\", claims.get(OIDCClaimName.company.name(), String.class));\n \t\tassertEquals(TOKEN_ID, claims.getId());\n-\t\tassertEquals(TokenType.OIDC_ID.name(), claims.get(OIDCClaimName.token_type.name(), String.class));\n+\t\tassertEquals(TokenType.OIDC_ID_TOKEN.name(), claims.get(OIDCClaimName.token_type.name(), String.class));\n \t\t\n \t\t// This checks the other fields set in the method under test\n \t\tjwtValidation(oidcToken, false, NONCE);\n \t}\n \n-    // let's check that our JWTs fulfill the OIDC spec by checking that they meet the requirements for client validation:\t\n-\t// https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\n+\t/**\n+\t * This method lets us check that our JWTs fulfill the OIDC spec by checking that they meet the requirements for client validation.\n+\t * See https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\n+\t *\n+\t * For code reuse, we also use this method to check the validity of personal access tokens, but by design, PATs are not OIDC-compliant.\n+\t * @param jwtString\n+\t * @param isPersonalAccessToken\n+\t * @param nonce\n+\t * @throws ParseException\n+\t */\n \tprivate void jwtValidation(String jwtString, boolean isPersonalAccessToken, String nonce) throws ParseException {\n \t\t// If the ID Token is received via direct communication between the Client and the Token Endpoint (which it is in this flow), \n \t    // the TLS server validation MAY be used to validate the issuer in place of checking the token signature. The Client MUST \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NDQ4Mw==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456584483", "bodyText": "// method under test", "author": "brucehoff", "createdAt": "2020-07-17T17:43:39Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java", "diffHunk": "@@ -280,4 +298,37 @@ public void testParseExpiredJWTException() {\n \t\t\t\toidcTokenHelper.parseJWT(expiredAccessToken));\n \t}\n \n+\t@Test\n+\tpublic void testCreatePersonalAccessToken() throws Exception {\n+\t\tList<OAuthScope> grantedScopes = Collections.singletonList(OAuthScope.openid);\n+\t\tMap<String,OIDCClaimsRequestDetails> expectedClaims = new HashMap<>();\n+\t\texpectedClaims.put(OIDCClaimName.email.name(), ESSENTIAL);\n+\t\texpectedClaims.put(OIDCClaimName.given_name.name(), NON_ESSENTIAL);\n+\t\texpectedClaims.put(OIDCClaimName.family_name.name(), null);\n+\t\tOIDCClaimsRequestDetails details = new OIDCClaimsRequestDetails();\n+\t\tdetails.setValues(Collections.singletonList(\"101\"));\n+\t\texpectedClaims.put(OIDCClaimName.team.name(), details);\n+\n+\t\tAccessTokenRecord personalAccessTokenRecord = new AccessTokenRecord();\n+\t\tpersonalAccessTokenRecord.setId(\"1234\");\n+\t\tpersonalAccessTokenRecord.setCreatedOn(new Date());\n+\t\tpersonalAccessTokenRecord.setScopes(grantedScopes);\n+\t\tpersonalAccessTokenRecord.setUserInfoClaims(expectedClaims);\n+\n+\t\tString accessToken = oidcTokenHelper.createPersonalAccessToken(", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\nindex 582b599338..8486bd3a6b 100644\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\n+++ b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/oauth/OIDCTokenHelperImplTest.java\n\n@@ -315,6 +323,7 @@ public class OIDCTokenHelperImplTest {\n \t\tpersonalAccessTokenRecord.setScopes(grantedScopes);\n \t\tpersonalAccessTokenRecord.setUserInfoClaims(expectedClaims);\n \n+\t\t// method under test\n \t\tString accessToken = oidcTokenHelper.createPersonalAccessToken(\n \t\t\t\tISSUER,\n \t\t\t\tpersonalAccessTokenRecord);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MDM4Ng==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456590386", "bodyText": "enforce token limit", "author": "brucehoff", "createdAt": "2020-07-17T17:54:57Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\nindex f54d4657cb..fe42e301de 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n\n@@ -34,6 +34,8 @@ public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManage\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n \n+\tprivate static final long MAX_NUMBER_OF_TOKENS_PER_USER = 100L;\n+\n \t@Autowired\n \tprivate PersonalAccessTokenDao personalAccessTokenDao;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTcxNg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456591716", "bodyText": "change \"convertToString\" to \"convertMapKeysToStrings\" (or something).  Ditto for \"convertToEnum\"", "author": "brucehoff", "createdAt": "2020-07-17T17:57:11Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {\n+\t\tValidateArgument.required(request, \"AccessTokenGenerationRequest\");\n+\t\tif (AuthorizationUtils.isUserAnonymous(userInfo)) {\n+\t\t\tthrow new UnauthenticatedException(\"Anonymous users may not issue personal access tokens.\");\n+\t\t}\n+\n+\t\t// Replace an empty name with a UUID\n+\t\tif (StringUtils.isBlank(request.getName())) {\n+\t\t\trequest.setName(UUID.randomUUID().toString());\n+\t\t}\n+\n+\t\t// Replace null/empty scope with all scopes\n+\t\tif (request.getScope() == null || request.getScope().isEmpty()) {\n+\t\t\trequest.setScope(new ArrayList<>());\n+\t\t\tfor (OAuthScope scope : OAuthScope.values()) {\n+\t\t\t\trequest.getScope().add(scope);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (request.getUserInfoClaims() == null) {\n+\t\t\trequest.setUserInfoClaims(new HashMap<>());\n+\t\t}\n+\n+\t\t// Convert claims to enum and back to remove invalid claims -- see PLFM-6254\n+\t\trequest.setUserInfoClaims(\n+\t\t\t\tEnumKeyedJsonMapUtil.convertToString(", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\nindex f54d4657cb..fe42e301de 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n\n@@ -34,6 +34,8 @@ public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManage\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n \n+\tprivate static final long MAX_NUMBER_OF_TOKENS_PER_USER = 100L;\n+\n \t@Autowired\n \tprivate PersonalAccessTokenDao personalAccessTokenDao;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MzQzOQ==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456593439", "bodyText": "personalAccessTokenDao.getLastUsedDate() -> Date", "author": "brucehoff", "createdAt": "2020-07-17T18:00:11Z", "path": "services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationUtils;\n+import org.sagebionetworks.repo.model.UnauthenticatedException;\n+import org.sagebionetworks.repo.model.UnauthorizedException;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationResponse;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.AccessTokenState;\n+import org.sagebionetworks.repo.model.auth.PersonalAccessTokenDao;\n+import org.sagebionetworks.repo.model.oauth.OAuthScope;\n+import org.sagebionetworks.repo.model.oauth.OIDCClaimName;\n+import org.sagebionetworks.repo.transactions.WriteTransaction;\n+import org.sagebionetworks.repo.web.NotFoundException;\n+import org.sagebionetworks.util.Clock;\n+import org.sagebionetworks.util.EnumKeyedJsonMapUtil;\n+import org.sagebionetworks.util.ValidateArgument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManager {\n+\n+\t// The maximum time, in days, that a token remains active if unused.\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n+\tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenDao personalAccessTokenDao;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\t@Autowired\n+\tprivate Clock clock;\n+\n+\t/**\n+\t * Determine the state of the access token record using the last used or created on fields.\n+\t * Method exposed for testing.\n+\t * @param record\n+\t * @return the state of the token\n+\t */\n+\tAccessTokenState determineActiveState(AccessTokenRecord record) {\n+\t\tDate lastUsedDate;\n+\t\tif (record.getLastUsed() != null) {\n+\t\t\tlastUsedDate = record.getLastUsed();\n+\t\t} else {\n+\t\t\tlastUsedDate = record.getCreatedOn();\n+\t\t}\n+\t\tDate lastUsedExpirationDate = new Date(clock.currentTimeMillis() - MAX_TOKEN_LEASE_LENGTH_MILLIS);\n+\t\tboolean active = lastUsedDate.after(lastUsedExpirationDate);\n+\t\treturn active ? AccessTokenState.ACTIVE : AccessTokenState.EXPIRED;\n+\t}\n+\n+\t@WriteTransaction\n+\t@Override\n+\tpublic AccessTokenGenerationResponse issueToken(UserInfo userInfo, AccessTokenGenerationRequest request, String oauthEndpoint) {\n+\t\tValidateArgument.required(request, \"AccessTokenGenerationRequest\");\n+\t\tif (AuthorizationUtils.isUserAnonymous(userInfo)) {\n+\t\t\tthrow new UnauthenticatedException(\"Anonymous users may not issue personal access tokens.\");\n+\t\t}\n+\n+\t\t// Replace an empty name with a UUID\n+\t\tif (StringUtils.isBlank(request.getName())) {\n+\t\t\trequest.setName(UUID.randomUUID().toString());\n+\t\t}\n+\n+\t\t// Replace null/empty scope with all scopes\n+\t\tif (request.getScope() == null || request.getScope().isEmpty()) {\n+\t\t\trequest.setScope(new ArrayList<>());\n+\t\t\tfor (OAuthScope scope : OAuthScope.values()) {\n+\t\t\t\trequest.getScope().add(scope);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (request.getUserInfoClaims() == null) {\n+\t\t\trequest.setUserInfoClaims(new HashMap<>());\n+\t\t}\n+\n+\t\t// Convert claims to enum and back to remove invalid claims -- see PLFM-6254\n+\t\trequest.setUserInfoClaims(\n+\t\t\t\tEnumKeyedJsonMapUtil.convertToString(\n+\t\t\t\t\t\tEnumKeyedJsonMapUtil.convertToEnum(request.getUserInfoClaims(), OIDCClaimName.class)\n+\t\t\t\t)\n+\t\t);\n+\n+\t\tAccessTokenRecord record = new AccessTokenRecord();\n+\t\trecord.setUserId(userInfo.getId().toString());\n+\t\trecord.setName(request.getName());\n+\t\trecord.setScopes(request.getScope());\n+\t\trecord.setUserInfoClaims(request.getUserInfoClaims());\n+\t\tDate now = clock.now();\n+\t\trecord.setCreatedOn(now);\n+\t\trecord.setLastUsed(now);\n+\n+\t\trecord = personalAccessTokenDao.createTokenRecord(record);\n+\t\tAccessTokenGenerationResponse response = new AccessTokenGenerationResponse();\n+\t\tresponse.setToken(oidcTokenHelper.createPersonalAccessToken(oauthEndpoint, record));\n+\t\treturn response;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isTokenActive(String tokenId) {\n+\t\tAccessTokenRecord record;\n+\t\ttry {\n+\t\t\trecord = personalAccessTokenDao.getTokenRecord(tokenId);", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\nindex f54d4657cb..fe42e301de 100644\n--- a/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n+++ b/services/repository-managers/src/main/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerImpl.java\n\n@@ -34,6 +34,8 @@ public class PersonalAccessTokenManagerImpl implements PersonalAccessTokenManage\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_DAYS = 180L;\n \tprivate static final long MAX_TOKEN_LEASE_LENGTH_MILLIS = MAX_TOKEN_LEASE_LENGTH_DAYS * 24 * 60 * 60 * 1000;\n \n+\tprivate static final long MAX_NUMBER_OF_TOKENS_PER_USER = 100L;\n+\n \t@Autowired\n \tprivate PersonalAccessTokenDao personalAccessTokenDao;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMzkxMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r456603910", "bodyText": "delete the created user", "author": "brucehoff", "createdAt": "2020-07-17T18:22:43Z", "path": "services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.sagebionetworks.repo.manager.authentication;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.sagebionetworks.repo.manager.UserManager;\n+import org.sagebionetworks.repo.manager.oauth.OIDCTokenHelper;\n+import org.sagebionetworks.repo.model.AuthorizationConstants;\n+import org.sagebionetworks.repo.model.NextPageToken;\n+import org.sagebionetworks.repo.model.UserInfo;\n+import org.sagebionetworks.repo.model.auth.AccessTokenGenerationRequest;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecord;\n+import org.sagebionetworks.repo.model.auth.AccessTokenRecordList;\n+import org.sagebionetworks.repo.model.auth.NewUser;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOCredential;\n+import org.sagebionetworks.repo.model.dbo.persistence.DBOTermsOfUseAgreement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.Jwt;\n+\n+@ExtendWith(SpringExtension.class)\n+@ContextConfiguration(locations = { \"classpath:test-context.xml\" })\n+public class PersonalAccessTokenManagerAutowiredTest {\n+\n+\t@Autowired\n+\tprivate PersonalAccessTokenManager personalAccessTokenManager;\n+\n+\t@Autowired\n+\tprivate UserManager userManager;\n+\n+\t@Autowired\n+\tprivate OIDCTokenHelper oidcTokenHelper;\n+\n+\tprivate UserInfo adminUserInfo;\n+\tprivate UserInfo userInfo;\n+\n+\tprivate static final String OAUTH_ENDPOINT = \"http://synapse.org/\";\n+\n+\tList<String> tokenIdsToDelete;\n+\n+\t@BeforeEach\n+\tvoid beforeEach() {\n+\t\t// Create an admin user and a regular user\n+\t\tadminUserInfo = userManager.getUserInfo(AuthorizationConstants.BOOTSTRAP_PRINCIPAL.THE_ADMIN_USER.getPrincipalId());\n+\t\tDBOCredential cred = new DBOCredential();\n+\t\tcred.setSecretKey(\"\");\n+\t\tNewUser newUser = new NewUser();\n+\t\tnewUser.setEmail(UUID.randomUUID().toString() + \"@test.com\");\n+\t\tnewUser.setUserName(UUID.randomUUID().toString());\n+\t\tDBOTermsOfUseAgreement tou = new DBOTermsOfUseAgreement();\n+\t\ttou.setAgreesToTermsOfUse(Boolean.TRUE);\n+\t\tuserInfo = userManager.createOrGetTestUser(adminUserInfo, newUser, cred, tou);\n+\n+\t\ttokenIdsToDelete = new ArrayList<>();\n+\t}\n+\n+\t@AfterEach\n+\tvoid afterEach() {\n+\t\tfor (String t : tokenIdsToDelete) {", "originalCommit": "9edaae2ac11dbc660aef6ad27e41e7be903c2449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "chunk": "diff --git a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java\nindex 98b1e17fb4..76844c450e 100644\n--- a/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java\n+++ b/services/repository-managers/src/test/java/org/sagebionetworks/repo/manager/authentication/PersonalAccessTokenManagerAutowiredTest.java\n\n@@ -75,6 +75,8 @@ public class PersonalAccessTokenManagerAutowiredTest {\n \t\tfor (String t : tokenIdsToDelete) {\n \t\t\tpersonalAccessTokenManager.revokeToken(adminUserInfo, t);\n \t\t}\n+\n+\t\tuserManager.deletePrincipal(adminUserInfo, userInfo.getId());\n \t}\n \n \tprivate String getTokenIdFromJwt(String jwt) {\n"}}, {"oid": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "message": "Code review changes #4141", "committedDate": "2020-07-20T15:17:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzYyMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458363622", "bodyText": "alone", "author": "brucehoff", "createdAt": "2020-07-21T20:20:09Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -75,6 +76,18 @@\n  * to use that service.\r\n  * </p>\r\n  * <p>\r\n+ * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\r\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\r\n+ * personal access tokens are used by including one as a Bearer token in the Authorization header of all authorized requests.\r\n+ * Unlike OAuth access tokens,\r\n+ * <ul>\r\n+ *     <li>PATs can be freely generated by a user along and are not linked to any third party OAuth client and</li>\r", "originalCommit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 6e0d037fc5..f449cea472 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -77,11 +77,11 @@ import org.springframework.web.util.UriComponentsBuilder;\n  * </p>\n  * <p>\n  * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\n- * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens (ATs),\n  * personal access tokens are used by including one as a Bearer token in the Authorization header of all authorized requests.\n  * Unlike OAuth access tokens,\n  * <ul>\n- *     <li>PATs can be freely generated by a user along and are not linked to any third party OAuth client and</li>\n+ *     <li>PATs can be freely generated by a user alone and are not linked to any third party OAuth client and</li>\n  *     <li>While ATs have a strict 24 hour lifetime, PATs are long lived, and will only expire if unused for 180 consecutive days</li>\n  * </ul>\n  * For these reasons, it is critical to treat PATs as sensitive credentials, like passwords. If a user creates more than 100 tokens, then\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDAzMA==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458364030", "bodyText": "Like OAuth access tokens  (ATs)", "author": "brucehoff", "createdAt": "2020-07-21T20:20:56Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -75,6 +76,18 @@\n  * to use that service.\r\n  * </p>\r\n  * <p>\r\n+ * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\r\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\r", "originalCommit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 6e0d037fc5..f449cea472 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -77,11 +77,11 @@ import org.springframework.web.util.UriComponentsBuilder;\n  * </p>\n  * <p>\n  * Personal access tokens (PATs) are the preferred replacement for API keys, and can a user may freely generate up to 100\n- * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens,\n+ * tokens with scoped access using <a href=\"${POST.personalAccessToken}>POST /personalAccessToken</a>. Like OAuth access tokens (ATs),\n  * personal access tokens are used by including one as a Bearer token in the Authorization header of all authorized requests.\n  * Unlike OAuth access tokens,\n  * <ul>\n- *     <li>PATs can be freely generated by a user along and are not linked to any third party OAuth client and</li>\n+ *     <li>PATs can be freely generated by a user alone and are not linked to any third party OAuth client and</li>\n  *     <li>While ATs have a strict 24 hour lifetime, PATs are long lived, and will only expire if unused for 180 consecutive days</li>\n  * </ul>\n  * For these reasons, it is critical to treat PATs as sensitive credentials, like passwords. If a user creates more than 100 tokens, then\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2ODQxMg==", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/pull/4141#discussion_r458368412", "bodyText": "(\"jti\" claim)", "author": "brucehoff", "createdAt": "2020-07-21T20:29:00Z", "path": "services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java", "diffHunk": "@@ -399,9 +413,9 @@ AccessTokenRecord getPersonalAccessToken(\n \t/**\r\n \t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\r\n \t * @param userId\r\n-\t * @param tokenId\r\n+\t * @param tokenId The unique ID of the token, which is the unique ID (\"jti\") contained in the JWT\r", "originalCommit": "4e5d8e20b679731f8cc2c6a95aa368dc6aa9c8c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "chunk": "diff --git a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\nindex 6e0d037fc5..f449cea472 100644\n--- a/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n+++ b/services/repository/src/main/java/org/sagebionetworks/auth/controller/AuthenticationController.java\n\n@@ -413,7 +413,7 @@ public class AuthenticationController {\n \t/**\n \t * Revoke a personal access token. The token cannot be re-enabled after being revoked.\n \t * @param userId\n-\t * @param tokenId The unique ID of the token, which is the unique ID (\"jti\") contained in the JWT\n+\t * @param tokenId The unique ID of the token, which is the unique ID (the \"jti\" claim) contained in the JWT\n \t */\n \t@RequiredScope({modify, authorize})\n \t@ResponseStatus(HttpStatus.OK)\n"}}, {"oid": "4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "url": "https://github.com/Sage-Bionetworks/Synapse-Repository-Services/commit/4d2a3284fa1a5e4053d3dd5c1f357e6a4205ec1e", "message": "Docs fixes", "committedDate": "2020-07-21T21:21:59Z", "type": "commit"}]}