{"pr_number": 686, "pr_title": "Instead of ServiceClient, taking ServiceClient.Builder from Client builder, expose CredentailInterceptor in Client builder", "pr_createdAt": "2020-08-17T17:29:37Z", "pr_url": "https://github.com/Azure/autorest.java/pull/686", "timeline": [{"oid": "f83c82a670039241286a73a47bcdd7da60629f48", "url": "https://github.com/Azure/autorest.java/commit/f83c82a670039241286a73a47bcdd7da60629f48", "message": "Instead of ServiceClient, taking ServiceClient.Builder from Client builder, expose CredentailInterceptor in Client builder", "committedDate": "2020-08-17T17:27:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNTkzMg==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471705932", "bodyText": "Honestly, I don't like this. Can we do it right first time rather than \"fix\" it later?", "author": "JianpingChen", "createdAt": "2020-08-17T18:44:45Z", "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -197,4 +232,133 @@ protected String primaryBuildMethodName(JavaSettings settings) {\n                 ? \"buildInnerClient\"\n                 : \"buildClient\";\n     }\n+\n+    private List<ClientMethodParameter> commonPropertiesFromCtr(final Constructor constructor) {\n+        return constructor.getParameters()\n+                .stream()\n+                .map(p -> {\n+                    if (p.getWireType() == ClassType.AndroidRestClient) {\n+                        return new ClientMethodParameter.Builder()\n+                                .description(\"The Azure Core generic ServiceClient Builder.\")\n+                                .isFinal(false)\n+                                .wireType(ClassType.AndroidRestClientBuilder)\n+                                .name(\"serviceClientBuilder\")\n+                                .isRequired(true)\n+                                .isConstant(false)\n+                                .fromClient(true)\n+                                .annotations(new ArrayList<>())\n+                                .defaultValue(\"new ServiceClient.Builder()\")\n+                                .build();\n+                    } else {\n+                        return p;\n+                    }\n+                }).collect(Collectors.toList());\n+    }\n+\n+    private ClientMethodParameter credentialInterceptorParameter() {\n+        return new ClientMethodParameter.Builder()\n+                .description(\"The Interceptor to set intercept request and set credentials.\")\n+                .isFinal(false)\n+                .wireType(ClassType.AndroidOkHttpInterceptor)\n+                .name(\"credentialInterceptor\")\n+                .isRequired(true)\n+                .isConstant(false)\n+                .fromClient(true)\n+                .annotations(new ArrayList<>())\n+                .build();\n+    }\n+\n+    private static void writeBuilderProperty(JavaSettings settings,\n+                                      JavaClass classBlock,\n+                                      String builderName,\n+                                      String propDescription,\n+                                      String propName,\n+                                      IType propType) {\n+        classBlock.blockComment(settings.getMaximumJavadocCommentWidth(), comment ->\n+        {\n+            comment.line(propDescription);\n+        });\n+        classBlock.privateMemberVariable(String.format(\"%1$s %2$s\", propType, propName));\n+\n+        classBlock.javadocComment(comment ->\n+        {\n+            comment.description(String.format(\"Sets %1$s\", propDescription));\n+            comment.param(propName, String.format(\"the %1$s value.\", propName));\n+            comment.methodReturns(String.format(\"the %1$s\", builderName));\n+        });\n+        classBlock.publicMethod(String.format(\"%1$s %2$s(%3$s %4$s)\",\n+                builderName,\n+                CodeNamer.toCamelCase(propName),\n+                propType,\n+                propName), function ->\n+        {\n+            function.line(String.format(\"this.%1$s = %2$s;\", propName, propName));\n+            function.methodReturn(\"this\");\n+        });\n+    }\n+\n+    private void fixImportForBuilderParameters(List<ClientMethodParameter> parameters, Set<String> imports) {\n+        parameters.stream()\n+                .forEach(p -> {\n+                    fixImportIfBuilderParameter(p, imports);\n+                });\n+    }\n+\n+    private void fixImportIfBuilderParameter(ClientMethodParameter parameter, Set<String> imports) {", "originalCommit": "f83c82a670039241286a73a47bcdd7da60629f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MTc2Mw==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471791763", "bodyText": "I agree, unfortunately, the core gen doesn't have support to indicate that an IType is child type, so this import fixing. Didn't spend much time designing that in the core since there is only one child type scenario today, lets circle back once the high priority items to unblock chat is done.", "author": "anuchandy", "createdAt": "2020-08-17T21:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNTkzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzA0Nw==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471707047", "bodyText": "Ideally, all properties should be handled the same way.", "author": "JianpingChen", "createdAt": "2020-08-17T18:46:49Z", "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -120,25 +127,53 @@ public void write(ServiceClient serviceClient, JavaFile javaFile) {\n             });\n             classBlock.method(visibility, null, String.format(\"%1$s %2$s()\", buildReturnType, buildMethodName), function ->\n             {\n-                for (ServiceClientProperty serviceClientProperty : Stream.concat(serviceClient.getProperties().stream().filter(p -> !p.isReadOnly()), commonProperties.stream()).collect(Collectors.toList())) {\n-                    if (serviceClientProperty.getDefaultValueExpression() != null) {\n-                        function.ifBlock(String.format(\"%1$s == null\", serviceClientProperty.getName()), ifBlock ->\n-                        {\n-                            function.line(String.format(\"this.%1$s = %2$s;\", serviceClientProperty.getName(), serviceClientProperty.getDefaultValueExpression()));\n+                final List<String> constructorArgsSet1 = new ArrayList<>();\n+                serviceClient.getProperties()\n+                        .stream()\n+                        .filter(p -> !p.isReadOnly())\n+                        .forEach(p -> {\n+                            // 1. Collect ServiceClient Ctr args.\n+                            constructorArgsSet1.add(p.getName());\n+                            // 2. Set default value for ServiceClient properties whose builder setters are not called by the app.\n+                            if (p.getDefaultValueExpression() != null) {\n+                                function.ifBlock(String.format(\"%1$s == null\", p.getName()), ifBlock ->\n+                                {\n+                                    function.line(\"this.%1$s = %2$s;\", p.getName(), p.getDefaultValueExpression());\n+                                });\n+                            }\n                         });\n-                    }\n-                }\n \n-                // additional service client properties in constructor arguments\n-                String constructorArgs = serviceClient.getProperties().stream()\n-                        .filter(p -> !p.isReadOnly())\n-                        .map(ServiceClientProperty::getName)\n+                final List<String> constructorArgsSet2 = new ArrayList<>();\n+                commonProperties.stream()\n+                        .filter(p -> p.getWireType() != ClassType.AndroidOkHttpInterceptor)", "originalCommit": "f83c82a670039241286a73a47bcdd7da60629f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MzMzNA==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471793334", "bodyText": "yep, the reason for this filter is - here we are deriving the service ctr args, so we filter items that are not ctr args. I could avoid filter by defining one additional stream.", "author": "anuchandy", "createdAt": "2020-08-17T21:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzA0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODIyMQ==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471708221", "bodyText": "Could have done this when the constructor is defined", "author": "JianpingChen", "createdAt": "2020-08-17T18:49:10Z", "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -197,4 +232,133 @@ protected String primaryBuildMethodName(JavaSettings settings) {\n                 ? \"buildInnerClient\"\n                 : \"buildClient\";\n     }\n+\n+    private List<ClientMethodParameter> commonPropertiesFromCtr(final Constructor constructor) {\n+        return constructor.getParameters()\n+                .stream()\n+                .map(p -> {\n+                    if (p.getWireType() == ClassType.AndroidRestClient) {\n+                        return new ClientMethodParameter.Builder()", "originalCommit": "f83c82a670039241286a73a47bcdd7da60629f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NDY3Mw==", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471794673", "bodyText": "this is a mapping from builder param to client ctr param, so ctr definition has the type that the builder produces not the builder.", "author": "anuchandy", "createdAt": "2020-08-17T21:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODIyMQ=="}], "type": "inlineReview", "revised_code": null}]}