{"pr_number": 1588, "pr_title": "JBTM-3278 Require that LRA method must be combined with Compensate or\u2026", "pr_createdAt": "2020-04-06T13:57:32Z", "pr_url": "https://github.com/jbosstm/narayana/pull/1588", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcyMTQ4MA==", "url": "https://github.com/jbosstm/narayana/pull/1588#discussion_r404721480", "bodyText": "Do you think it could be possible to summarize the functionality (the reason for existence of this class) as a comment?", "author": "ochaloup", "createdAt": "2020-04-07T11:00:28Z", "path": "rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/AnnotationResolver.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package io.narayana.lra.client.internal.proxy.nonjaxrs;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+\n+public class AnnotationResolver {", "originalCommit": "6528c2708c8a1f8573c8c68c4102d3a623ce484f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36db4f59bdd7e69f81330cc871d7229e167481fa", "chunk": "diff --git a/rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/AnnotationResolver.java b/rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/AnnotationResolver.java\nindex 89f5bf935..10043f652 100644\n--- a/rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/AnnotationResolver.java\n+++ b/rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/AnnotationResolver.java\n\n@@ -24,8 +24,24 @@ package io.narayana.lra.client.internal.proxy.nonjaxrs;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n \n+/**\n+ * Annotation resolver that resolves annotation in a matter similar to JAX-RS/Jakarta REST definitions.\n+ */\n public class AnnotationResolver {\n \n+    /**\n+     * Finds the annotation on the method with the following criteria:\n+     *\n+     * 1. Find the annotation on method directly. If not present,\n+     * 2. Find the annotation on the same method in the superclass (superclass hierarchy). If not present,\n+     * 3. Find the annotation on the same method in the implemented interfaces (and interfaces implemented by\n+     * its superclasses). If not found return null.\n+     *\n+     * @param annotationClass annotation to look for\n+     * @param method method to scan\n+     * @param <T> the actual type of the annotation\n+     * @return the found annotation object or null if not found\n+     */\n     public static <T extends Annotation> T resolveAnnotation(Class<T> annotationClass, Method method) {\n         // current method\n         T annotation = method.getAnnotation(annotationClass);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MDM0Nw==", "url": "https://github.com/jbosstm/narayana/pull/1588#discussion_r404760347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns whether the classinfo represents an LRA participant --\n          \n          \n            \n                 * Returns whether the classinfo represents a LRA participant", "author": "ochaloup", "createdAt": "2020-04-07T12:14:05Z", "path": "rts/lra/lra-proxy/api/src/main/java/io/narayana/lra/client/internal/proxy/nonjaxrs/LRACDIExtension.java", "diffHunk": "@@ -109,10 +111,25 @@ private LRAParticipant getAsParticipant(ClassInfo classInfo) throws ClassNotFoun\n         return participant.hasNonJaxRsMethods() ? participant : null;\n     }\n \n-    private boolean isNotLRAParticipant(ClassInfo classInfo) {\n-        Map<DotName, List<AnnotationInstance>> annotations = classInfo.annotations();\n-        return !annotations.containsKey(DotNames.LRA) ||\n-            (!annotations.containsKey(DotNames.COMPENSATE) &&\n-                !annotations.containsKey(DotNames.AFTER_LRA));\n+    /**\n+     * Returns whether the classinfo represents an LRA participant --", "originalCommit": "6528c2708c8a1f8573c8c68c4102d3a623ce484f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2NTYwNw==", "url": "https://github.com/jbosstm/narayana/pull/1588#discussion_r404765607", "bodyText": "didn't we agree that it's read as (e)LRA? so it should be an LRA not a LRA?", "author": "xstefank", "createdAt": "2020-04-07T12:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MDM0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "36db4f59bdd7e69f81330cc871d7229e167481fa", "url": "https://github.com/jbosstm/narayana/commit/36db4f59bdd7e69f81330cc871d7229e167481fa", "message": "JBTM-3278 Require that LRA method must be combined with Compensate or AfterLRA", "committedDate": "2020-04-07T14:40:42Z", "type": "commit"}, {"oid": "36db4f59bdd7e69f81330cc871d7229e167481fa", "url": "https://github.com/jbosstm/narayana/commit/36db4f59bdd7e69f81330cc871d7229e167481fa", "message": "JBTM-3278 Require that LRA method must be combined with Compensate or AfterLRA", "committedDate": "2020-04-07T14:40:42Z", "type": "forcePushed"}]}