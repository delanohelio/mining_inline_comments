{"pr_number": 8500, "pr_title": " Add integration tests for oauth2 endpoints for legacy URL mode", "pr_createdAt": "2020-06-15T04:17:33Z", "pr_url": "https://github.com/wso2/product-is/pull/8500", "timeline": [{"oid": "717a60795c537bfcf3399ee11e0fe97e4b0e2ee6", "url": "https://github.com/wso2/product-is/commit/717a60795c537bfcf3399ee11e0fe97e4b0e2ee6", "message": "Add integration tests for oauth2 JWKS Endpoint", "committedDate": "2020-06-15T02:33:26Z", "type": "commit"}, {"oid": "b5ce71f4cb3490c3b844f055b13aac2ac07ffd19", "url": "https://github.com/wso2/product-is/commit/b5ce71f4cb3490c3b844f055b13aac2ac07ffd19", "message": "Add integration tests for oauth2 endpoints for legacy URL mode", "committedDate": "2020-06-17T10:43:02Z", "type": "commit"}, {"oid": "cfde235052cf42425aefea53036b17bd66b1b275", "url": "https://github.com/wso2/product-is/commit/cfde235052cf42425aefea53036b17bd66b1b275", "message": "Format the code", "committedDate": "2020-06-17T11:19:37Z", "type": "commit"}, {"oid": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "url": "https://github.com/wso2/product-is/commit/80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "message": "Update OAuth2ServiceAuthCodeGrantOpenIdTestCase", "committedDate": "2020-06-17T17:30:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1MzAyNw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442153027", "bodyText": "remove * annotations", "author": "emswbandara", "createdAt": "2020-06-18T11:19:19Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDA4NQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634085", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1MzAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\nindex f146fbf78..b8ecfacfd 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n\n@@ -30,9 +30,14 @@ import org.apache.http.impl.client.HttpClientBuilder;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n import org.testng.Assert;\n-import org.testng.annotations.*;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n import org.wso2.carbon.automation.engine.context.AutomationContext;\n import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n import org.wso2.identity.integration.test.util.Utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NDY4Mw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442154683", "bodyText": "do we need to assert failure here? we can add throw Exception to method signature.", "author": "emswbandara", "createdAt": "2020-06-18T11:22:51Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() {\n+\n+        try {\n+            OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+            appDTO.setApplicationName(OIDC_APP_NAME);\n+            appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+            appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+            appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+            appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+            adminClient.registerOAuthApplicationData(appDTO);\n+            OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+            Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+            oidcAppClientId = createdApp.getOauthConsumerKey();\n+        } catch (Exception e) {\n+            Assert.fail(\"Adding OIDC app failed.\", e);", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDEyNw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634127", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NDY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\nindex f146fbf78..b8ecfacfd 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n\n@@ -30,9 +30,14 @@ import org.apache.http.impl.client.HttpClientBuilder;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n import org.testng.Assert;\n-import org.testng.annotations.*;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n import org.wso2.carbon.automation.engine.context.AutomationContext;\n import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n import org.wso2.identity.integration.test.util.Utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTI4MA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442155280", "bodyText": "remove this and add 'throws Exception' to method signature", "author": "emswbandara", "createdAt": "2020-06-18T11:24:06Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.*;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() {\n+\n+        try {\n+            OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+            appDTO.setApplicationName(OIDC_APP_NAME);\n+            appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+            appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+            appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+            appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+            adminClient.registerOAuthApplicationData(appDTO);\n+            OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+            Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+            oidcAppClientId = createdApp.getOauthConsumerKey();\n+        } catch (Exception e) {\n+            Assert.fail(\"Adding OIDC app failed.\", e);\n+        }\n+    }\n+\n+    private void removeApplications() throws Exception {\n+\n+        adminClient.removeOAuthApplicationData(oidcAppClientId);\n+    }\n+\n+    private void initiateOIDCRequest(boolean isCheckLogoutConfirmation) {\n+\n+        try {\n+            List<NameValuePair> urlParameters = getOIDCInitiationRequestParams();\n+            HttpResponse response = sendPostRequestWithParameters(urlParameters,\n+                    \"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/oauth2-authorize-user.jsp\");\n+            Assert.assertNotNull(response, \"Authorization response is null\");\n+            Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+            Assert.assertNotNull(locationHeader, \"Authorization response header is null.\");\n+            EntityUtils.consume(response.getEntity());\n+\n+            response = sendGetRequest(locationHeader.getValue());\n+            sessionDataKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+            if (isCheckLogoutConfirmation) {\n+                Assert.assertNotNull(sessionDataKey, \"Back channel logout failed for OIDC.\");\n+            } else {\n+                Assert.assertNotNull(sessionDataKey, \"sessionDataKey is null for .\" + OIDC_APP_NAME);\n+            }\n+            EntityUtils.consume(response.getEntity());\n+        } catch (Exception e) {\n+            Assert.fail(\"OIDC initiation request failed.\", e);", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTU4Nw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442155587", "bodyText": "please check other places also", "author": "emswbandara", "createdAt": "2020-06-18T11:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDIwMw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634203", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\nindex f146fbf78..b8ecfacfd 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java\n\n@@ -30,9 +30,14 @@ import org.apache.http.impl.client.HttpClientBuilder;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n import org.testng.Assert;\n-import org.testng.annotations.*;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n import org.wso2.carbon.automation.engine.context.AutomationContext;\n import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n import org.wso2.identity.integration.test.util.Utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAzMA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156030", "bodyText": "remove unnecessary spaces.", "author": "emswbandara", "createdAt": "2020-06-18T11:25:43Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -81,17 +84,34 @@\n \n     private List<NameValuePair> consentParameters = new ArrayList<>();\n     private CookieStore cookieStore = new BasicCookieStore();\n+    private final String username;\n+    private final String userPassword;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantOpenIdTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n-        super.init(TestUserMode.SUPER_TENANT_USER);\n \n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        String sessionIndex = logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        String sessionIndex =\n+                logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDI4Mg==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634282", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\nindex 66d1370d1..d892f63db 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n\n@@ -89,10 +89,7 @@ public class OAuth2ServiceAuthCodeGrantOpenIdTestCase extends OAuth2ServiceAbstr\n \n     @DataProvider(name = \"configProvider\")\n     public static Object[][] configProvider() {\n-        return new Object[][]{\n-                {TestUserMode.SUPER_TENANT_ADMIN},\n-                {TestUserMode.TENANT_ADMIN}\n-        };\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n     }\n \n     @Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjIxMw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156213", "bodyText": "remove unnecessary spaces", "author": "emswbandara", "createdAt": "2020-06-18T11:26:05Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java", "diffHunk": "@@ -63,21 +65,38 @@\n     private String authorizationCode;\n     private String consumerKey;\n     private String consumerSecret;\n+    private final String username;\n+    private final String userPassword;\n+    private final AutomationContext context;\n \n     private static final String PLAYGROUND_RESET_PAGE = \"http://localhost:\" + CommonConstants.DEFAULT_TOMCAT_PORT +\n             \"/playground2/oauth2.jsp?reset=true\";\n     private DefaultHttpClient client;\n \n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n+\n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDI0NQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634245", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java\nindex fc36abb02..3801ed85d 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantTestCase.java\n\n@@ -96,7 +96,7 @@ public class OAuth2ServiceAuthCodeGrantTestCase extends OAuth2ServiceAbstractInt\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));\n         client = new DefaultHttpClient();\n \n         setSystemproperties();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjY3OQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156679", "bodyText": "i think line number 61 and 62 needs to be formatted. please check", "author": "emswbandara", "createdAt": "2020-06-18T11:27:04Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java", "diffHunk": "@@ -47,19 +50,35 @@\n \tprivate String accessToken;\n \tprivate String consumerKey;\n \tprivate String consumerSecret;\n+\tprivate String username;\n+\tprivate String userPassword;\n \n \tprivate CloseableHttpClient client;\n \n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDY1Ng==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634656", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java\nindex 58a70f702..c4f5f2e18 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceClientCredentialTestCase.java\n\n@@ -57,10 +57,7 @@ public class OAuth2ServiceClientCredentialTestCase extends OAuth2ServiceAbstract\n \n \t@DataProvider(name = \"configProvider\")\n \tpublic static Object[][] configProvider() {\n-\t\treturn new Object[][]{\n-\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},\n-\t\t\t\t{TestUserMode.TENANT_ADMIN}\n-\t\t};\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n \t}\n \n \t@Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjkyNQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442156925", "bodyText": "format this line and below", "author": "emswbandara", "createdAt": "2020-06-18T11:27:29Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java", "diffHunk": "@@ -58,16 +60,33 @@\n \tprivate String consumerSecret;\n \n \tprivate CloseableHttpClient client;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDMxNA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634314", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java\nindex 5aea5f144..4620d58c9 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java\n\n@@ -65,10 +65,7 @@ public class OAuth2ServiceImplicitGrantTestCase extends OAuth2ServiceAbstractInt\n \n \t@DataProvider(name = \"configProvider\")\n \tpublic static Object[][] configProvider() {\n-\t\treturn new Object[][]{\n-\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},\n-\t\t\t\t{TestUserMode.TENANT_ADMIN}\n-\t\t};\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n \t}\n \n \t@Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzEyNA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157124", "bodyText": "remove spaces", "author": "emswbandara", "createdAt": "2020-06-18T11:27:54Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java", "diffHunk": "@@ -50,17 +53,37 @@\n     private String consumerSecret;\n \n     private CloseableHttpClient client;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{\n+                {TestUserMode.SUPER_TENANT_ADMIN},\n+                {TestUserMode.TENANT_ADMIN}\n+        };\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceIntrospectionTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDY5OQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634699", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java\nindex f7007a0a4..aa5d9e79c 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java\n\n@@ -60,10 +60,7 @@ public class OAuth2ServiceIntrospectionTestCase extends OAuth2ServiceAbstractInt\n \n     @DataProvider(name = \"configProvider\")\n     public static Object[][] configProvider() {\n-        return new Object[][]{\n-                {TestUserMode.SUPER_TENANT_ADMIN},\n-                {TestUserMode.TENANT_ADMIN}\n-        };\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n     }\n \n     @Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzI2MA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157260", "bodyText": "reformat lines", "author": "emswbandara", "createdAt": "2020-06-18T11:28:09Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,36 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate final String TENANT_DOMAIN = \"wso2.com\";\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{\n+\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDgwOA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634808", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\nindex 42b9f6e4f..106a4419d 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\n\n@@ -71,14 +71,11 @@ public class OAuth2ServiceResourceOwnerTestCase extends OAuth2ServiceAbstractInt\n \tprivate final String username;\n \tprivate final String userPassword;\n \tprivate final String activeTenant;\n-\tprivate final String TENANT_DOMAIN = \"wso2.com\";\n+\tprivate static final String TENANT_DOMAIN = \"wso2.com\";\n \n \t@DataProvider(name = \"configProvider\")\n \tpublic static Object[][] configProvider() {\n-\t\treturn new Object[][]{\n-\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},\n-\t\t\t\t{TestUserMode.TENANT_ADMIN}\n-\t\t};\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n \t}\n \n \t@Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzQyMw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157423", "bodyText": "let's define constant as static", "author": "emswbandara", "createdAt": "2020-06-18T11:28:28Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,36 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate final String TENANT_DOMAIN = \"wso2.com\";", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDczMQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634731", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\nindex 42b9f6e4f..106a4419d 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java\n\n@@ -71,14 +71,11 @@ public class OAuth2ServiceResourceOwnerTestCase extends OAuth2ServiceAbstractInt\n \tprivate final String username;\n \tprivate final String userPassword;\n \tprivate final String activeTenant;\n-\tprivate final String TENANT_DOMAIN = \"wso2.com\";\n+\tprivate static final String TENANT_DOMAIN = \"wso2.com\";\n \n \t@DataProvider(name = \"configProvider\")\n \tpublic static Object[][] configProvider() {\n-\t\treturn new Object[][]{\n-\t\t\t\t{TestUserMode.SUPER_TENANT_ADMIN},\n-\t\t\t\t{TestUserMode.TENANT_ADMIN}\n-\t\t};\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n \t}\n \n \t@Factory(dataProvider = \"configProvider\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzkyNg==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442157926", "bodyText": "use static when defining constants", "author": "emswbandara", "createdAt": "2020-06-18T11:29:29Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java", "diffHunk": "@@ -53,11 +55,20 @@\n     private ClientID consumerKey;\n     private Secret consumerSecret;\n \n-    private String tokenType;\n+    private final String tokenType;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";", "originalCommit": "80a4aef2bcfe987b5f06902cecbd0b22eaff09a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNDc3OQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r442634779", "bodyText": "Fixed 947bac0", "author": "GANGANI", "createdAt": "2020-06-19T05:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NzkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java\nindex e75365483..f0383e60c 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2TokenRevocationWithRevokedAccessToken.java\n\n@@ -59,7 +59,7 @@ public class OAuth2TokenRevocationWithRevokedAccessToken extends OAuth2ServiceAb\n     private final String username;\n     private final String userPassword;\n     private final String activeTenant;\n-    private final String TENANT_DOMAIN = \"wso2.com\";\n+    private static final String TENANT_DOMAIN = \"wso2.com\";\n \n     @Factory(dataProvider = \"oAuthConsumerApplicationProvider\")\n     public OAuth2TokenRevocationWithRevokedAccessToken(String tokenType, TestUserMode userMode) throws Exception {\n"}}, {"oid": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "url": "https://github.com/wso2/product-is/commit/947bac08aa1f82c91d337ca6d537cb8264debfa9", "message": "Address comments", "committedDate": "2020-06-19T05:11:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODA3OA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518078", "bodyText": "change this line to\nsessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "author": "emswbandara", "createdAt": "2020-06-22T12:20:43Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceImplicitGrantTestCase.java", "diffHunk": "@@ -58,16 +60,30 @@\n \tprivate String consumerSecret;\n \n \tprivate CloseableHttpClient client;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+\t}\n+\n+\t@Factory(dataProvider = \"configProvider\")\n+\tpublic OAuth2ServiceImplicitGrantTestCase(TestUserMode userMode) throws Exception {\n+\n+\t\tsuper.init(userMode);\n+\t\tAutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+\t\tthis.username = context.getContextTenant().getTenantAdmin().getUserName();\n+\t\tthis.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+\t}\n \n \t@BeforeClass(alwaysRun = true)\n \tpublic void testInit() throws Exception {\n-\t\tsuper.init(TestUserMode.SUPER_TENANT_USER);\n+\n \t\tlogManger = new AuthenticatorClient(backendURL);\n \t\tadminUsername = userInfo.getUserName();\n \t\tadminPassword = userInfo.getPassword();\n-\t\tlogManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-\t\t\t\tisServer.getSuperTenant().getTenantAdmin().getPassword(),\n-\t\t\t\tisServer.getInstance().getHosts().get(\"default\"));\n+\t\tlogManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODIzOQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518239", "bodyText": "change to \n\nsessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "author": "emswbandara", "createdAt": "2020-06-22T12:21:02Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceIntrospectionTestCase.java", "diffHunk": "@@ -50,17 +53,33 @@\n     private String consumerSecret;\n \n     private CloseableHttpClient client;\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+    private final String TENANT_DOMAIN = \"wso2.com\";\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceIntrospectionTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n \n-        super.init(TestUserMode.SUPER_TENANT_USER);\n         logManger = new AuthenticatorClient(backendURL);\n         adminUsername = userInfo.getUserName();\n         adminPassword = userInfo.getPassword();\n-        logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODM5Nw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r443518397", "bodyText": "change to  sessionCookie = logManger.login(username, userPassword, isServer.getInstance().getHosts().get(\"default\"));", "author": "emswbandara", "createdAt": "2020-06-22T12:21:18Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceResourceOwnerTestCase.java", "diffHunk": "@@ -65,16 +68,33 @@\n \tprivate static final String lockedUserPassword = \"test_locked_user_pass\";\n \tprivate static final String ACCOUNT_LOCK_CLAIM_URI = \"http://wso2.org/claims/identity/accountLocked\";\n \tprotected IdentityGovernanceServiceClient identityGovernanceServiceClient;\n+\tprivate final String username;\n+\tprivate final String userPassword;\n+\tprivate final String activeTenant;\n+\tprivate static final String TENANT_DOMAIN = \"wso2.com\";\n+\n+\t@DataProvider(name = \"configProvider\")\n+\tpublic static Object[][] configProvider() {\n+\t\treturn new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+\t}\n+\n+\t@Factory(dataProvider = \"configProvider\")\n+\tpublic OAuth2ServiceResourceOwnerTestCase(TestUserMode userMode) throws Exception {\n+\n+\t\tsuper.init(userMode);\n+\t\tAutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+\t\tthis.username = context.getContextTenant().getTenantAdmin().getUserName();\n+\t\tthis.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+\t\tthis.activeTenant = context.getContextTenant().getDomain();\n+\t}\n \n \t@BeforeClass(alwaysRun = true)\n \tpublic void testInit() throws Exception {\n-\t\tsuper.init(TestUserMode.SUPER_TENANT_USER);\n+\n \t\tlogManger = new AuthenticatorClient(backendURL);\n \t\tadminUsername = userInfo.getUserName();\n \t\tadminPassword = userInfo.getPassword();\n-\t\tlogManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-\t\t\t\tisServer.getSuperTenant().getTenantAdmin().getPassword(),\n-\t\t\t\tisServer.getInstance().getHosts().get(\"default\"));\n+\t\tlogManger.login(username, userPassword,\tisServer.getInstance().getHosts().get(\"default\"));", "originalCommit": "947bac08aa1f82c91d337ca6d537cb8264debfa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8d4f2e57a87e7a410e148f60a3dc8150f8505704", "url": "https://github.com/wso2/product-is/commit/8d4f2e57a87e7a410e148f60a3dc8150f8505704", "message": "Fix the test failure", "committedDate": "2020-06-23T06:48:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDAyNg==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444000026", "bodyText": "remove unnecessary new line", "author": "emswbandara", "createdAt": "2020-06-23T06:53:35Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -359,6 +370,7 @@ public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) thro\n         return response;\n     }\n \n+", "originalCommit": "8d4f2e57a87e7a410e148f60a3dc8150f8505704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDA3OQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444004079", "bodyText": "Fixed f3c8c97", "author": "GANGANI", "createdAt": "2020-06-23T07:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\nindex 076a7de20..e0f3d375d 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n\n@@ -370,7 +369,6 @@ public class OAuth2ServiceAuthCodeGrantOpenIdTestCase extends OAuth2ServiceAbstr\n         return response;\n     }\n \n-\n     protected ClaimValue[] getUserClaims() {\n         ClaimValue[] claimValues = new ClaimValue[1];\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDUwNw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444000507", "bodyText": "remove unnecessary new line", "author": "emswbandara", "createdAt": "2020-06-23T06:54:37Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -369,4 +381,5 @@ public HttpResponse sendLoginPost(HttpClient client, String sessionDataKey) thro\n \n         return claimValues;\n     }\n-}\n+", "originalCommit": "8d4f2e57a87e7a410e148f60a3dc8150f8505704", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDAzMg==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r444004032", "bodyText": "Fixed f3c8c97", "author": "GANGANI", "createdAt": "2020-06-23T07:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "chunk": "diff --git a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\nindex 076a7de20..e0f3d375d 100644\n--- a/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n+++ b/modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java\n\n@@ -381,5 +379,4 @@ public class OAuth2ServiceAuthCodeGrantOpenIdTestCase extends OAuth2ServiceAbstr\n \n         return claimValues;\n     }\n-\n-}\n\\ No newline at end of file\n+}\n"}}, {"oid": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "url": "https://github.com/wso2/product-is/commit/f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "message": "Format code", "committedDate": "2020-06-23T07:01:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1MDE0MQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r487650141", "bodyText": "Incorrect formatting of the error message", "author": "pamodaaw", "createdAt": "2020-09-14T04:51:15Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {\n+\n+    private HttpClient client;\n+    private final String OIDC_APP_NAME = \"playground2\";\n+    private String oidcAppClientId = \"\";\n+    private OauthAdminClient adminClient;\n+    private String sessionDataKeyConsent;\n+    private String sessionDataKey;\n+    private final String CONSENT = \"consent\";\n+    private final String APPROVE = \"approve\";\n+    private final String SCOPE_APPROVAL = \"scope-approval\";\n+    private final String USER_AGENT = \"User-Agent\";\n+    private final String username;\n+    private final String userPassword;\n+    private final String activeTenant;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2BackChannelLogoutTestCase(TestUserMode userMode) throws Exception {\n+\n+        super.init(userMode);\n+        AutomationContext context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+        this.activeTenant = context.getContextTenant().getDomain();\n+    }\n+\n+    @BeforeClass(alwaysRun = true)\n+    public void testInit() throws Exception {\n+\n+        init();\n+        createOIDCApplication();\n+        client = HttpClientBuilder.create().setDefaultCookieStore(new BasicCookieStore()).build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void testCleanUp() throws Exception {\n+\n+        removeApplications();\n+    }\n+\n+    protected void init() throws Exception {\n+\n+        super.init();\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+    }\n+\n+    @Test(groups = \"wso2.is\", description = \"Test back channel logout for OIDC.\")\n+    public void testOIDCLogout() throws IOException {\n+\n+        // Login.\n+        initiateOIDCRequest(false);\n+        performOIDCLogin();\n+        performOIDCConsentApproval();\n+\n+        // OIDC app logout.\n+        performOIDCLogout();\n+    }\n+\n+    private void createOIDCApplication() throws Exception {\n+\n+        OAuthConsumerAppDTO appDTO = new OAuthConsumerAppDTO();\n+        appDTO.setApplicationName(OIDC_APP_NAME);\n+        appDTO.setCallbackUrl(OAuth2Constant.CALLBACK_URL);\n+        appDTO.setOAuthVersion(OAuth2Constant.OAUTH_VERSION_2);\n+        appDTO.setGrantTypes(OAuth2Constant.OAUTH2_GRANT_TYPE_AUTHORIZATION_CODE);\n+        appDTO.setBackChannelLogoutUrl(\"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/bclogout\");\n+\n+        adminClient.registerOAuthApplicationData(appDTO);\n+        OAuthConsumerAppDTO createdApp = adminClient.getOAuthAppByName(OIDC_APP_NAME);\n+        Assert.assertNotNull(createdApp, \"Adding OIDC app failed.\");\n+        oidcAppClientId = createdApp.getOauthConsumerKey();\n+    }\n+\n+    private void removeApplications() throws Exception {\n+\n+        adminClient.removeOAuthApplicationData(oidcAppClientId);\n+    }\n+\n+    private void initiateOIDCRequest(boolean isCheckLogoutConfirmation) throws IOException {\n+\n+        List<NameValuePair> urlParameters = getOIDCInitiationRequestParams();\n+        HttpResponse response = sendPostRequestWithParameters(urlParameters,\n+                \"http://localhost:\" + DEFAULT_TOMCAT_PORT + \"/playground2/oauth2-authorize-user.jsp\");\n+        Assert.assertNotNull(response, \"Authorization response is null\");\n+        Header locationHeader = response.getFirstHeader(OAuth2Constant.HTTP_RESPONSE_HEADER_LOCATION);\n+        Assert.assertNotNull(locationHeader, \"Authorization response header is null.\");\n+        EntityUtils.consume(response.getEntity());\n+\n+        response = sendGetRequest(locationHeader.getValue());\n+        sessionDataKey = Utils.extractDataFromResponse(response, CommonConstants.SESSION_DATA_KEY, 1);\n+        if (isCheckLogoutConfirmation) {\n+            Assert.assertNotNull(sessionDataKey, \"Back channel logout failed for OIDC.\");\n+        } else {\n+            Assert.assertNotNull(sessionDataKey, \"sessionDataKey is null for .\" + OIDC_APP_NAME);", "originalCommit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNTk2NQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r488135965", "bodyText": "Fixed 8369905", "author": "GANGANI", "createdAt": "2020-09-14T18:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1MDE0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjE3OA==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r487656178", "bodyText": "format this line", "author": "pamodaaw", "createdAt": "2020-09-14T05:15:47Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2ServiceAuthCodeGrantOpenIdTestCase.java", "diffHunk": "@@ -81,22 +86,45 @@\n \n     private List<NameValuePair> consentParameters = new ArrayList<>();\n     private CookieStore cookieStore = new BasicCookieStore();\n+    private final String username;\n+    private final String userPassword;\n+\n+    @DataProvider(name = \"configProvider\")\n+    public static Object[][] configProvider() {\n+        return new Object[][]{{TestUserMode.SUPER_TENANT_ADMIN}, {TestUserMode.TENANT_ADMIN}};\n+    }\n+\n+    @Factory(dataProvider = \"configProvider\")\n+    public OAuth2ServiceAuthCodeGrantOpenIdTestCase(TestUserMode userMode) throws Exception {\n+\n+        context = new AutomationContext(\"IDENTITY\", userMode);\n+        this.username = context.getContextTenant().getTenantAdmin().getUserName();\n+        this.userPassword = context.getContextTenant().getTenantAdmin().getPassword();\n+    }\n \n     @BeforeClass(alwaysRun = true)\n     public void testInit() throws Exception {\n-        super.init(TestUserMode.SUPER_TENANT_USER);\n+\n+        backendURL = context.getContextUrls().getBackEndUrl();\n+        loginLogoutClient = new LoginLogoutClient(context);\n+        sessionCookie = loginLogoutClient.login();\n+        identityContextUrls = context.getContextUrls();\n+        tenantInfo = context.getContextTenant();\n+        userInfo = tenantInfo.getContextUser();\n+\n+        appMgtclient = new ApplicationManagementServiceClient(sessionCookie, backendURL, null);\n+        adminClient = new OauthAdminClient(backendURL, sessionCookie);\n+        remoteUSMServiceClient = new RemoteUserStoreManagerServiceClient(backendURL, sessionCookie);\n \n         logManger = new AuthenticatorClient(backendURL);\n-        adminUsername = userInfo.getUserName();\n-        adminPassword = userInfo.getPassword();\n-        String sessionIndex = logManger.login(isServer.getSuperTenant().getTenantAdmin().getUserName(),\n-                isServer.getSuperTenant().getTenantAdmin().getPassword(),\n-                isServer.getInstance().getHosts().get(\"default\"));\n+        String sessionIndex = logManger.login(username, userPassword,", "originalCommit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMTg0Nw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r488131847", "bodyText": "This line is no longer there in this class.", "author": "GANGANI", "createdAt": "2020-09-14T18:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1NjE3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NjI4Nw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489376287", "bodyText": "Add class comment", "author": "janakamarasena", "createdAt": "2020-09-16T11:51:10Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/OAuth2BackChannelLogoutTestCase.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+import org.wso2.carbon.automation.engine.context.AutomationContext;\n+import org.wso2.carbon.automation.engine.context.TestUserMode;\n+import org.wso2.carbon.identity.oauth.stub.OAuthAdminServiceIdentityOAuthAdminException;\n+import org.wso2.carbon.identity.oauth.stub.dto.OAuthConsumerAppDTO;\n+import org.wso2.identity.integration.common.clients.oauth.OauthAdminClient;\n+import org.wso2.identity.integration.test.util.Utils;\n+import org.wso2.identity.integration.test.utils.CommonConstants;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+import org.wso2.identity.integration.test.utils.OAuth2Constant;\n+\n+import java.io.IOException;\n+import java.rmi.RemoteException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.wso2.identity.integration.test.utils.CommonConstants.DEFAULT_TOMCAT_PORT;\n+\n+public class OAuth2BackChannelLogoutTestCase extends OAuth2ServiceAbstractIntegrationTest {", "originalCommit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MTY1Nw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489551657", "bodyText": "Fixed e0df5f2", "author": "GANGANI", "createdAt": "2020-09-16T16:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NjI4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3Nzk2Mw==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489377963", "bodyText": "Add class comment", "author": "janakamarasena", "createdAt": "2020-09-16T11:54:02Z", "path": "modules/integration/tests-integration/tests-backend/src/test/java/org/wso2/identity/integration/test/oauth2/Oauth2JWKSEndpointTestCase.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.identity.integration.test.oauth2;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.wso2.identity.integration.test.utils.DataExtractUtil;\n+\n+import java.io.IOException;\n+\n+public class Oauth2JWKSEndpointTestCase {", "originalCommit": "f3c8c97719e2480642ca3e50a14c54fbb87ab2ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1MTc4MQ==", "url": "https://github.com/wso2/product-is/pull/8500#discussion_r489551781", "bodyText": "Fixed e0df5f2", "author": "GANGANI", "createdAt": "2020-09-16T16:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3Nzk2Mw=="}], "type": "inlineReview", "revised_code": null}]}