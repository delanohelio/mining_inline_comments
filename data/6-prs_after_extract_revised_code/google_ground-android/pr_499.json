{"pr_number": 499, "pr_title": "Fix GeoJson coordinate parsing", "pr_createdAt": "2020-06-11T19:03:50Z", "pr_url": "https://github.com/google/ground-android/pull/499", "timeline": [{"oid": "bbad72ecae0928ad73063f9870a11bd9c84bf854", "url": "https://github.com/google/ground-android/commit/bbad72ecae0928ad73063f9870a11bd9c84bf854", "message": "Fix GeoJson coordinate parsing\n\nThe GeoJson spec states that positions must be described by a longitude followed by a latitude; we previously assumed the reverse order, leading to errors.", "committedDate": "2020-06-11T19:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MDg3OA==", "url": "https://github.com/google/ground-android/pull/499#discussion_r439470878", "bodyText": "This code will work, but the variable names may not always be correct because we can't count on the polygon having the sw coordinate first. Why not just tread the polygon vertices as an arbitrary list of coordinates?", "author": "gino-m", "createdAt": "2020-06-12T14:57:12Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -48,10 +48,10 @@\n       return ImmutableList.of();\n     }\n \n-    double south = sw.optDouble(0, 0.0);\n-    double west = sw.optDouble(1, 0.0);\n-    double north = ne.optDouble(0, 0.0);\n-    double east = ne.optDouble(1, 0.0);\n+    double south = sw.optDouble(1, 0.0);", "originalCommit": "bbad72ecae0928ad73063f9870a11bd9c84bf854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyOTgyMg==", "url": "https://github.com/google/ground-android/pull/499#discussion_r439529822", "bodyText": "fantastic point! I've updated the implementation to better reflect this 7b660a7", "author": "scolsen", "createdAt": "2020-06-12T16:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MDg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "7b660a7624ef77f64d31632a2b4a725e95f4334f", "chunk": "diff --git a/gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java b/gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java\nindex b248d3a0..429358dc 100644\n--- a/gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java\n+++ b/gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java\n\n@@ -31,32 +37,26 @@ class GeoJsonExtent {\n   }\n \n   ImmutableList<LatLng> getVertices() {\n-    if (geometry.getVertices().isEmpty()) {\n-      return ImmutableList.of();\n-    }\n+    Optional<JSONArray> exteriorRing = geometry.getVertices().map(j -> j.optJSONArray(0));\n \n-    JSONArray g = geometry.getVertices().map(j -> j.optJSONArray(0)).orElse(null);\n+    return ringCoordinatesToLatLngs(exteriorRing.orElse(null));\n+  }\n \n-    if (g == null) {\n+  private ImmutableList<LatLng> ringCoordinatesToLatLngs(JSONArray exteriorRing) {\n+    if (exteriorRing == null) {\n       return ImmutableList.of();\n     }\n \n-    JSONArray sw = g.optJSONArray(0);\n-    JSONArray ne = g.optJSONArray(2);\n+    List<LatLng> coordinates = new ArrayList<>();\n \n-    if (sw == null || ne == null) {\n-      return ImmutableList.of();\n-    }\n+    for (int i = 0; i < exteriorRing.length(); i++) {\n+      JSONArray point = exteriorRing.optJSONArray(i);\n+      double lat = point.optDouble(1, 0.0);\n+      double lng = point.optDouble(0, 0.0);\n \n-    double south = sw.optDouble(1, 0.0);\n-    double west = sw.optDouble(0, 0.0);\n-    double north = ne.optDouble(1, 0.0);\n-    double east = ne.optDouble(0, 0.0);\n+      coordinates.add(new LatLng(lat, lng));\n+    }\n \n-    return ImmutableList.of(\n-        new LatLng(south, west),\n-        new LatLng(north, east),\n-        new LatLng(south, east),\n-        new LatLng(north, west));\n+    return stream(coordinates).collect(toImmutableList());\n   }\n }\n"}}, {"oid": "7b660a7624ef77f64d31632a2b4a725e95f4334f", "url": "https://github.com/google/ground-android/commit/7b660a7624ef77f64d31632a2b4a725e95f4334f", "message": "Improve semantic accuracy of GeoJsonExtents\n\nPreviously, we returned vertices for GeoJsonExtents in terms of south/west north/east coordinates--this is a slightly inaccurate picture of the world. In actuality, an extent captures the coordinates of a GeoJson polygon, which is described by a series of linear rings. We only care about the exterior ring, and check for inclusion of tiles in a viewport bounds by determining if any of the points that make up the exterior ring are contained within the viewport bounds.\n\nThis commit changes names and slightly alters the implementation to make this clearer. Rather than searching for south/west and north/east boundary points, we simply check all points in the linear ring describing the bounds of a tile.", "committedDate": "2020-06-12T16:42:28Z", "type": "commit"}, {"oid": "9c68a1d2e9f7b24a96f25b73865605b0fba937b2", "url": "https://github.com/google/ground-android/commit/9c68a1d2e9f7b24a96f25b73865605b0fba937b2", "message": "Ignore PMD object instantiation warnings in GeoJsonExtent", "committedDate": "2020-06-12T18:27:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NDg0Mg==", "url": "https://github.com/google/ground-android/pull/499#discussion_r440254842", "bodyText": "Nice!", "author": "gino-m", "createdAt": "2020-06-15T15:21:07Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/geojson/GeoJsonExtent.java", "diffHunk": "@@ -31,32 +37,26 @@\n   }\n \n   ImmutableList<LatLng> getVertices() {\n-    if (geometry.getVertices().isEmpty()) {\n-      return ImmutableList.of();\n-    }\n+    Optional<JSONArray> exteriorRing = geometry.getVertices().map(j -> j.optJSONArray(0));\n \n-    JSONArray g = geometry.getVertices().map(j -> j.optJSONArray(0)).orElse(null);\n+    return ringCoordinatesToLatLngs(exteriorRing.orElse(null));\n+  }\n \n-    if (g == null) {\n+  private ImmutableList<LatLng> ringCoordinatesToLatLngs(JSONArray exteriorRing) {", "originalCommit": "7b660a7624ef77f64d31632a2b4a725e95f4334f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}