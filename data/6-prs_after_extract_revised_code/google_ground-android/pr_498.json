{"pr_number": 498, "pr_title": "Add Offline Area Viewer UI", "pr_createdAt": "2020-06-11T15:57:36Z", "pr_url": "https://github.com/google/ground-android/pull/498", "timeline": [{"oid": "9fdbc6860bd3d262d6e7f2d8c779300436fadbe9", "url": "https://github.com/google/ground-android/commit/9fdbc6860bd3d262d6e7f2d8c779300436fadbe9", "message": "Add OfflineAreaViewer UI\n\nThis change adds an offlinearea viewer--when users select an offline area from their list of areas, the viewer will present the bounds of the area, report the amount of space in MB the area occupies on the user's device and gives the user an option to remove the area from her device.", "committedDate": "2020-06-11T15:52:16Z", "type": "commit"}, {"oid": "8cbf83a2690d34d79594d7acd33ca139f5295246", "url": "https://github.com/google/ground-android/commit/8cbf83a2690d34d79594d7acd33ca139f5295246", "message": "Navigate to the OfflineAreaViewer on Area item click\n\nThis commit updates the navigator and OfflineAreasFragment to navigate users to a viewer fragment for a selected offline area.", "committedDate": "2020-06-11T15:53:12Z", "type": "commit"}, {"oid": "a1120928347c4bd671e0c13e90b333d3a8714417", "url": "https://github.com/google/ground-android/commit/a1120928347c4bd671e0c13e90b333d3a8714417", "message": "Merge branch 'master' of https://github.com/google/ground-android into offline-area-viewer", "committedDate": "2020-06-11T15:54:05Z", "type": "commit"}, {"oid": "5401e50473210b596834f8060f9faa12c0a3b03f", "url": "https://github.com/google/ground-android/commit/5401e50473210b596834f8060f9faa12c0a3b03f", "message": "Fix offline area storage calculation\n\nWe need to append tile paths with the context's file dir (where they are stored) otherwise the length call returns 0.", "committedDate": "2020-06-11T17:35:13Z", "type": "commit"}, {"oid": "5201ecd6209a578a73a745530b3b8ce56955d565", "url": "https://github.com/google/ground-android/commit/5201ecd6209a578a73a745530b3b8ce56955d565", "message": "Fix area storage size calc; truncate down to a single decimal place", "committedDate": "2020-06-11T18:40:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMjI4NQ==", "url": "https://github.com/google/ground-android/pull/498#discussion_r439112285", "bodyText": "Please add class and public method Javadoc where not 100% obvious throughout.", "author": "gino-m", "createdAt": "2020-06-11T22:48:29Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.offlinearea.viewer;\n+\n+import static com.google.android.gnd.rx.RxAutoDispose.autoDisposable;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import butterknife.OnClick;\n+import com.google.android.gnd.MainActivity;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.databinding.OfflineAreaViewerFragBinding;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.ui.common.AbstractFragment;\n+import com.google.android.gnd.ui.map.MapAdapter;\n+import com.google.android.gnd.ui.map.MapProvider;\n+import io.reactivex.Single;\n+import javax.inject.Inject;\n+\n+public class OfflineAreaViewerFragment extends AbstractFragment {", "originalCommit": "5201ecd6209a578a73a745530b3b8ce56955d565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTQ4NQ==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442299485", "bodyText": "a61f53b", "author": "scolsen", "createdAt": "2020-06-18T15:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMjI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd5a85efc8260a78d1d739850d2bef6135348422", "chunk": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\nindex 5499b972..b83fea9a 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\n\n@@ -45,9 +45,8 @@ public class OfflineAreaViewerFragment extends AbstractFragment {\n   private OfflineAreaViewerViewModel viewModel;\n   @Nullable private MapAdapter map;\n \n-  public static OfflineAreaViewerFragment newInstance() {\n-    return new OfflineAreaViewerFragment();\n-  }\n+  @Inject\n+  public OfflineAreaViewerFragment() {}\n \n   @Override\n   public void onCreate(@Nullable Bundle savedInstanceState) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMjgwOA==", "url": "https://github.com/google/ground-android/pull/498#discussion_r439112808", "bodyText": "Can we use Dagger to instantiate this instead? Injecting Provider<OfflineAreaViewerFragment> into the class where it's needed should work, maybe...", "author": "gino-m", "createdAt": "2020-06-11T22:50:15Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.offlinearea.viewer;\n+\n+import static com.google.android.gnd.rx.RxAutoDispose.autoDisposable;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import butterknife.OnClick;\n+import com.google.android.gnd.MainActivity;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.databinding.OfflineAreaViewerFragBinding;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.ui.common.AbstractFragment;\n+import com.google.android.gnd.ui.map.MapAdapter;\n+import com.google.android.gnd.ui.map.MapProvider;\n+import io.reactivex.Single;\n+import javax.inject.Inject;\n+\n+public class OfflineAreaViewerFragment extends AbstractFragment {\n+\n+  private static final String MAP_FRAGMENT = MapProvider.class.getName() + \"#fragment\";\n+\n+  @Inject MapProvider mapProvider;\n+\n+  private OfflineAreaViewerViewModel viewModel;\n+  @Nullable private MapAdapter map;\n+\n+  public static OfflineAreaViewerFragment newInstance() {", "originalCommit": "5201ecd6209a578a73a745530b3b8ce56955d565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5ODk3Nw==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442298977", "bodyText": "Done, it was already @Binds annotated so all we needed was to add @Inject! bd5a85e", "author": "scolsen", "createdAt": "2020-06-18T15:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "bd5a85efc8260a78d1d739850d2bef6135348422", "chunk": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\nindex 5499b972..b83fea9a 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java\n\n@@ -45,9 +45,8 @@ public class OfflineAreaViewerFragment extends AbstractFragment {\n   private OfflineAreaViewerViewModel viewModel;\n   @Nullable private MapAdapter map;\n \n-  public static OfflineAreaViewerFragment newInstance() {\n-    return new OfflineAreaViewerFragment();\n-  }\n+  @Inject\n+  public OfflineAreaViewerFragment() {}\n \n   @Override\n   public void onCreate(@Nullable Bundle savedInstanceState) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMzAyOQ==", "url": "https://github.com/google/ground-android/pull/498#discussion_r439113029", "bodyText": "Could you possible break this stream up either into local vars or helper methods? The nesting is getting a little unwieldy.", "author": "gino-m", "createdAt": "2020-06-11T22:50:54Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.offlinearea.viewer;\n+\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.ui.common.AbstractViewModel;\n+import io.reactivex.processors.BehaviorProcessor;\n+import java.io.File;\n+import javax.inject.Inject;\n+\n+public class OfflineAreaViewerViewModel extends AbstractViewModel {\n+\n+  private final BehaviorProcessor<OfflineAreaViewerFragmentArgs> argsProcessor;\n+  private final OfflineAreaRepository offlineAreaRepository;\n+  private final Context context;\n+  public LiveData<Double> areaStorageSize;\n+  private LiveData<OfflineArea> offlineArea;\n+\n+  @Inject\n+  public OfflineAreaViewerViewModel(OfflineAreaRepository offlineAreaRepository, Context context) {\n+    this.argsProcessor = BehaviorProcessor.create();\n+    this.offlineAreaRepository = offlineAreaRepository;\n+    this.context = context;\n+    this.areaStorageSize =\n+        LiveDataReactiveStreams.fromPublisher(", "originalCommit": "5201ecd6209a578a73a745530b3b8ce56955d565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTEyNg==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442299126", "bodyText": "6b21dff", "author": "scolsen", "createdAt": "2020-06-18T15:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExMzAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6b21dff37ce3f41d1d9a5135ef45892b6184b93e", "chunk": "diff --git a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java\nindex 6d08d003..97590757 100644\n--- a/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java\n+++ b/gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java\n\n@@ -25,6 +25,7 @@ import com.google.android.gnd.model.basemap.OfflineArea;\n import com.google.android.gnd.model.basemap.tile.Tile;\n import com.google.android.gnd.repository.OfflineAreaRepository;\n import com.google.android.gnd.ui.common.AbstractViewModel;\n+import com.google.common.collect.ImmutableSet;\n import io.reactivex.processors.BehaviorProcessor;\n import java.io.File;\n import javax.inject.Inject;\n"}}, {"oid": "bd5a85efc8260a78d1d739850d2bef6135348422", "url": "https://github.com/google/ground-android/commit/bd5a85efc8260a78d1d739850d2bef6135348422", "message": "Use dagger to instantiate OfflineAreaViewerFragment", "committedDate": "2020-06-18T14:32:07Z", "type": "commit"}, {"oid": "6fcd07f90564c0bb61b7a419873b615072e012c0", "url": "https://github.com/google/ground-android/commit/6fcd07f90564c0bb61b7a419873b615072e012c0", "message": "Merge branch 'master' of https://github.com/google/ground-android into offline-area-viewer", "committedDate": "2020-06-18T14:58:06Z", "type": "commit"}, {"oid": "6b21dff37ce3f41d1d9a5135ef45892b6184b93e", "url": "https://github.com/google/ground-android/commit/6b21dff37ce3f41d1d9a5135ef45892b6184b93e", "message": "Add a helper method for calculating area total storage size", "committedDate": "2020-06-18T14:59:31Z", "type": "commit"}, {"oid": "75d75f42a3f64a82fadd6ba34e4e73f98c72b994", "url": "https://github.com/google/ground-android/commit/75d75f42a3f64a82fadd6ba34e4e73f98c72b994", "message": "Use a weak reference to avoid leaking Context\n\nThe OfflineAreaViewerViewModel relies on a context to get the\napplication's filesdir--however, since a context is associated with a\nview, using it directly can result in a memory leak. A weak reference\nprevents this.", "committedDate": "2020-06-18T14:59:51Z", "type": "commit"}, {"oid": "d788a4bfc4e4a58a15fbfff6430e0e4ea6e4eab5", "url": "https://github.com/google/ground-android/commit/d788a4bfc4e4a58a15fbfff6430e0e4ea6e4eab5", "message": "Use a string resource for the OfflineAreaViewerFragment label", "committedDate": "2020-06-18T15:03:09Z", "type": "commit"}, {"oid": "a61f53b9e481a70e9a0f31fa05222292a0438dae", "url": "https://github.com/google/ground-android/commit/a61f53b9e481a70e9a0f31fa05222292a0438dae", "message": "Add javadoc for OfflineAreaViewer classes and methods", "committedDate": "2020-06-18T15:07:08Z", "type": "commit"}, {"oid": "69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "url": "https://github.com/google/ground-android/commit/69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "message": "Fix spotbug error (possible null dereference)", "committedDate": "2020-06-18T15:52:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMTE1MA==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442331150", "bodyText": "Can you please add a test for this method in LocalDataStoreTest?", "author": "shobhitagarwal1612", "createdAt": "2020-06-18T15:54:17Z", "path": "gnd/src/main/java/com/google/android/gnd/persistence/local/room/RoomLocalDataStore.java", "diffHunk": "@@ -488,4 +488,13 @@ public Completable insertOrUpdateOfflineArea(OfflineArea area) {\n         .map(areas -> stream(areas).map(OfflineAreaEntity::toArea).collect(toImmutableList()))\n         .subscribeOn(schedulers.io());\n   }\n+\n+  @Override\n+  public Single<OfflineArea> getOfflineAreaById(String id) {\n+    return offlineAreaDao\n+        .findById(id)\n+        .map(OfflineAreaEntity::toArea)\n+        .toSingle()\n+        .subscribeOn(schedulers.io());\n+  }", "originalCommit": "69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjc4Mg==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442332782", "bodyText": "Would it be possible to handle the click event in the calling fragment? It feels odd to have navigator instance within this adapter class. Thoughts?", "author": "shobhitagarwal1612", "createdAt": "2020-06-18T15:56:43Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/OfflineAreaListAdapter.java", "diffHunk": "@@ -17,27 +17,50 @@\n package com.google.android.gnd.ui.offlinearea;\n \n import android.view.LayoutInflater;\n+import android.view.View;\n import android.view.ViewGroup;\n import androidx.annotation.NonNull;\n import androidx.recyclerview.widget.RecyclerView;\n import com.google.android.gnd.databinding.OfflineAreasListItemBinding;\n import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.ui.common.Navigator;\n import com.google.common.collect.ImmutableList;\n \n class OfflineAreaListAdapter extends RecyclerView.Adapter<OfflineAreaListAdapter.ViewHolder> {\n+\n+  private final Navigator navigator;\n   private ImmutableList<OfflineArea> offlineAreas;\n \n-  public static class ViewHolder extends RecyclerView.ViewHolder {\n+  public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n+\n     public OfflineAreasListItemBinding binding;\n+    public int position;\n+    private ImmutableList<OfflineArea> areas;\n+    private final Navigator navigator;\n \n-    ViewHolder(OfflineAreasListItemBinding binding) {\n+    ViewHolder(\n+        OfflineAreasListItemBinding binding,\n+        ImmutableList<OfflineArea> areas,\n+        Navigator navigator) {\n       super(binding.getRoot());\n       this.binding = binding;\n+      this.areas = areas;\n+      this.navigator = navigator;\n+      binding.offlineAreaName.setOnClickListener(this);\n+    }\n+\n+    @Override\n+    public void onClick(View v) {\n+      if (areas.size() > 0) {\n+        String id = areas.get(position).getId();\n+        navigator.showOfflineAreaViewer(id);\n+      }", "originalCommit": "69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNTY1OQ==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442335659", "bodyText": "Since butterknife is already deprecated, we should prevent adding more code that needs to be cleaned up later. Can you please fix this?", "author": "shobhitagarwal1612", "createdAt": "2020-06-18T16:00:49Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerFragment.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.offlinearea.viewer;\n+\n+import static com.google.android.gnd.rx.RxAutoDispose.autoDisposable;\n+\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import butterknife.OnClick;\n+import com.google.android.gnd.MainActivity;\n+import com.google.android.gnd.R;\n+import com.google.android.gnd.databinding.OfflineAreaViewerFragBinding;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.feature.Point;\n+import com.google.android.gnd.ui.common.AbstractFragment;\n+import com.google.android.gnd.ui.map.MapAdapter;\n+import com.google.android.gnd.ui.map.MapProvider;\n+import io.reactivex.Single;\n+import javax.inject.Inject;\n+\n+/**\n+ * The OfflineAreaViewerFragment provides a UI for managing a single offline area on the user's\n+ * device.\n+ * */\n+public class OfflineAreaViewerFragment extends AbstractFragment {\n+\n+  private static final String MAP_FRAGMENT = MapProvider.class.getName() + \"#fragment\";\n+\n+  @Inject MapProvider mapProvider;\n+\n+  private OfflineAreaViewerViewModel viewModel;\n+  @Nullable private MapAdapter map;\n+\n+  @Inject\n+  public OfflineAreaViewerFragment() {}\n+\n+  @Override\n+  public void onCreate(@Nullable Bundle savedInstanceState) {\n+    super.onCreate(savedInstanceState);\n+    OfflineAreaViewerFragmentArgs args = OfflineAreaViewerFragmentArgs.fromBundle(getArguments());\n+    viewModel = getViewModel(OfflineAreaViewerViewModel.class);\n+    viewModel.loadOfflineArea(args);\n+    Single<MapAdapter> mapAdapter = mapProvider.getMapAdapter();\n+    mapAdapter.as(autoDisposable(this)).subscribe(this::onMapReady);\n+    viewModel.getOfflineArea().observe(this, this::panMap);\n+  }\n+\n+  @Override\n+  public View onCreateView(\n+      @NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+    super.onCreateView(inflater, container, savedInstanceState);\n+    OfflineAreaViewerFragBinding binding =\n+        OfflineAreaViewerFragBinding.inflate(inflater, container, false);\n+    binding.setViewModel(viewModel);\n+    binding.setLifecycleOwner(this);\n+    ((MainActivity) getActivity()).setActionBar(binding.offlineAreaViewerToolbar, true);\n+    return binding.getRoot();\n+  }\n+\n+  @Override\n+  public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+    super.onViewCreated(view, savedInstanceState);\n+    if (savedInstanceState == null) {\n+      replaceFragment(R.id.map, mapProvider.getFragment());\n+    } else {\n+      mapProvider.restore(restoreChildFragment(savedInstanceState, MAP_FRAGMENT));\n+    }\n+  }\n+\n+  private void onMapReady(MapAdapter map) {\n+    this.map = map;\n+  }\n+\n+  private void panMap(OfflineArea offlineArea) {\n+    if (map == null) {\n+      return;\n+    }\n+\n+    double lat = offlineArea.getBounds().northeast.latitude;\n+    double lon = offlineArea.getBounds().southwest.longitude;\n+    Point point = Point.newBuilder().setLatitude(lat).setLongitude(lon).build();\n+    map.moveCamera(point);\n+  }\n+\n+  /**\n+   * Removes the area associated with this fragment from the user's device.\n+   * */\n+  @OnClick(R.id.remove_button)", "originalCommit": "69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjYyMg==", "url": "https://github.com/google/ground-android/pull/498#discussion_r442336622", "bodyText": "We can move this method into our utility class FileUtil, which already contains context as an injected dependency.", "author": "shobhitagarwal1612", "createdAt": "2020-06-18T16:02:24Z", "path": "gnd/src/main/java/com/google/android/gnd/ui/offlinearea/viewer/OfflineAreaViewerViewModel.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.android.gnd.ui.offlinearea.viewer;\n+\n+import static java8.util.stream.StreamSupport.stream;\n+\n+import android.content.Context;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.LiveDataReactiveStreams;\n+import com.google.android.gnd.model.basemap.OfflineArea;\n+import com.google.android.gnd.model.basemap.tile.Tile;\n+import com.google.android.gnd.repository.OfflineAreaRepository;\n+import com.google.android.gnd.ui.common.AbstractViewModel;\n+import com.google.common.collect.ImmutableSet;\n+import io.reactivex.processors.BehaviorProcessor;\n+import java.io.File;\n+import java.lang.ref.WeakReference;\n+import javax.inject.Inject;\n+\n+/**\n+ * View model for the OfflineAreaViewerFragment. Manges offline area deletions and calculates the\n+ * storage size of an area on the user's device.\n+ */\n+public class OfflineAreaViewerViewModel extends AbstractViewModel {\n+\n+  private final BehaviorProcessor<OfflineAreaViewerFragmentArgs> argsProcessor;\n+  private final OfflineAreaRepository offlineAreaRepository;\n+  private final WeakReference<Context> context;\n+  public LiveData<Double> areaStorageSize;\n+  private LiveData<OfflineArea> offlineArea;\n+\n+  @Inject\n+  public OfflineAreaViewerViewModel(OfflineAreaRepository offlineAreaRepository, Context context) {\n+    this.argsProcessor = BehaviorProcessor.create();\n+    this.offlineAreaRepository = offlineAreaRepository;\n+    this.context = new WeakReference<>(context);\n+    this.areaStorageSize =\n+        LiveDataReactiveStreams.fromPublisher(\n+            this.argsProcessor.switchMap(\n+                args ->\n+                    this.offlineAreaRepository\n+                        .getOfflineArea(args.getOfflineAreaId())\n+                        .toFlowable()\n+                        .flatMap(offlineAreaRepository::getIntersectingDownloadedTilesOnceAndStream)\n+                        .map(this::tilesToTotalStorageSize)));\n+    this.offlineArea =\n+        LiveDataReactiveStreams.fromPublisher(\n+            this.argsProcessor.switchMap(\n+                args ->\n+                    this.offlineAreaRepository\n+                        .getOfflineArea(args.getOfflineAreaId())\n+                        .toFlowable()));\n+  }\n+\n+  private Double tilesToTotalStorageSize(ImmutableSet<Tile> tiles) {\n+    return stream(tiles).map(this::tileStorageSize).reduce((x, y) -> x + y).orElse(0.0);\n+  }\n+\n+  private double tileStorageSize(Tile tile) {\n+    Context context1 = context.get();\n+    if (context1 == null) {\n+      return 0.0;\n+    } else {\n+      File tileFile = new File(context1.getFilesDir(), tile.getPath());\n+      return (double) tileFile.length() / (1024 * 1024);", "originalCommit": "69ae7bfbdb3bf323d3721840cde7b4853b2e8e13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}