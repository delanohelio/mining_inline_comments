{"pr_number": 296, "pr_title": "Privacy multitenancy validation", "pr_createdAt": "2020-01-08T04:27:40Z", "pr_url": "https://github.com/hyperledger/besu/pull/296", "timeline": [{"oid": "09948dc23f499d5a846264d80f61bd85b6d6844a", "url": "https://github.com/hyperledger/besu/commit/09948dc23f499d5a846264d80f61bd85b6d6844a", "message": "privacy multi-tenancy controller\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-06T00:12:52Z", "type": "commit"}, {"oid": "c43d79e7914b35ccc5251e05a5ec1b5b3c28dca2", "url": "https://github.com/hyperledger/besu/commit/c43d79e7914b35ccc5251e05a5ec1b5b3c28dca2", "message": "validate sendTransaction\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-06T01:26:37Z", "type": "commit"}, {"oid": "be14a621c53cfe5fd18e6ef23a1f39ccfa7cf4f1", "url": "https://github.com/hyperledger/besu/commit/be14a621c53cfe5fd18e6ef23a1f39ccfa7cf4f1", "message": "multitenancy validations\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-06T04:27:32Z", "type": "commit"}, {"oid": "06b46dd7d092f12543ff312e096056332b10402a", "url": "https://github.com/hyperledger/besu/commit/06b46dd7d092f12543ff312e096056332b10402a", "message": "Don't allow privacy multi-tenancy and privacy public key to be both be enabled\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-07T06:15:00Z", "type": "commit"}, {"oid": "16325c367340453bb634f989fb1acf09fb2748d9", "url": "https://github.com/hyperledger/besu/commit/16325c367340453bb634f989fb1acf09fb2748d9", "message": "spotless\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-07T06:15:10Z", "type": "commit"}, {"oid": "5787f4210eb9c2f4e690a5cfb981b65dc50cc9a0", "url": "https://github.com/hyperledger/besu/commit/5787f4210eb9c2f4e690a5cfb981b65dc50cc9a0", "message": "spotless\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-07T06:39:35Z", "type": "commit"}, {"oid": "6efec15c9dd54e6450ed6bbaef329923de733c4d", "url": "https://github.com/hyperledger/besu/commit/6efec15c9dd54e6450ed6bbaef329923de733c4d", "message": "eea_sendRawTransaction to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-07T06:40:24Z", "type": "commit"}, {"oid": "feb1181daea00d873481e1d8128c47fa859eb830", "url": "https://github.com/hyperledger/besu/commit/feb1181daea00d873481e1d8128c47fa859eb830", "message": "priv_distributeRawTransaction to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-07T23:18:18Z", "type": "commit"}, {"oid": "15325af5c00612adfb0d4eab1bde786cf01ada10", "url": "https://github.com/hyperledger/besu/commit/15325af5c00612adfb0d4eab1bde786cf01ada10", "message": "priv_deletePrivacyGroup to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T00:24:22Z", "type": "commit"}, {"oid": "81d274c15b3354f3f0e97810a57dfe5e7afa085c", "url": "https://github.com/hyperledger/besu/commit/81d274c15b3354f3f0e97810a57dfe5e7afa085c", "message": "priv_findPrivacyGroup to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T00:30:48Z", "type": "commit"}, {"oid": "36fc94d274ff80818d4afaf25a53d4e4b4bf9c6b", "url": "https://github.com/hyperledger/besu/commit/36fc94d274ff80818d4afaf25a53d4e4b4bf9c6b", "message": "priv_getPrivateTransaction to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T00:38:09Z", "type": "commit"}, {"oid": "1be9fbda6ed8ebf1143cf5d323219812ed3d4f06", "url": "https://github.com/hyperledger/besu/commit/1be9fbda6ed8ebf1143cf5d323219812ed3d4f06", "message": "priv_getEeaTransactionCount to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T00:49:58Z", "type": "commit"}, {"oid": "f0ba234ff60c208268def51c1223c728973f8785", "url": "https://github.com/hyperledger/besu/commit/f0ba234ff60c208268def51c1223c728973f8785", "message": "priv_getTransactionReceipt to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T00:53:52Z", "type": "commit"}, {"oid": "4e7b69252ff84c16ac8c625db789412cfa295173", "url": "https://github.com/hyperledger/besu/commit/4e7b69252ff84c16ac8c625db789412cfa295173", "message": "move to correct test package\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T01:02:07Z", "type": "commit"}, {"oid": "4a6b2f134b36b7f14f5281699e03519e7fbf267f", "url": "https://github.com/hyperledger/besu/commit/4a6b2f134b36b7f14f5281699e03519e7fbf267f", "message": "priv_getTransactionCount to return unauthorized rpc error if multi-tenancy validation fails\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T01:12:26Z", "type": "commit"}, {"oid": "f377b20df32cbb28fc73aea5d122f1c180b4d5e7", "url": "https://github.com/hyperledger/besu/commit/f377b20df32cbb28fc73aea5d122f1c180b4d5e7", "message": "privacy api factory test for creating rpcs with the multi-tenancy controller\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T01:38:13Z", "type": "commit"}, {"oid": "890f843f3206920beddd316967df553385728d7f", "url": "https://github.com/hyperledger/besu/commit/890f843f3206920beddd316967df553385728d7f", "message": "spotless\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T01:39:56Z", "type": "commit"}, {"oid": "8cf34e2d4a9e1d0c774c0b3fcecad5b6b0ed50c9", "url": "https://github.com/hyperledger/besu/commit/8cf34e2d4a9e1d0c774c0b3fcecad5b6b0ed50c9", "message": "rename test to match new class name\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T01:40:15Z", "type": "commit"}, {"oid": "db737a7033c48c2c0afcd7c11d490a0e1c78b301", "url": "https://github.com/hyperledger/besu/commit/db737a7033c48c2c0afcd7c11d490a0e1c78b301", "message": "change priv_getPrivateTransaction to return errors when an error happens\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T03:55:28Z", "type": "commit"}, {"oid": "0e4d081902d43c2c7fde4ee3aa45f362332e6932", "url": "https://github.com/hyperledger/besu/commit/0e4d081902d43c2c7fde4ee3aa45f362332e6932", "message": "remove multi-tenancy error handling for priv_getTransactionReceipt as it raises as an enclave error\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T04:07:01Z", "type": "commit"}, {"oid": "41a86b907de3477bb2f12a19f9677c291cfbc61e", "url": "https://github.com/hyperledger/besu/commit/41a86b907de3477bb2f12a19f9677c291cfbc61e", "message": "unhide privacy multi-tenancy option\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T04:18:52Z", "type": "commit"}, {"oid": "9c6406c578d9de0ff0ac6d0f2ff4cdd116613f2a", "url": "https://github.com/hyperledger/besu/commit/9c6406c578d9de0ff0ac6d0f2ff4cdd116613f2a", "message": "compile errors\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T04:47:00Z", "type": "commit"}, {"oid": "a309d6104c44d8c19189fc31dc870982bdc44d11", "url": "https://github.com/hyperledger/besu/commit/a309d6104c44d8c19189fc31dc870982bdc44d11", "message": "Merge branch 'master' into privacy_multitenancy_validation", "committedDate": "2020-01-08T04:59:07Z", "type": "commit"}, {"oid": "f4c540a188b719529d3ab0da84a008baec29ae2e", "url": "https://github.com/hyperledger/besu/commit/f4c540a188b719529d3ab0da84a008baec29ae2e", "message": "Merge branch 'master' into privacy_multitenancy_validation", "committedDate": "2020-01-08T23:13:49Z", "type": "commit"}, {"oid": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "url": "https://github.com/hyperledger/besu/commit/9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "message": "remove use of UnformattedDataImpl in test to fix compile error\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-08T23:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwMTc0NA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364501744", "bodyText": "How about moving the creation into a new private method:\n   final PrivacyController privacyController = privacyController()\n    ...\n}\n\nprivate PrivacyController privacyController(){\n    return privacyParameters.isMultiTenancyEnabled()\n             ? new MultiTenancyPrivacyController(\n                 defaultPrivacyController, privacyParameters.getEnclave())\n             : new DefaultPrivacyController(\n             privacyParameters, protocolSchedule.getChainId(), markerTransactionFactory);;\n}\n\nBesides making the create methods short & nicer to read, as a bonus It'll only create the default controller when it is needed.", "author": "CjHare", "createdAt": "2020-01-08T23:55:31Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PrivacyApiGroupJsonRpcMethods.java", "diffHunk": "@@ -76,9 +78,14 @@ public PrivacyParameters getPrivacyParameters() {\n         createPrivateMarkerTransactionFactory(\n             privacyParameters, blockchainQueries, transactionPool.getPendingTransactions());\n \n-    final PrivacyController privacyController =\n-        new PrivacyController(\n+    final DefaultPrivacyController defaultPrivacyController =", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMzM1Mw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364513353", "bodyText": "good idea", "author": "jframe", "createdAt": "2020-01-09T00:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwMTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0ODQ4Mw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364548483", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T03:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwMTc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ebefce29fc84826b8b217e8a81436486b68bdcb4", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PrivacyApiGroupJsonRpcMethods.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PrivacyApiGroupJsonRpcMethods.java\nindex 63b0fa998..45017fd32 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PrivacyApiGroupJsonRpcMethods.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PrivacyApiGroupJsonRpcMethods.java\n\n@@ -77,26 +77,8 @@ public abstract class PrivacyApiGroupJsonRpcMethods extends ApiGroupJsonRpcMetho\n     final PrivateMarkerTransactionFactory markerTransactionFactory =\n         createPrivateMarkerTransactionFactory(\n             privacyParameters, blockchainQueries, transactionPool.getPendingTransactions());\n-\n-    final DefaultPrivacyController defaultPrivacyController =\n-        new DefaultPrivacyController(\n-            privacyParameters, protocolSchedule.getChainId(), markerTransactionFactory);\n-    final PrivacyController privacyController =\n-        privacyParameters.isMultiTenancyEnabled()\n-            ? new MultiTenancyPrivacyController(\n-                defaultPrivacyController, privacyParameters.getEnclave())\n-            : defaultPrivacyController;\n-\n-    final EnclavePublicKeyProvider enclavePublicProvider =\n-        privacyParameters.isMultiTenancyEnabled()\n-            ? user ->\n-                enclavePublicKey(user)\n-                    .orElseThrow(\n-                        () ->\n-                            new IllegalStateException(\n-                                \"Request does not contain an authorization token\"))\n-            : user -> privacyParameters.getEnclavePublicKey();\n-\n+    final EnclavePublicKeyProvider enclavePublicProvider = createEnclavePublicKeyProvider();\n+    final PrivacyController privacyController = createPrivacyController(markerTransactionFactory);\n     return create(privacyController, enclavePublicProvider).entrySet().stream()\n         .collect(\n             Collectors.toMap(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzI2NQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364533265", "bodyText": "should this conditional be moved into the conditional at line 1400? (And simplified)", "author": "rain-on", "createdAt": "2020-01-09T02:20:27Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1390,6 +1389,11 @@ private PrivacyParameters privacyParameters() {\n             \"Privacy multi-tenancy requires either http authentication to be enabled or WebSocket authentication to be enabled\");\n       }\n \n+      if (privacyPublicKeyFile() != null && isPrivacyMultiTenancyEnabled) {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2ODkyOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364568928", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T05:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c8f4a3ea9f60d2b43962c7641f184e06c042661a", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex a2d6c46f7..5e2ad3278 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1389,15 +1389,12 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n             \"Privacy multi-tenancy requires either http authentication to be enabled or WebSocket authentication to be enabled\");\n       }\n \n-      if (privacyPublicKeyFile() != null && isPrivacyMultiTenancyEnabled) {\n-        throw new ParameterException(\n-            commandLine, \"Privacy multi-tenancy and privacy public key cannot be used together\");\n-      }\n-\n       privacyParametersBuilder.setEnabled(true);\n       privacyParametersBuilder.setEnclaveUrl(privacyUrl);\n       privacyParametersBuilder.setMultiTenancyEnabled(isPrivacyMultiTenancyEnabled);\n-      if (privacyPublicKeyFile() != null) {\n+\n+      final boolean hasPrivacyPublicKey = privacyPublicKeyFile() != null;\n+      if (hasPrivacyPublicKey && !isPrivacyMultiTenancyEnabled) {\n         try {\n           privacyParametersBuilder.setEnclavePublicKeyUsingFile(privacyPublicKeyFile());\n         } catch (final IOException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzk4OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364533988", "bodyText": "This looks like a wrong comment - no? Care to fix it while you're here?", "author": "rain-on", "createdAt": "2020-01-09T02:24:08Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java", "diffHunk": "@@ -57,6 +60,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n       response =\n           privacyController.deletePrivacyGroup(\n               privacyGroupId, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+    } catch (final MultiTenancyValidationException e) {\n+      LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n+      return new JsonRpcUnauthorizedResponse(requestContext.getRequest().getId(), UNAUTHORIZED);\n     } catch (Exception e) {\n       LOG.error(\"Failed to fetch transaction\", e);", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0ODM1Mg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364548352", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T03:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzMzk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\nindex 9540a816b..061f9858d 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\n\n@@ -63,8 +64,8 @@ public class PrivDeletePrivacyGroup implements JsonRpcMethod {\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n       return new JsonRpcUnauthorizedResponse(requestContext.getRequest().getId(), UNAUTHORIZED);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to fetch transaction\", e);\n+    } catch (EnclaveClientException e) {\n+      LOG.error(\"Failed to delete privacy group\", e);\n       return new JsonRpcErrorResponse(\n           requestContext.getRequest().getId(), JsonRpcError.DELETE_PRIVACY_GROUP_ERROR);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjM3MA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364536370", "bodyText": "should this really be an internal Error?", "author": "rain-on", "createdAt": "2020-01-09T02:37:09Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionCountTest.java", "diffHunk": "@@ -73,4 +79,43 @@ public void verifyTransactionCount() {\n     assertThat(response.getResult()).isEqualTo(String.format(\"0x%X\", NONCE));\n     verify(privacyController).determineNonce(senderAddress, privacyGroupId, ENCLAVE_PUBLIC_KEY);\n   }\n+\n+  @Test\n+  public void failsWithNonceErrorIfExceptionIsThrown() {\n+    final PrivGetTransactionCount privGetTransactionCount =\n+        new PrivGetTransactionCount(privacyController, enclavePublicKeyProvider);\n+\n+    when(privacyController.determineNonce(senderAddress, privacyGroupId, ENCLAVE_PUBLIC_KEY))\n+        .thenThrow(RuntimeException.class);\n+\n+    final Object[] params = new Object[] {senderAddress, privacyGroupId};\n+    final JsonRpcRequestContext request =\n+        new JsonRpcRequestContext(\n+            new JsonRpcRequest(\"1\", \"priv_getTransactionCount\", params), user);\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(\n+            request.getRequest().getId(), JsonRpcError.GET_PRIVATE_TRANSACTION_NONCE_ERROR);", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MjgxOQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364552819", "bodyText": "changed to just catch the enclave exception and let the general unknown exception bubble up and be handled with a internal error", "author": "jframe", "createdAt": "2020-01-09T04:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionCountTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionCountTest.java\nindex 18c6ef4a0..477adba1e 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionCountTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionCountTest.java\n\n@@ -77,7 +77,7 @@ public class PrivGetTransactionCountTest {\n         (JsonRpcSuccessResponse) privGetTransactionCount.response(request);\n \n     assertThat(response.getResult()).isEqualTo(String.format(\"0x%X\", NONCE));\n-    verify(privacyController).determineNonce(senderAddress, privacyGroupId, ENCLAVE_PUBLIC_KEY);\n+    verify(privacyController).determineBesuNonce(senderAddress, privacyGroupId, ENCLAVE_PUBLIC_KEY);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjc2OQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364536769", "bodyText": "you can ditch the else  bracketing if you like - the return would through you out or you could continue down.", "author": "rain-on", "createdAt": "2020-01-09T02:39:35Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup.Type;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.PrivacyParameters;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.PrivateMarkerTransactionFactory;\n+import org.hyperledger.besu.ethereum.privacy.storage.PrivateStateStorage;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.ethereum.worldstate.WorldStateArchive;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class DefaultPrivacyController implements PrivacyController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Enclave enclave;\n+  private final PrivateStateStorage privateStateStorage;\n+  private final WorldStateArchive privateWorldStateArchive;\n+  private final PrivateTransactionValidator privateTransactionValidator;\n+  private final PrivateMarkerTransactionFactory privateMarkerTransactionFactory;\n+\n+  public DefaultPrivacyController(\n+      final PrivacyParameters privacyParameters,\n+      final Optional<BigInteger> chainId,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this(\n+        privacyParameters.getEnclave(),\n+        privacyParameters.getPrivateStateStorage(),\n+        privacyParameters.getPrivateWorldStateArchive(),\n+        new PrivateTransactionValidator(chainId),\n+        privateMarkerTransactionFactory);\n+  }\n+\n+  public DefaultPrivacyController(\n+      final Enclave enclave,\n+      final PrivateStateStorage privateStateStorage,\n+      final WorldStateArchive privateWorldStateArchive,\n+      final PrivateTransactionValidator privateTransactionValidator,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this.enclave = enclave;\n+    this.privateStateStorage = privateStateStorage;\n+    this.privateWorldStateArchive = privateWorldStateArchive;\n+    this.privateTransactionValidator = privateTransactionValidator;\n+    this.privateMarkerTransactionFactory = privateMarkerTransactionFactory;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    try {\n+      LOG.trace(\"Storing private transaction in enclave\");\n+      final SendResponse sendResponse = sendRequest(privateTransaction, enclavePublicKey);\n+      final String enclaveKey = sendResponse.getKey();\n+      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+        final String privacyGroupId = privateTransaction.getPrivacyGroupId().get().toBase64String();\n+        return new SendTransactionResponse(enclaveKey, privacyGroupId);\n+      } else {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MjMzMA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364552330", "bodyText": "I prefer the else bracketing, will check other code to see what style is more common in Besu though.", "author": "jframe", "createdAt": "2020-01-09T04:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNjc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\nindex 6f3cd12d4..e5ad3cbe1 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n\n@@ -136,11 +136,11 @@ public class DefaultPrivacyController implements PrivacyController {\n       final String enclavePublicKey) {\n     return privateTransactionValidator.validate(\n         privateTransaction,\n-        determineNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n+        determineBesuNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n   }\n \n   @Override\n-  public long determineNonce(\n+  public long determineEeaNonce(\n       final String privateFrom,\n       final String[] privateFor,\n       final Address address,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzUzOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364537538", "bodyText": "I suspect I suggested reusing the name - but maybe this should have \"legacy\" in the function name - otherwise if I did this with the known members of a BesuGroup - it'd potentially throw", "author": "rain-on", "createdAt": "2020-01-09T02:43:36Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup.Type;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.PrivacyParameters;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.PrivateMarkerTransactionFactory;\n+import org.hyperledger.besu.ethereum.privacy.storage.PrivateStateStorage;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.ethereum.worldstate.WorldStateArchive;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class DefaultPrivacyController implements PrivacyController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Enclave enclave;\n+  private final PrivateStateStorage privateStateStorage;\n+  private final WorldStateArchive privateWorldStateArchive;\n+  private final PrivateTransactionValidator privateTransactionValidator;\n+  private final PrivateMarkerTransactionFactory privateMarkerTransactionFactory;\n+\n+  public DefaultPrivacyController(\n+      final PrivacyParameters privacyParameters,\n+      final Optional<BigInteger> chainId,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this(\n+        privacyParameters.getEnclave(),\n+        privacyParameters.getPrivateStateStorage(),\n+        privacyParameters.getPrivateWorldStateArchive(),\n+        new PrivateTransactionValidator(chainId),\n+        privateMarkerTransactionFactory);\n+  }\n+\n+  public DefaultPrivacyController(\n+      final Enclave enclave,\n+      final PrivateStateStorage privateStateStorage,\n+      final WorldStateArchive privateWorldStateArchive,\n+      final PrivateTransactionValidator privateTransactionValidator,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this.enclave = enclave;\n+    this.privateStateStorage = privateStateStorage;\n+    this.privateWorldStateArchive = privateWorldStateArchive;\n+    this.privateTransactionValidator = privateTransactionValidator;\n+    this.privateMarkerTransactionFactory = privateMarkerTransactionFactory;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    try {\n+      LOG.trace(\"Storing private transaction in enclave\");\n+      final SendResponse sendResponse = sendRequest(privateTransaction, enclavePublicKey);\n+      final String enclaveKey = sendResponse.getKey();\n+      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+        final String privacyGroupId = privateTransaction.getPrivacyGroupId().get().toBase64String();\n+        return new SendTransactionResponse(enclaveKey, privacyGroupId);\n+      } else {\n+        final String privateFrom = privateTransaction.getPrivateFrom().toBase64String();\n+        final String privacyGroupId = getPrivacyGroupId(enclaveKey, privateFrom);\n+        return new SendTransactionResponse(enclaveKey, privacyGroupId);\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to store private transaction in enclave\", e);\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public ReceiveResponse retrieveTransaction(\n+      final String enclaveKey, final String enclavePublicKey) {\n+    return enclave.receive(enclaveKey, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup createPrivacyGroup(\n+      final List<String> addresses,\n+      final String name,\n+      final String description,\n+      final String enclavePublicKey) {\n+    return enclave.createPrivacyGroup(addresses, enclavePublicKey, name, description);\n+  }\n+\n+  @Override\n+  public String deletePrivacyGroup(final String privacyGroupId, final String enclavePublicKey) {\n+    return enclave.deletePrivacyGroup(privacyGroupId, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup[] findPrivacyGroup(\n+      final List<String> addresses, final String enclavePublicKey) {\n+    return enclave.findPrivacyGroup(addresses);\n+  }\n+\n+  @Override\n+  public Transaction createPrivacyMarkerTransaction(\n+      final String transactionEnclaveKey, final PrivateTransaction privateTransaction) {\n+    return privateMarkerTransactionFactory.create(transactionEnclaveKey, privateTransaction);\n+  }\n+\n+  @Override\n+  public ValidationResult<TransactionValidator.TransactionInvalidReason> validatePrivateTransaction(\n+      final PrivateTransaction privateTransaction,\n+      final String privacyGroupId,\n+      final String enclavePublicKey) {\n+    return privateTransactionValidator.validate(\n+        privateTransaction,\n+        determineNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n+  }\n+\n+  @Override\n+  public long determineNonce(", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0OTU4NQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364549585", "bodyText": "done.\nrenamed to determineEeaNonce and determineBesuNonce", "author": "jframe", "createdAt": "2020-01-09T03:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\nindex 6f3cd12d4..e5ad3cbe1 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n\n@@ -136,11 +136,11 @@ public class DefaultPrivacyController implements PrivacyController {\n       final String enclavePublicKey) {\n     return privateTransactionValidator.validate(\n         privateTransaction,\n-        determineNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n+        determineBesuNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n   }\n \n   @Override\n-  public long determineNonce(\n+  public long determineEeaNonce(\n       final String privateFrom,\n       final String[] privateFor,\n       final Address address,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzg4MQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364537881", "bodyText": "do you want to log the Key too?", "author": "rain-on", "createdAt": "2020-01-09T02:45:30Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup.Type;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.PrivacyParameters;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.PrivateMarkerTransactionFactory;\n+import org.hyperledger.besu.ethereum.privacy.storage.PrivateStateStorage;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.ethereum.worldstate.WorldStateArchive;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class DefaultPrivacyController implements PrivacyController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Enclave enclave;\n+  private final PrivateStateStorage privateStateStorage;\n+  private final WorldStateArchive privateWorldStateArchive;\n+  private final PrivateTransactionValidator privateTransactionValidator;\n+  private final PrivateMarkerTransactionFactory privateMarkerTransactionFactory;\n+\n+  public DefaultPrivacyController(\n+      final PrivacyParameters privacyParameters,\n+      final Optional<BigInteger> chainId,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this(\n+        privacyParameters.getEnclave(),\n+        privacyParameters.getPrivateStateStorage(),\n+        privacyParameters.getPrivateWorldStateArchive(),\n+        new PrivateTransactionValidator(chainId),\n+        privateMarkerTransactionFactory);\n+  }\n+\n+  public DefaultPrivacyController(\n+      final Enclave enclave,\n+      final PrivateStateStorage privateStateStorage,\n+      final WorldStateArchive privateWorldStateArchive,\n+      final PrivateTransactionValidator privateTransactionValidator,\n+      final PrivateMarkerTransactionFactory privateMarkerTransactionFactory) {\n+    this.enclave = enclave;\n+    this.privateStateStorage = privateStateStorage;\n+    this.privateWorldStateArchive = privateWorldStateArchive;\n+    this.privateTransactionValidator = privateTransactionValidator;\n+    this.privateMarkerTransactionFactory = privateMarkerTransactionFactory;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    try {\n+      LOG.trace(\"Storing private transaction in enclave\");\n+      final SendResponse sendResponse = sendRequest(privateTransaction, enclavePublicKey);\n+      final String enclaveKey = sendResponse.getKey();\n+      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+        final String privacyGroupId = privateTransaction.getPrivacyGroupId().get().toBase64String();\n+        return new SendTransactionResponse(enclaveKey, privacyGroupId);\n+      } else {\n+        final String privateFrom = privateTransaction.getPrivateFrom().toBase64String();\n+        final String privacyGroupId = getPrivacyGroupId(enclaveKey, privateFrom);\n+        return new SendTransactionResponse(enclaveKey, privacyGroupId);\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to store private transaction in enclave\", e);\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public ReceiveResponse retrieveTransaction(\n+      final String enclaveKey, final String enclavePublicKey) {\n+    return enclave.receive(enclaveKey, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup createPrivacyGroup(\n+      final List<String> addresses,\n+      final String name,\n+      final String description,\n+      final String enclavePublicKey) {\n+    return enclave.createPrivacyGroup(addresses, enclavePublicKey, name, description);\n+  }\n+\n+  @Override\n+  public String deletePrivacyGroup(final String privacyGroupId, final String enclavePublicKey) {\n+    return enclave.deletePrivacyGroup(privacyGroupId, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup[] findPrivacyGroup(\n+      final List<String> addresses, final String enclavePublicKey) {\n+    return enclave.findPrivacyGroup(addresses);\n+  }\n+\n+  @Override\n+  public Transaction createPrivacyMarkerTransaction(\n+      final String transactionEnclaveKey, final PrivateTransaction privateTransaction) {\n+    return privateMarkerTransactionFactory.create(transactionEnclaveKey, privateTransaction);\n+  }\n+\n+  @Override\n+  public ValidationResult<TransactionValidator.TransactionInvalidReason> validatePrivateTransaction(\n+      final PrivateTransaction privateTransaction,\n+      final String privacyGroupId,\n+      final String enclavePublicKey) {\n+    return privateTransactionValidator.validate(\n+        privateTransaction,\n+        determineNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n+  }\n+\n+  @Override\n+  public long determineNonce(\n+      final String privateFrom,\n+      final String[] privateFor,\n+      final Address address,\n+      final String enclavePublicKey) {\n+    final List<String> groupMembers = Lists.asList(privateFrom, privateFor);\n+\n+    final List<PrivacyGroup> matchingGroups =\n+        Lists.newArrayList(enclave.findPrivacyGroup(groupMembers));\n+\n+    final List<PrivacyGroup> legacyGroups =\n+        matchingGroups.stream()\n+            .filter(group -> group.getType() == Type.LEGACY)\n+            .collect(Collectors.toList());\n+\n+    if (legacyGroups.size() == 0) {\n+      // the legacy group does not exist yet\n+      return 0;\n+    }\n+    Preconditions.checkArgument(\n+        legacyGroups.size() == 1,\n+        String.format(\n+            \"Found invalid number of privacy groups (%d), expected 1.\", legacyGroups.size()));\n+\n+    final String privacyGroupId = legacyGroups.get(0).getPrivacyGroupId();\n+\n+    return determineNonce(address, privacyGroupId, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public long determineNonce(\n+      final Address sender, final String privacyGroupId, final String enclavePublicKey) {\n+    return privateStateStorage\n+        .getLatestStateRoot(Bytes.fromBase64String(privacyGroupId))\n+        .map(\n+            lastRootHash ->\n+                privateWorldStateArchive\n+                    .getMutable(lastRootHash)\n+                    .map(\n+                        worldState -> {\n+                          final Account maybePrivateSender = worldState.get(sender);\n+\n+                          if (maybePrivateSender != null) {\n+                            return maybePrivateSender.getNonce();\n+                          }\n+                          // account has not interacted in this private state\n+                          return Account.DEFAULT_NONCE;\n+                        })\n+                    // private state does not exist\n+                    .orElse(Account.DEFAULT_NONCE))\n+        .orElse(\n+            // private state does not exist\n+            Account.DEFAULT_NONCE);\n+  }\n+\n+  private SendResponse sendRequest(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    final BytesValueRLPOutput rlpOutput = new BytesValueRLPOutput();\n+    privateTransaction.writeTo(rlpOutput);\n+    final String payload = rlpOutput.encoded().toBase64String();\n+\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      return enclave.send(\n+          payload, enclavePublicKey, privateTransaction.getPrivacyGroupId().get().toBase64String());\n+    } else {\n+      final List<String> privateFor =\n+          privateTransaction.getPrivateFor().get().stream()\n+              .map(Bytes::toBase64String)\n+              .collect(Collectors.toList());\n+\n+      if (privateFor.isEmpty()) {\n+        privateFor.add(privateTransaction.getPrivateFrom().toBase64String());\n+      }\n+      return enclave.send(\n+          payload, privateTransaction.getPrivateFrom().toBase64String(), privateFor);\n+    }\n+  }\n+\n+  private String getPrivacyGroupId(final String key, final String privateFrom) {\n+    LOG.debug(\"Getting privacy group for {}\", privateFrom);", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0OTk0OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364549948", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T03:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzNzg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\nindex 6f3cd12d4..e5ad3cbe1 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java\n\n@@ -136,11 +136,11 @@ public class DefaultPrivacyController implements PrivacyController {\n       final String enclavePublicKey) {\n     return privateTransactionValidator.validate(\n         privateTransaction,\n-        determineNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n+        determineBesuNonce(privateTransaction.getSender(), privacyGroupId, enclavePublicKey));\n   }\n \n   @Override\n-  public long determineNonce(\n+  public long determineEeaNonce(\n       final String privateFrom,\n       final String[] privateFor,\n       final Address address,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODE3MQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364538171", "bodyText": "what does verifyPrivateFrom mean? rename could it be verifyPrivateFromMatchesEnclavePublicKey? mabye even:\nThrowIfNotMatching?", "author": "rain-on", "createdAt": "2020-01-09T02:46:57Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDUyMw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364550523", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T03:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODgxMQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364538811", "bodyText": "nit: ThrowIfNotMemberOf?", "author": "rain-on", "createdAt": "2020-01-09T02:50:46Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      verifyPrivacyGroup(", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDY1Mw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364550653", "bodyText": "don't like adding throwIfNotMemberOf", "author": "jframe", "createdAt": "2020-01-09T03:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzODgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTAxOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364539018", "bodyText": "confirm - this is safe, and doesn't need multi-tenancy validation, as the Orion will only give back data if enclavePublicKey \"owns\" the requested data.", "author": "rain-on", "createdAt": "2020-01-09T02:51:47Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      verifyPrivacyGroup(\n+          privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n+    }\n+    return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public ReceiveResponse retrieveTransaction(\n+      final String enclaveKey, final String enclavePublicKey) {\n+    // no validation necessary as the enclave receive only returns data for the enclave public key", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDcxNQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364550715", "bodyText": "exactly right", "author": "jframe", "createdAt": "2020-01-09T04:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTMzNA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364539334", "bodyText": "Guessing this is safe for a legacy transaction, as the Group implicitly includes the PrivateFrom", "author": "rain-on", "createdAt": "2020-01-09T02:53:33Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      verifyPrivacyGroup(\n+          privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n+    }\n+    return privacyController.sendTransaction(privateTransaction, enclavePublicKey);", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MDI4Mg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364550282", "bodyText": "exactly, by checking the privateFrom we have checked that group includes the enclavePublicKey for legacy transactions", "author": "jframe", "createdAt": "2020-01-09T03:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTU0MQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364539541", "bodyText": "should enclavePUblicKey be renamed in all of these to be \"requestingEnclaveKey\"? To highlight its the identity requesting the change - rather thanjust a random enclavePublicKey?", "author": "rain-on", "createdAt": "2020-01-09T02:54:45Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      verifyPrivacyGroup(\n+          privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n+    }\n+    return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public ReceiveResponse retrieveTransaction(\n+      final String enclaveKey, final String enclavePublicKey) {\n+    // no validation necessary as the enclave receive only returns data for the enclave public key\n+    return privacyController.retrieveTransaction(enclaveKey, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup createPrivacyGroup(\n+      final List<String> addresses,\n+      final String name,\n+      final String description,\n+      final String enclavePublicKey) {\n+    // no validation necessary as the enclave createPrivacyGroup fails if the addresses don't\n+    // include the from (enclavePublicKey)\n+    return privacyController.createPrivacyGroup(addresses, name, description, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public String deletePrivacyGroup(final String privacyGroupId, final String enclavePublicKey) {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MjE5OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364552198", "bodyText": "Think it's clear because the enclave public key is a parameter", "author": "jframe", "createdAt": "2020-01-09T04:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTkwNg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364539906", "bodyText": "nit: Could you force the EnclavePublicKey into the list being used to drive the query? Then no need to validate... but then, maybe it's not doing what it says on the tin ... :/", "author": "rain-on", "createdAt": "2020-01-09T02:56:47Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator.TransactionInvalidReason;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.List;\n+\n+public class MultiTenancyPrivacyController implements PrivacyController {\n+\n+  private final PrivacyController privacyController;\n+  private final Enclave enclave;\n+\n+  public MultiTenancyPrivacyController(\n+      final PrivacyController privacyController, final Enclave enclave) {\n+    this.privacyController = privacyController;\n+    this.enclave = enclave;\n+  }\n+\n+  @Override\n+  public SendTransactionResponse sendTransaction(\n+      final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n+    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    if (privateTransaction.getPrivacyGroupId().isPresent()) {\n+      verifyPrivacyGroup(\n+          privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n+    }\n+    return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public ReceiveResponse retrieveTransaction(\n+      final String enclaveKey, final String enclavePublicKey) {\n+    // no validation necessary as the enclave receive only returns data for the enclave public key\n+    return privacyController.retrieveTransaction(enclaveKey, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup createPrivacyGroup(\n+      final List<String> addresses,\n+      final String name,\n+      final String description,\n+      final String enclavePublicKey) {\n+    // no validation necessary as the enclave createPrivacyGroup fails if the addresses don't\n+    // include the from (enclavePublicKey)\n+    return privacyController.createPrivacyGroup(addresses, name, description, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public String deletePrivacyGroup(final String privacyGroupId, final String enclavePublicKey) {\n+    verifyPrivacyGroup(privacyGroupId, enclavePublicKey);\n+    return privacyController.deletePrivacyGroup(privacyGroupId, enclavePublicKey);\n+  }\n+\n+  @Override\n+  public PrivacyGroup[] findPrivacyGroup(\n+      final List<String> addresses, final String enclavePublicKey) {\n+    if (!addresses.contains(enclavePublicKey)) {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MTAwNQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364551005", "bodyText": "could do that, is that better though? think it's nicer to fail fast and not make the API call", "author": "jframe", "createdAt": "2020-01-09T04:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUzOTkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\nindex 1cf794762..171da6186 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java\n\n@@ -38,9 +38,9 @@ public class MultiTenancyPrivacyController implements PrivacyController {\n   @Override\n   public SendTransactionResponse sendTransaction(\n       final PrivateTransaction privateTransaction, final String enclavePublicKey) {\n-    verifyPrivateFrom(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n+    verifyPrivateFromMatchesEnclavePublicKey(privateTransaction.getPrivateFrom().toBase64String(), enclavePublicKey);\n     if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-      verifyPrivacyGroup(\n+      verifyPrivacyGroupContainsEnclavePublicKey(\n           privateTransaction.getPrivacyGroupId().get().toBase64String(), enclavePublicKey);\n     }\n     return privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MDIyNA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364540224", "bodyText": "do yoiu want all the other constructors for this - i.e. ones which take the \"cause\" exception?", "author": "rain-on", "createdAt": "2020-01-09T02:58:22Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyValidationException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+public class MultiTenancyValidationException extends RuntimeException {\n+\n+  public MultiTenancyValidationException(final String message) {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MTIyNw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364551227", "bodyText": "Only ever creating the exception as a result of the logic condition not from another exception being thrown. So don't need any other constructors.", "author": "jframe", "createdAt": "2020-01-09T04:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MDIyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MDQ1MQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364540451", "bodyText": "add more content to name - sends....ProducesValidResponse?", "author": "rain-on", "createdAt": "2020-01-09T02:59:38Z", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup.Type;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MultiTenancyPrivacyControllerTest {\n+\n+  private static final String ENCLAVE_PUBLIC_KEY1 = \"Ko2bVqD+nNlNYL5EE7y3IdOnviftjiizpjRt+HTuFBs=\";\n+  private static final String ENCLAVE_PUBLIC_KEY2 = \"OnviftjiizpjRt+HTuFBsKo2bVqD+nNlNYL5EE7y3Id=\";\n+  private static final String PRIVACY_GROUP_ID = \"nNlNYL5EE7y3IdM=\";\n+  private static final String ENCLAVE_KEY = \"Ko2bVqD\";\n+\n+  @Mock private PrivacyController privacyController;\n+  @Mock private Enclave enclave;\n+\n+  private MultiTenancyPrivacyController multiTenancyPrivacyController;\n+\n+  @Before\n+  public void setup() {\n+    multiTenancyPrivacyController = new MultiTenancyPrivacyController(privacyController, enclave);\n+  }\n+\n+  @Test\n+  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKey() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n+            .build();\n+\n+    when(privacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(new SendTransactionResponse(ENCLAVE_KEY, PRIVACY_GROUP_ID));\n+\n+    final SendTransactionResponse response =\n+        multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+    assertThat(response.getEnclaveKey()).isEqualTo(ENCLAVE_KEY);\n+    assertThat(response.getPrivacyGroupId()).isEqualTo(PRIVACY_GROUP_ID);\n+    verify(privacyController).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void sendsBesuTransactionWithEnclavePublicKeyInPrivacyGroup() {", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MjA0Nw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364552047", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T04:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MDQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\nindex b319a411e..9fb96a120 100644\n--- a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\n+++ b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\n\n@@ -54,7 +54,7 @@ public class MultiTenancyPrivacyControllerTest {\n   }\n \n   @Test\n-  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKey() {\n+  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKeyAndProducesSuccessfulResponse() {\n     final PrivateTransaction transaction =\n         PrivateTransaction.builder()\n             .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MjA1OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364542058", "bodyText": "I know it doesn't do anything - but is it worth putting PRIVACY_GROU_ID into the first arg here (just to make things look consistent)", "author": "rain-on", "createdAt": "2020-01-09T03:08:48Z", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.enclave.Enclave;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup.Type;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MultiTenancyPrivacyControllerTest {\n+\n+  private static final String ENCLAVE_PUBLIC_KEY1 = \"Ko2bVqD+nNlNYL5EE7y3IdOnviftjiizpjRt+HTuFBs=\";\n+  private static final String ENCLAVE_PUBLIC_KEY2 = \"OnviftjiizpjRt+HTuFBsKo2bVqD+nNlNYL5EE7y3Id=\";\n+  private static final String PRIVACY_GROUP_ID = \"nNlNYL5EE7y3IdM=\";\n+  private static final String ENCLAVE_KEY = \"Ko2bVqD\";\n+\n+  @Mock private PrivacyController privacyController;\n+  @Mock private Enclave enclave;\n+\n+  private MultiTenancyPrivacyController multiTenancyPrivacyController;\n+\n+  @Before\n+  public void setup() {\n+    multiTenancyPrivacyController = new MultiTenancyPrivacyController(privacyController, enclave);\n+  }\n+\n+  @Test\n+  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKey() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n+            .build();\n+\n+    when(privacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(new SendTransactionResponse(ENCLAVE_KEY, PRIVACY_GROUP_ID));\n+\n+    final SendTransactionResponse response =\n+        multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+    assertThat(response.getEnclaveKey()).isEqualTo(ENCLAVE_KEY);\n+    assertThat(response.getPrivacyGroupId()).isEqualTo(PRIVACY_GROUP_ID);\n+    verify(privacyController).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void sendsBesuTransactionWithEnclavePublicKeyInPrivacyGroup() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n+            .privacyGroupId(Bytes.fromBase64String(PRIVACY_GROUP_ID))\n+            .build();\n+\n+    when(privacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(new SendTransactionResponse(ENCLAVE_KEY, PRIVACY_GROUP_ID));\n+    final PrivacyGroup privacyGroupWithEnclavePublicKey =\n+        new PrivacyGroup(\n+            \"\", Type.PANTHEON, \"\", \"\", List.of(ENCLAVE_PUBLIC_KEY1, ENCLAVE_PUBLIC_KEY2));\n+    when(enclave.retrievePrivacyGroup(PRIVACY_GROUP_ID))\n+        .thenReturn(privacyGroupWithEnclavePublicKey);\n+\n+    final SendTransactionResponse response =\n+        multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+    assertThat(response.getEnclaveKey()).isEqualTo(ENCLAVE_KEY);\n+    assertThat(response.getPrivacyGroupId()).isEqualTo(PRIVACY_GROUP_ID);\n+    verify(privacyController).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+    verify(enclave).retrievePrivacyGroup(PRIVACY_GROUP_ID);\n+  }\n+\n+  @Test\n+  public void sendEeaTransactionFailsWithValidationExceptionWhenPrivateFromDoesNotMatch() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY2))\n+            .build();\n+\n+    assertThatThrownBy(\n+            () -> multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .isInstanceOf(MultiTenancyValidationException.class)\n+        .hasMessage(\"Transaction privateFrom must match enclave public key\");\n+\n+    verify(privacyController, never()).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void sendBesuTransactionFailsWithValidationExceptionWhenPrivateFromDoesNotMatch() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY2))\n+            .privacyGroupId(Bytes.fromBase64String(PRIVACY_GROUP_ID))\n+            .build();\n+\n+    assertThatThrownBy(\n+            () -> multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .isInstanceOf(MultiTenancyValidationException.class)\n+        .hasMessage(\"Transaction privateFrom must match enclave public key\");\n+\n+    verify(privacyController, never()).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void\n+      sendBesuTransactionFailsWithValidationExceptionWhenPrivacyGroupDoesNotContainEnclavePublicKey() {\n+    final PrivateTransaction transaction =\n+        PrivateTransaction.builder()\n+            .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n+            .privacyGroupId(Bytes.fromBase64String(PRIVACY_GROUP_ID))\n+            .build();\n+\n+    final PrivacyGroup privacyGroupWithoutEnclavePublicKey =\n+        new PrivacyGroup(\"\", Type.PANTHEON, \"\", \"\", List.of(ENCLAVE_PUBLIC_KEY2));\n+    when(enclave.retrievePrivacyGroup(PRIVACY_GROUP_ID))\n+        .thenReturn(privacyGroupWithoutEnclavePublicKey);\n+\n+    assertThatThrownBy(\n+            () -> multiTenancyPrivacyController.sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1))\n+        .isInstanceOf(MultiTenancyValidationException.class)\n+        .hasMessage(\"Privacy group must contain the enclave public key\");\n+\n+    verify(privacyController, never()).sendTransaction(transaction, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void retrieveTransactionDelegatesToPrivacyController() {\n+    final ReceiveResponse delegateRetrieveResponse =\n+        new ReceiveResponse(new byte[] {}, PRIVACY_GROUP_ID);\n+    when(privacyController.retrieveTransaction(ENCLAVE_KEY, ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(delegateRetrieveResponse);\n+\n+    final ReceiveResponse multiTenancyRetrieveResponse =\n+        multiTenancyPrivacyController.retrieveTransaction(ENCLAVE_KEY, ENCLAVE_PUBLIC_KEY1);\n+    assertThat(multiTenancyRetrieveResponse)\n+        .isEqualToComparingFieldByField(delegateRetrieveResponse);\n+    verify(privacyController).retrieveTransaction(ENCLAVE_KEY, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void createPrivacyGroupDelegatesToPrivacyController() {\n+    final List<String> addresses = List.of(ENCLAVE_PUBLIC_KEY1, ENCLAVE_PUBLIC_KEY2);\n+    final PrivacyGroup delegatePrivacyGroup =\n+        new PrivacyGroup(PRIVACY_GROUP_ID, Type.PANTHEON, \"name\", \"description\", addresses);\n+\n+    when(privacyController.createPrivacyGroup(\n+            addresses, \"name\", \"description\", ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(delegatePrivacyGroup);\n+\n+    final PrivacyGroup privacyGroup =\n+        multiTenancyPrivacyController.createPrivacyGroup(\n+            addresses, \"name\", \"description\", ENCLAVE_PUBLIC_KEY1);\n+    assertThat(privacyGroup).isEqualToComparingFieldByField(delegatePrivacyGroup);\n+    verify(privacyController)\n+        .createPrivacyGroup(addresses, \"name\", \"description\", ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void deletesPrivacyGroupWhenEnclavePublicKeyInPrivacyGroup() {\n+    final PrivacyGroup privacyGroupWithEnclavePublicKey =\n+        new PrivacyGroup(\n+            \"\", Type.PANTHEON, \"\", \"\", List.of(ENCLAVE_PUBLIC_KEY1, ENCLAVE_PUBLIC_KEY2));\n+    when(enclave.retrievePrivacyGroup(PRIVACY_GROUP_ID))\n+        .thenReturn(privacyGroupWithEnclavePublicKey);\n+    when(privacyController.deletePrivacyGroup(PRIVACY_GROUP_ID, ENCLAVE_PUBLIC_KEY1))\n+        .thenReturn(ENCLAVE_PUBLIC_KEY1);\n+\n+    final String privacyGroupId =\n+        multiTenancyPrivacyController.deletePrivacyGroup(PRIVACY_GROUP_ID, ENCLAVE_PUBLIC_KEY1);\n+    assertThat(privacyGroupId).isEqualTo(ENCLAVE_PUBLIC_KEY1);\n+    verify(privacyController).deletePrivacyGroup(PRIVACY_GROUP_ID, ENCLAVE_PUBLIC_KEY1);\n+  }\n+\n+  @Test\n+  public void\n+      deletePrivacyGroupFailsWithValidationExceptionWhenPrivacyGroupDoesNotContainEnclavePublicKey() {\n+    final PrivacyGroup privacyGroupWithoutEnclavePublicKey =\n+        new PrivacyGroup(\"\", Type.PANTHEON, \"\", \"\", List.of(ENCLAVE_PUBLIC_KEY2));", "originalCommit": "9940f1e4b755fba7283dd98bdb9cf84f8b1664a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MTY4MQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r364551681", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-09T04:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU0MjA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8279b9a36d4776fcefdd99637fba43c1921ff685", "chunk": "diff --git a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\nindex b319a411e..9fb96a120 100644\n--- a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\n+++ b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java\n\n@@ -54,7 +54,7 @@ public class MultiTenancyPrivacyControllerTest {\n   }\n \n   @Test\n-  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKey() {\n+  public void sendsEeaTransactionWithMatchingPrivateFromAndEnclavePublicKeyAndProducesSuccessfulResponse() {\n     final PrivateTransaction transaction =\n         PrivateTransaction.builder()\n             .privateFrom(Bytes.fromBase64String(ENCLAVE_PUBLIC_KEY1))\n"}}, {"oid": "ebefce29fc84826b8b217e8a81436486b68bdcb4", "url": "https://github.com/hyperledger/besu/commit/ebefce29fc84826b8b217e8a81436486b68bdcb4", "message": "privacy api group method refactor\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T03:28:47Z", "type": "commit"}, {"oid": "8279b9a36d4776fcefdd99637fba43c1921ff685", "url": "https://github.com/hyperledger/besu/commit/8279b9a36d4776fcefdd99637fba43c1921ff685", "message": "PR changes\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T04:15:43Z", "type": "commit"}, {"oid": "769bdc897a028c67ef650549b5a9401b2a223dee", "url": "https://github.com/hyperledger/besu/commit/769bdc897a028c67ef650549b5a9401b2a223dee", "message": "spotless\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T04:22:54Z", "type": "commit"}, {"oid": "10c86294eed184f897b457db5918aa19947c3a94", "url": "https://github.com/hyperledger/besu/commit/10c86294eed184f897b457db5918aa19947c3a94", "message": "improve rpc error handling\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T04:31:25Z", "type": "commit"}, {"oid": "2bfd4144465831a2751dc680e18deb278a8876b8", "url": "https://github.com/hyperledger/besu/commit/2bfd4144465831a2751dc680e18deb278a8876b8", "message": "improve rpc error handling\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T05:29:13Z", "type": "commit"}, {"oid": "c8f4a3ea9f60d2b43962c7641f184e06c042661a", "url": "https://github.com/hyperledger/besu/commit/c8f4a3ea9f60d2b43962c7641f184e06c042661a", "message": "simplify multi-tenancy and privacyPublicKey cli options verification\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T05:52:36Z", "type": "commit"}, {"oid": "71df21c96abf72528e95c6f61d3a92b753c51cd4", "url": "https://github.com/hyperledger/besu/commit/71df21c96abf72528e95c6f61d3a92b753c51cd4", "message": "Merge branch 'master' into privacy_multitenancy_validation", "committedDate": "2020-01-09T05:54:12Z", "type": "commit"}, {"oid": "1a4297b380c985a3712974e64de07087e88746fe", "url": "https://github.com/hyperledger/besu/commit/1a4297b380c985a3712974e64de07087e88746fe", "message": "fix ATs by catching all variants of enclave exception\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-09T06:13:53Z", "type": "commit"}, {"oid": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "url": "https://github.com/hyperledger/besu/commit/3c6a9090a2529b633aa4315d9b5ee824b6535a20", "message": "Merge branch 'privacy_multitenancy_validation' of github.com:jframe/besu into privacy_multitenancy_validation", "committedDate": "2020-01-09T06:14:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMjcyNA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365002724", "bodyText": "What is the difference between a EnclaveClientException and a EnclaveException, is there value in actually having two, would just one exception suffice?", "author": "CjHare", "createdAt": "2020-01-09T23:03:03Z", "path": "enclave/src/main/java/org/hyperledger/besu/enclave/EnclaveClientException.java", "diffHunk": "@@ -14,7 +14,7 @@\n  */\n package org.hyperledger.besu.enclave;\n \n-public class EnclaveClientException extends IllegalArgumentException {\n+public class EnclaveClientException extends EnclaveException {", "originalCommit": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyNjY3MA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365626670", "bodyText": "Not certain if one would suffice everywhere. But certainly in the rpcs there is no need to differentiate that it why I introduced a common EnclaveException to avoid adding a multi-catch in all the rpcs.", "author": "jframe", "createdAt": "2020-01-13T01:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMjcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNjUyNw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365636527", "bodyText": "Changed back to just the seperate exceptions without a exception type hierarchy", "author": "jframe", "createdAt": "2020-01-13T03:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMjcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "428e6a15abb8956c0c4b6da29c0c41eef78fe03e", "chunk": "diff --git a/enclave/src/main/java/org/hyperledger/besu/enclave/EnclaveClientException.java b/enclave/src/main/java/org/hyperledger/besu/enclave/EnclaveClientException.java\nindex 978490c71..18bb5cac3 100644\n--- a/enclave/src/main/java/org/hyperledger/besu/enclave/EnclaveClientException.java\n+++ b/enclave/src/main/java/org/hyperledger/besu/enclave/EnclaveClientException.java\n\n@@ -14,7 +14,7 @@\n  */\n package org.hyperledger.besu.enclave;\n \n-public class EnclaveClientException extends EnclaveException {\n+public class EnclaveClientException extends IllegalArgumentException {\n   private int statusCode;\n \n   public EnclaveClientException(final int statusCode, final String message) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzg4OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365003888", "bodyText": "assertThat the returned type is of JsonRpcErrorResponse before casting would make for a nicer test & more meaningful contextual error reporting", "author": "CjHare", "createdAt": "2020-01-09T23:06:54Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java", "diffHunk": "@@ -85,4 +89,20 @@ public void failsWithDeletePrivacyGroupErrorIfEnclaveFails() {\n     assertThat(response.getError()).isEqualTo(JsonRpcError.DELETE_PRIVACY_GROUP_ERROR);\n     verify(privacyController).deletePrivacyGroup(PRIVACY_GROUP_ID, ENCLAVE_PUBLIC_KEY);\n   }\n+\n+  @Test\n+  public void failsWithUnauthorizedErrorIfMultiTenancyValidationFails() {\n+    when(privacyController.deletePrivacyGroup(PRIVACY_GROUP_ID, ENCLAVE_PUBLIC_KEY))\n+        .thenThrow(new MultiTenancyValidationException(\"validation failed\"));\n+\n+    final PrivDeletePrivacyGroup privDeletePrivacyGroup =\n+        new PrivDeletePrivacyGroup(privacyController, enclavePublicKeyProvider);\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(request.getRequest().getId(), JsonRpcError.ENCLAVE_ERROR);\n+\n+    final JsonRpcErrorResponse response =", "originalCommit": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNjI0Mg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365636242", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-13T03:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "34317e526d35919cc70c9481c4280b635e36ad2f", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\nindex 5fd60cdb9..68a8f62ad 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\n\n@@ -99,7 +99,8 @@ public class PrivDeletePrivacyGroupTest {\n         new PrivDeletePrivacyGroup(privacyController, enclavePublicKeyProvider);\n \n     final JsonRpcResponse expectedResponse =\n-        new JsonRpcErrorResponse(request.getRequest().getId(), JsonRpcError.ENCLAVE_ERROR);\n+        new JsonRpcErrorResponse(\n+            request.getRequest().getId(), JsonRpcError.DELETE_PRIVACY_GROUP_ERROR);\n \n     final JsonRpcErrorResponse response =\n         (JsonRpcErrorResponse) privDeletePrivacyGroup.response(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTEzOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365021138", "bodyText": "nit: Yeah, better - but do we want to split this function up? Maybe even into a new class? Its massive, and I got kinda lost where conditionals ended :/", "author": "rain-on", "createdAt": "2020-01-10T00:13:56Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1389,15 +1389,12 @@ private PrivacyParameters privacyParameters() {\n             \"Privacy multi-tenancy requires either http authentication to be enabled or WebSocket authentication to be enabled\");\n       }\n \n-      if (privacyPublicKeyFile() != null && isPrivacyMultiTenancyEnabled) {\n-        throw new ParameterException(\n-            commandLine, \"Privacy multi-tenancy and privacy public key cannot be used together\");\n-      }\n-\n       privacyParametersBuilder.setEnabled(true);\n       privacyParametersBuilder.setEnclaveUrl(privacyUrl);\n       privacyParametersBuilder.setMultiTenancyEnabled(isPrivacyMultiTenancyEnabled);\n-      if (privacyPublicKeyFile() != null) {\n+", "originalCommit": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjA2OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365652068", "bodyText": "Ok - probalby hard, happy to let this go.", "author": "rain-on", "createdAt": "2020-01-13T05:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTEzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTYzOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365021638", "bodyText": "nit: final [do we want MultiTenancyValidationException to also produce a \"DELETE_PRIAVCY_GROUP_ERROR\"? (rather than an ENCLAVE_ERROR)", "author": "rain-on", "createdAt": "2020-01-10T00:16:02Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java", "diffHunk": "@@ -62,9 +62,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n               privacyGroupId, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n-      return new JsonRpcUnauthorizedResponse(requestContext.getRequest().getId(), UNAUTHORIZED);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to fetch transaction\", e);\n+      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n+    } catch (EnclaveException e) {", "originalCommit": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyMDIzNQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365620235", "bodyText": "Think we probably do want to do that, treating it the same as if it failed.", "author": "jframe", "createdAt": "2020-01-12T23:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyNjI2NQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365626265", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-13T01:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "2908b531d015b84a224628a4cc50a57f9ef387d0", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\nindex d553a2cc0..532b4fcdb 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroup.java\n\n@@ -62,11 +61,12 @@ public class PrivDeletePrivacyGroup implements JsonRpcMethod {\n               privacyGroupId, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n-      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), DELETE_PRIVACY_GROUP_ERROR);\n     } catch (EnclaveException e) {\n       LOG.error(\"Failed to delete privacy group\", e);\n       return new JsonRpcErrorResponse(\n-          requestContext.getRequest().getId(), JsonRpcError.DELETE_PRIVACY_GROUP_ERROR);\n+          requestContext.getRequest().getId(), DELETE_PRIVACY_GROUP_ERROR);\n     }\n     return new JsonRpcSuccessResponse(requestContext.getRequest().getId(), response);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMjMyMA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365022320", "bodyText": "nit: final", "author": "rain-on", "createdAt": "2020-01-10T00:18:47Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroup.java", "diffHunk": "@@ -68,8 +68,8 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n               enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n-      return new JsonRpcUnauthorizedResponse(requestContext.getRequest().getId(), UNAUTHORIZED);\n-    } catch (Exception e) {\n+      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n+    } catch (EnclaveException e) {", "originalCommit": "3c6a9090a2529b633aa4315d9b5ee824b6535a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyMDAzNg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365620036", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-12T23:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyMjMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "2908b531d015b84a224628a4cc50a57f9ef387d0", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroup.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroup.java\nindex 35c6b6e55..676de5a76 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroup.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroup.java\n\n@@ -68,11 +67,12 @@ public class PrivFindPrivacyGroup implements JsonRpcMethod {\n               enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n-      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n-    } catch (EnclaveException e) {\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), FIND_PRIVACY_GROUP_ERROR);\n+    } catch (final EnclaveException e) {\n       LOG.error(\"Failed to fetch privacy group\", e);\n       return new JsonRpcErrorResponse(\n-          requestContext.getRequest().getId(), JsonRpcError.FIND_PRIVACY_GROUP_ERROR);\n+          requestContext.getRequest().getId(), FIND_PRIVACY_GROUP_ERROR);\n     }\n     return new JsonRpcSuccessResponse(requestContext.getRequest().getId(), response);\n   }\n"}}, {"oid": "2908b531d015b84a224628a4cc50a57f9ef387d0", "url": "https://github.com/hyperledger/besu/commit/2908b531d015b84a224628a4cc50a57f9ef387d0", "message": "PR changes\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T01:06:37Z", "type": "commit"}, {"oid": "4ab17099d39cf789340ef842d4b1a2f715a8aff9", "url": "https://github.com/hyperledger/besu/commit/4ab17099d39cf789340ef842d4b1a2f715a8aff9", "message": "Merge branch 'master' into privacy_multitenancy_validation", "committedDate": "2020-01-13T01:11:55Z", "type": "commit"}, {"oid": "3e0e9d9f17501ae39ff5d83bb7e9ba384209211a", "url": "https://github.com/hyperledger/besu/commit/3e0e9d9f17501ae39ff5d83bb7e9ba384209211a", "message": "compile error\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T01:21:18Z", "type": "commit"}, {"oid": "8f03ccbaf5d7264999f726a91c91d368fbc45ce7", "url": "https://github.com/hyperledger/besu/commit/8f03ccbaf5d7264999f726a91c91d368fbc45ce7", "message": "Revert \"fix ATs by catching all variants of enclave exception\"\n\nThis reverts commit 1a4297b3\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T02:50:09Z", "type": "commit"}, {"oid": "428e6a15abb8956c0c4b6da29c0c41eef78fe03e", "url": "https://github.com/hyperledger/besu/commit/428e6a15abb8956c0c4b6da29c0c41eef78fe03e", "message": "Revert \"fix ATs by catching all variants of enclave exception\"\n\nThis reverts commit 1a4297b3\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T02:51:02Z", "type": "commit"}, {"oid": "34317e526d35919cc70c9481c4280b635e36ad2f", "url": "https://github.com/hyperledger/besu/commit/34317e526d35919cc70c9481c4280b635e36ad2f", "message": "Change RPC error handling back to using generic exception for now, change is larger than excepted so will do this in another ticket\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T03:01:31Z", "type": "commit"}, {"oid": "cafdeb7457c47c57f68a4b736fe81abd536c68ae", "url": "https://github.com/hyperledger/besu/commit/cafdeb7457c47c57f68a4b736fe81abd536c68ae", "message": "PR changes\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T03:07:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjUxNw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365652517", "bodyText": "nit: can this not be a mock of the PrivacyController interface?", "author": "rain-on", "createdAt": "2020-01-13T05:43:07Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivCreatePrivacyGroupTest.java", "diffHunk": "@@ -54,7 +55,7 @@\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(PrivacyController.class);\n+  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);", "originalCommit": "cafdeb7457c47c57f68a4b736fe81abd536c68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MzQyOA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365653428", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-13T05:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "866570399cd3f202b225639c7e3819a5c97f212b", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivCreatePrivacyGroupTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivCreatePrivacyGroupTest.java\nindex 37acd31ff..16e79a222 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivCreatePrivacyGroupTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivCreatePrivacyGroupTest.java\n\n@@ -55,7 +54,7 @@ public class PrivCreatePrivacyGroupTest {\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);\n+  private final PrivacyController privacyController = mock(PrivacyController.class);\n   private final User user =\n       new JWTUser(new JsonObject().put(\"privacyPublicKey\", ENCLAVE_PUBLIC_KEY), \"\");\n   private final EnclavePublicKeyProvider enclavePublicKeyProvider = (user) -> ENCLAVE_PUBLIC_KEY;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjY0OQ==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365652649", "bodyText": "nit: mock the interface?", "author": "rain-on", "createdAt": "2020-01-13T05:44:09Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java", "diffHunk": "@@ -41,7 +45,7 @@\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(PrivacyController.class);\n+  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);", "originalCommit": "cafdeb7457c47c57f68a4b736fe81abd536c68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MzQxNA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365653414", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-13T05:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "866570399cd3f202b225639c7e3819a5c97f212b", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\nindex ad238a73b..0916cc606 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDeletePrivacyGroupTest.java\n\n@@ -45,7 +44,7 @@ public class PrivDeletePrivacyGroupTest {\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);\n+  private final PrivacyController privacyController = mock(PrivacyController.class);\n   private final User user =\n       new JWTUser(new JsonObject().put(\"privacyPublicKey\", ENCLAVE_PUBLIC_KEY), \"\");\n   private final EnclavePublicKeyProvider enclavePublicKeyProvider = (user) -> ENCLAVE_PUBLIC_KEY;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjY5NA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365652694", "bodyText": "nit: mock the interface?", "author": "rain-on", "createdAt": "2020-01-13T05:44:39Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroupTest.java", "diffHunk": "@@ -48,7 +52,7 @@\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(PrivacyController.class);\n+  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);", "originalCommit": "cafdeb7457c47c57f68a4b736fe81abd536c68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MzQ0OA==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365653448", "bodyText": "done", "author": "jframe", "createdAt": "2020-01-13T05:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MjY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "866570399cd3f202b225639c7e3819a5c97f212b", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroupTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroupTest.java\nindex a87ad6d50..3d2477740 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroupTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivFindPrivacyGroupTest.java\n\n@@ -52,7 +51,7 @@ public class PrivFindPrivacyGroupTest {\n \n   private final Enclave enclave = mock(Enclave.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n-  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);\n+  private final PrivacyController privacyController = mock(PrivacyController.class);\n   private final User user =\n       new JWTUser(new JsonObject().put(\"privacyPublicKey\", ENCLAVE_PUBLIC_KEY), \"\");\n   private final EnclavePublicKeyProvider enclavePublicKeyProvider = (user) -> ENCLAVE_PUBLIC_KEY;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1Mjc1Mw==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365652753", "bodyText": "same nit ... everywhere :)", "author": "rain-on", "createdAt": "2020-01-13T05:45:16Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionReceiptTest.java", "diffHunk": "@@ -150,7 +151,7 @@\n   private final Blockchain blockchain = mock(Blockchain.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n   private final PrivateStateStorage privateStateStorage = mock(PrivateStateStorage.class);\n-  private final PrivacyController privacyController = mock(PrivacyController.class);\n+  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);", "originalCommit": "cafdeb7457c47c57f68a4b736fe81abd536c68ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MzQ2Mg==", "url": "https://github.com/hyperledger/besu/pull/296#discussion_r365653462", "bodyText": "done and done :)", "author": "jframe", "createdAt": "2020-01-13T05:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1Mjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "866570399cd3f202b225639c7e3819a5c97f212b", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionReceiptTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionReceiptTest.java\nindex 43a377a84..c6a4650d4 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionReceiptTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetTransactionReceiptTest.java\n\n@@ -151,7 +150,7 @@ public class PrivGetTransactionReceiptTest {\n   private final Blockchain blockchain = mock(Blockchain.class);\n   private final PrivacyParameters privacyParameters = mock(PrivacyParameters.class);\n   private final PrivateStateStorage privateStateStorage = mock(PrivateStateStorage.class);\n-  private final PrivacyController privacyController = mock(DefaultPrivacyController.class);\n+  private final PrivacyController privacyController = mock(PrivacyController.class);\n \n   @Before\n   public void setUp() {\n"}}, {"oid": "866570399cd3f202b225639c7e3819a5c97f212b", "url": "https://github.com/hyperledger/besu/commit/866570399cd3f202b225639c7e3819a5c97f212b", "message": "PR changes\n\nSigned-off-by: Jason Frame <jasonwframe@gmail.com>", "committedDate": "2020-01-13T05:50:24Z", "type": "commit"}]}