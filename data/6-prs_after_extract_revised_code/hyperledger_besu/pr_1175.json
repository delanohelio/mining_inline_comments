{"pr_number": 1175, "pr_title": "Use Cache for bonding peers", "pr_createdAt": "2020-06-30T13:41:33Z", "pr_url": "https://github.com/hyperledger/besu/pull/1175", "timeline": [{"oid": "dad8dae8bd6601bfe0d3f620036ffdc2f657b702", "url": "https://github.com/hyperledger/besu/commit/dad8dae8bd6601bfe0d3f620036ffdc2f657b702", "message": "#1066 Switched to use unprefixed hex strings for memory and stack values\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-06-26T13:37:13Z", "type": "commit"}, {"oid": "01430e770da93ea19171e1a9683daec7c10677f4", "url": "https://github.com/hyperledger/besu/commit/01430e770da93ea19171e1a9683daec7c10677f4", "message": "Merge branch 'master' of github.com:hyperledger/besu", "committedDate": "2020-06-26T16:53:26Z", "type": "commit"}, {"oid": "fae57d49ecef387852d5589bd93c5959a6f3e465", "url": "https://github.com/hyperledger/besu/commit/fae57d49ecef387852d5589bd93c5959a6f3e465", "message": "Update to use Cache for bonding peers collection; PR updates\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-06-30T13:38:32Z", "type": "commit"}, {"oid": "58d1404ebb21294aa726f095e0b4435c83b7d34f", "url": "https://github.com/hyperledger/besu/commit/58d1404ebb21294aa726f095e0b4435c83b7d34f", "message": "Merge branch 'master' into TKT-792", "committedDate": "2020-06-30T13:42:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMzEzNg==", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447733136", "bodyText": "Shouldn't we also check against the bondingPeers collection?\nMaybe we need a helper method resolvePeer that takes a peer and replaces it with representations from the peerTable or bondingPeers collection as needed.  Then we could dedupe the same logic in onMessage.", "author": "mbaxter", "createdAt": "2020-06-30T14:35:29Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -586,6 +590,17 @@ public void setRetryDelayFunction(final RetryDelayFunction retryDelayFunction) {\n     this.retryDelayFunction = retryDelayFunction;\n   }\n \n+  public void handleBondingRequest(final DiscoveryPeer peer) {\n+    final DiscoveryPeer peerToBond =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);", "originalCommit": "58d1404ebb21294aa726f095e0b4435c83b7d34f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1ec54f1080cb731b3a476730001d3630f538ebb", "chunk": "diff --git a/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java b/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\nindex 401e5b19b..37a535c81 100644\n--- a/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\n+++ b/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\n\n@@ -591,16 +579,29 @@ public class PeerDiscoveryController {\n   }\n \n   public void handleBondingRequest(final DiscoveryPeer peer) {\n-    final DiscoveryPeer peerToBond =\n-        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);\n+    final DiscoveryPeer peerToBond = resolvePeer(peer);\n \n     if (peerPermissions.allowOutboundBonding(peerToBond)\n-        && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n-        && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {\n+        && PeerDiscoveryStatus.KNOWN.equals(peerToBond.getStatus())) {\n       bond(peerToBond);\n     }\n   }\n \n+  // Load the peer first from the table, then from bonding cache or use the instance that comes in.\n+  private DiscoveryPeer resolvePeer(final DiscoveryPeer peer) {\n+    final Optional<DiscoveryPeer> maybeKnownPeer =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer));\n+    DiscoveryPeer resolvedPeer = maybeKnownPeer.orElse(peer);\n+    if (maybeKnownPeer.isEmpty()) {\n+      DiscoveryPeer bondingPeer = bondingPeers.getIfPresent(peer.getId());\n+      if (bondingPeer != null) {\n+        resolvedPeer = bondingPeer;\n+      }\n+    }\n+\n+    return resolvedPeer;\n+  }\n+\n   /** Holds the state machine data for a peer interaction. */\n   private class PeerInteractionState implements Predicate<Packet> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDA3NQ==", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447734075", "bodyText": "(nit) I think we could simplify:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (peerPermissions.allowOutboundBonding(peerToBond)\n          \n          \n            \n                    && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n          \n          \n            \n                    && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {\n          \n          \n            \n                if (peerPermissions.allowOutboundBonding(peerToBond)\n          \n          \n            \n                    && peerToBond.getStatus().equals(PeerDiscoveryStatus.KNOWN)) {", "author": "mbaxter", "createdAt": "2020-06-30T14:36:44Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -586,6 +590,17 @@ public void setRetryDelayFunction(final RetryDelayFunction retryDelayFunction) {\n     this.retryDelayFunction = retryDelayFunction;\n   }\n \n+  public void handleBondingRequest(final DiscoveryPeer peer) {\n+    final DiscoveryPeer peerToBond =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);\n+\n+    if (peerPermissions.allowOutboundBonding(peerToBond)\n+        && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n+        && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {", "originalCommit": "58d1404ebb21294aa726f095e0b4435c83b7d34f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b1ec54f1080cb731b3a476730001d3630f538ebb", "chunk": "diff --git a/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java b/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\nindex 401e5b19b..37a535c81 100644\n--- a/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\n+++ b/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java\n\n@@ -591,16 +579,29 @@ public class PeerDiscoveryController {\n   }\n \n   public void handleBondingRequest(final DiscoveryPeer peer) {\n-    final DiscoveryPeer peerToBond =\n-        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);\n+    final DiscoveryPeer peerToBond = resolvePeer(peer);\n \n     if (peerPermissions.allowOutboundBonding(peerToBond)\n-        && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n-        && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {\n+        && PeerDiscoveryStatus.KNOWN.equals(peerToBond.getStatus())) {\n       bond(peerToBond);\n     }\n   }\n \n+  // Load the peer first from the table, then from bonding cache or use the instance that comes in.\n+  private DiscoveryPeer resolvePeer(final DiscoveryPeer peer) {\n+    final Optional<DiscoveryPeer> maybeKnownPeer =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer));\n+    DiscoveryPeer resolvedPeer = maybeKnownPeer.orElse(peer);\n+    if (maybeKnownPeer.isEmpty()) {\n+      DiscoveryPeer bondingPeer = bondingPeers.getIfPresent(peer.getId());\n+      if (bondingPeer != null) {\n+        resolvedPeer = bondingPeer;\n+      }\n+    }\n+\n+    return resolvedPeer;\n+  }\n+\n   /** Holds the state machine data for a peer interaction. */\n   private class PeerInteractionState implements Predicate<Packet> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNjQ1OA==", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447736458", "bodyText": "good catch!", "author": "mbaxter", "createdAt": "2020-06-30T14:39:43Z", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -107,7 +108,8 @@\n   private static final int PEER_REFRESH_ROUND_TIMEOUT_IN_SECONDS = 5;\n   protected final TimerUtil timerUtil;\n   private final PeerTable peerTable;\n-  private final Map<Bytes, DiscoveryPeer> bondingPeers;\n+  private final Cache<Bytes, DiscoveryPeer> bondingPeers =\n+      CacheBuilder.newBuilder().maximumSize(50).expireAfterWrite(10, TimeUnit.MINUTES).build();", "originalCommit": "58d1404ebb21294aa726f095e0b4435c83b7d34f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NDA4Mw==", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447764083", "bodyText": "Thanks to @shemnon", "author": "davemec", "createdAt": "2020-06-30T15:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNjQ1OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b1ec54f1080cb731b3a476730001d3630f538ebb", "url": "https://github.com/hyperledger/besu/commit/b1ec54f1080cb731b3a476730001d3630f538ebb", "message": "PR updates\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>", "committedDate": "2020-06-30T16:21:49Z", "type": "commit"}]}