{"pr_number": 1279, "pr_title": "PrivGetLogs needs to check privacy group membership at given block", "pr_createdAt": "2020-08-06T02:33:55Z", "pr_url": "https://github.com/hyperledger/besu/pull/1279", "timeline": [{"oid": "2b74c397d99b7f86762837d24a5ff7883cea92e6", "url": "https://github.com/hyperledger/besu/commit/2b74c397d99b7f86762837d24a5ff7883cea92e6", "message": "PrivGetLogs needs to check privacy group membership at given block\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-08-06T02:31:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MTU5MQ==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466691591", "bodyText": "We could name this method something like checkIfAuthenticatedUserWasMemberAtBlock. This way we reduce the cognitive gap. Not a big deal though.\nOr if you like checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey  keep it!", "author": "lucassaldanha", "createdAt": "2020-08-06T21:18:07Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java", "diffHunk": "@@ -85,9 +100,17 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         requestContext.getRequest().getId(), new LogsResult(matchingLogs));\n   }\n \n+  private List<LogWithMetadata> getEmptyList() {\n+    return Collections.emptyList();\n+  }\n+\n   private void checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(", "originalCommit": "2b74c397d99b7f86762837d24a5ff7883cea92e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjIxMg==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466752212", "bodyText": "memberAtBlock makes more sense.", "author": "macfarla", "createdAt": "2020-08-07T00:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1395e0df58ae5e4bfeffc16c48706fb141e4564", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\nindex 0ce9fc860..b12883ed4 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n\n@@ -72,39 +73,48 @@ public class PrivGetLogs implements JsonRpcMethod {\n             .getBlockHash()\n             .map(\n                 blockHash -> {\n-                  final Optional<BlockHeader> blockHeader =\n-                      blockchainQueries.getBlockHeaderByHash(blockHash);\n-                  if (blockHeader.isEmpty()) {\n-                    return getEmptyList();\n-                  }\n-                  final long blockNumber = blockHeader.get().getNumber();\n-                  // check if they were a member at that block\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, blockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, blockHash, filter.getLogsQuery());\n+                  return findLogsForBlockHash(requestContext, privacyGroupId, filter, blockHash);\n                 })\n             .orElseGet(\n                 () -> {\n-                  final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n-                  final long toBlockNumber =\n-                      filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n-                  // TODO they could have been a member of the group for part of the range\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, toBlockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+                  return findLogsForBlockRange(requestContext, privacyGroupId, filter);\n                 });\n \n     return new JsonRpcSuccessResponse(\n         requestContext.getRequest().getId(), new LogsResult(matchingLogs));\n   }\n \n+  private List<LogWithMetadata> findLogsForBlockRange(\n+      JsonRpcRequestContext requestContext, String privacyGroupId, FilterParameter filter) {\n+    final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n+    final long toBlockNumber =\n+        filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n+    // TODO they could have been a member of the group for part of the range\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, toBlockNumber);\n+    return privacyQueries.matchingLogs(\n+        privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+  }\n+\n+  private List<LogWithMetadata> findLogsForBlockHash(\n+      JsonRpcRequestContext requestContext,\n+      String privacyGroupId,\n+      FilterParameter filter,\n+      Hash blockHash) {\n+    final Optional<BlockHeader> blockHeader = blockchainQueries.getBlockHeaderByHash(blockHash);\n+    if (blockHeader.isEmpty()) {\n+      return getEmptyList();\n+    }\n+    final long blockNumber = blockHeader.get().getNumber();\n+    // check if they were a member at that block\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, blockNumber);\n+    return privacyQueries.matchingLogs(privacyGroupId, blockHash, filter.getLogsQuery());\n+  }\n+\n   private List<LogWithMetadata> getEmptyList() {\n     return Collections.emptyList();\n   }\n \n-  private void checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+  private void checkIfAuthenticatedUserWasMemberAtBlock(\n       final JsonRpcRequestContext request, final String privacyGroupId, final long blockNumber) {\n     final String enclavePublicKey = enclavePublicKeyProvider.getEnclaveKey(request.getUser());\n     // check group membership at previous block (they could have been removed as of blockNumber but\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MjEzMg==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466692132", "bodyText": "We could encapsulate the map and orElseGet blocks into their own functions to make this main function a bit cleaner. Something like findLogsForBlockHash and findLogsForBlockRange", "author": "lucassaldanha", "createdAt": "2020-08-06T21:19:23Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java", "diffHunk": "@@ -70,13 +71,27 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         filter\n             .getBlockHash()\n             .map(\n-                blockHash ->\n-                    privacyQueries.matchingLogs(privacyGroupId, blockHash, filter.getLogsQuery()))\n+                blockHash -> {", "originalCommit": "2b74c397d99b7f86762837d24a5ff7883cea92e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzM2OQ==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466753369", "bodyText": "done", "author": "macfarla", "createdAt": "2020-08-07T00:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MjEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "b1395e0df58ae5e4bfeffc16c48706fb141e4564", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\nindex 0ce9fc860..b12883ed4 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n\n@@ -72,39 +73,48 @@ public class PrivGetLogs implements JsonRpcMethod {\n             .getBlockHash()\n             .map(\n                 blockHash -> {\n-                  final Optional<BlockHeader> blockHeader =\n-                      blockchainQueries.getBlockHeaderByHash(blockHash);\n-                  if (blockHeader.isEmpty()) {\n-                    return getEmptyList();\n-                  }\n-                  final long blockNumber = blockHeader.get().getNumber();\n-                  // check if they were a member at that block\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, blockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, blockHash, filter.getLogsQuery());\n+                  return findLogsForBlockHash(requestContext, privacyGroupId, filter, blockHash);\n                 })\n             .orElseGet(\n                 () -> {\n-                  final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n-                  final long toBlockNumber =\n-                      filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n-                  // TODO they could have been a member of the group for part of the range\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, toBlockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+                  return findLogsForBlockRange(requestContext, privacyGroupId, filter);\n                 });\n \n     return new JsonRpcSuccessResponse(\n         requestContext.getRequest().getId(), new LogsResult(matchingLogs));\n   }\n \n+  private List<LogWithMetadata> findLogsForBlockRange(\n+      JsonRpcRequestContext requestContext, String privacyGroupId, FilterParameter filter) {\n+    final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n+    final long toBlockNumber =\n+        filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n+    // TODO they could have been a member of the group for part of the range\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, toBlockNumber);\n+    return privacyQueries.matchingLogs(\n+        privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+  }\n+\n+  private List<LogWithMetadata> findLogsForBlockHash(\n+      JsonRpcRequestContext requestContext,\n+      String privacyGroupId,\n+      FilterParameter filter,\n+      Hash blockHash) {\n+    final Optional<BlockHeader> blockHeader = blockchainQueries.getBlockHeaderByHash(blockHash);\n+    if (blockHeader.isEmpty()) {\n+      return getEmptyList();\n+    }\n+    final long blockNumber = blockHeader.get().getNumber();\n+    // check if they were a member at that block\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, blockNumber);\n+    return privacyQueries.matchingLogs(privacyGroupId, blockHash, filter.getLogsQuery());\n+  }\n+\n   private List<LogWithMetadata> getEmptyList() {\n     return Collections.emptyList();\n   }\n \n-  private void checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+  private void checkIfAuthenticatedUserWasMemberAtBlock(\n       final JsonRpcRequestContext request, final String privacyGroupId, final long blockNumber) {\n     final String enclavePublicKey = enclavePublicKeyProvider.getEnclaveKey(request.getUser());\n     // check group membership at previous block (they could have been removed as of blockNumber but\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MjY0MA==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466692640", "bodyText": "Do we need this extra method? Why not return Collections.emptyList() straight away on line 78?", "author": "lucassaldanha", "createdAt": "2020-08-06T21:20:28Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java", "diffHunk": "@@ -85,9 +100,17 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         requestContext.getRequest().getId(), new LogsResult(matchingLogs));\n   }\n \n+  private List<LogWithMetadata> getEmptyList() {", "originalCommit": "2b74c397d99b7f86762837d24a5ff7883cea92e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyOTc3Nw==", "url": "https://github.com/hyperledger/besu/pull/1279#discussion_r466729777", "bodyText": "I had it that way but got a nasty unintuitive compile error!", "author": "macfarla", "createdAt": "2020-08-06T22:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MjY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b1395e0df58ae5e4bfeffc16c48706fb141e4564", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\nindex 0ce9fc860..b12883ed4 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java\n\n@@ -72,39 +73,48 @@ public class PrivGetLogs implements JsonRpcMethod {\n             .getBlockHash()\n             .map(\n                 blockHash -> {\n-                  final Optional<BlockHeader> blockHeader =\n-                      blockchainQueries.getBlockHeaderByHash(blockHash);\n-                  if (blockHeader.isEmpty()) {\n-                    return getEmptyList();\n-                  }\n-                  final long blockNumber = blockHeader.get().getNumber();\n-                  // check if they were a member at that block\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, blockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, blockHash, filter.getLogsQuery());\n+                  return findLogsForBlockHash(requestContext, privacyGroupId, filter, blockHash);\n                 })\n             .orElseGet(\n                 () -> {\n-                  final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n-                  final long toBlockNumber =\n-                      filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n-                  // TODO they could have been a member of the group for part of the range\n-                  checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n-                      requestContext, privacyGroupId, toBlockNumber);\n-                  return privacyQueries.matchingLogs(\n-                      privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+                  return findLogsForBlockRange(requestContext, privacyGroupId, filter);\n                 });\n \n     return new JsonRpcSuccessResponse(\n         requestContext.getRequest().getId(), new LogsResult(matchingLogs));\n   }\n \n+  private List<LogWithMetadata> findLogsForBlockRange(\n+      JsonRpcRequestContext requestContext, String privacyGroupId, FilterParameter filter) {\n+    final long fromBlockNumber = filter.getFromBlock().getNumber().orElse(0L);\n+    final long toBlockNumber =\n+        filter.getToBlock().getNumber().orElse(blockchainQueries.headBlockNumber());\n+    // TODO they could have been a member of the group for part of the range\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, toBlockNumber);\n+    return privacyQueries.matchingLogs(\n+        privacyGroupId, fromBlockNumber, toBlockNumber, filter.getLogsQuery());\n+  }\n+\n+  private List<LogWithMetadata> findLogsForBlockHash(\n+      JsonRpcRequestContext requestContext,\n+      String privacyGroupId,\n+      FilterParameter filter,\n+      Hash blockHash) {\n+    final Optional<BlockHeader> blockHeader = blockchainQueries.getBlockHeaderByHash(blockHash);\n+    if (blockHeader.isEmpty()) {\n+      return getEmptyList();\n+    }\n+    final long blockNumber = blockHeader.get().getNumber();\n+    // check if they were a member at that block\n+    checkIfAuthenticatedUserWasMemberAtBlock(requestContext, privacyGroupId, blockNumber);\n+    return privacyQueries.matchingLogs(privacyGroupId, blockHash, filter.getLogsQuery());\n+  }\n+\n   private List<LogWithMetadata> getEmptyList() {\n     return Collections.emptyList();\n   }\n \n-  private void checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+  private void checkIfAuthenticatedUserWasMemberAtBlock(\n       final JsonRpcRequestContext request, final String privacyGroupId, final long blockNumber) {\n     final String enclavePublicKey = enclavePublicKeyProvider.getEnclaveKey(request.getUser());\n     // check group membership at previous block (they could have been removed as of blockNumber but\n"}}, {"oid": "b1395e0df58ae5e4bfeffc16c48706fb141e4564", "url": "https://github.com/hyperledger/besu/commit/b1395e0df58ae5e4bfeffc16c48706fb141e4564", "message": "review comments\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-08-07T00:22:59Z", "type": "commit"}, {"oid": "ef496174992ee19021ece512cfbb9f4f5390df4d", "url": "https://github.com/hyperledger/besu/commit/ef496174992ee19021ece512cfbb9f4f5390df4d", "message": "final params\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-08-07T01:20:22Z", "type": "commit"}, {"oid": "9646f710181fb8cdfb600bb1255cc277b79812bb", "url": "https://github.com/hyperledger/besu/commit/9646f710181fb8cdfb600bb1255cc277b79812bb", "message": "Merge branch 'master' of https://github.com/hyperledger/besu into multi-tenancy-onchain-groups-logs", "committedDate": "2020-08-07T01:20:38Z", "type": "commit"}, {"oid": "fa05ea3e006c77ee8ecab5b90b0d6a016958273f", "url": "https://github.com/hyperledger/besu/commit/fa05ea3e006c77ee8ecab5b90b0d6a016958273f", "message": "simplified getting the empty list\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-08-07T01:27:24Z", "type": "commit"}, {"oid": "24569b150c28b630a9b372a6193023f702fb6bb1", "url": "https://github.com/hyperledger/besu/commit/24569b150c28b630a9b372a6193023f702fb6bb1", "message": "Merge branch 'master' of https://github.com/hyperledger/besu into multi-tenancy-onchain-groups-logs", "committedDate": "2020-08-09T22:38:16Z", "type": "commit"}, {"oid": "8a7ff67dc1e0ef80d5ff75f062c61a2e712a4964", "url": "https://github.com/hyperledger/besu/commit/8a7ff67dc1e0ef80d5ff75f062c61a2e712a4964", "message": "Merge branch 'master' of https://github.com/hyperledger/besu into multi-tenancy-onchain-groups-logs", "committedDate": "2020-08-11T00:37:45Z", "type": "commit"}, {"oid": "b0536bfabda222c4bb6fef83afcc7db4bbbc037e", "url": "https://github.com/hyperledger/besu/commit/b0536bfabda222c4bb6fef83afcc7db4bbbc037e", "message": "rename method\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-08-11T01:11:12Z", "type": "commit"}]}