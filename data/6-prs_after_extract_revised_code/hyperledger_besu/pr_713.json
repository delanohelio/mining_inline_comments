{"pr_number": 713, "pr_title": "Security Module Plugin API", "pr_createdAt": "2020-04-15T05:03:24Z", "pr_url": "https://github.com/hyperledger/besu/pull/713", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r413604109", "bodyText": "There should no be any docker specific behaviour", "author": "NicolasMassart", "createdAt": "2020-04-23T08:09:18Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "originalCommit": "6283c0caf360d5421f08d469ef8a0518c59fbbb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNzQwNg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r413607406", "bodyText": "This whole file is using docker specific behavior using org/hyperledger/besu/cli/BesuCommand.java:2103\n  private boolean isFullInstantiation() {\n    return !isDocker;\n  }", "author": "usmansaleem", "createdAt": "2020-04-23T08:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MzMxMw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414443313", "bodyText": "It's garbage code to be deleted. We don't provide the parameter in the docker image since 29c3c14#diff-ebacf6f6ae4ee68078bb16454b23247dL19 so this part of the code is dead since July 2019. It was discussed about removing it but it was not a priority. Now, if it's confusing, it should be a priority IMO.", "author": "NicolasMassart", "createdAt": "2020-04-24T09:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2NjU2Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414966563", "bodyText": "\ud83d\udc4d I have created #785 and will clean it out in a separate PR.", "author": "usmansaleem", "createdAt": "2020-04-25T03:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzA0OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415203048", "bodyText": "\ud83d\udc4d Its a shame the docker code wasn't cleaned out before now - but the removal shouldn't be part of this work.", "author": "rain-on", "createdAt": "2020-04-26T03:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "75c5803247ec741584839e432363a6c0d6b85fb3", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 1cb1bb851..7fbd1ef0a 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1990,16 +2009,11 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n   }\n \n   private SecurityModule securityModuleProvider() {\n-    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n-      // directly load KeyPairSecurityModule\n-      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n-    }\n-\n     return securityModuleService\n         .getByName(securityModuleProviderName)\n         .orElseThrow(\n             () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n-        .create(pluginCommonConfiguration);\n+        .create();\n   }\n \n   private File nodePrivateKeyFile() {\n"}}, {"oid": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "url": "https://github.com/hyperledger/besu/commit/26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "message": "final keywords\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T08:16:45Z", "type": "commit"}, {"oid": "eb6712aaf84bd0712acfd56c496a09b79539136d", "url": "https://github.com/hyperledger/besu/commit/eb6712aaf84bd0712acfd56c496a09b79539136d", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T23:54:24Z", "type": "commit"}, {"oid": "317bc51cc01624a4808920dbd17b63cb0fbaf60d", "url": "https://github.com/hyperledger/besu/commit/317bc51cc01624a4808920dbd17b63cb0fbaf60d", "message": "ECPointUtil toUnsignedByteArray cleanup and unit tests\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-24T01:22:23Z", "type": "commit"}, {"oid": "6f675cbe91bb2cd01782c52b7fbff2b262478686", "url": "https://github.com/hyperledger/besu/commit/6f675cbe91bb2cd01782c52b7fbff2b262478686", "message": "cleaning up KeyPairSecurityModule\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-24T01:35:22Z", "type": "commit"}, {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77", "url": "https://github.com/hyperledger/besu/commit/5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77", "message": "typo\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-24T01:40:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQyOA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414298428", "bodyText": "Can you add an error message as well", "author": "jframe", "createdAt": "2020-04-24T05:13:44Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "originalCommit": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTkyOA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414309928", "bodyText": "Updated with error message.", "author": "usmansaleem", "createdAt": "2020-04-24T05:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "73df12313e878cc6bbc39fa4ba98d31deb605dd6", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\nindex 93a99dc05..834a9829c 100644\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n+++ b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n\n@@ -41,7 +41,8 @@ public class KeyPairSecurityModule implements SecurityModule {\n       this.publicKey =\n           new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n     } catch (final Exception e) {\n-      throw new SecurityModuleException(e);\n+      throw new SecurityModuleException(\n+          \"Unexpected error while converting ECPoint: \" + e.getMessage(), e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQ1Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414298456", "bodyText": "Can you add an error message as well", "author": "jframe", "createdAt": "2020-04-24T05:13:48Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public PublicKey getPublicKey() throws SecurityModuleException {\n+    return publicKey;\n+  }\n+\n+  @Override\n+  public Bytes32 calculateECDHKeyAgreement(final PublicKey partyKey)\n+      throws SecurityModuleException {\n+    try {\n+      final Bytes encodedECPoint = ECPointUtil.getEncodedBytes(partyKey.getW());\n+      final SECP256K1.PublicKey secp256KPartyKey = SECP256K1.PublicKey.create(encodedECPoint);\n+      return SECP256K1.calculateECDHKeyAgreement(keyPair.getPrivateKey(), secp256KPartyKey);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "originalCommit": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTk4OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414309988", "bodyText": "Updated with error message.", "author": "usmansaleem", "createdAt": "2020-04-24T05:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "73df12313e878cc6bbc39fa4ba98d31deb605dd6", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\nindex 93a99dc05..834a9829c 100644\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n+++ b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n\n@@ -41,7 +41,8 @@ public class KeyPairSecurityModule implements SecurityModule {\n       this.publicKey =\n           new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n     } catch (final Exception e) {\n-      throw new SecurityModuleException(e);\n+      throw new SecurityModuleException(\n+          \"Unexpected error while converting ECPoint: \" + e.getMessage(), e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414300557", "bodyText": "I think this function can be replaced with BigIntegers.asUnsignedByteArray(32, value);", "author": "jframe", "createdAt": "2020-04-24T05:20:03Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+import java.util.Arrays;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+\n+/** Helper class for ECPoint */\n+public class ECPointUtil {\n+  public static ECPoint fromBouncyCastleECPoint(\n+      final org.bouncycastle.math.ec.ECPoint bouncyCastleECPoint) {\n+    final ECFieldElement xCoord = bouncyCastleECPoint.getAffineXCoord();\n+    final ECFieldElement yCoord = bouncyCastleECPoint.getAffineYCoord();\n+\n+    final Bytes32 xEncoded = Bytes32.wrap(xCoord.getEncoded());\n+    final Bytes32 yEncoded = Bytes32.wrap(yCoord.getEncoded());\n+\n+    final BigInteger x = xEncoded.toUnsignedBigInteger();\n+    final BigInteger y = yEncoded.toUnsignedBigInteger();\n+\n+    return new ECPoint(x, y);\n+  }\n+\n+  public static Bytes getEncodedBytes(final ECPoint ecPoint) {\n+    final Bytes xBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineX()));\n+    final Bytes yBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineY()));\n+\n+    return Bytes.concatenate(xBytes, yBytes);\n+  }\n+\n+  /**\n+   * Adjust unsigned big integer from ECPoint. If it is less than 32, pad left 0. If it is 33, strip\n+   * 0.\n+   *\n+   * @param value BigInteger whose byte[] to adjust\n+   * @return byte[] 32 bit array after adjusting sign bit\n+   * @throws IllegalArgumentException if invalid array size encountered\n+   */\n+  @VisibleForTesting\n+  static byte[] toUnsignedByteArray(final BigInteger value) {\n+    final byte[] bytes = value.toByteArray();", "originalCommit": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTM2OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414311368", "bodyText": "It does indeed.", "author": "usmansaleem", "createdAt": "2020-04-24T05:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMzM5NQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414323395", "bodyText": "Thanks, i wasn't sure earlier that BC's asUnsignedByteArray would work as expected, but it does work as expected, updated the test cases to cover multiple scenarios and removed the method from ECPointUtil.", "author": "usmansaleem", "createdAt": "2020-04-24T06:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5f83f019edab813e35c1e52153a746dc27689713", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java b/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\nindex 75603c9ac..00c571da0 100644\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\n+++ b/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\n\n@@ -16,12 +16,11 @@ package org.hyperledger.besu.crypto;\n \n import java.math.BigInteger;\n import java.security.spec.ECPoint;\n-import java.util.Arrays;\n \n-import com.google.common.annotations.VisibleForTesting;\n import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.bytes.Bytes32;\n import org.bouncycastle.math.ec.ECFieldElement;\n+import org.bouncycastle.util.BigIntegers;\n \n /** Helper class for ECPoint */\n public class ECPointUtil {\n"}}, {"oid": "73df12313e878cc6bbc39fa4ba98d31deb605dd6", "url": "https://github.com/hyperledger/besu/commit/73df12313e878cc6bbc39fa4ba98d31deb605dd6", "message": "review suggestion - exception message in keypairsecuritymodule\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-24T05:45:54Z", "type": "commit"}, {"oid": "5f83f019edab813e35c1e52153a746dc27689713", "url": "https://github.com/hyperledger/besu/commit/5f83f019edab813e35c1e52153a746dc27689713", "message": "ECPointUtil cleanup - Use BC BigIntegers.asUnsignedByteArray\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-24T06:18:45Z", "type": "commit"}, {"oid": "3f6297314a699441b19a65a2aece1310d73808a7", "url": "https://github.com/hyperledger/besu/commit/3f6297314a699441b19a65a2aece1310d73808a7", "message": "Merge upstream master\n\nConflicts:\n\tplugin-api/build.gradle\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-25T03:19:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415203498", "bodyText": "Maybe this is just a different (rather than better) way of tackling t his, but in my head there is no default security module (Rather than the default containing data), thus:\n\n--security-module is an optional field, if not set, then we fallback to the KeyPair\nif the --security-module doesn't reference an available securitymodule, we exit out with a failure.", "author": "rain-on", "createdAt": "2020-04-26T03:32:41Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "originalCommit": "3f6297314a699441b19a65a2aece1310d73808a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTEzNA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415229134", "bodyText": "Having said that - should the user be allowed to write \"--security-module=localfile\"? (I Honestly don't know)", "author": "rain-on", "createdAt": "2020-04-26T06:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMDE2MQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415430161", "bodyText": "Its optional field. If user specifies it on cli (or config file) with value other than localhost, we attempt to load SecurityModule via plugin. If plugin loading fails, we exit.", "author": "usmansaleem", "createdAt": "2020-04-26T23:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMDIwMg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415430202", "bodyText": "It allows us to keep the usage of SecurityModule constant.", "author": "usmansaleem", "createdAt": "2020-04-26T23:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMTkxMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415521911", "bodyText": "Introduced registering KeyValueSecurityModule with SecurityModuleService.", "author": "usmansaleem", "createdAt": "2020-04-27T05:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "75c5803247ec741584839e432363a6c0d6b85fb3", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 3ca722732..7fbd1ef0a 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1990,16 +2009,11 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n   }\n \n   private SecurityModule securityModuleProvider() {\n-    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n-      // directly load KeyPairSecurityModule\n-      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n-    }\n-\n     return securityModuleService\n         .getByName(securityModuleProviderName)\n         .orElseThrow(\n             () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n-        .create(pluginCommonConfiguration);\n+        .create();\n   }\n \n   private File nodePrivateKeyFile() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTkzMw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415229933", "bodyText": "comment is superfluous", "author": "rain-on", "createdAt": "2020-04-26T06:25:24Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+import org.bouncycastle.util.BigIntegers;\n+\n+/** Helper class for ECPoint */", "originalCommit": "3f6297314a699441b19a65a2aece1310d73808a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMTY2Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415521666", "bodyText": "javadoc removed.", "author": "usmansaleem", "createdAt": "2020-04-27T05:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6a36b4e2e9468904f52beb0b6eba05d77ca46539", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java b/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\nindex 00c571da0..65467c5b9 100644\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\n+++ b/crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java\n\n@@ -22,7 +22,6 @@ import org.apache.tuweni.bytes.Bytes32;\n import org.bouncycastle.math.ec.ECFieldElement;\n import org.bouncycastle.util.BigIntegers;\n \n-/** Helper class for ECPoint */\n public class ECPointUtil {\n   public static ECPoint fromBouncyCastleECPoint(\n       final org.bouncycastle.math.ec.ECPoint bouncyCastleECPoint) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDI0Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230246", "bodyText": "nit: given there's crypto operations happening here, do we want to move this to a static creator? which passes in a privkey and a PublicKey?", "author": "rain-on", "createdAt": "2020-04-26T06:27:18Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {", "originalCommit": "3f6297314a699441b19a65a2aece1310d73808a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTYwNQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415431605", "bodyText": "we only require SECP256K1.KeyPair. The PublicKey is the interface (with ECPoint) that is meant to be converted from SECP256K1's PublicKey. The other option would be to initialize public key on the first access via getPublicKey. I don't feel the need of creator factory method.", "author": "usmansaleem", "createdAt": "2020-04-26T23:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6a36b4e2e9468904f52beb0b6eba05d77ca46539", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\nindex 834a9829c..312c787cd 100644\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n+++ b/crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java\n\n@@ -37,9 +37,12 @@ public class KeyPairSecurityModule implements SecurityModule {\n \n   public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n     this.keyPair = keyPair;\n+    this.publicKey = convertPublicKey(keyPair.getPublicKey());\n+  }\n+\n+  private PublicKey convertPublicKey(final SECP256K1.PublicKey publicKey) {\n     try {\n-      this.publicKey =\n-          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+      return new PublicKeyImpl(fromBouncyCastleECPoint(publicKey.asEcPoint()));\n     } catch (final Exception e) {\n       throw new SecurityModuleException(\n           \"Unexpected error while converting ECPoint: \" + e.getMessage(), e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDYyNQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230625", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param name The name to identify the Security Provider Supplier Function\n          \n          \n            \n               * @param name The name to identify the Security Provider Supplier", "author": "rain-on", "createdAt": "2020-04-26T06:29:23Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function", "originalCommit": "3f6297314a699441b19a65a2aece1310d73808a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMDQ4OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415520489", "bodyText": "javadoc updated.", "author": "usmansaleem", "createdAt": "2020-04-27T05:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a36b4e2e9468904f52beb0b6eba05d77ca46539", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex 583732e3a..4a348cc9e 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -29,7 +29,7 @@ public interface SecurityModuleService {\n   /**\n    * Registers a provider of security modules.\n    *\n-   * @param name The name to identify the Security Provider Supplier Function\n+   * @param name The name to identify the Security Provider Supplier\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n    */\n   void registerSecurityModule(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDc4OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230789", "bodyText": "no need for final on interfaces", "author": "rain-on", "createdAt": "2020-04-26T06:30:04Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function\n+   * @param securityModuleProvider Register reference of SecurityModuleProvider.\n+   */\n+  void registerSecurityModule(\n+      final String name, final SecurityModuleProvider securityModuleProvider);", "originalCommit": "3f6297314a699441b19a65a2aece1310d73808a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMDQxMA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415520410", "bodyText": "final removed.", "author": "usmansaleem", "createdAt": "2020-04-27T05:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a36b4e2e9468904f52beb0b6eba05d77ca46539", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex 583732e3a..4a348cc9e 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -29,7 +29,7 @@ public interface SecurityModuleService {\n   /**\n    * Registers a provider of security modules.\n    *\n-   * @param name The name to identify the Security Provider Supplier Function\n+   * @param name The name to identify the Security Provider Supplier\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n    */\n   void registerSecurityModule(\n"}}, {"oid": "6a36b4e2e9468904f52beb0b6eba05d77ca46539", "url": "https://github.com/hyperledger/besu/commit/6a36b4e2e9468904f52beb0b6eba05d77ca46539", "message": "review suggestions\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T00:03:20Z", "type": "commit"}, {"oid": "75c5803247ec741584839e432363a6c0d6b85fb3", "url": "https://github.com/hyperledger/besu/commit/75c5803247ec741584839e432363a6c0d6b85fb3", "message": "review suggestion - Register default SecurityModuleProvider with SecurityModuleService\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T02:06:24Z", "type": "commit"}, {"oid": "b18f39b5dc2cde49dcbb560d2030a1720c9ffaee", "url": "https://github.com/hyperledger/besu/commit/b18f39b5dc2cde49dcbb560d2030a1720c9ffaee", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T02:18:55Z", "type": "commit"}, {"oid": "b5dba6df6af056a0947a046f64cbe296e0a99534", "url": "https://github.com/hyperledger/besu/commit/b5dba6df6af056a0947a046f64cbe296e0a99534", "message": "plugin api checksum\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T02:47:55Z", "type": "commit"}, {"oid": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7", "url": "https://github.com/hyperledger/besu/commit/6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7", "message": "Using Supplier<SecurityModule> instead of SecurityModuleSupplier\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T03:03:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415479083", "bodyText": "Could this just be --security-module?", "author": "jframe", "createdAt": "2020-04-27T03:07:46Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -815,6 +816,14 @@ void setBannedNodeIds(final List<String> values) {\n       arity = \"1\")\n   private String keyValueStorageName = DEFAULT_KEY_VALUE_STORAGE_NAME;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n+  @Option(\n+      names = {\"--security-module-provider\"},", "originalCommit": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTU5OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415519598", "bodyText": "renamed to --security-module", "author": "usmansaleem", "createdAt": "2020-04-27T05:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "519370c998e2687e40a41f27c1aad923bfc20e5a", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 3fd0a21da..3f03713aa 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -818,11 +818,11 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n \n   @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n   @Option(\n-      names = {\"--security-module-provider\"},\n-      paramLabel = \"<PROVIDER-NAME>\",\n-      description = \"Identity for the Security Module provider to be used.\",\n+      names = {\"--security-module\"},\n+      paramLabel = \"<NAME>\",\n+      description = \"Identity for the Security Module to be used.\",\n       arity = \"1\")\n-  private String securityModuleProviderName = DEFAULT_SECURITY_MODULE_PROVIDER;\n+  private String securityModuleName = DEFAULT_SECURITY_MODULE;\n \n   @Option(\n       names = {\"--auto-log-bloom-caching-enabled\"},\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTI1Mg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415479252", "bodyText": "Similarly here think we can drop provider from the description", "author": "jframe", "createdAt": "2020-04-27T03:08:14Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -815,6 +816,14 @@ void setBannedNodeIds(final List<String> values) {\n       arity = \"1\")\n   private String keyValueStorageName = DEFAULT_KEY_VALUE_STORAGE_NAME;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n+  @Option(\n+      names = {\"--security-module-provider\"},\n+      paramLabel = \"<PROVIDER-NAME>\",\n+      description = \"Identity for the Security Module provider to be used.\",", "originalCommit": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "519370c998e2687e40a41f27c1aad923bfc20e5a", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 3fd0a21da..3f03713aa 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -818,11 +818,11 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n \n   @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n   @Option(\n-      names = {\"--security-module-provider\"},\n-      paramLabel = \"<PROVIDER-NAME>\",\n-      description = \"Identity for the Security Module provider to be used.\",\n+      names = {\"--security-module\"},\n+      paramLabel = \"<NAME>\",\n+      description = \"Identity for the Security Module to be used.\",\n       arity = \"1\")\n-  private String securityModuleProviderName = DEFAULT_SECURITY_MODULE_PROVIDER;\n+  private String securityModuleName = DEFAULT_SECURITY_MODULE;\n \n   @Option(\n       names = {\"--auto-log-bloom-caching-enabled\"},\n"}}, {"oid": "3405b1721c5ab5fa29328e8de4a576d490daa0c5", "url": "https://github.com/hyperledger/besu/commit/3405b1721c5ab5fa29328e8de4a576d490daa0c5", "message": "plugin api checksum\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T03:16:07Z", "type": "commit"}, {"oid": "519370c998e2687e40a41f27c1aad923bfc20e5a", "url": "https://github.com/hyperledger/besu/commit/519370c998e2687e40a41f27c1aad923bfc20e5a", "message": "--security-module cli option instead of --security-module-provider\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T05:24:41Z", "type": "commit"}, {"oid": "a47c1133a61029b41b4a0dc2746b4cba0ea70b90", "url": "https://github.com/hyperledger/besu/commit/a47c1133a61029b41b4a0dc2746b4cba0ea70b90", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-27T20:32:54Z", "type": "commit"}, {"oid": "8dff54047da43cf5b5db70ca951c0508455d827d", "url": "https://github.com/hyperledger/besu/commit/8dff54047da43cf5b5db70ca951c0508455d827d", "message": "Node Key Security Provider BouncyCastle backed internal plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-14T09:10:58Z", "type": "commit"}, {"oid": "33482d547c86d4c6acf8d1c2084df868171247f3", "url": "https://github.com/hyperledger/besu/commit/33482d547c86d4c6acf8d1c2084df868171247f3", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-14T23:29:44Z", "type": "commit"}, {"oid": "bf62f2c1b887697aa538ef900893b325004efbcd", "url": "https://github.com/hyperledger/besu/commit/bf62f2c1b887697aa538ef900893b325004efbcd", "message": "wip\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T00:47:21Z", "type": "commit"}, {"oid": "76f01f1b6684ce9c7cdb849ef96b541c844e3170", "url": "https://github.com/hyperledger/besu/commit/76f01f1b6684ce9c7cdb849ef96b541c844e3170", "message": "wip - renaming plugin name\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T00:58:31Z", "type": "commit"}, {"oid": "3db6b44b9069ee6283212e7f9ec43973b65cfb04", "url": "https://github.com/hyperledger/besu/commit/3db6b44b9069ee6283212e7f9ec43973b65cfb04", "message": "refactoring package name\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T01:04:03Z", "type": "commit"}, {"oid": "72b4dc9a424932151f88ca5d98eaaa36e285c90b", "url": "https://github.com/hyperledger/besu/commit/72b4dc9a424932151f88ca5d98eaaa36e285c90b", "message": "wip\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T01:05:36Z", "type": "commit"}, {"oid": "3a30a73654d92e3bfb70357bca469e23dfd08fc7", "url": "https://github.com/hyperledger/besu/commit/3a30a73654d92e3bfb70357bca469e23dfd08fc7", "message": "wip - refactor package name\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T01:08:17Z", "type": "commit"}, {"oid": "d5392e7e9041047cb9d58f7a5c5dd9045a12efd2", "url": "https://github.com/hyperledger/besu/commit/d5392e7e9041047cb9d58f7a5c5dd9045a12efd2", "message": "wip\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T03:36:00Z", "type": "commit"}, {"oid": "160d9df87514d50420237c5d18b73a645a6d6897", "url": "https://github.com/hyperledger/besu/commit/160d9df87514d50420237c5d18b73a645a6d6897", "message": "Merge upstream/master\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T03:36:32Z", "type": "commit"}, {"oid": "b934f3a87be54ed9296ebe00aaedd7e96cea881a", "url": "https://github.com/hyperledger/besu/commit/b934f3a87be54ed9296ebe00aaedd7e96cea881a", "message": "wip - clean compile\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T04:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4Mjg5OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408582898", "bodyText": "TODO: Remove commented code", "author": "usmansaleem", "createdAt": "2020-04-15T05:05:19Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1937,6 +1965,7 @@ private Path pluginsDir() {\n     }\n   }\n \n+  /*", "originalCommit": "b934f3a87be54ed9296ebe00aaedd7e96cea881a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex c53a30c14..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1965,23 +1984,28 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n     }\n   }\n \n-  /*\n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n-  }*/\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n \n-  private SecurityModule nodeKeySecurityModuleProvider(final String name) {\n-    return nodeKeySecurityModuleService\n-        .getByName(name)\n-        .orElseThrow(() -> new RuntimeException(\"Node Key Security Module not found: \" + name))\n-        .apply(pluginCommonConfiguration);\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);\n+    return nodePrivateKeyFile.orElseGet(() -> KeyPairUtil.getDefaultKeyFile(dataDir()));\n   }\n \n   private File privacyPublicKeyFile() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzA2MQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408583061", "bodyText": "TODO: Remove comments", "author": "usmansaleem", "createdAt": "2020-04-15T05:05:52Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +62,24 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n \n-  public PublicKeySubCommand(final PrintStream out, final KeyLoader keyLoader) {\n+  public PublicKeySubCommand(final PrintStream out) {\n     this.out = out;\n-    this.keyLoader = keyLoader;\n   }\n \n   @Override\n   public void run() {\n     spec.commandLine().usage(out);\n   }\n \n-  private Optional<KeyPair> getKeyPair() {\n-    try {\n-      return Optional.of(keyLoader.load(parentCommand.nodePrivateKeyFile()));\n-    } catch (IOException e) {\n-      LOG.error(\"An error occurred while trying to read the private key\", e);\n-      return Optional.empty();\n-    }\n+  private Optional<NodeKey> getNodeKey() {\n+    return parentCommand.getNodeKey();\n+    //    try {", "originalCommit": "b934f3a87be54ed9296ebe00aaedd7e96cea881a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\nindex 2040d804a..613303835 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n\n@@ -62,9 +63,16 @@ public class PublicKeySubCommand implements Runnable {\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n+  private final Runnable besuConfigurationService;\n+  private final Supplier<NodeKey> nodeKey;\n \n-  public PublicKeySubCommand(final PrintStream out) {\n+  public PublicKeySubCommand(\n+      final PrintStream out,\n+      final Runnable besuConfigurationService,\n+      final Supplier<NodeKey> nodeKey) {\n     this.out = out;\n+    this.besuConfigurationService = besuConfigurationService;\n+    this.nodeKey = nodeKey;\n   }\n \n   @Override\n"}}, {"oid": "2505c3d3a48811333ef6eaef63f1aa9f2e8a06fb", "url": "https://github.com/hyperledger/besu/commit/2505c3d3a48811333ef6eaef63f1aa9f2e8a06fb", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T05:18:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NjcxNA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408586714", "bodyText": "TODO: Remove comments", "author": "usmansaleem", "createdAt": "2020-04-15T05:19:49Z", "path": "besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java", "diffHunk": "@@ -126,10 +123,11 @@\n     return this;\n   }\n \n+  /*", "originalCommit": "2505c3d3a48811333ef6eaef63f1aa9f2e8a06fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java b/besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java\nindex a8663c5fd..0a9aea25b 100644\n--- a/besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java\n+++ b/besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java\n\n@@ -123,12 +126,6 @@ public abstract class BesuControllerBuilder<C> {\n     return this;\n   }\n \n-  /*\n-  public BesuControllerBuilder<C> nodePrivateKeyFile(final File nodePrivateKeyFile) {\n-    this.nodeKey = new NodeKey(new OldBouncyCastleSecurityModule(loadKeyPair(nodePrivateKeyFile)));\n-    return this;\n-  }*/\n-\n   public BesuControllerBuilder<C> nodeKey(final NodeKey nodeKey) {\n     this.nodeKey = nodeKey;\n     return this;\n"}}, {"oid": "afd112473b6323bc43f242b5b793390f6af9a878", "url": "https://github.com/hyperledger/besu/commit/afd112473b6323bc43f242b5b793390f6af9a878", "message": "test compilation fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T05:28:19Z", "type": "commit"}, {"oid": "87e063f0e3c52e29bad1e6023bac5d634c837476", "url": "https://github.com/hyperledger/besu/commit/87e063f0e3c52e29bad1e6023bac5d634c837476", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T06:47:23Z", "type": "commit"}, {"oid": "977b3f03f7d4b022695d7fbd809b00985fab5435", "url": "https://github.com/hyperledger/besu/commit/977b3f03f7d4b022695d7fbd809b00985fab5435", "message": "license header\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T06:56:06Z", "type": "commit"}, {"oid": "5c3e76a31903e9073c188b342f5d68efc0c57d60", "url": "https://github.com/hyperledger/besu/commit/5c3e76a31903e9073c188b342f5d68efc0c57d60", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T06:59:42Z", "type": "commit"}, {"oid": "8a69d3a9194fcf6b5fe42ac4aa02557abc9aeae1", "url": "https://github.com/hyperledger/besu/commit/8a69d3a9194fcf6b5fe42ac4aa02557abc9aeae1", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T07:07:21Z", "type": "commit"}, {"oid": "4d14a37714c5901ee24b8fe7260ab9c848af13b2", "url": "https://github.com/hyperledger/besu/commit/4d14a37714c5901ee24b8fe7260ab9c848af13b2", "message": "mock fix in CommandTestAbstract\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T07:38:07Z", "type": "commit"}, {"oid": "e044e496437536e51519be060e7a0545976a5b1c", "url": "https://github.com/hyperledger/besu/commit/e044e496437536e51519be060e7a0545976a5b1c", "message": "supplier memoize\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T07:42:13Z", "type": "commit"}, {"oid": "4b2209a0bd4efb8c5e16e60cf300941d3aef07fd", "url": "https://github.com/hyperledger/besu/commit/4b2209a0bd4efb8c5e16e60cf300941d3aef07fd", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T09:46:10Z", "type": "commit"}, {"oid": "94f29961423cb322832209b87b3ef30e77eca58c", "url": "https://github.com/hyperledger/besu/commit/94f29961423cb322832209b87b3ef30e77eca58c", "message": "supplier memoize moved into BouncyCastleSecurityModule\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T10:00:34Z", "type": "commit"}, {"oid": "295caefb156c283d1cef3aad2aca0e6bfcdebf16", "url": "https://github.com/hyperledger/besu/commit/295caefb156c283d1cef3aad2aca0e6bfcdebf16", "message": "Fixing PublicKeySubCommand and its unit tests\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T11:14:33Z", "type": "commit"}, {"oid": "7bd3790899cdb127ba6ac97d0883583bfba9e7f4", "url": "https://github.com/hyperledger/besu/commit/7bd3790899cdb127ba6ac97d0883583bfba9e7f4", "message": "updating plugin cli option and removing unit test cases\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T11:48:06Z", "type": "commit"}, {"oid": "4f08b33f5cceeff34d96efe8376b717cb61ffb9f", "url": "https://github.com/hyperledger/besu/commit/4f08b33f5cceeff34d96efe8376b717cb61ffb9f", "message": "Register SecurityModuleService in dsl ThreadBesuRunner\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T12:08:03Z", "type": "commit"}, {"oid": "3b18e3ee9ca6e40c46359542b0a81187b1dac043", "url": "https://github.com/hyperledger/besu/commit/3b18e3ee9ca6e40c46359542b0a81187b1dac043", "message": "refactoring threadbesunoderunner\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T12:21:46Z", "type": "commit"}, {"oid": "a2187a34a53ab73b197dab7548bd17b3fe276735", "url": "https://github.com/hyperledger/besu/commit/a2187a34a53ab73b197dab7548bd17b3fe276735", "message": "variable names cleanup\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T12:25:31Z", "type": "commit"}, {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013", "url": "https://github.com/hyperledger/besu/commit/c13368907c14852c6a60d0d2f5633280c32a2013", "message": "cleanup\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T12:39:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDI4Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409190283", "bodyText": "is there a precedent for the case of this identifier? eg bouncyCastle, BouncyCastle, BoUnCyCaStLe? (or is this how we do it?)", "author": "rain-on", "createdAt": "2020-04-15T23:22:05Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "diffHunk": "@@ -133,13 +144,20 @@ public void startNode(final BesuNode node) {\n             .withMetricsSystem(metricsSystem)\n             .build();\n \n+    final SecurityModule securityModule =\n+        securityModuleService\n+            .getByName(\"bouncycastle\")", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODE1OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198159", "bodyText": "\"rocksdb\" is all lowercase, thats why I preferred lowercase bouncycastle.", "author": "usmansaleem", "createdAt": "2020-04-15T23:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java\nindex ab70b6f11..49e108690 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java\n\n@@ -144,20 +143,13 @@ public class ThreadBesuNodeRunner implements BesuNodeRunner {\n             .withMetricsSystem(metricsSystem)\n             .build();\n \n-    final SecurityModule securityModule =\n-        securityModuleService\n-            .getByName(\"bouncycastle\")\n-            .orElseThrow(\n-                () -> new IllegalStateException(\"BouncyCastle Security Module not available\"))\n-            .apply(commonPluginConfiguration);\n-\n     final BesuController<?> besuController =\n         builder\n             .synchronizerConfiguration(new SynchronizerConfiguration.Builder().build())\n             .dataDirectory(node.homeDirectory())\n             .miningParameters(node.getMiningParameters())\n             .privacyParameters(node.getPrivacyParameters())\n-            .nodeKey(new NodeKey(securityModule))\n+            .nodeKey(new NodeKey(new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(dataDir))))\n             .metricsSystem(metricsSystem)\n             .transactionPoolConfiguration(TransactionPoolConfiguration.builder().build())\n             .ethProtocolConfiguration(EthProtocolConfiguration.defaultConfig())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTAzMg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191032", "bodyText": "don't  think this should expose the nodeKey - that should only be available from the BesuController.", "author": "rain-on", "createdAt": "2020-04-15T23:24:26Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {\n+    if (nodeKey == null) {\n+      nodeKey = new NodeKey(nodeKeySecurityModuleProvider(nodeKeySecurityModuleProviderName));\n+    }\n+  }\n+\n+  public Optional<NodeKey> getNodeKey() {", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDMzMA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290330", "bodyText": "fixed.", "author": "usmansaleem", "createdAt": "2020-04-16T05:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex d7ea550fc..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -960,17 +982,6 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n     }\n   }\n \n-  /* NOTE: Must be called after addConfigurationService */\n-  private void addNodeKey() {\n-    if (nodeKey == null) {\n-      nodeKey = new NodeKey(nodeKeySecurityModuleProvider(nodeKeySecurityModuleProviderName));\n-    }\n-  }\n-\n-  public Optional<NodeKey> getNodeKey() {\n-    return Optional.ofNullable(nodeKey);\n-  }\n-\n   @VisibleForTesting\n   void setBesuConfiguration(final BesuConfiguration pluginCommonConfiguration) {\n     this.pluginCommonConfiguration = pluginCommonConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTI1Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191256", "bodyText": "I'd put this down the some of the storageService commands - and wondering if its more of a \"construct\" rather than an \"add\"", "author": "rain-on", "createdAt": "2020-04-15T23:25:06Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDM3OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290379", "bodyText": "removed.", "author": "usmansaleem", "createdAt": "2020-04-16T05:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex d7ea550fc..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -960,17 +982,6 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n     }\n   }\n \n-  /* NOTE: Must be called after addConfigurationService */\n-  private void addNodeKey() {\n-    if (nodeKey == null) {\n-      nodeKey = new NodeKey(nodeKeySecurityModuleProvider(nodeKeySecurityModuleProviderName));\n-    }\n-  }\n-\n-  public Optional<NodeKey> getNodeKey() {\n-    return Optional.ofNullable(nodeKey);\n-  }\n-\n   @VisibleForTesting\n   void setBesuConfiguration(final BesuConfiguration pluginCommonConfiguration) {\n     this.pluginCommonConfiguration = pluginCommonConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTcxNw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191717", "bodyText": "If possible (not sure about subcommands) - it'd be nice if this class didn't own the NodeKey - only create it and pass it into the BesuControllerBuilder - it makes for nicer lifetime management (i.e. we don't have a 1/2 constructed BesuCommand class, which sometimes has a NodeKey, but sometimes not).", "author": "rain-on", "createdAt": "2020-04-15T23:26:43Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -858,6 +865,7 @@ void setBannedNodeIds(final List<String> values) {\n   private BesuController<?> besuController;\n   private StandaloneCommand standaloneCommands;\n   private BesuConfiguration pluginCommonConfiguration;\n+  private NodeKey nodeKey;", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODQ3OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198479", "bodyText": "the main requirement was subcommand, but since subcommand can access besuController, its a good idea to get it from there.", "author": "usmansaleem", "createdAt": "2020-04-15T23:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex d7ea550fc..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -865,7 +887,6 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n   private BesuController<?> besuController;\n   private StandaloneCommand standaloneCommands;\n   private BesuConfiguration pluginCommonConfiguration;\n-  private NodeKey nodeKey;\n   private final Supplier<ObservableMetricsSystem> metricsSystem =\n       Suppliers.memoize(() -> PrometheusMetricsSystem.init(metricsConfiguration()));\n   private Vertx vertx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTk2Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191966", "bodyText": "can we get this from the BesuController rather than the BesuCommand?", "author": "rain-on", "createdAt": "2020-04-15T23:27:32Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,22 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n \n-  public PublicKeySubCommand(final PrintStream out, final KeyLoader keyLoader) {\n+  public PublicKeySubCommand(final PrintStream out) {\n     this.out = out;\n-    this.keyLoader = keyLoader;\n   }\n \n   @Override\n   public void run() {\n     spec.commandLine().usage(out);\n   }\n \n-  private Optional<KeyPair> getKeyPair() {\n-    try {\n-      return Optional.of(keyLoader.load(parentCommand.nodePrivateKeyFile()));\n-    } catch (IOException e) {\n-      LOG.error(\"An error occurred while trying to read the private key\", e);\n-      return Optional.empty();\n-    }\n+  private BesuController<?> createBesuController() {\n+    return parentCommand.buildController();\n+  }\n+\n+  private Optional<NodeKey> getNodeKey() {\n+    return parentCommand.getNodeKey();", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDQ2NQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290465", "bodyText": "done.", "author": "usmansaleem", "createdAt": "2020-04-16T05:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\nindex 34667b01e..613303835 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n\n@@ -63,9 +63,16 @@ public class PublicKeySubCommand implements Runnable {\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n+  private final Runnable besuConfigurationService;\n+  private final Supplier<NodeKey> nodeKey;\n \n-  public PublicKeySubCommand(final PrintStream out) {\n+  public PublicKeySubCommand(\n+      final PrintStream out,\n+      final Runnable besuConfigurationService,\n+      final Supplier<NodeKey> nodeKey) {\n     this.out = out;\n+    this.besuConfigurationService = besuConfigurationService;\n+    this.nodeKey = nodeKey;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzEyMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409193121", "bodyText": "Personally, I'd prefer to see a custom class rather than a Function, but that's also old fashioned me.", "author": "rain-on", "createdAt": "2020-04-15T23:31:10Z", "path": "besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.services;\n+\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class SecurityModuleServiceImpl implements SecurityModuleService {\n+  private final Map<String, Function<BesuConfiguration, SecurityModule>> securityModuleProviders =", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NTA2MA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409245060", "bodyText": "Implemented a named functional interface extending Function.", "author": "usmansaleem", "createdAt": "2020-04-16T02:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java b/besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java\nindex 38caaa3bd..cd1521752 100644\n--- a/besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java\n+++ b/besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java\n\n@@ -14,28 +14,25 @@\n  */\n package org.hyperledger.besu.services;\n \n-import org.hyperledger.besu.plugin.services.BesuConfiguration;\n import org.hyperledger.besu.plugin.services.SecurityModuleService;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n \n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n \n public class SecurityModuleServiceImpl implements SecurityModuleService {\n-  private final Map<String, Function<BesuConfiguration, SecurityModule>> securityModuleProviders =\n+  private final Map<String, SecurityModuleProvider> securityModuleProviders =\n       new ConcurrentHashMap<>();\n \n   @Override\n   public void registerSecurityModule(\n-      final String name,\n-      final Function<BesuConfiguration, SecurityModule> securityProviderSupplier) {\n-    securityModuleProviders.put(name, securityProviderSupplier);\n+      final String name, final SecurityModuleProvider securityModuleProvider) {\n+    securityModuleProviders.put(name, securityModuleProvider);\n   }\n \n   @Override\n-  public Optional<Function<BesuConfiguration, SecurityModule>> getByName(final String name) {\n+  public Optional<SecurityModuleProvider> getByName(final String name) {\n     return Optional.ofNullable(securityModuleProviders.get(name));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409193456", "bodyText": "Removing these tests is correct - but we probably need to put them somewhere else - for example, there's a test which states that --node-private-key-file cannot be set if we are dockerised... not sure how we're going to do that with the plugin approach :/", "author": "rain-on", "createdAt": "2020-04-15T23:32:22Z", "path": "besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java", "diffHunk": "@@ -807,50 +807,6 @@ public void configOptionDisabledUnderDocker() {\n     assertThat(commandOutput.toString()).isEmpty();\n   }\n ", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODgzMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198831", "bodyText": "They will be moving to plugin unit tests.", "author": "usmansaleem", "createdAt": "2020-04-15T23:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzMTMyMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409431321", "bodyText": "created unit tests in plugin to cover these scenarios.", "author": "usmansaleem", "createdAt": "2020-04-16T09:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java b/besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java\nindex 318936ed2..6318e655e 100644\n--- a/besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java\n+++ b/besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java\n\n@@ -807,6 +812,35 @@ public class BesuCommandTest extends CommandTestAbstract {\n     assertThat(commandOutput.toString()).isEmpty();\n   }\n \n+  @Test\n+  public void nodekeyOptionMustBeUsed() throws Exception {\n+    final File file = new File(\"./specific/enclavePrivateKey\");\n+\n+    parseCommand(\"--node-private-key-file\", file.getPath());\n+\n+    verify(mockControllerBuilder).dataDirectory(isNotNull());\n+    verify(mockControllerBuilder).nodeKey(isNotNull());\n+    verify(mockControllerBuilder).build();\n+\n+    assertThat(commandOutput.toString()).isEmpty();\n+    assertThat(commandErrorOutput.toString()).isEmpty();\n+  }\n+\n+  @Test\n+  public void nodekeyOptionDisabledUnderDocker() {\n+    System.setProperty(\"besu.docker\", \"true\");\n+\n+    assumeFalse(isFullInstantiation());\n+\n+    final File file = new File(\"./specific/enclavePrivateKey\");\n+    file.deleteOnExit();\n+\n+    parseCommand(\"--node-private-key-file\", file.getPath());\n+    assertThat(commandErrorOutput.toString())\n+        .startsWith(\"Unknown options: '--node-private-key-file', './specific/enclavePrivateKey'\");\n+    assertThat(commandOutput.toString()).isEmpty();\n+  }\n+\n   @Test\n   public void dataDirOptionMustBeUsed() throws Exception {\n     assumeTrue(isFullInstantiation());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NDkzMg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409194932", "bodyText": "can't you do this check on the NodeKey, rather than the KeyPair? I.e. these tests shouldn't need to know about keypair", "author": "rain-on", "createdAt": "2020-04-15T23:36:59Z", "path": "besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java", "diffHunk": "@@ -113,9 +113,9 @@ public void callingPublicKeyExportSubCommandHelpMustDisplayUsage() {\n \n   @Test\n   public void callingPublicKeyExportSubCommandWithoutPathMustWriteKeyToStandardOutput() {\n-    final KeyPair keyPair = KeyPair.generate();\n+    final KeyPair keyPair = getKeyPair();\n \n-    parseCommand(f -> keyPair, PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n+    parseCommand(PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n \n     final String expectedOutputStart = keyPair.getPublicKey().toString();", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0MTMwNQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409241305", "bodyText": "yes, now exposing NodeKey from AbstractCommandTest instead of KeyPair.", "author": "usmansaleem", "createdAt": "2020-04-16T02:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NDkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java b/besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java\nindex 3d761402d..7bc2ea5e7 100644\n--- a/besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java\n+++ b/besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java\n\n@@ -113,11 +113,11 @@ public class PublicKeySubCommandTest extends CommandTestAbstract {\n \n   @Test\n   public void callingPublicKeyExportSubCommandWithoutPathMustWriteKeyToStandardOutput() {\n-    final KeyPair keyPair = getKeyPair();\n+    final NodeKey nodeKey = getNodeKey();\n \n     parseCommand(PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n \n-    final String expectedOutputStart = keyPair.getPublicKey().toString();\n+    final String expectedOutputStart = nodeKey.getPublicKey().toString();\n     assertThat(commandOutput.toString()).startsWith(expectedOutputStart);\n     assertThat(commandErrorOutput.toString()).isEmpty();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409195210", "bodyText": "why the change to a Supplier? This feels like a change which shouldn't be part of this PR.", "author": "rain-on", "createdAt": "2020-04-15T23:37:51Z", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "diffHunk": "@@ -15,32 +15,42 @@\n package org.hyperledger.besu.crypto;\n \n import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n+import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.tuweni.bytes.Bytes32;\n \n+/**\n+ * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n+ * uses BouncyCastle.\n+ */\n public class BouncyCastleSecurityModule implements SecurityModule {\n \n-  private final KeyPair nodeKeys;\n+  private final Supplier<KeyPair> keyPairSupplier;", "originalCommit": "c13368907c14852c6a60d0d2f5633280c32a2013", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTA1Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409201056", "bodyText": "Its because of plugin lifecycle. BouncyCastleCliOptions.getPrivateKeyFile(); is not populated during the register command. (as we register PicoCli service in register method as well). Hence we need to provide a method reference which allows the actual cal to be deferred while all cli options are initialized.", "author": "usmansaleem", "createdAt": "2020-04-15T23:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTQzNA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409201434", "bodyText": "Other plugins are also following similar approach where they want to utilize cli options.", "author": "usmansaleem", "createdAt": "2020-04-15T23:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0MTEyMw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409241123", "bodyText": "Reverted and fixed AbstractCommandTest which resulted in this change.", "author": "usmansaleem", "createdAt": "2020-04-16T02:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java b/crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java\ndeleted file mode 100644\nindex 9950de203..000000000\n--- a/crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.crypto;\n-\n-import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n-import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n-import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n-\n-import com.google.common.base.Supplier;\n-import com.google.common.base.Suppliers;\n-import org.apache.tuweni.bytes.Bytes32;\n-\n-/**\n- * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n- * uses BouncyCastle.\n- */\n-public class BouncyCastleSecurityModule implements SecurityModule {\n-\n-  private final Supplier<KeyPair> keyPairSupplier;\n-\n-  public BouncyCastleSecurityModule(final Supplier<KeyPair> keyPairSupplier) {\n-    // memoize allows to cache results after first get\n-    this.keyPairSupplier = Suppliers.memoize(keyPairSupplier);\n-  }\n-\n-  @Override\n-  public Signature sign(final Bytes32 dataHash) {\n-    final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPairSupplier.get());\n-    return new Signature(signature.getR(), signature.getS());\n-  }\n-\n-  @Override\n-  public PublicKey getPublicKey() {\n-    final SECP256K1.PublicKey pubKey = keyPairSupplier.get().getPublicKey();\n-    return new PublicKey(pubKey.getEncodedBytes());\n-  }\n-\n-  @Override\n-  public Bytes32 calculateECDHKeyAgreement(final PublicKey publicKey) {\n-    final SECP256K1.PublicKey pubKey = SECP256K1.PublicKey.create(publicKey.getEncoded());\n-    return SECP256K1.calculateECDHKeyAgreement(keyPairSupplier.get().getPrivateKey(), pubKey);\n-  }\n-}\n"}}, {"oid": "f7e796c25e401c18de1747a340a3074ab5ef6b21", "url": "https://github.com/hyperledger/besu/commit/f7e796c25e401c18de1747a340a3074ab5ef6b21", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-15T23:56:56Z", "type": "commit"}, {"oid": "ee607f83823c7533e4378ba35cdd1d8433045423", "url": "https://github.com/hyperledger/besu/commit/ee607f83823c7533e4378ba35cdd1d8433045423", "message": "remove memoize from bcsecuritymodule\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T00:53:14Z", "type": "commit"}, {"oid": "77b604dacfafb74dfedd1af15aac3f855ece42ed", "url": "https://github.com/hyperledger/besu/commit/77b604dacfafb74dfedd1af15aac3f855ece42ed", "message": "remove nodeKey instance variable from BesuCommand\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T00:53:43Z", "type": "commit"}, {"oid": "1196a41080b1068027184a140455380aa8173cfc", "url": "https://github.com/hyperledger/besu/commit/1196a41080b1068027184a140455380aa8173cfc", "message": "Fixing CommandTestAbstract mocks and PublicKeySubCommandTest\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T01:49:04Z", "type": "commit"}, {"oid": "cb931175b3220118406b5f6c8a5426b481e40913", "url": "https://github.com/hyperledger/besu/commit/cb931175b3220118406b5f6c8a5426b481e40913", "message": "cleaning up security module name constant\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T02:16:01Z", "type": "commit"}, {"oid": "aa6ead820ad3acf1e31418da466c8b6ad1ea64e7", "url": "https://github.com/hyperledger/besu/commit/aa6ead820ad3acf1e31418da466c8b6ad1ea64e7", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T02:17:13Z", "type": "commit"}, {"oid": "0774c4ebf9f1cc75b8d478678e4f88d686cd2183", "url": "https://github.com/hyperledger/besu/commit/0774c4ebf9f1cc75b8d478678e4f88d686cd2183", "message": "Using extended Functional interface\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T02:32:00Z", "type": "commit"}, {"oid": "a7d0dfe2fa001b4cd68eaa11cace621e7a56a57e", "url": "https://github.com/hyperledger/besu/commit/a7d0dfe2fa001b4cd68eaa11cace621e7a56a57e", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T02:34:42Z", "type": "commit"}, {"oid": "3630ab8a8042bbe05e093d937055b0b6d86ec145", "url": "https://github.com/hyperledger/besu/commit/3630ab8a8042bbe05e093d937055b0b6d86ec145", "message": "plugin api changes hash\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T03:43:49Z", "type": "commit"}, {"oid": "92412c4775da942eb7a21fa6021d81c1264675da", "url": "https://github.com/hyperledger/besu/commit/92412c4775da942eb7a21fa6021d81c1264675da", "message": "Ditching BouncyCastle from plugin and package name. Moving to localfile\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T05:23:24Z", "type": "commit"}, {"oid": "2db11f7b2fbd332b41e5676d2416b724b6b41acc", "url": "https://github.com/hyperledger/besu/commit/2db11f7b2fbd332b41e5676d2416b724b6b41acc", "message": "exception msg\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T05:32:28Z", "type": "commit"}, {"oid": "d3b1cac888b39a84cb346ac229fc18232aac7d0e", "url": "https://github.com/hyperledger/besu/commit/d3b1cac888b39a84cb346ac229fc18232aac7d0e", "message": "unit test for Plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T09:53:52Z", "type": "commit"}, {"oid": "e1aea3858d308b09c343c324e319fc36cbd317cd", "url": "https://github.com/hyperledger/besu/commit/e1aea3858d308b09c343c324e319fc36cbd317cd", "message": "header\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T09:56:58Z", "type": "commit"}, {"oid": "26962c63c8378540488c290376ce4d1021309fb1", "url": "https://github.com/hyperledger/besu/commit/26962c63c8378540488c290376ce4d1021309fb1", "message": "final\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T10:02:01Z", "type": "commit"}, {"oid": "bc455365b78da4496b9ef0652712a745db600825", "url": "https://github.com/hyperledger/besu/commit/bc455365b78da4496b9ef0652712a745db600825", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-16T10:02:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjcyNg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409576726", "bodyText": "This should be an interface not a class.", "author": "shemnon", "createdAt": "2020-04-16T13:56:51Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import java.math.BigInteger;\n ", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTMzMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995331", "bodyText": "refactored as interface.", "author": "usmansaleem", "createdAt": "2020-04-17T05:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nsimilarity index 63%\nrename from plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\nrename to ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nindex d4462e9e1..d56f4a4dc 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\n\n@@ -12,24 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.plugin.services.securitymodule;\n+package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.math.BigInteger;\n+import org.hyperledger.besu.ethereum.core.Gas;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n \n-  public Signature(final BigInteger r, final BigInteger s) {\n-    this.r = r;\n-    this.s = s;\n-  }\n-\n-  public BigInteger getR() {\n-    return r;\n-  }\n+  private static final Gas BEGIN_SUB_GAS_COST = Gas.of(1);\n \n-  public BigInteger getS() {\n-    return s;\n+  @Override\n+  // as https://eips.ethereum.org/EIPS/eip-2315\n+  public Gas getBeginSubGasCost() {\n+    return BEGIN_SUB_GAS_COST;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3Njk4OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409576988", "bodyText": "This should be an interface not a class.", "author": "shemnon", "createdAt": "2020-04-16T13:57:11Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import org.apache.tuweni.bytes.Bytes;\n ", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTM2MQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995361", "bodyText": "refactored as interface.", "author": "usmansaleem", "createdAt": "2020-04-17T05:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3Njk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\nsimilarity index 63%\nrename from plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java\nrename to plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\nindex 2ac9f919d..c7a35cbf7 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\n\n@@ -14,21 +14,15 @@\n  */\n package org.hyperledger.besu.plugin.services.securitymodule;\n \n-import org.apache.tuweni.bytes.Bytes;\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n \n-public class PublicKey {\n-\n-  private final Bytes encoded;\n-\n-  public PublicKey(final Bytes encoded) {\n-    this.encoded = encoded;\n-  }\n-\n-  public static PublicKey create(final Bytes encoded) {\n-    return new PublicKey(encoded);\n-  }\n-\n-  public Bytes getEncoded() {\n-    return encoded;\n-  }\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider {\n+  SecurityModule create(BesuConfiguration besuConfiguration);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDI2MA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409894260", "bodyText": "This should be under the data package in the plugin api", "author": "jframe", "createdAt": "2020-04-16T22:52:48Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTQ1NQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995455", "bodyText": "refactored under data subpackage.", "author": "usmansaleem", "createdAt": "2020-04-17T05:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\nsimilarity index 63%\nrename from plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java\nrename to plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\nindex 2ac9f919d..c7a35cbf7 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\n\n@@ -14,21 +14,15 @@\n  */\n package org.hyperledger.besu.plugin.services.securitymodule;\n \n-import org.apache.tuweni.bytes.Bytes;\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n \n-public class PublicKey {\n-\n-  private final Bytes encoded;\n-\n-  public PublicKey(final Bytes encoded) {\n-    this.encoded = encoded;\n-  }\n-\n-  public static PublicKey create(final Bytes encoded) {\n-    return new PublicKey(encoded);\n-  }\n-\n-  public Bytes getEncoded() {\n-    return encoded;\n-  }\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider {\n+  SecurityModule create(BesuConfiguration besuConfiguration);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDg2NA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409894864", "bodyText": "This should be under the data package in the plugin api", "author": "jframe", "createdAt": "2020-04-16T22:54:29Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MDc4NA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409940784", "bodyText": "refactored to subpackage data", "author": "usmansaleem", "createdAt": "2020-04-17T01:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nsimilarity index 63%\nrename from plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\nrename to ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nindex d4462e9e1..d56f4a4dc 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\n\n@@ -12,24 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.plugin.services.securitymodule;\n+package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.math.BigInteger;\n+import org.hyperledger.besu.ethereum.core.Gas;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n \n-  public Signature(final BigInteger r, final BigInteger s) {\n-    this.r = r;\n-    this.s = s;\n-  }\n-\n-  public BigInteger getR() {\n-    return r;\n-  }\n+  private static final Gas BEGIN_SUB_GAS_COST = Gas.of(1);\n \n-  public BigInteger getS() {\n-    return s;\n+  @Override\n+  // as https://eips.ethereum.org/EIPS/eip-2315\n+  public Gas getBeginSubGasCost() {\n+    return BEGIN_SUB_GAS_COST;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTY4NA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409895684", "bodyText": "Since this is now a general purpose Ethereum signature data type in the plugin API I think this should include the recovery id.", "author": "jframe", "createdAt": "2020-04-16T22:56:39Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import java.math.BigInteger;", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nsimilarity index 63%\nrename from plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\nrename to ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\nindex d4462e9e1..d56f4a4dc 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java\n\n@@ -12,24 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.plugin.services.securitymodule;\n+package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.math.BigInteger;\n+import org.hyperledger.besu.ethereum.core.Gas;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n \n-  public Signature(final BigInteger r, final BigInteger s) {\n-    this.r = r;\n-    this.s = s;\n-  }\n-\n-  public BigInteger getR() {\n-    return r;\n-  }\n+  private static final Gas BEGIN_SUB_GAS_COST = Gas.of(1);\n \n-  public BigInteger getS() {\n-    return s;\n+  @Override\n+  // as https://eips.ethereum.org/EIPS/eip-2315\n+  public Gas getBeginSubGasCost() {\n+    return BEGIN_SUB_GAS_COST;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDQ2MQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409900461", "bodyText": "Doesn't look like this needs to be assigned to a field variable, couldn't this just be passed to the nodePrivateKeyFile function?", "author": "jframe", "createdAt": "2020-04-16T23:10:24Z", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTE1OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939159", "bodyText": "done.", "author": "usmansaleem", "createdAt": "2020-04-17T01:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java b/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\ndeleted file mode 100644\nindex 188966648..000000000\n--- a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\n+++ /dev/null\n\n@@ -1,109 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n-\n-import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n-import org.hyperledger.besu.crypto.KeyPairUtil;\n-import org.hyperledger.besu.crypto.SECP256K1;\n-import org.hyperledger.besu.plugin.BesuContext;\n-import org.hyperledger.besu.plugin.BesuPlugin;\n-import org.hyperledger.besu.plugin.services.BesuConfiguration;\n-import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n-import org.hyperledger.besu.plugin.services.SecurityModuleService;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n-import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n-\n-import java.io.File;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-public class LocalFileSecurityModulePlugin implements BesuPlugin {\n-  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n-\n-  private static final Logger LOG = LogManager.getLogger();\n-  static final String SECURITY_MODULE_NAME = \"localfile\";\n-  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n-  private final LocalFileSecurityModuleCLIOptions cliOptions =\n-      new LocalFileSecurityModuleCLIOptions();\n-  private BesuConfiguration besuConfiguration;\n-\n-  @Override\n-  public void register(final BesuContext context) {\n-    LOG.debug(\"Registering plugin\");\n-    registerCliOptions(context);\n-    registerSecurityModule(context);\n-  }\n-\n-  private void registerCliOptions(final BesuContext context) {\n-    if (!isFullInstantiation()) {\n-      return; // don't register cli options in docker mode\n-    }\n-\n-    final PicoCLIOptions picoCLIOptions =\n-        context\n-            .getService(PicoCLIOptions.class)\n-            .orElseThrow(\n-                () ->\n-                    new IllegalStateException(\n-                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n-\n-    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n-  }\n-\n-  private void registerSecurityModule(final BesuContext context) {\n-    context\n-        .getService(SecurityModuleService.class)\n-        .orElseThrow(\n-            () ->\n-                new RuntimeException(\n-                    \"Security Module Service Not available, cannot register Service Module: \"\n-                        + SECURITY_MODULE_NAME))\n-        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n-  }\n-\n-  private SecurityModule createFileBasedKeyPairSecurityModule(\n-      final BesuConfiguration besuConfiguration) {\n-    this.besuConfiguration = besuConfiguration;\n-    final File privateKeyFile = nodePrivateKeyFile();\n-    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n-    return new KeyPairSecurityModule(keyPair);\n-  }\n-\n-  private File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = cliOptions.getPrivateKeyFile();\n-    }\n-\n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n-  }\n-\n-  private boolean isFullInstantiation() {\n-    return !isDocker;\n-  }\n-\n-  @Override\n-  public void start() {\n-    LOG.debug(\"Starting plugin.\");\n-  }\n-\n-  @Override\n-  public void stop() {\n-    LOG.debug(\"Stopping plugin.\");\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDc1Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409900753", "bodyText": "nit: final", "author": "jframe", "createdAt": "2020-04-16T23:11:13Z", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;\n+    final File privateKeyFile = nodePrivateKeyFile();\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    File nodePrivateKeyFile = null;", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTI5Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939293", "bodyText": "modified logic so that it uses final now.", "author": "usmansaleem", "createdAt": "2020-04-17T01:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java b/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\ndeleted file mode 100644\nindex 188966648..000000000\n--- a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\n+++ /dev/null\n\n@@ -1,109 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n-\n-import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n-import org.hyperledger.besu.crypto.KeyPairUtil;\n-import org.hyperledger.besu.crypto.SECP256K1;\n-import org.hyperledger.besu.plugin.BesuContext;\n-import org.hyperledger.besu.plugin.BesuPlugin;\n-import org.hyperledger.besu.plugin.services.BesuConfiguration;\n-import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n-import org.hyperledger.besu.plugin.services.SecurityModuleService;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n-import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n-\n-import java.io.File;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-public class LocalFileSecurityModulePlugin implements BesuPlugin {\n-  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n-\n-  private static final Logger LOG = LogManager.getLogger();\n-  static final String SECURITY_MODULE_NAME = \"localfile\";\n-  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n-  private final LocalFileSecurityModuleCLIOptions cliOptions =\n-      new LocalFileSecurityModuleCLIOptions();\n-  private BesuConfiguration besuConfiguration;\n-\n-  @Override\n-  public void register(final BesuContext context) {\n-    LOG.debug(\"Registering plugin\");\n-    registerCliOptions(context);\n-    registerSecurityModule(context);\n-  }\n-\n-  private void registerCliOptions(final BesuContext context) {\n-    if (!isFullInstantiation()) {\n-      return; // don't register cli options in docker mode\n-    }\n-\n-    final PicoCLIOptions picoCLIOptions =\n-        context\n-            .getService(PicoCLIOptions.class)\n-            .orElseThrow(\n-                () ->\n-                    new IllegalStateException(\n-                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n-\n-    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n-  }\n-\n-  private void registerSecurityModule(final BesuContext context) {\n-    context\n-        .getService(SecurityModuleService.class)\n-        .orElseThrow(\n-            () ->\n-                new RuntimeException(\n-                    \"Security Module Service Not available, cannot register Service Module: \"\n-                        + SECURITY_MODULE_NAME))\n-        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n-  }\n-\n-  private SecurityModule createFileBasedKeyPairSecurityModule(\n-      final BesuConfiguration besuConfiguration) {\n-    this.besuConfiguration = besuConfiguration;\n-    final File privateKeyFile = nodePrivateKeyFile();\n-    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n-    return new KeyPairSecurityModule(keyPair);\n-  }\n-\n-  private File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = cliOptions.getPrivateKeyFile();\n-    }\n-\n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n-  }\n-\n-  private boolean isFullInstantiation() {\n-    return !isDocker;\n-  }\n-\n-  @Override\n-  public void start() {\n-    LOG.debug(\"Starting plugin.\");\n-  }\n-\n-  @Override\n-  public void stop() {\n-    LOG.debug(\"Stopping plugin.\");\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzkxMA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409903910", "bodyText": "Thinking an assertion would be better here, if the setProperty fails we want to know not just have the test be skipped.", "author": "jframe", "createdAt": "2020-04-16T23:21:07Z", "path": "plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.PICOCLI_NAMESPACE;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.SECURITY_MODULE_NAME;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeTrue;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+import org.hyperledger.besu.services.BesuConfigurationImpl;\n+import org.hyperledger.besu.services.PicoCLIOptionsImpl;\n+import org.hyperledger.besu.services.SecurityModuleServiceImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import picocli.CommandLine;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocalFileSecurityModulePluginTest {\n+  @Rule public final TemporaryFolder temp = new TemporaryFolder();\n+\n+  @Mock private BesuContext besuContext;\n+  private final SecurityModuleServiceImpl securityModuleService = new SecurityModuleServiceImpl();\n+  private CommandLine commandLine;\n+\n+  @Before\n+  public void setUp() {\n+    commandLine = new CommandLine(TestCommand.class);\n+\n+    when(besuContext.getService(PicoCLIOptions.class))\n+        .thenReturn(Optional.of(new PicoCLIOptionsImpl(commandLine)));\n+    when(besuContext.getService(SecurityModuleService.class))\n+        .thenReturn(Optional.of(securityModuleService));\n+  }\n+\n+  @Before\n+  @After\n+  public void resetSystemProps() {\n+    System.setProperty(\"besu.docker\", \"false\");\n+  }\n+\n+  @Test\n+  public void cliOptionIsDisabledUnderDockerMode() {\n+    System.setProperty(\"besu.docker\", \"true\");\n+    assumeTrue(Boolean.getBoolean(\"besu.docker\"));", "originalCommit": "bc455365b78da4496b9ef0652712a745db600825", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTYwNw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939607", "bodyText": "This one is adapted from the original unit test under BesuCommandTest. I believe assume would skip the test if condition fails (instead of failing the whole job).", "author": "usmansaleem", "createdAt": "2020-04-17T01:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java b/plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java\ndeleted file mode 100644\nindex ba52ba575..000000000\n--- a/plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java\n+++ /dev/null\n\n@@ -1,181 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.PICOCLI_NAMESPACE;\n-import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.SECURITY_MODULE_NAME;\n-import static org.junit.Assume.assumeFalse;\n-import static org.junit.Assume.assumeTrue;\n-import static org.mockito.Mockito.when;\n-\n-import org.hyperledger.besu.crypto.KeyPairUtil;\n-import org.hyperledger.besu.crypto.SECP256K1;\n-import org.hyperledger.besu.plugin.BesuContext;\n-import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n-import org.hyperledger.besu.plugin.services.SecurityModuleService;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n-import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n-import org.hyperledger.besu.services.BesuConfigurationImpl;\n-import org.hyperledger.besu.services.PicoCLIOptionsImpl;\n-import org.hyperledger.besu.services.SecurityModuleServiceImpl;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Optional;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n-import picocli.CommandLine;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class LocalFileSecurityModulePluginTest {\n-  @Rule public final TemporaryFolder temp = new TemporaryFolder();\n-\n-  @Mock private BesuContext besuContext;\n-  private final SecurityModuleServiceImpl securityModuleService = new SecurityModuleServiceImpl();\n-  private CommandLine commandLine;\n-\n-  @Before\n-  public void setUp() {\n-    commandLine = new CommandLine(TestCommand.class);\n-\n-    when(besuContext.getService(PicoCLIOptions.class))\n-        .thenReturn(Optional.of(new PicoCLIOptionsImpl(commandLine)));\n-    when(besuContext.getService(SecurityModuleService.class))\n-        .thenReturn(Optional.of(securityModuleService));\n-  }\n-\n-  @Before\n-  @After\n-  public void resetSystemProps() {\n-    System.setProperty(\"besu.docker\", \"false\");\n-  }\n-\n-  @Test\n-  public void cliOptionIsDisabledUnderDockerMode() {\n-    System.setProperty(\"besu.docker\", \"true\");\n-    assumeTrue(Boolean.getBoolean(\"besu.docker\"));\n-\n-    final LocalFileSecurityModulePlugin localFileSecurityModulePlugin =\n-        new LocalFileSecurityModulePlugin();\n-    localFileSecurityModulePlugin.register(besuContext);\n-\n-    assertThatExceptionOfType(CommandLine.ParameterException.class)\n-        .isThrownBy(\n-            () ->\n-                commandLine.parseArgs(\n-                    \"--plugin-localfile-security-module-private-key-file\",\n-                    \"./specific/enclavePrivateKey\"))\n-        .withMessage(\n-            \"Unknown options: '--plugin-localfile-security-module-private-key-file', './specific/enclavePrivateKey'\");\n-  }\n-\n-  @Test\n-  public void cliOptionCanBeParsedInFullMode() {\n-    assumeFalse(Boolean.getBoolean(\"besu.docker\"));\n-\n-    final LocalFileSecurityModulePlugin localFileSecurityModulePlugin =\n-        new LocalFileSecurityModulePlugin();\n-    localFileSecurityModulePlugin.register(besuContext);\n-\n-    commandLine.parseArgs(\n-        \"--plugin-localfile-security-module-private-key-file\", \"./specific/enclavePrivateKey\");\n-    final LocalFileSecurityModuleCLIOptions localFileSecurityModuleCLIOptions =\n-        (LocalFileSecurityModuleCLIOptions)\n-            commandLine.getMixins().get(\"Plugin \" + PICOCLI_NAMESPACE);\n-    assertThat(localFileSecurityModuleCLIOptions.getPrivateKeyFile())\n-        .isEqualTo(new File(\"./specific/enclavePrivateKey\"));\n-  }\n-\n-  @Test\n-  public void cliOptionsCanBeParsedWithoutSpecifyingKeyFile() {\n-    assumeFalse(Boolean.getBoolean(\"besu.docker\"));\n-\n-    final LocalFileSecurityModulePlugin localFileSecurityModulePlugin =\n-        new LocalFileSecurityModulePlugin();\n-    localFileSecurityModulePlugin.register(besuContext);\n-\n-    commandLine.parseArgs();\n-\n-    final LocalFileSecurityModuleCLIOptions localFileSecurityModuleCLIOptions =\n-        (LocalFileSecurityModuleCLIOptions)\n-            commandLine.getMixins().get(\"Plugin \" + PICOCLI_NAMESPACE);\n-    assertThat(localFileSecurityModuleCLIOptions).isNotNull();\n-  }\n-\n-  @Test\n-  public void keyFromDataPathInBesuConfigurationIsUsedInDockerMode() throws IOException {\n-    System.setProperty(\"besu.docker\", \"true\");\n-    assumeTrue(Boolean.getBoolean(\"besu.docker\"));\n-\n-    final LocalFileSecurityModulePlugin localFileSecurityModulePlugin =\n-        new LocalFileSecurityModulePlugin();\n-    localFileSecurityModulePlugin.register(besuContext);\n-\n-    commandLine.parseArgs(); // we cannot specify key cli option in docker mode.\n-\n-    final File dataFolder = temp.newFolder();\n-\n-    // pre-create private Key in temp folder\n-    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(dataFolder.toPath());\n-\n-    final Optional<SecurityModule> securityModule =\n-        securityModuleService\n-            .getByName(SECURITY_MODULE_NAME)\n-            .map(\n-                secModule ->\n-                    secModule.apply(\n-                        new BesuConfigurationImpl(dataFolder.toPath(), dataFolder.toPath())));\n-    assertThat(securityModule).isPresent();\n-\n-    assertThat(securityModule.get().getPublicKey().getEncoded())\n-        .isEqualByComparingTo(keyPair.getPublicKey().getEncodedBytes());\n-  }\n-\n-  @Test\n-  public void keyFromCLIOptionIsUsedInFullMode() throws IOException {\n-    System.setProperty(\"besu.docker\", \"false\");\n-    assumeFalse(Boolean.getBoolean(\"besu.docker\"));\n-\n-    LocalFileSecurityModulePlugin localFileSecurityModulePlugin =\n-        new LocalFileSecurityModulePlugin();\n-    localFileSecurityModulePlugin.register(besuContext);\n-\n-    final File keyDirectory = temp.newFolder();\n-    final File keyFile = new File(keyDirectory, \"key\");\n-\n-    // pre-create private Key\n-    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(keyFile);\n-\n-    commandLine.parseArgs(\"--plugin-localfile-security-module-private-key-file\", keyFile.getPath());\n-\n-    final Optional<SecurityModule> securityModule =\n-        securityModuleService\n-            .getByName(SECURITY_MODULE_NAME)\n-            .map(secModule -> secModule.apply(null));\n-    assertThat(securityModule).isPresent();\n-\n-    assertThat(securityModule.get().getPublicKey().getEncoded())\n-        .isEqualByComparingTo(keyPair.getPublicKey().getEncodedBytes());\n-  }\n-}\n"}}, {"oid": "7a8fb1d84e8e34cbb473c43ef7d97bdb0ffcc32e", "url": "https://github.com/hyperledger/besu/commit/7a8fb1d84e8e34cbb473c43ef7d97bdb0ffcc32e", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T00:24:47Z", "type": "commit"}, {"oid": "690618d03fca62c75064b7a75a60530a774b4b36", "url": "https://github.com/hyperledger/besu/commit/690618d03fca62c75064b7a75a60530a774b4b36", "message": "using final keyword in nodePrivateKeyFile()\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T00:32:29Z", "type": "commit"}, {"oid": "570271a1cf7edff0d4938a492c43e3ef660f2973", "url": "https://github.com/hyperledger/besu/commit/570271a1cf7edff0d4938a492c43e3ef660f2973", "message": "Making PublicKey interface;\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T00:56:15Z", "type": "commit"}, {"oid": "de52ac41c01fd6e0656a561eb1efed568d57354d", "url": "https://github.com/hyperledger/besu/commit/de52ac41c01fd6e0656a561eb1efed568d57354d", "message": "Plugin API hash\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T01:04:06Z", "type": "commit"}, {"oid": "05752403e0d9ec22de81b0d604a20f6ed90df2ed", "url": "https://github.com/hyperledger/besu/commit/05752403e0d9ec22de81b0d604a20f6ed90df2ed", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T01:04:49Z", "type": "commit"}, {"oid": "8850fe85fca7c83812ad738b64a3cb360ca8abcf", "url": "https://github.com/hyperledger/besu/commit/8850fe85fca7c83812ad738b64a3cb360ca8abcf", "message": "tidying up LocalFileSecurityModulePlugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T01:09:25Z", "type": "commit"}, {"oid": "cce1bcbcb4779d5feecde8d41a58b0f6f89d8bbe", "url": "https://github.com/hyperledger/besu/commit/cce1bcbcb4779d5feecde8d41a58b0f6f89d8bbe", "message": "review - converting Signature to interface\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T01:20:58Z", "type": "commit"}, {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f", "url": "https://github.com/hyperledger/besu/commit/d83e47f0da0493896c063ee2bea5480024108f5f", "message": "refactoring Signature and PublicKey in data subpackage\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T01:27:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTY2OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409989668", "bodyText": "Can you add some javadoc", "author": "jframe", "createdAt": "2020-04-17T04:43:42Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java", "diffHunk": "@@ -12,24 +12,12 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n import java.math.BigInteger;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public interface Signature {", "originalCommit": "d83e47f0da0493896c063ee2bea5480024108f5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTUxMg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995512", "bodyText": "Added brief javadoc.", "author": "usmansaleem", "createdAt": "2020-04-17T05:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java\nindex cce3562c3..4aa67bc9c 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java\n\n@@ -14,8 +14,12 @@\n  */\n package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n+import org.hyperledger.besu.plugin.Unstable;\n+\n import java.math.BigInteger;\n \n+/** Represents R and S component of a Signature obtained through sign function */\n+@Unstable\n public interface Signature {\n   BigInteger getR();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTczNg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409989736", "bodyText": "can you add some javadoc", "author": "jframe", "createdAt": "2020-04-17T04:43:57Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,11 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;", "originalCommit": "d83e47f0da0493896c063ee2bea5480024108f5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTU2Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995566", "bodyText": "Added brief javadoc", "author": "usmansaleem", "createdAt": "2020-04-17T05:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTczNg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\nindex 71e2f8519..0a3c44fe7 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\n\n@@ -14,9 +14,14 @@\n  */\n package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n-import org.apache.tuweni.bytes.Bytes;\n+import org.hyperledger.besu.plugin.Unstable;\n \n+import java.security.spec.ECPoint;\n+\n+/** Represents a PublicKey function which provides ECPoint */\n+@Unstable\n @FunctionalInterface\n public interface PublicKey {\n-  Bytes getEncoded();\n+  /** @return the public point W. */\n+  ECPoint getW();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDUyMA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409990520", "bodyText": "Is there any benefit for this to extend Function? Would of expected this to be a top level class with a create method following the style done for storage API which has a KeyValueStorageFactory", "author": "jframe", "createdAt": "2020-04-17T04:47:40Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface\n+  interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {", "originalCommit": "d83e47f0da0493896c063ee2bea5480024108f5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTgyOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995829", "bodyText": "refactored to top level. The only benefit is adhering to existing functional interface. We can technically avoid declaring apply method altogether.", "author": "usmansaleem", "createdAt": "2020-04-17T05:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex 09e6b8e81..583732e3a 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -15,26 +15,19 @@\n package org.hyperledger.besu.plugin.services;\n \n import org.hyperledger.besu.plugin.Unstable;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n \n import java.util.Optional;\n-import java.util.function.Function;\n \n /**\n- * This service allows plugins to register Security Module which is abstraction of cryptographic\n- * operations by deferring to specific provider such as BouncyCastle\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n  */\n @Unstable\n public interface SecurityModuleService {\n \n-  @FunctionalInterface\n-  interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {\n-    @Override\n-    SecurityModule apply(BesuConfiguration besuConfiguration);\n-  }\n-\n   /**\n-   * Registers a factory as available for creating SecurityProvider instances.\n+   * Registers a provider of security modules.\n    *\n    * @param name The name to identify the Security Provider Supplier Function\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDU2Mg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409990562", "bodyText": "Can some javadoc be added", "author": "jframe", "createdAt": "2020-04-17T04:47:54Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface", "originalCommit": "d83e47f0da0493896c063ee2bea5480024108f5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5Njc3NQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409996775", "bodyText": "added.", "author": "usmansaleem", "createdAt": "2020-04-17T05:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex 09e6b8e81..583732e3a 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -15,26 +15,19 @@\n package org.hyperledger.besu.plugin.services;\n \n import org.hyperledger.besu.plugin.Unstable;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n \n import java.util.Optional;\n-import java.util.function.Function;\n \n /**\n- * This service allows plugins to register Security Module which is abstraction of cryptographic\n- * operations by deferring to specific provider such as BouncyCastle\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n  */\n @Unstable\n public interface SecurityModuleService {\n \n-  @FunctionalInterface\n-  interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {\n-    @Override\n-    SecurityModule apply(BesuConfiguration besuConfiguration);\n-  }\n-\n   /**\n-   * Registers a factory as available for creating SecurityProvider instances.\n+   * Registers a provider of security modules.\n    *\n    * @param name The name to identify the Security Provider Supplier Function\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n"}}, {"oid": "c5f17386970e5fe7d8e358cb4eb794d0dd6879c4", "url": "https://github.com/hyperledger/besu/commit/c5f17386970e5fe7d8e358cb4eb794d0dd6879c4", "message": "review - refactoring inner class to be top level class. Adding javadoc\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T05:07:12Z", "type": "commit"}, {"oid": "3088be354506d5ea572e3b1f533d11859dddd6db", "url": "https://github.com/hyperledger/besu/commit/3088be354506d5ea572e3b1f533d11859dddd6db", "message": "refactoring method out of SecurityModuleProvider\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T05:12:58Z", "type": "commit"}, {"oid": "c28cc76923df73340759d947d2f7636eb6ccf74d", "url": "https://github.com/hyperledger/besu/commit/c28cc76923df73340759d947d2f7636eb6ccf74d", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T05:16:26Z", "type": "commit"}, {"oid": "7341cfcfca001c173c417430c36033b2aa9483f1", "url": "https://github.com/hyperledger/besu/commit/7341cfcfca001c173c417430c36033b2aa9483f1", "message": "adding unstable annotation in plugin interfaces\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T05:23:18Z", "type": "commit"}, {"oid": "eaf709fadfd4e6e70b8dca92d62345777e0b35b0", "url": "https://github.com/hyperledger/besu/commit/eaf709fadfd4e6e70b8dca92d62345777e0b35b0", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-17T11:02:53Z", "type": "commit"}, {"oid": "16270810a64b918f44a28535365701f36189d7e9", "url": "https://github.com/hyperledger/besu/commit/16270810a64b918f44a28535365701f36189d7e9", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T00:00:30Z", "type": "commit"}, {"oid": "6a27c6660cc044c06eefc065d33a3cc804e2279a", "url": "https://github.com/hyperledger/besu/commit/6a27c6660cc044c06eefc065d33a3cc804e2279a", "message": "expose buildNodeKey from BesuCommand so that PublicKeySubcommand can use it\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T01:14:07Z", "type": "commit"}, {"oid": "7c19a1a6e958972030c4e3dc61240e442c5f03ce", "url": "https://github.com/hyperledger/besu/commit/7c19a1a6e958972030c4e3dc61240e442c5f03ce", "message": "Merge upstream master\n\nSigned-off-by: Usman Saleem <usman@usmans.info>\n\n# Conflicts:\n#\tbesu/src/test/resources/everything_config.toml", "committedDate": "2020-04-20T01:16:11Z", "type": "commit"}, {"oid": "25af953f801e5599c274add403d862d655f654e8", "url": "https://github.com/hyperledger/besu/commit/25af953f801e5599c274add403d862d655f654e8", "message": "use functional reference for nodekey in public key subcommand\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T01:46:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411049201", "bodyText": "Still prefer to not have this extend Function. Think this would be much cleaner with a just a SecurityModule create(BesuConfiguration config) method.", "author": "jframe", "createdAt": "2020-04-20T02:10:24Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {}", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjQ0OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411072448", "bodyText": "Think this would be much cleaner with a just a SecurityModule create(BesuConfiguration config) method.\n\nIt would also be more consistent with the approach use in the other plugins.", "author": "CjHare", "createdAt": "2020-04-20T03:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4NzU3NA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411087574", "bodyText": "\ud83d\udc4d", "author": "usmansaleem", "createdAt": "2020-04-20T04:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\nindex 1e0288d9b..c7a35cbf7 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java\n\n@@ -17,12 +17,12 @@ package org.hyperledger.besu.plugin.services.securitymodule;\n import org.hyperledger.besu.plugin.Unstable;\n import org.hyperledger.besu.plugin.services.BesuConfiguration;\n \n-import java.util.function.Function;\n-\n /**\n  * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n  * produces an instance of SecurityModule.\n  */\n @Unstable\n @FunctionalInterface\n-public interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {}\n+public interface SecurityModuleProvider {\n+  SecurityModule create(BesuConfiguration besuConfiguration);\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTU5OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411049599", "bodyText": "Since the crypto provider can fail signing, calculating key agreement etc. I think we should have these methods throwing a custom exception, perhaps a SecurityModuleException.", "author": "jframe", "createdAt": "2020-04-20T02:11:49Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java", "diffHunk": "@@ -21,11 +25,12 @@\n  * interface ensures cryptographic functions required by Ethereum are available to the application\n  * at large, without releasing the content of the private key.\n  */\n+@Unstable\n public interface SecurityModule {\n \n   /**\n    * @param dataHash The Keccack hash of a set of data, which is to be signed.\n-   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   * @return the signature (R, S) generated by signing the hash with the node key\n    */\n   Signature sign(Bytes32 dataHash);", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4OTY3Mw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411089673", "bodyText": "\ud83d\udc4d", "author": "usmansaleem", "createdAt": "2020-04-20T04:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java\nindex b6fdf3a0a..14e1c6752 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java\n\n@@ -31,15 +31,20 @@ public interface SecurityModule {\n   /**\n    * @param dataHash The Keccack hash of a set of data, which is to be signed.\n    * @return the signature (R, S) generated by signing the hash with the node key\n+   * @throws SecurityModuleException if sign fails\n    */\n-  Signature sign(Bytes32 dataHash);\n+  Signature sign(Bytes32 dataHash) throws SecurityModuleException;\n \n-  /** @return the public key associated with the key stored behind this interface. */\n-  PublicKey getPublicKey();\n+  /**\n+   * @return the public key associated with the key stored behind this interface.\n+   * @throws SecurityModuleException if getPublicKey fails\n+   */\n+  PublicKey getPublicKey() throws SecurityModuleException;\n \n   /**\n    * @param partyKey the key with which an agreement is to be created.\n    * @return The bytes forming the agreement\n+   * @throws SecurityModuleException if calculateECDHKeyAgreement fails\n    */\n-  Bytes32 calculateECDHKeyAgreement(PublicKey partyKey);\n+  Bytes32 calculateECDHKeyAgreement(PublicKey partyKey) throws SecurityModuleException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411055246", "bodyText": "this is a side effect and not the purpose of this function - I think it'd be better for this to be called explicitly when needed.", "author": "rain-on", "createdAt": "2020-04-20T02:34:21Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5MjM1Ng==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411092356", "bodyText": "how do you recommend we call addConfigurationService from subcommand? I would either have to expose addConfigurationService as public or wrap these two methods in a different method.", "author": "usmansaleem", "createdAt": "2020-04-20T04:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5MzgyOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411093829", "bodyText": "will use another method reference!", "author": "usmansaleem", "createdAt": "2020-04-20T05:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex ebc5ee78c..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1962,16 +1984,28 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n     }\n   }\n \n-  private NodeKey buildNodeKey() {\n-    addConfigurationService(); // its a no-op if besu configuration service is already initialized\n-    return new NodeKey(securityModuleProvider(securityModuleProviderName));\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n   }\n \n-  private SecurityModule securityModuleProvider(final String name) {\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n+    }\n+\n     return securityModuleService\n-        .getByName(name)\n-        .orElseThrow(() -> new RuntimeException(\"Security Module not found: \" + name))\n-        .apply(pluginCommonConfiguration);\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);\n+    return nodePrivateKeyFile.orElseGet(() -> KeyPairUtil.getDefaultKeyFile(dataDir()));\n   }\n \n   private File privacyPublicKeyFile() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTgxMQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411055811", "bodyText": "probably don't need to pass in the string as a parameter - you can take it from the class variable.", "author": "rain-on", "createdAt": "2020-04-20T02:36:33Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized\n+    return new NodeKey(securityModuleProvider(securityModuleProviderName));\n+  }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+  private SecurityModule securityModuleProvider(final String name) {", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NDk1Mg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411094952", "bodyText": "\ud83d\udc4d", "author": "usmansaleem", "createdAt": "2020-04-20T05:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex ebc5ee78c..1cb1bb851 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -1962,16 +1984,28 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n     }\n   }\n \n-  private NodeKey buildNodeKey() {\n-    addConfigurationService(); // its a no-op if besu configuration service is already initialized\n-    return new NodeKey(securityModuleProvider(securityModuleProviderName));\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n   }\n \n-  private SecurityModule securityModuleProvider(final String name) {\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n+    }\n+\n     return securityModuleService\n-        .getByName(name)\n-        .orElseThrow(() -> new RuntimeException(\"Security Module not found: \" + name))\n-        .apply(pluginCommonConfiguration);\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);\n+    return nodePrivateKeyFile.orElseGet(() -> KeyPairUtil.getDefaultKeyFile(dataDir()));\n   }\n \n   private File privacyPublicKeyFile() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1ODc5Nw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411058797", "bodyText": "unfortunately, this is kinda dangerous - when security classes offer a getEncoded() they typically imply an ASN1 encoding - not just a set of raw bytes.\nSo if we offer this as a function on a public key, we may need to be more explicit about what we expect.\n[Given this is part of the interface, it will require javadoc.]", "author": "rain-on", "createdAt": "2020-04-20T02:48:15Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n-import org.apache.tuweni.bytes.Bytes;\n-\n-public class PublicKey {\n-\n-  private final Bytes encoded;\n+import org.hyperledger.besu.plugin.Unstable;\n \n-  public PublicKey(final Bytes encoded) {\n-    this.encoded = encoded;\n-  }\n-\n-  public static PublicKey create(final Bytes encoded) {\n-    return new PublicKey(encoded);\n-  }\n+import org.apache.tuweni.bytes.Bytes;\n \n-  public Bytes getEncoded() {\n-    return encoded;\n-  }\n+/**\n+ * Represents a function which provides encoded Bytes of Public Key (such as SECP256K1 Public Key).\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface PublicKey {\n+  Bytes getEncoded();", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NzIyOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411097229", "bodyText": "@rain-on @CjHare What is the encoding used by SECP256K1 implementation? org/hyperledger/besu/crypto/SECP256K1.java:176", "author": "usmansaleem", "createdAt": "2020-04-20T05:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1ODc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\nindex b9bba6aba..0a3c44fe7 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java\n\n@@ -16,13 +16,12 @@ package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n import org.hyperledger.besu.plugin.Unstable;\n \n-import org.apache.tuweni.bytes.Bytes;\n+import java.security.spec.ECPoint;\n \n-/**\n- * Represents a function which provides encoded Bytes of Public Key (such as SECP256K1 Public Key).\n- */\n+/** Represents a PublicKey function which provides ECPoint */\n @Unstable\n @FunctionalInterface\n public interface PublicKey {\n-  Bytes getEncoded();\n+  /** @return the public point W. */\n+  ECPoint getW();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1OTM5MQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411059391", "bodyText": "I know its stolen, but its terribly named - can we change this to be more meaningful - i.e. or \"containerised\"? even \"inDocker\"?\nIs this function even required - does it add value over the literal variable?", "author": "rain-on", "createdAt": "2020-04-20T02:50:40Z", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    final File privateKeyFile = nodePrivateKeyFile(besuConfiguration);\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile(final BesuConfiguration besuConfiguration) {\n+    final File nodePrivateKeyFile = isFullInstantiation() ? cliOptions.getPrivateKeyFile() : null;\n+\n+    return nodePrivateKeyFile != null\n+        ? nodePrivateKeyFile\n+        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n+  }\n+\n+  private boolean isFullInstantiation() {", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5OTcyOA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411099728", "bodyText": "agreed. Modified the code to use isDocker variable directly.", "author": "usmansaleem", "createdAt": "2020-04-20T05:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1OTM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java b/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\ndeleted file mode 100644\nindex 8d930c0c0..000000000\n--- a/plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java\n+++ /dev/null\n\n@@ -1,104 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n-\n-import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n-import org.hyperledger.besu.crypto.KeyPairUtil;\n-import org.hyperledger.besu.crypto.SECP256K1;\n-import org.hyperledger.besu.plugin.BesuContext;\n-import org.hyperledger.besu.plugin.BesuPlugin;\n-import org.hyperledger.besu.plugin.services.BesuConfiguration;\n-import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n-import org.hyperledger.besu.plugin.services.SecurityModuleService;\n-import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n-import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n-\n-import java.io.File;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-public class LocalFileSecurityModulePlugin implements BesuPlugin {\n-  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n-\n-  private static final Logger LOG = LogManager.getLogger();\n-  static final String SECURITY_MODULE_NAME = \"localfile\";\n-  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n-  private final LocalFileSecurityModuleCLIOptions cliOptions =\n-      new LocalFileSecurityModuleCLIOptions();\n-\n-  @Override\n-  public void register(final BesuContext context) {\n-    LOG.debug(\"Registering plugin\");\n-    registerCliOptions(context);\n-    registerSecurityModule(context);\n-  }\n-\n-  private void registerCliOptions(final BesuContext context) {\n-    if (!isFullInstantiation()) {\n-      return; // don't register cli options in docker mode\n-    }\n-\n-    final PicoCLIOptions picoCLIOptions =\n-        context\n-            .getService(PicoCLIOptions.class)\n-            .orElseThrow(\n-                () ->\n-                    new IllegalStateException(\n-                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n-\n-    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n-  }\n-\n-  private void registerSecurityModule(final BesuContext context) {\n-    context\n-        .getService(SecurityModuleService.class)\n-        .orElseThrow(\n-            () ->\n-                new RuntimeException(\n-                    \"Security Module Service Not available, cannot register Service Module: \"\n-                        + SECURITY_MODULE_NAME))\n-        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n-  }\n-\n-  private SecurityModule createFileBasedKeyPairSecurityModule(\n-      final BesuConfiguration besuConfiguration) {\n-    final File privateKeyFile = nodePrivateKeyFile(besuConfiguration);\n-    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n-    return new KeyPairSecurityModule(keyPair);\n-  }\n-\n-  private File nodePrivateKeyFile(final BesuConfiguration besuConfiguration) {\n-    final File nodePrivateKeyFile = isFullInstantiation() ? cliOptions.getPrivateKeyFile() : null;\n-\n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n-  }\n-\n-  private boolean isFullInstantiation() {\n-    return !isDocker;\n-  }\n-\n-  @Override\n-  public void start() {\n-    LOG.debug(\"Starting plugin.\");\n-  }\n-\n-  @Override\n-  public void stop() {\n-    LOG.debug(\"Stopping plugin.\");\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTIyNw==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411069227", "bodyText": "You can call this just nodeKey as the Supplier prefix can be inferred from the type.", "author": "CjHare", "createdAt": "2020-04-20T03:29:03Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,20 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n+  private final Supplier<NodeKey> nodeKeySupplier;", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMTc3OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411101778", "bodyText": "\ud83d\udc4d suggestion applied.", "author": "usmansaleem", "createdAt": "2020-04-20T05:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\nindex e95e7ac99..613303835 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n\n@@ -63,11 +63,16 @@ public class PublicKeySubCommand implements Runnable {\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final Supplier<NodeKey> nodeKeySupplier;\n+  private final Runnable besuConfigurationService;\n+  private final Supplier<NodeKey> nodeKey;\n \n-  public PublicKeySubCommand(final PrintStream out, final Supplier<NodeKey> nodeKeySupplier) {\n+  public PublicKeySubCommand(\n+      final PrintStream out,\n+      final Runnable besuConfigurationService,\n+      final Supplier<NodeKey> nodeKey) {\n     this.out = out;\n-    this.nodeKeySupplier = nodeKeySupplier;\n+    this.besuConfigurationService = besuConfigurationService;\n+    this.nodeKey = nodeKey;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTY3Mg==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411069672", "bodyText": "Was this change because NPE were being encountered?", "author": "CjHare", "createdAt": "2020-04-20T03:30:56Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -113,22 +109,23 @@ public void run() {\n       checkNotNull(parentCommand);\n       checkNotNull(parentCommand.parentCommand);\n \n-      parentCommand.getKeyPair().ifPresent(this::outputPublicKey);", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMTQ1OQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411101459", "bodyText": "you mean not using getKeyPair anymore? or the usage of Optional.ofNullable?", "author": "usmansaleem", "createdAt": "2020-04-20T05:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\nindex e95e7ac99..613303835 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java\n\n@@ -109,6 +118,7 @@ public class PublicKeySubCommand implements Runnable {\n       checkNotNull(parentCommand);\n       checkNotNull(parentCommand.parentCommand);\n \n+      parentCommand.initBesuConfigurationService();\n       final NodeKey nodeKey = parentCommand.getNodeKey();\n       Optional.ofNullable(nodeKey).ifPresent(this::outputPublicKey);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDM0OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411070348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This service allows plugins to register Security Module which is abstraction of cryptographic\n          \n          \n            \n             * This service allows plugins to register a Security Module, which is abstraction of cryptographic", "author": "CjHare", "createdAt": "2020-04-20T03:33:21Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNTI5OA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411105298", "bodyText": "applied.", "author": "usmansaleem", "createdAt": "2020-04-20T05:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex a80fda355..583732e3a 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -20,14 +20,14 @@ import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvide\n import java.util.Optional;\n \n /**\n- * This service allows plugins to register Security Module which is abstraction of cryptographic\n- * operations by deferring to specific provider such as BouncyCastle\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n  */\n @Unstable\n public interface SecurityModuleService {\n \n   /**\n-   * Registers a factory as available for creating SecurityProvider instances.\n+   * Registers a provider of security modules.\n    *\n    * @param name The name to identify the Security Provider Supplier Function\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDUyOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411070529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * operations by deferring to specific provider such as BouncyCastle\n          \n          \n            \n             * operations that defer to specific provider (e.g. BouncyCastle).", "author": "CjHare", "createdAt": "2020-04-20T03:33:54Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNTMzOQ==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411105339", "bodyText": "applied", "author": "usmansaleem", "createdAt": "2020-04-20T05:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex a80fda355..583732e3a 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -20,14 +20,14 @@ import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvide\n import java.util.Optional;\n \n /**\n- * This service allows plugins to register Security Module which is abstraction of cryptographic\n- * operations by deferring to specific provider such as BouncyCastle\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n  */\n @Unstable\n public interface SecurityModuleService {\n \n   /**\n-   * Registers a factory as available for creating SecurityProvider instances.\n+   * Registers a provider of security modules.\n    *\n    * @param name The name to identify the Security Provider Supplier Function\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MTE2NA==", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411071164", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Registers a factory as available for creating SecurityProvider instances.\n          \n          \n            \n               * Registers a provider of security modules.", "author": "CjHare", "createdAt": "2020-04-20T03:36:28Z", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a factory as available for creating SecurityProvider instances.", "originalCommit": "25af953f801e5599c274add403d862d655f654e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26aebd30c67c6ac34170ae09dd98ad85a45d1ab6", "chunk": "diff --git a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\nindex a80fda355..583732e3a 100644\n--- a/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n+++ b/plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java\n\n@@ -20,14 +20,14 @@ import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvide\n import java.util.Optional;\n \n /**\n- * This service allows plugins to register Security Module which is abstraction of cryptographic\n- * operations by deferring to specific provider such as BouncyCastle\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n  */\n @Unstable\n public interface SecurityModuleService {\n \n   /**\n-   * Registers a factory as available for creating SecurityProvider instances.\n+   * Registers a provider of security modules.\n    *\n    * @param name The name to identify the Security Provider Supplier Function\n    * @param securityModuleProvider Register reference of SecurityModuleProvider.\n"}}, {"oid": "2487f0ffbaec4f4e1c28addd94691f2bc8829be3", "url": "https://github.com/hyperledger/besu/commit/2487f0ffbaec4f4e1c28addd94691f2bc8829be3", "message": "unextend SecurityModuleProvider from Functional.\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T04:37:58Z", "type": "commit"}, {"oid": "007b87ad8a1ff17f144fef39a49e36d52a8ac6e7", "url": "https://github.com/hyperledger/besu/commit/007b87ad8a1ff17f144fef39a49e36d52a8ac6e7", "message": "SecurityModuleException\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T04:44:56Z", "type": "commit"}, {"oid": "47ab014c5355e54f03d4a5df75d17155cf8d3935", "url": "https://github.com/hyperledger/besu/commit/47ab014c5355e54f03d4a5df75d17155cf8d3935", "message": "plugin checksum\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T04:45:23Z", "type": "commit"}, {"oid": "a6ae3a9eadb62a1eeb760f2df5b14a87d4809da5", "url": "https://github.com/hyperledger/besu/commit/a6ae3a9eadb62a1eeb760f2df5b14a87d4809da5", "message": "Use Runnable function reference to initialize besu configuration service from subcommand\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T05:05:02Z", "type": "commit"}, {"oid": "4943186269051fb24c282cbf2397c207b27c7409", "url": "https://github.com/hyperledger/besu/commit/4943186269051fb24c282cbf2397c207b27c7409", "message": "LocalFileSecurityModulePlugin - Use isDocker directly\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T05:19:48Z", "type": "commit"}, {"oid": "fc0be7f55b7be3c1766d621c6119afe6f8411f0b", "url": "https://github.com/hyperledger/besu/commit/fc0be7f55b7be3c1766d621c6119afe6f8411f0b", "message": "review - rename variable to nodeKey\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T05:26:19Z", "type": "commit"}, {"oid": "0a9525a7858455bc66767f532c0b9833787640ae", "url": "https://github.com/hyperledger/besu/commit/0a9525a7858455bc66767f532c0b9833787640ae", "message": "review - javadoc\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T05:37:09Z", "type": "commit"}, {"oid": "e2ff900e77ff7b564a986224169259b24e3caa85", "url": "https://github.com/hyperledger/besu/commit/e2ff900e77ff7b564a986224169259b24e3caa85", "message": "fix compilation issues\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T05:56:43Z", "type": "commit"}, {"oid": "c643c23c09c8763c925e9f329faf429493745788", "url": "https://github.com/hyperledger/besu/commit/c643c23c09c8763c925e9f329faf429493745788", "message": "use orElseGet\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T07:05:46Z", "type": "commit"}, {"oid": "30c52d1bd8ba6fa13782de80f7c812176b95f73e", "url": "https://github.com/hyperledger/besu/commit/30c52d1bd8ba6fa13782de80f7c812176b95f73e", "message": "settings.gradle ordering\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T07:07:35Z", "type": "commit"}, {"oid": "bb7bc22bf41d2c5bc025d0ff6f27c6179b7d7df5", "url": "https://github.com/hyperledger/besu/commit/bb7bc22bf41d2c5bc025d0ff6f27c6179b7d7df5", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T09:47:34Z", "type": "commit"}, {"oid": "1ad1c451aeeea49eacfe06dd27cedb47aea6174f", "url": "https://github.com/hyperledger/besu/commit/1ad1c451aeeea49eacfe06dd27cedb47aea6174f", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-20T23:57:54Z", "type": "commit"}, {"oid": "a9a42f4d4d51e43d88c192463d68f87fdbc4f4e7", "url": "https://github.com/hyperledger/besu/commit/a9a42f4d4d51e43d88c192463d68f87fdbc4f4e7", "message": "Expose ECPoint from PublicKey interface'\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T05:58:06Z", "type": "commit"}, {"oid": "860a411817d2b73d9a8bdc976935b24647e68de2", "url": "https://github.com/hyperledger/besu/commit/860a411817d2b73d9a8bdc976935b24647e68de2", "message": "ECPoint byte[] to BigInteger conversion padding\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:17:01Z", "type": "commit"}, {"oid": "91c90c9c7ea0ac07f3a51f14df4f26134305e95f", "url": "https://github.com/hyperledger/besu/commit/91c90c9c7ea0ac07f3a51f14df4f26134305e95f", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:17:22Z", "type": "commit"}, {"oid": "2aac7444b87e3fd667bb22a56ff225c3e03db997", "url": "https://github.com/hyperledger/besu/commit/2aac7444b87e3fd667bb22a56ff225c3e03db997", "message": "javadoc\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:19:09Z", "type": "commit"}, {"oid": "aa53c235ae3ef9b5ea1fda8ad2a45bbf12762385", "url": "https://github.com/hyperledger/besu/commit/aa53c235ae3ef9b5ea1fda8ad2a45bbf12762385", "message": "checksum\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:20:29Z", "type": "commit"}, {"oid": "715450d8613327c9669311ef69d9785c8a77d2b5", "url": "https://github.com/hyperledger/besu/commit/715450d8613327c9669311ef69d9785c8a77d2b5", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:24:01Z", "type": "commit"}, {"oid": "79b4f318e381e6b5de78fd535e77bc52515cef7d", "url": "https://github.com/hyperledger/besu/commit/79b4f318e381e6b5de78fd535e77bc52515cef7d", "message": "plugin checksum and final keyword\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T07:30:30Z", "type": "commit"}, {"oid": "ee26e5c4641f1e8ee16db3afb7bf08ce943fed39", "url": "https://github.com/hyperledger/besu/commit/ee26e5c4641f1e8ee16db3afb7bf08ce943fed39", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-21T23:53:57Z", "type": "commit"}, {"oid": "4bad3f593454bfe92e5e407e6055e0093f948c34", "url": "https://github.com/hyperledger/besu/commit/4bad3f593454bfe92e5e407e6055e0093f948c34", "message": "ECPointUtil unsigned x y\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-22T02:00:59Z", "type": "commit"}, {"oid": "4897a0ae6e3c21960d8631f1d97cfac605e0dbf7", "url": "https://github.com/hyperledger/besu/commit/4897a0ae6e3c21960d8631f1d97cfac605e0dbf7", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-22T02:19:00Z", "type": "commit"}, {"oid": "8b6589fb8e441a9c464033d16d9c89e288acfc00", "url": "https://github.com/hyperledger/besu/commit/8b6589fb8e441a9c464033d16d9c89e288acfc00", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-22T04:32:29Z", "type": "commit"}, {"oid": "3437e7f596e23d9974860e8ab07048819019a3ca", "url": "https://github.com/hyperledger/besu/commit/3437e7f596e23d9974860e8ab07048819019a3ca", "message": "merge upstream master\n\nSigned-off-by: Usman Saleem <usman@usmans.info>\n\n# Conflicts:\n#\tbesu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n#\tbesu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java", "committedDate": "2020-04-22T23:59:59Z", "type": "commit"}, {"oid": "24cccadbc284508cd559a79437655ad5642a8b16", "url": "https://github.com/hyperledger/besu/commit/24cccadbc284508cd559a79437655ad5642a8b16", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T00:08:16Z", "type": "commit"}, {"oid": "39deda8dcf4fce0ef4b89e67b1bcaf8d9f5201eb", "url": "https://github.com/hyperledger/besu/commit/39deda8dcf4fce0ef4b89e67b1bcaf8d9f5201eb", "message": "rename method\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T04:48:31Z", "type": "commit"}, {"oid": "c25d92149127a0a6d558a856b134ffe984031806", "url": "https://github.com/hyperledger/besu/commit/c25d92149127a0a6d558a856b134ffe984031806", "message": "Merge remote-tracking branch 'upstream/master' into nodekey_plugin\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T04:49:02Z", "type": "commit"}, {"oid": "d9fec183aca4a03e407813432e1e0317e8241cda", "url": "https://github.com/hyperledger/besu/commit/d9fec183aca4a03e407813432e1e0317e8241cda", "message": "Removing internal plugin and directly instantiating KeyPairSecurityModule\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T07:35:19Z", "type": "commit"}, {"oid": "afbc5884f586decad5b9754de50b2a746bfb2eab", "url": "https://github.com/hyperledger/besu/commit/afbc5884f586decad5b9754de50b2a746bfb2eab", "message": "removing internal plugin from acceptance dsl\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T07:41:06Z", "type": "commit"}, {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5", "url": "https://github.com/hyperledger/besu/commit/6283c0caf360d5421f08d469ef8a0518c59fbbb5", "message": "javadoc\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-04-23T07:52:10Z", "type": "commit"}]}