{"pr_number": 432, "pr_title": "Fix priv_getCode on multi-tenancy", "pr_createdAt": "2020-02-27T21:29:37Z", "pr_url": "https://github.com/hyperledger/besu/pull/432", "timeline": [{"oid": "55ebd626e9a236dcbe1b5c3f210d0950287b57cf", "url": "https://github.com/hyperledger/besu/commit/55ebd626e9a236dcbe1b5c3f210d0950287b57cf", "message": "Refactoring priv_getCode to use PrivacyController\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-02-27T21:27:30Z", "type": "commit"}, {"oid": "0d99f00466ee25d42099335c93b109b1d1c7f20b", "url": "https://github.com/hyperledger/besu/commit/0d99f00466ee25d42099335c93b109b1d1c7f20b", "message": "Changing getContractCode to accept a hash instead of block number\n\nThis also handles the case when the block parameter corresponds\nto a block that doesn't exist.\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-02-27T21:27:30Z", "type": "commit"}, {"oid": "c2495dbab86bf7231561abfb3249066c83eed3a9", "url": "https://github.com/hyperledger/besu/commit/c2495dbab86bf7231561abfb3249066c83eed3a9", "message": "Created PrivateWorldStateReader with getContractCode method\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-02-27T21:27:30Z", "type": "commit"}, {"oid": "34ce17d7991487ed666221dbcb77b458998d8515", "url": "https://github.com/hyperledger/besu/commit/34ce17d7991487ed666221dbcb77b458998d8515", "message": "PrivGetCode AT\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-02-27T21:27:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE1MDQwMw==", "url": "https://github.com/hyperledger/besu/pull/432#discussion_r386150403", "bodyText": "I assume this is a random enclave key. Could we use a constant here?", "author": "pinges", "createdAt": "2020-03-01T23:11:04Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetCodeTest.java", "diffHunk": "@@ -51,98 +44,79 @@\n @RunWith(MockitoJUnitRunner.class)\n public class PrivGetCodeTest {\n \n-  private final Address sender =\n-      Address.fromHexString(\"0x0000000000000000000000000000000000000003\");\n-  private static final SECP256K1.KeyPair KEY_PAIR =\n-      SECP256K1.KeyPair.create(\n-          SECP256K1.PrivateKey.create(\n-              new BigInteger(\n-                  \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\", 16)));\n-\n-  private final Bytes privacyGroupId =\n-      Bytes.fromBase64String(\"Ko2bVqD+nNlNYL5EE7y3IdOnviftjiizpjRt+HTuFBs=\");\n-\n-  private final PrivateTransaction.Builder privateTransactionBuilder =\n-      PrivateTransaction.builder()\n-          .nonce(0)\n-          .gasPrice(Wei.of(1000))\n-          .gasLimit(3000000)\n-          .to(null)\n-          .value(Wei.ZERO)\n-          .payload(\n-              Bytes.fromBase64String(\n-                  \"0x608060405234801561001057600080fd5b5060d08061001f60003960\"\n-                      + \"00f3fe60806040526004361060485763ffffffff7c01000000\"\n-                      + \"00000000000000000000000000000000000000000000000000\"\n-                      + \"60003504166360fe47b18114604d5780636d4ce63c14607557\"\n-                      + \"5b600080fd5b348015605857600080fd5b5060736004803603\"\n-                      + \"6020811015606d57600080fd5b50356099565b005b34801560\"\n-                      + \"8057600080fd5b506087609e565b6040805191825251908190\"\n-                      + \"0360200190f35b600055565b6000549056fea165627a7a7230\"\n-                      + \"5820cb1d0935d14b589300b12fcd0ab849a7e9019c81da24d6\"\n-                      + \"daa4f6b2f003d1b0180029\"))\n-          .sender(sender)\n-          .chainId(BigInteger.valueOf(2018))\n-          .privateFrom(Bytes.fromBase64String(\"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\"))\n-          .restriction(Restriction.RESTRICTED);\n-\n-  private PrivGetCode method;\n-\n+  @Mock private PrivacyController privacyController;\n   @Mock private BlockchainQueries mockBlockchainQueries;\n-  @Mock private Blockchain mockBlockchain;\n-  @Mock private Block mockBlock;\n-  @Mock private Hash mockHash;\n-  @Mock private PrivateStateRootResolver mockResolver;\n-  @Mock private WorldStateArchive mockPrivateWorldStateArchive;\n-  @Mock private WorldState mockWorldState;\n-  @Mock private Account mockAccount;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n \n-  private final Hash lastStateRoot =\n-      Hash.fromHexString(\"0x2121b68f1333e93bae8cd717a3ca68c9d7e7003f6b288c36dfc59b0f87be9590\");\n+  private final Hash latestBlockHash = Hash.ZERO;\n+  private final String privacyGroupId = \"Ko2bVqD+nNlNYL5EE7y3IdOnviftjiizpjRt+HTuFBs=\";\n+  private final Address contractAddress =\n+      Address.fromHexString(\"f17f52151EbEF6C7334FAD080c5704D77216b732\");\n+  private final Bytes contractCode = Bytes.fromBase64String(\"ZXhhbXBsZQ==\");\n \n-  private final Bytes contractAccountCode = Bytes.fromBase64String(\"ZXhhbXBsZQ==\");\n+  private PrivGetCode method;\n+  private JsonRpcRequestContext privGetCodeRequest;\n \n   @Before\n   public void before() {\n-    method = new PrivGetCode(mockBlockchainQueries, mockPrivateWorldStateArchive, mockResolver);\n+    when(enclavePublicKeyProvider.getEnclaveKey(any()))\n+        .thenReturn(\"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\");", "originalCommit": "34ce17d7991487ed666221dbcb77b458998d8515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9070625931e5281d14330975801aaa4d9a308a44", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetCodeTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetCodeTest.java\nindex 5e080835e..5feebc6b4 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetCodeTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetCodeTest.java\n\n@@ -49,6 +49,7 @@ public class PrivGetCodeTest {\n   @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n \n   private final Hash latestBlockHash = Hash.ZERO;\n+  private final String enclavePublicKey = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n   private final String privacyGroupId = \"Ko2bVqD+nNlNYL5EE7y3IdOnviftjiizpjRt+HTuFBs=\";\n   private final Address contractAddress =\n       Address.fromHexString(\"f17f52151EbEF6C7334FAD080c5704D77216b732\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE1MjE4Nw==", "url": "https://github.com/hyperledger/besu/pull/432#discussion_r386152187", "bodyText": "There are multiple cases where we do return an empty optional. I guess there is no way to distinguish between these cases, but to check the logs?", "author": "pinges", "createdAt": "2020-03-01T23:31:18Z", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/PrivateWorldStateReaderTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.WorldState;\n+import org.hyperledger.besu.ethereum.worldstate.WorldStateArchive;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivateWorldStateReaderTest {\n+\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Bytes32 privacyGroupBytes = Bytes32.wrap(Bytes.fromBase64String(PRIVACY_GROUP_ID));\n+  private final Bytes contractCode = Bytes.fromBase64String(\"ZXhhbXBsZQ==\");\n+  private final Address contractAddress = Address.ZERO;\n+  private final Hash blockHash = Hash.ZERO;\n+  private final Hash stateRootHash = Hash.ZERO;\n+\n+  @Mock private PrivateStateRootResolver privateStateRootResolver;\n+  @Mock private WorldStateArchive privateWorldStateArchive;\n+  @Mock private WorldState privateWorldState;\n+  @Mock private Account contractAccount;\n+\n+  private PrivateWorldStateReader privateWorldStateReader;\n+\n+  @Before\n+  public void before() {\n+    privateWorldStateReader =\n+        new PrivateWorldStateReader(privateStateRootResolver, privateWorldStateArchive);\n+  }\n+\n+  @Test\n+  public void absentPrivateWorldStateReturnsEmpty() {\n+    final Bytes32 privacyGroupBytes = Bytes32.wrap(Bytes.fromBase64String(PRIVACY_GROUP_ID));\n+    final Address contractAddress = Address.ZERO;\n+\n+    when(privateStateRootResolver.resolveLastStateRoot(eq(privacyGroupBytes), eq(blockHash)))\n+        .thenReturn(stateRootHash);\n+    when(privateWorldStateArchive.get(eq(stateRootHash))).thenReturn(Optional.empty());\n+\n+    final Optional<Bytes> maybecontractCode =\n+        privateWorldStateReader.getContractCode(PRIVACY_GROUP_ID, blockHash, contractAddress);\n+\n+    assertThat(maybecontractCode).isNotPresent();\n+  }\n+\n+  @Test\n+  public void absentAccountReturnsEmpty() {\n+    final Bytes32 privacyGroupBytes = Bytes32.wrap(Bytes.fromBase64String(PRIVACY_GROUP_ID));\n+    final Address contractAddress = Address.ZERO;\n+\n+    when(privateStateRootResolver.resolveLastStateRoot(eq(privacyGroupBytes), eq(blockHash)))\n+        .thenReturn(stateRootHash);\n+    when(privateWorldStateArchive.get(eq(stateRootHash)))\n+        .thenReturn(Optional.of(privateWorldState));\n+    when(privateWorldState.get(eq(contractAddress))).thenReturn(null);\n+\n+    final Optional<Bytes> maybeContractCode =\n+        privateWorldStateReader.getContractCode(PRIVACY_GROUP_ID, blockHash, contractAddress);\n+\n+    assertThat(maybeContractCode).isNotPresent();", "originalCommit": "34ce17d7991487ed666221dbcb77b458998d8515", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE1MjYzNw==", "url": "https://github.com/hyperledger/besu/pull/432#discussion_r386152637", "bodyText": "You are right. There are different conditions that can lead to an empty result and in most cases, we can't really provide extra info to the user.", "author": "lucassaldanha", "createdAt": "2020-03-01T23:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE1MjE4Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9070625931e5281d14330975801aaa4d9a308a44", "url": "https://github.com/hyperledger/besu/commit/9070625931e5281d14330975801aaa4d9a308a44", "message": "PR comments\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-03-01T23:51:14Z", "type": "commit"}, {"oid": "d5a1d1ccf0cec2a81fc4709daf38eaff66b0fe7d", "url": "https://github.com/hyperledger/besu/commit/d5a1d1ccf0cec2a81fc4709daf38eaff66b0fe7d", "message": "Merge branch 'master' into fix-priv-get-code\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-03-02T00:05:09Z", "type": "commit"}]}