{"pr_number": 1633, "pr_title": "Add epochStartBlock function to EpochCalculator interface", "pr_createdAt": "2020-11-28T15:39:06Z", "pr_url": "https://github.com/hyperledger/besu/pull/1633", "timeline": [{"oid": "39378646a4048f198a9da30ba809d0239bbb74c1", "url": "https://github.com/hyperledger/besu/commit/39378646a4048f198a9da30ba809d0239bbb74c1", "message": "expose epochCalculator to MiningCoordinator\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-24T22:49:22Z", "type": "commit"}, {"oid": "99c83d3db55fe318b53999bfd451a331a1b0bf15", "url": "https://github.com/hyperledger/besu/commit/99c83d3db55fe318b53999bfd451a331a1b0bf15", "message": "replace epochCalculator Function with interface\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-27T15:47:22Z", "type": "commit"}, {"oid": "6f87b84822b9b9a0f165356f96c4c7335838f5a6", "url": "https://github.com/hyperledger/besu/commit/6f87b84822b9b9a0f165356f96c4c7335838f5a6", "message": "apply spotless, clean-up tests\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-27T19:44:15Z", "type": "commit"}, {"oid": "1fe9381c31a8531590b259052d7bde5fe92a56b7", "url": "https://github.com/hyperledger/besu/commit/1fe9381c31a8531590b259052d7bde5fe92a56b7", "message": "cleanup comments, fix more tests\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-27T22:24:13Z", "type": "commit"}, {"oid": "3d9fb48848a64b7c24f412cae0d89912b17992e7", "url": "https://github.com/hyperledger/besu/commit/3d9fb48848a64b7c24f412cae0d89912b17992e7", "message": "fixing failures from testing\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T00:04:26Z", "type": "commit"}, {"oid": "e50fb41e4d6691fdc8677b3e405d724c2338c13f", "url": "https://github.com/hyperledger/besu/commit/e50fb41e4d6691fdc8677b3e405d724c2338c13f", "message": "modify dagSeed calculator to use epochCalculator\n\nepochStartBlock to determine epoch start block based on current epoch\nlength.\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T14:10:29Z", "type": "commit"}, {"oid": "ebc8e062bb3299db68116db3108c2d6c296c08f1", "url": "https://github.com/hyperledger/besu/commit/ebc8e062bb3299db68116db3108c2d6c296c08f1", "message": "add epochCalculator to StratumConnectionTest\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T14:41:13Z", "type": "commit"}, {"oid": "9e3284ee4a1b138f792686e3a8db7af9d1d82783", "url": "https://github.com/hyperledger/besu/commit/9e3284ee4a1b138f792686e3a8db7af9d1d82783", "message": "apply spotless\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T15:05:03Z", "type": "commit"}, {"oid": "0ebf97d2b06275b1faa403340f10895e63a218a8", "url": "https://github.com/hyperledger/besu/commit/0ebf97d2b06275b1faa403340f10895e63a218a8", "message": "remove unnecessary comments\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T15:21:28Z", "type": "commit"}, {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198", "url": "https://github.com/hyperledger/besu/commit/1fbfe3214ae172652b6e3233ebc9087d99618198", "message": "Merge branch 'master' into ed/update_dagSeed", "committedDate": "2020-11-28T15:42:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTA5OA==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105098", "bodyText": "For better or worse this RPC is instantiated for non-pow networks.  We need to initialize default values if it is not a PoW miner:\n  public EthGetWork(final MiningCoordinator miner) {\n    this.miner = miner;\n    if (miner instanceof EthHashMiningCoordinator) {\n      this.epochCalculator = ((EthHashMiningCoordinator) miner).getEpochCalculator();\n    } else {\n      this.epochCalculator = new EpochCalculator.DefaultEpochCalculator();\n    }\n  }", "author": "shemnon", "createdAt": "2020-11-28T20:49:27Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java", "diffHunk": "@@ -36,9 +38,14 @@\n \n   private final MiningCoordinator miner;\n   private static final Logger LOG = getLogger();\n+  private final EpochCalculator epochCalculator;\n \n   public EthGetWork(final MiningCoordinator miner) {\n+    if (!(miner instanceof EthHashMiningCoordinator)) {", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjExOTk4MA==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532119980", "bodyText": "I've updated this.", "author": "edwardmack", "createdAt": "2020-11-28T23:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4f2891d302dcc8bb462df9d6ba77ee19c80585c6", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java\nindex 72bbcb36e..dce139c53 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java\n\n@@ -41,11 +41,12 @@ public class EthGetWork implements JsonRpcMethod {\n   private final EpochCalculator epochCalculator;\n \n   public EthGetWork(final MiningCoordinator miner) {\n-    if (!(miner instanceof EthHashMiningCoordinator)) {\n-      throw new IllegalArgumentException();\n-    }\n     this.miner = miner;\n-    this.epochCalculator = ((EthHashMiningCoordinator) miner).getEpochCalculator();\n+    if (miner instanceof EthHashMiningCoordinator) {\n+      this.epochCalculator = ((EthHashMiningCoordinator) miner).getEpochCalculator();\n+    } else {\n+      this.epochCalculator = new EpochCalculator.DefaultEpochCalculator();\n+    }\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTIzNg==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105236", "bodyText": "We don't need activationBlock, and it runs against the patterns used in other hard fork configuration objects so it should be removed along with all dependents.  The Protocol Schedules will ensure that this calculator is only applied to thanos blocks and that for classic blocks pre-thanos a default epoch calculator is used.", "author": "shemnon", "createdAt": "2020-11-28T20:50:29Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDA5Mg==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120092", "bodyText": "I should have realized this wasn't needed.  It's much cleaner now without having to pass activationBlock around.", "author": "edwardmack", "createdAt": "2020-11-28T23:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "424e956dfe163ba3b282e1d81cd66de5ff398355", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\nindex 6e907a62a..8dea361f2 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n\n@@ -33,26 +33,22 @@ public interface EpochCalculator {\n   }\n \n   final class Ecip1099EpochCalculator implements EpochCalculator {\n-    private final long activationBlock;\n+    // private final long activationBlock;\n \n-    public Ecip1099EpochCalculator(final long activationBlock) {\n-      this.activationBlock = activationBlock;\n-    }\n+    //    public Ecip1099EpochCalculator(final long activationBlock) {\n+    //      this.activationBlock = activationBlock;\n+    //    }\n \n     /** calculate start block given epoch */\n     @Override\n     public long epochStartBlock(final long block) {\n       long epoch = cacheEpoch(block);\n-      return block < activationBlock\n-          ? epoch * EthHash.EPOCH_LENGTH + 1\n-          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n+      return epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n     }\n \n     @Override\n     public long cacheEpoch(final long block) {\n-      return block < activationBlock\n-          ? Long.divideUnsigned(block, EthHash.EPOCH_LENGTH)\n-          : Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTM4OA==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105388", "bodyText": "Just the second clause should remain.", "author": "shemnon", "createdAt": "2020-11-28T20:51:46Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;\n+\n+    public Ecip1099EpochCalculator(final long activationBlock) {\n+      this.activationBlock = activationBlock;\n+    }\n+\n+    /** calculate start block given epoch */\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      long epoch = cacheEpoch(block);\n+      return block < activationBlock\n+          ? epoch * EthHash.EPOCH_LENGTH + 1\n+          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "424e956dfe163ba3b282e1d81cd66de5ff398355", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\nindex 6e907a62a..8dea361f2 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n\n@@ -33,26 +33,22 @@ public interface EpochCalculator {\n   }\n \n   final class Ecip1099EpochCalculator implements EpochCalculator {\n-    private final long activationBlock;\n+    // private final long activationBlock;\n \n-    public Ecip1099EpochCalculator(final long activationBlock) {\n-      this.activationBlock = activationBlock;\n-    }\n+    //    public Ecip1099EpochCalculator(final long activationBlock) {\n+    //      this.activationBlock = activationBlock;\n+    //    }\n \n     /** calculate start block given epoch */\n     @Override\n     public long epochStartBlock(final long block) {\n       long epoch = cacheEpoch(block);\n-      return block < activationBlock\n-          ? epoch * EthHash.EPOCH_LENGTH + 1\n-          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n+      return epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n     }\n \n     @Override\n     public long cacheEpoch(final long block) {\n-      return block < activationBlock\n-          ? Long.divideUnsigned(block, EthHash.EPOCH_LENGTH)\n-          : Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTQwMg==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105402", "bodyText": "Just the second clause should remain.", "author": "shemnon", "createdAt": "2020-11-28T20:51:55Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;\n+\n+    public Ecip1099EpochCalculator(final long activationBlock) {\n+      this.activationBlock = activationBlock;\n+    }\n+\n+    /** calculate start block given epoch */\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      long epoch = cacheEpoch(block);\n+      return block < activationBlock\n+          ? epoch * EthHash.EPOCH_LENGTH + 1\n+          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return block < activationBlock\n+          ? Long.divideUnsigned(block, EthHash.EPOCH_LENGTH)\n+          : Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "424e956dfe163ba3b282e1d81cd66de5ff398355", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\nindex 6e907a62a..8dea361f2 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java\n\n@@ -33,26 +33,22 @@ public interface EpochCalculator {\n   }\n \n   final class Ecip1099EpochCalculator implements EpochCalculator {\n-    private final long activationBlock;\n+    // private final long activationBlock;\n \n-    public Ecip1099EpochCalculator(final long activationBlock) {\n-      this.activationBlock = activationBlock;\n-    }\n+    //    public Ecip1099EpochCalculator(final long activationBlock) {\n+    //      this.activationBlock = activationBlock;\n+    //    }\n \n     /** calculate start block given epoch */\n     @Override\n     public long epochStartBlock(final long block) {\n       long epoch = cacheEpoch(block);\n-      return block < activationBlock\n-          ? epoch * EthHash.EPOCH_LENGTH + 1\n-          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n+      return epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n     }\n \n     @Override\n     public long cacheEpoch(final long block) {\n-      return block < activationBlock\n-          ? Long.divideUnsigned(block, EthHash.EPOCH_LENGTH)\n-          : Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTU0OA==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105548", "bodyText": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.", "author": "shemnon", "createdAt": "2020-11-28T20:53:47Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "diffHunk": "@@ -35,7 +35,7 @@\n             }\n           });\n \n-  public static byte[] dagSeed(final long block) {\n+  private static byte[] dagSeed(final long block) {", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDE2Ng==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120166", "bodyText": "Done.", "author": "edwardmack", "createdAt": "2020-11-28T23:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a445c974e1eec75dfb0129760bcbe54063027598", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\nindex 60ee446e7..b2c344da1 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\n\n@@ -35,11 +35,19 @@ public class DirectAcyclicGraphSeed {\n             }\n           });\n \n-  private static byte[] dagSeed(final long block) {\n+  /**\n+   * Calculates dog seed to use for generating a verification cache and the mining dataset.\n+   *\n+   * @param block that the dag seed is calculated for\n+   * @param epochCalculator used to determine starting block for epoch\n+   * @return dag seed\n+   */\n+  public static byte[] dagSeed(final long block, final EpochCalculator epochCalculator) {\n+    long startBlock = epochCalculator.epochStartBlock(block);\n     final byte[] seed = new byte[32];\n-    if (Long.compareUnsigned(block, EPOCH_LENGTH) >= 0) {\n+    if (Long.compareUnsigned(startBlock, EPOCH_LENGTH) >= 0) {\n       final MessageDigest keccak256 = KECCAK_256.get();\n-      for (int i = 0; i < Long.divideUnsigned(block, EPOCH_LENGTH); ++i) {\n+      for (int i = 0; i < Long.divideUnsigned(startBlock, EPOCH_LENGTH); ++i) {\n         keccak256.update(seed);\n         try {\n           keccak256.digest(seed, 0, seed.length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTY2Nw==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105667", "bodyText": "dog->dag\n\ud83d\udc36", "author": "shemnon", "createdAt": "2020-11-28T20:55:06Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "diffHunk": "@@ -50,4 +50,16 @@\n     }\n     return seed;\n   }\n+\n+  /**\n+   * Calculates dog seed to use for generating a verification cache and the mining dataset.", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a445c974e1eec75dfb0129760bcbe54063027598", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\nindex 60ee446e7..b2c344da1 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java\n\n@@ -50,16 +58,4 @@ public class DirectAcyclicGraphSeed {\n     }\n     return seed;\n   }\n-\n-  /**\n-   * Calculates dog seed to use for generating a verification cache and the mining dataset.\n-   *\n-   * @param block that the dag seed is calculated for\n-   * @param epochCalculator used to determine starting block for epoch\n-   * @return dag seed\n-   */\n-  public static byte[] dagSeed(final long block, final EpochCalculator epochCalculator) {\n-    long startBlock = epochCalculator.epochStartBlock(block);\n-    return dagSeed(startBlock);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjI4Mg==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106282", "bodyText": "(a) rather than testing a before/after activation block (which per another comment I think we should get rid of the activation block) we should test early (somewhere in the first 30k blocks) vs late (somewhere in the last 30k blocks)\n(b) we don't test epochStartBlock, this seems like a reasonable place to add that as a unit test.", "author": "shemnon", "createdAt": "2020-11-28T21:01:20Z", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java", "diffHunk": "@@ -14,21 +14,19 @@\n  */\n package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.util.function.Function;\n-\n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n public class EtcHashTest {\n \n   @Test\n   public void testEpoch() {\n-    Function<Long, Long> epochCalculator = EthHash.ecip1099Epoch(2_000_000);\n+    EpochCalculator epochCalculator = new EpochCalculator.Ecip1099EpochCalculator(2_000_000);\n \n     // check before activation block (1,000,000/30,000 = 33)\n-    Assertions.assertThat(epochCalculator.apply(1_000_000L)).isEqualTo(33);", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDE5Ng==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120196", "bodyText": "Tests added.", "author": "edwardmack", "createdAt": "2020-11-28T23:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "424e956dfe163ba3b282e1d81cd66de5ff398355", "chunk": "diff --git a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java\nindex 01c54aeff..d1223dea5 100644\n--- a/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java\n+++ b/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java\n\n@@ -20,13 +20,24 @@ import org.junit.Test;\n public class EtcHashTest {\n \n   @Test\n-  public void testEpoch() {\n-    EpochCalculator epochCalculator = new EpochCalculator.Ecip1099EpochCalculator(2_000_000);\n+  public void testDefaultEpochCalculator() {\n+    EpochCalculator epochCalculator = new EpochCalculator.DefaultEpochCalculator();\n \n-    // check before activation block (1,000,000/30,000 = 33)\n-    Assertions.assertThat(epochCalculator.cacheEpoch(1_000_000L)).isEqualTo(33);\n+    // check before epoch 1\n+    Assertions.assertThat(epochCalculator.cacheEpoch(29_999L)).isEqualTo(0);\n \n-    // check after activation block (3,000,000/60,000 = 50)\n-    Assertions.assertThat(epochCalculator.cacheEpoch(3_000_000L)).isEqualTo(50);\n+    // check at epoch 1\n+    Assertions.assertThat(epochCalculator.cacheEpoch(30_000L)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void testEcip1099EpochCalculator() {\n+    EpochCalculator epochCalculator = new EpochCalculator.Ecip1099EpochCalculator();\n+\n+    // check before epoch 1\n+    Assertions.assertThat(epochCalculator.cacheEpoch(59_999L)).isEqualTo(0);\n+\n+    // check at epoch 1\n+    Assertions.assertThat(epochCalculator.cacheEpoch(60_000L)).isEqualTo(1);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjUxOQ==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106519", "bodyText": "We need a message in this throw, something like \"Stratum1 Proxies require an EthHashMiningCoordinator not \" + (miningCoordinator == null) ? \"null\" : miningCoordinator.getClass().getName()", "author": "shemnon", "createdAt": "2020-11-28T21:04:13Z", "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java", "diffHunk": "@@ -49,9 +51,14 @@\n   private final MiningCoordinator miningCoordinator;\n   private EthHashSolverInputs currentInput;\n   private Function<EthHashSolution, Boolean> submitCallback;\n+  private final EpochCalculator epochCalculator;\n \n   public Stratum1EthProxyProtocol(final MiningCoordinator miningCoordinator) {\n+    if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n+      throw new IllegalArgumentException();", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f2891d302dcc8bb462df9d6ba77ee19c80585c6", "chunk": "diff --git a/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java b/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java\nindex f721b91c1..6c93572e2 100644\n--- a/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java\n+++ b/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java\n\n@@ -55,7 +55,9 @@ public class Stratum1EthProxyProtocol implements StratumProtocol {\n \n   public Stratum1EthProxyProtocol(final MiningCoordinator miningCoordinator) {\n     if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n-      throw new IllegalArgumentException();\n+      throw new IllegalArgumentException(\n+          \"Stratum1 Proxies require an EthHashMiningCoordinator not \"\n+              + ((miningCoordinator == null) ? \"null\" : miningCoordinator.getClass().getName()));\n     }\n     this.miningCoordinator = miningCoordinator;\n     this.epochCalculator = ((EthHashMiningCoordinator) miningCoordinator).getEpochCalculator();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjU2NA==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106564", "bodyText": "Again, the exception needs a message.", "author": "shemnon", "createdAt": "2020-11-28T21:04:31Z", "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java", "diffHunk": "@@ -80,10 +83,14 @@ public Stratum1Protocol(final String extranonce, final MiningCoordinator miningC\n       final MiningCoordinator miningCoordinator,\n       final Supplier<String> jobIdSupplier,\n       final Supplier<String> subscriptionIdCreator) {\n+    if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n+      throw new IllegalArgumentException();", "originalCommit": "1fbfe3214ae172652b6e3233ebc9087d99618198", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f2891d302dcc8bb462df9d6ba77ee19c80585c6", "chunk": "diff --git a/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java b/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java\nindex acb4a0141..5189ca188 100644\n--- a/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java\n+++ b/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java\n\n@@ -84,7 +84,9 @@ public class Stratum1Protocol implements StratumProtocol {\n       final Supplier<String> jobIdSupplier,\n       final Supplier<String> subscriptionIdCreator) {\n     if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n-      throw new IllegalArgumentException();\n+      throw new IllegalArgumentException(\n+          \"Stratum1 requires an EthHashMiningCoordinator not \"\n+              + ((miningCoordinator == null) ? \"null\" : miningCoordinator.getClass().getName()));\n     }\n     this.extranonce = extranonce;\n     this.miningCoordinator = miningCoordinator;\n"}}, {"oid": "424e956dfe163ba3b282e1d81cd66de5ff398355", "url": "https://github.com/hyperledger/besu/commit/424e956dfe163ba3b282e1d81cd66de5ff398355", "message": "remove activation block from Ecip1099EpochCalculator\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T23:08:26Z", "type": "commit"}, {"oid": "4f2891d302dcc8bb462df9d6ba77ee19c80585c6", "url": "https://github.com/hyperledger/besu/commit/4f2891d302dcc8bb462df9d6ba77ee19c80585c6", "message": "add messages to IllegalArgumentExceptions, init epochCalculator\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T23:24:33Z", "type": "commit"}, {"oid": "a445c974e1eec75dfb0129760bcbe54063027598", "url": "https://github.com/hyperledger/besu/commit/a445c974e1eec75dfb0129760bcbe54063027598", "message": "un-wrap private dagSeed method\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T23:29:01Z", "type": "commit"}, {"oid": "2239b1d625bfdca66dd500450eaec8c0356fca4d", "url": "https://github.com/hyperledger/besu/commit/2239b1d625bfdca66dd500450eaec8c0356fca4d", "message": "fix typo\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T23:30:48Z", "type": "commit"}, {"oid": "4e60cbe28b0d126079367c6a4e7e25e4221523ff", "url": "https://github.com/hyperledger/besu/commit/4e60cbe28b0d126079367c6a4e7e25e4221523ff", "message": "add unit tests for epochStartBlock functions\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-28T23:40:31Z", "type": "commit"}, {"oid": "2fccc18586b6fe8796310d8ff6361a67f3783c48", "url": "https://github.com/hyperledger/besu/commit/2fccc18586b6fe8796310d8ff6361a67f3783c48", "message": "Merge branch 'ed/update_dagSeed' of https://github.com/ChainSafe/besu into ed/update_dagSeed", "committedDate": "2020-11-28T23:42:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEzOTk5OQ==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532139999", "bodyText": "This field is unused.", "author": "shemnon", "createdAt": "2020-11-29T03:01:14Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -220,7 +220,8 @@ public static ProtocolSpecBuilder thanosDefinition(\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason,\n       final OptionalLong ecip1017EraRounds,\n-      final boolean quorumCompatibilityMode) {\n+      final boolean quorumCompatibilityMode,\n+      final OptionalLong activationBlock) {", "originalCommit": "2fccc18586b6fe8796310d8ff6361a67f3783c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e5e787426bb5ae66682e933a6bc6a780e2e8a30", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java\nindex bc7fb8fba..079d27d84 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java\n\n@@ -220,8 +220,7 @@ public class ClassicProtocolSpecs {\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason,\n       final OptionalLong ecip1017EraRounds,\n-      final boolean quorumCompatibilityMode,\n-      final OptionalLong activationBlock) {\n+      final boolean quorumCompatibilityMode) {\n     return phoenixDefinition(\n             chainId,\n             configContractSizeLimit,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE0MDU3OQ==", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532140579", "bodyText": "This field is not needed.", "author": "shemnon", "createdAt": "2020-11-29T03:01:59Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java", "diffHunk": "@@ -306,7 +306,8 @@ public ProtocolSchedule createProtocolSchedule() {\n             config.getEvmStackSize(),\n             isRevertReasonEnabled,\n             config.getEcip1017EraRounds(),\n-            quorumCompatibilityMode));\n+            quorumCompatibilityMode,\n+            config.getThanosBlockNumber()));", "originalCommit": "2fccc18586b6fe8796310d8ff6361a67f3783c48", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e5e787426bb5ae66682e933a6bc6a780e2e8a30", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java\nindex b93dfe87d..093d31488 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java\n\n@@ -306,8 +306,7 @@ public class ProtocolScheduleBuilder {\n             config.getEvmStackSize(),\n             isRevertReasonEnabled,\n             config.getEcip1017EraRounds(),\n-            quorumCompatibilityMode,\n-            config.getThanosBlockNumber()));\n+            quorumCompatibilityMode));\n \n     LOG.info(\"Protocol schedule created with milestones: {}\", protocolSchedule.listMilestones());\n     return protocolSchedule;\n"}}, {"oid": "0e5e787426bb5ae66682e933a6bc6a780e2e8a30", "url": "https://github.com/hyperledger/besu/commit/0e5e787426bb5ae66682e933a6bc6a780e2e8a30", "message": "remove unused field\n\nSigned-off-by: Edward Mack <ed@edwardmack.com>", "committedDate": "2020-11-29T12:56:46Z", "type": "commit"}]}