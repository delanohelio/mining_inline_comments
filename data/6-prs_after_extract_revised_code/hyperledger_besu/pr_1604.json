{"pr_number": 1604, "pr_title": "separate current functionality into two classes (on-chain and off-chain privacy)", "pr_createdAt": "2020-11-25T01:36:14Z", "pr_url": "https://github.com/hyperledger/besu/pull/1604", "timeline": [{"oid": "8e524d1de6f92efc1b5ef8070d992c0ca1d42105", "url": "https://github.com/hyperledger/besu/commit/8e524d1de6f92efc1b5ef8070d992c0ca1d42105", "message": "separate current functionality into two classes (on-chain and off-chain privacy)\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-25T01:13:58Z", "type": "commit"}, {"oid": "31ab1334151ae86dc11ca7b4f3c96eb36b30f3a2", "url": "https://github.com/hyperledger/besu/commit/31ab1334151ae86dc11ca7b4f3c96eb36b30f3a2", "message": "separate current functionality into two classes (on-chain and off-chain privacy)\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-25T02:50:49Z", "type": "commit"}, {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "url": "https://github.com/hyperledger/besu/commit/eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "message": "separate current functionality into two classes (on-chain and off-chain privacy)\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-25T03:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk2NQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530669965", "bodyText": "We don't need the privacyController as a parameter as it is a field of the class.", "author": "lucassaldanha", "createdAt": "2020-11-25T22:16:24Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -94,19 +84,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n \n       final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n \n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroupId.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n-      }\n-\n       final Optional<PrivacyGroup> maybePrivacyGroup =\n-          onchainPrivacyGroupsEnabled\n-              ? findOnchainPrivacyGroup(\n-                  privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction)\n-              : findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n-\n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroup.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n-      }\n+          findPrivacyGroup(\n+              privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDM2MQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530700361", "bodyText": "Good catch! Fixed!", "author": "pinges", "createdAt": "2020-11-26T00:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\nindex 6dc817243..da32280e9 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n\n@@ -85,8 +84,7 @@ public class EeaSendRawTransaction implements JsonRpcMethod {\n       final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n \n       final Optional<PrivacyGroup> maybePrivacyGroup =\n-          findPrivacyGroup(\n-              privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+          findPrivacyGroup(maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n \n       final ValidationResult<TransactionInvalidReason> validationResult =\n           privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MjQ1OA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530672458", "bodyText": "The tests for OnChainEeaSendRawTransaction should be in a class named OnChainEeaSendRawTransactionTest.", "author": "lucassaldanha", "createdAt": "2020-11-25T22:23:22Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -238,8 +237,8 @@ public void validTransactionPrivacyGroupIsSentToTransactionPool() {\n   @Test\n   public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n     method =\n-        new EeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider, true);\n+        new OnChainEeaSendRawTransaction(", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNzk1MA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530707950", "bodyText": "Done", "author": "pinges", "createdAt": "2020-11-26T00:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\nindex e9992395a..82778569f 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\n\n@@ -234,70 +231,6 @@ public class EeaSendRawTransactionTest {\n     verify(transactionPool).addLocalTransaction(any(Transaction.class));\n   }\n \n-  @Test\n-  public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n-    method =\n-        new OnChainEeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider);\n-\n-    when(privacyController.sendTransaction(any(PrivateTransaction.class), any(), any()))\n-        .thenReturn(MOCK_ORION_KEY);\n-    when(privacyController.validatePrivateTransaction(\n-            any(PrivateTransaction.class), any(String.class)))\n-        .thenReturn(ValidationResult.valid());\n-    final Optional<PrivacyGroup> optionalPrivacyGroup =\n-        Optional.of(\n-            new PrivacyGroup(\n-                \"\", PrivacyGroup.Type.ONCHAIN, \"\", \"\", Arrays.asList(ENCLAVE_PUBLIC_KEY)));\n-    when(privacyController.retrieveOnChainPrivacyGroupWithToBeAddedMembers(any(), any(), any()))\n-        .thenReturn(optionalPrivacyGroup);\n-    when(privacyController.createPrivacyMarkerTransaction(\n-            any(String.class), any(PrivateTransaction.class), any(Address.class)))\n-        .thenReturn(PUBLIC_TRANSACTION);\n-    when(transactionPool.addLocalTransaction(any(Transaction.class)))\n-        .thenReturn(ValidationResult.valid());\n-\n-    final JsonRpcRequestContext request =\n-        new JsonRpcRequestContext(\n-            new JsonRpcRequest(\n-                \"2.0\",\n-                \"eea_sendRawTransaction\",\n-                new String[] {VALID_PRIVATE_TRANSACTION_RLP_PRIVACY_GROUP}));\n-\n-    final JsonRpcResponse expectedResponse =\n-        new JsonRpcSuccessResponse(\n-            request.getRequest().getId(),\n-            \"0x221e930a2c18d91fca4d509eaa3512f3e01fef266f660e32473de67474b36c15\");\n-\n-    final JsonRpcResponse actualResponse = method.response(request);\n-\n-    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n-    verify(privacyController).sendTransaction(any(PrivateTransaction.class), any(), any());\n-    verify(privacyController)\n-        .validatePrivateTransaction(any(PrivateTransaction.class), any(String.class));\n-    verify(privacyController)\n-        .createPrivacyMarkerTransaction(\n-            any(String.class), any(PrivateTransaction.class), eq(Address.ONCHAIN_PRIVACY));\n-    verify(transactionPool).addLocalTransaction(any(Transaction.class));\n-  }\n-\n-  @Test\n-  public void eeaTransactionFailsWhenOnchainPrivacyGroupFeatureIsEnabled() {\n-    method =\n-        new OnChainEeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider);\n-\n-    final JsonRpcRequestContext request = getJsonRpcRequestContext();\n-\n-    final JsonRpcResponse expectedResponse =\n-        new JsonRpcErrorResponse(\n-            request.getRequest().getId(), JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n-\n-    final JsonRpcResponse actualResponse = method.response(request);\n-\n-    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n-  }\n-\n   private JsonRpcRequestContext getJsonRpcRequestContext() {\n     return new JsonRpcRequestContext(\n         new JsonRpcRequest(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MzIxNw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530673217", "bodyText": "The test name seems to be wrong. It has nothing to do with what is being tested.", "author": "lucassaldanha", "createdAt": "2020-11-25T22:25:31Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -334,8 +333,7 @@ public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIs\n   @Test\n   public void onChainPrivacyGroupTransactionFailsWhenFeatureIsNotEnabled() {", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDc3Ng==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720776", "bodyText": "Done", "author": "pinges", "createdAt": "2020-11-26T01:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MzIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\nindex e9992395a..82778569f 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java\n\n@@ -306,32 +239,7 @@ public class EeaSendRawTransactionTest {\n   }\n \n   @Test\n-  public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIsEnabled() {\n-    method =\n-        new OnChainEeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider);\n-\n-    when(privacyController.retrieveOnChainPrivacyGroupWithToBeAddedMembers(any(), any(), any()))\n-        .thenReturn(Optional.empty());\n-\n-    final JsonRpcRequestContext request =\n-        new JsonRpcRequestContext(\n-            new JsonRpcRequest(\n-                \"2.0\",\n-                \"eea_sendRawTransaction\",\n-                new String[] {VALID_PRIVATE_TRANSACTION_RLP_PRIVACY_GROUP}));\n-\n-    final JsonRpcResponse expectedResponse =\n-        new JsonRpcErrorResponse(\n-            request.getRequest().getId(), JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n-\n-    final JsonRpcResponse actualResponse = method.response(request);\n-\n-    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n-  }\n-\n-  @Test\n-  public void onChainPrivacyGroupTransactionFailsWhenFeatureIsNotEnabled() {\n+  public void transactionFailsIfPrivacyGroupDoesNotExist() {\n     method =\n         new EeaSendRawTransaction(transactionPool, privacyController, enclavePublicKeyProvider);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjAxNg==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530682016", "bodyText": "We can remove Address.DEFAULT_PRIVACY from the method call and use it inside the createPMTAndAddToTxPool method.\nEach class is implementing its own version of createPMTAndAddToTxPool so it knows what address to use.", "author": "lucassaldanha", "createdAt": "2020-11-25T22:52:08Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -116,30 +96,18 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n             id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n       }\n \n-      final String privateTransactionLookupId =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKey, maybePrivacyGroup);\n-\n-      if (onchainPrivacyGroupsEnabled) {\n-        final Bytes privacyGroupId =\n-            maybePrivacyGroupId.orElseThrow(\n-                () ->\n-                    new RuntimeException(\n-                        JsonRpcError.OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST.getMessage()));\n-        final Optional<String> addPayloadPrivateTransactionLookupId =\n-            privacyController.buildAndSendAddPayload(\n-                privateTransaction,\n-                Bytes32.wrap(privacyGroupId),\n-                enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        return createPMTAndAddToTxPool(\n-            id,\n-            privateTransaction,\n-            buildCompoundLookupId(privateTransactionLookupId, addPayloadPrivateTransactionLookupId),\n-            Address.ONCHAIN_PRIVACY);\n-      } else { // legacy or pantheon transaction\n-        return createPMTAndAddToTxPool(\n-            id, privateTransaction, privateTransactionLookupId, Address.DEFAULT_PRIVACY);\n-      }\n+      final JsonRpcResponse ret =\n+          createPMTAndAddToTxPool(\n+              id,\n+              privateTransaction,\n+              maybePrivacyGroup,\n+              maybePrivacyGroupId,\n+              enclavePublicKey,\n+              Address.DEFAULT_PRIVACY);", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTM0NA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530721344", "bodyText": "Done", "author": "pinges", "createdAt": "2020-11-26T01:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\nindex 6dc817243..da32280e9 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n\n@@ -96,15 +94,19 @@ public class EeaSendRawTransaction implements JsonRpcMethod {\n             id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n       }\n \n-      final JsonRpcResponse ret =\n-          createPMTAndAddToTxPool(\n+      final Transaction privacyMarkerTransaction =\n+          createPMT(\n               id,\n               privateTransaction,\n               maybePrivacyGroup,\n               maybePrivacyGroupId,\n-              enclavePublicKey,\n-              Address.DEFAULT_PRIVACY);\n-      return ret;\n+              enclavePublicKey);\n+\n+      return transactionPool\n+              .addLocalTransaction(privacyMarkerTransaction)\n+              .either(\n+                      () -> new JsonRpcSuccessResponse(id, privacyMarkerTransaction.getHash().toString()),\n+                      errorReason -> getJsonRpcErrorResponse(id, errorReason));\n \n     } catch (final JsonRpcErrorResponseException e) {\n       return new JsonRpcErrorResponse(id, e.getJsonRpcError());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDM5Mw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530684393", "bodyText": "We don't need to override this method as they always return the same name.", "author": "lucassaldanha", "createdAt": "2020-11-25T22:59:48Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTUzNw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530721537", "bodyText": "Done", "author": "pinges", "createdAt": "2020-11-26T01:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\nindex d7a366047..638927068 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n\n@@ -14,14 +14,11 @@\n  */\n package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n \n-import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n-\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.ethereum.core.Transaction;\n import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NTI4OA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530685288", "bodyText": "We are getting from the optional without checking if the value exists. If by any reason the id doesn't exist, this will cause errors that are hard to debug. It is probably worth adding a check and throwing an exception with an easy to read error msg.", "author": "lucassaldanha", "createdAt": "2020-11-25T23:03:01Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.EEA_SEND_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  JsonRpcResponse createPMTAndAddToTxPool(\n+      final Object id,\n+      final PrivateTransaction privateTransaction,\n+      final Optional<PrivacyGroup> maybePrivacyGroup,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final Address privacyPrecompiledAddress) {\n+    final Bytes privacyGroupId = maybePrivacyGroupId.get();", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMjMxOQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530722319", "bodyText": "It is not checked here, but it is checked in the findPrivacyGroup method ...\nI'll put in a comment here that this has already been checked!", "author": "pinges", "createdAt": "2020-11-26T01:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NTI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\nindex d7a366047..638927068 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n\n@@ -14,14 +14,11 @@\n  */\n package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n \n-import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n-\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.ethereum.core.Transaction;\n import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjA2Mg==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530686062", "bodyText": "The method getJsonRpcErrorResponse can be private :)", "author": "lucassaldanha", "createdAt": "2020-11-25T23:05:52Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -171,15 +152,4 @@ JsonRpcErrorResponse getJsonRpcErrorResponse(\n     }", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU5Mw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530723593", "bodyText": "it is used in both classes!", "author": "pinges", "createdAt": "2020-11-26T01:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\nindex 6dc817243..da32280e9 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n\n@@ -126,27 +127,20 @@ public class EeaSendRawTransaction implements JsonRpcMethod {\n     return maybePrivacyGroup;\n   }\n \n-  JsonRpcResponse createPMTAndAddToTxPool(\n-      final Object id,\n-      final PrivateTransaction privateTransaction,\n-      final Optional<PrivacyGroup> maybePrivacyGroup,\n-      final Optional<Bytes> maybePrivacyGroupId,\n-      final String enclavePublicKey,\n-      final Address privacyPrecompileAddress) {\n+  Transaction createPMT(\n+          final Object id,\n+          final PrivateTransaction privateTransaction,\n+          final Optional<PrivacyGroup> maybePrivacyGroup,\n+          final Optional<Bytes> maybePrivacyGroupId,\n+          final String enclavePublicKey) {\n     final String privateTransactionLookupId =\n         privacyController.sendTransaction(privateTransaction, enclavePublicKey, maybePrivacyGroup);\n-    final Transaction privacyMarkerTransaction =\n-        privacyController.createPrivacyMarkerTransaction(\n-            privateTransactionLookupId, privateTransaction, privacyPrecompileAddress);\n-    return transactionPool\n-        .addLocalTransaction(privacyMarkerTransaction)\n-        .either(\n-            () -> new JsonRpcSuccessResponse(id, privacyMarkerTransaction.getHash().toString()),\n-            errorReason -> getJsonRpcErrorResponse(id, errorReason));\n+    return privacyController.createPrivacyMarkerTransaction(\n+            privateTransactionLookupId, privateTransaction, Address.DEFAULT_PRIVACY);\n   }\n \n   JsonRpcErrorResponse getJsonRpcErrorResponse(\n-      final Object id, final TransactionInvalidReason errorReason) {\n+          final Object id, final TransactionInvalidReason errorReason) {\n     if (errorReason.equals(TransactionInvalidReason.INTRINSIC_GAS_EXCEEDS_GAS_LIMIT)) {\n       return new JsonRpcErrorResponse(id, JsonRpcError.PMT_FAILED_INTRINSIC_GAS_EXCEEDS_LIMIT);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzk0Ng==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530687946", "bodyText": "I don't like the fact that this method is doing two things. We can probably break it into two.", "author": "lucassaldanha", "createdAt": "2020-11-25T23:12:50Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,15 +116,28 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n   JsonRpcResponse createPMTAndAddToTxPool(", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODc2MA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530728760", "bodyText": "Done!", "author": "pinges", "createdAt": "2020-11-26T01:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\nindex 6dc817243..da32280e9 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n\n@@ -117,7 +119,6 @@ public class EeaSendRawTransaction implements JsonRpcMethod {\n   }\n \n   Optional<PrivacyGroup> findPrivacyGroup(\n-      final PrivacyController privacyController,\n       final Optional<Bytes> maybePrivacyGroupId,\n       final String enclavePublicKey,\n       final PrivateTransaction privateTransaction) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720299", "bodyText": "is onchain privacy group id not available the only thing this error will ever be for?", "author": "macfarla", "createdAt": "2020-11-26T01:19:58Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+\n+public class JsonRpcErrorResponseException extends RuntimeException {\n+\n+  private final JsonRpcError jsonRpcError;\n+\n+  public JsonRpcErrorResponseException(final JsonRpcError onchainPrivacyGroupIdNotAvailable) {", "originalCommit": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDYwNQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720605", "bodyText": "or should it be a more generic term", "author": "macfarla", "createdAt": "2020-11-26T01:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjI4MQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772281", "bodyText": "done!", "author": "pinges", "createdAt": "2020-11-26T04:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java\nindex afea5c6f3..e781d06f1 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java\n\n@@ -20,9 +20,9 @@ public class JsonRpcErrorResponseException extends RuntimeException {\n \n   private final JsonRpcError jsonRpcError;\n \n-  public JsonRpcErrorResponseException(final JsonRpcError onchainPrivacyGroupIdNotAvailable) {\n+  public JsonRpcErrorResponseException(final JsonRpcError error) {\n     super();\n-    this.jsonRpcError = onchainPrivacyGroupIdNotAvailable;\n+    this.jsonRpcError = error;\n   }\n \n   public JsonRpcError getJsonRpcError() {\n"}}, {"oid": "e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "url": "https://github.com/hyperledger/besu/commit/e3631a94d72a126a642dc2e23f26870e3ef2d6d3", "message": "changes based on comments\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-26T02:43:30Z", "type": "commit"}, {"oid": "a760ba08ed2f73e16b459a57ef4ff0277c257c64", "url": "https://github.com/hyperledger/besu/commit/a760ba08ed2f73e16b459a57ef4ff0277c257c64", "message": "changes based on comments\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-26T02:44:35Z", "type": "commit"}, {"oid": "197050795f42b811c6aa0157768ed1516a0742fa", "url": "https://github.com/hyperledger/besu/commit/197050795f42b811c6aa0157768ed1516a0742fa", "message": "Merge branch 'master' of github.com:hyperledger/besu into createQuorumTransaction", "committedDate": "2020-11-26T02:45:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTkwNQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530759905", "bodyText": "The id parameter isn't needed anymore.", "author": "lucassaldanha", "createdAt": "2020-11-26T03:57:07Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,20 +115,25 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n-  JsonRpcResponse createPMTAndAddToTxPool(\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n+  Transaction createPMT(\n       final Object id,", "originalCommit": "197050795f42b811c6aa0157768ed1516a0742fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDk1Ng==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760956", "bodyText": "You are right :-)\nDone", "author": "pinges", "createdAt": "2020-11-26T04:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\nindex aea1b3436..ad930a68e 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java\n\n@@ -125,7 +124,6 @@ public class EeaSendRawTransaction implements JsonRpcMethod {\n   }\n \n   Transaction createPMT(\n-      final Object id,\n       final PrivateTransaction privateTransaction,\n       final Optional<PrivacyGroup> maybePrivacyGroup,\n       final Optional<Bytes> maybePrivacyGroupId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760114", "bodyText": "The id parameter isn't needed", "author": "lucassaldanha", "createdAt": "2020-11-26T03:58:08Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,", "originalCommit": "197050795f42b811c6aa0157768ed1516a0742fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MTQxMA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530761410", "bodyText": "I don't have that in my version anymore ...", "author": "pinges", "createdAt": "2020-11-26T04:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MTg0MQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530761841", "bodyText": "It seems to be there: https://github.com/hyperledger/besu/blob/197050795f42b811c6aa0157768ed1516a0742fa/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "author": "lucassaldanha", "createdAt": "2020-11-26T04:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA=="}], "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\nindex 745a73133..32abb4b8b 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n\n@@ -58,15 +58,14 @@ public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n \n   @Override\n   Transaction createPMT(\n-      final Object id,\n       final PrivateTransaction privateTransaction,\n       final Optional<PrivacyGroup> maybePrivacyGroup,\n       final Optional<Bytes> maybePrivacyGroupId,\n       final String enclavePublicKey) {\n-    final Bytes privacyGroupId =\n-        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n     final String privateTransactionLookupId =\n         privacyController.sendTransaction(privateTransaction, enclavePublicKey, maybePrivacyGroup);\n+    final Bytes privacyGroupId =\n+        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n     final Optional<String> addPayloadPrivateTransactionLookupId =\n         privacyController.buildAndSendAddPayload(\n             privateTransaction, Bytes32.wrap(privacyGroupId), enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDQ4NA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760484", "bodyText": "We could distribute the private tx outside this method. This would keep this method simpler.", "author": "lucassaldanha", "createdAt": "2020-11-26T03:59:50Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,\n+      final PrivateTransaction privateTransaction,\n+      final Optional<PrivacyGroup> maybePrivacyGroup,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey) {\n+    final Bytes privacyGroupId =\n+        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n+    final String privateTransactionLookupId =", "originalCommit": "197050795f42b811c6aa0157768ed1516a0742fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\nindex 745a73133..32abb4b8b 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java\n\n@@ -58,15 +58,14 @@ public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n \n   @Override\n   Transaction createPMT(\n-      final Object id,\n       final PrivateTransaction privateTransaction,\n       final Optional<PrivacyGroup> maybePrivacyGroup,\n       final Optional<Bytes> maybePrivacyGroupId,\n       final String enclavePublicKey) {\n-    final Bytes privacyGroupId =\n-        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n     final String privateTransactionLookupId =\n         privacyController.sendTransaction(privateTransaction, enclavePublicKey, maybePrivacyGroup);\n+    final Bytes privacyGroupId =\n+        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n     final Optional<String> addPayloadPrivateTransactionLookupId =\n         privacyController.buildAndSendAddPayload(\n             privateTransaction, Bytes32.wrap(privacyGroupId), enclavePublicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDcxMw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760713", "bodyText": "This TODO isn't related to this change. We should remove it.", "author": "lucassaldanha", "createdAt": "2020-11-26T04:00:58Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java", "diffHunk": "@@ -217,6 +217,8 @@ public MainnetTransactionValidator(\n     // org.bouncycastle.math.ec.ECCurve.AbstractFp.decompressPoint throws an\n     // IllegalArgumentException for \"Invalid point compression\" for bad signatures.\n     try {\n+      // TODO: this is where we are checking the signature. We have to fix the v value if this is a", "originalCommit": "197050795f42b811c6aa0157768ed1516a0742fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjQ2Mw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772463", "bodyText": "Yup!", "author": "pinges", "createdAt": "2020-11-26T04:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java\nindex 40437f47b..eed28ec22 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java\n\n@@ -217,8 +217,6 @@ public class MainnetTransactionValidator {\n     // org.bouncycastle.math.ec.ECCurve.AbstractFp.decompressPoint throws an\n     // IllegalArgumentException for \"Invalid point compression\" for bad signatures.\n     try {\n-      // TODO: this is where we are checking the signature. We have to fix the v value if this is a\n-      // private transaction\n       transaction.getSender();\n     } catch (final IllegalArgumentException e) {\n       return ValidationResult.invalid(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDczNw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760737", "bodyText": "This TODO isn't related to this change. We should remove it.", "author": "lucassaldanha", "createdAt": "2020-11-26T04:01:05Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java", "diffHunk": "@@ -257,6 +257,7 @@ public PendingTransactions getPendingTransactions() {\n               transaction.getGasLimit(), chainHeadBlockHeader.getGasLimit()));\n     }\n \n+    // TODO: this is where we would use the private state to do the validation against", "originalCommit": "197050795f42b811c6aa0157768ed1516a0742fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjUzNw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772537", "bodyText": "Done!", "author": "pinges", "createdAt": "2020-11-26T04:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDczNw=="}], "type": "inlineReview", "revised_code": {"commit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java\nindex de62e0c5e..4583b8a32 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java\n\n@@ -257,7 +257,6 @@ public class TransactionPool implements BlockAddedObserver {\n               transaction.getGasLimit(), chainHeadBlockHeader.getGasLimit()));\n     }\n \n-    // TODO: this is where we would use the private state to do the validation against\n     return protocolContext\n         .getWorldStateArchive()\n         .get(chainHeadBlockHeader.getStateRoot())\n"}}, {"oid": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "url": "https://github.com/hyperledger/besu/commit/d254e225b912c1f0ad17396c0962b9d533fa27d1", "message": "changes based on comments\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-11-26T05:31:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNTg0OA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531215848", "bodyText": "I'm not sure if this method name is correct. This test seems to be testing what happens when the on-chain privacy group is not found.", "author": "lucassaldanha", "createdAt": "2020-11-26T20:31:58Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransactionTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class OnChainEeaSendRawTransactionTest extends EeaSendRawTransactionTest {\n+\n+  @Test\n+  public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    when(privacyController.sendTransaction(any(PrivateTransaction.class), any(), any()))\n+        .thenReturn(MOCK_ORION_KEY);\n+    when(privacyController.validatePrivateTransaction(\n+            any(PrivateTransaction.class), any(String.class)))\n+        .thenReturn(ValidationResult.valid());\n+    final Optional<PrivacyGroup> optionalPrivacyGroup =\n+        Optional.of(\n+            new PrivacyGroup(\n+                \"\", PrivacyGroup.Type.ONCHAIN, \"\", \"\", Arrays.asList(ENCLAVE_PUBLIC_KEY)));\n+    when(privacyController.retrieveOnChainPrivacyGroupWithToBeAddedMembers(any(), any(), any()))\n+        .thenReturn(optionalPrivacyGroup);\n+    when(privacyController.createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), any(Address.class)))\n+        .thenReturn(PUBLIC_TRANSACTION);\n+    when(transactionPool.addLocalTransaction(any(Transaction.class)))\n+        .thenReturn(ValidationResult.valid());\n+\n+    final JsonRpcRequestContext request =\n+        new JsonRpcRequestContext(\n+            new JsonRpcRequest(\n+                \"2.0\",\n+                \"eea_sendRawTransaction\",\n+                new String[] {VALID_PRIVATE_TRANSACTION_RLP_PRIVACY_GROUP}));\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcSuccessResponse(\n+            request.getRequest().getId(),\n+            \"0x221e930a2c18d91fca4d509eaa3512f3e01fef266f660e32473de67474b36c15\");\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+    verify(privacyController).sendTransaction(any(PrivateTransaction.class), any(), any());\n+    verify(privacyController)\n+        .validatePrivateTransaction(any(PrivateTransaction.class), any(String.class));\n+    verify(privacyController)\n+        .createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), eq(Address.ONCHAIN_PRIVACY));\n+    verify(transactionPool).addLocalTransaction(any(Transaction.class));\n+  }\n+\n+  @Test\n+  public void transactionFailsForLegacyPrivateTransaction() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    final JsonRpcRequestContext request = getJsonRpcRequestContext();\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(\n+            request.getRequest().getId(), JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+  }\n+\n+  private JsonRpcRequestContext getJsonRpcRequestContext() {\n+    return new JsonRpcRequestContext(\n+        new JsonRpcRequest(\n+            \"2.0\", \"eea_sendRawTransaction\", new String[] {VALID_LEGACY_PRIVATE_TRANSACTION_RLP}),\n+        user);\n+  }\n+\n+  @Test\n+  public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIsEnabled() {", "originalCommit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MjU3OQ==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531252579", "bodyText": "Already done", "author": "pinges", "createdAt": "2020-11-26T23:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNTg0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjY4NA==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531216684", "bodyText": "It would be good to have a unit test checking that we instantiate the correct rpc method based on the onchain flag.", "author": "lucassaldanha", "createdAt": "2020-11-26T20:35:22Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/EeaJsonRpcMethods.java", "diffHunk": "@@ -42,13 +43,17 @@ public EeaJsonRpcMethods(\n   protected Map<String, JsonRpcMethod> create(\n       final PrivacyController privacyController,\n       final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n-    return mapOf(\n-        new EeaSendRawTransaction(\n-            getTransactionPool(),\n-            privacyController,\n-            enclavePublicKeyProvider,\n-            getPrivacyParameters().isOnchainPrivacyGroupsEnabled()),\n-        new PrivGetEeaTransactionCount(privacyController, enclavePublicKeyProvider));\n+    if (getPrivacyParameters().isOnchainPrivacyGroupsEnabled()) {", "originalCommit": "d254e225b912c1f0ad17396c0962b9d533fa27d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1ODY4Nw==", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531258687", "bodyText": "This is tested in the privacy ATs. To do that in this class would be quite a bit of code ...\nI think it is enough to get that tested at the higher level ?", "author": "pinges", "createdAt": "2020-11-27T00:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjY4NA=="}], "type": "inlineReview", "revised_code": null}]}