{"pr_number": 819, "pr_title": "EVMTool improvements", "pr_createdAt": "2020-04-30T15:55:38Z", "pr_url": "https://github.com/hyperledger/besu/pull/819", "timeline": [{"oid": "345f8ad614ca141daa10fd63efc1220ae0a2f143", "url": "https://github.com/hyperledger/besu/commit/345f8ad614ca141daa10fd63efc1220ae0a2f143", "message": "EVMTool improvements\n\n* Support clique genesis (needs a nodekey)\n* Write genesis allocations to world state\n* Report total gas (EVM operations + intrinsic cost of TX)\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-04-30T15:54:18Z", "type": "commit"}, {"oid": "ead78f57637628540c424eb1963aed3693b5b5b8", "url": "https://github.com/hyperledger/besu/commit/ead78f57637628540c424eb1963aed3693b5b5b8", "message": "Spotless\n\nAdd log4j for errors.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-04-30T16:25:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExODAxOQ==", "url": "https://github.com/hyperledger/besu/pull/819#discussion_r420118019", "bodyText": "In my opinion I think it is possible to add private final here", "author": "matkt", "createdAt": "2020-05-05T13:41:48Z", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/CliqueGenesisFileModule.java", "diffHunk": "@@ -18,13 +18,18 @@\n import org.hyperledger.besu.config.GenesisConfigOptions;\n import org.hyperledger.besu.consensus.clique.CliqueProtocolSchedule;\n import org.hyperledger.besu.consensus.ibft.IbftBlockHeaderFunctions;\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.NodeKey;\n+import org.hyperledger.besu.crypto.SECP256K1;\n import org.hyperledger.besu.ethereum.core.BlockHeaderFunctions;\n import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n \n import javax.inject.Named;\n \n class CliqueGenesisFileModule extends GenesisFileModule {\n \n+  NodeKey nodeKey = new NodeKey(new KeyPairSecurityModule(SECP256K1.KeyPair.generate()));", "originalCommit": "ead78f57637628540c424eb1963aed3693b5b5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MTAyNA==", "url": "https://github.com/hyperledger/besu/pull/819#discussion_r424181024", "bodyText": "fixed.", "author": "shemnon", "createdAt": "2020-05-13T05:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExODAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5cef90e6048e3347a632baf8a8b38738d590199d", "chunk": "diff --git a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/CliqueGenesisFileModule.java b/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/CliqueGenesisFileModule.java\nindex aff74dac2..a364f489b 100644\n--- a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/CliqueGenesisFileModule.java\n+++ b/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/CliqueGenesisFileModule.java\n\n@@ -28,7 +28,8 @@ import javax.inject.Named;\n \n class CliqueGenesisFileModule extends GenesisFileModule {\n \n-  NodeKey nodeKey = new NodeKey(new KeyPairSecurityModule(SECP256K1.KeyPair.generate()));\n+  private final NodeKey nodeKey =\n+      new NodeKey(new KeyPairSecurityModule(SECP256K1.KeyPair.generate()));\n \n   CliqueGenesisFileModule(final String genesisConfig) {\n     super(genesisConfig);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExOTA5Nw==", "url": "https://github.com/hyperledger/besu/pull/819#discussion_r420119097", "bodyText": "Why don't we use the logger present in the class to log this? LogManager.getLogger()", "author": "matkt", "createdAt": "2020-05-05T13:43:15Z", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -232,13 +234,27 @@ public void run() {\n         stopwatch.stop();\n \n         if (lastLoop) {\n+          Transaction tx =\n+              new Transaction(\n+                  0,\n+                  Wei.ZERO,\n+                  Long.MAX_VALUE,\n+                  Optional.ofNullable(receiver),\n+                  Wei.ZERO,\n+                  null,\n+                  callData,\n+                  sender,\n+                  Optional.empty());\n+\n+          final Gas intrinsicGasCost =\n+              component.getGasCalculatorAtBlock().apply(0).transactionIntrinsicGasCost(tx);\n+          Gas evmGas = gas.minus(messageFrame.getRemainingGas());\n           System.out.println(", "originalCommit": "ead78f57637628540c424eb1963aed3693b5b5b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MDk5MA==", "url": "https://github.com/hyperledger/besu/pull/819#discussion_r424180990", "bodyText": "Logger create too much extra line junk with the default setup for what should be a CLI focused tool.  However, I did change to use the printstream from the PicoCLI invocation.", "author": "shemnon", "createdAt": "2020-05-13T05:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExOTA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ca9d2bffea8a5a9c2923226caff4a4caea0a6026", "chunk": "diff --git a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java b/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java\nindex c98020507..acca15b7e 100644\n--- a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java\n+++ b/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java\n\n@@ -217,53 +231,70 @@ public class EvmToolCommand implements Runnable {\n                 .miningBeneficiary(blockHeader.getCoinbase())\n                 .blockHashLookup(new BlockHashLookup(blockHeader, component.getBlockchain()))\n                 .contractAccountVersion(Account.DEFAULT_VERSION)\n-                .build();\n-\n-        messageFrame.setState(MessageFrame.State.CODE_EXECUTING);\n-        final EVM evm = component.getEvmAtBlock().apply(0);\n-\n-        final Stopwatch stopwatch = Stopwatch.createStarted();\n-        evm.runToHalt(\n-            messageFrame,\n-            (frame, currentGasCost, executeOperation) -> {\n-              if (showJsonResults && lastLoop) {\n-                System.out.println(createEvmTraceOperation(messageFrame));\n-              }\n-              executeOperation.execute();\n-            });\n-        stopwatch.stop();\n-\n-        if (lastLoop) {\n-          Transaction tx =\n-              new Transaction(\n-                  0,\n-                  Wei.ZERO,\n-                  Long.MAX_VALUE,\n-                  Optional.ofNullable(receiver),\n-                  Wei.ZERO,\n-                  null,\n-                  callData,\n-                  sender,\n-                  Optional.empty());\n-\n-          final Gas intrinsicGasCost =\n-              component.getGasCalculatorAtBlock().apply(0).transactionIntrinsicGasCost(tx);\n-          Gas evmGas = gas.minus(messageFrame.getRemainingGas());\n-          System.out.println(\n-              new JsonObject()\n-                  .put(\"gasUser\", evmGas.asUInt256().toShortHexString())\n-                  .put(\"timens\", stopwatch.elapsed().toNanos())\n-                  .put(\"time\", stopwatch.elapsed().toNanos() / 1000)\n-                  .put(\"gasTotal\", evmGas.plus(intrinsicGasCost).asUInt256().toShortHexString()));\n+                .build());\n+\n+        final MainnetMessageCallProcessor mcp =\n+            new MainnetMessageCallProcessor(evm, precompileContractRegistry);\n+        stopwatch.start();\n+        while (!messageFrameStack.isEmpty()) {\n+          final MessageFrame messageFrame = messageFrameStack.peek();\n+          mcp.process(\n+              messageFrame,\n+              new EvmToolOperationTracer(lastLoop, precompileContractRegistry));\n+          if (lastLoop) {\n+            if (!messageFrame.getExceptionalHaltReasons().isEmpty()) {\n+              System.out.println(messageFrame.getExceptionalHaltReasons());\n+            }\n+            if (messageFrame.getRevertReason().isPresent()) {\n+              System.out.println(\n+                  new String(\n+                      messageFrame.getRevertReason().get().toArray(), StandardCharsets.UTF_8));\n+            }\n+          }\n+          if (messageFrameStack.isEmpty()) {\n+            stopwatch.stop();\n+            if (lastTime == 0) {\n+              lastTime = stopwatch.elapsed().toNanos();\n+            }\n+          }\n+\n+          if (lastLoop && messageFrameStack.isEmpty()) {\n+            final Transaction tx =\n+                new Transaction(\n+                    0,\n+                    Wei.ZERO,\n+                    Long.MAX_VALUE,\n+                    Optional.ofNullable(receiver),\n+                    Wei.ZERO,\n+                    null,\n+                    callData,\n+                    sender,\n+                    Optional.empty());\n+\n+            final Gas intrinsicGasCost =\n+                protocolSpec.getGasCalculator().transactionIntrinsicGasCost(tx);\n+            final Gas evmGas = gas.minus(messageFrame.getRemainingGas());\n+            System.out.println();\n+            System.out.println(\n+                new JsonObject()\n+                    .put(\"gasUser\", evmGas.asUInt256().toShortHexString())\n+                    .put(\"timens\", lastTime)\n+                    .put(\"time\", lastTime / 1000)\n+                    .put(\"gasTotal\", evmGas.plus(intrinsicGasCost).asUInt256().toShortHexString()));\n+          }\n         }\n+        lastTime = stopwatch.elapsed().toNanos();\n+        stopwatch.reset();\n       } while (repeat-- > 0);\n \n-    } catch (final IOException | ExceptionalHaltException e) {\n+    } catch (final IOException e) {\n       LOG.fatal(e);\n     }\n   }\n \n-  private JsonObject createEvmTraceOperation(final MessageFrame messageFrame) {\n+  private JsonObject createEvmTraceOperation(\n+      final MessageFrame messageFrame,\n+      final PrecompileContractRegistry precompileContractRegistry) {\n     final JsonArray stack = new JsonArray();\n     for (int i = 0; i < messageFrame.stackSize(); i++) {\n       stack.add(messageFrame.getStackItem(i).toShortHexString());\n"}}, {"oid": "1e93e1eba08484c18a5a8ff47829f27bd574c0e6", "url": "https://github.com/hyperledger/besu/commit/1e93e1eba08484c18a5a8ff47829f27bd574c0e6", "message": "Merge branch 'master' of github.com:hyperledger/besu into evmtool\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-06T22:58:36Z", "type": "commit"}, {"oid": "2a4b97106f619f5825ffaee4e216c38332071c38", "url": "https://github.com/hyperledger/besu/commit/2a4b97106f619f5825ffaee4e216c38332071c38", "message": "Merge branch 'master' of github.com:hyperledger/besu into evmtool\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-07T01:46:46Z", "type": "commit"}, {"oid": "5a2440428aff92a06927b4723db773bd5a0fb8c1", "url": "https://github.com/hyperledger/besu/commit/5a2440428aff92a06927b4723db773bd5a0fb8c1", "message": "Merge branch 'master' of github.com:hyperledger/besu into evmtool\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-12T22:39:32Z", "type": "commit"}, {"oid": "ca9d2bffea8a5a9c2923226caff4a4caea0a6026", "url": "https://github.com/hyperledger/besu/commit/ca9d2bffea8a5a9c2923226caff4a4caea0a6026", "message": "support precompiled and other contract calls.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-12T22:44:49Z", "type": "commit"}, {"oid": "5cef90e6048e3347a632baf8a8b38738d590199d", "url": "https://github.com/hyperledger/besu/commit/5cef90e6048e3347a632baf8a8b38738d590199d", "message": "lgtm cleanups and spotless\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-13T03:18:47Z", "type": "commit"}, {"oid": "3148e441103af8405648fd0cd58fee8643d917e0", "url": "https://github.com/hyperledger/besu/commit/3148e441103af8405648fd0cd58fee8643d917e0", "message": "Use out provided by command line.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-05-13T04:17:58Z", "type": "commit"}]}