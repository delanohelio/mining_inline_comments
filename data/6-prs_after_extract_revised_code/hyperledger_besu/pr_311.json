{"pr_number": 311, "pr_title": "Use temporary self signed certificates for JSON-RPC HTTP TLS unit testing", "pr_createdAt": "2020-01-18T09:15:40Z", "pr_url": "https://github.com/hyperledger/besu/pull/311", "timeline": [{"oid": "ec4ce0b899f0327f45c3ddd5c59678fb8d16330e", "url": "https://github.com/hyperledger/besu/commit/ec4ce0b899f0327f45c3ddd5c59678fb8d16330e", "message": "SelfSignedPfxStore in testSupport for JSON-RPC HTTP TLS testing\n\n -- Generate self signed certificates in PKCS12 format with SAN extensions for testing\n -- Remove pre-generated key stores and trust stores used by TLS tests\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-18T09:13:46Z", "type": "commit"}, {"oid": "17b364f980d6498553872e3ad37b748e49a75477", "url": "https://github.com/hyperledger/besu/commit/17b364f980d6498553872e3ad37b748e49a75477", "message": "spotless fix\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-18T09:38:59Z", "type": "commit"}, {"oid": "e84089c25ed2c14a7154d7dc33869e0814eed2d6", "url": "https://github.com/hyperledger/besu/commit/e84089c25ed2c14a7154d7dc33869e0814eed2d6", "message": "Removing pre-generated tls test resources\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-18T09:42:49Z", "type": "commit"}, {"oid": "0a2b9f7e72533a0b1f2bf638f9b5bed465fb84ce", "url": "https://github.com/hyperledger/besu/commit/0a2b9f7e72533a0b1f2bf638f9b5bed465fb84ce", "message": "Fixing common name extraction for known clients fingerprint file\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-18T09:55:27Z", "type": "commit"}, {"oid": "38aba5d14fb7b9d23531f34b95df306caabd9fe4", "url": "https://github.com/hyperledger/besu/commit/38aba5d14fb7b9d23531f34b95df306caabd9fe4", "message": "adding final keyword in try/resource block\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-19T01:07:34Z", "type": "commit"}, {"oid": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "url": "https://github.com/hyperledger/besu/commit/5c37b01d4feb60303e6b4e95ea406e5a6383080b", "message": "adding pcpkix to be available on runtime\n\n -- required by Tuweni TLS\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-20T04:35:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjI3NQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r368376275", "bodyText": "nit: having 1/2 final and 1/2 not final variables is a smell that this is maybe 2 classes", "author": "rain-on", "createdAt": "2020-01-20T05:37:44Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs.\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ *\n+ * <p>The generated certificate supports SAN extension for multiple DNS and IP addresses\n+ */\n+public final class SelfSignedPfxStore {\n+  private static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();\n+  private static final String DEFAULT_DN = \"CN=localhost\";\n+  private static final String DEFAULT_ALIAS = \"test\";\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final boolean IS_CA = true;\n+  private final Path parentPath;\n+  private final String alias;\n+  private final char[] password;\n+  private final String distinguishedName;\n+  private final List<String> sanHostNames;\n+  private final List<String> sanIpAddresses;\n+  private X509Certificate certificate;", "originalCommit": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Njg0NQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369356845", "bodyText": "Refactored and simplified.", "author": "usmansaleem", "createdAt": "2020-01-22T03:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\nindex 06e69b1bf..19451384a 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n\n@@ -27,11 +27,10 @@ import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n import java.time.Instant;\n import java.time.Period;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjQxNw==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r368376417", "bodyText": "nit: parentPath is good for lots of things - but given this is multiple files, maybe its containingFolder?\nWhat happens if this points to a file?", "author": "rain-on", "createdAt": "2020-01-20T05:38:39Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs.\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ *\n+ * <p>The generated certificate supports SAN extension for multiple DNS and IP addresses\n+ */\n+public final class SelfSignedPfxStore {\n+  private static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();\n+  private static final String DEFAULT_DN = \"CN=localhost\";\n+  private static final String DEFAULT_ALIAS = \"test\";\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final boolean IS_CA = true;\n+  private final Path parentPath;\n+  private final String alias;\n+  private final char[] password;\n+  private final String distinguishedName;\n+  private final List<String> sanHostNames;\n+  private final List<String> sanIpAddresses;\n+  private X509Certificate certificate;\n+  private KeyPair keyPair;\n+  private Path keyStore;\n+  private Path trustStore;\n+  private Path knownClientsFile;\n+  private Path passwordFile;\n+\n+  private SelfSignedPfxStore(\n+      final Path parentPath,\n+      final String alias,\n+      final char[] password,\n+      final String distinguishedName,\n+      final List<String> sanHostNames,\n+      final List<String> sanIpAddresses) {\n+    this.parentPath = parentPath;", "originalCommit": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Njc5OQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369356799", "bodyText": "Refactored and simplified.", "author": "usmansaleem", "createdAt": "2020-01-22T03:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\nindex 06e69b1bf..19451384a 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n\n@@ -27,11 +27,10 @@ import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n import java.time.Instant;\n import java.time.Period;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjYzMw==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r368376633", "bodyText": "maybe this doesn't have a known-clients file, but rather, allows you to get the fingerprint of the certificate, that way the user of this class can choose what to do with the fingerprint - i.e. compare it, write it to file etc.etc.", "author": "rain-on", "createdAt": "2020-01-20T05:39:53Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs.\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ *\n+ * <p>The generated certificate supports SAN extension for multiple DNS and IP addresses\n+ */\n+public final class SelfSignedPfxStore {\n+  private static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();\n+  private static final String DEFAULT_DN = \"CN=localhost\";\n+  private static final String DEFAULT_ALIAS = \"test\";\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final boolean IS_CA = true;\n+  private final Path parentPath;\n+  private final String alias;\n+  private final char[] password;\n+  private final String distinguishedName;\n+  private final List<String> sanHostNames;\n+  private final List<String> sanIpAddresses;\n+  private X509Certificate certificate;\n+  private KeyPair keyPair;\n+  private Path keyStore;\n+  private Path trustStore;\n+  private Path knownClientsFile;\n+  private Path passwordFile;\n+\n+  private SelfSignedPfxStore(\n+      final Path parentPath,\n+      final String alias,\n+      final char[] password,\n+      final String distinguishedName,\n+      final List<String> sanHostNames,\n+      final List<String> sanIpAddresses) {\n+    this.parentPath = parentPath;\n+    this.alias = alias;\n+    this.password = password;\n+    this.distinguishedName = distinguishedName;\n+    this.sanHostNames = sanHostNames;\n+    this.sanIpAddresses = sanIpAddresses;\n+  }\n+\n+  public static SelfSignedPfxStore create(final Path parentPath) throws Exception {\n+    try {\n+      SelfSignedPfxStore selfSignedPfxStore =\n+          new SelfSignedPfxStore(\n+              parentPath,\n+              DEFAULT_ALIAS,\n+              DEFAULT_PASSWORD,\n+              DEFAULT_DN,\n+              List.of(\"localhost\"),\n+              List.of(\"127.0.0.1\"));\n+      selfSignedPfxStore.generateKeyPair();\n+      selfSignedPfxStore.generateSelfSignedCertificate();\n+      selfSignedPfxStore.createKeyStore();\n+      selfSignedPfxStore.createTrustStore();\n+      selfSignedPfxStore.createKnownClientsFile();\n+      selfSignedPfxStore.createPasswordFile();\n+      return selfSignedPfxStore;\n+    } catch (final IOException | GeneralSecurityException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"DoNotCreateSecureRandomDirectly\")\n+  private void generateKeyPair() throws NoSuchAlgorithmException {\n+    final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+    keyPairGenerator.initialize(2048, new SecureRandom());\n+    this.keyPair = keyPairGenerator.generateKeyPair();\n+  }\n+\n+  private void generateSelfSignedCertificate() throws Exception {\n+    final X500Name issuer = new X500Name(distinguishedName);\n+    final X500Name subject = new X500Name(distinguishedName);\n+    final BigInteger serialNumber = new BigInteger(String.valueOf(Instant.now().toEpochMilli()));\n+    final X509v3CertificateBuilder v3CertificateBuilder =\n+        new JcaX509v3CertificateBuilder(\n+            issuer,\n+            serialNumber,\n+            Date.from(Instant.now()),\n+            Date.from(Instant.now().plus(Period.ofDays(90))),\n+            subject,\n+            keyPair.getPublic());\n+\n+    // extensions\n+    v3CertificateBuilder.addExtension(\n+        Extension.basicConstraints, true, new BasicConstraints(IS_CA));\n+    v3CertificateBuilder.addExtension(\n+        Extension.subjectAlternativeName, false, getSubjectAlternativeNames());\n+\n+    final ContentSigner contentSigner =\n+        new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n+\n+    this.certificate =\n+        new JcaX509CertificateConverter()\n+            .setProvider(BOUNCY_CASTLE_PROVIDER)\n+            .getCertificate(v3CertificateBuilder.build(contentSigner));\n+  }\n+\n+  private GeneralNames getSubjectAlternativeNames() {\n+    final List<GeneralName> hostGeneralNames =\n+        sanHostNames.stream()\n+            .map(hostName -> new GeneralName(GeneralName.dNSName, hostName))\n+            .collect(Collectors.toList());\n+    final List<GeneralName> ipGeneralNames =\n+        sanIpAddresses.stream()\n+            .map(ipAddress -> new GeneralName(GeneralName.iPAddress, ipAddress))\n+            .collect(Collectors.toList());\n+    final GeneralName[] generalNames =\n+        Stream.of(hostGeneralNames, ipGeneralNames)\n+            .flatMap(Collection::stream)\n+            .toArray(GeneralName[]::new);\n+\n+    return new GeneralNames(generalNames);\n+  }\n+\n+  private void createKeyStore() throws IOException, GeneralSecurityException {\n+    this.keyStore = convert(true);\n+  }\n+\n+  private void createTrustStore() throws IOException, GeneralSecurityException {\n+    this.trustStore = convert(false);\n+  }\n+\n+  private Path convert(final boolean isKeyStore) throws IOException, GeneralSecurityException {\n+    final KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+    keyStore.load(null);\n+    if (isKeyStore) {\n+      keyStore.setKeyEntry(alias, keyPair.getPrivate(), password, new Certificate[] {certificate});\n+    } else {\n+      keyStore.setCertificateEntry(alias, certificate);\n+    }\n+\n+    return saveKeyStore(keyStore);\n+  }\n+\n+  private Path saveKeyStore(final KeyStore keyStore)\n+      throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {\n+    final Path pfxPath = Files.createTempFile(parentPath, alias, \".pfx\");\n+    pfxPath.toFile().deleteOnExit();\n+    try (final FileOutputStream outputStream = new FileOutputStream(pfxPath.toFile())) {\n+      keyStore.store(outputStream, password);\n+    }\n+    return pfxPath;\n+  }\n+\n+  private void createKnownClientsFile() throws IOException, CertificateEncodingException {", "originalCommit": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Njk0NQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369356945", "bodyText": "Extracted out to a different utility class. It now determines common name and fingerprint dynamically from trust store.", "author": "usmansaleem", "createdAt": "2020-01-22T03:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\nindex 06e69b1bf..19451384a 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n\n@@ -27,11 +27,10 @@ import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n import java.time.Instant;\n import java.time.Period;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjgxOA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r368376818", "bodyText": "nit: does a certificate need a password file - or just a password? Regarding abstractions, is it useful to get this key's password, and let the user of this class write it to file?", "author": "rain-on", "createdAt": "2020-01-20T05:41:01Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs.\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ *\n+ * <p>The generated certificate supports SAN extension for multiple DNS and IP addresses\n+ */\n+public final class SelfSignedPfxStore {\n+  private static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();\n+  private static final String DEFAULT_DN = \"CN=localhost\";\n+  private static final String DEFAULT_ALIAS = \"test\";\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final boolean IS_CA = true;\n+  private final Path parentPath;\n+  private final String alias;\n+  private final char[] password;\n+  private final String distinguishedName;\n+  private final List<String> sanHostNames;\n+  private final List<String> sanIpAddresses;\n+  private X509Certificate certificate;\n+  private KeyPair keyPair;\n+  private Path keyStore;\n+  private Path trustStore;\n+  private Path knownClientsFile;\n+  private Path passwordFile;\n+\n+  private SelfSignedPfxStore(\n+      final Path parentPath,\n+      final String alias,\n+      final char[] password,\n+      final String distinguishedName,\n+      final List<String> sanHostNames,\n+      final List<String> sanIpAddresses) {\n+    this.parentPath = parentPath;\n+    this.alias = alias;\n+    this.password = password;\n+    this.distinguishedName = distinguishedName;\n+    this.sanHostNames = sanHostNames;\n+    this.sanIpAddresses = sanIpAddresses;\n+  }\n+\n+  public static SelfSignedPfxStore create(final Path parentPath) throws Exception {\n+    try {\n+      SelfSignedPfxStore selfSignedPfxStore =\n+          new SelfSignedPfxStore(\n+              parentPath,\n+              DEFAULT_ALIAS,\n+              DEFAULT_PASSWORD,\n+              DEFAULT_DN,\n+              List.of(\"localhost\"),\n+              List.of(\"127.0.0.1\"));\n+      selfSignedPfxStore.generateKeyPair();\n+      selfSignedPfxStore.generateSelfSignedCertificate();\n+      selfSignedPfxStore.createKeyStore();\n+      selfSignedPfxStore.createTrustStore();\n+      selfSignedPfxStore.createKnownClientsFile();\n+      selfSignedPfxStore.createPasswordFile();\n+      return selfSignedPfxStore;\n+    } catch (final IOException | GeneralSecurityException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"DoNotCreateSecureRandomDirectly\")\n+  private void generateKeyPair() throws NoSuchAlgorithmException {\n+    final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+    keyPairGenerator.initialize(2048, new SecureRandom());\n+    this.keyPair = keyPairGenerator.generateKeyPair();\n+  }\n+\n+  private void generateSelfSignedCertificate() throws Exception {\n+    final X500Name issuer = new X500Name(distinguishedName);\n+    final X500Name subject = new X500Name(distinguishedName);\n+    final BigInteger serialNumber = new BigInteger(String.valueOf(Instant.now().toEpochMilli()));\n+    final X509v3CertificateBuilder v3CertificateBuilder =\n+        new JcaX509v3CertificateBuilder(\n+            issuer,\n+            serialNumber,\n+            Date.from(Instant.now()),\n+            Date.from(Instant.now().plus(Period.ofDays(90))),\n+            subject,\n+            keyPair.getPublic());\n+\n+    // extensions\n+    v3CertificateBuilder.addExtension(\n+        Extension.basicConstraints, true, new BasicConstraints(IS_CA));\n+    v3CertificateBuilder.addExtension(\n+        Extension.subjectAlternativeName, false, getSubjectAlternativeNames());\n+\n+    final ContentSigner contentSigner =\n+        new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n+\n+    this.certificate =\n+        new JcaX509CertificateConverter()\n+            .setProvider(BOUNCY_CASTLE_PROVIDER)\n+            .getCertificate(v3CertificateBuilder.build(contentSigner));\n+  }\n+\n+  private GeneralNames getSubjectAlternativeNames() {\n+    final List<GeneralName> hostGeneralNames =\n+        sanHostNames.stream()\n+            .map(hostName -> new GeneralName(GeneralName.dNSName, hostName))\n+            .collect(Collectors.toList());\n+    final List<GeneralName> ipGeneralNames =\n+        sanIpAddresses.stream()\n+            .map(ipAddress -> new GeneralName(GeneralName.iPAddress, ipAddress))\n+            .collect(Collectors.toList());\n+    final GeneralName[] generalNames =\n+        Stream.of(hostGeneralNames, ipGeneralNames)\n+            .flatMap(Collection::stream)\n+            .toArray(GeneralName[]::new);\n+\n+    return new GeneralNames(generalNames);\n+  }\n+\n+  private void createKeyStore() throws IOException, GeneralSecurityException {\n+    this.keyStore = convert(true);\n+  }\n+\n+  private void createTrustStore() throws IOException, GeneralSecurityException {\n+    this.trustStore = convert(false);\n+  }\n+\n+  private Path convert(final boolean isKeyStore) throws IOException, GeneralSecurityException {\n+    final KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+    keyStore.load(null);\n+    if (isKeyStore) {\n+      keyStore.setKeyEntry(alias, keyPair.getPrivate(), password, new Certificate[] {certificate});\n+    } else {\n+      keyStore.setCertificateEntry(alias, certificate);\n+    }\n+\n+    return saveKeyStore(keyStore);\n+  }\n+\n+  private Path saveKeyStore(final KeyStore keyStore)\n+      throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {\n+    final Path pfxPath = Files.createTempFile(parentPath, alias, \".pfx\");\n+    pfxPath.toFile().deleteOnExit();\n+    try (final FileOutputStream outputStream = new FileOutputStream(pfxPath.toFile())) {\n+      keyStore.store(outputStream, password);\n+    }\n+    return pfxPath;\n+  }\n+\n+  private void createKnownClientsFile() throws IOException, CertificateEncodingException {\n+    final RDN commonNameRDN = new X500Name(distinguishedName).getRDNs(BCStyle.CN)[0];\n+    final String commonName = IETFUtils.valueToString(commonNameRDN.getFirst().getValue());\n+    final String fingerPrint = TLS.certificateHexFingerprint(certificate);\n+\n+    final Path tempFile = Files.createTempFile(parentPath, alias + \"knownClientsFile\", \".txt\");\n+    tempFile.toFile().deleteOnExit();\n+    Files.writeString(tempFile, commonName + \" \" + fingerPrint);\n+    this.knownClientsFile = tempFile;\n+  }\n+\n+  private void createPasswordFile() throws IOException {", "originalCommit": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Njk5Mg==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369356992", "bodyText": "Refactored.", "author": "usmansaleem", "createdAt": "2020-01-22T03:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NjgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\nindex 06e69b1bf..19451384a 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n\n@@ -27,11 +27,10 @@ import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n import java.time.Instant;\n import java.time.Period;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzE5OQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r368377199", "bodyText": "is createTempFile better/worse/different to performing a Path.resolve?", "author": "rain-on", "createdAt": "2020-01-20T05:43:23Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs.\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ *\n+ * <p>The generated certificate supports SAN extension for multiple DNS and IP addresses\n+ */\n+public final class SelfSignedPfxStore {\n+  private static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();\n+  private static final String DEFAULT_DN = \"CN=localhost\";\n+  private static final String DEFAULT_ALIAS = \"test\";\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final boolean IS_CA = true;\n+  private final Path parentPath;\n+  private final String alias;\n+  private final char[] password;\n+  private final String distinguishedName;\n+  private final List<String> sanHostNames;\n+  private final List<String> sanIpAddresses;\n+  private X509Certificate certificate;\n+  private KeyPair keyPair;\n+  private Path keyStore;\n+  private Path trustStore;\n+  private Path knownClientsFile;\n+  private Path passwordFile;\n+\n+  private SelfSignedPfxStore(\n+      final Path parentPath,\n+      final String alias,\n+      final char[] password,\n+      final String distinguishedName,\n+      final List<String> sanHostNames,\n+      final List<String> sanIpAddresses) {\n+    this.parentPath = parentPath;\n+    this.alias = alias;\n+    this.password = password;\n+    this.distinguishedName = distinguishedName;\n+    this.sanHostNames = sanHostNames;\n+    this.sanIpAddresses = sanIpAddresses;\n+  }\n+\n+  public static SelfSignedPfxStore create(final Path parentPath) throws Exception {\n+    try {\n+      SelfSignedPfxStore selfSignedPfxStore =\n+          new SelfSignedPfxStore(\n+              parentPath,\n+              DEFAULT_ALIAS,\n+              DEFAULT_PASSWORD,\n+              DEFAULT_DN,\n+              List.of(\"localhost\"),\n+              List.of(\"127.0.0.1\"));\n+      selfSignedPfxStore.generateKeyPair();\n+      selfSignedPfxStore.generateSelfSignedCertificate();\n+      selfSignedPfxStore.createKeyStore();\n+      selfSignedPfxStore.createTrustStore();\n+      selfSignedPfxStore.createKnownClientsFile();\n+      selfSignedPfxStore.createPasswordFile();\n+      return selfSignedPfxStore;\n+    } catch (final IOException | GeneralSecurityException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"DoNotCreateSecureRandomDirectly\")\n+  private void generateKeyPair() throws NoSuchAlgorithmException {\n+    final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+    keyPairGenerator.initialize(2048, new SecureRandom());\n+    this.keyPair = keyPairGenerator.generateKeyPair();\n+  }\n+\n+  private void generateSelfSignedCertificate() throws Exception {\n+    final X500Name issuer = new X500Name(distinguishedName);\n+    final X500Name subject = new X500Name(distinguishedName);\n+    final BigInteger serialNumber = new BigInteger(String.valueOf(Instant.now().toEpochMilli()));\n+    final X509v3CertificateBuilder v3CertificateBuilder =\n+        new JcaX509v3CertificateBuilder(\n+            issuer,\n+            serialNumber,\n+            Date.from(Instant.now()),\n+            Date.from(Instant.now().plus(Period.ofDays(90))),\n+            subject,\n+            keyPair.getPublic());\n+\n+    // extensions\n+    v3CertificateBuilder.addExtension(\n+        Extension.basicConstraints, true, new BasicConstraints(IS_CA));\n+    v3CertificateBuilder.addExtension(\n+        Extension.subjectAlternativeName, false, getSubjectAlternativeNames());\n+\n+    final ContentSigner contentSigner =\n+        new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n+\n+    this.certificate =\n+        new JcaX509CertificateConverter()\n+            .setProvider(BOUNCY_CASTLE_PROVIDER)\n+            .getCertificate(v3CertificateBuilder.build(contentSigner));\n+  }\n+\n+  private GeneralNames getSubjectAlternativeNames() {\n+    final List<GeneralName> hostGeneralNames =\n+        sanHostNames.stream()\n+            .map(hostName -> new GeneralName(GeneralName.dNSName, hostName))\n+            .collect(Collectors.toList());\n+    final List<GeneralName> ipGeneralNames =\n+        sanIpAddresses.stream()\n+            .map(ipAddress -> new GeneralName(GeneralName.iPAddress, ipAddress))\n+            .collect(Collectors.toList());\n+    final GeneralName[] generalNames =\n+        Stream.of(hostGeneralNames, ipGeneralNames)\n+            .flatMap(Collection::stream)\n+            .toArray(GeneralName[]::new);\n+\n+    return new GeneralNames(generalNames);\n+  }\n+\n+  private void createKeyStore() throws IOException, GeneralSecurityException {\n+    this.keyStore = convert(true);\n+  }\n+\n+  private void createTrustStore() throws IOException, GeneralSecurityException {\n+    this.trustStore = convert(false);\n+  }\n+\n+  private Path convert(final boolean isKeyStore) throws IOException, GeneralSecurityException {\n+    final KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n+    keyStore.load(null);\n+    if (isKeyStore) {\n+      keyStore.setKeyEntry(alias, keyPair.getPrivate(), password, new Certificate[] {certificate});\n+    } else {\n+      keyStore.setCertificateEntry(alias, certificate);\n+    }\n+\n+    return saveKeyStore(keyStore);\n+  }\n+\n+  private Path saveKeyStore(final KeyStore keyStore)\n+      throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {\n+    final Path pfxPath = Files.createTempFile(parentPath, alias, \".pfx\");\n+    pfxPath.toFile().deleteOnExit();\n+    try (final FileOutputStream outputStream = new FileOutputStream(pfxPath.toFile())) {\n+      keyStore.store(outputStream, password);\n+    }\n+    return pfxPath;\n+  }\n+\n+  private void createKnownClientsFile() throws IOException, CertificateEncodingException {\n+    final RDN commonNameRDN = new X500Name(distinguishedName).getRDNs(BCStyle.CN)[0];\n+    final String commonName = IETFUtils.valueToString(commonNameRDN.getFirst().getValue());\n+    final String fingerPrint = TLS.certificateHexFingerprint(certificate);\n+\n+    final Path tempFile = Files.createTempFile(parentPath, alias + \"knownClientsFile\", \".txt\");\n+    tempFile.toFile().deleteOnExit();\n+    Files.writeString(tempFile, commonName + \" \" + fingerPrint);\n+    this.knownClientsFile = tempFile;\n+  }\n+\n+  private void createPasswordFile() throws IOException {\n+    final Path tempFile = Files.createTempFile(parentPath, alias + \"pass\", \".txt\");", "originalCommit": "5c37b01d4feb60303e6b4e95ea406e5a6383080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NzExOA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369357118", "bodyText": "Although its out now, createTempFile will always create a unique file name. Resolve is useful where you want known file name.", "author": "usmansaleem", "createdAt": "2020-01-22T03:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\nindex 06e69b1bf..19451384a 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedPfxStore.java\n\n@@ -27,11 +27,10 @@ import java.security.KeyPairGenerator;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n import java.security.cert.CertificateException;\n-import java.security.cert.X509Certificate;\n import java.time.Instant;\n import java.time.Period;\n import java.util.Collection;\n"}}, {"oid": "4ab15c2d8bac1be2263a11090f9f89b83fa11f73", "url": "https://github.com/hyperledger/besu/commit/4ab15c2d8bac1be2263a11090f9f89b83fa11f73", "message": "Merge remote-tracking branch 'upstream/master' into rpc_tls_tests_certs\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-22T02:39:52Z", "type": "commit"}, {"oid": "b948504b78400a438dc76d43e3a9170f341f4b6e", "url": "https://github.com/hyperledger/besu/commit/b948504b78400a438dc76d43e3a9170f341f4b6e", "message": "Don't create testJar artifact as it is not required, only testSupportJar needs to be exported.\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-22T02:43:09Z", "type": "commit"}, {"oid": "f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "url": "https://github.com/hyperledger/besu/commit/f4b7c912bd2f08adefc8d23a93b80778e65f8c0f", "message": "Refactoring and simplifying SelfSignedPfxStore\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-22T03:35:16Z", "type": "commit"}, {"oid": "150ba1ae9fa4239394dab5addb777e0c0515982d", "url": "https://github.com/hyperledger/besu/commit/150ba1ae9fa4239394dab5addb777e0c0515982d", "message": "Adding apache header\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-22T04:18:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4Njc5Mg==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369386792", "bodyText": "This seems odd, the same method of creation gives a PfxStore, PfxStoreForHttpClient and PfxStoreForHttpClientNotTrustedByServer.\nIf there are three different stores, then perhaps separate helper methods to create each of them and their corresponding state (e.g. that makes one trusted and another not trusted), might be an idea?", "author": "CjHare", "createdAt": "2020-01-22T06:22:18Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsTest.java", "diffHunk": "@@ -83,25 +86,19 @@\n   private static final BigInteger CHAIN_ID = BigInteger.valueOf(123);\n   private static final Collection<RpcApi> JSON_RPC_APIS = List.of(ETH, NET, WEB3);\n   private static final NatService natService = new NatService(Optional.empty());\n-  private static final String ROOT_RESOURCE = \"JsonRpcHttpService/\";\n-  private static final Path KEYSTORE_PATH =\n-      Paths.get(getResource(ROOT_RESOURCE + \"rpc_keystore.pfx\").getPath());\n-  private static final Path KEYSTORE_PASSWORD_FILE =\n-      Paths.get(getResource(ROOT_RESOURCE + \"rpc_keystore.password\").getPath());\n-  private static final Path KNOWN_CLIENTS_FILE =\n-      Paths.get(getResource(ROOT_RESOURCE + \"rpc_known_clients.txt\").getPath());\n-  private static final Path CLIENT_CERT_KEYSTORE_PATH =\n-      Paths.get(getResource(ROOT_RESOURCE + \"rpc_client_keystore.pfx\").getPath());\n-  private static final Path X_CLIENT_CERT_KEYSTORE_PATH =\n-      Paths.get(getResource(ROOT_RESOURCE + \"rpc_client_2.pfx\").getPath());\n-\n   private JsonRpcHttpService service;\n   private String baseUrl;\n   private Map<String, JsonRpcMethod> rpcMethods;\n   private final JsonRpcTestHelper testHelper = new JsonRpcTestHelper();\n+  private SelfSignedPfxStore selfSignedPfxStore;\n+  private SelfSignedPfxStore selfSignedPfxStoreForHttpClient;\n+  private SelfSignedPfxStore selfSignedPfxStoreForHttpClientNotTrustedByServer;\n \n   @Before\n   public void initServer() throws Exception {\n+    selfSignedPfxStore = SelfSignedPfxStore.create();\n+    selfSignedPfxStoreForHttpClient = SelfSignedPfxStore.create();\n+    selfSignedPfxStoreForHttpClientNotTrustedByServer = SelfSignedPfxStore.create();", "originalCommit": "150ba1ae9fa4239394dab5addb777e0c0515982d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4Mzc1NQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r371683755", "bodyText": "The utility class generate both keystore and truststore containing self-sligned certificate. The keystore is used by server/json-rpc and truststore is used by okhttp/client vice-versa is also applicable for testing client-auth. The keystore used by okhttp client, its truststore is used by server. Hence there is a need of having three different instances of self-signed certs. I can wrap them in a method for the sake of reaability, but all it will do is return instances which will again store in three different variables.", "author": "usmansaleem", "createdAt": "2020-01-28T09:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4Njc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fe467ea4230109cf8e9b61c62992a1e9bf6462af", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsTest.java\nindex f25363aeb6..834a644ac1 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsTest.java\n\n@@ -90,15 +90,12 @@ public class JsonRpcHttpServiceTlsTest {\n   private String baseUrl;\n   private Map<String, JsonRpcMethod> rpcMethods;\n   private final JsonRpcTestHelper testHelper = new JsonRpcTestHelper();\n-  private SelfSignedPfxStore selfSignedPfxStore;\n-  private SelfSignedPfxStore selfSignedPfxStoreForHttpClient;\n-  private SelfSignedPfxStore selfSignedPfxStoreForHttpClientNotTrustedByServer;\n+  private final SelfSignedP12Certificate besuCertificate = SelfSignedP12Certificate.create();\n+  private final SelfSignedP12Certificate okHttpClientCertificate =\n+      SelfSignedP12Certificate.create();\n \n   @Before\n   public void initServer() throws Exception {\n-    selfSignedPfxStore = SelfSignedPfxStore.create();\n-    selfSignedPfxStoreForHttpClient = SelfSignedPfxStore.create();\n-    selfSignedPfxStoreForHttpClientNotTrustedByServer = SelfSignedPfxStore.create();\n     final P2PNetwork peerDiscoveryMock = mock(P2PNetwork.class);\n     final BlockchainQueries blockchainQueries = mock(BlockchainQueries.class);\n     final Synchronizer synchronizer = mock(Synchronizer.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzAwNw==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369387007", "bodyText": "Is this method a duplicate also added in JsonRpcHttpServiceTlsTest.java, util method for reuse?", "author": "CjHare", "createdAt": "2020-01-22T06:23:24Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java", "diffHunk": "@@ -121,6 +122,15 @@ public void beforeEach() {\n                     Collections.emptyMap()));\n   }\n \n+  private Path createKnownClientsFile() throws Exception {", "originalCommit": "150ba1ae9fa4239394dab5addb777e0c0515982d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4NDIxMQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r371684211", "bodyText": "let me check. Probably a candidate to move in common testSupport or utility class.", "author": "usmansaleem", "createdAt": "2020-01-28T09:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2ODAzOQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r371768039", "bodyText": "This has been moved to a separate utility class.", "author": "usmansaleem", "createdAt": "2020-01-28T12:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "fe467ea4230109cf8e9b61c62992a1e9bf6462af", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\nindex 54382dfd5a..75e346f894 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\n\n@@ -122,15 +120,6 @@ public class JsonRpcHttpServiceTlsMisconfigurationTest {\n                     Collections.emptyMap()));\n   }\n \n-  private Path createKnownClientsFile() throws Exception {\n-    final String knownClientsLine =\n-        TrustStoreUtil.commonNameAndFingerPrint(\n-            selfSignedPfxStore.getTrustStoreFile(),\n-            selfSignedPfxStore.getPassword(),\n-            selfSignedPfxStore.getAlias());\n-    return Files.writeString(folder.newFile().toPath(), knownClientsLine);\n-  }\n-\n   @After\n   public void shutdownServer() {\n     Optional.ofNullable(service).ifPresent(s -> service.stop().join());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzQ3Mg==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r369387472", "bodyText": "keep consistent naming, either prefix both methods with get or neither.", "author": "CjHare", "createdAt": "2020-01-22T06:25:30Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/TrustStoreUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.cert.X509CertificateHolder;\n+\n+public class TrustStoreUtil {\n+  public static String commonNameAndFingerPrint(", "originalCommit": "150ba1ae9fa4239394dab5addb777e0c0515982d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4NDI3Ng==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r371684276", "bodyText": "agreed.", "author": "usmansaleem", "createdAt": "2020-01-28T09:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc2ODI4MA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r371768280", "bodyText": "The class name has been refactored to clear the intent. Also, methods has been changed accordingly as well.", "author": "usmansaleem", "createdAt": "2020-01-28T12:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM4NzQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fe467ea4230109cf8e9b61c62992a1e9bf6462af", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/TrustStoreUtil.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\nsimilarity index 61%\nrename from ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/TrustStoreUtil.java\nrename to ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\nindex b3f6b5b037..526b690c33 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/TrustStoreUtil.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\n\n@@ -17,8 +17,9 @@\n package org.hyperledger.besu.ethereum.api.tls;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.security.KeyStore;\n+import java.security.GeneralSecurityException;\n import java.security.cert.Certificate;\n import java.security.cert.CertificateEncodingException;\n \n"}}, {"oid": "fc995abc1168f35b83fc6e6ba0764f58d78f6f98", "url": "https://github.com/hyperledger/besu/commit/fc995abc1168f35b83fc6e6ba0764f58d78f6f98", "message": "Merge remote-tracking branch 'upstream/master' into rpc_tls_tests_certs\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-28T09:04:04Z", "type": "commit"}, {"oid": "fe467ea4230109cf8e9b61c62992a1e9bf6462af", "url": "https://github.com/hyperledger/besu/commit/fe467ea4230109cf8e9b61c62992a1e9bf6462af", "message": "Refactoring after review suggestions\n\n -- Renaming class to clear intent\n -- Introducing builder in TlsHttpClient test utility\n -- cleaning unit tests\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-28T12:16:27Z", "type": "commit"}, {"oid": "b5bdb30cd49b3e9b2da89a6fd26d1851502cdb8d", "url": "https://github.com/hyperledger/besu/commit/b5bdb30cd49b3e9b2da89a6fd26d1851502cdb8d", "message": "refactoring method name\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-28T12:19:45Z", "type": "commit"}, {"oid": "f664efc069d861c71cc641db51e4f7eb2f5659d9", "url": "https://github.com/hyperledger/besu/commit/f664efc069d861c71cc641db51e4f7eb2f5659d9", "message": "Refactoring TlsOkHttpClientBuilder by eliminating an indirection layer to construct OkHttpClient\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-28T12:37:41Z", "type": "commit"}, {"oid": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "url": "https://github.com/hyperledger/besu/commit/db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "message": "Merge remote-tracking branch 'upstream/master' into rpc_tls_tests_certs\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-28T23:20:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODEwOA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372138108", "bodyText": "nit: I'd remove \"test\" - you never know if someone wants to make this a general capability in an app/library.\nHaving said that - having this create a tempFile, when you don't know the use of this function is kinda dangerous.\nBut am wondering if these two functions should effeictvely exist on the SelfSignedP12Certificate - such taht someone can say:\ncert.getFingerPrint();\ncert.getCommonName();\nwriteFile(fingerprint, commonName)", "author": "rain-on", "createdAt": "2020-01-29T00:47:22Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+\n+import org.apache.tuweni.net.tls.TLS;\n+import org.bouncycastle.asn1.x500.RDN;\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x500.style.BCStyle;\n+import org.bouncycastle.asn1.x500.style.IETFUtils;\n+import org.bouncycastle.cert.X509CertificateHolder;\n+\n+public class KnownClientFileUtil {\n+\n+  public static Path createKnownClientsFile(\n+      final SelfSignedP12Certificate selfSignedP12Certificate) {\n+    try {\n+      final Certificate certificate = selfSignedP12Certificate.getCertificate();\n+      final String fingerprint = TLS.certificateHexFingerprint(certificate);\n+      final String commonName = extractCommonName(certificate);\n+      final String knownClientsLine = String.format(\"%s %s\", commonName, fingerprint);\n+      final Path temporaryKnownClientsFile = Files.createTempFile(\"testKnownClients\", \".txt\");", "originalCommit": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE1MjIzOA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372152238", "bodyText": "I've refactored it.", "author": "usmansaleem", "createdAt": "2020-01-29T01:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "b994dab8a05c60fa076e4e6cf630c7c416819aa2", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\nindex 258ed42fed..cd0ebf78f3 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/KnownClientFileUtil.java\n\n@@ -19,38 +19,17 @@ package org.hyperledger.besu.ethereum.api.tls;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.security.GeneralSecurityException;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateEncodingException;\n-\n-import org.apache.tuweni.net.tls.TLS;\n-import org.bouncycastle.asn1.x500.RDN;\n-import org.bouncycastle.asn1.x500.X500Name;\n-import org.bouncycastle.asn1.x500.style.BCStyle;\n-import org.bouncycastle.asn1.x500.style.IETFUtils;\n-import org.bouncycastle.cert.X509CertificateHolder;\n+import java.util.List;\n \n public class KnownClientFileUtil {\n \n-  public static Path createKnownClientsFile(\n-      final SelfSignedP12Certificate selfSignedP12Certificate) {\n+  public static void writeToKnownClientsFile(\n+      final String commonName, final String fingerprint, final Path knownClientsFile) {\n     try {\n-      final Certificate certificate = selfSignedP12Certificate.getCertificate();\n-      final String fingerprint = TLS.certificateHexFingerprint(certificate);\n-      final String commonName = extractCommonName(certificate);\n       final String knownClientsLine = String.format(\"%s %s\", commonName, fingerprint);\n-      final Path temporaryKnownClientsFile = Files.createTempFile(\"testKnownClients\", \".txt\");\n-      temporaryKnownClientsFile.toFile().deleteOnExit();\n-      return Files.writeString(temporaryKnownClientsFile, knownClientsLine);\n-    } catch (final IOException | GeneralSecurityException e) {\n-      throw new RuntimeException(\"Error in creating known clients file\", e);\n+      Files.write(knownClientsFile, List.of(\"#Known Clients File\", knownClientsLine));\n+    } catch (final IOException e) {\n+      throw new RuntimeException(\"Error in updating known clients file\", e);\n     }\n   }\n-\n-  private static String extractCommonName(final Certificate certificate)\n-      throws IOException, CertificateEncodingException {\n-    final X500Name subject = new X509CertificateHolder(certificate.getEncoded()).getSubject();\n-    final RDN commonNameRdn = subject.getRDNs(BCStyle.CN)[0];\n-    return IETFUtils.valueToString(commonNameRdn.getFirst().getValue());\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODI1OQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372138259", "bodyText": "does this need a closing ? I know nothing of html", "author": "rain-on", "createdAt": "2020-01-29T00:48:02Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.CertIOException;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs. The generated certificate supports SAN extension for multiple\n+ * DNS and IP addresses\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.", "originalCommit": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MjAwNQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372142005", "bodyText": "No, even if we close it, spotlessJavaApply removed the closing p.", "author": "usmansaleem", "createdAt": "2020-01-29T01:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b994dab8a05c60fa076e4e6cf630c7c416819aa2", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\nindex 7896f74585..d93781ed07 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\n\n@@ -16,6 +16,8 @@\n  */\n package org.hyperledger.besu.ethereum.api.tls;\n \n+import static org.hyperledger.besu.crypto.SecureRandomProvider.createSecureRandom;\n+\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.math.BigInteger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODU4OA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372138588", "bodyText": "why are you suppressing - can this not use the secureRandom factory?", "author": "rain-on", "createdAt": "2020-01-29T00:49:16Z", "path": "ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ *\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.ethereum.api.tls;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.time.Instant;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.asn1.x509.BasicConstraints;\n+import org.bouncycastle.asn1.x509.Extension;\n+import org.bouncycastle.asn1.x509.GeneralName;\n+import org.bouncycastle.asn1.x509.GeneralNames;\n+import org.bouncycastle.cert.CertIOException;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+\n+/**\n+ * Utility class to generate temporary self-signed certificates in PKCS12 format for testing\n+ * purposes using BouncyCastle APIs. The generated certificate supports SAN extension for multiple\n+ * DNS and IP addresses\n+ *\n+ * <p>Note: DO NOT USE IN PRODUCTION. The generated stores and files are marked to be deleted on JVM\n+ * exit.\n+ */\n+public final class SelfSignedP12Certificate {\n+  private static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();\n+  private static final String alias = \"test\";\n+  private static final boolean IS_CA = true;\n+  private static final String distinguishedName = \"CN=localhost\";\n+  private static final List<String> sanHostNames = List.of(\"localhost\");\n+  private static final List<String> sanIpAddresses = List.of(\"127.0.0.1\");\n+  private static final char[] password = \"changeit\".toCharArray();\n+  private final Certificate certificate;\n+  private final Path keyStore;\n+  private final Path trustStore;\n+\n+  private SelfSignedP12Certificate(\n+      final Certificate certificate, final Path keyStore, final Path trustStore) {\n+    this.certificate = certificate;\n+    this.keyStore = keyStore;\n+    this.trustStore = trustStore;\n+  }\n+\n+  public static SelfSignedP12Certificate create() {\n+    try {\n+      final KeyPair keyPair = generateKeyPair();\n+      final Certificate certificate = generateSelfSignedCertificate(keyPair);\n+      final Path keyStore = createKeyStore(keyPair.getPrivate(), certificate);\n+      final Path trustStore = createTrustStore(certificate);\n+      return new SelfSignedP12Certificate(certificate, keyStore, trustStore);\n+    } catch (final IOException | GeneralSecurityException | OperatorCreationException e) {\n+      throw new RuntimeException(\"Error creating self signed certificates\", e);\n+    }\n+  }\n+\n+  public Certificate getCertificate() {\n+    return certificate;\n+  }\n+\n+  public Path getKeyStoreFile() {\n+    return keyStore;\n+  }\n+\n+  public Path getTrustStoreFile() {\n+    return trustStore;\n+  }\n+\n+  public char[] getPassword() {\n+    return password;\n+  }\n+\n+  @SuppressWarnings(\"DoNotCreateSecureRandomDirectly\")", "originalCommit": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MTcwOQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372141709", "bodyText": "Besu doesn't allow new SecureRandom() and SecureRandom.getInstance() calls. org/hyperledger/errorpronechecks/DoNotCreateSecureRandomDirectly.java:36", "author": "usmansaleem", "createdAt": "2020-01-29T01:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MTg2Ng==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372141866", "bodyText": "Since we are in tests and creating not-so-secure certificates, we are ok by suppressing this warning.", "author": "usmansaleem", "createdAt": "2020-01-29T01:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MjA2MA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372142060", "bodyText": "Please don't suppress this warning, just use SecureRandomFactory.", "author": "ajsutton", "createdAt": "2020-01-29T01:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MjI5Mg==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372142292", "bodyText": "\ud83d\udc4d", "author": "usmansaleem", "createdAt": "2020-01-29T01:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b994dab8a05c60fa076e4e6cf630c7c416819aa2", "chunk": "diff --git a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\nindex 7896f74585..d93781ed07 100644\n--- a/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\n+++ b/ethereum/api/src/test-support/java/org/hyperledger/besu/ethereum/api/tls/SelfSignedP12Certificate.java\n\n@@ -16,6 +16,8 @@\n  */\n package org.hyperledger.besu.ethereum.api.tls;\n \n+import static org.hyperledger.besu.crypto.SecureRandomProvider.createSecureRandom;\n+\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.math.BigInteger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTEyMA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372139120", "bodyText": "nit: is besuCertificate correct here, or is this the certificate presented by the client?", "author": "rain-on", "createdAt": "2020-01-29T00:51:25Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java", "diffHunk": "@@ -76,10 +76,9 @@\n   private static final String CLIENT_VERSION = \"TestClientVersion/0.1.0\";\n   private static final BigInteger CHAIN_ID = BigInteger.valueOf(123);\n   private static final Collection<RpcApi> JSON_RPC_APIS = List.of(ETH, NET, WEB3);\n-  private static final String KEYSTORE_RESOURCE = \"JsonRpcHttpService/rpc_keystore.pfx\";\n-  private static final String KNOWN_CLIENTS_RESOURCE = \"JsonRpcHttpService/rpc_known_clients.txt\";\n   private static final NatService natService = new NatService(Optional.empty());\n-\n+  private final SelfSignedP12Certificate besuCertificate = SelfSignedP12Certificate.create();", "originalCommit": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MDk0OQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372140949", "bodyText": "besuCertificate contains certificate keystore used by Besu. It also exposes trustStore that can be used by OkHttp client library to trust Besu.", "author": "usmansaleem", "createdAt": "2020-01-29T00:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b994dab8a05c60fa076e4e6cf630c7c416819aa2", "chunk": "diff --git a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\nindex 75e346f894..f5f230191b 100644\n--- a/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\n+++ b/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceTlsMisconfigurationTest.java\n\n@@ -78,12 +78,17 @@ public class JsonRpcHttpServiceTlsMisconfigurationTest {\n   private static final Collection<RpcApi> JSON_RPC_APIS = List.of(ETH, NET, WEB3);\n   private static final NatService natService = new NatService(Optional.empty());\n   private final SelfSignedP12Certificate besuCertificate = SelfSignedP12Certificate.create();\n-  private final Path knownClientsFile = createKnownClientsFile(besuCertificate);\n+  private Path knownClientsFile;\n   private Map<String, JsonRpcMethod> rpcMethods;\n   private JsonRpcHttpService service;\n \n   @Before\n-  public void beforeEach() {\n+  public void beforeEach() throws IOException {\n+    knownClientsFile = folder.newFile().toPath();\n+    writeToKnownClientsFile(\n+        besuCertificate.getCommonName(),\n+        besuCertificate.getCertificateHexFingerprint(),\n+        knownClientsFile);\n     final P2PNetwork peerDiscoveryMock = mock(P2PNetwork.class);\n     final BlockchainQueries blockchainQueries = mock(BlockchainQueries.class);\n     final Synchronizer synchronizer = mock(Synchronizer.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTQyNA==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372139424", "bodyText": "whats the difference between the besuCertificate and the okHttpCertificate?", "author": "rain-on", "createdAt": "2020-01-29T00:52:39Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/TlsOkHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc;\n+\n+import static org.hyperledger.besu.crypto.SecureRandomProvider.createSecureRandom;\n+\n+import org.hyperledger.besu.ethereum.api.tls.SelfSignedP12Certificate;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.util.Optional;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import okhttp3.OkHttpClient;\n+\n+public final class TlsOkHttpClientBuilder {\n+  private SelfSignedP12Certificate besuCertificate;", "originalCommit": "db36e9138f3225c285b2ddf87b7f92d1d5e9f4e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0MTI4OQ==", "url": "https://github.com/hyperledger/besu/pull/311#discussion_r372141289", "bodyText": "In case of this builder class, we need to trust Besu certificate, okhttpcertificate is optional and required if besu enables client-auth ... OkHttpClient set its keystore exposed by okhttpcertificate.", "author": "usmansaleem", "createdAt": "2020-01-29T00:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTQyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b994dab8a05c60fa076e4e6cf630c7c416819aa2", "url": "https://github.com/hyperledger/besu/commit/b994dab8a05c60fa076e4e6cf630c7c416819aa2", "message": "review suggestions - refactoring\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-01-29T01:57:21Z", "type": "commit"}]}