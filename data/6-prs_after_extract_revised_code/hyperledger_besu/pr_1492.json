{"pr_number": 1492, "pr_title": "Add OTLP metrics support", "pr_createdAt": "2020-10-23T20:13:39Z", "pr_url": "https://github.com/hyperledger/besu/pull/1492", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mzg2Mw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512153863", "bodyText": "What is instrumentation name used for?  I'm not seeing other classes use it, only a getter, constructor, and builder.", "author": "shemnon", "createdAt": "2020-10-26T17:46:47Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODU0MA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512938540", "bodyText": "I actually think it's best to match it to prometheus job name. I'll clean that up.", "author": "atoulme", "createdAt": "2020-10-27T18:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mzg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b9794a4afc29a0a9bbe82f38b1e11f6d4d7a126e", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\nindex 090c2c119..0b863f9d0 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n\n@@ -30,15 +31,13 @@ import com.google.common.base.MoreObjects;\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n-  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n+  private static final MetricsProtocol DEFAULT_METRICS_PROTOCOL = MetricsProtocol.PROMETHEUS;\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n-  private final String instrumentationName;\n-  private final String protocol;\n+  private final MetricsProtocol protocol;\n   private final int port;\n   private int actualPort;\n   private final String host;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDAzOA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512154038", "bodyText": "This should be an enum and not a free string.", "author": "shemnon", "createdAt": "2020-10-26T17:47:04Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;\n+  private final String protocol;", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MjY5NA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512992694", "bodyText": "Fixed.", "author": "atoulme", "createdAt": "2020-10-27T19:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "b9794a4afc29a0a9bbe82f38b1e11f6d4d7a126e", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\nindex 090c2c119..0b863f9d0 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n\n@@ -30,15 +31,13 @@ import com.google.common.base.MoreObjects;\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n-  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n+  private static final MetricsProtocol DEFAULT_METRICS_PROTOCOL = MetricsProtocol.PROMETHEUS;\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n-  private final String instrumentationName;\n-  private final String protocol;\n+  private final MetricsProtocol protocol;\n   private final int port;\n   private int actualPort;\n   private final String host;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512155528", "bodyText": "This split logic should be in a system neutral class.", "author": "shemnon", "createdAt": "2020-10-26T17:49:17Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MjU0OQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512192549", "bodyText": "Sure, move it up to the ObservableMetricsSystem interface?", "author": "atoulme", "createdAt": "2020-10-26T18:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMTAzNw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512221037", "bodyText": "No, move it to a new system neutral class.  The interface is not the bootstrap.", "author": "shemnon", "createdAt": "2020-10-26T19:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\nindex ae08cf41b..e14a1324c 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n\n@@ -83,7 +83,7 @@ public class PrometheusMetricsSystem implements ObservableMetricsSystem {\n           new OpenTelemetrySystem(\n               metricsConfiguration.getMetricCategories(),\n               metricsConfiguration.isTimersEnabled(),\n-              metricsConfiguration.isPushEnabled());\n+              metricsConfiguration.getInstrumentationName());\n       metricsSystem.initDefaults();\n       return metricsSystem;\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTcwMQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512155701", "bodyText": "This init logic should be in an OTLP specific class.", "author": "shemnon", "createdAt": "2020-10-26T17:49:31Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\nindex ae08cf41b..e14a1324c 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n\n@@ -83,7 +83,7 @@ public class PrometheusMetricsSystem implements ObservableMetricsSystem {\n           new OpenTelemetrySystem(\n               metricsConfiguration.getMetricCategories(),\n               metricsConfiguration.isTimersEnabled(),\n-              metricsConfiguration.isPushEnabled());\n+              metricsConfiguration.getInstrumentationName());\n       metricsSystem.initDefaults();\n       return metricsSystem;\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDAxNw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512160017", "bodyText": "These classes have JMX initialization in their constructors, so the if blocks checking on the category being enabled before being added to the collector needs to be preserved.\nYes, I know, side effects.  But fixing that is tangential to the scope of this PR.", "author": "shemnon", "createdAt": "2020-10-26T17:56:18Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =\n+          new OpenTelemetrySystem(\n+              metricsConfiguration.getMetricCategories(),\n+              metricsConfiguration.isTimersEnabled(),\n+              metricsConfiguration.isPushEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Invalid metrics protocol \" + metricsConfiguration.getProtocol());\n     }\n-    return metricsSystem;\n+  }\n+\n+  private void initDefaults() {\n+    addCollector(StandardMetricCategory.PROCESS, new StandardExports());", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDU2Ng==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512194566", "bodyText": "Ah, didn't catch that. Will work on that.", "author": "atoulme", "createdAt": "2020-10-26T18:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\nindex ae08cf41b..e14a1324c 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java\n\n@@ -83,7 +83,7 @@ public class PrometheusMetricsSystem implements ObservableMetricsSystem {\n           new OpenTelemetrySystem(\n               metricsConfiguration.getMetricCategories(),\n               metricsConfiguration.isTimersEnabled(),\n-              metricsConfiguration.isPushEnabled());\n+              metricsConfiguration.getInstrumentationName());\n       metricsSystem.initDefaults();\n       return metricsSystem;\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTgwNA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512165804", "bodyText": "This isn't set anywhere.  There should be a CLI flag in BesuCommand.java.  Probably --metrics-protocol (around line 647) accepting the protocol enum and defaulting to prometheus (like we do for --sync-mode), then feeding that into the metrics config in the metricsConfiguration() method.", "author": "shemnon", "createdAt": "2020-10-26T18:05:38Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -207,6 +227,11 @@ public Builder enabled(final boolean enabled) {\n       return this;\n     }\n \n+    public Builder protocol(final String protocol) {", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MjU3Nw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512992577", "bodyText": "Ok added.", "author": "atoulme", "createdAt": "2020-10-27T19:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "b9794a4afc29a0a9bbe82f38b1e11f6d4d7a126e", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\nindex 090c2c119..0b863f9d0 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java\n\n@@ -227,7 +219,7 @@ public class MetricsConfiguration {\n       return this;\n     }\n \n-    public Builder protocol(final String protocol) {\n+    public Builder protocol(final MetricsProtocol protocol) {\n       this.protocol = protocol;\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512169588", "bodyText": "Export at 2Hz?  Is that a good idea performance wise?  I think you should use the metrics push interval from the MetricsConfiguration.  If we need to go faster than 1/sec we may need to adjust it somehow.  But I would need to be persuaded that pushing more than 1/sec is a good idea at scale.", "author": "shemnon", "createdAt": "2020-10-26T18:11:43Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n+  private IntervalMetricReader periodicReader;\n+\n+  public OpenTelemetrySystem(\n+      final Set<MetricCategory> enabledCategories,\n+      final boolean timersEnabled,\n+      final boolean pushEnabled) {\n+    this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n+    this.timersEnabled = timersEnabled;\n+\n+    if (pushEnabled) {\n+      IntervalMetricReader.Builder builder =\n+          IntervalMetricReader.builder()\n+              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+              .setExportIntervalMillis(500);", "originalCommit": "06e333918f54567a3a2b9ea401d75ab8bcbe4072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDIxNw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512194217", "bodyText": "Right, sounds like a good config flag. I know Prometheus is routinely 5 to 10s. Otel can be faster, especially if you want to instrument realtime metrics. A good default is 5s.", "author": "atoulme", "createdAt": "2020-10-26T18:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMTg5Mg==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512221892", "bodyText": "if we need to we can add a --push-metrics-interval-unit that defaults to seconds, but if Otel doesn't need sub-second push frequency I'd prefer to push it off as long as possible.", "author": "shemnon", "createdAt": "2020-10-26T19:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMDAzMA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512930030", "bodyText": "It's not about Otel needing sub-second frequency, it's what the users want to see. Some folks use Otel and backend offering for subsecond metric resolution. Granted, that's probably not a prime use case here, so we can stick to seconds until someone comes along with that need.", "author": "atoulme", "createdAt": "2020-10-27T18:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\nindex 797c9eb28..30ba70fba 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\n\n@@ -70,23 +70,17 @@ public class OpenTelemetrySystem implements ObservableMetricsSystem {\n   private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n       new ConcurrentHashMap<>();\n   private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n-  private IntervalMetricReader periodicReader;\n+  private final IntervalMetricReader periodicReader =\n+      IntervalMetricReader.builder()\n+          .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+          .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+          .setExportIntervalMillis(500)\n+          .build();\n \n   public OpenTelemetrySystem(\n-      final Set<MetricCategory> enabledCategories,\n-      final boolean timersEnabled,\n-      final boolean pushEnabled) {\n+      final Set<MetricCategory> enabledCategories, final boolean timersEnabled, final String name) {\n     this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n     this.timersEnabled = timersEnabled;\n-\n-    if (pushEnabled) {\n-      IntervalMetricReader.Builder builder =\n-          IntervalMetricReader.builder()\n-              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n-              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n-              .setExportIntervalMillis(500);\n-      this.periodicReader = builder.build();\n-    }\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMjg4MQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r513032881", "bodyText": "NoOp is too lingo-driven to be exposed to the CLI.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              NOOP;\n          \n          \n            \n              NONE;", "author": "shemnon", "createdAt": "2020-10-27T21:07:56Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.hyperledger.besu.metrics;\n+\n+/** Enumeration of metrics protocols supported by Besu. */\n+public enum MetricsProtocol {\n+  PROMETHEUS,\n+  OPENTELEMETRY,\n+  NOOP;", "originalCommit": "1fc871caf77134992ae32fd939a90d8b25cf7954", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java\ndeleted file mode 100644\nindex 24e84fb73..000000000\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package org.hyperledger.besu.metrics;\n-\n-/** Enumeration of metrics protocols supported by Besu. */\n-public enum MetricsProtocol {\n-  PROMETHEUS,\n-  OPENTELEMETRY,\n-  NOOP;\n-\n-  public static MetricsProtocol fromString(final String str) {\n-    for (final MetricsProtocol mode : MetricsProtocol.values()) {\n-      if (mode.name().equalsIgnoreCase(str)) {\n-        return mode;\n-      }\n-    }\n-    return null;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMTEzMg==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r514531132", "bodyText": "This will make LGTM happy.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          1000 * metricsConfiguration.getPushInterval());\n          \n          \n            \n                          1000L * metricsConfiguration.getPushInterval());", "author": "shemnon", "createdAt": "2020-10-29T20:02:26Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics;\n+\n+import static org.hyperledger.besu.metrics.MetricsProtocol.OPENTELEMETRY;\n+import static org.hyperledger.besu.metrics.MetricsProtocol.PROMETHEUS;\n+\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.metrics.opentelemetry.OpenTelemetrySystem;\n+import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n+import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n+\n+/** Creates a new metric system based on configuration. */\n+public class MetricsSystemFactory {\n+\n+  private MetricsSystemFactory() {}\n+\n+  /**\n+   * Creates and starts a new metric system to observe the behavior of the client\n+   *\n+   * @param metricsConfiguration the configuration of the metric system\n+   * @return a new metric system\n+   */\n+  public static ObservableMetricsSystem create(final MetricsConfiguration metricsConfiguration) {\n+    if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n+      return new NoOpMetricsSystem();\n+    }\n+    if (PROMETHEUS.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.init();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =\n+          new OpenTelemetrySystem(\n+              metricsConfiguration.getMetricCategories(),\n+              metricsConfiguration.isTimersEnabled(),\n+              metricsConfiguration.getPrometheusJob(),\n+              true,\n+              1000 * metricsConfiguration.getPushInterval());", "originalCommit": "a5736e789aabce23889cdb48ddbfb28e04e8a557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea454d21781d9c0561ec842b0567476fe64daeb7", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java\ndeleted file mode 100644\nindex 0cbf8c3e5..000000000\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.metrics;\n-\n-import static org.hyperledger.besu.metrics.MetricsProtocol.OPENTELEMETRY;\n-import static org.hyperledger.besu.metrics.MetricsProtocol.PROMETHEUS;\n-\n-import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n-import org.hyperledger.besu.metrics.opentelemetry.OpenTelemetrySystem;\n-import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n-import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n-\n-/** Creates a new metric system based on configuration. */\n-public class MetricsSystemFactory {\n-\n-  private MetricsSystemFactory() {}\n-\n-  /**\n-   * Creates and starts a new metric system to observe the behavior of the client\n-   *\n-   * @param metricsConfiguration the configuration of the metric system\n-   * @return a new metric system\n-   */\n-  public static ObservableMetricsSystem create(final MetricsConfiguration metricsConfiguration) {\n-    if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n-      return new NoOpMetricsSystem();\n-    }\n-    if (PROMETHEUS.equals(metricsConfiguration.getProtocol())) {\n-      final PrometheusMetricsSystem metricsSystem =\n-          new PrometheusMetricsSystem(\n-              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-      metricsSystem.init();\n-      return metricsSystem;\n-    } else if (OPENTELEMETRY.equals(metricsConfiguration.getProtocol())) {\n-      final OpenTelemetrySystem metricsSystem =\n-          new OpenTelemetrySystem(\n-              metricsConfiguration.getMetricCategories(),\n-              metricsConfiguration.isTimersEnabled(),\n-              metricsConfiguration.getPrometheusJob(),\n-              true,\n-              1000 * metricsConfiguration.getPushInterval());\n-      metricsSystem.initDefaults();\n-      return metricsSystem;\n-    } else {\n-      throw new IllegalArgumentException(\n-          \"Invalid metrics protocol \" + metricsConfiguration.getProtocol());\n-    }\n-  }\n-}\n"}}, {"oid": "ea454d21781d9c0561ec842b0567476fe64daeb7", "url": "https://github.com/hyperledger/besu/commit/ea454d21781d9c0561ec842b0567476fe64daeb7", "message": "Add OTLP metrics support\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "6a01c3438bbe387c46cc2d789914c9d8abddc4a5", "url": "https://github.com/hyperledger/besu/commit/6a01c3438bbe387c46cc2d789914c9d8abddc4a5", "message": "Don't automatically push to grpc. Only allow if pushEnabled is set to true\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "b9794a4afc29a0a9bbe82f38b1e11f6d4d7a126e", "url": "https://github.com/hyperledger/besu/commit/b9794a4afc29a0a9bbe82f38b1e11f6d4d7a126e", "message": "Code review\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "cb2faa01999f151828dc7afbfaecaeedcdfeb0fa", "url": "https://github.com/hyperledger/besu/commit/cb2faa01999f151828dc7afbfaecaeedcdfeb0fa", "message": "Missed refactoring\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "508be68976127cc87ec0264b78c3885480b34494", "url": "https://github.com/hyperledger/besu/commit/508be68976127cc87ec0264b78c3885480b34494", "message": "Add missing header\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "bb7616be2a467bd3efc8dd0c61f15e9099e0bfe6", "url": "https://github.com/hyperledger/besu/commit/bb7616be2a467bd3efc8dd0c61f15e9099e0bfe6", "message": "\u00a0Don't make otel depend on the push enabled flag\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "b98645159d88f59ee27a5121890333ab02f6d0af", "url": "https://github.com/hyperledger/besu/commit/b98645159d88f59ee27a5121890333ab02f6d0af", "message": "Expose JUL logs to log4j2\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "a69ec072d38be25421cf55ad9f934b9f4734229c", "url": "https://github.com/hyperledger/besu/commit/a69ec072d38be25421cf55ad9f934b9f4734229c", "message": "Code review fixes and make sure not to start push gateway if not set to prometheus\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "commit"}, {"oid": "a69ec072d38be25421cf55ad9f934b9f4734229c", "url": "https://github.com/hyperledger/besu/commit/a69ec072d38be25421cf55ad9f934b9f4734229c", "message": "Code review fixes and make sure not to start push gateway if not set to prometheus\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:26:15Z", "type": "forcePushed"}, {"oid": "50ed7d97580c04044b48c3b3d89f7ac987418409", "url": "https://github.com/hyperledger/besu/commit/50ed7d97580c04044b48c3b3d89f7ac987418409", "message": "spotless\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T01:37:08Z", "type": "commit"}, {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "url": "https://github.com/hyperledger/besu/commit/ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "message": "Fix unit test\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-07T02:26:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NzkyMA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519187920", "bodyText": "This should be set in the launcher scripts.  Other dependent classes may start logging before BesuCommand gets to fire off its class initializers.  Especially as our set of dependent libraries continues to grow.", "author": "shemnon", "createdAt": "2020-11-07T15:22:32Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -202,6 +204,11 @@\n     footer = \"Besu is licensed under the Apache License 2.0\")\n public class BesuCommand implements DefaultCommandValues, Runnable {\n \n+  static {\n+    // redirect java.util.logging loggers to use log4j2.\n+    System.setProperty(\"java.util.logging.manager\", \"org.apache.logging.log4j.jul.LogManager\");", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NzQzMA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520967430", "bodyText": "Moved to the launcher script arguments.", "author": "atoulme", "createdAt": "2020-11-11T00:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NzkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 437181ac2..a2bf923c2 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -204,11 +204,6 @@ import picocli.CommandLine.ParameterException;\n     footer = \"Besu is licensed under the Apache License 2.0\")\n public class BesuCommand implements DefaultCommandValues, Runnable {\n \n-  static {\n-    // redirect java.util.logging loggers to use log4j2.\n-    System.setProperty(\"java.util.logging.manager\", \"org.apache.logging.log4j.jul.LogManager\");\n-  }\n-\n   @SuppressWarnings(\"PrivateStaticFinalLoggers\")\n   // non-static for testing\n   private final Logger logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4Nzk3MA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519187970", "bodyText": "UX: change NOOP to NONE.\nThe long term solution is to use ${COMPLETION-CANDIDATES} instead of spelling them out in static text.", "author": "shemnon", "createdAt": "2020-11-07T15:23:24Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -644,6 +651,13 @@ void setBannedNodeIds(final List<String> values) {\n       description = \"Set to start the metrics exporter (default: ${DEFAULT-VALUE})\")\n   private final Boolean isMetricsEnabled = false;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"}) // PicoCLI requires non-final Strings.\n+  @Option(\n+      names = {\"--metrics-protocol\"},\n+      description =\n+          \"Metrics protocol, one of PROMETHEUS, OPENTELEMETRY or NOOP. (default: ${DEFAULT-VALUE})\")", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NjY2Ng==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966666", "bodyText": "OK", "author": "atoulme", "createdAt": "2020-11-11T00:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4Nzk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\nindex 437181ac2..a2bf923c2 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java\n\n@@ -655,7 +650,7 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n   @Option(\n       names = {\"--metrics-protocol\"},\n       description =\n-          \"Metrics protocol, one of PROMETHEUS, OPENTELEMETRY or NOOP. (default: ${DEFAULT-VALUE})\")\n+          \"Metrics protocol, one of PROMETHEUS, OPENTELEMETRY or NONE. (default: ${DEFAULT-VALUE})\")\n   private MetricsProtocol metricsProtocol = PROMETHEUS;\n \n   @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"}) // PicoCLI requires non-final Strings.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODM5OA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519188398", "bodyText": "If this is a class named Prometheous* then a call to getMetricsSystem should not be able to return an OTLP metrics system.  Perhaps delete this class and move the impl of this method to MetricsSysteModule, which currently throws an abstract class error.", "author": "shemnon", "createdAt": "2020-11-07T15:27:33Z", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java", "diffHunk": "@@ -16,14 +16,14 @@\n \n package org.hyperledger.besu.evmtool;\n \n+import org.hyperledger.besu.metrics.MetricsSystemFactory;\n import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n-import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n \n public class PrometheusMetricsSystemModule extends MetricsSystemModule {\n \n   @Override\n   public MetricsSystem getMetricsSystem() {\n-    return PrometheusMetricsSystem.init(MetricsConfiguration.builder().build());\n+    return MetricsSystemFactory.create(MetricsConfiguration.builder().build());", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NzEyOQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520967129", "bodyText": "Done, deleted and pushed to the super class.", "author": "atoulme", "createdAt": "2020-11-11T00:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java b/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java\ndeleted file mode 100644\nindex da33b056d..000000000\n--- a/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- *\n- */\n-\n-package org.hyperledger.besu.evmtool;\n-\n-import org.hyperledger.besu.metrics.MetricsSystemFactory;\n-import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n-import org.hyperledger.besu.plugin.services.MetricsSystem;\n-\n-public class PrometheusMetricsSystemModule extends MetricsSystemModule {\n-\n-  @Override\n-  public MetricsSystem getMetricsSystem() {\n-    return MetricsSystemFactory.create(MetricsConfiguration.builder().build());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5Mzk0OA==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519193948", "bodyText": "See my comments about lifecycle management in OpenTelemetrySystem", "author": "shemnon", "createdAt": "2020-11-07T16:31:04Z", "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "diffHunk": "@@ -601,7 +602,8 @@ public Runner build() {\n     }\n \n     Optional<MetricsService> metricsService = Optional.empty();\n-    if (metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled()) {\n+    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n+        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java b/besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java\nindex 5feb25dbd..2e3884598 100644\n--- a/besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java\n+++ b/besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java\n\n@@ -601,11 +600,7 @@ public class RunnerBuilder {\n       createPrivateTransactionObserver(subscriptionManager, privacyParameters);\n     }\n \n-    Optional<MetricsService> metricsService = Optional.empty();\n-    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n-        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {\n-      metricsService = Optional.of(createMetricsService(vertx, metricsConfiguration));\n-    }\n+    Optional<MetricsService> metricsService = createMetricsService(vertx, metricsConfiguration);\n \n     final Optional<EthStatsService> ethStatsService;\n     if (!Strings.isNullOrEmpty(ethstatsUrl)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTA4MQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519195081", "bodyText": "See my comments about lifecycle management in OpenTelemetrySystem", "author": "shemnon", "createdAt": "2020-11-07T16:43:53Z", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -437,7 +438,8 @@ private void checkCommand(\n     Optional<MetricsService> metricsService = Optional.empty();\n     final MetricsConfiguration metricsConfiguration =\n         parentCommand.parentCommand.metricsConfiguration();\n-    if (metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled()) {\n+    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n+        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java\nindex 1bcd73d0e..d57c95375 100644\n--- a/besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java\n+++ b/besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java\n\n@@ -435,19 +434,13 @@ public class BlocksSubCommand implements Runnable {\n   }\n \n   private static Optional<MetricsService> initMetrics(final BlocksSubCommand parentCommand) {\n-    Optional<MetricsService> metricsService = Optional.empty();\n     final MetricsConfiguration metricsConfiguration =\n         parentCommand.parentCommand.metricsConfiguration();\n-    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n-        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {\n-      metricsService =\n-          Optional.of(\n-              MetricsService.create(\n-                  Vertx.vertx(),\n-                  metricsConfiguration,\n-                  parentCommand.parentCommand.getMetricsSystem()));\n-      metricsService.ifPresent(MetricsService::start);\n-    }\n+\n+    Optional<MetricsService> metricsService =\n+        MetricsService.create(\n+            Vertx.vertx(), metricsConfiguration, parentCommand.parentCommand.getMetricsSystem());\n+    metricsService.ifPresent(MetricsService::start);\n     return metricsService;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTk3OQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519195979", "bodyText": "The handling of the network communication tasks for Prometheus is separated into the MetricsService, which handles lifecycle events as well as port management (if that's needed).\nRather than pull Promethous' networking stack into the PromethousMetricSystem we should pull at least the networking lifecycle and port management parts into a MetricsService class.  If pull is a thing that would include hooks to start pull as well as the existing push code in response to start, do what is done in close in the stop method, and if reporting a port makes sense (pull only) report it in getPort.  Ideally the networking classes would live in this new class (just periodicReader?) but I am OK with the OLTPMetricsService simply doing what needs to be done in this class via method calls.\nTo that end MetricsService.create will need some adjustment, have it return an Optional<MetricsService> and the existing code goes down the stack where protocol==PROMETHEOUS and the catch-all (for NONE) returns an Optional.empty(), also the calls that have guards can have those guards removed as create does it all now.", "author": "shemnon", "createdAt": "2020-11-07T16:53:51Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceAttributes;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider;\n+  private IntervalMetricReader periodicReader;", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NjU0Mw==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966543", "bodyText": "OK, I think I have done that.", "author": "atoulme", "createdAt": "2020-11-11T00:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\nindex 6d516a0d5..4f1c9fd06 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java\n\n@@ -31,7 +31,6 @@ import java.lang.management.MemoryPoolMXBean;\n import java.lang.management.MemoryUsage;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.EnumSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NjA5NQ==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519196095", "bodyText": "remove this in favor of relying on MetricsService handling lifecycle events.  The specific sub-classes will know about the specific MetricsService they are paired with can can cast down.", "author": "shemnon", "createdAt": "2020-11-07T16:55:00Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java", "diffHunk": "@@ -17,11 +17,33 @@\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n \n+import java.util.Set;\n import java.util.stream.Stream;\n \n public interface ObservableMetricsSystem extends MetricsSystem {\n \n   Stream<Observation> streamObservations(MetricCategory category);\n \n   Stream<Observation> streamObservations();\n+\n+  /**\n+   * Provides an immutable view into the metric categories enabled for metric collection.\n+   *\n+   * @return the set of enabled metric categories.\n+   */\n+  Set<MetricCategory> getEnabledCategories();\n+\n+  /**\n+   * Checks if a particular category of metrics is enabled.\n+   *\n+   * @param category the category to check\n+   * @return true if the category is enabled, false otherwise\n+   */\n+  default boolean isCategoryEnabled(final MetricCategory category) {\n+    return getEnabledCategories().stream()\n+        .anyMatch(metricCategory -> metricCategory.getName().equals(category.getName()));\n+  }\n+\n+  /** Stops orderly the metrics system prior to shutdown. */", "originalCommit": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2Njg1Ng==", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966856", "bodyText": "Done", "author": "atoulme", "createdAt": "2020-11-11T00:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7bb8782359e816a0d096ec0150141364629ab3b", "chunk": "diff --git a/metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java b/metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java\nindex b9febf2db..757263923 100644\n--- a/metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java\n+++ b/metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java\n\n@@ -43,7 +43,4 @@ public interface ObservableMetricsSystem extends MetricsSystem {\n     return getEnabledCategories().stream()\n         .anyMatch(metricCategory -> metricCategory.getName().equals(category.getName()));\n   }\n-\n-  /** Stops orderly the metrics system prior to shutdown. */\n-  void close();\n }\n"}}, {"oid": "e7bb8782359e816a0d096ec0150141364629ab3b", "url": "https://github.com/hyperledger/besu/commit/e7bb8782359e816a0d096ec0150141364629ab3b", "message": "code review feedback\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-11T00:49:01Z", "type": "forcePushed"}, {"oid": "268f42bd40cd26681fa75dabf33add578ee3d27f", "url": "https://github.com/hyperledger/besu/commit/268f42bd40cd26681fa75dabf33add578ee3d27f", "message": "code review feedback\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-11T01:02:16Z", "type": "commit"}, {"oid": "268f42bd40cd26681fa75dabf33add578ee3d27f", "url": "https://github.com/hyperledger/besu/commit/268f42bd40cd26681fa75dabf33add578ee3d27f", "message": "code review feedback\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-11T01:02:16Z", "type": "forcePushed"}, {"oid": "eca0fc2d1a2e70d6d559de4c06688acea0ac1d9e", "url": "https://github.com/hyperledger/besu/commit/eca0fc2d1a2e70d6d559de4c06688acea0ac1d9e", "message": "Add changelog entry\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-12T20:59:54Z", "type": "commit"}, {"oid": "cbaba3a69a257cbbf29a452b351f5b0c9d915556", "url": "https://github.com/hyperledger/besu/commit/cbaba3a69a257cbbf29a452b351f5b0c9d915556", "message": "Merge branch 'master' into add_otlp_metrics", "committedDate": "2020-11-12T21:00:37Z", "type": "commit"}]}