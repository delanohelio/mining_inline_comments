{"pr_number": 623, "pr_title": "Measure Graphql complexity", "pr_createdAt": "2020-03-31T19:04:23Z", "pr_url": "https://github.com/hyperledger/besu/pull/623", "timeline": [{"oid": "89cc392fcfe9e8e3642c79b0992fb3b5409bb900", "url": "https://github.com/hyperledger/besu/commit/89cc392fcfe9e8e3642c79b0992fb3b5409bb900", "message": "Measure Graphql complexity\n\nMeasure the complexity of GraphQL queries\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>", "committedDate": "2020-03-31T00:41:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NDgwMA==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401774800", "bodyText": "Is this to be configurable?", "author": "atoulme", "createdAt": "2020-04-01T17:09:31Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLProvider.java", "diffHunk": "@@ -31,14 +33,20 @@\n \n public class GraphQLProvider {\n \n+  public static final int MAX_COMPLEXITY = 200;", "originalCommit": "89cc392fcfe9e8e3642c79b0992fb3b5409bb900", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1NzU1MQ==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401857551", "bodyText": "No.  Normal queries won't break that limit.", "author": "shemnon", "createdAt": "2020-04-01T19:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NDgwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTAxMg==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401775012", "bodyText": "Is there a published algorithm for this?", "author": "atoulme", "createdAt": "2020-04-01T17:09:53Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLProvider.java", "diffHunk": "@@ -74,4 +82,18 @@ private static RuntimeWiring buildWiring(final GraphQLDataFetchers graphQLDataFe\n                     \"sendRawTransaction\", graphQLDataFetchers.getSendRawTransactionDataFetcher()))\n         .build();\n   }\n+\n+  private static int calculateFieldCost(\n+      final FieldComplexityEnvironment environment, final int childComplexity) {\n+    final String childTypeName = environment.getParentType().getName();\n+    final String fieldName = environment.getField().getName();\n+\n+    if (childTypeName.equals(\"Transaction\") && fieldName.equals(\"block\")) {\n+      return childComplexity + 100;\n+    } else if (childTypeName.equals(\"__Type\") && fieldName.equals(\"fields\")) {\n+      return childComplexity + 100;\n+    } else {\n+      return childComplexity + 1;", "originalCommit": "89cc392fcfe9e8e3642c79b0992fb3b5409bb900", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTYxOQ==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401861619", "bodyText": "This is a custom algorithm, focused on our schema.", "author": "shemnon", "createdAt": "2020-04-01T19:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTAxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTEwNg==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401775106", "bodyText": "Why is that test removed?", "author": "atoulme", "createdAt": "2020-04-01T17:10:03Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/graphql/EthGraphQLHttpBySpecErrorCaseTest.java", "diffHunk": "@@ -1,88 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.ethereum.api.graphql;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-\n-import com.google.common.base.Charsets;\n-import com.google.common.io.Resources;\n-import io.vertx.core.json.JsonObject;\n-import okhttp3.Request;\n-import okhttp3.RequestBody;\n-import okhttp3.Response;\n-import org.assertj.core.api.Assertions;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-@RunWith(Parameterized.class)\n-public class EthGraphQLHttpBySpecErrorCaseTest extends AbstractEthGraphQLHttpServiceTest {", "originalCommit": "89cc392fcfe9e8e3642c79b0992fb3b5409bb900", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MjA2OQ==", "url": "https://github.com/hyperledger/besu/pull/623#discussion_r401862069", "bodyText": "There were no test being loaded up in the parameters section.  All tests (error or non error) are all in EthGraphQLHttpBySpecTest", "author": "shemnon", "createdAt": "2020-04-01T19:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3NTEwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "103a02ec542181844ec06f4756128b2e225a401c", "url": "https://github.com/hyperledger/besu/commit/103a02ec542181844ec06f4756128b2e225a401c", "message": "Merge branch 'master' into complexgraphql", "committedDate": "2020-04-01T19:38:26Z", "type": "commit"}]}