{"pr_number": 717, "pr_title": "[BESU-648] EIP2315 - Simple Subroutines for the EVM", "pr_createdAt": "2020-04-15T08:56:33Z", "pr_url": "https://github.com/hyperledger/besu/pull/717", "timeline": [{"oid": "2fc0324e250aba56b7a963b4dd2edeb53491a50f", "url": "https://github.com/hyperledger/besu/commit/2fc0324e250aba56b7a963b4dd2edeb53491a50f", "message": "Log to trace denied because of host whitelisting (#663)\n\nWhen we deny a connection based on HTTP hostname log to trace the\nrejected value.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>\nCo-authored-by: Usman Saleem <usman@usmans.info>\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-08T08:37:23Z", "type": "commit"}, {"oid": "d521961d5be749f4195aa06c64cf69ddec500976", "url": "https://github.com/hyperledger/besu/commit/d521961d5be749f4195aa06c64cf69ddec500976", "message": "Merge branch 'master' of https://github.com/hyperledger/besu into develop\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-10T07:52:44Z", "type": "commit"}, {"oid": "7dca4845ae288f7b32e30f4984380d94561c31a0", "url": "https://github.com/hyperledger/besu/commit/7dca4845ae288f7b32e30f4984380d94561c31a0", "message": "init berlin fork\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-10T08:55:32Z", "type": "commit"}, {"oid": "b612233faa979fc4dc35dbc5f94e3a5c91038da6", "url": "https://github.com/hyperledger/besu/commit/b612233faa979fc4dc35dbc5f94e3a5c91038da6", "message": "init eip 2315\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-14T13:50:08Z", "type": "commit"}, {"oid": "14fa311e34240b8b7c939b35c98958ca15e382b8", "url": "https://github.com/hyperledger/besu/commit/14fa311e34240b8b7c939b35c98958ca15e382b8", "message": "Merge commit '23d1460c3c27d61908a7218f46ec0cbb824a0785' into feature/eip-2315\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>\n\n# Conflicts:\n#\tconfig/src/main/java/org/hyperledger/besu/config/JsonGenesisConfigOptions.java\n#\tconfig/src/main/java/org/hyperledger/besu/config/StubGenesisConfigOptions.java\n#\tconfig/src/test/java/org/hyperledger/besu/config/GenesisConfigOptionsTest.java\n#\tethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetProtocolSpecs.java\n#\tethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java\n#\tethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/ReferenceTestProtocolSchedules.java", "committedDate": "2020-04-15T08:09:44Z", "type": "commit"}, {"oid": "9918ed75a0be59b08765e1ceedea25c120e09d45", "url": "https://github.com/hyperledger/besu/commit/9918ed75a0be59b08765e1ceedea25c120e09d45", "message": "Fix naming issue\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-15T08:35:51Z", "type": "commit"}, {"oid": "fd5928aed0e3c79e31699f44b992efbce5b70cf6", "url": "https://github.com/hyperledger/besu/commit/fd5928aed0e3c79e31699f44b992efbce5b70cf6", "message": "update javadoc\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-15T08:45:17Z", "type": "commit"}, {"oid": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "url": "https://github.com/hyperledger/besu/commit/5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "message": "fix pipeline issue\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-15T09:12:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTQ0Mg==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r409601442", "bodyText": "What's the harm in just initializing the return stack with the proper size always? It would stop us from having to add this extra boolean parameter here.", "author": "RatanRSur", "createdAt": "2020-04-16T14:28:09Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionProcessor.java", "diffHunk": "@@ -220,6 +226,15 @@ public Result processTransaction(\n     final WorldUpdater worldUpdater = worldState.updater();\n     final MessageFrame initialFrame;\n     final Deque<MessageFrame> messageFrameStack = new ArrayDeque<>();\n+\n+    // returnStack introduce on eip2315\n+    final ReturnStack returnStack;\n+    if (enableReturnStack) {\n+      returnStack = new ReturnStack(MessageFrame.DEFAULT_MAX_RETURN_STACK_SIZE);\n+    } else {\n+      returnStack = new ReturnStack();", "originalCommit": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDgyOQ==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410264829", "bodyText": "you're right this makes the code more simple and clean", "author": "matkt", "createdAt": "2020-04-17T14:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b59499befbe3b45e2a2786aff30846863eb621d2", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionProcessor.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionProcessor.java\nindex 55271b4df..d256a8558 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionProcessor.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionProcessor.java\n\n@@ -226,14 +221,7 @@ public class MainnetTransactionProcessor implements TransactionProcessor {\n     final WorldUpdater worldUpdater = worldState.updater();\n     final MessageFrame initialFrame;\n     final Deque<MessageFrame> messageFrameStack = new ArrayDeque<>();\n-\n-    // returnStack introduce on eip2315\n-    final ReturnStack returnStack;\n-    if (enableReturnStack) {\n-      returnStack = new ReturnStack(MessageFrame.DEFAULT_MAX_RETURN_STACK_SIZE);\n-    } else {\n-      returnStack = new ReturnStack();\n-    }\n+    final ReturnStack returnStack = new ReturnStack(MessageFrame.DEFAULT_MAX_RETURN_STACK_SIZE);\n \n     if (transaction.isContractCreation()) {\n       final Address contractAddress =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNzEyOA==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r409607128", "bodyText": "I see that this is modeled after the existing isValidJumpDestination. What do you think about moving the caching logic for both to the fields themselves using Suppliers.memoize? I think it'd make it easier to read and getting rid of a null in the code makes angels sing :)", "author": "RatanRSur", "createdAt": "2020-04-16T14:35:20Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/Code.java", "diffHunk": "@@ -100,6 +104,35 @@ public boolean isValidJumpDestination(\n     return validJumpDestinations.get(jumpDestination);\n   }\n \n+  /**\n+   * Determine whether a specified destination is a valid jump sub target.\n+   *\n+   * @param evm the EVM executing this code\n+   * @param frame The current message frame\n+   * @param destination The destination we're checking for validity.\n+   * @return Whether or not this location is a valid jump sub destination.\n+   */\n+  public boolean isValidJumpSubDestination(\n+      final EVM evm, final MessageFrame frame, final UInt256 destination) {\n+    if (!destination.fitsInt()) return false;\n+    final int jumpDestination = destination.intValue();\n+    if (jumpDestination > getSize()) return false;\n+\n+    if (validJumpSubDestinations == null) {\n+      // Calculate valid jump destinations\n+      validJumpSubDestinations = new BitSet(getSize());\n+      evm.forEachOperation(\n+          this,\n+          frame.getContractAccountVersion(),\n+          (final Operation op, final Integer offset) -> {\n+            if (op.getOpcode() == BeginSubOperation.OPCODE) {\n+              validJumpSubDestinations.set(offset);\n+            }\n+          });\n+    }\n+    return validJumpSubDestinations.get(jumpDestination);\n+  }", "originalCommit": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2OTQ1Nw==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410269457", "bodyText": "If I understood your proposal. One way to do that is to create suppliers in the constructor of the Code class. This requires me to add the EVM and the \"contractAccountVersion\" to the constructor and to impact many classes. I wonder if it might not be too impactful\n public Code(final EVM evm, final int contractAccountVersion, final Bytes bytes) {\n    this.bytes = bytes;\n\n    validJumpDestinations = Suppliers.memoize(()-> {\n      final BitSet bitSet = new BitSet(getSize());\n      evm.forEachOperation(\n              this,\n              contractAccountVersion,\n              (final Operation op, final Integer offset) -> {\n                if (op.getOpcode() == JumpDestOperation.OPCODE) {\n                  bitSet.set(offset);\n                }\n              });\n      return bitSet;\n    });\n\n    validJumpSubDestinations = Suppliers.memoize(()-> {\n      final BitSet bitSet = new BitSet(getSize());\n      evm.forEachOperation(\n              this,\n              contractAccountVersion,\n              (final Operation op, final Integer offset) -> {\n                if (op.getOpcode() == BeginSubOperation.OPCODE) {\n                  bitSet.set(offset);\n                }\n              });\n      return bitSet;\n    });\n  }", "author": "matkt", "createdAt": "2020-04-17T14:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNzEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyOTQ4Ng==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410929486", "bodyText": "I think you're right, this would be too impactful. Looks good as is then :)", "author": "RatanRSur", "createdAt": "2020-04-19T15:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNzEyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMDEwMQ==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r409610101", "bodyText": "Why do we want a 0 capacity return stack as the default?", "author": "RatanRSur", "createdAt": "2020-04-16T14:39:16Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java", "diffHunk": "@@ -1023,12 +1079,18 @@ public void reset() {\n     private Boolean isPersistingPrivateState = false;\n     private Hash transactionHash;\n     private Optional<Bytes> reason = Optional.empty();\n+    private ReturnStack returnStack = new ReturnStack();", "originalCommit": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTQzMw==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410265433", "bodyText": "I just changed with the default size of 1023 as in the EIP", "author": "matkt", "createdAt": "2020-04-17T14:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMDEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b59499befbe3b45e2a2786aff30846863eb621d2", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java\nindex 6581410ca..b88d46bfd 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java\n\n@@ -1079,7 +1079,7 @@ public class MessageFrame {\n     private Boolean isPersistingPrivateState = false;\n     private Hash transactionHash;\n     private Optional<Bytes> reason = Optional.empty();\n-    private ReturnStack returnStack = new ReturnStack();\n+    private ReturnStack returnStack = new ReturnStack(MessageFrame.DEFAULT_MAX_RETURN_STACK_SIZE);\n \n     public Builder type(final Type type) {\n       this.type = type;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDcyOQ==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r409614729", "bodyText": "Depending on the discussion with the other comments, we might not need this constructor.", "author": "RatanRSur", "createdAt": "2020-04-16T14:45:04Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm.operations;\n+\n+import java.util.ArrayDeque;\n+\n+/**\n+ * This class describes the behaviour of the Return stack introduce on the\n+ * https://eips.ethereum.org/EIPS/eip-2315\n+ */\n+public class ReturnStack extends ArrayDeque<Integer> {\n+\n+  private final int capacity;\n+\n+  public ReturnStack() {\n+    this.capacity = 0;", "originalCommit": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTc4OA==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410265788", "bodyText": "Indeed it is no longer necessary", "author": "matkt", "createdAt": "2020-04-17T14:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b59499befbe3b45e2a2786aff30846863eb621d2", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\nindex 410a92d2b..1b18775fe 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\n\n@@ -14,6 +14,8 @@\n  */\n package org.hyperledger.besu.ethereum.vm.operations;\n \n+import static com.google.common.base.Preconditions.checkState;\n+\n import java.util.ArrayDeque;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNzE3NQ==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r409617175", "bodyText": "You can reuse isFull here:\ncheckState(!isFull(), \"return stack overflow\")", "author": "RatanRSur", "createdAt": "2020-04-16T14:47:59Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm.operations;\n+\n+import java.util.ArrayDeque;\n+\n+/**\n+ * This class describes the behaviour of the Return stack introduce on the\n+ * https://eips.ethereum.org/EIPS/eip-2315\n+ */\n+public class ReturnStack extends ArrayDeque<Integer> {\n+\n+  private final int capacity;\n+\n+  public ReturnStack() {\n+    this.capacity = 0;\n+  }\n+\n+  public ReturnStack(final int numElements) {\n+    super(numElements);\n+    this.capacity = numElements;\n+  }\n+\n+  public boolean isFull() {\n+    return this.size() >= capacity;\n+  }\n+\n+  @Override\n+  public Integer pop() {\n+    try {\n+      return super.pop();\n+    } catch (Exception e) {\n+      throw new IllegalStateException(\"return stack underflow\");\n+    }\n+  }\n+\n+  @Override\n+  public void push(final Integer value) {\n+    if (size() == capacity) {\n+      throw new IllegalStateException(\"return stack overflow\");\n+    }", "originalCommit": "5f63ce18761d512c8e34bdef95fc53c1a7cfbd6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTg2Ng==", "url": "https://github.com/hyperledger/besu/pull/717#discussion_r410265866", "bodyText": "Done", "author": "matkt", "createdAt": "2020-04-17T14:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNzE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b59499befbe3b45e2a2786aff30846863eb621d2", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\nindex 410a92d2b..1b18775fe 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/ReturnStack.java\n\n@@ -14,6 +14,8 @@\n  */\n package org.hyperledger.besu.ethereum.vm.operations;\n \n+import static com.google.common.base.Preconditions.checkState;\n+\n import java.util.ArrayDeque;\n \n /**\n"}}, {"oid": "b59499befbe3b45e2a2786aff30846863eb621d2", "url": "https://github.com/hyperledger/besu/commit/b59499befbe3b45e2a2786aff30846863eb621d2", "message": "fix review issues\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-04-17T15:06:47Z", "type": "commit"}, {"oid": "f9a12358ad4dc2eb5a3ed00b096efcf0d56daeb7", "url": "https://github.com/hyperledger/besu/commit/f9a12358ad4dc2eb5a3ed00b096efcf0d56daeb7", "message": "Merge branch 'master' into feature/eip-2315", "committedDate": "2020-04-20T17:47:39Z", "type": "commit"}]}