{"pr_number": 1042, "pr_title": "Detect zombies backend query and abort useless processing.", "pr_createdAt": "2020-06-04T12:03:26Z", "pr_url": "https://github.com/hyperledger/besu/pull/1042", "timeline": [{"oid": "952938264dfd1425713bc9b3bcebee94ec2c6eea", "url": "https://github.com/hyperledger/besu/commit/952938264dfd1425713bc9b3bcebee94ec2c6eea", "message": "Reset default timeout value.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-04T17:28:02Z", "type": "forcePushed"}, {"oid": "79abafaf4731e4991cb9c6ccaa9a30da7c79e882", "url": "https://github.com/hyperledger/besu/commit/79abafaf4731e4991cb9c6ccaa9a30da7c79e882", "message": "Detect zombies backend query and abort useless processing.\nThe timeout handler populate the request context with a boolean value indicating whether or not the query is alive, i.e the HTTP request has not expired. Backend queries are now conditioned by this value and can be stopped if needed.\nThis PR experiments this mechanism on a reduced scope. Hence, only `eth_getLogs` backend queries are affected.\n\n- Created `BackendQuery` utility class to run a process only if the query is alive, i.e timeout not expired.\n- Put `AtomicBoolean` value in the `JsonRpcRequestContext`\n- `TimeoutHandler` sets the alive value to `false` if the timeout handler is triggered.\n- Updated `BlockchainQueries` to run steps depending on the value of the `AtomicBoolean` retrieved from the request context.\n- Added unit tests.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T13:17:55Z", "type": "commit"}, {"oid": "df8ae42a0b87263aca5775098955ef08e40b7dbe", "url": "https://github.com/hyperledger/besu/commit/df8ae42a0b87263aca5775098955ef08e40b7dbe", "message": "Reset default timeout value.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T13:17:55Z", "type": "commit"}, {"oid": "dd49e39281b92d0a271f212795e67971a252fd29", "url": "https://github.com/hyperledger/besu/commit/dd49e39281b92d0a271f212795e67971a252fd29", "message": "Add named queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T13:17:55Z", "type": "commit"}, {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072", "url": "https://github.com/hyperledger/besu/commit/7c250197a6ba84a048b440f45b8a205e1adfc072", "message": "Spotless apply\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T13:17:55Z", "type": "commit"}, {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072", "url": "https://github.com/hyperledger/besu/commit/7c250197a6ba84a048b440f45b8a205e1adfc072", "message": "Spotless apply\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T13:17:55Z", "type": "forcePushed"}, {"oid": "db4f54674e32373b8890d1ac0f77ab5c6ac4d1e1", "url": "https://github.com/hyperledger/besu/commit/db4f54674e32373b8890d1ac0f77ab5c6ac4d1e1", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T16:16:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMTIwNw==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438901207", "bodyText": "We will want to add the zombie thread killer to graphql as well, so it may be worth a comment that the AtomicBoolean(true) prevents the query from self-terminating.", "author": "shemnon", "createdAt": "2020-06-11T16:04:06Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java", "diffHunk": "@@ -238,7 +239,8 @@ public GraphQLDataFetchers(final Set<Capability> supportedCapabilities) {\n       final LogsQuery query =\n           new LogsQuery.Builder().addresses(addrs).topics(transformedTopics).build();\n \n-      final List<LogWithMetadata> logs = blockchainQuery.matchingLogs(fromBlock, toBlock, query);\n+      final List<LogWithMetadata> logs =\n+          blockchainQuery.matchingLogs(fromBlock, toBlock, query, new AtomicBoolean(true));", "originalCommit": "7c250197a6ba84a048b440f45b8a205e1adfc072", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eaff4b962612416e97ca9ad3079253d15d80a697", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java\nindex a48b17804..9aa44c32a 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java\n\n@@ -240,7 +239,7 @@ public class GraphQLDataFetchers {\n           new LogsQuery.Builder().addresses(addrs).topics(transformedTopics).build();\n \n       final List<LogWithMetadata> logs =\n-          blockchainQuery.matchingLogs(fromBlock, toBlock, query, new AtomicBoolean(true));\n+          blockchainQuery.matchingLogs(fromBlock, toBlock, query, () -> true);\n       final List<LogAdapter> results = new ArrayList<>();\n       for (final LogWithMetadata log : logs) {\n         results.add(new LogAdapter(log));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMTM0Nw==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438901347", "bodyText": "same comment as in GraphQLDataFetchers", "author": "shemnon", "createdAt": "2020-06-11T16:04:20Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java", "diffHunk": "@@ -164,7 +165,8 @@\n     final BlockchainQueries blockchain = getBlockchainQueries(environment);\n \n     final Hash hash = header.getHash();\n-    final List<LogWithMetadata> logs = blockchain.matchingLogs(hash, query);\n+    final List<LogWithMetadata> logs =\n+        blockchain.matchingLogs(hash, query, new AtomicBoolean(true));", "originalCommit": "7c250197a6ba84a048b440f45b8a205e1adfc072", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eaff4b962612416e97ca9ad3079253d15d80a697", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java\nindex a8ea07ca5..d41b60d04 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java\n\n@@ -165,8 +164,7 @@ public class BlockAdapterBase extends AdapterBase {\n     final BlockchainQueries blockchain = getBlockchainQueries(environment);\n \n     final Hash hash = header.getHash();\n-    final List<LogWithMetadata> logs =\n-        blockchain.matchingLogs(hash, query, new AtomicBoolean(true));\n+    final List<LogWithMetadata> logs = blockchain.matchingLogs(hash, query, () -> true);\n     final List<LogAdapter> results = new ArrayList<>();\n     for (final LogWithMetadata log : logs) {\n       results.add(new LogAdapter(log));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzMyMw==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438903323", "bodyText": "Should this be renamed to be more generic?  asAtomicBoolean or fetchAsAtomicBoolean?", "author": "shemnon", "createdAt": "2020-06-11T16:07:34Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java", "diffHunk": "@@ -14,15 +14,21 @@\n  */\n package org.hyperledger.besu.ethereum.api.jsonrpc.context;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n \n import io.vertx.ext.web.RoutingContext;\n \n public enum ContextKey {\n-  REQUEST_BODY_AS_JSON_OBJECT;\n+  REQUEST_BODY_AS_JSON_OBJECT,\n+  ALIVE;\n \n   public <T> T extractFrom(final RoutingContext ctx, final Supplier<T> defaultSupplier) {\n     final T value = ctx.get(this.name());\n     return value != null ? value : defaultSupplier.get();\n   }\n+\n+  public AtomicBoolean isAlive(final RoutingContext ctx) {", "originalCommit": "7c250197a6ba84a048b440f45b8a205e1adfc072", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eaff4b962612416e97ca9ad3079253d15d80a697", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java\nindex dc0f534fd..580e0f521 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java\n\n@@ -14,21 +14,15 @@\n  */\n package org.hyperledger.besu.ethereum.api.jsonrpc.context;\n \n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n \n import io.vertx.ext.web.RoutingContext;\n \n public enum ContextKey {\n-  REQUEST_BODY_AS_JSON_OBJECT,\n-  ALIVE;\n+  REQUEST_BODY_AS_JSON_OBJECT;\n \n   public <T> T extractFrom(final RoutingContext ctx, final Supplier<T> defaultSupplier) {\n     final T value = ctx.get(this.name());\n     return value != null ? value : defaultSupplier.get();\n   }\n-\n-  public AtomicBoolean isAlive(final RoutingContext ctx) {\n-    return extractFrom(ctx, () -> new AtomicBoolean(true));\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODQyOQ==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438908429", "bodyText": "Would a Supplier<Boolean> also work?  we could pass in a lambda that goes () -> ctx.response().closed()  (or () -> true for always alive or when we don't have the request context) and not have to worry about keeping another variable state in sync.", "author": "shemnon", "createdAt": "2020-06-11T16:15:39Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java", "diffHunk": "@@ -16,25 +16,38 @@\n \n import java.util.Objects;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import io.vertx.ext.auth.User;\n \n public class JsonRpcRequestContext {\n \n   private final JsonRpcRequest jsonRpcRequest;\n   private final Optional<User> user;\n+  private final AtomicBoolean alive;\n \n   public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest) {\n-    this(jsonRpcRequest, Optional.empty());\n+    this(jsonRpcRequest, new AtomicBoolean(true));\n+  }\n+\n+  public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest, final AtomicBoolean alive) {", "originalCommit": "7c250197a6ba84a048b440f45b8a205e1adfc072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NzExNQ==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r439347115", "bodyText": "Changed to a Supplier<Boolean>", "author": "abdelhamidbakhta", "createdAt": "2020-06-12T10:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaff4b962612416e97ca9ad3079253d15d80a697", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java\nindex c46ac08c2..d8e5bede3 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java\n\n@@ -16,7 +16,7 @@ package org.hyperledger.besu.ethereum.api.jsonrpc.internal;\n \n import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n \n import io.vertx.ext.auth.User;\n \n"}}, {"oid": "eaff4b962612416e97ca9ad3079253d15d80a697", "url": "https://github.com/hyperledger/besu/commit/eaff4b962612416e97ca9ad3079253d15d80a697", "message": "Address PR comments\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-11T17:51:59Z", "type": "commit"}, {"oid": "c6bcd19732396c340f4cc1373bc8856742296b8b", "url": "https://github.com/hyperledger/besu/commit/c6bcd19732396c340f4cc1373bc8856742296b8b", "message": "Address PR comments\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-12T11:02:05Z", "type": "commit"}, {"oid": "133cd991e542d00f1c7f8c049593a1e8451897d6", "url": "https://github.com/hyperledger/besu/commit/133cd991e542d00f1c7f8c049593a1e8451897d6", "message": "Address PR comments\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-12T12:25:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r439937419", "bodyText": "Not a fan of using an exception when we can just check a boolean and exit the method.  The real question is what does the resulting JSON response look like when we throw?  If it looks like what we want the users to see then an exception will read better than a check and return error code segment in the calling RPC method.", "author": "shemnon", "createdAt": "2020-06-15T05:29:43Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class BackendQuery {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static <T> T runIfAlive(final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.empty(), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final String taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.ofNullable(taskName), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final Optional<String> taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    if (!alive.get()) {\n+      LOG.warn(\n+          \"Zombie backend query detected [ {} ], aborting process.\", taskName.orElse(\"unnamed\"));\n+      throw new RuntimeException(\"Timeout expired\");", "originalCommit": "133cd991e542d00f1c7f8c049593a1e8451897d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzODU0OA==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r440038548", "bodyText": "Well. I don't think we want to add info in the JSON response, since the HTTP timeout will be triggered first and generate the response with a 504 Gateway Timeout error.\nHowever i think using exceptions there make the integration smoother. Because basically you can wrap the wall in a lambda and it is pretty transparent. If you use boolean to check the validity of a backend query, you will add a lot of boilerplate code. For example, the matchingLogs methods triggers many backend queries and it would add numerous if blocks if we don't use exceptions.", "author": "abdelhamidbakhta", "createdAt": "2020-06-15T09:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMzkwNA==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r440903904", "bodyText": "As discussed this PR will focus on JSON RPC and WebSocket. GraphQL support will come in a separate PR. Resolving discussion.", "author": "abdelhamidbakhta", "createdAt": "2020-06-16T14:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e255b3d4303fa17ffc4b47e612b5288c0a66120f", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java\nindex b245624c1..6c6e152ad 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java\n\n@@ -14,6 +14,8 @@\n  */\n package org.hyperledger.besu.ethereum.api.query;\n \n+import org.hyperledger.besu.ethereum.api.handlers.RpcMethodTimeoutException;\n+\n import java.util.Optional;\n import java.util.concurrent.Callable;\n import java.util.function.Supplier;\n"}}, {"oid": "253a435485944a91b82dbb361efccd731f6a6ab7", "url": "https://github.com/hyperledger/besu/commit/253a435485944a91b82dbb361efccd731f6a6ab7", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-15T06:58:44Z", "type": "commit"}, {"oid": "241588c9c12370dd4d486fdb22e4aba63e32c649", "url": "https://github.com/hyperledger/besu/commit/241588c9c12370dd4d486fdb22e4aba63e32c649", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-15T09:15:38Z", "type": "commit"}, {"oid": "89b1b8a76e42c33eae5da117e9616efbbb4132c7", "url": "https://github.com/hyperledger/besu/commit/89b1b8a76e42c33eae5da117e9616efbbb4132c7", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T11:11:19Z", "type": "commit"}, {"oid": "e05283046bf0bd1db79fb3459e54a3432284d99a", "url": "https://github.com/hyperledger/besu/commit/e05283046bf0bd1db79fb3459e54a3432284d99a", "message": "Add websocket timeout support.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T12:47:00Z", "type": "commit"}, {"oid": "e255b3d4303fa17ffc4b47e612b5288c0a66120f", "url": "https://github.com/hyperledger/besu/commit/e255b3d4303fa17ffc4b47e612b5288c0a66120f", "message": "Add websocket timeout support.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T14:25:55Z", "type": "commit"}, {"oid": "ee819c7f41a23371c165836e68ba3c7cbcdb9323", "url": "https://github.com/hyperledger/besu/commit/ee819c7f41a23371c165836e68ba3c7cbcdb9323", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T14:38:01Z", "type": "commit"}, {"oid": "dc9434492f4d0aeb5c5cb3a5f66bc06efcfad79f", "url": "https://github.com/hyperledger/besu/commit/dc9434492f4d0aeb5c5cb3a5f66bc06efcfad79f", "message": "Add graphql timeout support.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T17:07:46Z", "type": "commit"}, {"oid": "c21e4f63ead287301f9255fbc9c9ff08678d81b3", "url": "https://github.com/hyperledger/besu/commit/c21e4f63ead287301f9255fbc9c9ff08678d81b3", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-16T17:08:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3OTI0Mw==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r441279243", "bodyText": "Rather than a decorator perhaps a copy constructor on the old GraphQLDataContext that copies old fields but uses a passed-in isAliveHandler?  Less class files and less indirection.", "author": "shemnon", "createdAt": "2020-06-17T04:52:32Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.graphql;\n+\n+import org.hyperledger.besu.ethereum.api.handlers.IsAliveHandler;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.blockcreation.MiningCoordinator;\n+import org.hyperledger.besu.ethereum.core.Synchronizer;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+\n+public class GraphQLDataFetcherContextDecorator implements GraphQLDataFetcherContext {", "originalCommit": "c21e4f63ead287301f9255fbc9c9ff08678d81b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMDU4Mw==", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r441320583", "bodyText": "Done in 870eb9e", "author": "abdelhamidbakhta", "createdAt": "2020-06-17T06:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3OTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "870eb9ec43251c685fa6b42889901fa474be4d57", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java\ndeleted file mode 100644\nindex e6e70b579..000000000\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.ethereum.api.graphql;\n-\n-import org.hyperledger.besu.ethereum.api.handlers.IsAliveHandler;\n-import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n-import org.hyperledger.besu.ethereum.blockcreation.MiningCoordinator;\n-import org.hyperledger.besu.ethereum.core.Synchronizer;\n-import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n-import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n-\n-public class GraphQLDataFetcherContextDecorator implements GraphQLDataFetcherContext {\n-  private final GraphQLDataFetcherContext core;\n-  private final IsAliveHandler isAliveHandler;\n-\n-  public GraphQLDataFetcherContextDecorator(\n-      final GraphQLDataFetcherContext core, final IsAliveHandler isAliveHandler) {\n-    this.core = core;\n-    this.isAliveHandler = isAliveHandler;\n-  }\n-\n-  @Override\n-  public TransactionPool getTransactionPool() {\n-    return core.getTransactionPool();\n-  }\n-\n-  @Override\n-  public BlockchainQueries getBlockchainQueries() {\n-    return core.getBlockchainQueries();\n-  }\n-\n-  @Override\n-  public MiningCoordinator getMiningCoordinator() {\n-    return core.getMiningCoordinator();\n-  }\n-\n-  @Override\n-  public Synchronizer getSynchronizer() {\n-    return core.getSynchronizer();\n-  }\n-\n-  @Override\n-  public ProtocolSchedule getProtocolSchedule() {\n-    return core.getProtocolSchedule();\n-  }\n-\n-  @Override\n-  public IsAliveHandler getIsAliveHandler() {\n-    return isAliveHandler;\n-  }\n-}\n"}}, {"oid": "3239579be568b3a9ceee0164b98c677a66f71670", "url": "https://github.com/hyperledger/besu/commit/3239579be568b3a9ceee0164b98c677a66f71670", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-17T06:49:15Z", "type": "commit"}, {"oid": "870eb9ec43251c685fa6b42889901fa474be4d57", "url": "https://github.com/hyperledger/besu/commit/870eb9ec43251c685fa6b42889901fa474be4d57", "message": "Address PR comments\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-17T06:54:29Z", "type": "commit"}, {"oid": "3ba270d1b3c6d19b31272f90d64a0086c4d5226d", "url": "https://github.com/hyperledger/besu/commit/3ba270d1b3c6d19b31272f90d64a0086c4d5226d", "message": "Use EthScheduler instead of newSingleThreadScheduledExecutor to trigger timeout delayed task.\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-17T07:14:15Z", "type": "commit"}, {"oid": "adf86fab9fdbb6ee2a85b7a50305338d51358bfd", "url": "https://github.com/hyperledger/besu/commit/adf86fab9fdbb6ee2a85b7a50305338d51358bfd", "message": "Fix javadoc\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-17T07:41:02Z", "type": "commit"}, {"oid": "e81fff7a29f71618880dd9e982d7e012c2f3d805", "url": "https://github.com/hyperledger/besu/commit/e81fff7a29f71618880dd9e982d7e012c2f3d805", "message": "Merge remote-tracking branch 'upstream/master' into timeout-queries\n\nSigned-off-by: Abdelhamid Bakhta <abdelhamid.bakhta@consensys.net>", "committedDate": "2020-06-17T07:59:49Z", "type": "commit"}]}