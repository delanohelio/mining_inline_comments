{"pr_number": 471, "pr_title": "Now members of on chain privacy groups can be re-added after they hav\u2026", "pr_createdAt": "2020-03-16T04:45:28Z", "pr_url": "https://github.com/hyperledger/besu/pull/471", "timeline": [{"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "url": "https://github.com/hyperledger/besu/commit/b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "message": "Now members of on chain privacy groups can be re-added after they have been removed\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-16T04:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MjY3OA==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393342678", "bodyText": "We should rename this variable to contract or something.", "author": "lucassaldanha", "createdAt": "2020-03-16T22:25:21Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -364,6 +368,23 @@ public PrivxCreatePrivacyGroupResponse privxCreatePrivacyGroup(\n         GetCodeResponse.class);\n   }\n \n+  public Request<?, EthCall> privCall(\n+      final String privacyGroupId,\n+      final Contract eventEmitter,", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzE4Mw==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393407183", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:13:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MjY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4130e74357678732ce0bb10c1e2848a0a891576f", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\nindex 047301e658..a56c0da90e 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n\n@@ -370,13 +370,13 @@ public class PrivacyRequestFactory {\n \n   public Request<?, EthCall> privCall(\n       final String privacyGroupId,\n-      final Contract eventEmitter,\n+      final Contract contract,\n       final String encoded,\n       final String blockNumberLatestPending) {\n \n     final org.web3j.protocol.core.methods.request.Transaction transaction =\n         org.web3j.protocol.core.methods.request.Transaction.createEthCallTransaction(\n-            null, eventEmitter.getContractAddress(), encoded);\n+            null, contract.getContractAddress(), encoded);\n \n     return new Request<>(\n         \"priv_call\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MzgwOQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393343809", "bodyText": "We should probably replace code for result in this assertion msg.", "author": "lucassaldanha", "createdAt": "2020-03-16T22:27:15Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+import org.web3j.protocol.core.methods.response.EthCall;\n+import org.web3j.tx.Contract;\n+\n+public class PrivCallTransaction implements Transaction<EthCall> {\n+\n+  private final String privacyGroupId;\n+  private final Contract contract;\n+  private final String encoded;\n+  private final String blockNumberLatestPending;\n+\n+  public PrivCallTransaction(\n+      final String privacyGroupId, final Contract contract, final String encoded) {\n+    this(privacyGroupId, contract, encoded, \"latest\");\n+  }\n+\n+  public PrivCallTransaction(\n+      final String privacyGroupId,\n+      final Contract contract,\n+      final String encoded,\n+      final String blockNumberLatestPending) {\n+    this.privacyGroupId = privacyGroupId;\n+    this.contract = contract;\n+    this.encoded = encoded;\n+    this.blockNumberLatestPending = blockNumberLatestPending;\n+  }\n+\n+  @Override\n+  public EthCall execute(final NodeRequests node) {\n+    try {\n+      final EthCall response =\n+          node.privacy()\n+              .privCall(privacyGroupId, contract, encoded, blockNumberLatestPending)\n+              .send();\n+      assertThat(response).as(\"check response is not null\").isNotNull();\n+      assertThat(response.getResult()).as(\"check code in response isn't null\").isNotNull();", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzQyNg==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393407426", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MzgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4130e74357678732ce0bb10c1e2848a0a891576f", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java\nindex c7f618a210..7520ada483 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java\n\n@@ -55,7 +55,7 @@ public class PrivCallTransaction implements Transaction<EthCall> {\n               .privCall(privacyGroupId, contract, encoded, blockNumberLatestPending)\n               .send();\n       assertThat(response).as(\"check response is not null\").isNotNull();\n-      assertThat(response.getResult()).as(\"check code in response isn't null\").isNotNull();\n+      assertThat(response.getResult()).as(\"check result in response isn't null\").isNotNull();\n       return response;\n     } catch (final IOException e) {\n       throw new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NDQxOQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393344419", "bodyText": "I'd like to see a more descriptive name in this test. Something like memberCanBeAddedAfterBeingRemoved or something similar.", "author": "lucassaldanha", "createdAt": "2020-03-16T22:28:23Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzYzNQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393407635", "bodyText": "done", "author": "pinges", "createdAt": "2020-03-17T02:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NDQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTM0Nw==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345347", "bodyText": "I don't think VALUE_WHILE_BOB_MEMBER and VALUE_WHILE_BOB_REMOVED need to be class-level constants. They can be local variables.", "author": "lucassaldanha", "createdAt": "2020-03-16T22:29:59Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwODcxNg==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393408716", "bodyText": "DONE", "author": "pinges", "createdAt": "2020-03-17T02:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTczNQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345735", "bodyText": "Can this method be private?", "author": "lucassaldanha", "createdAt": "2020-03-16T22:30:35Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_REMOVED); // bob rehydrated the transaction that updated the eventEmitter\n+    // value\n+\n+    PrivateTransactionReceipt receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobRemoved.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+\n+    receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobMember.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+  }\n+\n+  PrivateTransactionReceipt setEventEmitterValue(", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwODg2OA==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393408868", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTc5Ng==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345796", "bodyText": "Can this method be private?", "author": "lucassaldanha", "createdAt": "2020-03-16T22:30:41Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_REMOVED); // bob rehydrated the transaction that updated the eventEmitter\n+    // value\n+\n+    PrivateTransactionReceipt receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobRemoved.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+\n+    receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobMember.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+  }\n+\n+  PrivateTransactionReceipt setEventEmitterValue(\n+      final String privacyGroupId, final EventEmitter eventEmitter, final int value) {\n+    final String aliceStoreHash1 =\n+        alice.execute(\n+            privateContractTransactions.callOnChainPermissioningSmartContract(\n+                eventEmitter.getContractAddress(),\n+                eventEmitter.store(BigInteger.valueOf(value)).encodeFunctionCall(),\n+                alice.getTransactionSigningKey(),\n+                POW_CHAIN_ID,\n+                alice.getEnclaveKey(),\n+                privacyGroupId));\n+\n+    final PrivateTransactionReceipt receipt =\n+        alice.execute(privacyTransactions.getPrivateTransactionReceipt(aliceStoreHash1));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+    return receipt;\n+  }\n+\n+  void checkEmitterValue(", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwODk3MQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393408971", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0Njk3OQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393346979", "bodyText": "It would be good to use the \"concise\" version of this.\nlockPrivacyGroup(privacyGroupId, alice);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:33:15Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwOTY0NA==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393409644", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0Njk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzI1MQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393347251", "bodyText": "Same here, it would be good to use the \"concise\" version:\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:33:56Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwOTg3Ng==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393409876", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzkwMA==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393347900", "bodyText": "This seems to be repeated pattern in this test.\n\nChange the contract value\nCheck the expected value for members.\n\nAny chance that we can encapsulate this logic into a method and reuse across this test? It should make the test more readable.\nSomething like:\nchangeContractValueAndCheck(privacyGroupId, contract, members, expectedValue);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:35:47Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNDkxNA==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393414914", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODIyOQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393348229", "bodyText": "Please use:\nremoveFromPrivacyGroup(privacyGroupId, alice, bob);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:36:42Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNTE3OQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393415179", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODU3Mg==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393348572", "bodyText": "Please use:\nlockPrivacyGroup(privacyGroupId, alice);\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:37:50Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNTI3MQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393415271", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T02:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "77016b56487db74216cef871ed21a8e78054f280", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\nindex 8147906005..7c7df6adcd 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java\n\n@@ -117,25 +117,25 @@ public class OnChainPrivacyAcceptanceTest extends PrivacyAcceptanceTestBase {\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+    final Contract eventEmitter = deployPrivateContract(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobMember =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n-    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_MEMBER);\n \n     alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n \n     final PrivateTransactionReceipt receiptWhileBobRemoved =\n-        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n-    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+        setEventEmitterValue(privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, (EventEmitter) eventEmitter, VALUE_WHILE_BOB_REMOVED);\n     checkEmitterValue(\n         bob,\n         privacyGroupId,\n-        eventEmitter,\n+        (EventEmitter) eventEmitter,\n         VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n \n     alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTYzOQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393349639", "bodyText": "lockPrivacyGroup(privacyGroupId, alice);\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:41:07Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -122,13 +215,13 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n         .verify(eventEmitter);\n \n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, alice));\n+        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n \n     alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDg5Mg==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393420892", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T03:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTYzOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTc0OQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393349749", "bodyText": "lockPrivacyGroup(privacyGroupId, bob);", "author": "lucassaldanha", "createdAt": "2020-03-16T22:41:28Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -122,13 +215,13 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n         .verify(eventEmitter);\n \n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, alice));\n+        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n \n     alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, bob));\n+    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDk1Mg==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393420952", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-17T03:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MDM2Mw==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393350363", "bodyText": "Maybe this should be a debug or trace level?", "author": "lucassaldanha", "createdAt": "2020-03-16T22:43:27Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java", "diffHunk": "@@ -95,31 +118,97 @@ public Result processBlock(\n                             .getPrivateTransaction()\n                             .getPrivacyGroupId()\n                             .get());\n-                if (!preProcessPrivacyGroupHeadBlockMap.containsKey(privacyGroupId)) {\n+\n+                final List<PrivateTransactionWithMetadata> actualList =\n+                    createActualList(\n+                        blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n+\n+                if (actualList.size() > 0) {\n+                  LOG.info(", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMTIyNw==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393421227", "bodyText": "Debug now!", "author": "pinges", "createdAt": "2020-03-17T03:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MDM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4130e74357678732ce0bb10c1e2848a0a891576f", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\nindex 600f2c2c69..e68b8a03a7 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\n\n@@ -124,7 +124,7 @@ public class PrivacyBlockProcessor implements BlockProcessor {\n                         blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n \n                 if (actualList.size() > 0) {\n-                  LOG.info(\n+                  LOG.debug(\n                       \"Rehydrating privacy group {}, number of transactions to be rehydrated is {} out of a total number of {} transactions.\",\n                       privacyGroupId.toString(),\n                       actualList.size(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTM5Ng==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393351396", "bodyText": "I feel like if we move this logic into its own class (e.g. PrivateTransactionRehydrationSelector (or something with a better name) we could have multiple unit tests to guarantee the different possible logical paths.\nAnd the unit tests could help one understand the different scenarios.\nMaybe we don't do it now, but it would be a good thing.", "author": "lucassaldanha", "createdAt": "2020-03-16T22:46:30Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java", "diffHunk": "@@ -95,31 +118,97 @@ public Result processBlock(\n                             .getPrivateTransaction()\n                             .getPrivacyGroupId()\n                             .get());\n-                if (!preProcessPrivacyGroupHeadBlockMap.containsKey(privacyGroupId)) {\n+\n+                final List<PrivateTransactionWithMetadata> actualList =\n+                    createActualList(\n+                        blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n+\n+                if (actualList.size() > 0) {\n+                  LOG.info(\n+                      \"Rehydrating privacy group {}, number of transactions to be rehydrated is {} out of a total number of {} transactions.\",\n+                      privacyGroupId.toString(),\n+                      actualList.size(),\n+                      privateTransactionWithMetadataList.size());\n                   final PrivateStateRehydration privateStateRehydration =\n                       new PrivateStateRehydration(\n                           privateStateStorage,\n                           blockchain,\n                           protocolSchedule,\n                           publicWorldStateArchive,\n                           privateWorldStateArchive);\n-                  privateStateRehydration.rehydrate(privateTransactionWithMetadataList);\n+                  privateStateRehydration.rehydrate(actualList);\n                   privateStateStorage.updater().putAddDataKey(privacyGroupId, addKey).commit();\n                 }\n               } catch (final EnclaveClientException e) {\n-                // we were not being added\n+                // we were not being added because we have not found the add blob\n               }\n             });\n-    final PrivacyGroupHeadBlockMap privacyGroupHeadBlockMap =\n-        new PrivacyGroupHeadBlockMap(\n+  }\n+\n+  private List<PrivateTransactionWithMetadata> createActualList(", "originalCommit": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMjM2OQ==", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393422369", "bodyText": "I think there is some rehydration code in the DefaultPrivacyController as well!\nI think we could have a class that contains a lot of that rehydration code, like creation of the blob, creating this list ...\nI think we should do that when we are doing the refactor of EeaSendRawTransaction ...", "author": "pinges", "createdAt": "2020-03-17T03:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4130e74357678732ce0bb10c1e2848a0a891576f", "chunk": "diff --git a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\nindex 600f2c2c69..e68b8a03a7 100644\n--- a/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\n+++ b/ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java\n\n@@ -124,7 +124,7 @@ public class PrivacyBlockProcessor implements BlockProcessor {\n                         blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n \n                 if (actualList.size() > 0) {\n-                  LOG.info(\n+                  LOG.debug(\n                       \"Rehydrating privacy group {}, number of transactions to be rehydrated is {} out of a total number of {} transactions.\",\n                       privacyGroupId.toString(),\n                       actualList.size(),\n"}}, {"oid": "77016b56487db74216cef871ed21a8e78054f280", "url": "https://github.com/hyperledger/besu/commit/77016b56487db74216cef871ed21a8e78054f280", "message": "fix conflicts\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-17T01:00:15Z", "type": "commit"}, {"oid": "4130e74357678732ce0bb10c1e2848a0a891576f", "url": "https://github.com/hyperledger/besu/commit/4130e74357678732ce0bb10c1e2848a0a891576f", "message": "Lucas' comments\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-17T03:57:46Z", "type": "commit"}, {"oid": "c750dc3b19e53adf097bc989d012ae3c2e219646", "url": "https://github.com/hyperledger/besu/commit/c750dc3b19e53adf097bc989d012ae3c2e219646", "message": "Merge branch 'master' into fixReadd", "committedDate": "2020-03-18T04:46:25Z", "type": "commit"}]}