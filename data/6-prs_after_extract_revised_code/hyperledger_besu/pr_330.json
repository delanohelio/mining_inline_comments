{"pr_number": 330, "pr_title": "[PIE-1798] Priv RPC acceptance tests with stub enclave.", "pr_createdAt": "2020-01-27T14:33:26Z", "pr_url": "https://github.com/hyperledger/besu/pull/330", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NjMxMw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371546313", "bodyText": "final keyword here in subsequent tests.", "author": "usmansaleem", "createdAt": "2020-01-27T23:49:32Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivCreatePrivacyGroupTransaction;\n+\n+public class PrivCreatePrivacyGroupSuccess implements Condition {\n+\n+  private final PrivCreatePrivacyGroupTransaction transaction;\n+  private final String groupId;\n+\n+  public PrivCreatePrivacyGroupSuccess(\n+      final PrivCreatePrivacyGroupTransaction transaction, final String groupId) {\n+    this.transaction = transaction;\n+    this.groupId = groupId;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    String result = node.execute(transaction);", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java\nindex 1e3630419..c507ca4b5 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java\n\n@@ -33,7 +33,7 @@ public class PrivCreatePrivacyGroupSuccess implements Condition {\n \n   @Override\n   public void verify(final Node node) {\n-    String result = node.execute(transaction);\n+    final String result = node.execute(transaction);\n     assertThat(result).isEqualTo(groupId);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NjYyNg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371546626", "bodyText": "What does 0x7E implies? Is it address of contract, transaction?", "author": "usmansaleem", "createdAt": "2020-01-27T23:50:37Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivacyPrecompileAddressTransaction;\n+\n+public class PrivGetPrivacyPrecompileAddressSuccess implements Condition {\n+\n+  private final PrivGetPrivacyPrecompileAddressTransaction transaction;\n+\n+  public PrivGetPrivacyPrecompileAddressSuccess(\n+      final PrivGetPrivacyPrecompileAddressTransaction transaction) {\n+    this.transaction = transaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    String result = node.execute(transaction);\n+    assertThat(Integer.decode(result)).isEqualTo(Integer.decode(\"0x7E\"));", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODU4OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548588", "bodyText": "The default privacy precompile address.  I'll bring that up to the test definition level to make it clearer.", "author": "mark-terry", "createdAt": "2020-01-27T23:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NjYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java\nindex cb90c8622..8b9049658 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java\n\n@@ -16,6 +16,7 @@ package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n \n+import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivacyPrecompileAddressTransaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzEyMg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371547122", "bodyText": "I would make \"authentication/auth.toml\" a constant ... easier to modify in future if required.", "author": "usmansaleem", "createdAt": "2020-01-27T23:52:27Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -134,7 +141,7 @@ public BesuNode createNodeWithAuthentication(final String name)\n         new BesuNodeConfigurationBuilder()\n             .name(name)\n             .jsonRpcEnabled()\n-            .jsonRpcAuthenticationEnabled()\n+            .jsonRpcAuthenticationEnabled(\"authentication/auth.toml\")", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 52a5aaa3b..8989ac74a 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -135,13 +135,13 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithAuthentication(final String name)\n+  public BesuNode createNodeWithAuthentication(final String name, final String authFile)\n       throws IOException, URISyntaxException {\n     return create(\n         new BesuNodeConfigurationBuilder()\n             .name(name)\n             .jsonRpcEnabled()\n-            .jsonRpcAuthenticationEnabled(\"authentication/auth.toml\")\n+            .jsonRpcAuthenticationEnabled(authFile)\n             .webSocketEnabled()\n             .webSocketAuthenticationEnabled()\n             .build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzU1Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371547556", "bodyText": "Either final or perhaps consider it declaring a constant.", "author": "usmansaleem", "createdAt": "2020-01-27T23:53:54Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,36 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancyEnabled(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile)\n+      throws IOException, URISyntaxException {\n+    ClassLoader classLoader = getClass().getClassLoader();", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 52a5aaa3b..8989ac74a 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -168,13 +168,13 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithMultiTenancyEnabled(\n+  public BesuNode createNodeWithMultiTenancy(\n       final String name,\n       final String enclaveUrl,\n       final String authFile,\n-      final String authPubKeyFile)\n+      final String authPubKeyFile,\n+      final String authPrivateKeyPath)\n       throws IOException, URISyntaxException {\n-    ClassLoader classLoader = getClass().getClassLoader();\n     final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n     final PrivacyParameters privacyParameters =\n         privacyParametersBuilder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODI3MQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548271", "bodyText": "Although new ArrayList exists before your changes, a nice pattern is to use Collections.emptyList() if the intent is to pass an empty list without the implementation details.", "author": "usmansaleem", "createdAt": "2020-01-27T23:56:29Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java", "diffHunk": "@@ -96,7 +96,8 @@ public PrivacyNode(final PrivacyNodeConfiguration privacyConfiguration, final Ve\n             besuConfig.isRevertReasonEnabled(),\n             besuConfig.getPlugins(),\n             besuConfig.getExtraCLIOptions(),\n-            new ArrayList<>());\n+            new ArrayList<>(),", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java\nindex 38224251c..3459562b1 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java\n\n@@ -96,7 +96,7 @@ public class PrivacyNode implements AutoCloseable {\n             besuConfig.isRevertReasonEnabled(),\n             besuConfig.getPlugins(),\n             besuConfig.getExtraCLIOptions(),\n-            new ArrayList<>(),\n+            Collections.emptyList(),\n             besuConfig.getPrivacyParameters());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODU2Mw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548563", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-27T23:57:31Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivCreatePrivacyGroupTransaction implements Transaction<String> {\n+\n+  final CreatePrivacyGroupParameter params;\n+\n+  public PrivCreatePrivacyGroupTransaction(final CreatePrivacyGroupParameter params) {\n+    this.params = params;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.CreatePrivacyGroupResponse result =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java\nindex 16b77f5f1..eaddb84fc 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java\n\n@@ -21,19 +21,21 @@ import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n \n import java.io.IOException;\n+import java.util.List;\n \n public class PrivCreatePrivacyGroupTransaction implements Transaction<String> {\n \n   final CreatePrivacyGroupParameter params;\n \n-  public PrivCreatePrivacyGroupTransaction(final CreatePrivacyGroupParameter params) {\n-    this.params = params;\n+  public PrivCreatePrivacyGroupTransaction(\n+      final List<String> addresses, final String groupName, final String groupDescription) {\n+    this.params = new CreatePrivacyGroupParameter(addresses, groupName, groupDescription);\n   }\n \n   @Override\n   public String execute(final NodeRequests node) {\n     try {\n-      PrivacyRequestFactory.CreatePrivacyGroupResponse result =\n+      final PrivacyRequestFactory.CreatePrivacyGroupResponse result =\n           node.privacy().privCreatePrivacyGroup(params).send();\n       assertThat(result).isNotNull();\n       return result.getResult();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODY4OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548688", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-27T23:57:59Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivDeletePrivacyGroupTransaction implements Transaction<String> {\n+\n+  final String transactionHash;\n+\n+  public PrivDeletePrivacyGroupTransaction(final String transactionHash) {\n+    this.transactionHash = transactionHash;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.DeletePrivacyGroupResponse result =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java\nindex 28b2afa63..19adda147 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java\n\n@@ -32,7 +32,7 @@ public class PrivDeletePrivacyGroupTransaction implements Transaction<String> {\n   @Override\n   public String execute(final NodeRequests node) {\n     try {\n-      PrivacyRequestFactory.DeletePrivacyGroupResponse result =\n+      final PrivacyRequestFactory.DeletePrivacyGroupResponse result =\n           node.privacy().privDeletePrivacyGroup(transactionHash).send();\n       assertThat(result).isNotNull();\n       return result.getResult();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODc5NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548795", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-27T23:58:24Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivFindPrivacyGroupTransaction implements Transaction<String> {\n+\n+  final String[] groupMembers;\n+\n+  public PrivFindPrivacyGroupTransaction(final String[] groupMembers) {\n+    this.groupMembers = groupMembers;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.FindPrivacyGroupResponse result =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java\nindex b98021c0c..5ee5b5e1f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java\n\n@@ -16,12 +16,13 @@ package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n \n import java.io.IOException;\n \n-public class PrivFindPrivacyGroupTransaction implements Transaction<String> {\n+public class PrivFindPrivacyGroupTransaction implements Transaction<PrivacyGroup[]> {\n \n   final String[] groupMembers;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODg0NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548845", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-27T23:58:37Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivacyPrecompileAddressTransaction implements Transaction<String> {\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.GetPrivacyPrecompileAddressResponse result =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java\nindex ad8c085ab..abbba72a7 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java\n\n@@ -16,17 +16,18 @@ package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n \n import java.io.IOException;\n \n-public class PrivGetPrivacyPrecompileAddressTransaction implements Transaction<String> {\n+public class PrivGetPrivacyPrecompileAddressTransaction implements Transaction<Address> {\n \n   @Override\n-  public String execute(final NodeRequests node) {\n+  public Address execute(final NodeRequests node) {\n     try {\n-      PrivacyRequestFactory.GetPrivacyPrecompileAddressResponse result =\n+      final PrivacyRequestFactory.GetPrivacyPrecompileAddressResponse result =\n           node.privacy().privGetPrivacyPrecompileAddress().send();\n       assertThat(result).isNotNull();\n       return result.getResult();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODkyNw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548927", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-27T23:58:58Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivateTransactionTransaction\n+    implements Transaction<PrivacyRequestFactory.GetPrivateTransactionResponse> {\n+\n+  final String transactionHash;\n+\n+  public PrivGetPrivateTransactionTransaction(final String transactionHash) {\n+    this.transactionHash = transactionHash;\n+  }\n+\n+  @Override\n+  public PrivacyRequestFactory.GetPrivateTransactionResponse execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.GetPrivateTransactionResponse result =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\nindex 91bf92555..310b844ab 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\n\n@@ -16,6 +16,7 @@ package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDcyOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371550728", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-28T00:05:09Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex bc295748f..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int enclavePort = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + enclavePort,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDg3Nw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371550877", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-28T00:05:39Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    CreatePrivacyGroupParameter params =", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex bc295748f..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int enclavePort = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + enclavePort,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTUyNA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371551524", "bodyText": "oh we still have that ... didn't we end up creating a duplicate of PANTHEON -> BESU?", "author": "usmansaleem", "createdAt": "2020-01-28T00:08:06Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n+  }\n+\n+  @Test\n+  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n+    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n+\n+    final String[] paramArray = {enclaveKey};\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n+  }\n+\n+  private PrivacyGroup testPrivacyGroup() {\n+    return new PrivacyGroup(\n+        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDgzMg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371574832", "bodyText": "Doesn't seem like it.  Will update.", "author": "mark-terry", "createdAt": "2020-01-28T01:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex bc295748f..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int enclavePort = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + enclavePort,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTgyNw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371551827", "bodyText": "final", "author": "usmansaleem", "createdAt": "2020-01-28T00:09:17Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class PrivGetPrivateTransactionSuccess implements Condition {\n+\n+  private final PrivGetPrivateTransactionTransaction transaction;\n+  private final String privateFrom;\n+\n+  public PrivGetPrivateTransactionSuccess(\n+      final PrivGetPrivateTransactionTransaction transaction, final String privateFrom) {\n+    this.transaction = transaction;\n+    this.privateFrom = privateFrom;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    PrivacyRequestFactory.GetPrivateTransactionResponse result = node.execute(transaction);", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\nindex 3c857103c..66be386b3 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\n\n@@ -14,13 +14,13 @@\n  */\n package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n \n-import org.assertj.core.api.Assertions;\n-\n public class PrivGetPrivateTransactionSuccess implements Condition {\n \n   private final PrivGetPrivateTransactionTransaction transaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MjY2MA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371552660", "bodyText": "I am slightly torn between using inner static class vs declared them as separate source files.", "author": "usmansaleem", "createdAt": "2020-01-28T00:12:16Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -16,12 +16,43 @@\n \n import static java.util.Collections.singletonList;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+import java.util.HashMap;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.assertj.core.util.Lists;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n+\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NTE4MQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371575181", "bodyText": "Felt a bit excessive to extract the empty class to a separate source file.", "author": "mark-terry", "createdAt": "2020-01-28T01:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MjY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\nindex 6eaf9caba..d5410d09f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n\n@@ -18,20 +18,24 @@ import static java.util.Collections.singletonList;\n \n import org.hyperledger.besu.enclave.types.PrivacyGroup;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n \n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.assertj.core.util.Lists;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n \n-  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<Address> {}\n \n   public static class GetPrivateTransactionResponse extends Response<HashMap<String, String>> {\n     final String privateFrom;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTI4NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371555285", "bodyText": "Not a fan of static importing, then?", "author": "CjHare", "createdAt": "2020-01-28T00:22:30Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class PrivGetPrivateTransactionSuccess implements Condition {\n+\n+  private final PrivGetPrivateTransactionTransaction transaction;\n+  private final String privateFrom;\n+\n+  public PrivGetPrivateTransactionSuccess(\n+      final PrivGetPrivateTransactionTransaction transaction, final String privateFrom) {\n+    this.transaction = transaction;\n+    this.privateFrom = privateFrom;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    PrivacyRequestFactory.GetPrivateTransactionResponse result = node.execute(transaction);\n+    Assertions.assertThat(result.getPrivateFrom()).isEqualTo(privateFrom);", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDU0Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371574546", "bodyText": "Am a big fan.  Will action.", "author": "mark-terry", "createdAt": "2020-01-28T01:42:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\nindex 3c857103c..66be386b3 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java\n\n@@ -14,13 +14,13 @@\n  */\n package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n \n-import org.assertj.core.api.Assertions;\n-\n public class PrivGetPrivateTransactionSuccess implements Condition {\n \n   private final PrivGetPrivateTransactionTransaction transaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTk4NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371555985", "bodyText": "Style: static fields are usually upper case i.e ENCLAVE_PORT", "author": "CjHare", "createdAt": "2020-01-28T00:25:14Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex bc295748f..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int enclavePort = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + enclavePort,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NjMzOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371556338", "bodyText": "As an ObjectMapper is used in at least two tests, perhaps promoting to a class field is appropriate?", "author": "CjHare", "createdAt": "2020-01-28T00:26:35Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();", "originalCommit": "6d99ae372ae494aaeec8d08b40e880a168eb2af2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex bc295748f..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int enclavePort = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + enclavePort,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNDMwNg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371604306", "bodyText": "nit: I think enabled is implied, so perhaps just createNodeWithMultiTenancy", "author": "jframe", "createdAt": "2020-01-28T04:26:50Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,36 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancyEnabled(", "originalCommit": "812615d282ba69ac032c760eded9f5aeb6d8620c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 25cb4219e..8989ac74a 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -168,13 +168,13 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithMultiTenancyEnabled(\n+  public BesuNode createNodeWithMultiTenancy(\n       final String name,\n       final String enclaveUrl,\n       final String authFile,\n-      final String authPubKeyFile)\n+      final String authPubKeyFile,\n+      final String authPrivateKeyPath)\n       throws IOException, URISyntaxException {\n-    final ClassLoader classLoader = getClass().getClassLoader();\n     final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n     final PrivacyParameters privacyParameters =\n         privacyParametersBuilder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODIwNw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608207", "bodyText": "What about tests for sending transactions with eea_sendRawTransaction and priv_distributeRawTransaction?", "author": "jframe", "createdAt": "2020-01-28T04:44:06Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODQyMQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608421", "bodyText": "Also should have some tests for priv_getTransactionCount and prvi_getTransactionReceipt rpcs", "author": "jframe", "createdAt": "2020-01-28T04:45:39Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MzgzOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373773838", "bodyText": "Added.", "author": "mark-terry", "createdAt": "2020-02-01T11:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODc5NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608795", "bodyText": "These constants can be capitalised", "author": "jframe", "createdAt": "2020-01-28T04:47:55Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODk5NA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608994", "bodyText": "Can these be made constants?", "author": "jframe", "createdAt": "2020-01-28T04:49:14Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDkyMQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371610921", "bodyText": "These needs be a private marker transaction for this to work. This would be creating a transaction with an empty payload which works because you are responding for any reason on the enclave /receive", "author": "jframe", "createdAt": "2020-01-28T05:00:59Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTQyNg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611426", "bodyText": "More descriptive name, success doesn't indicate what case this testing for. Perhaps something like shouldGetPrivateTransactionWhenUsersPrivacyGroup not sure exactly on the what wording. But it looks like this is the happy case you are testing when it's our privacy group the transaction is in.", "author": "jframe", "createdAt": "2020-01-28T05:03:56Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU0MA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611540", "bodyText": "Again, more detail on the test name why should it create the privacy group?", "author": "jframe", "createdAt": "2020-01-28T05:04:40Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU4NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611585", "bodyText": "As above, more detail on the test name", "author": "jframe", "createdAt": "2020-01-28T05:04:53Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU5OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611598", "bodyText": "As above, more detail on the test name", "author": "jframe", "createdAt": "2020-01-28T05:04:57Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n+    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n+  }\n+\n+  @Test\n+  public void shouldFindPrivacyGroup() throws JsonProcessingException {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\ndeleted file mode 100644\nindex 33d77df6c..000000000\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n-\n-import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n-import static com.github.tomakehurst.wiremock.client.WireMock.post;\n-import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n-import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n-import org.hyperledger.besu.enclave.types.PrivacyGroup;\n-import org.hyperledger.besu.enclave.types.ReceiveResponse;\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-import org.hyperledger.besu.ethereum.core.Hash;\n-import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n-import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n-import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n-\n-import java.util.List;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n-  private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n-  private static final int ENCLAVE_PORT = 1080;\n-  private final String privacyGroupId = \"groupId\";\n-  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n-\n-  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n-  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n-  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n-\n-  private final ObjectMapper mapper = new ObjectMapper();\n-\n-  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n-\n-  @Before\n-  public void setUp() throws Exception {\n-    final ClusterConfiguration clusterConfiguration =\n-        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n-    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n-    node =\n-        besu.createNodeWithMultiTenancyEnabled(\n-            \"node1\",\n-            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n-            \"authentication/auth_priv.toml\",\n-            \"authentication/auth_priv_key\");\n-    multiTenancyCluster.start(node);\n-    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivacyPrecompileAddress() {\n-    final Integer precompileAddress = Integer.decode(\"0x7E\");\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n-  }\n-\n-  @Test\n-  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-\n-    final String base64SignedPrivateTransactionRLP =\n-        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n-\n-    // privateFrom value from above transaction\n-    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n-\n-    // Create a transaction\n-    final Account sender = accounts.createAccount(\"account1\");\n-    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n-    multiTenancyCluster.verify(sender.balanceEquals(50));\n-\n-    final String receiveResponse =\n-        mapper.writeValueAsString(\n-            new ReceiveResponse(\n-                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n-\n-    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n-\n-    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n-  }\n-\n-  @Test\n-  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n-    final String groupId = \"groupId\";\n-    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-\n-    final CreatePrivacyGroupParameter params =\n-        new CreatePrivacyGroupParameter(\n-            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n-    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n-  }\n-\n-  @Test\n-  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n-    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n-    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n-\n-    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n-    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n-  }\n-\n-  @Test\n-  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n-    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n-    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n-\n-    final String[] paramArray = {enclaveKey};\n-\n-    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n-    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n-  }\n-\n-  private PrivacyGroup testPrivacyGroup() {\n-    return new PrivacyGroup(\n-        privacyGroupId, PrivacyGroup.Type.BESU, \"test\", \"testGroup\", List.of(enclaveKey));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611880", "bodyText": "Do we need both?", "author": "jframe", "createdAt": "2020-01-28T05:06:30Z", "path": "enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java", "diffHunk": "@@ -82,6 +82,7 @@ public PrivacyGroup(\n \n   public enum Type {\n     LEGACY,\n-    PANTHEON\n+    PANTHEON,\n+    BESU", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNzU1NA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r374127554", "bodyText": "Removed.", "author": "mark-terry", "createdAt": "2020-02-03T14:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NzAwNg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376197006", "bodyText": "still here?", "author": "rain-on", "createdAt": "2020-02-07T03:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDg2OQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376414869", "bodyText": "Are we removing Pantheon or Besu?", "author": "mark-terry", "createdAt": "2020-02-07T14:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDYwMw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r377384603", "bodyText": "Should remove Besu. Pantheon is the only option supported by Orion atm", "author": "jframe", "createdAt": "2020-02-10T23:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ca9e3104222e05c4deff47e60dcc3068ee7186e7", "chunk": "diff --git a/enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java b/enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java\nindex f2b6c020d..75356283c 100644\n--- a/enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java\n+++ b/enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java\n\n@@ -82,7 +82,6 @@ public class PrivacyGroup implements Serializable {\n \n   public enum Type {\n     LEGACY,\n-    PANTHEON,\n-    BESU\n+    PANTHEON\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjM1Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371612356", "bodyText": "could just use int instead of Integer", "author": "jframe", "createdAt": "2020-01-28T05:09:14Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivTransactions;\n+\n+public class PrivConditions {\n+\n+  private final PrivTransactions transactions;\n+\n+  public PrivConditions(final PrivTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Integer precompileAddress) {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\nindex 66aa00ff4..44a8d407f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n\n@@ -14,39 +14,58 @@\n  */\n package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n-import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivTransactions;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+import java.util.List;\n \n public class PrivConditions {\n \n-  private final PrivTransactions transactions;\n+  private final PrivacyTransactions transactions;\n \n-  public PrivConditions(final PrivTransactions transactions) {\n+  public PrivConditions(final PrivacyTransactions transactions) {\n     this.transactions = transactions;\n   }\n \n-  public Condition privGetPrivacyPrecompileAddressSuccess(final Integer precompileAddress) {\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {\n     return new PrivGetPrivacyPrecompileAddressSuccess(\n-        transactions.privGetPrivacyPrecompileAddress(), precompileAddress);\n+        transactions.getPrivacyPrecompileAddress(), precompileAddress);\n   }\n \n   public Condition privGetPrivateTransactionSuccess(\n-      final String transactionHash, final String privateFrom) {\n+      final Hash transactionHash, final String privateFrom) {\n     return new PrivGetPrivateTransactionSuccess(\n-        transactions.privGetPrivateTransaction(transactionHash), privateFrom);\n+        transactions.getPrivateTransaction(transactionHash), privateFrom);\n   }\n \n   public Condition privCreatePrivacyGroupSuccess(\n-      final CreatePrivacyGroupParameter params, final String groupId) {\n-    return new PrivCreatePrivacyGroupSuccess(transactions.privCreatePrivacyGroup(params), groupId);\n+      final List<String> addresses,\n+      final String groupName,\n+      final String groupDescription,\n+      final String groupId) {\n+    return new PrivCreatePrivacyGroupSuccess(\n+        transactions.createPrivacyGroup(addresses, groupName, groupDescription), groupId);\n   }\n \n   public Condition privDeletePrivacyGroupSuccess(final String groupId) {\n-    return new PrivDeletePrivacyGroupSuccess(transactions.privDeletePrivacyGroup(groupId), groupId);\n+    return new PrivDeletePrivacyGroupSuccess(transactions.deletePrivacyGroup(groupId), groupId);\n+  }\n+\n+  public Condition privFindPrivacyGroupSuccess(final int numGroups, final String... groupMembers) {\n+    return new PrivFindPrivacyGroupSuccess(transactions.findPrivacyGroup(groupMembers), numGroups);\n+  }\n+\n+  public Condition eeaSendRawTransactionSuccess(\n+      final String transaction, final String sender, final String privacyGroupId) {\n+    return new EeaSendRawTransactionWithCountVerification(\n+        transactions.sendRawTransaction(transaction), sender, privacyGroupId);\n   }\n \n-  public Condition privFindPrivacyGroupSuccess(final String[] groupMembers) {\n-    return new PrivFindPrivacyGroupSuccess(transactions.privFindPrivacyGroup(groupMembers));\n+  public Condition privDistributeRawTransaction(\n+      final String transaction, final String enclaveResponseKey) {\n+    return new PrivDistributeRawTransactionSuccess(\n+        transactions.distributeRawTransaction(transaction), enclaveResponseKey);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzQ5NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371613495", "bodyText": "The findPrivacyGroup returns a list of found privacy groups not a string. Would of expected this condition to verify the returned privacy groups matches some expected value.", "author": "jframe", "createdAt": "2020-01-28T05:15:56Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivFindPrivacyGroupTransaction;\n+\n+public class PrivFindPrivacyGroupSuccess implements Condition {\n+\n+  private final PrivFindPrivacyGroupTransaction transaction;\n+\n+  public PrivFindPrivacyGroupSuccess(final PrivFindPrivacyGroupTransaction transaction) {\n+    this.transaction = transaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final String result = node.execute(transaction);", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mzg5Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373773896", "bodyText": "Updated.", "author": "mark-terry", "createdAt": "2020-02-01T11:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\nindex 0e8fd75a0..f4a069a24 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\n\n@@ -16,6 +16,7 @@ package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivFindPrivacyGroupTransaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNDk3NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371614975", "bodyText": "Not sure what the current thinking is, but we are trying to prefix all transactions with create to make it more readable", "author": "jframe", "createdAt": "2020-01-28T05:24:30Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+public class PrivTransactions {\n+  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java\ndeleted file mode 100644\nindex 5887bf3fb..000000000\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java\n+++ /dev/null\n\n@@ -1,41 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n-\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-\n-public class PrivTransactions {\n-  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {\n-    return new PrivGetPrivacyPrecompileAddressTransaction();\n-  }\n-\n-  public PrivGetPrivateTransactionTransaction privGetPrivateTransaction(\n-      final String transactionHash) {\n-    return new PrivGetPrivateTransactionTransaction(transactionHash);\n-  }\n-\n-  public PrivCreatePrivacyGroupTransaction privCreatePrivacyGroup(\n-      final CreatePrivacyGroupParameter params) {\n-    return new PrivCreatePrivacyGroupTransaction(params);\n-  }\n-\n-  public PrivDeletePrivacyGroupTransaction privDeletePrivacyGroup(final String transactionHash) {\n-    return new PrivDeletePrivacyGroupTransaction(transactionHash);\n-  }\n-\n-  public PrivFindPrivacyGroupTransaction privFindPrivacyGroup(final String[] groupMembers) {\n-    return new PrivFindPrivacyGroupTransaction(groupMembers);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNTExMQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371615111", "bodyText": "Don't we need to mention priv as part of the method name, we can get that from the transaction class name.", "author": "jframe", "createdAt": "2020-01-28T05:25:27Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+public class PrivTransactions {\n+  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {\n+    return new PrivGetPrivacyPrecompileAddressTransaction();\n+  }\n+\n+  public PrivGetPrivateTransactionTransaction privGetPrivateTransaction(", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java\ndeleted file mode 100644\nindex 5887bf3fb..000000000\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java\n+++ /dev/null\n\n@@ -1,41 +0,0 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */\n-package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n-\n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n-\n-public class PrivTransactions {\n-  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {\n-    return new PrivGetPrivacyPrecompileAddressTransaction();\n-  }\n-\n-  public PrivGetPrivateTransactionTransaction privGetPrivateTransaction(\n-      final String transactionHash) {\n-    return new PrivGetPrivateTransactionTransaction(transactionHash);\n-  }\n-\n-  public PrivCreatePrivacyGroupTransaction privCreatePrivacyGroup(\n-      final CreatePrivacyGroupParameter params) {\n-    return new PrivCreatePrivacyGroupTransaction(params);\n-  }\n-\n-  public PrivDeletePrivacyGroupTransaction privDeletePrivacyGroup(final String transactionHash) {\n-    return new PrivDeletePrivacyGroupTransaction(transactionHash);\n-  }\n-\n-  public PrivFindPrivacyGroupTransaction privFindPrivacyGroup(final String[] groupMembers) {\n-    return new PrivFindPrivacyGroupTransaction(groupMembers);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNTgwNA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371615804", "bodyText": "Can the above response classes be moved to sit with your response classes at the top of the class", "author": "jframe", "createdAt": "2020-01-28T05:29:29Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -51,4 +82,46 @@ public String getTransactionKey() {\n       return getResult();\n     }\n   }\n+", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\nindex df4fc4419..d5410d09f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n\n@@ -92,7 +113,7 @@ public class PrivacyRequestFactory {\n   }\n \n   public Request<?, GetPrivateTransactionResponse> privGetPrivateTransaction(\n-      final String transactionHash) {\n+      final Hash transactionHash) {\n     return new Request<>(\n         \"priv_getPrivateTransaction\",\n         singletonList(transactionHash),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNjMwOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371616308", "bodyText": "Bit torn here, the private transaction response contains a lot more than just result. Thinking we should probably define the response type correctly with all fields even if we are only checking the result at the moment.", "author": "jframe", "createdAt": "2020-01-28T05:32:09Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -16,12 +16,43 @@\n \n import static java.util.Collections.singletonList;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n+\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}\n+\n+  public static class GetPrivateTransactionResponse extends Response<HashMap<String, String>> {\n+    final String privateFrom;\n+\n+    @JsonCreator\n+    public GetPrivateTransactionResponse(", "originalCommit": "1f495db92373a4c89cc472af5d02ddc52052fa15", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\nindex df4fc4419..d5410d09f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java\n\n@@ -18,20 +18,24 @@ import static java.util.Collections.singletonList;\n \n import org.hyperledger.besu.enclave.types.PrivacyGroup;\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n \n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n \n-  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<Address> {}\n \n   public static class GetPrivateTransactionResponse extends Response<HashMap<String, String>> {\n     final String privateFrom;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTcxNA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373921714", "bodyText": "nit: rename to transactionHash", "author": "jframe", "createdAt": "2020-02-03T04:53:24Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionCountTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class EeaSendRawTransactionWithCountVerification implements Condition {\n+\n+  private final EeaSendRawTransaction sendRawTransactionTransaction;\n+  private final Object[] transactionCountParams;\n+\n+  public EeaSendRawTransactionWithCountVerification(\n+      final EeaSendRawTransaction sendRawTransactionTransaction,\n+      final Object[] transactionCountParams) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.transactionCountParams = transactionCountParams;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivGetTransactionCountTransaction getTransactionCountTransaction =\n+        new PrivGetTransactionCountTransaction(transactionCountParams);\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(0));\n+\n+    final Hash result = node.execute(sendRawTransactionTransaction);", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\nindex 77a581b7b..2e964ed67 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\n\n@@ -33,9 +33,11 @@ public class EeaSendRawTransactionWithCountVerification implements Condition {\n \n   public EeaSendRawTransactionWithCountVerification(\n       final EeaSendRawTransaction sendRawTransactionTransaction,\n-      final Object[] transactionCountParams) {\n+      final String transactionCountSender,\n+      final String transactionCountPrivacyGroupId) {\n     this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n-    this.transactionCountParams = transactionCountParams;\n+    this.transactionCountParams =\n+        new String[] {transactionCountSender, transactionCountPrivacyGroupId};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjI2Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922266", "bodyText": "Instead of passing in an array of params for the sendRawTransaction it would be nicer to pass in the sender and privacyGroupId as seperate arguments", "author": "jframe", "createdAt": "2020-02-03T04:56:53Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {\n+    return new PrivGetPrivacyPrecompileAddressSuccess(\n+        transactions.getPrivacyPrecompileAddress(), precompileAddress);\n+  }\n+\n+  public Condition privGetPrivateTransactionSuccess(\n+      final String transactionHash, final String privateFrom) {\n+    return new PrivGetPrivateTransactionSuccess(\n+        transactions.getPrivateTransaction(transactionHash), privateFrom);\n+  }\n+\n+  public Condition privCreatePrivacyGroupSuccess(\n+      final CreatePrivacyGroupParameter params, final String groupId) {\n+    return new PrivCreatePrivacyGroupSuccess(transactions.createPrivacyGroup(params), groupId);\n+  }\n+\n+  public Condition privDeletePrivacyGroupSuccess(final String groupId) {\n+    return new PrivDeletePrivacyGroupSuccess(transactions.deletePrivacyGroup(groupId), groupId);\n+  }\n+\n+  public Condition privFindPrivacyGroupSuccess(final String[] groupMembers, final int numGroups) {\n+    return new PrivFindPrivacyGroupSuccess(transactions.findPrivacyGroup(groupMembers), numGroups);\n+  }\n+\n+  public Condition eeaSendRawTransactionSuccess(\n+      final String transaction, final Object[] transactionCountParams) {", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\nindex ab67ee3d8..44a8d407f 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n\n@@ -14,11 +14,13 @@\n  */\n package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n \n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n \n+import java.util.List;\n+\n public class PrivConditions {\n \n   private final PrivacyTransactions transactions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjM5OQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922399", "bodyText": "nit: rename to privacyGroups", "author": "jframe", "createdAt": "2020-02-03T04:57:54Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivFindPrivacyGroupTransaction;\n+\n+public class PrivFindPrivacyGroupSuccess implements Condition {\n+\n+  private final PrivFindPrivacyGroupTransaction transaction;\n+  private final int numGroups;\n+\n+  public PrivFindPrivacyGroupSuccess(\n+      final PrivFindPrivacyGroupTransaction transaction, final int numGroups) {\n+    this.transaction = transaction;\n+    this.numGroups = numGroups;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivacyGroup[] result = node.execute(transaction);", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\nindex 2ec7eab27..f4a069a24 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java\n\n@@ -34,7 +34,7 @@ public class PrivFindPrivacyGroupSuccess implements Condition {\n \n   @Override\n   public void verify(final Node node) {\n-    final PrivacyGroup[] result = node.execute(transaction);\n-    assertThat(result).hasSize(numGroups);\n+    final PrivacyGroup[] privacyGroups = node.execute(transaction);\n+    assertThat(privacyGroups).hasSize(numGroups);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjg4Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922886", "bodyText": "Think this should be in a multitenancy package under privacy", "author": "jframe", "createdAt": "2020-02-03T05:01:28Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nsimilarity index 93%\nrename from acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\nrename to acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 595333632..2c4076738 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n \n import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n import static com.github.tomakehurst.wiremock.client.WireMock.post;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMzQ3OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373923478", "bodyText": "Will this always be 1? Might need to pass in the transaction count as an argument.", "author": "jframe", "createdAt": "2020-02-03T05:05:56Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionCountTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class EeaSendRawTransactionWithCountVerification implements Condition {\n+\n+  private final EeaSendRawTransaction sendRawTransactionTransaction;\n+  private final Object[] transactionCountParams;\n+\n+  public EeaSendRawTransactionWithCountVerification(\n+      final EeaSendRawTransaction sendRawTransactionTransaction,\n+      final Object[] transactionCountParams) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.transactionCountParams = transactionCountParams;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivGetTransactionCountTransaction getTransactionCountTransaction =\n+        new PrivGetTransactionCountTransaction(transactionCountParams);\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(0));\n+\n+    final Hash result = node.execute(sendRawTransactionTransaction);\n+    assertThat(result).isInstanceOf(Hash.class);\n+\n+    WaitUtils.waitFor(\n+        () ->\n+            Assertions.assertThat(node.execute(new PrivGetTransactionReceiptTransaction(result)))\n+                .isNotNull());\n+\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(1));", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4MTU1OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r374081558", "bodyText": "For this condition I expect this value to always be 1, as we're verifying that a single transaction has been submitted.", "author": "mark-terry", "createdAt": "2020-02-03T12:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\nindex 77a581b7b..2e964ed67 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java\n\n@@ -33,9 +33,11 @@ public class EeaSendRawTransactionWithCountVerification implements Condition {\n \n   public EeaSendRawTransactionWithCountVerification(\n       final EeaSendRawTransaction sendRawTransactionTransaction,\n-      final Object[] transactionCountParams) {\n+      final String transactionCountSender,\n+      final String transactionCountPrivacyGroupId) {\n     this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n-    this.transactionCountParams = transactionCountParams;\n+    this.transactionCountParams =\n+        new String[] {transactionCountSender, transactionCountPrivacyGroupId};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNDUxMg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373924512", "bodyText": "Just pass the hash through as the hash type, the condition or the transaction can do the conversion, will make test bit easier to read.", "author": "jframe", "createdAt": "2020-02-03T05:12:55Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nsimilarity index 93%\nrename from acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\nrename to acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 595333632..2c4076738 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n \n import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n import static com.github.tomakehurst.wiremock.client.WireMock.post;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNDkxNQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373924915", "bodyText": "Think this would be nicer without the intermediary CreatePrivacyGroupParameter object with just passing through the keys, name and description as 3 params to the privCreatePrivacyGroupSuccess condition", "author": "jframe", "createdAt": "2020-02-03T05:15:43Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void createPrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup(emptyList()));\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, PRIVACY_GROUP_ID));", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nsimilarity index 93%\nrename from acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\nrename to acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 595333632..2c4076738 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n \n import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n import static com.github.tomakehurst.wiremock.client.WireMock.post;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNTExMg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373925112", "bodyText": "could just pass in the privacy groups as a vararg?", "author": "jframe", "createdAt": "2020-02-03T05:16:49Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void createPrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup(emptyList()));\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void deletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    final String retrieveGroupResponse =\n+        mapper.writeValueAsString(testPrivacyGroup(List.of(ENCLAVE_KEY)));\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(PRIVACY_GROUP_ID);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void findPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList()),\n+            testPrivacyGroup(emptyList()),\n+            testPrivacyGroup(emptyList()));\n+    final String findGroupResponse = mapper.writeValueAsString(groupMembership);\n+    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n+\n+    final String[] paramArray = {ENCLAVE_KEY};\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privFindPrivacyGroupSuccess(paramArray, groupMembership.size()));", "originalCommit": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6aeddbf15211883a462b97729290413e1b0ad667", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nsimilarity index 93%\nrename from acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\nrename to acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 595333632..2c4076738 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.tests.acceptance.multitenancy;\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n \n import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n import static com.github.tomakehurst.wiremock.client.WireMock.post;\n"}}, {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-03T13:33:07Z", "type": "commit"}, {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-03T13:33:07Z", "type": "forcePushed"}, {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-03T13:33:07Z", "type": "forcePushed"}, {"oid": "17694a2f87b21459e21c4e26ae4a0e66688653fa", "url": "https://github.com/hyperledger/besu/commit/17694a2f87b21459e21c4e26ae4a0e66688653fa", "message": "[PIE-1798] AT test fix.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-05T03:18:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MDY2OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375050668", "bodyText": "nit: this can be a local var", "author": "jframe", "createdAt": "2020-02-05T04:09:58Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;", "originalCommit": "17694a2f87b21459e21c4e26ae4a0e66688653fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex b73f35eb9..1a6f0f08e 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -41,6 +41,7 @@ import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurati\n \n import java.math.BigInteger;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTM2Mw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375051363", "bodyText": "Tests for priv_getTransactionCount, priv_getEeaTransactionCount and priv_call. Perhaps these are tested indirectly through other tests though?", "author": "jframe", "createdAt": "2020-02-05T04:13:49Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+", "originalCommit": "17694a2f87b21459e21c4e26ae4a0e66688653fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex b73f35eb9..1a6f0f08e 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -41,6 +41,7 @@ import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurati\n \n import java.math.BigInteger;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n"}}, {"oid": "483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "url": "https://github.com/hyperledger/besu/commit/483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "message": "[PIE-1798] Refactorings.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-05T13:49:11Z", "type": "commit"}, {"oid": "7caa5580aff8c256ec2953218b7c6335c03c86dd", "url": "https://github.com/hyperledger/besu/commit/7caa5580aff8c256ec2953218b7c6335c03c86dd", "message": "[PIE-1798] errorprone.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-05T14:23:35Z", "type": "commit"}, {"oid": "973addd7bf2c8b1d95af30b93d70d94bb2f59335", "url": "https://github.com/hyperledger/besu/commit/973addd7bf2c8b1d95af30b93d70d94bb2f59335", "message": "[PIE-1798] priv_getPrivateTransaction fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-05T15:11:44Z", "type": "commit"}, {"oid": "a3b33d49f95f48a0763ec25eb927acdb90406232", "url": "https://github.com/hyperledger/besu/commit/a3b33d49f95f48a0763ec25eb927acdb90406232", "message": "[PIE-1798] priv_getTransactionReceipt test.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-05T15:21:04Z", "type": "commit"}, {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "url": "https://github.com/hyperledger/besu/commit/8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "message": "[PIE-1798] privGetEeaTransactionCount test.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-06T01:27:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mzg0Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375643846", "bodyText": "Why do we need a completableFuture here? Generally the ATs are written in synchronous way so that we perform some operation using node.execute and then node.verify to wait for the condition to succeed.", "author": "jframe", "createdAt": "2020-02-06T05:14:58Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransactionTransaction;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class EeaSendRawTransactionSuccess implements Condition {\n+\n+  private final EeaSendRawTransactionTransaction sendRawTransactionTransaction;\n+  private final CompletableFuture<Hash> completeableFuture;\n+\n+  public EeaSendRawTransactionSuccess(\n+      final EeaSendRawTransactionTransaction sendRawTransactionTransaction,\n+      final CompletableFuture<Hash> completableFuture) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.completeableFuture = completableFuture;", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg0MTUyOQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375841529", "bodyText": "Incorrect fix for a test setup issue.  Removed.", "author": "mark-terry", "createdAt": "2020-02-06T13:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mzg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java\nindex 12fa19eba..a80cbb000 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java\n\n@@ -21,25 +21,18 @@ import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransactionTransaction;\n \n-import java.util.concurrent.CompletableFuture;\n-\n public class EeaSendRawTransactionSuccess implements Condition {\n \n   private final EeaSendRawTransactionTransaction sendRawTransactionTransaction;\n-  private final CompletableFuture<Hash> completeableFuture;\n \n   public EeaSendRawTransactionSuccess(\n-      final EeaSendRawTransactionTransaction sendRawTransactionTransaction,\n-      final CompletableFuture<Hash> completableFuture) {\n+      final EeaSendRawTransactionTransaction sendRawTransactionTransaction) {\n     this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n-    this.completeableFuture = completableFuture;\n   }\n \n   @Override\n   public void verify(final Node node) {\n     final Hash transactionHash = node.execute(sendRawTransactionTransaction);\n     assertThat(transactionHash).isNotNull();\n-    assertThat(transactionHash).isInstanceOf(Hash.class);\n-    completeableFuture.complete(transactionHash);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDIxNg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644216", "bodyText": "I think we can remove the Success from the end of all these conditions as that is the normal case.", "author": "jframe", "createdAt": "2020-02-06T05:16:42Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\nindex 0012a0dca..a763eab69 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n\n@@ -21,7 +21,6 @@ import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n \n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n \n public class PrivConditions {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDU0Mw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644543", "bodyText": "No need for priv at the start of all the conditions, they are in the privConditions so it will be obvious these are in the priv namespace.", "author": "jframe", "createdAt": "2020-02-06T05:18:06Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {\n+    return new PrivGetPrivacyPrecompileAddressSuccess(\n+        transactions.getPrivacyPrecompileAddress(), precompileAddress);\n+  }\n+\n+  public Condition privGetPrivateTransactionSuccess(", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\nindex 0012a0dca..a763eab69 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java\n\n@@ -21,7 +21,6 @@ import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n \n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n \n public class PrivConditions {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDcwOQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644709", "bodyText": "nit: can use the primitive int here", "author": "jframe", "createdAt": "2020-02-06T05:18:55Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetEeaTransactionCountTransaction;\n+\n+public class PrivGetEeaTransactionCountSuccess implements Condition {\n+\n+  private final PrivGetEeaTransactionCountTransaction privGetEeaTransactionCountTransaction;\n+  private final int expectedTransactionCount;\n+\n+  public PrivGetEeaTransactionCountSuccess(\n+      final PrivGetEeaTransactionCountTransaction privGetEeaTransactionCountTransaction,\n+      final int expectedTransactionCount) {\n+    this.privGetEeaTransactionCountTransaction = privGetEeaTransactionCountTransaction;\n+    this.expectedTransactionCount = expectedTransactionCount;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final Integer result = node.execute(privGetEeaTransactionCountTransaction);", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java\nindex d3c277b55..def5502d9 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java\n\n@@ -34,7 +34,7 @@ public class PrivGetEeaTransactionCountSuccess implements Condition {\n \n   @Override\n   public void verify(final Node node) {\n-    final Integer result = node.execute(privGetEeaTransactionCountTransaction);\n+    final int result = node.execute(privGetEeaTransactionCountTransaction);\n     assertThat(result).isNotNull();\n     assertThat(result).isInstanceOf(Integer.class);\n     assertThat(result).isEqualTo(expectedTransactionCount);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTU4OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375645588", "bodyText": "why do we need to check the instance type of the result?", "author": "jframe", "createdAt": "2020-02-06T05:23:21Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n+\n+public class PrivGetTransactionReceiptSuccess implements Condition {\n+\n+  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+\n+  public PrivGetTransactionReceiptSuccess(\n+      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n+    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    WaitUtils.waitFor(\n+        () ->\n+            assertThat(node.execute(privGetTransactionCountTransaction))\n+                .isNotNull()\n+                .isInstanceOf(PrivateTransactionReceipt.class));", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwMTA2Nw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375801067", "bodyText": "Removed.", "author": "mark-terry", "createdAt": "2020-02-06T12:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\nindex 5d475ea97..aee12a8ab 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\n\n@@ -21,23 +21,18 @@ import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n \n-import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n-\n public class PrivGetTransactionReceiptSuccess implements Condition {\n \n-  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+  private final PrivGetTransactionReceiptTransaction getTransactionReceiptTransaction;\n \n   public PrivGetTransactionReceiptSuccess(\n-      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n-    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+      final PrivGetTransactionReceiptTransaction getTransactionReceiptTransaction) {\n+    this.getTransactionReceiptTransaction = getTransactionReceiptTransaction;\n   }\n \n   @Override\n   public void verify(final Node node) {\n-    WaitUtils.waitFor(\n-        () ->\n-            assertThat(node.execute(privGetTransactionCountTransaction))\n-                .isNotNull()\n-                .isInstanceOf(PrivateTransactionReceipt.class));\n+    WaitUtils.waitFor(() -> assertThat(node.execute(getTransactionReceiptTransaction)).isNotNull());\n+    assertThat(node.execute(getTransactionReceiptTransaction).getStatus()).isEqualTo(\"0x1\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTg1OQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375645859", "bodyText": "Can we just check that status is 1 indicating it's successful?", "author": "jframe", "createdAt": "2020-02-06T05:24:48Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n+\n+public class PrivGetTransactionReceiptSuccess implements Condition {\n+\n+  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+\n+  public PrivGetTransactionReceiptSuccess(\n+      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n+    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    WaitUtils.waitFor(\n+        () ->\n+            assertThat(node.execute(privGetTransactionCountTransaction))\n+                .isNotNull()\n+                .isInstanceOf(PrivateTransactionReceipt.class));\n+  }", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\nindex 5d475ea97..aee12a8ab 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java\n\n@@ -21,23 +21,18 @@ import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n \n-import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n-\n public class PrivGetTransactionReceiptSuccess implements Condition {\n \n-  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+  private final PrivGetTransactionReceiptTransaction getTransactionReceiptTransaction;\n \n   public PrivGetTransactionReceiptSuccess(\n-      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n-    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+      final PrivGetTransactionReceiptTransaction getTransactionReceiptTransaction) {\n+    this.getTransactionReceiptTransaction = getTransactionReceiptTransaction;\n   }\n \n   @Override\n   public void verify(final Node node) {\n-    WaitUtils.waitFor(\n-        () ->\n-            assertThat(node.execute(privGetTransactionCountTransaction))\n-                .isNotNull()\n-                .isInstanceOf(PrivateTransactionReceipt.class));\n+    WaitUtils.waitFor(() -> assertThat(node.execute(getTransactionReceiptTransaction)).isNotNull());\n+    assertThat(node.execute(getTransactionReceiptTransaction).getStatus()).isEqualTo(\"0x1\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjQ3Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646476", "bodyText": "rename to privateFrom", "author": "jframe", "createdAt": "2020-02-06T05:27:55Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,\n+      final String transactionCountSenderBase64,", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\nindex c1ac686f3..ba0bd3ba7 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n\n@@ -26,10 +26,8 @@ public class PrivGetEeaTransactionCountTransaction implements Transaction<Intege\n   private final Object[] params;\n \n   public PrivGetEeaTransactionCountTransaction(\n-      final String transactionCountSender,\n-      final String transactionCountSenderBase64,\n-      final String[] addresses) {\n-    this.params = new Object[] {transactionCountSender, transactionCountSenderBase64, addresses};\n+      final String accountAddress, final String privateFrom, final String[] privateFor) {\n+    this.params = new Object[] {accountAddress, privateFrom, privateFor};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjUzMg==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646532", "bodyText": "rename to privateFor", "author": "jframe", "createdAt": "2020-02-06T05:28:08Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,\n+      final String transactionCountSenderBase64,\n+      final String[] addresses) {", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\nindex c1ac686f3..ba0bd3ba7 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n\n@@ -26,10 +26,8 @@ public class PrivGetEeaTransactionCountTransaction implements Transaction<Intege\n   private final Object[] params;\n \n   public PrivGetEeaTransactionCountTransaction(\n-      final String transactionCountSender,\n-      final String transactionCountSenderBase64,\n-      final String[] addresses) {\n-    this.params = new Object[] {transactionCountSender, transactionCountSenderBase64, addresses};\n+      final String accountAddress, final String privateFrom, final String[] privateFor) {\n+    this.params = new Object[] {accountAddress, privateFrom, privateFor};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Njg4MA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646880", "bodyText": "perhaps accountAddress?", "author": "jframe", "createdAt": "2020-02-06T05:29:58Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\nindex c1ac686f3..ba0bd3ba7 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java\n\n@@ -26,10 +26,8 @@ public class PrivGetEeaTransactionCountTransaction implements Transaction<Intege\n   private final Object[] params;\n \n   public PrivGetEeaTransactionCountTransaction(\n-      final String transactionCountSender,\n-      final String transactionCountSenderBase64,\n-      final String[] addresses) {\n-    this.params = new Object[] {transactionCountSender, transactionCountSenderBase64, addresses};\n+      final String accountAddress, final String privateFrom, final String[] privateFor) {\n+    this.params = new Object[] {accountAddress, privateFrom, privateFor};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzE0Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375647146", "bodyText": "nit: rename transactionCountSender to accountAddress and transactionCountPrivacyGroupId could be just privacyGroupId", "author": "jframe", "createdAt": "2020-02-06T05:31:07Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetTransactionCountTransaction(\n+      final String transactionCountSender, final String transactionCountPrivacyGroupId) {", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java\nindex d767a9fd3..aee4cab49 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java\n\n@@ -26,8 +26,8 @@ public class PrivGetTransactionCountTransaction implements Transaction<Integer>\n   private final Object[] params;\n \n   public PrivGetTransactionCountTransaction(\n-      final String transactionCountSender, final String transactionCountPrivacyGroupId) {\n-    this.params = new String[] {transactionCountSender, transactionCountPrivacyGroupId};\n+      final String accountAddress, final String privacyGroupId) {\n+    this.params = new String[] {accountAddress, privacyGroupId};\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzI2NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375647265", "bodyText": "No need to have transaction on the end if transaction is in the name", "author": "jframe", "createdAt": "2020-02-06T05:31:40Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.privacy.PrivateTransactionGroupResult;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivateTransactionTransaction", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1MDMwNw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375850307", "bodyText": "It seems redundant, but I personally find it confusing without the extra Transaction and read the method being executed as priv_getPrivate", "author": "mark-terry", "createdAt": "2020-02-06T14:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\nindex f63e1e349..5c12b6c13 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java\n\n@@ -16,15 +16,15 @@ package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.privacy.PrivateTransactionGroupResult;\n import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivateTransactionGroupResponse;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n \n import java.io.IOException;\n \n public class PrivGetPrivateTransactionTransaction\n-    implements Transaction<PrivateTransactionGroupResult> {\n+    implements Transaction<PrivateTransactionGroupResponse> {\n \n   private final Hash transactionHash;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0ODcyOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375648728", "bodyText": "Do we need this change? It's not in the AT package, will this affect the priv_getPrivateTransaction rpc response?", "author": "jframe", "createdAt": "2020-02-06T05:38:23Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java", "diffHunk": "@@ -47,6 +49,26 @@ public PrivateTransactionGroupResult(final PrivateTransaction tx) {\n     this.privacyGroupId = tx.getPrivacyGroupId().get().toBase64String();\n   }\n \n+  @JsonCreator\n+  public PrivateTransactionGroupResult(", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java\nindex 79c78b77d..32a8c3317 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java\n\n@@ -49,26 +47,6 @@ public class PrivateTransactionGroupResult extends PrivateTransactionResult {\n     this.privacyGroupId = tx.getPrivacyGroupId().get().toBase64String();\n   }\n \n-  @JsonCreator\n-  public PrivateTransactionGroupResult(\n-      @JsonProperty(\"from\") final String from,\n-      @JsonProperty(\"gas\") final String gas,\n-      @JsonProperty(\"gasPrice\") final String gasPrice,\n-      @JsonProperty(\"hash\") final String hash,\n-      @JsonProperty(\"input\") final String input,\n-      @JsonProperty(\"nonce\") final String nonce,\n-      @JsonProperty(\"to\") final String to,\n-      @JsonProperty(\"value\") final String value,\n-      @JsonProperty(\"v\") final String v,\n-      @JsonProperty(\"r\") final String r,\n-      @JsonProperty(\"s\") final String s,\n-      @JsonProperty(\"privateFrom\") final String privateFrom,\n-      @JsonProperty(\"restriction\") final String restriction,\n-      @JsonProperty(\"privacyGroupId\") final String privacyGroupId) {\n-    super(from, gas, gasPrice, hash, input, nonce, to, value, v, r, s, privateFrom, restriction);\n-    this.privacyGroupId = privacyGroupId;\n-  }\n-\n   @JsonGetter(value = \"privacyGroupId\")\n   public String getPrivacyGroupId() {\n     return privacyGroupId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0OTEyNA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375649124", "bodyText": "Does this need to change? Seems odd that we would be modifying classes in the API module for a AT unless there is a bug somewhere.", "author": "jframe", "createdAt": "2020-02-06T05:40:18Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java", "diffHunk": "@@ -53,6 +55,36 @@ public PrivateTransactionResult(final PrivateTransaction tx) {\n     this.restriction = new String(tx.getRestriction().getBytes().toArrayUnsafe(), UTF_8);\n   }\n \n+  @JsonCreator\n+  public PrivateTransactionResult(", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxNDg2Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375814866", "bodyText": "Good point.  Reverted and added a new response class in the AT package.", "author": "mark-terry", "createdAt": "2020-02-06T12:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0OTEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java\nindex 68fced747..ab50299b7 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java\n\n@@ -55,36 +53,6 @@ public abstract class PrivateTransactionResult {\n     this.restriction = new String(tx.getRestriction().getBytes().toArrayUnsafe(), UTF_8);\n   }\n \n-  @JsonCreator\n-  public PrivateTransactionResult(\n-      @JsonProperty(\"from\") final String from,\n-      @JsonProperty(\"gas\") final String gas,\n-      @JsonProperty(\"gasPrice\") final String gasPrice,\n-      @JsonProperty(\"hash\") final String hash,\n-      @JsonProperty(\"input\") final String input,\n-      @JsonProperty(\"nonce\") final String nonce,\n-      @JsonProperty(\"to\") final String to,\n-      @JsonProperty(\"value\") final String value,\n-      @JsonProperty(\"v\") final String v,\n-      @JsonProperty(\"r\") final String r,\n-      @JsonProperty(\"s\") final String s,\n-      @JsonProperty(\"privateFrom\") final String privateFrom,\n-      @JsonProperty(\"restriction\") final String restriction) {\n-    this.from = from;\n-    this.gas = gas;\n-    this.gasPrice = gasPrice;\n-    this.hash = hash;\n-    this.input = input;\n-    this.nonce = nonce;\n-    this.to = to;\n-    this.value = value;\n-    this.v = v;\n-    this.r = r;\n-    this.s = s;\n-    this.privateFrom = privateFrom;\n-    this.restriction = restriction;\n-  }\n-\n   @JsonGetter(value = \"from\")\n   public String getFrom() {\n     return from;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MTUzOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375651538", "bodyText": "added another comment about this, but would be good if we can avoid passing a future into the condition", "author": "jframe", "createdAt": "2020-02-06T05:51:59Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @Test\n+  public void privGetPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void privGetPrivateTransactionSuccessShouldReturnExpectedPrivateTransaction()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+\n+    final Hash transactionHash =\n+        node.execute(\n+            privacyTransactions.sendRawTransaction(\n+                getRLPOutput(validSignedPrivateTransaction).encoded().toHexString()));\n+    node.verify(priv.getTransactionReceiptSuccess(transactionHash));\n+    node.verify(\n+        priv.privGetPrivateTransactionSuccess(transactionHash, validSignedPrivateTransaction));\n+  }\n+\n+  @Test\n+  public void privCreatePrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    createPrivacyGroupEnclaveStub();\n+\n+    node.verify(\n+        priv.privCreatePrivacyGroupSuccess(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\", PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privDeletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    retrievePrivacyGroupEnclaveStub();\n+    deletePrivacyGroupEnclaveStub();\n+\n+    node.verify(priv.privDeletePrivacyGroupSuccess(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privFindPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    final List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU));\n+\n+    findPrivacyGroupEnclaveStub(groupMembership);\n+\n+    node.verify(priv.privFindPrivacyGroupSuccess(groupMembership.size(), ENCLAVE_KEY));\n+  }\n+\n+  @Test\n+  public void eeaSendRawTransactionSuccessShouldReturnPrivateTransactionHash()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+\n+    CompletableFuture<Hash> completableFuture = new CompletableFuture<>();\n+\n+    node.verify(\n+        priv.eeaSendRawTransactionSuccess(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString(),\n+            completableFuture));\n+\n+    completableFuture.whenComplete(", "originalCommit": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 99adf719c..4a32a7202 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -40,22 +40,21 @@ import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurati\n \n import java.math.BigInteger;\n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.github.tomakehurst.wiremock.junit.WireMockRule;\n import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.io.Base64;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n \n public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n   private BesuNode node;\n-  private Cluster multiTenancyCluster;\n-  private String token;\n   private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n \n   private static final int ENCLAVE_PORT = 1080;\n   private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n"}}, {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c", "url": "https://github.com/hyperledger/besu/commit/26e2ae42161267533dae57ae7504d13c29a22d0c", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-06T14:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY5MQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376194691", "bodyText": "is this needed for this PR? I.e. does this PR make use of random vs signed Private Marker transactions?", "author": "rain-on", "createdAt": "2020-02-07T03:07:13Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -105,7 +106,21 @@ public void startNode(final BesuNode node) {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      params.add(node.homeDirectory().resolve(\"key\").toString());\n+      node.getPrivacyParameters()", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMTY2NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376201665", "bodyText": "The PR requires the signing account to have balance.", "author": "mark-terry", "createdAt": "2020-02-07T03:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIyMjYxNA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376222614", "bodyText": "Not sure why this works in other places, but not now - maybe to do with Min-gas-price?\nWill investigate other tests.", "author": "rain-on", "createdAt": "2020-02-07T05:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMDQ1OQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376410459", "bodyText": "Updated BesuNodeFactory with an option to supply a mining configuration, which then permits setting the gasPrice to zero and mitigates the need for this change.", "author": "mark-terry", "createdAt": "2020-02-07T14:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\nindex 4854252dd..e46a97c9a 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\n\n@@ -106,21 +105,7 @@ public class ProcessBesuNodeRunner implements BesuNodeRunner {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      node.getPrivacyParameters()\n-          .getSigningKeyPair()\n-          .ifPresentOrElse(\n-              keyPair -> {\n-                try {\n-                  File privKeyFile = File.createTempFile(\"privKey\", \".tmp\");\n-                  FileWriter writer = new FileWriter(privKeyFile, UTF_8);\n-                  writer.write(keyPair.getPrivateKey().toString());\n-                  writer.close();\n-                  params.add(privKeyFile.getAbsolutePath());\n-                } catch (IOException e) {\n-                  LOG.error(\"Unable to create temp key file.\");\n-                }\n-              },\n-              () -> params.add(node.homeDirectory().resolve(\"key\").toString()));\n+      params.add(node.homeDirectory().resolve(\"key\").toString());\n     }\n \n     params.add(\"--bootnodes\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDc0MA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376194740", "bodyText": "do you need to flag the tempFIle as \"deleteOnExit\"?", "author": "rain-on", "createdAt": "2020-02-07T03:07:27Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -105,7 +106,21 @@ public void startNode(final BesuNode node) {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      params.add(node.homeDirectory().resolve(\"key\").toString());\n+      node.getPrivacyParameters()\n+          .getSigningKeyPair()\n+          .ifPresentOrElse(\n+              keyPair -> {\n+                try {\n+                  File privKeyFile = File.createTempFile(\"privKey\", \".tmp\");", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMTg3NA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376201874", "bodyText": "Yep, great idea.  \ud83d\udc4d", "author": "mark-terry", "createdAt": "2020-02-07T03:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\nindex 4854252dd..e46a97c9a 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java\n\n@@ -106,21 +105,7 @@ public class ProcessBesuNodeRunner implements BesuNodeRunner {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      node.getPrivacyParameters()\n-          .getSigningKeyPair()\n-          .ifPresentOrElse(\n-              keyPair -> {\n-                try {\n-                  File privKeyFile = File.createTempFile(\"privKey\", \".tmp\");\n-                  FileWriter writer = new FileWriter(privKeyFile, UTF_8);\n-                  writer.write(keyPair.getPrivateKey().toString());\n-                  writer.close();\n-                  params.add(privKeyFile.getAbsolutePath());\n-                } catch (IOException e) {\n-                  LOG.error(\"Unable to create temp key file.\");\n-                }\n-              },\n-              () -> params.add(node.homeDirectory().resolve(\"key\").toString()));\n+      params.add(node.homeDirectory().resolve(\"key\").toString());\n     }\n \n     params.add(\"--bootnodes\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTAxMQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195011", "bodyText": "rename the function to imply the authFile is coming from SystemResources (also - this is no longer an enable/disable function", "author": "rain-on", "createdAt": "2020-02-07T03:08:52Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java", "diffHunk": "@@ -103,11 +105,10 @@ public BesuNodeConfigurationBuilder enablePrivateTransactions() {\n     return this;\n   }\n \n-  public BesuNodeConfigurationBuilder jsonRpcAuthenticationEnabled() throws URISyntaxException {\n+  public BesuNodeConfigurationBuilder jsonRpcAuthenticationEnabled(final String authFile)", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\nindex 1f48fdcbe..a5867bd79 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\n\n@@ -105,7 +111,7 @@ public class BesuNodeConfigurationBuilder {\n     return this;\n   }\n \n-  public BesuNodeConfigurationBuilder jsonRpcAuthenticationEnabled(final String authFile)\n+  public BesuNodeConfigurationBuilder jsonRpcAuthenticationConfiguration(final String authFile)\n       throws URISyntaxException {\n     final String authTomlPath =\n         Paths.get(ClassLoader.getSystemResource(authFile).toURI()).toAbsolutePath().toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTIxOA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195218", "bodyText": "nit:_personally I'd rather see someone pass in a concrete privacyParameters, then this function can do a \"Optional.ofNullable\" - the person injecting the data doesn't (necessarily) want to have to construct up an Optional to make this work (unless this is invoked from a simple pass-through function)", "author": "rain-on", "createdAt": "2020-02-07T03:09:57Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java", "diffHunk": "@@ -234,6 +235,12 @@ public BesuNodeConfigurationBuilder staticNodes(final List<String> staticNodes)\n     return this;\n   }\n \n+  public BesuNodeConfigurationBuilder privacyParameters(\n+      final Optional<PrivacyParameters> privacyParameters) {", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\nindex 1f48fdcbe..a5867bd79 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java\n\n@@ -235,9 +241,8 @@ public class BesuNodeConfigurationBuilder {\n     return this;\n   }\n \n-  public BesuNodeConfigurationBuilder privacyParameters(\n-      final Optional<PrivacyParameters> privacyParameters) {\n-    this.privacyParameters = privacyParameters;\n+  public BesuNodeConfigurationBuilder privacyParameters(final PrivacyParameters privacyParameters) {\n+    this.privacyParameters = Optional.ofNullable(privacyParameters);\n     return this;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTY5OQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195699", "bodyText": "nit: rename to end with ...withMultiTenantedPrivacy?", "author": "rain-on", "createdAt": "2020-02-07T03:12:22Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 8989ac74a..820a25aad 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -168,12 +171,11 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithMultiTenancy(\n+  public BesuNode createNodeWithMultiTenantedPrivacy(\n       final String name,\n       final String enclaveUrl,\n       final String authFile,\n-      final String authPubKeyFile,\n-      final String authPrivateKeyPath)\n+      final String privTransactionSigningKey)\n       throws IOException, URISyntaxException {\n     final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n     final PrivacyParameters privacyParameters =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTk1OA==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195958", "bodyText": "what are these priv/pub keys - or are they referenced from the authFile?", "author": "rain-on", "createdAt": "2020-02-07T03:13:16Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile,", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 8989ac74a..820a25aad 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -168,12 +171,11 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithMultiTenancy(\n+  public BesuNode createNodeWithMultiTenantedPrivacy(\n       final String name,\n       final String enclaveUrl,\n       final String authFile,\n-      final String authPubKeyFile,\n-      final String authPrivateKeyPath)\n+      final String privTransactionSigningKey)\n       throws IOException, URISyntaxException {\n     final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n     final PrivacyParameters privacyParameters =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjI1NQ==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376196255", "bodyText": "is this needed for multi-tenancy (i.e. isn't this in the auth file?)", "author": "rain-on", "createdAt": "2020-02-07T03:14:48Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile,\n+      final String authPrivateKeyPath)\n+      throws IOException, URISyntaxException {\n+    final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n+    final PrivacyParameters privacyParameters =\n+        privacyParametersBuilder\n+            .setMultiTenancyEnabled(true)\n+            .setEnabled(true)\n+            .setStorageProvider(new InMemoryPrivacyStorageProvider())\n+            .setEnclaveFactory(new EnclaveFactory(Vertx.vertx()))\n+            .setEnclaveUrl(URI.create(enclaveUrl))\n+            .setEnclavePublicKeyUsingFile(", "originalCommit": "26e2ae42161267533dae57ae7504d13c29a22d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNzQwMw==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376217403", "bodyText": "The same key is present in both files, but they're in different formats for different consumers.", "author": "mark-terry", "createdAt": "2020-02-07T05:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "chunk": "diff --git a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\nindex 8989ac74a..820a25aad 100644\n--- a/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n+++ b/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java\n\n@@ -168,12 +171,11 @@ public class BesuNodeFactory {\n             .build());\n   }\n \n-  public BesuNode createNodeWithMultiTenancy(\n+  public BesuNode createNodeWithMultiTenantedPrivacy(\n       final String name,\n       final String enclaveUrl,\n       final String authFile,\n-      final String authPubKeyFile,\n-      final String authPrivateKeyPath)\n+      final String privTransactionSigningKey)\n       throws IOException, URISyntaxException {\n     final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n     final PrivacyParameters privacyParameters =\n"}}, {"oid": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "url": "https://github.com/hyperledger/besu/commit/850d8b3dd4194000ff4d7e5ba9527633db917bbe", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-07T15:16:55Z", "type": "commit"}, {"oid": "ae8bc976d2f67e3a70508f0c376408f93619996d", "url": "https://github.com/hyperledger/besu/commit/ae8bc976d2f67e3a70508f0c376408f93619996d", "message": "[PIE-1798] Test fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-09T23:28:54Z", "type": "commit"}, {"oid": "eea14d80cbe74dbe125d3f6f9d52646db0754d91", "url": "https://github.com/hyperledger/besu/commit/eea14d80cbe74dbe125d3f6f9d52646db0754d91", "message": "Merge branch 'master' into PIE-1798", "committedDate": "2020-02-10T12:41:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDM3Ng==", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r377384376", "bodyText": "We should use PANTHEON for type now as that is what Orion supports", "author": "jframe", "createdAt": "2020-02-10T23:47:33Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void privGetPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.verify(priv.getPrivacyPrecompileAddress(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void privGetPrivateTransactionSuccessShouldReturnExpectedPrivateTransaction()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+\n+    final Hash transactionHash =\n+        node.execute(\n+            privacyTransactions.sendRawTransaction(\n+                getRLPOutput(validSignedPrivateTransaction).encoded().toHexString()));\n+    node.verify(priv.getTransactionReceipt(transactionHash));\n+    node.verify(priv.getPrivateTransaction(transactionHash, validSignedPrivateTransaction));\n+  }\n+\n+  @Test\n+  public void privCreatePrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    createPrivacyGroupEnclaveStub();\n+\n+    node.verify(\n+        priv.createPrivacyGroup(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\", PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privDeletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    retrievePrivacyGroupEnclaveStub();\n+    deletePrivacyGroupEnclaveStub();\n+\n+    node.verify(priv.deletePrivacyGroup(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privFindPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    final List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),", "originalCommit": "eea14d80cbe74dbe125d3f6f9d52646db0754d91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca9e3104222e05c4deff47e60dcc3068ee7186e7", "chunk": "diff --git a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\nindex 973e7bae5..0c873402c 100644\n--- a/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n+++ b/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java\n\n@@ -134,9 +134,9 @@ public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n       throws JsonProcessingException {\n     final List<PrivacyGroup> groupMembership =\n         List.of(\n-            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n-            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n-            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU));\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.PANTHEON),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.PANTHEON),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.PANTHEON));\n \n     findPrivacyGroupEnclaveStub(groupMembership);\n \n"}}, {"oid": "ca9e3104222e05c4deff47e60dcc3068ee7186e7", "url": "https://github.com/hyperledger/besu/commit/ca9e3104222e05c4deff47e60dcc3068ee7186e7", "message": "[PIE-1798] Removed incorrect additional PrivacyGroup value.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>", "committedDate": "2020-02-10T23:57:44Z", "type": "commit"}, {"oid": "e4be0cf192fc6c68ae8d10bb531cdc998c615516", "url": "https://github.com/hyperledger/besu/commit/e4be0cf192fc6c68ae8d10bb531cdc998c615516", "message": "Merge branch 'master' into PIE-1798", "committedDate": "2020-02-10T23:58:42Z", "type": "commit"}]}