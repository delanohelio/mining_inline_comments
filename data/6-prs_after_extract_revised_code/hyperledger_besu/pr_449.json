{"pr_number": 449, "pr_title": "PIE-1961 - Add trace block api", "pr_createdAt": "2020-03-11T14:30:45Z", "pr_url": "https://github.com/hyperledger/besu/pull/449", "timeline": [{"oid": "0344ca474b81c65657fc705b789bc6c31008d571", "url": "https://github.com/hyperledger/besu/commit/0344ca474b81c65657fc705b789bc6c31008d571", "message": "init trace_block api\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-10T12:59:22Z", "type": "commit"}, {"oid": "7a39f2a50a710b39ab01d92b5004e4b9151b1d10", "url": "https://github.com/hyperledger/besu/commit/7a39f2a50a710b39ab01d92b5004e4b9151b1d10", "message": "add test for trace_block api\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-10T13:01:26Z", "type": "commit"}, {"oid": "d0f63e529cf9f0e747b7ff13968b1b94353ecd9b", "url": "https://github.com/hyperledger/besu/commit/d0f63e529cf9f0e747b7ff13968b1b94353ecd9b", "message": "fix trace_block api issue\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T12:36:49Z", "type": "commit"}, {"oid": "b01d32558ae6b0235927fd5db7950ac07430a323", "url": "https://github.com/hyperledger/besu/commit/b01d32558ae6b0235927fd5db7950ac07430a323", "message": "fix trace_block api block reward issue\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T13:05:41Z", "type": "commit"}, {"oid": "0d7b8d334a8670692508e0fa9050852388f49f5d", "url": "https://github.com/hyperledger/besu/commit/0d7b8d334a8670692508e0fa9050852388f49f5d", "message": "fix trace_block api block reward issue order\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T13:11:00Z", "type": "commit"}, {"oid": "606b8fb6a88768b5e72ab9bf9ae21a5e14ee4632", "url": "https://github.com/hyperledger/besu/commit/606b8fb6a88768b5e72ab9bf9ae21a5e14ee4632", "message": "add ommer reward to block reward\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T13:16:11Z", "type": "commit"}, {"oid": "79d2c3334c4d228f3dd2174d3791368ab44594d5", "url": "https://github.com/hyperledger/besu/commit/79d2c3334c4d228f3dd2174d3791368ab44594d5", "message": "change to uncle inclusion reward\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T13:38:45Z", "type": "commit"}, {"oid": "39346bdfcd78343e152db09e5a5d74e6b713ca95", "url": "https://github.com/hyperledger/besu/commit/39346bdfcd78343e152db09e5a5d74e6b713ca95", "message": "add reward without transaction\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T13:42:50Z", "type": "commit"}, {"oid": "efccea8a8db47c3ce68c0eb96bc050989e218b24", "url": "https://github.com/hyperledger/besu/commit/efccea8a8db47c3ce68c0eb96bc050989e218b24", "message": "fix last issues and clean code\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T14:03:29Z", "type": "commit"}, {"oid": "cc9f474deca3955e57119922b26be82c3fae85ef", "url": "https://github.com/hyperledger/besu/commit/cc9f474deca3955e57119922b26be82c3fae85ef", "message": "rename generate reward method\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T14:35:08Z", "type": "commit"}, {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "url": "https://github.com/hyperledger/besu/commit/fd5ad39584a475f3b86bc80808d03132eb079cc6", "message": "Merge commit 'f03061d2b41af012dd1fbefea2d15540de24e015' into feature/pie-1961-add-trace-block-api\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-11T15:36:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjE1OQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391106159", "bodyText": "you can make the mapper static - also reuse the same one with emptyResult", "author": "atoulme", "createdAt": "2020-03-11T16:36:52Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.BlockTracer;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.TransactionTrace;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.FlatTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.RewardTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.debug.TraceOptions;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.vm.DebugOperationTracer;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n+public class TraceBlock extends AbstractBlockParameterMethod {\n+  private final Supplier<BlockTracer> blockTracerSupplier;\n+  private final ProtocolSchedule<?> protocolSchedule;\n+\n+  public TraceBlock(\n+      final Supplier<BlockTracer> blockTracerSupplier,\n+      final ProtocolSchedule<?> protocolSchedule,\n+      final BlockchainQueries queries) {\n+    super(queries);\n+    this.blockTracerSupplier = blockTracerSupplier;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.TRACE_BLOCK.getMethodName();\n+  }\n+\n+  @Override\n+  protected BlockParameter blockParameter(final JsonRpcRequestContext request) {\n+    return request.getRequiredParameter(0, BlockParameter.class);\n+  }\n+\n+  @Override\n+  protected Object resultByBlockNumber(\n+      final JsonRpcRequestContext request, final long blockNumber) {\n+    if (blockNumber == BlockHeader.GENESIS_BLOCK_NUMBER) {\n+      // Nothing to trace for the genesis block\n+      return emptyResult();\n+    }\n+\n+    return getBlockchainQueries()\n+        .getBlockchain()\n+        .getBlockByNumber(blockNumber)\n+        .map(this::traceBlock)\n+        .orElse(null);\n+  }\n+\n+  private Object traceBlock(final Block block) {\n+\n+    if (block == null) {\n+      return emptyResult();\n+    }\n+    final ObjectMapper mapper = new ObjectMapper();", "originalCommit": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0Mzc5MA==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391643790", "bodyText": "Done.", "author": "matkt", "createdAt": "2020-03-12T14:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "66659877354228a44af3da8b5b9cb6941d7bb87c", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java\nindex 5e74d79d7..068e5083b 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java\n\n@@ -35,6 +35,8 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ArrayNode;\n \n public class TraceBlock extends AbstractBlockParameterMethod {\n+\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n   private final Supplier<BlockTracer> blockTracerSupplier;\n   private final ProtocolSchedule<?> protocolSchedule;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391107976", "bodyText": "My understanding from working with @shemnon on JSON serialized code is that the team likes to have the right getters, but also to add @JsonProperty with the field names so it's obvious the method is used for JSON serialization.", "author": "atoulme", "createdAt": "2020-03-11T16:39:30Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -109,6 +131,14 @@ public String getRefundAddress() {\n     return refundAddress;\n   }\n \n+  public String getAuthor() {", "originalCommit": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMTA0Ng==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391301046", "bodyText": "That is more of an emergent pattern than a deliberate one.  At one point getters and setters were prohibited from the codebase (pre public release).  That was changed but the JsonProperty annotations were not removed.", "author": "shemnon", "createdAt": "2020-03-11T22:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTQxNQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391645415", "bodyText": "it seem that no modification is necessary ?", "author": "matkt", "createdAt": "2020-03-12T14:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTAzNQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393159035", "bodyText": "I'm OK with no modification.  There is no written style guide for this.", "author": "shemnon", "createdAt": "2020-03-16T16:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODE5MA==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391108190", "bodyText": "Same here on adding @JsonProperty", "author": "atoulme", "createdAt": "2020-03-11T16:39:47Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/FlatTrace.java", "diffHunk": "@@ -273,6 +265,38 @@ public Builder error(final Optional<String> error) {\n       return this;\n     }\n \n+    public String getType() {\n+      return type;\n+    }\n+\n+    public int getSubtraces() {\n+      return subtraces;\n+    }\n+\n+    public List<Integer> getTraceAddress() {", "originalCommit": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391108960", "bodyText": "Is 8 here a magic number?", "author": "atoulme", "createdAt": "2020-03-11T16:40:50Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));", "originalCommit": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDI5Nw==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391304297", "bodyText": "This is a magic number, along with 32, and yikes it's everywhere.  We need to factor it out but that is out of scope for this PR, I opened #452 and added a good first issue tag.", "author": "shemnon", "createdAt": "2020-03-11T22:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NDc1NQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391644755", "bodyText": "I just made a modification that uses the BlockProcessor and I added tests to verify that the RewardTracegenerator is using the processor to calculate the rewards", "author": "matkt", "createdAt": "2020-03-12T14:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "66659877354228a44af3da8b5b9cb6941d7bb87c", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\nindex b0d4185ae..154037202 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\n\n@@ -24,7 +24,6 @@ import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n \n public class RewardTraceGenerator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTYwNw==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391109607", "bodyText": "Same, is 32 a magic number? Should that logic be tested elsewhere? It may be impacted by the chain spec (ETH vs ETC have different block rewards)", "author": "atoulme", "createdAt": "2020-03-11T16:41:46Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));\n+              final Action.Builder uncleActionBuilder =\n+                  Action.builder()\n+                      .author(\n+                          miningBeneficiaryCalculator\n+                              .calculateBeneficiary(ommerBlockHeader)\n+                              .toHexString())\n+                      .rewardType(UNCLE_LABEL)\n+                      .value(ommerReward.toShortHexString());\n+              flatTraces.add(\n+                  RewardTrace.builder()\n+                      .actionBuilder(uncleActionBuilder)\n+                      .blockHash(block.getHash().toHexString())\n+                      .blockNumber(blockHeader.getNumber())\n+                      .type(REWARD_LABEL)\n+                      .build());\n+\n+              // add uncle inclusion reward\n+              totalBlockReward.set(totalBlockReward.get().add(blockReward.divide(32)));", "originalCommit": "fd5ad39584a475f3b86bc80808d03132eb079cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NDkwNQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391644905", "bodyText": "The same I just made a modification that uses the blockProcessor and I added tests to verify that the RewardTracegenerator is using the processor to calculate the rewards", "author": "matkt", "createdAt": "2020-03-12T14:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "66659877354228a44af3da8b5b9cb6941d7bb87c", "chunk": "diff --git a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\nindex b0d4185ae..154037202 100644\n--- a/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\n+++ b/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java\n\n@@ -24,7 +24,6 @@ import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n \n public class RewardTraceGenerator {\n"}}, {"oid": "66659877354228a44af3da8b5b9cb6941d7bb87c", "url": "https://github.com/hyperledger/besu/commit/66659877354228a44af3da8b5b9cb6941d7bb87c", "message": "fix review issues\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-12T13:09:35Z", "type": "commit"}, {"oid": "149e55f82f774203ff23e1052a26564840816344", "url": "https://github.com/hyperledger/besu/commit/149e55f82f774203ff23e1052a26564840816344", "message": "fix build\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-12T13:33:46Z", "type": "commit"}, {"oid": "fd98223db85945440a44b195e98e9d5d9b9e9c8f", "url": "https://github.com/hyperledger/besu/commit/fd98223db85945440a44b195e98e9d5d9b9e9c8f", "message": "clean code\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-12T14:05:22Z", "type": "commit"}, {"oid": "d3408e1ebedfea13d97f396411f4c147968c4ab7", "url": "https://github.com/hyperledger/besu/commit/d3408e1ebedfea13d97f396411f4c147968c4ab7", "message": "Merge commit '46e9d1dc83ac00b9de65f52105b120cbb83ec2b0' into feature/pie-1961-add-trace-block-api\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-16T09:20:04Z", "type": "commit"}, {"oid": "3b85fd5dc7b20e65b48e293689d902bf90be9c73", "url": "https://github.com/hyperledger/besu/commit/3b85fd5dc7b20e65b48e293689d902bf90be9c73", "message": "fix the tests to work with the new generation of blocks.bin\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-16T09:39:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MjAxNw==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393162017", "bodyText": "I was hoping this ommer and block reward refactoring was going to happen in another follow on PR, but I'll allow it.", "author": "shemnon", "createdAt": "2020-03-16T16:43:59Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BlockProcessor.java", "diffHunk": "@@ -80,4 +81,31 @@ Result processBlock(\n       BlockHeader blockHeader,\n       List<Transaction> transactions,\n       List<BlockHeader> ommers);\n+\n+  /**\n+   * Get ommer reward in ${@link Wei}\n+   *\n+   * @param blockReward reward of the block\n+   * @param blockNumber number of the block\n+   * @param ommerBlockNumber number of the block ommer\n+   * @return ommer reward\n+   */\n+  default Wei getOmmerReward(", "originalCommit": "3b85fd5dc7b20e65b48e293689d902bf90be9c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTkyMQ==", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393391921", "bodyText": "I've had a lot of luck changing the order of the fields to match the desired output ordering.", "author": "shemnon", "createdAt": "2020-03-17T01:08:41Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -20,8 +20,24 @@\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n @JsonInclude(NON_NULL)\n+@JsonPropertyOrder({", "originalCommit": "3b85fd5dc7b20e65b48e293689d902bf90be9c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c3fe202bc051a6631380ca9507034c17ee9edfbb", "url": "https://github.com/hyperledger/besu/commit/c3fe202bc051a6631380ca9507034c17ee9edfbb", "message": "Merge commit 'ba2f43cbd0dc1f6f6d1a3214ddb696011dcac5bc' into feature/pie-1961-add-trace-block-api\n\nSigned-off-by: Karim TAAM <karim.t2am@gmail.com>", "committedDate": "2020-03-17T10:39:31Z", "type": "commit"}]}