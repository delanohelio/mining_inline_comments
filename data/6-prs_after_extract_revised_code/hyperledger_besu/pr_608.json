{"pr_number": 608, "pr_title": "Add eth65 support", "pr_createdAt": "2020-03-27T18:52:59Z", "pr_url": "https://github.com/hyperledger/besu/pull/608", "timeline": [{"oid": "c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "url": "https://github.com/hyperledger/besu/commit/c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "message": "Add eth65 support\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-27T18:53:08Z", "type": "commit"}, {"oid": "c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "url": "https://github.com/hyperledger/besu/commit/c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "message": "Add eth65 support\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-27T18:53:08Z", "type": "forcePushed"}, {"oid": "3a8af02d4a66ae42e52f4f781d047d64b0ed8342", "url": "https://github.com/hyperledger/besu/commit/3a8af02d4a66ae42e52f4f781d047d64b0ed8342", "message": "Fix integration tests\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-27T20:59:47Z", "type": "commit"}, {"oid": "15e8e311e5715aab1b57077fab03458e9c348924", "url": "https://github.com/hyperledger/besu/commit/15e8e311e5715aab1b57077fab03458e9c348924", "message": "Fix acceptance tests\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-27T22:22:08Z", "type": "commit"}, {"oid": "a1eb9636ae4391a81d58822340d9eb30dd8ba2bd", "url": "https://github.com/hyperledger/besu/commit/a1eb9636ae4391a81d58822340d9eb30dd8ba2bd", "message": "Merge branch 'master' into eth65", "committedDate": "2020-03-28T00:29:30Z", "type": "commit"}, {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "url": "https://github.com/hyperledger/besu/commit/defbed1d0abf2bf326b68178cac3aba53a2832a9", "message": "add acceptance test that checks that transactions are gossiped between peers\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-28T07:06:08Z", "type": "commit"}, {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "url": "https://github.com/hyperledger/besu/commit/defbed1d0abf2bf326b68178cac3aba53a2832a9", "message": "add acceptance test that checks that transactions are gossiped between peers\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-28T07:06:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NTMyOA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400255328", "bodyText": "This deserves a comment.  Since Eth/65 messages operate in a \"hole\" in the Eth/64 message space (0x08->0x0a even though we add 3 messages the highest message number is still 0x10. Without this tidbit one might expect the message space to be 20.", "author": "shemnon", "createdAt": "2020-03-30T14:52:35Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java", "diffHunk": "@@ -65,6 +78,7 @@ public int messageSpace(final int protocolVersion) {\n         return 8;\n       case EthVersion.V63:\n       case EthVersion.V64:\n+      case EthVersion.V65:", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzc1Ng==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400623756", "bodyText": "Sure thing.", "author": "atoulme", "createdAt": "2020-03-31T03:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NTMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\nindex 424045d93..2d8dcde5d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\n\n@@ -78,7 +78,9 @@ public class EthProtocol implements SubProtocol {\n         return 8;\n       case EthVersion.V63:\n       case EthVersion.V64:\n-      case EthVersion.V65:\n+      case EthVersion\n+          .V65: // same number of messages in the range, eth65 defines messages in the middle of the\n+        // range defined by eth63.\n         return 17;\n       default:\n         return 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NDA0MQ==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400264041", "bodyText": "Since the codes for pooled transactions are between new block (0x07) and get node data (0x0d) perhaps these should be put at line 106, so we sort by actual code value not by protocol introduced.  This would help remind maintainers of this peculiarity.", "author": "shemnon", "createdAt": "2020-03-30T15:03:40Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java", "diffHunk": "@@ -111,6 +127,12 @@ public String messageName(final int protocolVersion, final int code) {\n         return \"GetReceipts\";\n       case EthPV63.RECEIPTS:\n         return \"Receipts\";\n+      case EthPV65.GET_POOLED_TRANSACTIONS:", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNDE1Nw==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400624157", "bodyText": "ok changed.", "author": "atoulme", "createdAt": "2020-03-31T03:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NDA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\nindex 424045d93..2d8dcde5d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java\n\n@@ -127,12 +135,6 @@ public class EthProtocol implements SubProtocol {\n         return \"GetReceipts\";\n       case EthPV63.RECEIPTS:\n         return \"Receipts\";\n-      case EthPV65.GET_POOLED_TRANSACTIONS:\n-        return \"GetPooledTransactions\";\n-      case EthPV65.NEW_POOLED_TRANSACTION_HASHES:\n-        return \"NewPooledTransactionHashes\";\n-      case EthPV65.POOLED_TRANSACTIONS:\n-        return \"PooledTransactions\";\n       default:\n         return INVALID_MESSAGE_NAME;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400265952", "bodyText": "Why does this need to be moved from constructor args into a bind method?", "author": "shemnon", "createdAt": "2020-03-30T15:06:11Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java", "diffHunk": "@@ -184,6 +176,19 @@ public String getSupportedProtocol() {\n     return supportedCapabilities;\n   }\n \n+  public void bind(", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNjA2Nw==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400636067", "bodyText": "Alright, that's a bit meaty.\nSo EthProtocolManager does define a EthContext instance that is required by TransactionPool and SyncState, which now require it to configure themselves.\nThe EthContext object is built in the constructor of EthProtocolManager with objects built by EthProtocolManager, EthPeers and EthMessages.  While EthPeers is used elsewhere, EthMessages is only used in bind and to handle messages.\nIf you want to move EthContext out of EthProtocolManager, you'll need to also move EthPeers and EthMessages out.\nIs that what you want?", "author": "atoulme", "createdAt": "2020-03-31T04:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1Njg2Mg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400656862", "bodyText": "That would more accurately reflect the real complexity.  Also, without the two step binding it makes it easier to move to something like Dagger or Guice to manage all of this.", "author": "shemnon", "createdAt": "2020-03-31T05:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NjY3Nw==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400666677", "bodyText": "That's interesting, what's the plan around DI?", "author": "atoulme", "createdAt": "2020-03-31T06:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NTMwNQ==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401385305", "bodyText": "OK I have flattened the dependencies, let's see once I make all the tests pass again.", "author": "atoulme", "createdAt": "2020-04-01T06:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java\nindex 7f0c6ceab..06b2f07a7 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java\n\n@@ -176,19 +194,6 @@ public class EthProtocolManager implements ProtocolManager, MinedBlockObserver {\n     return supportedCapabilities;\n   }\n \n-  public void bind(\n-      final WorldStateArchive worldStateArchive,\n-      final TransactionPool transactionPool,\n-      final EthProtocolConfiguration ethereumWireProtocolConfiguration) {\n-    // Set up request handlers\n-    new EthServer(\n-        blockchain,\n-        worldStateArchive,\n-        transactionPool,\n-        ethMessages,\n-        ethereumWireProtocolConfiguration);\n-  }\n-\n   @Override\n   public void stop() {\n     if (stopped.compareAndSet(false, true)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400269192", "bodyText": "Why does this need it's own executor?  Why can't it re-use the sync worker?  That's the same queue we are currently sending transactions to peers on already.  I think the OS overhead of yet another executor is unwarranted in this case.", "author": "shemnon", "createdAt": "2020-03-30T15:10:15Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.transactions;\n+\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool.TransactionBatchAddedListener;\n+\n+class PendingTransactionSender implements TransactionBatchAddedListener {\n+\n+  private final PeerPendingTransactionTracker transactionTracker;\n+  private final PendingTransactionsMessageSender transactionsMessageSender;\n+  private final EthContext ethContext;\n+\n+  public PendingTransactionSender(\n+      final PeerPendingTransactionTracker transactionTracker,\n+      final PendingTransactionsMessageSender transactionsMessageSender,\n+      final EthContext ethContext) {\n+    this.transactionTracker = transactionTracker;\n+    this.transactionsMessageSender = transactionsMessageSender;\n+    this.ethContext = ethContext;\n+  }\n+\n+  @Override\n+  public void onTransactionsAdded(final Iterable<Transaction> transactions) {\n+    ethContext\n+        .getEthPeers()\n+        .streamAvailablePeers()\n+        .forEach(\n+            peer ->\n+                transactions.forEach(\n+                    transaction ->\n+                        transactionTracker.addToPeerSendQueue(peer, transaction.getHash())));\n+    ethContext\n+        .getScheduler()\n+        .schedulePendingTransactionsTask(transactionsMessageSender::sendTransactionsToPeers);", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzUzOA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400623538", "bodyText": "It allows fine tuning of the executor, as in you can shut off this gossip mechanism. Note that otherwise this is not something you can easily control through settings.", "author": "atoulme", "createdAt": "2020-03-31T03:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NjUxNA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400656514", "bodyText": "There are at least three other similar paired messages that the argument could be made for, but they all still use the sync worker.  I don't think we need a new executor for this group of messages and strongly feel we should use the existing sync worker for these.  It is, after all, the same executor the transactions are polled from in eth/64 and prior.", "author": "shemnon", "createdAt": "2020-03-31T05:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NzA4NA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400657084", "bodyText": "OK.", "author": "atoulme", "createdAt": "2020-03-31T05:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4NTQ2Mw==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401385463", "bodyText": "I have removed the separate executor.", "author": "atoulme", "createdAt": "2020-04-01T06:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java\nindex f609bf094..5617521f8 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java\n\n@@ -45,6 +45,6 @@ class PendingTransactionSender implements TransactionBatchAddedListener {\n                         transactionTracker.addToPeerSendQueue(peer, transaction.getHash())));\n     ethContext\n         .getScheduler()\n-        .schedulePendingTransactionsTask(transactionsMessageSender::sendTransactionsToPeers);\n+        .scheduleSyncWorkerTask(transactionsMessageSender::sendTransactionsToPeers);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTkxMg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400291912", "bodyText": "Per the spec a closed stream is a valid response indicating all requests were not found.\n\nA peer may respond with an empty reply iff none of the hashes match transactions in its pool. It is allowed to announce a transaction that will not be served later if it gets included in a block in between.\n\nSo it usually would be a valid response.  I think we should revise the comment so we don't accidentally come back in and try and \"optimize\" it.", "author": "shemnon", "createdAt": "2020-03-30T15:38:55Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager.task;\n+\n+import static java.util.Collections.emptyMap;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.manager.EthPeer;\n+import org.hyperledger.besu.ethereum.eth.manager.PendingPeerRequest;\n+import org.hyperledger.besu.ethereum.eth.messages.EthPV65;\n+import org.hyperledger.besu.ethereum.eth.messages.PooledTransactionsMessage;\n+import org.hyperledger.besu.ethereum.p2p.rlpx.wire.MessageData;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class GetPooledTransactionsFromPeerTask\n+    extends AbstractPeerRequestTask<Map<Hash, Transaction>> {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final List<Hash> hashes;\n+\n+  private GetPooledTransactionsFromPeerTask(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    super(ethContext, EthPV65.GET_POOLED_TRANSACTIONS, metricsSystem);\n+    this.hashes = new ArrayList<>(hashes);\n+  }\n+\n+  public static GetPooledTransactionsFromPeerTask forHashes(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    return new GetPooledTransactionsFromPeerTask(ethContext, hashes, metricsSystem);\n+  }\n+\n+  @Override\n+  protected PendingPeerRequest sendRequest() {\n+    return sendRequestToPeer(\n+        peer -> {\n+          LOG.debug(\"Requesting {} transaction pool entries from peer {}.\", hashes.size(), peer);\n+          return peer.getPooledTransactions(hashes);\n+        },\n+        0);\n+  }\n+\n+  @Override\n+  protected Optional<Map<Hash, Transaction>> processResponse(\n+      final boolean streamClosed, final MessageData message, final EthPeer peer) {\n+    if (streamClosed) {\n+      // We don't record this as a useless response because it's impossible to know if a peer has", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzU0OA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400623548", "bodyText": "This is a copy/paste of another part of the code. streamClosed here means that the other peer closed the TCP connection. Empty response means that the payload of the message is empty.", "author": "atoulme", "createdAt": "2020-03-31T03:36:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\nindex 407da11e3..cf8825f95 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\n\n@@ -14,7 +14,7 @@\n  */\n package org.hyperledger.besu.ethereum.eth.manager.task;\n \n-import static java.util.Collections.emptyMap;\n+import static java.util.Collections.emptyList;\n \n import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.ethereum.core.Transaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDE4Mg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400294182", "bodyText": "Curious why we need to return a Map<Hash, Transaction>, why not just a List<Transaction>?", "author": "shemnon", "createdAt": "2020-03-30T15:41:49Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager.task;\n+\n+import static java.util.Collections.emptyMap;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.manager.EthPeer;\n+import org.hyperledger.besu.ethereum.eth.manager.PendingPeerRequest;\n+import org.hyperledger.besu.ethereum.eth.messages.EthPV65;\n+import org.hyperledger.besu.ethereum.eth.messages.PooledTransactionsMessage;\n+import org.hyperledger.besu.ethereum.p2p.rlpx.wire.MessageData;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class GetPooledTransactionsFromPeerTask\n+    extends AbstractPeerRequestTask<Map<Hash, Transaction>> {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final List<Hash> hashes;\n+\n+  private GetPooledTransactionsFromPeerTask(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    super(ethContext, EthPV65.GET_POOLED_TRANSACTIONS, metricsSystem);\n+    this.hashes = new ArrayList<>(hashes);\n+  }\n+\n+  public static GetPooledTransactionsFromPeerTask forHashes(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    return new GetPooledTransactionsFromPeerTask(ethContext, hashes, metricsSystem);\n+  }\n+\n+  @Override\n+  protected PendingPeerRequest sendRequest() {\n+    return sendRequestToPeer(\n+        peer -> {\n+          LOG.debug(\"Requesting {} transaction pool entries from peer {}.\", hashes.size(), peer);\n+          return peer.getPooledTransactions(hashes);\n+        },\n+        0);\n+  }\n+\n+  @Override\n+  protected Optional<Map<Hash, Transaction>> processResponse(\n+      final boolean streamClosed, final MessageData message, final EthPeer peer) {\n+    if (streamClosed) {\n+      // We don't record this as a useless response because it's impossible to know if a peer has\n+      // the data we're requesting.\n+      return Optional.of(emptyMap());\n+    }\n+    final PooledTransactionsMessage pooledTransactionsMessage =\n+        PooledTransactionsMessage.readFrom(message);\n+    final List<Transaction> tx = pooledTransactionsMessage.transactions();\n+    if (tx.size() > hashes.size()) {\n+      // Can't be the response to our request\n+      return Optional.empty();\n+    }\n+    return mapNodeDataByHash(tx);\n+  }\n+\n+  private Optional<Map<Hash, Transaction>> mapNodeDataByHash(final List<Transaction> transactions) {", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyODk4NA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400628984", "bodyText": "I can simplify to that, sure.", "author": "atoulme", "createdAt": "2020-03-31T03:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\nindex 407da11e3..cf8825f95 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java\n\n@@ -14,7 +14,7 @@\n  */\n package org.hyperledger.besu.ethereum.eth.manager.task;\n \n-import static java.util.Collections.emptyMap;\n+import static java.util.Collections.emptyList;\n \n import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.ethereum.core.Transaction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzA4MQ==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400297081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final int LIMIT = 1048576;\n          \n          \n            \n              static final int LIMIT = 1024 * 1024;\n          \n      \n    \n    \n  \n\nMakes it clearer it is 1MiB.", "author": "shemnon", "createdAt": "2020-03-30T15:45:44Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\nindex d34570c0c..cbe8b542d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\n@@ -24,7 +24,6 @@ import org.apache.tuweni.bytes.Bytes;\n \n public final class LimitedNewPooledTransactionHashesMessages {\n \n-  static final int LIMIT = 1048576;\n   static final int MAX_COUNT = 4096;\n \n   private final NewPooledTransactionHashesMessage transactionsMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTcxMg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400301712", "bodyText": "readability: this should be transactionHash, txHash, or hash.  It's not the whole transaction.", "author": "shemnon", "createdAt": "2020-03-30T15:52:00Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();\n+    final BytesValueRLPOutput message = new BytesValueRLPOutput();\n+    int messageSize = 0;\n+    int count = 0;\n+    message.startList();\n+    for (final Hash transaction : hashes) {", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNDQ3MQ==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400624471", "bodyText": "ok changed.", "author": "atoulme", "createdAt": "2020-03-31T03:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\nindex d34570c0c..cbe8b542d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\n@@ -24,7 +24,6 @@ import org.apache.tuweni.bytes.Bytes;\n \n public final class LimitedNewPooledTransactionHashesMessages {\n \n-  static final int LIMIT = 1048576;\n   static final int MAX_COUNT = 4096;\n \n   private final NewPooledTransactionHashesMessage transactionsMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMjQyMg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400302422", "bodyText": "Instead of breaking when done and returning just one message I think things would be cleaner if this method returned a List and we created a new message each time we went over the limit and then returned all the messages.  Then in PendingTransacitonMessageSender we won't need to iteratively clear out the list, and we won't need to track includedTransactions", "author": "shemnon", "createdAt": "2020-03-30T15:52:56Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzYyNg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400623626", "bodyText": "This is a straight copy of LimitedTransactions.", "author": "atoulme", "createdAt": "2020-03-31T03:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzNDg3MA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400634870", "bodyText": "I mean, it's also not too expensive to keep track of includedTransactions. Agree it's clumsy, but I'd do this in a separate ticket and fix it for both classes.", "author": "atoulme", "createdAt": "2020-03-31T04:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMjQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\nindex d34570c0c..cbe8b542d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\n@@ -24,7 +24,6 @@ import org.apache.tuweni.bytes.Bytes;\n \n public final class LimitedNewPooledTransactionHashesMessages {\n \n-  static final int LIMIT = 1048576;\n   static final int MAX_COUNT = 4096;\n \n   private final NewPooledTransactionHashesMessage transactionsMessage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDQ2Nw==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400304467", "bodyText": "With this logic we will always produce messages just larger than the limit.  Perhaps we check the limits earlier in the loop, and if we would exceed the limit with the new data we then produce a new message and put it in there.", "author": "shemnon", "createdAt": "2020-03-30T15:55:42Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();\n+    final BytesValueRLPOutput message = new BytesValueRLPOutput();\n+    int messageSize = 0;\n+    int count = 0;\n+    message.startList();\n+    for (final Hash transaction : hashes) {\n+      final BytesValueRLPOutput encodedTransaction = new BytesValueRLPOutput();\n+      encodedTransaction.writeBytes(transaction);\n+      Bytes encodedBytes = encodedTransaction.encoded();\n+      // Break if individual transaction size exceeds limit\n+      if (encodedBytes.size() > LIMIT && (messageSize != 0)) {\n+        break;\n+      }\n+      message.writeRLPUnsafe(encodedBytes);\n+      includedTransactions.add(transaction);\n+      // Check if last transaction to add to the message\n+      messageSize += encodedBytes.size();\n+      count++;\n+      if (messageSize > LIMIT || count >= MAX_COUNT) {", "originalCommit": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYzMzcyNg==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400633726", "bodyText": "it's actually a little dumb of me. Each hash is 32 bytes, and the max is a MB. But 4096 hashes is less than a megabyte, even with RLP separators. So I could just go by count of hashes.", "author": "atoulme", "createdAt": "2020-03-31T04:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b2f5238459d4584cf14a85a7502a812f94feb17a", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\nindex d34570c0c..cbe8b542d 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\n@@ -24,7 +24,6 @@ import org.apache.tuweni.bytes.Bytes;\n \n public final class LimitedNewPooledTransactionHashesMessages {\n \n-  static final int LIMIT = 1048576;\n   static final int MAX_COUNT = 4096;\n \n   private final NewPooledTransactionHashesMessage transactionsMessage;\n"}}, {"oid": "b2f5238459d4584cf14a85a7502a812f94feb17a", "url": "https://github.com/hyperledger/besu/commit/b2f5238459d4584cf14a85a7502a812f94feb17a", "message": "code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-03-31T04:30:00Z", "type": "forcePushed"}, {"oid": "7f6bbd982bd8024aaf968215bd000a9e5fc22152", "url": "https://github.com/hyperledger/besu/commit/7f6bbd982bd8024aaf968215bd000a9e5fc22152", "message": "Update ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\nCo-Authored-By: Danno Ferrin <danno.ferrin@shemnon.com>\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:12:48Z", "type": "commit"}, {"oid": "6bc510c77b1dd715e21d306ebbf2a75dc1798ab3", "url": "https://github.com/hyperledger/besu/commit/6bc510c77b1dd715e21d306ebbf2a75dc1798ab3", "message": "code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:12:58Z", "type": "commit"}, {"oid": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "url": "https://github.com/hyperledger/besu/commit/5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "message": "Code review changes\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:12:58Z", "type": "commit"}, {"oid": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "url": "https://github.com/hyperledger/besu/commit/5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "message": "Code review changes\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:12:58Z", "type": "forcePushed"}, {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "url": "https://github.com/hyperledger/besu/commit/3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "message": "Reviewing diffs\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:32:22Z", "type": "commit"}, {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "url": "https://github.com/hyperledger/besu/commit/3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "message": "Reviewing diffs\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T06:32:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODkzMA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401778930", "bodyText": "This also makes localTransactionHashesAdded synced when all we care about is newPooledHashes. Perhaps just synchronized (newPooledHashes) { ...  around the add and remove?", "author": "shemnon", "createdAt": "2020-04-01T17:16:04Z", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "diffHunk": "@@ -137,7 +137,7 @@ public boolean addRemoteTransaction(final Transaction transaction) {\n     return transactionAdded;\n   }\n \n-  boolean addTransactionHash(final Hash transactionHash) {\n+  synchronized boolean addTransactionHash(final Hash transactionHash) {", "originalCommit": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4Mjk1MA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401782950", "bodyText": "sure thing.", "author": "atoulme", "createdAt": "2020-04-01T17:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5MzMyOA==", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401793328", "bodyText": "done", "author": "atoulme", "createdAt": "2020-04-01T17:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "2152207598bdcefc1df9f50fad2bdc3903f9d650", "chunk": "diff --git a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java\nindex 5cbac4b26..21a0b96cf 100644\n--- a/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java\n+++ b/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java\n\n@@ -137,8 +137,11 @@ public class PendingTransactions {\n     return transactionAdded;\n   }\n \n-  synchronized boolean addTransactionHash(final Hash transactionHash) {\n-    boolean hashAdded = newPooledHashes.add(transactionHash);\n+  boolean addTransactionHash(final Hash transactionHash) {\n+    boolean hashAdded;\n+    synchronized (newPooledHashes) {\n+      hashAdded = newPooledHashes.add(transactionHash);\n+    }\n     if (hashAdded) {\n       localTransactionHashesAddedCounter.inc();\n     }\n"}}, {"oid": "2152207598bdcefc1df9f50fad2bdc3903f9d650", "url": "https://github.com/hyperledger/besu/commit/2152207598bdcefc1df9f50fad2bdc3903f9d650", "message": "smaller synchronized blocks\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-04-01T17:35:54Z", "type": "commit"}, {"oid": "acb08a8bd9c000ddd4641fdd5384bb38601b5daa", "url": "https://github.com/hyperledger/besu/commit/acb08a8bd9c000ddd4641fdd5384bb38601b5daa", "message": "Merge branch 'master' into eth65", "committedDate": "2020-04-01T17:39:09Z", "type": "commit"}]}