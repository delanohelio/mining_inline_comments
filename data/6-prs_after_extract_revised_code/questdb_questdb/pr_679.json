{"pr_number": 679, "pr_title": "Kafka jdbc fix", "pr_createdAt": "2020-10-29T14:01:36Z", "pr_url": "https://github.com/questdb/questdb/pull/679", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTc0NQ==", "url": "https://github.com/questdb/questdb/pull/679#discussion_r514311745", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // against metadat of the slave the context is assigned to\n          \n          \n            \n                                    // against metadata of the slave the context is assigned to", "author": "mpsq", "createdAt": "2020-10-29T14:40:45Z", "path": "core/src/main/java/io/questdb/griffin/SqlOptimiser.java", "diffHunk": "@@ -443,18 +443,30 @@ private void analyseEquals(QueryModel parent, ExpressionNode node) throws SqlExc\n                         // single table reference\n                         jc.slaveIndex = lhi;\n                         addWhereNode(parent, lhi, node);\n-                    } else {\n+                    } else if (lhi < rhi){\n+                        // we must align \"a\" nodes with slave index\n+                        // compiler will always be checking \"a\" columns\n+                        // against metadat of the slave the context is assigned to", "originalCommit": "fc7e29325bcbf42ed2810a5c3ad62723c85165e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9d49ecaa2ae3bba7f3dd49b5db69cf2c4465233", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\nindex f48f6635a..c86d34191 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n\n@@ -443,30 +443,18 @@ class SqlOptimiser {\n                         // single table reference\n                         jc.slaveIndex = lhi;\n                         addWhereNode(parent, lhi, node);\n-                    } else if (lhi < rhi){\n-                        // we must align \"a\" nodes with slave index\n-                        // compiler will always be checking \"a\" columns\n-                        // against metadat of the slave the context is assigned to\n+                    } else {\n                         jc.aNodes.add(node.lhs);\n                         jc.bNodes.add(node.rhs);\n                         jc.aNames.add(literalCollectorANames.getQuick(0));\n                         jc.bNames.add(literalCollectorBNames.getQuick(0));\n                         jc.aIndexes.add(lhi);\n                         jc.bIndexes.add(rhi);\n-                        jc.slaveIndex = rhi;\n-                        jc.parents.add(lhi);\n-                        linkDependencies(parent, lhi, rhi);\n-                    } else {\n-                        jc.aNodes.add(node.rhs);\n-                        jc.bNodes.add(node.lhs);\n-                        jc.aNames.add(literalCollectorBNames.getQuick(0));\n-                        jc.bNames.add(literalCollectorANames.getQuick(0));\n-                        jc.aIndexes.add(rhi);\n-                        jc.bIndexes.add(lhi);\n-                        jc.slaveIndex = lhi;\n-                        jc.parents.add(rhi);\n-                        linkDependencies(parent, rhi, lhi);\n-\n+                        int max = Math.max(lhi, rhi);\n+                        int min = Math.min(lhi, rhi);\n+                        jc.slaveIndex = max;\n+                        jc.parents.add(min);\n+                        linkDependencies(parent, min, max);\n                     }\n                     addJoinContext(parent, jc);\n                 } else if (bSize == 0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzU5OQ==", "url": "https://github.com/questdb/questdb/pull/679#discussion_r514313599", "bodyText": "remove comment?", "author": "mpsq", "createdAt": "2020-10-29T14:43:00Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java", "diffHunk": "@@ -261,6 +261,8 @@ private Function getIfElseFunction(\n         return CaseCommon.getCaseFunction(position, returnType, picker, argsToPoke);\n     }\n \n+//    private", "originalCommit": "fc7e29325bcbf42ed2810a5c3ad62723c85165e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9d49ecaa2ae3bba7f3dd49b5db69cf2c4465233", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\nindex 0e7424fdb..94e379afa 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\n\n@@ -261,8 +261,6 @@ public class SwitchFunctionFactory implements FunctionFactory {\n         return CaseCommon.getCaseFunction(position, returnType, picker, argsToPoke);\n     }\n \n-//    private\n-\n     private Function getLongKeyedFunction(\n             ObjList<Function> args,\n             int position,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzY4OA==", "url": "https://github.com/questdb/questdb/pull/679#discussion_r514313688", "bodyText": "is that change intended?", "author": "mpsq", "createdAt": "2020-10-29T14:43:07Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java", "diffHunk": "@@ -240,9 +240,9 @@ private Function getIfElseFunction(\n                 throw SqlException.$(args.getQuick(3).getPosition(), \"duplicate branch\");\n             }\n \n-            if (elseBranch != null) {\n-                throw SqlException.$(elseBranch.getPosition(), \"duplicate boolean values\");\n-            }\n+//            if (elseBranch != null) {\n+//                throw SqlException.$(elseBranch.getPosition(), \"duplicate boolean values\");\n+//            }", "originalCommit": "fc7e29325bcbf42ed2810a5c3ad62723c85165e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NDMxNg==", "url": "https://github.com/questdb/questdb/pull/679#discussion_r514344316", "bodyText": "Yep, it is. Although we have two-state boolean, PG have three-state one and they have syntax such as\ncase x\n  when true then 1\n  when false then 0\n  else null\nend\nthat we have to support.", "author": "bluestreak01", "createdAt": "2020-10-29T15:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMzY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "f9d49ecaa2ae3bba7f3dd49b5db69cf2c4465233", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\nindex 0e7424fdb..94e379afa 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/conditional/SwitchFunctionFactory.java\n\n@@ -240,9 +240,9 @@ public class SwitchFunctionFactory implements FunctionFactory {\n                 throw SqlException.$(args.getQuick(3).getPosition(), \"duplicate branch\");\n             }\n \n-//            if (elseBranch != null) {\n-//                throw SqlException.$(elseBranch.getPosition(), \"duplicate boolean values\");\n-//            }\n+            if (elseBranch != null) {\n+                throw SqlException.$(elseBranch.getPosition(), \"duplicate boolean values\");\n+            }\n \n             if (a) {\n                 picker = record -> keyFunction.getBool(record) ? branchA : branchB;\n"}}, {"oid": "f9d49ecaa2ae3bba7f3dd49b5db69cf2c4465233", "url": "https://github.com/questdb/questdb/commit/f9d49ecaa2ae3bba7f3dd49b5db69cf2c4465233", "message": "chore(griffin): kafka jdbc wip", "committedDate": "2020-10-30T07:48:41Z", "type": "commit"}, {"oid": "0bef4205844ceac197ace4b37a244c201d0c45b6", "url": "https://github.com/questdb/questdb/commit/0bef4205844ceac197ace4b37a244c201d0c45b6", "message": "fix(kafka): fixed all syntax issues with metadata SQL", "committedDate": "2020-10-30T07:48:41Z", "type": "commit"}, {"oid": "f53aad0ef75480d5e4ec3a5464346b916dfe6f53", "url": "https://github.com/questdb/questdb/commit/f53aad0ef75480d5e4ec3a5464346b916dfe6f53", "message": "chore(kafka): introduced \"E'str'\", fixed stack overflow in joins, homogenized PG metadata catalogue", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "fee830ec12fdf4cf1d2accdeaa7ce296a53c8265", "url": "https://github.com/questdb/questdb/commit/fee830ec12fdf4cf1d2accdeaa7ce296a53c8265", "message": "chore(kafka): prepare for parsing array dereference", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "55fb314489c94e992a9c9b9aa96912a83d02ccad", "url": "https://github.com/questdb/questdb/commit/55fb314489c94e992a9c9b9aa96912a83d02ccad", "message": "feat(griffin): support for array dereference in expression parser", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "6724bce632fb1639bcc56ac04df0df920ed3e7cb", "url": "https://github.com/questdb/questdb/commit/6724bce632fb1639bcc56ac04df0df920ed3e7cb", "message": "fix(griffin) - support postgres types for kafka", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "508852e7a7ddeab6df1dd7675c5320bcc2ffb745", "url": "https://github.com/questdb/questdb/commit/508852e7a7ddeab6df1dd7675c5320bcc2ffb745", "message": "feat(griffin): a lot of things done, please read description\n\n- refactored function cache to parse function signature only once and support array types\n- refactored function parser to use function descriptor instead of parsing string again\n- refactored function parser to match array types correctly\n- refactored function parser not to create constants prematurely but create constant once against to level function. This leads to fewer allocations\n- added generic StrArrayFunction and introduced [] operator for dereferencing string arrays\n- created \"current_schemas\" function that is required for PG metadata\n- fixed memory leak in PGJobContext\n- created and tested \"replace(string, from, to)\" function for string arguments. It is required by PG metadata queries. Added tests", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "95100932b885c16f6b5961be5066db4c6821b82f", "url": "https://github.com/questdb/questdb/commit/95100932b885c16f6b5961be5066db4c6821b82f", "message": "feat(griffin): implemented \"function call\" dereference, e.g. f().x in ExpressionParser", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "5e6965863e558195721412ac7fb266ab1ae8a366", "url": "https://github.com/questdb/questdb/commit/5e6965863e558195721412ac7fb266ab1ae8a366", "message": "Update core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n\nCo-authored-by: M\u00e9ril <meril.pilon@gmail.com>", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "5efb0c0577fd0a8da51986ceea514e654188682e", "url": "https://github.com/questdb/questdb/commit/5efb0c0577fd0a8da51986ceea514e654188682e", "message": "feat(griffin): added ability to execute SQL in select clause (doesn't make sense? read details)\n\nPostgresSQL metadata SQLs sometimes look like:\n\n```sql\nselect a, (select a,n,c from x).n, c from y\n```\n\nWe now support this sort of query and resolve '.n' to column name in the cursor.", "committedDate": "2020-10-30T07:48:42Z", "type": "commit"}, {"oid": "be6dbfaae34489e0b54fe1878e9b3ba16859509d", "url": "https://github.com/questdb/questdb/commit/be6dbfaae34489e0b54fe1878e9b3ba16859509d", "message": "fix: fixed tests broken by new JDK release", "committedDate": "2020-10-30T08:20:46Z", "type": "commit"}, {"oid": "be6dbfaae34489e0b54fe1878e9b3ba16859509d", "url": "https://github.com/questdb/questdb/commit/be6dbfaae34489e0b54fe1878e9b3ba16859509d", "message": "fix: fixed tests broken by new JDK release", "committedDate": "2020-10-30T08:20:46Z", "type": "forcePushed"}, {"oid": "0a80ac42889b683f13dce2a0af60b4da60916c45", "url": "https://github.com/questdb/questdb/commit/0a80ac42889b683f13dce2a0af60b4da60916c45", "message": "fix: fixed the underlying issue, which caused timezone tests to break", "committedDate": "2020-10-30T08:51:38Z", "type": "commit"}, {"oid": "1d412fc354477446f89ab2908874b860c2fd0abc", "url": "https://github.com/questdb/questdb/commit/1d412fc354477446f89ab2908874b860c2fd0abc", "message": "fix: moved timezone1 tests to PST, EST still changed between JDKs", "committedDate": "2020-10-30T09:18:39Z", "type": "commit"}]}