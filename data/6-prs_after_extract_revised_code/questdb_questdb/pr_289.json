{"pr_number": 289, "pr_title": "fix(griffin) - order by on column with function throws exception #288", "pr_createdAt": "2020-05-15T12:00:01Z", "pr_url": "https://github.com/questdb/questdb/pull/289", "timeline": [{"oid": "0ac5f596287f6fb868ec06a84a52cffce459109a", "url": "https://github.com/questdb/questdb/commit/0ac5f596287f6fb868ec06a84a52cffce459109a", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-15T11:59:27Z", "type": "commit"}, {"oid": "2a4bf314a287554d1f39dfde359336c054b5485d", "url": "https://github.com/questdb/questdb/commit/2a4bf314a287554d1f39dfde359336c054b5485d", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-17T20:50:18Z", "type": "commit"}, {"oid": "c0dfc2fef74439cf7e10b0617912e7740660b68c", "url": "https://github.com/questdb/questdb/commit/c0dfc2fef74439cf7e10b0617912e7740660b68c", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-17T21:30:31Z", "type": "commit"}, {"oid": "3ba40e21d4c18adf3b74d0e138a46ca77feb05fb", "url": "https://github.com/questdb/questdb/commit/3ba40e21d4c18adf3b74d0e138a46ca77feb05fb", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T08:22:58Z", "type": "commit"}, {"oid": "ddcd27680f1db694ba3c9171d77bd595ccea7103", "url": "https://github.com/questdb/questdb/commit/ddcd27680f1db694ba3c9171d77bd595ccea7103", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T09:06:32Z", "type": "commit"}, {"oid": "2bd71959d406e39a75f7576a54cf36021732cc7c", "url": "https://github.com/questdb/questdb/commit/2bd71959d406e39a75f7576a54cf36021732cc7c", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T09:36:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjI1Ng==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426506256", "bodyText": "We need more tests.\nWhat happens here is what I've written about in email - if order by has non-literal columns, advice must be empty. We must not give selective advice to the sub=query", "author": "bluestreak01", "createdAt": "2020-05-18T09:53:04Z", "path": "core/src/main/java/io/questdb/griffin/SqlOptimiser.java", "diffHunk": "@@ -1163,10 +1163,12 @@ private int getIndexOfTableForColumn(QueryModel model, CharSequence column, int\n             return orderByAdvice;\n         }\n \n-        CharSequenceObjHashMap<CharSequence> map = model.getAliasToColumnNameMap();\n+        CharSequenceObjHashMap<QueryColumn> map = model.getAliasToColumnMap();\n         for (int i = 0; i < len; i++) {\n-            orderByAdvice.add(nextLiteral(map.get(orderBy.getQuick(i).token)));\n-\n+            QueryColumn queryColumn = map.get(orderBy.getQuick(i).token);", "originalCommit": "2bd71959d406e39a75f7576a54cf36021732cc7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef04499769708545509a313af03fd43f2be8b614", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\nindex 7388b000e..bcb85b71c 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n\n@@ -1164,12 +1164,19 @@ class SqlOptimiser {\n         }\n \n         CharSequenceObjHashMap<QueryColumn> map = model.getAliasToColumnMap();\n+        boolean clearOrderByAdvice = false;\n         for (int i = 0; i < len; i++) {\n             QueryColumn queryColumn = map.get(orderBy.getQuick(i).token);\n             if (queryColumn.getAst().type == ExpressionNode.LITERAL) {\n                 orderByAdvice.add(nextLiteral(queryColumn.getAst().token));\n+            } else {\n+                clearOrderByAdvice = true;\n+                break;\n             }\n         }\n+        if (clearOrderByAdvice) {\n+            orderByAdvice.clear();\n+        }\n         return orderByAdvice;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzYwMw==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426507603", "bodyText": "we should probably keep that - advice must not have unresolvable columns", "author": "bluestreak01", "createdAt": "2020-05-18T09:55:14Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1870,7 +1870,6 @@ private RecordCursorFactory generateTableQuery(\n                         // we can only deal with 'order by symbol, timestamp' at best\n                         // skip this optimisation if order by is more extensive\n                         final int columnIndex = metadata.getColumnIndexQuiet(model.getOrderByAdvice().getQuick(0).token);\n-                        assert columnIndex > -1;", "originalCommit": "2bd71959d406e39a75f7576a54cf36021732cc7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODY1Nw==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426658657", "bodyText": "done", "author": "jaugsburger", "createdAt": "2020-05-18T14:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "1082c056446b079864554b2d0a41bb97fa49ee14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\nindex a2e062be9..0e97ad877 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n\n@@ -1870,6 +1881,7 @@ public class SqlCodeGenerator implements Mutable {\n                         // we can only deal with 'order by symbol, timestamp' at best\n                         // skip this optimisation if order by is more extensive\n                         final int columnIndex = metadata.getColumnIndexQuiet(model.getOrderByAdvice().getQuick(0).token);\n+                        assert columnIndex > -1;\n \n                         // this is our kind of column\n                         if (metadata.isColumnIndexed(columnIndex)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzc5MQ==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426507791", "bodyText": "we probably do not need these methods anymore?", "author": "bluestreak01", "createdAt": "2020-05-18T09:55:32Z", "path": "core/src/main/java/io/questdb/griffin/SqlKeywords.java", "diffHunk": "@@ -642,4 +642,37 @@ public static boolean isColumnKeyword(CharSequence tok) {\n                 && (tok.charAt(i++) | 32) == 'm'\n                 && (tok.charAt(i) | 32) == 'n';\n     }\n+\n+    public static boolean isMaxKeyword(CharSequence tok) {", "originalCommit": "2bd71959d406e39a75f7576a54cf36021732cc7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODc2NQ==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426658765", "bodyText": "done", "author": "jaugsburger", "createdAt": "2020-05-18T14:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1082c056446b079864554b2d0a41bb97fa49ee14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlKeywords.java b/core/src/main/java/io/questdb/griffin/SqlKeywords.java\nindex 794e3ca32..0ef1d4a4e 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlKeywords.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlKeywords.java\n\n@@ -642,37 +642,4 @@ public class SqlKeywords {\n                 && (tok.charAt(i++) | 32) == 'm'\n                 && (tok.charAt(i) | 32) == 'n';\n     }\n-\n-    public static boolean isMaxKeyword(CharSequence tok) {\n-        if (tok.length() != 3) {\n-            return false;\n-        }\n-\n-        int i = 0;\n-        return (tok.charAt(i++) | 32) == 'm'\n-                && (tok.charAt(i++) | 32) == 'a'\n-                && (tok.charAt(i) | 32) == 'x';\n-    }\n-\n-    public static boolean isMinKeyword(CharSequence tok) {\n-        if (tok.length() != 3) {\n-            return false;\n-        }\n-\n-        int i = 0;\n-        return (tok.charAt(i++) | 32) == 'm'\n-                && (tok.charAt(i++) | 32) == 'i'\n-                && (tok.charAt(i) | 32) == 'n';\n-    }\n-\n-    public static boolean isAvgKeyword(CharSequence tok) {\n-        if (tok.length() != 3) {\n-            return false;\n-        }\n-\n-        int i = 0;\n-        return (tok.charAt(i++) | 32) == 'a'\n-                && (tok.charAt(i++) | 32) == 'v'\n-                && (tok.charAt(i) | 32) == 'g';\n-    }\n }\n"}}, {"oid": "45bdca092e1b0da4a9b964e92067911af6fa87c1", "url": "https://github.com/questdb/questdb/commit/45bdca092e1b0da4a9b964e92067911af6fa87c1", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T10:22:40Z", "type": "commit"}, {"oid": "636049cc78edd47b84498e977ffb05e32decc125", "url": "https://github.com/questdb/questdb/commit/636049cc78edd47b84498e977ffb05e32decc125", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T12:04:47Z", "type": "commit"}, {"oid": "2bbe6875068da5788f546296c55ce4f5f793f293", "url": "https://github.com/questdb/questdb/commit/2bbe6875068da5788f546296c55ce4f5f793f293", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T13:10:45Z", "type": "commit"}, {"oid": "1082c056446b079864554b2d0a41bb97fa49ee14", "url": "https://github.com/questdb/questdb/commit/1082c056446b079864554b2d0a41bb97fa49ee14", "message": "fix(griffin) - order by query throws exception instaed of returning invalid column message #284", "committedDate": "2020-05-18T13:44:11Z", "type": "commit"}, {"oid": "ef04499769708545509a313af03fd43f2be8b614", "url": "https://github.com/questdb/questdb/commit/ef04499769708545509a313af03fd43f2be8b614", "message": "fix(griffin) - order by query throws exception instaed of returning invalid column message #284", "committedDate": "2020-05-18T14:14:39Z", "type": "commit"}, {"oid": "bf33c91db455f6a56e842c6d8a1634bfc456bd1a", "url": "https://github.com/questdb/questdb/commit/bf33c91db455f6a56e842c6d8a1634bfc456bd1a", "message": "fix(griffin) - order by query throws exception instaed of returning invalid column message #284", "committedDate": "2020-05-18T14:38:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3NzkzMQ==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426677931", "bodyText": "lets do in-place clear() and break", "author": "bluestreak01", "createdAt": "2020-05-18T14:43:01Z", "path": "core/src/main/java/io/questdb/griffin/SqlOptimiser.java", "diffHunk": "@@ -1163,10 +1163,19 @@ private int getIndexOfTableForColumn(QueryModel model, CharSequence column, int\n             return orderByAdvice;\n         }\n \n-        CharSequenceObjHashMap<CharSequence> map = model.getAliasToColumnNameMap();\n+        CharSequenceObjHashMap<QueryColumn> map = model.getAliasToColumnMap();\n+        boolean clearOrderByAdvice = false;\n         for (int i = 0; i < len; i++) {\n-            orderByAdvice.add(nextLiteral(map.get(orderBy.getQuick(i).token)));\n-\n+            QueryColumn queryColumn = map.get(orderBy.getQuick(i).token);\n+            if (queryColumn.getAst().type == ExpressionNode.LITERAL) {\n+                orderByAdvice.add(nextLiteral(queryColumn.getAst().token));\n+            } else {\n+                clearOrderByAdvice = true;", "originalCommit": "bf33c91db455f6a56e842c6d8a1634bfc456bd1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6dc2bf8fe4f064946260b4c7ec3a4a281a24db2", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\nindex bcb85b71c..a72ea4d02 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlOptimiser.java\n\n@@ -1164,19 +1164,15 @@ class SqlOptimiser {\n         }\n \n         CharSequenceObjHashMap<QueryColumn> map = model.getAliasToColumnMap();\n-        boolean clearOrderByAdvice = false;\n         for (int i = 0; i < len; i++) {\n             QueryColumn queryColumn = map.get(orderBy.getQuick(i).token);\n             if (queryColumn.getAst().type == ExpressionNode.LITERAL) {\n                 orderByAdvice.add(nextLiteral(queryColumn.getAst().token));\n             } else {\n-                clearOrderByAdvice = true;\n+                orderByAdvice.clear();\n                 break;\n             }\n         }\n-        if (clearOrderByAdvice) {\n-            orderByAdvice.clear();\n-        }\n         return orderByAdvice;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3ODk5Ng==", "url": "https://github.com/questdb/questdb/pull/289#discussion_r426678996", "bodyText": "Perhaps this one in place too, i feel it would be less confusing. This is after looking where the boolean is being set", "author": "bluestreak01", "createdAt": "2020-05-18T14:44:35Z", "path": "core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java", "diffHunk": "@@ -1839,13 +1845,18 @@ private RecordCursorFactory generateTableQuery(\n                     }\n \n                     if (orderByKeyColumn) {\n+                        metadata.setTimestampIndex(-1);\n                         if (model.getOrderByDirectionAdvice().getQuick(0) == QueryModel.ORDER_DIRECTION_ASCENDING) {\n                             symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR);\n                         } else {\n                             symbolValueList.sort(Chars.CHAR_SEQUENCE_COMPARATOR_DESC);\n                         }\n                     }\n \n+                    if (clearTimestampIndex) {", "originalCommit": "bf33c91db455f6a56e842c6d8a1634bfc456bd1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6dc2bf8fe4f064946260b4c7ec3a4a281a24db2", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\nindex 0e97ad877..cc937cfa3 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCodeGenerator.java\n\n@@ -1853,10 +1848,6 @@ public class SqlCodeGenerator implements Mutable {\n                         }\n                     }\n \n-                    if (clearTimestampIndex) {\n-                        metadata.setTimestampIndex(-1);\n-                    }\n-\n                     return new FilterOnValuesRecordCursorFactory(\n                             metadata,\n                             dfcFactory,\n"}}, {"oid": "f6dc2bf8fe4f064946260b4c7ec3a4a281a24db2", "url": "https://github.com/questdb/questdb/commit/f6dc2bf8fe4f064946260b4c7ec3a4a281a24db2", "message": "fix(griffin) - order by on column with function throws exception #288", "committedDate": "2020-05-18T14:55:59Z", "type": "commit"}]}