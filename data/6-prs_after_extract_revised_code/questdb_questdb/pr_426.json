{"pr_number": 426, "pr_title": "feature(griffin): alter system lock/unlock writer", "pr_createdAt": "2020-06-22T14:31:15Z", "pr_url": "https://github.com/questdb/questdb/pull/426", "timeline": [{"oid": "f754a2c5528126c4ab820184ae8d735746aa07ee", "url": "https://github.com/questdb/questdb/commit/f754a2c5528126c4ab820184ae8d735746aa07ee", "message": "feature(griffin): alter system lock/unlock writer", "committedDate": "2020-06-22T14:21:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMTgxNQ==", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443731815", "bodyText": "I don't think we need immutable char sequence to lock/unlock pool item,", "author": "bluestreak01", "createdAt": "2020-06-22T17:56:28Z", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {\n+                tok = expectToken(lexer, \"'writer'\");\n+\n+                if (SqlKeywords.isWriterKeyword(tok)) {\n+                    final int tableNamePosition = lexer.getPosition();\n+                    tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+                    tableExistsOrFail(tableNamePosition, tok, executionContext);\n+                    CharSequence tableName = GenericLexer.immutableOf(tok);", "originalCommit": "f754a2c5528126c4ab820184ae8d735746aa07ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22f371e6349253cb8e33f601d70462b94376304c", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCompiler.java b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\nindex e1ca47bb1..8159e15f2 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n\n@@ -674,6 +674,30 @@ public class SqlCompiler implements Closeable {\n         return tok;\n     }\n \n+    private void alterSystemLockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            if (!engine.lockWriter(tok)) {\n+                throw SqlException.$(tableNamePosition, \"could not lock, busy [table=`\").put(tok).put(\"`]\");\n+            }\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n+    private void alterSystemUnlockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            engine.unlockWriter(tok);\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n         tok = expectToken(lexer, \"'table' or 'system'\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMjgxNQ==", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443732815", "bodyText": "the lock operation returns success flag, this needs to be re-interpreted into SqlException", "author": "bluestreak01", "createdAt": "2020-06-22T17:58:11Z", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {\n+                tok = expectToken(lexer, \"'writer'\");\n+\n+                if (SqlKeywords.isWriterKeyword(tok)) {\n+                    final int tableNamePosition = lexer.getPosition();\n+                    tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+                    tableExistsOrFail(tableNamePosition, tok, executionContext);\n+                    CharSequence tableName = GenericLexer.immutableOf(tok);\n+                    engine.lockWriter(tableName);", "originalCommit": "f754a2c5528126c4ab820184ae8d735746aa07ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22f371e6349253cb8e33f601d70462b94376304c", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCompiler.java b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\nindex e1ca47bb1..8159e15f2 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n\n@@ -674,6 +674,30 @@ public class SqlCompiler implements Closeable {\n         return tok;\n     }\n \n+    private void alterSystemLockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            if (!engine.lockWriter(tok)) {\n+                throw SqlException.$(tableNamePosition, \"could not lock, busy [table=`\").put(tok).put(\"`]\");\n+            }\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n+    private void alterSystemUnlockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            engine.unlockWriter(tok);\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n         tok = expectToken(lexer, \"'table' or 'system'\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzczNQ==", "url": "https://github.com/questdb/questdb/pull/426#discussion_r443733735", "bodyText": "although lock should not throw CairoException right now, it is still best to handle it the same way other 'alter' operations handle this.", "author": "bluestreak01", "createdAt": "2020-06-22T17:59:53Z", "path": "core/src/main/java/io/questdb/griffin/SqlCompiler.java", "diffHunk": "@@ -676,68 +676,97 @@ private static CharSequence expectToken(GenericLexer lexer, CharSequence expecte\n \n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n-        expectKeyword(lexer, \"table\");\n+        tok = expectToken(lexer, \"'table' or 'system'\");\n \n-        final int tableNamePosition = lexer.getPosition();\n+        if (SqlKeywords.isTableKeyword(tok)) {\n+            final int tableNamePosition = lexer.getPosition();\n \n-        tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+            tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n \n-        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+            tableExistsOrFail(tableNamePosition, tok, executionContext);\n \n-        CharSequence tableName = GenericLexer.immutableOf(tok);\n-        try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n-\n-            tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n-\n-            if (SqlKeywords.isAddKeyword(tok)) {\n-                alterTableAddColumn(tableNamePosition, writer);\n-            } else if (SqlKeywords.isDropKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column' or 'partition'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableDropColumn(tableNamePosition, writer);\n-                } else if (SqlKeywords.isPartitionKeyword(tok)) {\n-                    alterTableDropPartition(writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n-                }\n-            } else if (SqlKeywords.isRenameKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    alterTableRenameColumn(tableNamePosition, writer);\n-                } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n-                }\n-            } else if (SqlKeywords.isAlterKeyword(tok)) {\n-                tok = expectToken(lexer, \"'column'\");\n-                if (SqlKeywords.isColumnKeyword(tok)) {\n-                    final int columnNameNamePosition = lexer.getPosition();\n-                    tok = expectToken(lexer, \"column name\");\n-                    final CharSequence columnName = GenericLexer.immutableOf(tok);\n-                    tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n-                    if (SqlKeywords.isAddKeyword(tok)) {\n-                        expectKeyword(lexer, \"index\");\n-                        alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n+            CharSequence tableName = GenericLexer.immutableOf(tok);\n+            try (TableWriter writer = engine.getWriter(executionContext.getCairoSecurityContext(), tableName)) {\n+\n+                tok = expectToken(lexer, \"'add', 'alter' or 'drop'\");\n+\n+                if (SqlKeywords.isAddKeyword(tok)) {\n+                    alterTableAddColumn(tableNamePosition, writer);\n+                } else if (SqlKeywords.isDropKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column' or 'partition'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableDropColumn(tableNamePosition, writer);\n+                    } else if (SqlKeywords.isPartitionKeyword(tok)) {\n+                        alterTableDropPartition(writer);\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    }\n+                } else if (SqlKeywords.isRenameKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        alterTableRenameColumn(tableNamePosition, writer);\n                     } else {\n-                        if (SqlKeywords.isCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n-                        } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n-                            alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' expected\");\n+                    }\n+                } else if (SqlKeywords.isAlterKeyword(tok)) {\n+                    tok = expectToken(lexer, \"'column'\");\n+                    if (SqlKeywords.isColumnKeyword(tok)) {\n+                        final int columnNameNamePosition = lexer.getPosition();\n+                        tok = expectToken(lexer, \"column name\");\n+                        final CharSequence columnName = GenericLexer.immutableOf(tok);\n+                        tok = expectToken(lexer, \"'add index' or 'cache' or 'nocache'\");\n+                        if (SqlKeywords.isAddKeyword(tok)) {\n+                            expectKeyword(lexer, \"index\");\n+                            alterTableColumnAddIndex(tableNamePosition, columnNameNamePosition, columnName, writer);\n                         } else {\n-                            throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            if (SqlKeywords.isCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, true);\n+                            } else if (SqlKeywords.isNoCacheKeyword(tok)) {\n+                                alterTableColumnCacheFlag(tableNamePosition, columnName, writer, false);\n+                            } else {\n+                                throw SqlException.$(lexer.lastTokenPosition(), \"'cache' or 'nocache' expected\");\n+                            }\n                         }\n+                    } else {\n+                        throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n                     }\n+\n                 } else {\n-                    throw SqlException.$(lexer.lastTokenPosition(), \"'column' or 'partition' expected\");\n+                    throw SqlException.$(lexer.lastTokenPosition(), \"'add' or 'drop' or 'rename' expected\");\n                 }\n+            } catch (CairoException e) {\n+                LOG.info().$(\"failed to alter table: \").$((Sinkable) e).$();\n+                throw SqlException.$(tableNamePosition, \"table '\").put(tableName).put(\"' cannot be altered: \").put(e);\n+            }\n+        } else if (SqlKeywords.isSystemKeyword(tok)) {\n+            tok = expectToken(lexer, \"'lock' or 'unlock'\");\n \n+            if (SqlKeywords.isLockKeyword(tok)) {", "originalCommit": "f754a2c5528126c4ab820184ae8d735746aa07ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22f371e6349253cb8e33f601d70462b94376304c", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/SqlCompiler.java b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\nindex e1ca47bb1..8159e15f2 100644\n--- a/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n+++ b/core/src/main/java/io/questdb/griffin/SqlCompiler.java\n\n@@ -674,6 +674,30 @@ public class SqlCompiler implements Closeable {\n         return tok;\n     }\n \n+    private void alterSystemLockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            if (!engine.lockWriter(tok)) {\n+                throw SqlException.$(tableNamePosition, \"could not lock, busy [table=`\").put(tok).put(\"`]\");\n+            }\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n+    private void alterSystemUnlockWriter(SqlExecutionContext executionContext) throws SqlException {\n+        final int tableNamePosition = lexer.getPosition();\n+        CharSequence tok = GenericLexer.unquote(expectToken(lexer, \"table name\"));\n+        tableExistsOrFail(tableNamePosition, tok, executionContext);\n+        try {\n+            engine.unlockWriter(tok);\n+        } catch (CairoException e) {\n+            throw SqlException.position(tableNamePosition).put(e.getFlyweightMessage());\n+        }\n+    }\n+\n     private CompiledQuery alterTable(SqlExecutionContext executionContext) throws SqlException {\n         CharSequence tok;\n         tok = expectToken(lexer, \"'table' or 'system'\");\n"}}, {"oid": "22f371e6349253cb8e33f601d70462b94376304c", "url": "https://github.com/questdb/questdb/commit/22f371e6349253cb8e33f601d70462b94376304c", "message": "feature(griffin): alter system lock/unlock writer", "committedDate": "2020-06-23T10:46:19Z", "type": "commit"}]}