{"pr_number": 396, "pr_title": "Security", "pr_createdAt": "2020-06-15T19:52:47Z", "pr_url": "https://github.com/questdb/questdb/pull/396", "timeline": [{"oid": "a873aefab6d5c85202e944fcc4383b75c33e0c2f", "url": "https://github.com/questdb/questdb/commit/a873aefab6d5c85202e944fcc4383b75c33e0c2f", "message": "chore: add Net.peek", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "70e155666ece6a0050f7e77e51f7090e441a8604", "url": "https://github.com/questdb/questdb/commit/70e155666ece6a0050f7e77e51f7090e441a8604", "message": "chore: add Net.peek", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "aeb1d0824f335d0867f42b84770afcc7a7a33591", "url": "https://github.com/questdb/questdb/commit/aeb1d0824f335d0867f42b84770afcc7a7a33591", "message": "chore: add Net.peek", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "fe3214716d6edd1b95c21d27bb6f918b0324c0ac", "url": "https://github.com/questdb/questdb/commit/fe3214716d6edd1b95c21d27bb6f918b0324c0ac", "message": "patrick@questdb.io", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "a7c0fc8b1aac78e8e5e81f6367528860ec4796bf", "url": "https://github.com/questdb/questdb/commit/a7c0fc8b1aac78e8e5e81f6367528860ec4796bf", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "63c1f1c51c0b8c10ace6cdb9b64c7f9aa42d4e78", "url": "https://github.com/questdb/questdb/commit/63c1f1c51c0b8c10ace6cdb9b64c7f9aa42d4e78", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects", "committedDate": "2020-06-09T19:09:35Z", "type": "commit"}, {"oid": "98cd606e5c6f19bc4438a3e2010bad4ba8121503", "url": "https://github.com/questdb/questdb/commit/98cd606e5c6f19bc4438a3e2010bad4ba8121503", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects", "committedDate": "2020-06-09T19:21:43Z", "type": "commit"}, {"oid": "c404cdf7a423b8b0599bfa253046ef609f640d75", "url": "https://github.com/questdb/questdb/commit/c404cdf7a423b8b0599bfa253046ef609f640d75", "message": "chore: Fix bug in HttpException", "committedDate": "2020-06-11T12:25:23Z", "type": "commit"}, {"oid": "4f9f21d0c1e326bfed42a334c3c762e7a20d85f7", "url": "https://github.com/questdb/questdb/commit/4f9f21d0c1e326bfed42a334c3c762e7a20d85f7", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects", "committedDate": "2020-06-11T12:27:07Z", "type": "commit"}, {"oid": "52e22053f3944d2e0370c84ab5aaec8cf9a024f5", "url": "https://github.com/questdb/questdb/commit/52e22053f3944d2e0370c84ab5aaec8cf9a024f5", "message": "chore: Implement cancelling SQL requests when an HTTP client disconnects", "committedDate": "2020-06-11T15:22:36Z", "type": "commit"}, {"oid": "1b2ac36db30b9004bc430f9773313bb9185303f6", "url": "https://github.com/questdb/questdb/commit/1b2ac36db30b9004bc430f9773313bb9185303f6", "message": "Merge remote-tracking branch 'origin/master' into security", "committedDate": "2020-06-11T16:22:16Z", "type": "commit"}, {"oid": "e78240754668554e090a258199936a674a066430", "url": "https://github.com/questdb/questdb/commit/e78240754668554e090a258199936a674a066430", "message": "chore: linux library", "committedDate": "2020-06-11T16:31:23Z", "type": "commit"}, {"oid": "cf87f1ccfa3e903524a068c354b32c0b27a59852", "url": "https://github.com/questdb/questdb/commit/cf87f1ccfa3e903524a068c354b32c0b27a59852", "message": "chore: Limit max resizes in fastmap", "committedDate": "2020-06-12T09:01:50Z", "type": "commit"}, {"oid": "458fcb4f08a13e4577a9186e0008b2a5bdc8acbf", "url": "https://github.com/questdb/questdb/commit/458fcb4f08a13e4577a9186e0008b2a5bdc8acbf", "message": "chore: Limit max resizes in compactmap", "committedDate": "2020-06-12T09:23:06Z", "type": "commit"}, {"oid": "aef27a4388bdf0523cd66366a588c97e20533348", "url": "https://github.com/questdb/questdb/commit/aef27a4388bdf0523cd66366a588c97e20533348", "message": "chore: revert SqlExecutionContextImpl API changes", "committedDate": "2020-06-12T10:05:16Z", "type": "commit"}, {"oid": "110ed475a451874b9d202cd5721e2856747e138c", "url": "https://github.com/questdb/questdb/commit/110ed475a451874b9d202cd5721e2856747e138c", "message": "chore: freebsd library", "committedDate": "2020-06-12T10:17:46Z", "type": "commit"}, {"oid": "4b13350841e6a562b18b665dfac19caa7510ad9a", "url": "https://github.com/questdb/questdb/commit/4b13350841e6a562b18b665dfac19caa7510ad9a", "message": "chore: Add max memory pages to sorted key sets", "committedDate": "2020-06-12T15:32:33Z", "type": "commit"}, {"oid": "aa2b9a8eb1daef624e551e9f6193fa2e6485b4fb", "url": "https://github.com/questdb/questdb/commit/aa2b9a8eb1daef624e551e9f6193fa2e6485b4fb", "message": "chore: Remove SqlResourceLimiter from Map and use SqlExecutionInterruptor where possible", "committedDate": "2020-06-15T08:43:33Z", "type": "commit"}, {"oid": "24888d397ce5d84ffe83d217e357f20686a9ab62", "url": "https://github.com/questdb/questdb/commit/24888d397ce5d84ffe83d217e357f20686a9ab62", "message": "chore: Remove SqlResourceLimiter", "committedDate": "2020-06-15T08:49:54Z", "type": "commit"}, {"oid": "3e2619520985427ea4d95637f90ca7db81130ff6", "url": "https://github.com/questdb/questdb/commit/3e2619520985427ea4d95637f90ca7db81130ff6", "message": "chore: Revert file commited by mistake", "committedDate": "2020-06-15T09:28:29Z", "type": "commit"}, {"oid": "7a9aaf72f64c2baab38c7e3f3cbbfbc71e582f83", "url": "https://github.com/questdb/questdb/commit/7a9aaf72f64c2baab38c7e3f3cbbfbc71e582f83", "message": "chore: Fix resource closure", "committedDate": "2020-06-15T09:44:39Z", "type": "commit"}, {"oid": "e3133c99a6fce3c291cf7d1e2299a6cb1fe6798b", "url": "https://github.com/questdb/questdb/commit/e3133c99a6fce3c291cf7d1e2299a6cb1fe6798b", "message": "chore: Add interruptor to UnionRecordCursor", "committedDate": "2020-06-15T12:03:54Z", "type": "commit"}, {"oid": "f3b71c51ffa3cc0cd5b57f94517c63a45d91c29f", "url": "https://github.com/questdb/questdb/commit/f3b71c51ffa3cc0cd5b57f94517c63a45d91c29f", "message": "chore: Add interruptor to DelegatingRecordCursor instances", "committedDate": "2020-06-15T12:26:14Z", "type": "commit"}, {"oid": "979e10032961ce5e92422e7ba1de1c3114b7dc9e", "url": "https://github.com/questdb/questdb/commit/979e10032961ce5e92422e7ba1de1c3114b7dc9e", "message": "chore: Remove http.security.max.in.memory.rows", "committedDate": "2020-06-15T12:44:33Z", "type": "commit"}, {"oid": "079abf901d990f0e4905a89a4fd90c17f070067a", "url": "https://github.com/questdb/questdb/commit/079abf901d990f0e4905a89a4fd90c17f070067a", "message": "chore: Fix memory restriction tests", "committedDate": "2020-06-15T14:32:45Z", "type": "commit"}, {"oid": "4fc3d6c9e41f53a0fec1fb3f7b918f1b9ffe72d4", "url": "https://github.com/questdb/questdb/commit/4fc3d6c9e41f53a0fec1fb3f7b918f1b9ffe72d4", "message": "chore: Fix memory restriction tests", "committedDate": "2020-06-15T14:41:49Z", "type": "commit"}, {"oid": "d60d278635fe7f8cc9730f3487d91fcecddb2024", "url": "https://github.com/questdb/questdb/commit/d60d278635fe7f8cc9730f3487d91fcecddb2024", "message": "Merge remote-tracking branch 'origin/master' into security", "committedDate": "2020-06-15T14:49:48Z", "type": "commit"}, {"oid": "401ba1cd547041f9a8cd18d7670794c03b27111b", "url": "https://github.com/questdb/questdb/commit/401ba1cd547041f9a8cd18d7670794c03b27111b", "message": "Merge remote-tracking branch 'origin/master' into security", "committedDate": "2020-06-15T19:36:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMDAyNg==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440720026", "bodyText": "is there a way to default limits to \"unlimited\" ?", "author": "bluestreak01", "createdAt": "2020-06-16T09:37:53Z", "path": "core/src/main/java/io/questdb/PropServerConfiguration.java", "diffHunk": "@@ -312,6 +321,7 @@ public PropServerConfiguration(String root, Properties properties) throws Server\n         this.workStealTimeoutNanos = getLong(properties, \"cairo.work.steal.timeout.nanos\", 10_000);\n         this.parallelIndexingEnabled = getBoolean(properties, \"cairo.parallel.indexing.enabled\", true);\n         this.sqlJoinMetadataPageSize = getIntSize(properties, \"cairo.sql.join.metadata.page.size\", 16384);\n+        this.sqlJoinMetadataMaxResizes = getIntSize(properties, \"cairo.sql.join.metadata.max.resizes\", 25_000);", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "chunk": "diff --git a/core/src/main/java/io/questdb/PropServerConfiguration.java b/core/src/main/java/io/questdb/PropServerConfiguration.java\nindex cd9c2b5ba..a2a1a24f4 100644\n--- a/core/src/main/java/io/questdb/PropServerConfiguration.java\n+++ b/core/src/main/java/io/questdb/PropServerConfiguration.java\n\n@@ -321,7 +321,7 @@ public class PropServerConfiguration implements ServerConfiguration {\n         this.workStealTimeoutNanos = getLong(properties, \"cairo.work.steal.timeout.nanos\", 10_000);\n         this.parallelIndexingEnabled = getBoolean(properties, \"cairo.parallel.indexing.enabled\", true);\n         this.sqlJoinMetadataPageSize = getIntSize(properties, \"cairo.sql.join.metadata.page.size\", 16384);\n-        this.sqlJoinMetadataMaxResizes = getIntSize(properties, \"cairo.sql.join.metadata.max.resizes\", 25_000);\n+        this.sqlJoinMetadataMaxResizes = getIntSize(properties, \"cairo.sql.join.metadata.max.resizes\", Integer.MAX_VALUE);\n         this.sqlAnalyticColumnPoolCapacity = getInt(properties, \"cairo.sql.analytic.column.pool.capacity\", 64);\n         this.sqlCreateTableModelPoolCapacity = getInt(properties, \"cairo.sql.create.table.model.pool.capacity\", 16);\n         this.sqlColumnCastModelPoolCapacity = getInt(properties, \"cairo.sql.column.cast.model.pool.capacity\", 16);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMTM1NA==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440721354", "bodyText": "throwing static instance of exception does not preserve correct stack trace. For that reason we need to indicate where limit overflow came from. Include name of class for example", "author": "bluestreak01", "createdAt": "2020-06-16T09:40:00Z", "path": "core/src/main/java/io/questdb/cairo/map/FastMap.java", "diffHunk": "@@ -346,28 +343,33 @@ private void rehash() {\n     }\n \n     private void resize(int size) {\n-        long kCapacity = (kLimit - kStart) << 1;\n-        long target = key.appendAddress + size - kStart;\n-        if (kCapacity < target) {\n-            kCapacity = Numbers.ceilPow2(target);\n-        }\n-        long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n-\n-        this.capacity = kCapacity;\n-        long d = kAddress - this.kStart;\n-        kPos += d;\n-        long colOffsetDelta = key.nextColOffset - key.startAddress;\n-        key.startAddress += d;\n-        key.appendAddress += d;\n-        key.nextColOffset = key.startAddress + colOffsetDelta;\n-\n-        assert kPos > 0;\n-        assert key.startAddress > 0;\n-        assert key.appendAddress > 0;\n-        assert key.nextColOffset > 0;\n-\n-        this.kStart = kAddress;\n-        this.kLimit = kAddress + kCapacity;\n+        if (nResizes < maxResizes) {\n+            nResizes++;\n+            long kCapacity = (kLimit - kStart) << 1;\n+            long target = key.appendAddress + size - kStart;\n+            if (kCapacity < target) {\n+                kCapacity = Numbers.ceilPow2(target);\n+            }\n+            long kAddress = Unsafe.realloc(this.kStart, this.capacity, kCapacity);\n+    \n+            this.capacity = kCapacity;\n+            long d = kAddress - this.kStart;\n+            kPos += d;\n+            long colOffsetDelta = key.nextColOffset - key.startAddress;\n+            key.startAddress += d;\n+            key.appendAddress += d;\n+            key.nextColOffset = key.startAddress + colOffsetDelta;\n+    \n+            assert kPos > 0;\n+            assert key.startAddress > 0;\n+            assert key.appendAddress > 0;\n+            assert key.nextColOffset > 0;\n+    \n+            this.kStart = kAddress;\n+            this.kLimit = kAddress + kCapacity;\n+        } else {\n+            throw LimitOverflowException.instance().put(\"limit of \").put(maxResizes).put(\" resizes exceeded\");", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/map/FastMap.java b/core/src/main/java/io/questdb/cairo/map/FastMap.java\nindex 27b3c1e9e..3a7187f7d 100644\n--- a/core/src/main/java/io/questdb/cairo/map/FastMap.java\n+++ b/core/src/main/java/io/questdb/cairo/map/FastMap.java\n\n@@ -368,7 +368,7 @@ public class FastMap implements Map {\n             this.kStart = kAddress;\n             this.kLimit = kAddress + kCapacity;\n         } else {\n-            throw LimitOverflowException.instance().put(\"limit of \").put(maxResizes).put(\" resizes exceeded\");\n+            throw LimitOverflowException.instance().put(\"limit of \").put(maxResizes).put(\" resizes exceeded in FastMap\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjk4NA==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440722984", "bodyText": "this has to be optimised. Prevalent outcome of the \"if\" statement is that nothing needs checking, for example 1 in 1_000_000 loop iterations checks. The method need to look like optimised for \"not checking\" outcome.", "author": "bluestreak01", "createdAt": "2020-06-16T09:42:43Z", "path": "core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.questdb.griffin;\n+\n+import java.io.Closeable;\n+\n+import io.questdb.cairo.CairoException;\n+import io.questdb.network.NetworkFacade;\n+import io.questdb.std.Unsafe;\n+\n+public class HttpSqlExecutionInterruptor implements SqlExecutionInterruptor, Closeable {\n+    private final NetworkFacade nf;\n+    private final int nIterationsPerCheck;\n+    private final int bufferSize;\n+    private long buffer;\n+    private int nIterationsSinceCheck;\n+    private long fd = -1;\n+\n+    public HttpSqlExecutionInterruptor(NetworkFacade nf, int nIterationsPerCheck, int bufferSize) {\n+        super();\n+        this.nf = nf;\n+        this.nIterationsPerCheck = nIterationsPerCheck;\n+        this.bufferSize = bufferSize;\n+        buffer = Unsafe.malloc(bufferSize);\n+    }\n+\n+    @Override\n+    public void checkInterrupted() {\n+        assert fd != -1;\n+        if (nIterationsSinceCheck == nIterationsPerCheck) {", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNTcxMw==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440735713", "bodyText": "I can change this, but I dont agree with it. I doubt it will have any significant impact and may actually be slower on more modern processors which are biased towards the if statement being true regardless of the compiler hints", "author": "patrickSpaceSurfer", "createdAt": "2020-06-16T10:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyMjk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java b/core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java\nindex 724352a0e..4961d9d50 100644\n--- a/core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java\n+++ b/core/src/main/java/io/questdb/griffin/HttpSqlExecutionInterruptor.java\n\n@@ -27,29 +27,33 @@ public class HttpSqlExecutionInterruptor implements SqlExecutionInterruptor, Clo\n         assert fd != -1;\n         if (nIterationsSinceCheck == nIterationsPerCheck) {\n             nIterationsSinceCheck = 0;\n-            int nRead = nf.peek(fd, buffer, bufferSize);\n-            if (nRead == 0) {\n-                return;\n-            }\n-            if (nRead < 0) {\n-                throw CairoException.instance(0).put(\"Interrupting SQL processing, client fd \").put(fd).put(\" is closed\");\n-            }\n+            checkConnection();\n+        } else {\n+            nIterationsSinceCheck++;\n+        }\n+    }\n \n-            int index = 0;\n-            long ptr = buffer;\n-            while (index < nRead) {\n-                byte b = Unsafe.getUnsafe().getByte(ptr + index);\n-                if (b != (byte) '\\r' && b != (byte) '\\n') {\n-                    break;\n-                }\n-                index++;\n-            }\n+    private void checkConnection() {\n+        int nRead = nf.peek(fd, buffer, bufferSize);\n+        if (nRead == 0) {\n+            return;\n+        }\n+        if (nRead < 0) {\n+            throw CairoException.instance(0).put(\"Interrupting SQL processing, client fd \").put(fd).put(\" is closed\");\n+        }\n \n-            if (index > 0) {\n-                nf.recv(fd, buffer, index);\n+        int index = 0;\n+        long ptr = buffer;\n+        while (index < nRead) {\n+            byte b = Unsafe.getUnsafe().getByte(ptr + index);\n+            if (b != (byte) '\\r' && b != (byte) '\\n') {\n+                break;\n             }\n-        } else {\n-            nIterationsSinceCheck++;\n+            index++;\n+        }\n+\n+        if (index > 0) {\n+            nf.recv(fd, buffer, index);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDkzNQ==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440724935", "bodyText": "lets cache interruptor instance. If JIT leaves double de-reference inside the loop - its bad", "author": "bluestreak01", "createdAt": "2020-06-16T09:46:05Z", "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java", "diffHunk": "@@ -89,13 +90,14 @@ public void toTop() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         this.base = base;\n         this.baseRecord = base.getRecord();\n         final Record placeHolderRecord = base.getRecordB();\n \n         chain.clear();\n         while (base.hasNext()) {\n+            executionContext.getSqlExecutionInterruptor().checkInterrupted();", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java b/core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java\nindex 28dd43005..c1f6450e7 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/orderby/SortedLightRecordCursor.java\n\n@@ -94,10 +95,11 @@ class SortedLightRecordCursor implements DelegatingRecordCursor {\n         this.base = base;\n         this.baseRecord = base.getRecord();\n         final Record placeHolderRecord = base.getRecordB();\n+        SqlExecutionInterruptor interruptor = executionContext.getSqlExecutionInterruptor();\n \n         chain.clear();\n         while (base.hasNext()) {\n-            executionContext.getSqlExecutionInterruptor().checkInterrupted();\n+            interruptor.checkInterrupted();\n             // Tree chain is liable to re-position record to\n             // other rows to do record comparison. We must use our\n             // own record instance in case base cursor keeps\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNTE0OQ==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440725149", "bodyText": "same, double de-ref", "author": "bluestreak01", "createdAt": "2020-06-16T09:46:25Z", "path": "core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java", "diffHunk": "@@ -81,34 +81,21 @@ public long size() {\n     }\n \n     @Override\n-    public void of(RecordCursor base) {\n-        of(base, Long.MAX_VALUE);\n-    }\n-\n-    public void of(RecordCursor base, long maxSize) {\n+    public void of(RecordCursor base, SqlExecutionContext executionContext) {\n         try {\n-            if (maxSize > base.size()) {\n-                this.chainCursor = chain.getCursor(base);\n-                final Record record = base.getRecord();\n+            this.chainCursor = chain.getCursor(base);\n+            final Record record = base.getRecord();\n \n-                long nRows = 0;\n-                chain.clear();\n-                while (base.hasNext()) {\n-                    if (nRows < maxSize) {\n-                        nRows++;\n-                        // Tree chain is liable to re-position record to\n-                        // other rows to do record comparison. We must use our\n-                        // own record instance in case base cursor keeps\n-                        // state in the record it returns.\n-                        chain.put(record);\n-                    } else {\n-                        throw LimitOverflowException.instance(maxSize);\n-                    }\n-                }\n-                chainCursor.toTop();\n-            } else {\n-                throw LimitOverflowException.instance(maxSize);\n+            chain.clear();\n+            while (base.hasNext()) {\n+                executionContext.getSqlExecutionInterruptor().checkInterrupted();", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java b/core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java\nindex 8bab0ecaf..406a90a81 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/orderby/SortedRecordCursor.java\n\n@@ -85,10 +86,11 @@ class SortedRecordCursor implements DelegatingRecordCursor {\n         try {\n             this.chainCursor = chain.getCursor(base);\n             final Record record = base.getRecord();\n+            SqlExecutionInterruptor interruptor = executionContext.getSqlExecutionInterruptor();\n \n             chain.clear();\n             while (base.hasNext()) {\n-                executionContext.getSqlExecutionInterruptor().checkInterrupted();\n+                interruptor.checkInterrupted();\n                 // Tree chain is liable to re-position record to\n                 // other rows to do record comparison. We must use our\n                 // own record instance in case base cursor keeps\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMjc4Mw==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440732783", "bodyText": "likewise, we need to denote source of exception", "author": "bluestreak01", "createdAt": "2020-06-16T09:59:26Z", "path": "core/src/main/java/io/questdb/std/MemoryPages.java", "diffHunk": "@@ -87,6 +95,10 @@ private void allocate0(long index) {\n             throw new OutOfMemoryError();\n         }\n \n+        if (index > maxPages) {\n+            throw LimitOverflowException.instance().put(\"Maximum number of pages (\").put(maxPages).put(\") breached\");", "originalCommit": "401ba1cd547041f9a8cd18d7670794c03b27111b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "chunk": "diff --git a/core/src/main/java/io/questdb/std/MemoryPages.java b/core/src/main/java/io/questdb/std/MemoryPages.java\nindex 214094803..3392725f5 100644\n--- a/core/src/main/java/io/questdb/std/MemoryPages.java\n+++ b/core/src/main/java/io/questdb/std/MemoryPages.java\n\n@@ -96,7 +96,7 @@ public class MemoryPages implements Closeable, Mutable {\n         }\n \n         if (index > maxPages) {\n-            throw LimitOverflowException.instance().put(\"Maximum number of pages (\").put(maxPages).put(\") breached\");\n+            throw LimitOverflowException.instance().put(\"Maximum number of pages (\").put(maxPages).put(\") breached in MemoryPages\");\n         }\n \n         if (index >= pages.size()) {\n"}}, {"oid": "2872483e57cbe3098c16508a3fdfb4265d810f0f", "url": "https://github.com/questdb/questdb/commit/2872483e57cbe3098c16508a3fdfb4265d810f0f", "message": "chore: Ressource limit check changes", "committedDate": "2020-06-16T13:24:13Z", "type": "commit"}, {"oid": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "url": "https://github.com/questdb/questdb/commit/a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "message": "chore: Resource limit check changes", "committedDate": "2020-06-16T14:35:47Z", "type": "commit"}, {"oid": "8c529b396f07f8de2b106975fedde18c513892c2", "url": "https://github.com/questdb/questdb/commit/8c529b396f07f8de2b106975fedde18c513892c2", "message": "chore: build windows library", "committedDate": "2020-06-16T15:35:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Mg==", "url": "https://github.com/questdb/questdb/pull/396#discussion_r440950242", "bodyText": "this is intense. Function exec should take long time, lets keep this on cursor only", "author": "bluestreak01", "createdAt": "2020-06-16T15:39:01Z", "path": "core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java", "diffHunk": "@@ -106,13 +117,15 @@ public boolean hasNext() {\n \n         final int n = groupByFunctions.size();\n         for (int i = 0; i < n; i++) {\n+            interruptor.checkInterrupted();\n             groupByFunctions.getQuick(i).computeFirst(simpleMapValue, baseRecord);\n         }\n \n         while (base.hasNext()) {\n             long timestamp = timestampSampler.round(baseRecord.getTimestamp(timestampIndex));\n             if (lastTimestamp == timestamp) {\n                 for (int i = 0; i < n; i++) {\n+                    interruptor.checkInterrupted();", "originalCommit": "a5f85cb2b10535c15a5f14a10bc0aa24daa27ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "313ec4111eedaed336d71283da974e2ad5c81eba", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java b/core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java\nindex cfc91378c..58320af0f 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/groupby/SampleByFillPrevNotKeyedRecordCursor.java\n\n@@ -117,15 +117,14 @@ public class SampleByFillPrevNotKeyedRecordCursor implements DelegatingRecordCur\n \n         final int n = groupByFunctions.size();\n         for (int i = 0; i < n; i++) {\n-            interruptor.checkInterrupted();\n             groupByFunctions.getQuick(i).computeFirst(simpleMapValue, baseRecord);\n         }\n \n         while (base.hasNext()) {\n+            interruptor.checkInterrupted();\n             long timestamp = timestampSampler.round(baseRecord.getTimestamp(timestampIndex));\n             if (lastTimestamp == timestamp) {\n                 for (int i = 0; i < n; i++) {\n-                    interruptor.checkInterrupted();\n                     groupByFunctions.getQuick(i).computeNext(simpleMapValue, baseRecord);\n                 }\n             } else {\n"}}, {"oid": "313ec4111eedaed336d71283da974e2ad5c81eba", "url": "https://github.com/questdb/questdb/commit/313ec4111eedaed336d71283da974e2ad5c81eba", "message": "chore: Resource limit check changes", "committedDate": "2020-06-16T15:49:49Z", "type": "commit"}, {"oid": "5ddb35c920d3d4d77ba54c95c94461081a6f9c1d", "url": "https://github.com/questdb/questdb/commit/5ddb35c920d3d4d77ba54c95c94461081a6f9c1d", "message": "chore: Change interruptor logging", "committedDate": "2020-06-17T14:05:22Z", "type": "commit"}, {"oid": "8df201650e76b936a3aa051a564e615c4b56d2f3", "url": "https://github.com/questdb/questdb/commit/8df201650e76b936a3aa051a564e615c4b56d2f3", "message": "chore: Change interruptor logging", "committedDate": "2020-06-17T14:08:12Z", "type": "commit"}, {"oid": "e7e8c29dcc8f37be5d6d094d3cb3968cf472beff", "url": "https://github.com/questdb/questdb/commit/e7e8c29dcc8f37be5d6d094d3cb3968cf472beff", "message": "chore(http): log tidy up", "committedDate": "2020-06-17T14:30:11Z", "type": "commit"}]}