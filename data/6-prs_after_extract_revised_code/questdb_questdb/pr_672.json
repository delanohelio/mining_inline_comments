{"pr_number": 672, "pr_title": "feat(griffin) - Add support for to_lowercase and to_uppercase (feat #668)", "pr_createdAt": "2020-10-28T00:47:26Z", "pr_url": "https://github.com/questdb/questdb/pull/672", "timeline": [{"oid": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "url": "https://github.com/questdb/questdb/commit/1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "message": "feat(griffin) - Add support for to_lowercase and to_uppercase", "committedDate": "2020-10-28T00:49:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyOTAzNg==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513229036", "bodyText": "thank you for the contribution! Much appreciated!\nIt would be good to also implement getStrLen(). Although the default implementation will work it would be less efficient than retrieving string length without printing uppercase characters to sink", "author": "bluestreak01", "createdAt": "2020-10-28T07:30:51Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.str;\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.Chars;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.StringSink;\n+\n+public class ToUppercaseFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"to_uppercase(S)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args, final int position, final CairoConfiguration configuration) throws SqlException {\n+        return new ToUppercaseFunc(position, args.get(0));\n+    }\n+\n+    private static class ToUppercaseFunc extends StrFunction implements UnaryFunction {\n+        private final Function arg;\n+\n+        private final StringSink sinkA = new StringSink();\n+\n+        private final StringSink sinkB = new StringSink();\n+\n+        public ToUppercaseFunc(final int position, final Function arg) {\n+            super(position);\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public CharSequence getStr(final Record rec) {\n+            CharSequence str = getArg().getStr(rec);\n+            if (str == null) {\n+                return null;\n+            }\n+\n+            sinkA.clear();\n+            sinkA.put(Chars.toUpperCaseAscii(str));\n+            return sinkA;\n+        }\n+\n+        @Override\n+        public CharSequence getStrB(final Record rec) {\n+            CharSequence str = getArg().getStr(rec);\n+            if (str == null) {\n+                return null;\n+            }\n+\n+            sinkB.clear();\n+            sinkB.put(Chars.toUpperCaseAscii(str));\n+            return sinkB;\n+        }\n+", "originalCommit": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java\nindex 24bab7f99..c523be574 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/str/ToUppercaseFunctionFactory.java\n\n@@ -66,7 +66,7 @@ public class ToUppercaseFunctionFactory implements FunctionFactory {\n             }\n \n             sinkA.clear();\n-            sinkA.put(Chars.toUpperCaseAscii(str));\n+            Chars.toUpperCase(str, sinkA);\n             return sinkA;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMDM2OQ==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513230369", "bodyText": "This implementation is needlessly allocating. Calls to this method are made from function, that has local CharSink already. String instantiation is not required.", "author": "bluestreak01", "createdAt": "2020-10-28T07:34:10Z", "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -482,14 +482,32 @@ public static String toLowerCaseAscii(@Nullable CharSequence value) {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n-\n-\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        final int len = value.length();\n+        if (len == 0) {\n+            return \"\";\n+        }\n+\n+        final CharSink b = Misc.getThreadLocalBuilder();\n+        for (int i = 0; i < len; i++) {\n+            b.put(toUpperCaseAscii(value.charAt(i)));\n+        }\n+        return b.toString();", "originalCommit": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/main/java/io/questdb/std/Chars.java b/core/src/main/java/io/questdb/std/Chars.java\nindex 9e0254915..16e03366f 100644\n--- a/core/src/main/java/io/questdb/std/Chars.java\n+++ b/core/src/main/java/io/questdb/std/Chars.java\n\n@@ -482,30 +482,40 @@ public final class Chars {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n+\n+\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n-    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n-        if (value == null) {\n-            return null;\n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n         }\n-        final int len = value.length();\n-        if (len == 0) {\n-            return \"\";\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n         }\n+    }\n \n-        final CharSink b = Misc.getThreadLocalBuilder();\n-        for (int i = 0; i < len; i++) {\n-            b.put(toUpperCaseAscii(value.charAt(i)));\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n+    }\n+\n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toLowerCase(str.charAt(i)));\n         }\n-        return b.toString();\n     }\n \n-    public static char toUpperCaseAscii(char character) {\n-        return character > 96 && character < 123 ? (char) (character - 32) : character;\n+    public static char toLowerCase(final char character) {\n+        return Character.toLowerCase(character);\n     }\n \n     public static void toSink(BinarySequence sequence, CharSink sink) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMTA3MQ==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513231071", "bodyText": "The ascii uppercase method is insufficient. You should use\nCharacter.toUpperCase()\n\nit is more generic but slower.\nSame things apply to \"lowercase\"", "author": "bluestreak01", "createdAt": "2020-10-28T07:35:47Z", "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -482,14 +482,32 @@ public static String toLowerCaseAscii(@Nullable CharSequence value) {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n-\n-\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        final int len = value.length();\n+        if (len == 0) {\n+            return \"\";\n+        }\n+\n+        final CharSink b = Misc.getThreadLocalBuilder();\n+        for (int i = 0; i < len; i++) {\n+            b.put(toUpperCaseAscii(value.charAt(i)));", "originalCommit": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/main/java/io/questdb/std/Chars.java b/core/src/main/java/io/questdb/std/Chars.java\nindex 9e0254915..16e03366f 100644\n--- a/core/src/main/java/io/questdb/std/Chars.java\n+++ b/core/src/main/java/io/questdb/std/Chars.java\n\n@@ -482,30 +482,40 @@ public final class Chars {\n             b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n         return b.toString();\n+\n+\n     }\n \n     public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n-    public static String toUpperCaseAscii(@Nullable CharSequence value) {\n-        if (value == null) {\n-            return null;\n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n         }\n-        final int len = value.length();\n-        if (len == 0) {\n-            return \"\";\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n         }\n+    }\n \n-        final CharSink b = Misc.getThreadLocalBuilder();\n-        for (int i = 0; i < len; i++) {\n-            b.put(toUpperCaseAscii(value.charAt(i)));\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n+    }\n+\n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toLowerCase(str.charAt(i)));\n         }\n-        return b.toString();\n     }\n \n-    public static char toUpperCaseAscii(char character) {\n-        return character > 96 && character < 123 ? (char) (character - 32) : character;\n+    public static char toLowerCase(final char character) {\n+        return Character.toLowerCase(character);\n     }\n \n     public static void toSink(BinarySequence sequence, CharSink sink) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMTQzOQ==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r513231439", "bodyText": "it would also be good to have test for non-ascii characters", "author": "bluestreak01", "createdAt": "2020-10-28T07:36:34Z", "path": "core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java", "diffHunk": "@@ -600,6 +602,54 @@ public void testShortIndexed() throws SqlException {\n         Assert.assertEquals(55, func.getShort(builder.getRecord()));\n     }\n \n+    @Test\n+    public void testUppercaseStr() throws SqlException {\n+        bindVariableService.setStr(\"str\", \"abcDEFghiJKLmnoPQRstuVXZ\");\n+        Function func = expr(\"to_uppercase(:str)\")\n+                .withFunction(new ToUppercaseFunctionFactory())\n+                .$();\n+\n+        func.init(null, sqlExecutionContext);\n+        TestUtils.assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVXZ\", func.getStr(builder.getRecord()));\n+    }\n+\n+    @Test\n+    public void testLowercaseStr() throws SqlException {\n+        bindVariableService.setStr(\"str\", \"abcDEFghiJKLmnoPQRstuVXZ\");\n+        Function func = expr(\"to_lowercase(:str)\")\n+                .withFunction(new ToLowercaseFunctionFactory())\n+                .$();\n+\n+        func.init(null, sqlExecutionContext);\n+        TestUtils.assertEquals(\"abcdefghijklmnopqrstuvxz\", func.getStr(builder.getRecord()));\n+    }\n+\n+    @Test\n+    public void testUppercaseIndexedStr() throws SqlException {", "originalCommit": "1f8956fe791e6c3b36bbe4a1f243aaa13dda5625", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java b/core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java\nindex 54aae0ba3..d262d1ffd 100644\n--- a/core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java\n+++ b/core/src/test/java/io/questdb/griffin/engine/functions/bind/BindVariablesTest.java\n\n@@ -613,6 +613,17 @@ public class BindVariablesTest extends BaseFunctionFactoryTest {\n         TestUtils.assertEquals(\"ABCDEFGHIJKLMNOPQRSTUVXZ\", func.getStr(builder.getRecord()));\n     }\n \n+    @Test\n+    public void testNonAsciiUpperCaseStr() throws SqlException {\n+        bindVariableService.setStr(\"str\", \"abcDEFghiJKLm...() { _; } >_[$($())] { <<< %(='%') \\\"noPQRstuVXZ\");\n+        Function func = expr(\"to_uppercase(:str)\")\n+                .withFunction(new ToUppercaseFunctionFactory())\n+                .$();\n+\n+        func.init(null, sqlExecutionContext);\n+        TestUtils.assertEquals(\"ABCDEFGHIJKLM...() { _; } >_[$($())] { <<< %(='%') \\\"NOPQRSTUVXZ\", func.getStr(builder.getRecord()));\n+    }\n+\n     @Test\n     public void testLowercaseStr() throws SqlException {\n         bindVariableService.setStr(\"str\", \"abcDEFghiJKLmnoPQRstuVXZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyMjEyOQ==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r514022129", "bodyText": "toLowerCaseAscii() is used elsewhere, where only ascii characters allowed. We need to keep implementation unchanged.  The SQL to_lowercase() should call Character.toLowerCase() directly.\nCalling Character.toLowerCase() from toLowerCaseAscii() is also misleading, because implementation is no longer \"ascii\" specific.", "author": "bluestreak01", "createdAt": "2020-10-29T06:36:37Z", "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -468,26 +468,45 @@ public static String stringFromUtf8Bytes(long lo, long hi) {\n         return b.toString();\n     }\n \n-    public static String toLowerCaseAscii(@Nullable CharSequence value) {\n-        if (value == null) {\n-            return null;\n+    public static void toLowerCaseAscii(@Nullable final CharSequence value, final CharSink sink) {\n+        if (value == null || value.length() == 0) {\n+            return;\n         }\n-        final int len = value.length();\n-        if (len == 0) {\n-            return \"\";\n+\n+        for (int i = 0; i < value.length(); i++) {\n+            sink.put(toLowerCaseAscii(value.charAt(i)));\n         }\n+    }\n \n-        final CharSink b = Misc.getThreadLocalBuilder();\n-        for (int i = 0; i < len; i++) {\n-            b.put(toLowerCaseAscii(value.charAt(i)));\n+    public static String toLowerCaseAscii(@Nullable final CharSequence value) {\n+        CharSink sink = Misc.getThreadLocalBuilder();\n+        toLowerCaseAscii(value, sink);\n+        return sink.toString();\n+    }\n+\n+    public static char toLowerCaseAscii(char character) {", "originalCommit": "092222ea194a45c1064e0e879e570c200da9c785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2NzE0Nw==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r514567147", "bodyText": "As Character.toLowerCase() is a superset of what the toLowercaseAscii(char) was doing I thought it was ok just to call it inside toLowercaseAscii(char).\nI'll create new methods toUppercase(...) and toLowercase(...) to use Character.toUpperCase() and Character.toLowerCase() respectively.", "author": "upsidedownsmile", "createdAt": "2020-10-29T21:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyMjEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/main/java/io/questdb/std/Chars.java b/core/src/main/java/io/questdb/std/Chars.java\nindex 41cdd00b5..16e03366f 100644\n--- a/core/src/main/java/io/questdb/std/Chars.java\n+++ b/core/src/main/java/io/questdb/std/Chars.java\n\n@@ -468,45 +468,54 @@ public final class Chars {\n         return b.toString();\n     }\n \n-    public static void toLowerCaseAscii(@Nullable final CharSequence value, final CharSink sink) {\n-        if (value == null || value.length() == 0) {\n-            return;\n+    public static String toLowerCaseAscii(@Nullable CharSequence value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        final int len = value.length();\n+        if (len == 0) {\n+            return \"\";\n         }\n \n-        for (int i = 0; i < value.length(); i++) {\n-            sink.put(toLowerCaseAscii(value.charAt(i)));\n+        final CharSink b = Misc.getThreadLocalBuilder();\n+        for (int i = 0; i < len; i++) {\n+            b.put(toLowerCaseAscii(value.charAt(i)));\n         }\n-    }\n+        return b.toString();\n+\n \n-    public static String toLowerCaseAscii(@Nullable final CharSequence value) {\n-        CharSink sink = Misc.getThreadLocalBuilder();\n-        toLowerCaseAscii(value, sink);\n-        return sink.toString();\n     }\n \n     public static char toLowerCaseAscii(char character) {\n-        return Character.toLowerCase(character);\n+        return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n-    public static void toUpperCaseAscii(@Nullable final CharSequence value, final CharSink sink) {\n-        if (value == null || value.length() == 0) {\n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n             return;\n         }\n \n-        for (int i = 0; i < value.length(); i++) {\n-            sink.put(toUpperCaseAscii(value.charAt(i)));\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n         }\n     }\n \n-    public static String toUpperCaseAscii(@Nullable final CharSequence value) {\n-        CharSink sink = Misc.getThreadLocalBuilder();\n-        toUpperCaseAscii(value, sink);\n-        return sink.toString();\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n     }\n \n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n \n-    public static char toUpperCaseAscii(final char character) {\n-        return Character.toUpperCase(character);\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toLowerCase(str.charAt(i)));\n+        }\n+    }\n+\n+    public static char toLowerCase(final char character) {\n+        return Character.toLowerCase(character);\n     }\n \n     public static void toSink(BinarySequence sequence, CharSink sink) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEyNzIyOQ==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r515127229", "bodyText": "Rename to ToLowercaseFunc", "author": "mpsq", "createdAt": "2020-10-30T14:12:20Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.str;\n+\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.griffin.SqlException;\n+import io.questdb.griffin.engine.functions.StrFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.std.Chars;\n+import io.questdb.std.ObjList;\n+import io.questdb.std.str.StringSink;\n+\n+public class ToLowercaseFunctionFactory implements FunctionFactory {\n+    @Override\n+    public String getSignature() {\n+        return \"to_lowercase(S)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(final ObjList<Function> args, final int position, final CairoConfiguration configuration) throws SqlException {\n+        return new ToUppercaseFunc(position, args.get(0));\n+    }\n+\n+    private static class ToUppercaseFunc extends StrFunction implements UnaryFunction {", "originalCommit": "8a213d4ce56accc79f69974d3a9d7289bf18eb78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "86d646acaac32f007915b35eb7160b1193523301", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java\nindex d0a5bafe8..2dc28c38f 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/str/ToLowercaseFunctionFactory.java\n\n@@ -46,7 +46,7 @@ public class ToLowercaseFunctionFactory implements FunctionFactory {\n         return new ToUppercaseFunc(position, args.get(0));\n     }\n \n-    private static class ToUppercaseFunc extends StrFunction implements UnaryFunction {\n+    private static class ToLowercaseFunc extends StrFunction implements UnaryFunction {\n         private final Function arg;\n \n         private final StringSink sinkA = new StringSink();\n"}}, {"oid": "86d646acaac32f007915b35eb7160b1193523301", "url": "https://github.com/questdb/questdb/commit/86d646acaac32f007915b35eb7160b1193523301", "message": "Rebase and fix typo in the class name", "committedDate": "2020-10-30T18:20:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDQ3Ng==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r516144476", "bodyText": "this implementation can be improved in terms of hot path isolation:\n\nstring is not null and longer than zero (hot)\nstring is null or empty (less frequent - cold)\n\nhot path might look like:\nif (str != null) {\n    for (int i = 0, n=str.length(); i < n; i++) {\n                sink.put(toLowerCase(str.charAt(i)));\n    }\n}\nnote that is str.length() is not cached into local variable, java will be calling length() method for every iteration", "author": "bluestreak01", "createdAt": "2020-11-02T17:36:33Z", "path": "core/src/main/java/io/questdb/std/Chars.java", "diffHunk": "@@ -490,6 +490,34 @@ public static char toLowerCaseAscii(char character) {\n         return character > 64 && character < 91 ? (char) (character + 32) : character;\n     }\n \n+    public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            sink.put(toUpperCase(str.charAt(i)));\n+        }\n+    }\n+\n+    public static char toUpperCase(final char character) {\n+        return Character.toUpperCase(character);\n+    }\n+\n+    public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n+        if (str == null || str.length() == 0) {", "originalCommit": "7abeb6f69e0bc971241fe54eefad9a4beee524fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwODcxOA==", "url": "https://github.com/questdb/questdb/pull/672#discussion_r516308718", "bodyText": "As we are trying to have as few method calls as possible then I will remove the methods toUpperCase(char) and toLowerCase(char) and call the respective Character methods directly.", "author": "upsidedownsmile", "createdAt": "2020-11-02T22:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7f1a570e6c71c92323dba1f9c2ec35d6a99782bb", "chunk": "diff --git a/core/src/main/java/io/questdb/std/Chars.java b/core/src/main/java/io/questdb/std/Chars.java\nindex 16e03366f..682b09731 100644\n--- a/core/src/main/java/io/questdb/std/Chars.java\n+++ b/core/src/main/java/io/questdb/std/Chars.java\n\n@@ -491,33 +491,23 @@ public final class Chars {\n     }\n \n     public static void toUpperCase(@Nullable final CharSequence str, final CharSink sink) {\n-        if (str == null || str.length() == 0) {\n-            return;\n-        }\n-\n-        for (int i = 0; i < str.length(); i++) {\n-            sink.put(toUpperCase(str.charAt(i)));\n+        if(str != null) {\n+            final int len = str.length();\n+            for (int i = 0; i < len; i++) {\n+                sink.put(Character.toUpperCase(str.charAt(i)));\n+            }\n         }\n     }\n \n-    public static char toUpperCase(final char character) {\n-        return Character.toUpperCase(character);\n-    }\n-\n     public static void toLowerCase(@Nullable final CharSequence str, final CharSink sink) {\n-        if (str == null || str.length() == 0) {\n-            return;\n-        }\n-\n-        for (int i = 0; i < str.length(); i++) {\n-            sink.put(toLowerCase(str.charAt(i)));\n+        if(str != null) {\n+            final int len = str.length();\n+            for (int i = 0; i < len; i++) {\n+                sink.put(Character.toLowerCase(str.charAt(i)));\n+            }\n         }\n     }\n \n-    public static char toLowerCase(final char character) {\n-        return Character.toLowerCase(character);\n-    }\n-\n     public static void toSink(BinarySequence sequence, CharSink sink) {\n         if (sequence == null) {\n             return;\n"}}, {"oid": "7f1a570e6c71c92323dba1f9c2ec35d6a99782bb", "url": "https://github.com/questdb/questdb/commit/7f1a570e6c71c92323dba1f9c2ec35d6a99782bb", "message": "Cache call to length in local variable", "committedDate": "2020-11-02T23:00:37Z", "type": "forcePushed"}, {"oid": "c5cdf0653fd5368f722d1ce2d6bf128f14244a61", "url": "https://github.com/questdb/questdb/commit/c5cdf0653fd5368f722d1ce2d6bf128f14244a61", "message": "feat(griffin) - Add support for to_lowercase and to_uppercase", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "b3bca4c9ce93cdfccf0a68c99b40f59db9cfeae5", "url": "https://github.com/questdb/questdb/commit/b3bca4c9ce93cdfccf0a68c99b40f59db9cfeae5", "message": "Replace custom lowercase and uppercase methods for Character#toLowercase and Character#toUppercase", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "73d87980203dc11055fa4678395afe0ad0c772bb", "url": "https://github.com/questdb/questdb/commit/73d87980203dc11055fa4678395afe0ad0c772bb", "message": "Add tests for non-ascii characters", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "fdcee70fc144886e26a614b692139ecaef904184", "url": "https://github.com/questdb/questdb/commit/fdcee70fc144886e26a614b692139ecaef904184", "message": "Override getStr()", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "766f6152d9c0da88ac0612cc67ff4b60db32748f", "url": "https://github.com/questdb/questdb/commit/766f6152d9c0da88ac0612cc67ff4b60db32748f", "message": "Remove unecessary instanciation when a sink is provided to Chars#toLowerCaseAscii and Chars#toUpperCaseAscii", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "14814a553fe57f7e1d5188740ad41309f9b4ddbd", "url": "https://github.com/questdb/questdb/commit/14814a553fe57f7e1d5188740ad41309f9b4ddbd", "message": "Add Chars.toLowercase(...) and Chars.toUppercase(...) methods", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "4107e0fc7acad2f321735281523be15689204f81", "url": "https://github.com/questdb/questdb/commit/4107e0fc7acad2f321735281523be15689204f81", "message": "Change method call", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "81c0bf2232028b21f53245c4ccdb323ef6e8512f", "url": "https://github.com/questdb/questdb/commit/81c0bf2232028b21f53245c4ccdb323ef6e8512f", "message": "Rebase and fix typo in the class name", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "e288270469bfdf194a5072fa884fdc380417a88a", "url": "https://github.com/questdb/questdb/commit/e288270469bfdf194a5072fa884fdc380417a88a", "message": "Fix ToLowercaseFunc class usages", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "015dfdb1bb436a2265456ae687f28530b128ddbf", "url": "https://github.com/questdb/questdb/commit/015dfdb1bb436a2265456ae687f28530b128ddbf", "message": "Cache call to length in local variable", "committedDate": "2020-11-03T19:02:11Z", "type": "commit"}, {"oid": "015dfdb1bb436a2265456ae687f28530b128ddbf", "url": "https://github.com/questdb/questdb/commit/015dfdb1bb436a2265456ae687f28530b128ddbf", "message": "Cache call to length in local variable", "committedDate": "2020-11-03T19:02:11Z", "type": "forcePushed"}]}