{"pr_number": 371, "pr_title": "fix(AbstractIntervalDataFrameCursor): binary search scan", "pr_createdAt": "2020-06-06T22:12:17Z", "pr_url": "https://github.com/questdb/questdb/pull/371", "timeline": [{"oid": "d7b0e6214473c2ebfd277305fbc64bfb8a39d456", "url": "https://github.com/questdb/questdb/commit/d7b0e6214473c2ebfd277305fbc64bfb8a39d456", "message": "fix(AbstractIntervalDataFrameCursor): binary search scan", "committedDate": "2020-06-06T22:11:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTEyNw==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436305127", "bodyText": "we probably don't need to check that value is positive, timestamp can also be 0 and negative. Need to search for same values regardless", "author": "bluestreak01", "createdAt": "2020-06-06T22:19:52Z", "path": "core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java", "diffHunk": "@@ -63,6 +63,16 @@ protected static long search(ReadOnlyColumn column, long value, long low, long h\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n+            else if (midVal > 0) {", "originalCommit": "d7b0e6214473c2ebfd277305fbc64bfb8a39d456", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTMyOA==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436305328", "bodyText": "Ah sorry, I mean mid > 0 to prevent ever doing column.getLong(-1)", "author": "clickingbuttons", "createdAt": "2020-06-06T22:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTU0Mg==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436305542", "bodyText": "loop is walking backwards and can potentially step over the file boundary, so the test need to be in the loop itself", "author": "bluestreak01", "createdAt": "2020-06-06T22:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzIzNw==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436307237", "bodyText": "Fixed.", "author": "clickingbuttons", "createdAt": "2020-06-06T23:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "856b900f7c83792fadd8b7e696b466a57ea18f7b", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\nindex 83f1aab9c..74c3aa5d1 100644\n--- a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n+++ b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n\n@@ -63,7 +63,7 @@ public abstract class AbstractIntervalDataFrameCursor implements DataFrameCursor\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n-            else if (midVal > 0) {\n+            else if (mid > 0) {\n                 // In case of multiple equal values, find the first\n                 int offset = 0;\n                 long prevVal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTIwMQ==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436305201", "bodyText": "the getLong() arg can't be negative, there no check for it, which is what likely has caused CI to crash", "author": "bluestreak01", "createdAt": "2020-06-06T22:20:54Z", "path": "core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java", "diffHunk": "@@ -63,6 +63,16 @@ protected static long search(ReadOnlyColumn column, long value, long low, long h\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n+            else if (midVal > 0) {\n+                // In case of multiple equal values, find the first\n+                int offset = 0;\n+                long prevVal;\n+                do {\n+                    prevVal = column.getLong((mid + --offset) * 8);", "originalCommit": "d7b0e6214473c2ebfd277305fbc64bfb8a39d456", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "856b900f7c83792fadd8b7e696b466a57ea18f7b", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\nindex 83f1aab9c..74c3aa5d1 100644\n--- a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n+++ b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n\n@@ -63,7 +63,7 @@ public abstract class AbstractIntervalDataFrameCursor implements DataFrameCursor\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n-            else if (midVal > 0) {\n+            else if (mid > 0) {\n                 // In case of multiple equal values, find the first\n                 int offset = 0;\n                 long prevVal;\n"}}, {"oid": "856b900f7c83792fadd8b7e696b466a57ea18f7b", "url": "https://github.com/questdb/questdb/commit/856b900f7c83792fadd8b7e696b466a57ea18f7b", "message": "fix if statement", "committedDate": "2020-06-06T22:23:27Z", "type": "commit"}, {"oid": "90d36464e66e3f8c4c2e8b871e35a2a0319ec520", "url": "https://github.com/questdb/questdb/commit/90d36464e66e3f8c4c2e8b871e35a2a0319ec520", "message": "add scanUp", "committedDate": "2020-06-06T23:04:05Z", "type": "commit"}, {"oid": "26602f175f92702c125931d7de4908cabc68a5d8", "url": "https://github.com/questdb/questdb/commit/26602f175f92702c125931d7de4908cabc68a5d8", "message": "add check for high", "committedDate": "2020-06-06T23:08:46Z", "type": "commit"}, {"oid": "8dd59237564bfe1841fbe3168833f162b947c714", "url": "https://github.com/questdb/questdb/commit/8dd59237564bfe1841fbe3168833f162b947c714", "message": "fix off by 1", "committedDate": "2020-06-06T23:36:01Z", "type": "commit"}, {"oid": "b7e4a0d9b341c1b8e6a568308d4050c6207acb96", "url": "https://github.com/questdb/questdb/commit/b7e4a0d9b341c1b8e6a568308d4050c6207acb96", "message": "cleaner implementation", "committedDate": "2020-06-07T00:09:51Z", "type": "commit"}, {"oid": "5d4849e3232f5814a625631034d531599d257f57", "url": "https://github.com/questdb/questdb/commit/5d4849e3232f5814a625631034d531599d257f57", "message": "ignore testImportMultipleOnSameConnection", "committedDate": "2020-06-07T00:50:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2ODk0Mw==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436368943", "bodyText": "logic is great, but\nmid + offset\n\nis calculated at least 3 times per loop. I hope Java would realise that and execute only once, but I would do this kind of optimisation manually", "author": "bluestreak01", "createdAt": "2020-06-07T14:28:02Z", "path": "core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java", "diffHunk": "@@ -63,8 +63,15 @@ protected static long search(ReadOnlyColumn column, long value, long low, long h\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n-            else\n+            else {\n+                // In case of multiple equal values, find the first\n+                int increment = scanUp ? -1 : 1;\n+                for (long offset = 0; (mid + offset) > 0 && (mid + offset) < high; offset += increment) {\n+                    if (midVal != column.getLong((mid + offset) * 8))\n+                        return mid + offset - increment;", "originalCommit": "5d4849e3232f5814a625631034d531599d257f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDM0MA==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436374340", "bodyText": "Fixed.", "author": "clickingbuttons", "createdAt": "2020-06-07T15:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2ODk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6cf67f947def1de23129fa55d258075fd7615025", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\nindex ef5a922b1..4a21edbfc 100644\n--- a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n+++ b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n\n@@ -65,10 +68,12 @@ public abstract class AbstractIntervalDataFrameCursor implements DataFrameCursor\n                 high = mid;\n             else {\n                 // In case of multiple equal values, find the first\n-                int increment = scanUp ? -1 : 1;\n-                for (long offset = 0; (mid + offset) > 0 && (mid + offset) < high; offset += increment) {\n-                    if (midVal != column.getLong((mid + offset) * 8))\n-                        return mid + offset - increment;\n+                while (mid > 0 && mid < high) {\n+                    if (midVal != column.getLong(mid * 8)) {\n+                        mid -= increment;\n+                        break;\n+                    }\n+                    mid += increment;\n                 }\n                 return mid;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2OTIxOQ==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436369219", "bodyText": "when loop goes all the way up with all values being the same the answer should be 0. Likewise if loop goes all the way down the answer should be end of column. mid is not a good outcome considering it is not mutated by the loop above.\nPerhaps there is an opportunity to kill two birds with one stone and simplify loop by mutating mid ?", "author": "bluestreak01", "createdAt": "2020-06-07T14:30:52Z", "path": "core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java", "diffHunk": "@@ -63,8 +63,15 @@ protected static long search(ReadOnlyColumn column, long value, long low, long h\n                 low = mid + 1;\n             else if (midVal > value)\n                 high = mid;\n-            else\n+            else {\n+                // In case of multiple equal values, find the first\n+                int increment = scanUp ? -1 : 1;\n+                for (long offset = 0; (mid + offset) > 0 && (mid + offset) < high; offset += increment) {\n+                    if (midVal != column.getLong((mid + offset) * 8))\n+                        return mid + offset - increment;\n+                }\n                 return mid;", "originalCommit": "5d4849e3232f5814a625631034d531599d257f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDM0NA==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436374344", "bodyText": "Fixed.", "author": "clickingbuttons", "createdAt": "2020-06-07T15:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2OTIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDQ4OA==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436374488", "bodyText": "Perfect, thanks \ud83d\udc4d", "author": "bluestreak01", "createdAt": "2020-06-07T15:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2OTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6cf67f947def1de23129fa55d258075fd7615025", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\nindex ef5a922b1..4a21edbfc 100644\n--- a/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n+++ b/core/src/main/java/io/questdb/cairo/AbstractIntervalDataFrameCursor.java\n\n@@ -65,10 +68,12 @@ public abstract class AbstractIntervalDataFrameCursor implements DataFrameCursor\n                 high = mid;\n             else {\n                 // In case of multiple equal values, find the first\n-                int increment = scanUp ? -1 : 1;\n-                for (long offset = 0; (mid + offset) > 0 && (mid + offset) < high; offset += increment) {\n-                    if (midVal != column.getLong((mid + offset) * 8))\n-                        return mid + offset - increment;\n+                while (mid > 0 && mid < high) {\n+                    if (midVal != column.getLong(mid * 8)) {\n+                        mid -= increment;\n+                        break;\n+                    }\n+                    mid += increment;\n                 }\n                 return mid;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2OTQ2Nw==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436369467", "bodyText": "may be here we can pass increment itself as constant, e.g.:\nstatic final int SCAN_UP = -1;\nstatic final int SCAN_DOWN = 1;\n\n...\nlong lo = search(column, intervalLo, 0, partitionLimit == -1 ? rowCount : partitionLimit, SCAN_UP);\nthis is both more readable and faster :)", "author": "bluestreak01", "createdAt": "2020-06-07T14:33:10Z", "path": "core/src/main/java/io/questdb/cairo/IntervalBwdDataFrameCursor.java", "diffHunk": "@@ -76,12 +76,12 @@ public DataFrame next() {\n \n                 // calculate intersection\n \n-                long lo = search(column, intervalLo, 0, partitionLimit == -1 ? rowCount : partitionLimit);\n+                long lo = search(column, intervalLo, 0, partitionLimit == -1 ? rowCount : partitionLimit, true);", "originalCommit": "5d4849e3232f5814a625631034d531599d257f57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDM1NA==", "url": "https://github.com/questdb/questdb/pull/371#discussion_r436374354", "bodyText": "Fixed.", "author": "clickingbuttons", "createdAt": "2020-06-07T15:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2OTQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6cf67f947def1de23129fa55d258075fd7615025", "chunk": "diff --git a/core/src/main/java/io/questdb/cairo/IntervalBwdDataFrameCursor.java b/core/src/main/java/io/questdb/cairo/IntervalBwdDataFrameCursor.java\nindex ada537af9..ceffba83c 100644\n--- a/core/src/main/java/io/questdb/cairo/IntervalBwdDataFrameCursor.java\n+++ b/core/src/main/java/io/questdb/cairo/IntervalBwdDataFrameCursor.java\n\n@@ -76,12 +76,12 @@ public class IntervalBwdDataFrameCursor extends AbstractIntervalDataFrameCursor\n \n                 // calculate intersection\n \n-                long lo = search(column, intervalLo, 0, partitionLimit == -1 ? rowCount : partitionLimit, true);\n+                long lo = search(column, intervalLo, 0, partitionLimit == -1 ? rowCount : partitionLimit, AbstractIntervalDataFrameCursor.SCAN_UP);\n                 if (lo < 0) {\n                     lo = -lo - 1;\n                 }\n \n-                long hi = search(column, intervalHi, lo, rowCount, false);\n+                long hi = search(column, intervalHi, lo, rowCount, AbstractIntervalDataFrameCursor.SCAN_DOWN);\n \n                 if (hi < 0) {\n                     hi = -hi - 1;\n"}}, {"oid": "6cf67f947def1de23129fa55d258075fd7615025", "url": "https://github.com/questdb/questdb/commit/6cf67f947def1de23129fa55d258075fd7615025", "message": "make code faster", "committedDate": "2020-06-07T15:24:45Z", "type": "commit"}, {"oid": "4132eb4ab7391c8ed883f10583cb782a5132bc85", "url": "https://github.com/questdb/questdb/commit/4132eb4ab7391c8ed883f10583cb782a5132bc85", "message": "need temp variable", "committedDate": "2020-06-07T15:43:52Z", "type": "commit"}, {"oid": "a5f058810e4d582ed993a758d41fbc648df193ec", "url": "https://github.com/questdb/questdb/commit/a5f058810e4d582ed993a758d41fbc648df193ec", "message": "remove temp variable", "committedDate": "2020-06-07T15:57:43Z", "type": "commit"}]}