{"pr_number": 101, "pr_title": "Round", "pr_createdAt": "2020-01-03T23:56:48Z", "pr_url": "https://github.com/questdb/questdb/pull/101", "timeline": [{"oid": "3c80c00accbac6a3d7db30bfb3470328a98a8d85", "url": "https://github.com/questdb/questdb/commit/3c80c00accbac6a3d7db30bfb3470328a98a8d85", "message": "feat: Adding negative scale support for round()", "committedDate": "2020-01-03T21:25:19Z", "type": "commit"}, {"oid": "ed95bdea0c10a0cc12d7c20d8a180ee445dd8986", "url": "https://github.com/questdb/questdb/commit/ed95bdea0c10a0cc12d7c20d8a180ee445dd8986", "message": "feat: Adding roundup() and rounddown()", "committedDate": "2020-01-03T23:52:52Z", "type": "commit"}, {"oid": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2", "url": "https://github.com/questdb/questdb/commit/b44529cac60bb9f7dd1309ea29126fc2d7f63cc2", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-04T23:39:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTQ1NA==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061454", "bodyText": "Now that you know right is constant there no need to pass Function, pass int instead. This will eliminate possible function call for every row.", "author": "bluestreak01", "createdAt": "2020-01-05T00:02:11Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?\n+                    new FuncConst(position, args.getQuick(0), precision) :\n+                    new DoubleConstant(position, Double.NaN);\n+        }\n+        return new Func(position, args.getQuick(0), args.getQuick(1));\n+    }\n+\n+    private static class FuncConst extends DoubleFunction implements BinaryFunction {\n+        private final Function left;\n+        private final Function right;\n+\n+        public FuncConst(int position, Function left, Function right) {", "originalCommit": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9933e52154cd3eae703af239f4513a803a87ee78", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 1ff052fe2..c4b74bbee 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -30,7 +30,6 @@ import io.questdb.cairo.sql.Function;\n import io.questdb.cairo.sql.Record;\n import io.questdb.griffin.engine.functions.BinaryFunction;\n import io.questdb.griffin.engine.functions.DoubleFunction;\n-import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n import io.questdb.std.Numbers;\n import io.questdb.std.NumericException;\n import io.questdb.std.ObjList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTUzMQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061531", "bodyText": "the check\nr > 0\n\ncan be done in factory and instead of one FuncConst class we could have two: FuncPosConst and FuncNegConst, which will invoke respective Numbers static function.", "author": "bluestreak01", "createdAt": "2020-01-05T00:04:15Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?\n+                    new FuncConst(position, args.getQuick(0), precision) :\n+                    new DoubleConstant(position, Double.NaN);\n+        }\n+        return new Func(position, args.getQuick(0), args.getQuick(1));\n+    }\n+\n+    private static class FuncConst extends DoubleFunction implements BinaryFunction {\n+        private final Function left;\n+        private final Function right;\n+\n+        public FuncConst(int position, Function left, Function right) {\n+            super(position);\n+            this.left = left;\n+            this.right = right;\n+        }\n+\n+        @Override\n+        public double getDouble(Record rec) {\n+            final double l = left.getDouble(rec);\n+            if (l != l) {\n+                return l;\n+            }\n+\n+            final int r = right.getInt(null);\n+            return (r > 0) ? Numbers.roundDownPosScale(l, r) : Numbers.roundDownNegScale(l, r);", "originalCommit": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9933e52154cd3eae703af239f4513a803a87ee78", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 1ff052fe2..c4b74bbee 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -30,7 +30,6 @@ import io.questdb.cairo.sql.Function;\n import io.questdb.cairo.sql.Record;\n import io.questdb.griffin.engine.functions.BinaryFunction;\n import io.questdb.griffin.engine.functions.DoubleFunction;\n-import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n import io.questdb.std.Numbers;\n import io.questdb.std.NumericException;\n import io.questdb.std.ObjList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061545", "bodyText": "what is the secret behind comparing squared values, why not compare precisionValue and pow10max directly?", "author": "bluestreak01", "createdAt": "2020-01-05T00:05:20Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            return (precisionValue != Numbers.INT_NaN && precisionValue * precisionValue <= Numbers.pow10max * Numbers.pow10max) ?", "originalCommit": "b44529cac60bb9f7dd1309ea29126fc2d7f63cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTY5MQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061691", "bodyText": "precisionValue can be positive or negative while pow10max is positive only", "author": "TheTanc", "createdAt": "2020-01-05T00:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc0Mg==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061742", "bodyText": "ok, the kicker here what checking for negative before compare is faster than double multiplication. Rule of thumb is to avoid multiplication and division at all costs", "author": "bluestreak01", "createdAt": "2020-01-05T00:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc2Mg==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363061762", "bodyText": "abs() compare is faster", "author": "bluestreak01", "createdAt": "2020-01-05T00:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9933e52154cd3eae703af239f4513a803a87ee78", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 1ff052fe2..c4b74bbee 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -30,7 +30,6 @@ import io.questdb.cairo.sql.Function;\n import io.questdb.cairo.sql.Record;\n import io.questdb.griffin.engine.functions.BinaryFunction;\n import io.questdb.griffin.engine.functions.DoubleFunction;\n-import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n import io.questdb.std.Numbers;\n import io.questdb.std.NumericException;\n import io.questdb.std.ObjList;\n"}}, {"oid": "9933e52154cd3eae703af239f4513a803a87ee78", "url": "https://github.com/questdb/questdb/commit/9933e52154cd3eae703af239f4513a803a87ee78", "message": "feat: Adding roundup() and rounddown()", "committedDate": "2020-01-05T00:13:14Z", "type": "commit"}, {"oid": "45b44416261d8c9b81ecd8365a576c274d790d19", "url": "https://github.com/questdb/questdb/commit/45b44416261d8c9b81ecd8365a576c274d790d19", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-05T00:13:14Z", "type": "commit"}, {"oid": "b061755643f8ce4d917c2b7b04033834f7a2bf58", "url": "https://github.com/questdb/questdb/commit/b061755643f8ce4d917c2b7b04033834f7a2bf58", "message": "Merge branch 'round' of https://github.com/questdb/questdb into round", "committedDate": "2020-01-05T00:13:33Z", "type": "commit"}, {"oid": "d11c41163ca38526cfa4490f48eb9ed3cf014e57", "url": "https://github.com/questdb/questdb/commit/d11c41163ca38526cfa4490f48eb9ed3cf014e57", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-05T00:56:03Z", "type": "commit"}, {"oid": "1ac490981b025a63d9ce4d6a6fd98749f730f927", "url": "https://github.com/questdb/questdb/commit/1ac490981b025a63d9ce4d6a6fd98749f730f927", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-05T00:58:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzM0Nw==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063347", "bodyText": "technically, <= will execute a little slower that >. This branch can be inverted without changing logic of the code.", "author": "bluestreak01", "createdAt": "2020-01-05T01:07:22Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {", "originalCommit": "1ac490981b025a63d9ce4d6a6fd98749f730f927", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex b193c8f02..158a5b607 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -46,14 +46,20 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n \n     @Override\n     public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n-        Function precision = args.getQuick(1);\n-        if (precision.isConstant()) {\n-            int precisionValue = precision.getInt(null);\n-            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n-                if (precisionValue >= 0) {\n-                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n                 }\n-                return new FuncNegConst(position, args.getQuick(0), precisionValue);\n             }\n             new DoubleConstant(position, Double.NaN);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzM4NQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063385", "bodyText": "in the same vane, x >= 0 is slower than x > -1. The outcome is the same though", "author": "bluestreak01", "createdAt": "2020-01-05T01:08:11Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n+                if (precisionValue >= 0) {", "originalCommit": "1ac490981b025a63d9ce4d6a6fd98749f730f927", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex b193c8f02..158a5b607 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -46,14 +46,20 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n \n     @Override\n     public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n-        Function precision = args.getQuick(1);\n-        if (precision.isConstant()) {\n-            int precisionValue = precision.getInt(null);\n-            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n-                if (precisionValue >= 0) {\n-                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n                 }\n-                return new FuncNegConst(position, args.getQuick(0), precisionValue);\n             }\n             new DoubleConstant(position, Double.NaN);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4MA==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063480", "bodyText": "here is a suggestion: when we pass precisionValue as is to this constructor we will have to execute -scale for every row. If on other hand we pass -previsionValue the functions can be rewritten to take positive scale value and but interpret it as negative. Thus not execute - operator for every row.", "author": "bluestreak01", "createdAt": "2020-01-05T01:11:45Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);\n+        if (precision.isConstant()) {\n+            int precisionValue = precision.getInt(null);\n+            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n+                if (precisionValue >= 0) {\n+                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+                }\n+                return new FuncNegConst(position, args.getQuick(0), precisionValue);", "originalCommit": "1ac490981b025a63d9ce4d6a6fd98749f730f927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NTU3NQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363065575", "bodyText": "Will leave open for the moment - can only do once I convert other functions - round() and roundup() to the same model.", "author": "TheTanc", "createdAt": "2020-01-05T02:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex b193c8f02..158a5b607 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -46,14 +46,20 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n \n     @Override\n     public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n-        Function precision = args.getQuick(1);\n-        if (precision.isConstant()) {\n-            int precisionValue = precision.getInt(null);\n-            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n-                if (precisionValue >= 0) {\n-                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n                 }\n-                return new FuncNegConst(position, args.getQuick(0), precisionValue);\n             }\n             new DoubleConstant(position, Double.NaN);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MzQ4NA==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363063484", "bodyText": "may be we should use scale term instead of precision", "author": "bluestreak01", "createdAt": "2020-01-05T01:12:15Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function precision = args.getQuick(1);", "originalCommit": "1ac490981b025a63d9ce4d6a6fd98749f730f927", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex b193c8f02..158a5b607 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -46,14 +46,20 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n \n     @Override\n     public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n-        Function precision = args.getQuick(1);\n-        if (precision.isConstant()) {\n-            int precisionValue = precision.getInt(null);\n-            if (precisionValue != Numbers.INT_NaN && Math.abs(precisionValue) <= Numbers.pow10max) {\n-                if (precisionValue >= 0) {\n-                    return new FuncPosConst(position, args.getQuick(0), precisionValue);\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n                 }\n-                return new FuncNegConst(position, args.getQuick(0), precisionValue);\n             }\n             new DoubleConstant(position, Double.NaN);\n         }\n"}}, {"oid": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "url": "https://github.com/questdb/questdb/commit/281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-05T02:38:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NTk5NQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363065995", "bodyText": "no return statement?", "author": "bluestreak01", "createdAt": "2020-01-05T02:42:30Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);", "originalCommit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24a1c06dbd938b6800671bf7c4e571053b9de2c0", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 158a5b607..87f581c0e 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -50,18 +50,14 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n         if (scale.isConstant()) {\n             int scaleValue = scale.getInt(null);\n             if (scaleValue != Numbers.INT_NaN) {\n-                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                if (scaleValue > -1 && scaleValue < Numbers.pow10max) {\n                     return new FuncPosConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, Double.NaN);\n                 }\n                 if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n                     return new FuncNegConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, 0.0);\n                 }\n+                return new DoubleConstant(position, Double.NaN);\n             }\n-            new DoubleConstant(position, Double.NaN);\n         }\n         return new Func(position, args.getQuick(0), args.getQuick(1));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NjAxMg==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363066012", "bodyText": "no return statement and perhaps this should be a NaN constant rather than 0", "author": "bluestreak01", "createdAt": "2020-01-05T02:42:55Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);", "originalCommit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24a1c06dbd938b6800671bf7c4e571053b9de2c0", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 158a5b607..87f581c0e 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -50,18 +50,14 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n         if (scale.isConstant()) {\n             int scaleValue = scale.getInt(null);\n             if (scaleValue != Numbers.INT_NaN) {\n-                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                if (scaleValue > -1 && scaleValue < Numbers.pow10max) {\n                     return new FuncPosConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, Double.NaN);\n                 }\n                 if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n                     return new FuncNegConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, 0.0);\n                 }\n+                return new DoubleConstant(position, Double.NaN);\n             }\n-            new DoubleConstant(position, Double.NaN);\n         }\n         return new Func(position, args.getQuick(0), args.getQuick(1));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2NjA3Nw==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363066077", "bodyText": "no return statement?", "author": "bluestreak01", "createdAt": "2020-01-05T02:45:09Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, Double.NaN);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                } else {\n+                    new DoubleConstant(position, 0.0);\n+                }\n+            }\n+            new DoubleConstant(position, Double.NaN);", "originalCommit": "281381762ab3b6553b54c1fa9b62d5ddf47c6a14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24a1c06dbd938b6800671bf7c4e571053b9de2c0", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 158a5b607..87f581c0e 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -50,18 +50,14 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n         if (scale.isConstant()) {\n             int scaleValue = scale.getInt(null);\n             if (scaleValue != Numbers.INT_NaN) {\n-                if (scaleValue > 0 && scaleValue < Numbers.pow10max) {\n+                if (scaleValue > -1 && scaleValue < Numbers.pow10max) {\n                     return new FuncPosConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, Double.NaN);\n                 }\n                 if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n                     return new FuncNegConst(position, args.getQuick(0), scaleValue);\n-                } else {\n-                    new DoubleConstant(position, 0.0);\n                 }\n+                return new DoubleConstant(position, Double.NaN);\n             }\n-            new DoubleConstant(position, Double.NaN);\n         }\n         return new Func(position, args.getQuick(0), args.getQuick(1));\n     }\n"}}, {"oid": "24a1c06dbd938b6800671bf7c4e571053b9de2c0", "url": "https://github.com/questdb/questdb/commit/24a1c06dbd938b6800671bf7c4e571053b9de2c0", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-05T14:00:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyMTM2MQ==", "url": "https://github.com/questdb/questdb/pull/101#discussion_r363121361", "bodyText": "when scaleValue is NaN we go ahead and return  heaviest implementation. Perhaps return statement just above this comment needs to sit outside if(scaleValue != Numbers.INT_NaN)", "author": "bluestreak01", "createdAt": "2020-01-05T22:26:33Z", "path": "core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*******************************************************************************\n+ *     ___                  _   ____  ____\n+ *    / _ \\ _   _  ___  ___| |_|  _ \\| __ )\n+ *   | | | | | | |/ _ \\/ __| __| | | |  _ \\\n+ *   | |_| | |_| |  __/\\__ \\ |_| |_| | |_) |\n+ *    \\__\\_\\\\__,_|\\___||___/\\__|____/|____/\n+ *\n+ *  Copyright (c) 2014-2019 Appsicle\n+ *  Copyright (c) 2019-2020 QuestDB\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+package io.questdb.griffin.engine.functions.math;\n+\n+import io.questdb.griffin.FunctionFactory;\n+import io.questdb.cairo.CairoConfiguration;\n+import io.questdb.cairo.sql.Function;\n+import io.questdb.cairo.sql.Record;\n+import io.questdb.griffin.engine.functions.BinaryFunction;\n+import io.questdb.griffin.engine.functions.DoubleFunction;\n+import io.questdb.griffin.engine.functions.UnaryFunction;\n+import io.questdb.griffin.engine.functions.constants.DoubleConstant;\n+import io.questdb.std.Numbers;\n+import io.questdb.std.NumericException;\n+import io.questdb.std.ObjList;\n+\n+\n+public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n+\n+    @Override\n+    public String getSignature() {\n+        return \"rounddown(DI)\";\n+    }\n+\n+    @Override\n+    public Function newInstance(ObjList<Function> args, int position, CairoConfiguration configuration) {\n+        Function scale = args.getQuick(1);\n+        if (scale.isConstant()) {\n+            int scaleValue = scale.getInt(null);\n+            if (scaleValue != Numbers.INT_NaN) {\n+                if (scaleValue > -1 && scaleValue < Numbers.pow10max) {\n+                    return new FuncPosConst(position, args.getQuick(0), scaleValue);\n+                }\n+                if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n+                    return new FuncNegConst(position, args.getQuick(0), scaleValue);\n+                }\n+                return new DoubleConstant(position, Double.NaN);\n+            }", "originalCommit": "24a1c06dbd938b6800671bf7c4e571053b9de2c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebfd2ff16f9b2d1dd7b49521db1b1dc70d1352ca", "chunk": "diff --git a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\nindex 87f581c0e..4c5eba5d4 100644\n--- a/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n+++ b/core/src/main/java/io/questdb/griffin/engine/functions/math/RoundDownDoubleFunctionFactory.java\n\n@@ -56,8 +56,8 @@ public class RoundDownDoubleFunctionFactory implements FunctionFactory {\n                 if (scaleValue < 0 && scaleValue < -Numbers.pow10max) {\n                     return new FuncNegConst(position, args.getQuick(0), scaleValue);\n                 }\n-                return new DoubleConstant(position, Double.NaN);\n             }\n+            return new DoubleConstant(position, Double.NaN);\n         }\n         return new Func(position, args.getQuick(0), args.getQuick(1));\n     }\n"}}, {"oid": "ebfd2ff16f9b2d1dd7b49521db1b1dc70d1352ca", "url": "https://github.com/questdb/questdb/commit/ebfd2ff16f9b2d1dd7b49521db1b1dc70d1352ca", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-06T09:00:59Z", "type": "commit"}, {"oid": "57858c0cb0898caeb68f6ed48b5000fcd60c29a2", "url": "https://github.com/questdb/questdb/commit/57858c0cb0898caeb68f6ed48b5000fcd60c29a2", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-06T14:09:31Z", "type": "commit"}, {"oid": "e2eb40ae4c13ee45dc850ac583e82f71295c4f41", "url": "https://github.com/questdb/questdb/commit/e2eb40ae4c13ee45dc850ac583e82f71295c4f41", "message": "feat: Constant optimisation for rounddown()", "committedDate": "2020-01-06T14:14:06Z", "type": "commit"}, {"oid": "3ca3701aff06dad858683fa76313229c5ceb5ae5", "url": "https://github.com/questdb/questdb/commit/3ca3701aff06dad858683fa76313229c5ceb5ae5", "message": "feat: Constant optimisation for round(), roundup(). Added -(DOUBLE)", "committedDate": "2020-01-06T17:44:58Z", "type": "commit"}, {"oid": "25c367a5812ed3ca9f1ffc441907d2e1565854c7", "url": "https://github.com/questdb/questdb/commit/25c367a5812ed3ca9f1ffc441907d2e1565854c7", "message": "feat: rename round_down/round_up", "committedDate": "2020-01-06T18:02:57Z", "type": "commit"}]}