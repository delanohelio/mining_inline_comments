{"pr_number": 1219, "pr_title": "Lets those using IntegrationTestSpanHandler know the difference between orphans and spans never started", "pr_createdAt": "2020-05-18T05:24:36Z", "pr_url": "https://github.com/openzipkin/brave/pull/1219", "timeline": [{"oid": "271d4573a42c318a405efad84c3aefc23ac8fa3a", "url": "https://github.com/openzipkin/brave/commit/271d4573a42c318a405efad84c3aefc23ac8fa3a", "message": "Improves handling of orphaned or unstarted spans\n\nThis integrates orphan handling so it is easier to tell if a span was\norphaned, or simply never started. This came up in Sleuth where some\nintegration tests never started a span and I didn't know which bug it\nwas.", "committedDate": "2020-05-18T05:25:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjMwNw==", "url": "https://github.com/openzipkin/brave/pull/1219#discussion_r426376307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                spanHandler.end(context, span, FINISHED); // NOT ABANDONED!\n          \n          \n            \n                spanHandler.end(context, span, FINISHED); // NOT ORPHANED!", "author": "codefromthecrypt", "createdAt": "2020-05-18T05:26:50Z", "path": "brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java", "diffHunk": "@@ -28,6 +29,25 @@\n   TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(2L).build();\n   MutableSpan span = new MutableSpan(context, null);\n \n+  @Test public void goodMessageForUnstartedSpan() {\n+    spanHandler.end(context, span, FINISHED); // NOT ABANDONED!", "originalCommit": "63e7251277feeb7ef6f4d96f0792cd05fb48410d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd569de8b22ac68a4c2839d53f7cf3c0ab6c194b", "chunk": "diff --git a/brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java b/brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java\nindex 0bdb7e334..ad248e159 100644\n--- a/brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java\n+++ b/brave-tests/src/test/java/brave/test/IntegrationTestSpanHandlerTest.java\n\n@@ -30,7 +30,7 @@ public class IntegrationTestSpanHandlerTest {\n   MutableSpan span = new MutableSpan(context, null);\n \n   @Test public void goodMessageForUnstartedSpan() {\n-    spanHandler.end(context, span, FINISHED); // NOT ABANDONED!\n+    spanHandler.end(context, span, FINISHED); // NOT ORPHANED!\n \n     assertThatThrownBy(spanHandler::takeLocalSpan)\n         .hasMessage(\n"}}, {"oid": "63e7251277feeb7ef6f4d96f0792cd05fb48410d", "url": "https://github.com/openzipkin/brave/commit/63e7251277feeb7ef6f4d96f0792cd05fb48410d", "message": "unnuke", "committedDate": "2020-05-18T05:28:14Z", "type": "commit"}, {"oid": "fd569de8b22ac68a4c2839d53f7cf3c0ab6c194b", "url": "https://github.com/openzipkin/brave/commit/fd569de8b22ac68a4c2839d53f7cf3c0ab6c194b", "message": "always get these mixed up", "committedDate": "2020-05-18T05:27:00Z", "type": "commit"}, {"oid": "438aec0ce80fa448a44c2d9e3bd8854c69021744", "url": "https://github.com/openzipkin/brave/commit/438aec0ce80fa448a44c2d9e3bd8854c69021744", "message": "better example", "committedDate": "2020-05-18T05:34:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3ODczNw==", "url": "https://github.com/openzipkin/brave/pull/1219#discussion_r426378737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // This will not be exactly the right timestamp Tracing.Builder.clock is overridden.\n          \n          \n            \n                    // This will not be exactly the right timestamp when Tracing.Builder.clock is overridden.", "author": "codefromthecrypt", "createdAt": "2020-05-18T05:37:00Z", "path": "brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java", "diffHunk": "@@ -90,14 +116,31 @@\n  */\n public final class IntegrationTestSpanHandler extends SpanHandler implements TestRule {\n   static final String ANY_STRING = \".+\";\n+\n   /**\n    * When testing servers or asynchronous clients, spans are finished on a worker thread. In order\n    * to read them on the main thread, we use a concurrent queue. As some implementations report\n    * after a response is sent, we use a blocking queue to prevent race conditions in tests.\n    */\n-  BlockingQueue<MutableSpan> spans = new LinkedBlockingQueue<>();\n+  final BlockingQueue<MutableSpan> spans = new LinkedBlockingQueue<>();\n+  final SpanHandler orphanTracker;\n   boolean ignoreAnySpans;\n \n+  public IntegrationTestSpanHandler() {\n+    // OrphanTracker detects to see if it should add \"brave.flushed\" or not, as it is used in\n+    // production some times and avoiding this could be helpful. This forces a failed match,\n+    // so that we can detect orphans even when no data was added.\n+    MutableSpan intentionallyWrongDefaultSpan = new MutableSpan();\n+    intentionallyWrongDefaultSpan.tag(\"not\", \"me\");\n+    orphanTracker = OrphanTracker.newBuilder()\n+        .defaultSpan(intentionallyWrongDefaultSpan)\n+        // This will not be exactly the right timestamp Tracing.Builder.clock is overridden.", "originalCommit": "438aec0ce80fa448a44c2d9e3bd8854c69021744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d5cba2fb7355f19aa0ea4a47ca77d71fb64085f", "chunk": "diff --git a/brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java b/brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java\nindex daa1f6137..18ea0a687 100644\n--- a/brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java\n+++ b/brave-tests/src/main/java/brave/test/IntegrationTestSpanHandler.java\n\n@@ -134,7 +134,7 @@ public final class IntegrationTestSpanHandler extends SpanHandler implements Tes\n     intentionallyWrongDefaultSpan.tag(\"not\", \"me\");\n     orphanTracker = OrphanTracker.newBuilder()\n         .defaultSpan(intentionallyWrongDefaultSpan)\n-        // This will not be exactly the right timestamp Tracing.Builder.clock is overridden.\n+        // This will not be exactly the right timestamp when Tracing.Builder.clock is overridden.\n         // However, it is rare to override this in an integration test and complex to pass it.\n         .clock(Platform.get().clock())\n         // Make sure CI can see when things leak: Intentional leak tests shouldn't use this handler.\n"}}, {"oid": "0d5cba2fb7355f19aa0ea4a47ca77d71fb64085f", "url": "https://github.com/openzipkin/brave/commit/0d5cba2fb7355f19aa0ea4a47ca77d71fb64085f", "message": "grammar", "committedDate": "2020-05-18T05:37:08Z", "type": "commit"}]}