{"pr_number": 1121, "pr_title": "Polishes ITRemote and re-uses for JMS testing", "pr_createdAt": "2020-03-24T02:51:46Z", "pr_url": "https://github.com/openzipkin/brave/pull/1121", "timeline": [{"oid": "2a6d195f0eb6dee926076ea11ced7e4db7f97a86", "url": "https://github.com/openzipkin/brave/commit/2a6d195f0eb6dee926076ea11ced7e4db7f97a86", "message": "Polishes ITRemote and re-uses for JMS testing\n\nThis is a part of an overall deduplication of text fixtures and will\ncontinue across all instrumentation.", "committedDate": "2020-03-24T02:50:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDY5Nw==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396874697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Blocks until a local span was reported. We define a local span as one with a timestamp and\n          \n          \n            \n               * Blocks until a local span was reported. We define a local span as one with a timestamp and no", "author": "codefromthecrypt", "createdAt": "2020-03-24T02:52:20Z", "path": "brave-tests/src/main/java/brave/test/ITRemote.java", "diffHunk": "@@ -239,15 +239,39 @@ private Span doTakeSpan(boolean flushed) throws InterruptedException {\n     }\n   };\n \n+  /**\n+   * Blocks until a local span was reported. We define a local span as one with a timestamp and", "originalCommit": "2a6d195f0eb6dee926076ea11ced7e4db7f97a86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60b5484d4b901e02dbe3cc51626970514f283e65", "chunk": "diff --git a/brave-tests/src/main/java/brave/test/ITRemote.java b/brave-tests/src/main/java/brave/test/ITRemote.java\nindex e9562b356..863a686a3 100644\n--- a/brave-tests/src/main/java/brave/test/ITRemote.java\n+++ b/brave-tests/src/main/java/brave/test/ITRemote.java\n\n@@ -240,7 +240,7 @@ public abstract class ITRemote {\n   };\n \n   /**\n-   * Blocks until a local span was reported. We define a local span as one with a timestamp and\n+   * Blocks until a local span was reported. We define a local span as one with a timestamp and no\n    * duration, kind, or remote endpoint. This will fail if there's an \"error\" tag. If you expect a\n    * failure, use {@link #takeLocalSpanWithError(String)} instead.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NDk0OA==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396874948", "bodyText": "this is just polishing", "author": "codefromthecrypt", "createdAt": "2020-03-24T02:53:20Z", "path": "instrumentation/jms/src/main/java/brave/jms/TracingCompletionListener.java", "diffHunk": "@@ -40,23 +40,19 @@ static CompletionListener create(CompletionListener delegate, Span span,\n   }\n \n   @Override public void onCompletion(Message message) {\n-    Scope ws = current.maybeScope(span.context());", "originalCommit": "2a6d195f0eb6dee926076ea11ced7e4db7f97a86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "bfe1863d94bc8821d2eae296fb78d00b64220072", "url": "https://github.com/openzipkin/brave/commit/bfe1863d94bc8821d2eae296fb78d00b64220072", "message": "hardens 1.1 failure test", "committedDate": "2020-03-24T03:01:15Z", "type": "commit"}, {"oid": "60b5484d4b901e02dbe3cc51626970514f283e65", "url": "https://github.com/openzipkin/brave/commit/60b5484d4b901e02dbe3cc51626970514f283e65", "message": "Update brave-tests/src/main/java/brave/test/ITRemote.java", "committedDate": "2020-03-24T03:04:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDQ5NA==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396904494", "bodyText": "I wonder if this results in too many permutations. I'm thinking of adding BraveAssertions to allow something like\nassertThat(takeSpan()).isLocal().hasError(\"failed\");\nNot something you have to do :) But wondering what you think of the idea.", "author": "anuraaga", "createdAt": "2020-03-24T05:06:41Z", "path": "brave-tests/src/main/java/brave/test/ITRemote.java", "diffHunk": "@@ -239,15 +239,39 @@ private Span doTakeSpan(boolean flushed) throws InterruptedException {\n     }\n   };\n \n+  /**\n+   * Blocks until a local span was reported. We define a local span as one with a timestamp and no\n+   * duration, kind, or remote endpoint. This will fail if there's an \"error\" tag. If you expect a\n+   * failure, use {@link #takeLocalSpanWithError(String)} instead.\n+   */\n   protected Span takeLocalSpan() throws InterruptedException {\n     Span local = takeSpan();\n+    assertLocalSpan(local);\n+    return local;\n+  }\n+\n+  /** Like {@link #takeLocalSpan()} except an error tag must match the given value. */\n+  protected Span takeLocalSpanWithError(String errorTag)", "originalCommit": "60b5484d4b901e02dbe3cc51626970514f283e65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNjc3MQ==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396906771", "bodyText": "right now there are two permutations, local and remote. there can't be any other permutations.\nthe explicit handling of error is really really important because until we made error mandatory we actually had bugs we never noticed.", "author": "codefromthecrypt", "createdAt": "2020-03-24T05:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzg4NQ==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396907885", "bodyText": "it could be the case that some of the comparison operators could fit in an assertions class though, ex childOf parentOf etc\nlet's just please not take the base preconditions out, that verify this is or is not a local span and is or is not error. deferring these things would re-introduce the problems the code just only for a day has so far solved.", "author": "codefromthecrypt", "createdAt": "2020-03-24T05:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzk5OQ==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396907999", "bodyText": "Ah ok makes sense - remembered that takeSpan verifies there is no error which does seem better.", "author": "anuraaga", "createdAt": "2020-03-24T05:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDk0Ng==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396914946", "bodyText": "the other thing is accidental permutation. we had tests that thought they were acting on a local span when they were acting on a remote one.. I tried to limit most of this by using scopes instead of parent spans", "author": "codefromthecrypt", "createdAt": "2020-03-24T05:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "715d3015e1e5da66eb4ef4533425163d97fa9fec", "chunk": "diff --git a/brave-tests/src/main/java/brave/test/ITRemote.java b/brave-tests/src/main/java/brave/test/ITRemote.java\nindex 863a686a3..5d6add494 100644\n--- a/brave-tests/src/main/java/brave/test/ITRemote.java\n+++ b/brave-tests/src/main/java/brave/test/ITRemote.java\n\n@@ -245,15 +229,14 @@ public abstract class ITRemote {\n    * failure, use {@link #takeLocalSpanWithError(String)} instead.\n    */\n   protected Span takeLocalSpan() throws InterruptedException {\n-    Span local = takeSpan();\n+    Span local = doTakeSpan(null, false);\n     assertLocalSpan(local);\n     return local;\n   }\n \n   /** Like {@link #takeLocalSpan()} except an error tag must match the given value. */\n-  protected Span takeLocalSpanWithError(String errorTag)\n-    throws InterruptedException {\n-    Span result = takeSpanWithError(errorTag);\n+  protected Span takeLocalSpanWithError(String errorTag) throws InterruptedException {\n+    Span result = doTakeSpan(errorTag, false);\n     assertLocalSpan(result);\n     return result;\n   }\n"}}, {"oid": "c484414d0264edb0cc53d7ad58997788e6ff615d", "url": "https://github.com/openzipkin/brave/commit/c484414d0264edb0cc53d7ad58997788e6ff615d", "message": "correct the exception", "committedDate": "2020-03-24T05:16:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwODE3Mw==", "url": "https://github.com/openzipkin/brave/pull/1121#discussion_r396908173", "bodyText": "@anuraaga for example, the error assertion showed that the earlier tests were bad syntax. the error returned had nothing to do with the session that was closed. it is really important to not undo this as there are still a boatload of hidden bugs to find.", "author": "codefromthecrypt", "createdAt": "2020-03-24T05:22:53Z", "path": "instrumentation/jms/src/test/java/brave/jms/ITJms_1_1_TracingMessageProducer.java", "diffHunk": "@@ -191,7 +191,7 @@ void should_record_properties(Map<String, String> producerTags) throws Exception\n \n   @Test public void should_record_error() throws Exception {\n     tracedSession.close();\n-    should_record_error(() -> messageProducer.send(message));\n+    should_record_error(() -> messageProducer.send(jms.destination, message));", "originalCommit": "c484414d0264edb0cc53d7ad58997788e6ff615d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "715d3015e1e5da66eb4ef4533425163d97fa9fec", "url": "https://github.com/openzipkin/brave/commit/715d3015e1e5da66eb4ef4533425163d97fa9fec", "message": "Moved the edge case about flushing to dubbo", "committedDate": "2020-03-24T06:01:32Z", "type": "commit"}]}