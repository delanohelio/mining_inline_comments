{"pr_number": 1159, "pr_title": "Removes zipkin dependency from Brave core", "pr_createdAt": "2020-04-14T09:57:48Z", "pr_url": "https://github.com/openzipkin/brave/pull/1159", "timeline": [{"oid": "1b56fdda8f3754e32905e322d9a57282f8a8a6a9", "url": "https://github.com/openzipkin/brave/commit/1b56fdda8f3754e32905e322d9a57282f8a8a6a9", "message": "Removes zipkin dependency from Brave core\n\nThis implements json directly in MutableSpan in order to decouple Brave\nfrom Zipkin types. Future work can decouple ancillary modules such as\ntests or make a high-performance code for zipkin-reporter-java (or even\na non zipkin-reporter-java variant).", "committedDate": "2020-04-14T09:56:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjQ3Ng==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408036476", "bodyText": "Forget if we have a ThreadLocal StringBuilder buffer, it would probably help here. But can do it later if we don't have it conveniently available.", "author": "anuraaga", "createdAt": "2020-04-14T10:35:56Z", "path": "brave/src/main/java/brave/handler/MutableSpan.java", "diffHunk": "@@ -746,6 +748,129 @@ static boolean updateOrRemove(ArrayList list, int i, Object value, @Nullable Obj\n       && equal(error, that.error);\n   }\n \n+  /** Writes this span in Zipkin V2 format */\n+  // Ported from zipkin2.internal.V2SpanWriter and may eventually move to a separate codec type\n+  @Override public String toString() {\n+    StringBuilder b = new StringBuilder();", "originalCommit": "1b56fdda8f3754e32905e322d9a57282f8a8a6a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0OTI5MA==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408049290", "bodyText": "if we bound it I suppose we could? This is currently only used in logging and I'm not sure if we want to leave a stringbuilder on each thread just in case toString is called...", "author": "codefromthecrypt", "createdAt": "2020-04-14T10:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0OTcxNQ==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408049715", "bodyText": "in a reporter totally agree (as the reporter thread is likely only 1 or few)", "author": "codefromthecrypt", "createdAt": "2020-04-14T11:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1MDI0Mw==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408050243", "bodyText": "by logging I mean if no-one sets a handler or a spanReporter", "author": "codefromthecrypt", "createdAt": "2020-04-14T11:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1MDI3MA==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408050270", "bodyText": "Ah yeah that sounds good", "author": "anuraaga", "createdAt": "2020-04-14T11:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "aaaf111d070a5b6ed1af11204111e7d9ff7e6ff2", "chunk": "diff --git a/brave/src/main/java/brave/handler/MutableSpan.java b/brave/src/main/java/brave/handler/MutableSpan.java\nindex bddf95a9e..fea926771 100644\n--- a/brave/src/main/java/brave/handler/MutableSpan.java\n+++ b/brave/src/main/java/brave/handler/MutableSpan.java\n\n@@ -774,7 +774,7 @@ public final class MutableSpan implements Cloneable {\n     }\n     if (name != null) {\n       b.append(\",\\\"name\\\":\\\"\");\n-      b.append(jsonEscape(name));\n+      jsonEscape(name, b);\n       b.append('\"');\n     }\n     if (startTimestamp != 0L) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjc5OQ==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408036799", "bodyText": "Should be a pretty simple win to accept StringBuilder as argument here instead of allocating inside.", "author": "anuraaga", "createdAt": "2020-04-14T10:36:32Z", "path": "brave/src/main/java/brave/internal/JsonEscaper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2013-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package brave.internal;\n+\n+// Initially, a copy of zipkin2.internal.JsonEscaper\n+public final class JsonEscaper {\n+  public static CharSequence jsonEscape(CharSequence v) {", "originalCommit": "1b56fdda8f3754e32905e322d9a57282f8a8a6a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0NDkzNg==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r408044936", "bodyText": "good point!", "author": "codefromthecrypt", "createdAt": "2020-04-14T10:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNjc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aaaf111d070a5b6ed1af11204111e7d9ff7e6ff2", "chunk": "diff --git a/brave/src/main/java/brave/internal/JsonEscaper.java b/brave/src/main/java/brave/internal/JsonEscaper.java\nindex 18c58c7bf..84d103306 100644\n--- a/brave/src/main/java/brave/internal/JsonEscaper.java\n+++ b/brave/src/main/java/brave/internal/JsonEscaper.java\n\n@@ -15,14 +15,13 @@ package brave.internal;\n \n // Initially, a copy of zipkin2.internal.JsonEscaper\n public final class JsonEscaper {\n-  public static CharSequence jsonEscape(CharSequence v) {\n-    int length = v.length();\n-    if (length == 0) return v;\n+  public static void jsonEscape(CharSequence in, StringBuilder out) {\n+    int length = in.length();\n+    if (length == 0) return;\n \n     int afterReplacement = 0;\n-    StringBuilder builder = null;\n     for (int i = 0; i < length; i++) {\n-      char c = v.charAt(i);\n+      char c = in.charAt(i);\n       String replacement;\n       if (c < 0x80) {\n         replacement = REPLACEMENT_CHARS[c];\n"}}, {"oid": "aaaf111d070a5b6ed1af11204111e7d9ff7e6ff2", "url": "https://github.com/openzipkin/brave/commit/aaaf111d070a5b6ed1af11204111e7d9ff7e6ff2", "message": "builder and fix ma beans", "committedDate": "2020-04-14T10:58:32Z", "type": "commit"}, {"oid": "a6734fcd9d228a3a983f21d85ce0ef141defbd06", "url": "https://github.com/openzipkin/brave/commit/a6734fcd9d228a3a983f21d85ce0ef141defbd06", "message": "Adds count needed by sizers", "committedDate": "2020-04-15T03:47:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2OTk2MA==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r446969960", "bodyText": "@adriancole This logging created SO much noise in logs.\nI suggest that it should be a lower level of logging (not INFO) or (and maybe in addition) let the logger be logger of LogFinishedSpanHandler and not the main Tracer.class logger so we can configure this logger specifically.\nCurrently the only way to reduce the noise is to change the Tracer logger to log only WARN and above.", "author": "usulkies", "createdAt": "2020-06-29T13:26:50Z", "path": "brave/src/main/java/brave/Tracing.java", "diffHunk": "@@ -403,8 +406,19 @@ public Builder trackOrphans() {\n     public Tracing build() {\n       return new Default(this);\n     }\n+  }\n \n-    Builder() {\n+  static final class LogFinishedSpanHandler extends FinishedSpanHandler {\n+    final Logger logger = Logger.getLogger(Tracer.class.getName());\n+\n+    @Override public boolean handle(TraceContext context, MutableSpan span) {\n+      if (!logger.isLoggable(Level.INFO)) return false;", "originalCommit": "a6734fcd9d228a3a983f21d85ce0ef141defbd06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzODIwMQ==", "url": "https://github.com/openzipkin/brave/pull/1159#discussion_r447338201", "bodyText": "moving this question to here openzipkin/zipkin-support#22 to avoid spamming here. you can also use https://gitter.im/openzipkin/zipkin next time.", "author": "codefromthecrypt", "createdAt": "2020-06-30T00:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2OTk2MA=="}], "type": "inlineReview", "revised_code": null}]}