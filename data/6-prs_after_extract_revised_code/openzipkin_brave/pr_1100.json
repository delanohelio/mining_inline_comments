{"pr_number": 1100, "pr_title": "Adds really long explanation about JMS being horrible", "pr_createdAt": "2020-02-25T03:16:27Z", "pr_url": "https://github.com/openzipkin/brave/pull/1100", "timeline": [{"oid": "7c35746ba699684302947ec736d390ac1554b321", "url": "https://github.com/openzipkin/brave/commit/7c35746ba699684302947ec736d390ac1554b321", "message": "Adds really long explanation about JMS being horrible\n\nThis is mainly to answer a request, the same rationale would apply to\njust about anything as it is common for implementations to implement\nmultiple interfaces (ex connection factory) and also everything in old\napis to return null.\n\nSee https://github.com/openzipkin/brave/pull/1099#discussion_r383629865", "committedDate": "2020-02-25T03:15:05Z", "type": "commit"}, {"oid": "e7632016bc7ef09def5a658340ab1e7843391d56", "url": "https://github.com/openzipkin/brave/commit/e7632016bc7ef09def5a658340ab1e7843391d56", "message": "missing p", "committedDate": "2020-02-25T03:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjIxMw==", "url": "https://github.com/openzipkin/brave/pull/1100#discussion_r383642213", "bodyText": "I probably should have just given a suggestion than request ;) I didn't mean channel name, just a line or so in isQueue above the getQueueName null check saying while the spec doesn't seem to define it, in practice implementations that implement both interfaces return only one of the names for which they are active.", "author": "anuraaga", "createdAt": "2020-02-25T03:36:44Z", "path": "instrumentation/jms/src/main/java/brave/jms/MessageParser.java", "diffHunk": "@@ -58,6 +59,16 @@ static boolean isQueue(@Nullable Destination destination) {\n     return isQueue;\n   }\n \n+  /**\n+   * Similar to other properties, {@code null} should be expected even if it seems unintuitive.", "originalCommit": "e7632016bc7ef09def5a658340ab1e7843391d56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b8b34ac28a70a97ae2ce2134bd0cafccd754ab5", "chunk": "diff --git a/instrumentation/jms/src/main/java/brave/jms/MessageParser.java b/instrumentation/jms/src/main/java/brave/jms/MessageParser.java\nindex 371bc2123..aadc693de 100644\n--- a/instrumentation/jms/src/main/java/brave/jms/MessageParser.java\n+++ b/instrumentation/jms/src/main/java/brave/jms/MessageParser.java\n\n@@ -62,12 +66,12 @@ final class MessageParser {\n   /**\n    * Similar to other properties, {@code null} should be expected even if it seems unintuitive.\n    *\n-   * <p>The JMS 1.1 specification 4.2.1 suggests destination details are provider specific. Further,\n-   * JavaDoc on {@link Queue#getQueueName()} and {@link Topic#getTopicName()} say \"Clients that\n-   * depend upon the name are not portable.\" Next, such operations can raise {@link JMSException}\n-   * messages which this code can coerce to null. Finally, destinations are not constrained to\n-   * implement only one of {@link Queue} or {@link Destination}. This implies one could return null\n-   * while the other doesn't, such as was the case in issue #1098.\n+   * <p>The JMS 1.1 specification 4.2.1 suggests destination details are provider specific.\n+   * Further, JavaDoc on {@link Queue#getQueueName()} and {@link Topic#getTopicName()} say \"Clients\n+   * that depend upon the name are not portable.\" Next, such operations can raise {@link\n+   * JMSException} messages which this code can coerce to null. Finally, destinations are not\n+   * constrained to implement only one of {@link Queue} or {@link Destination}. This implies one\n+   * could return null while the other doesn't, such as was the case in issue #1098.\n    */\n   @Nullable static String channelName(@Nullable Destination destination) {\n     if (destination == null) return null;\n"}}, {"oid": "6b8b34ac28a70a97ae2ce2134bd0cafccd754ab5", "url": "https://github.com/openzipkin/brave/commit/6b8b34ac28a70a97ae2ce2134bd0cafccd754ab5", "message": "mas texto", "committedDate": "2020-02-25T03:48:56Z", "type": "commit"}]}