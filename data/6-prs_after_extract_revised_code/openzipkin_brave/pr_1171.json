{"pr_number": 1171, "pr_title": "Adds BaggagePropagation.allKeyNames and deprecates non-string propagation", "pr_createdAt": "2020-04-24T06:23:33Z", "pr_url": "https://github.com/openzipkin/brave/pull/1171", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyNjk0NA==", "url": "https://github.com/openzipkin/brave/pull/1171#discussion_r414326944", "bodyText": "It might be a tiny bit more performant to presize instead of precopy\nList<String> result = new ArrayList<>(propagation.keys().size()+ baggageKeyNames.size());\nresult.addAll(propataion.keys();\nresult.addAll(baggageKeyNames);\nreturn unmodifiable(result);", "author": "anuraaga", "createdAt": "2020-04-24T06:28:26Z", "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -259,6 +240,45 @@ public FactoryBuilder add(BaggagePropagationConfig config) {\n     return delegate.keys();\n   }\n \n+  /**\n+   * Returns the key names used for propagation, including those used for the {@linkplain #keys()\n+   * trace context} and {@linkplain SingleBaggageField#keyNames() baggage}. The result can be cached\n+   * in the same scope as the propagation instance.\n+   *\n+   * <p>This is here for the remote propagation use cases:\n+   * <ul>\n+   *   <li>To generate constants for all key names. ex. gRPC Metadata.Key</li>\n+   *   <li>To iterate fields when missing a get field by name function. ex. OpenTracing TextMap</li>\n+   *   <li>To clear fields on re-usable requests. ex. JMS message</li>\n+   * </ul>\n+   *\n+   * <h3>Details</h3>\n+   * The {@code propagation} parameter is required because there may be multiple tracers with\n+   * different baggage configuration. Also, {@link Propagation} instances can be wrapped, so you\n+   * cannot use {@code instanceof} to identify if baggage is internally supported. For example,\n+   * {@link ExtraFieldPropagation} internally wraps {@link BaggagePropagation}.\n+   *\n+   * <p>This is different than {@link BaggageField#getAll(TraceContext)}, as propagation keys may be\n+   * different than {@link BaggageField#name() baggage field names}.\n+   *\n+   * @param propagation used to extract configuration\n+   * @return a list of remote propagation key names used for trace context and baggage.\n+   * @since 5.12\n+   */\n+  // On OpenTracing TextMap: https://github.com/opentracing/opentracing-java/issues/305\n+  public static List<String> allKeyNames(Propagation<String> propagation) {\n+    if (propagation == null) throw new NullPointerException(\"propagation == null\");\n+    // When baggage or similar is in use, the result != TraceContextOrSamplingFlags.EMPTY\n+    TraceContextOrSamplingFlags emptyExtraction =\n+      propagation.extractor((c, k) -> null).extract(Boolean.TRUE);\n+    List<String> baggageKeyNames = ExtraBaggageContext.getAllKeyNames(emptyExtraction);\n+    if (baggageKeyNames.isEmpty()) return propagation.keys();\n+\n+    List<String> result = new ArrayList<>(propagation.keys());", "originalCommit": "a71b3c5bb583b7a5e9e537f14536af0f421e9788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTcwOA==", "url": "https://github.com/openzipkin/brave/pull/1171#discussion_r414329708", "bodyText": "sure thing", "author": "codefromthecrypt", "createdAt": "2020-04-24T06:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyNjk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bed0aa9d359be54ba7797393859a444cf90c12f4", "chunk": "diff --git a/brave/src/main/java/brave/baggage/BaggagePropagation.java b/brave/src/main/java/brave/baggage/BaggagePropagation.java\nindex 15d6888ee..5bdfe1968 100644\n--- a/brave/src/main/java/brave/baggage/BaggagePropagation.java\n+++ b/brave/src/main/java/brave/baggage/BaggagePropagation.java\n\n@@ -274,7 +274,8 @@ public class BaggagePropagation<K> implements Propagation<K> {\n     List<String> baggageKeyNames = ExtraBaggageContext.getAllKeyNames(emptyExtraction);\n     if (baggageKeyNames.isEmpty()) return propagation.keys();\n \n-    List<String> result = new ArrayList<>(propagation.keys());\n+    List<String> result = new ArrayList<>(propagation.keys().size() + baggageKeyNames.size());\n+    result.addAll(propagation.keys());\n     result.addAll(baggageKeyNames);\n     return Collections.unmodifiableList(result);\n   }\n"}}, {"oid": "06cdc5289968bef7b4acf11c7109d67f68fcbf0b", "url": "https://github.com/openzipkin/brave/commit/06cdc5289968bef7b4acf11c7109d67f68fcbf0b", "message": "Adds BaggagePropagation.allKeyNames and deprecates non-string propagation\n\nIn 5.11, we partially replaced functionality of ExtraFieldPropagation.extraKeys().\nThis completes the work after I noticed it was needed for several use cases, not\njust OpenTracing. `BaggagePropagation.allKeyNames()` is also more robust when\npropagation is wrapped by proxy or otherwise.\n\nThe Propagation `<K>` parameter allowed integration with requests that had\nheaders, but didn't use String types. This was over-generalized, as in practice\nonly gRPC instrumentation ever used this key type (`Metadata.Key`).\n\nRemoving this `<K>` parameter dramatically simplifies the model as it removes\nthe need to explain the key factory and the edge case it supported, which can\nbe accomplished differently.\n\nIn Brave 6, we will need to keep the generic parameter `Propagation<String>`\n(to avoid API breaks). However, the internals will be far less complex once we\ncan remove KeyFactory etc that are no longer needed.", "committedDate": "2020-04-24T06:34:34Z", "type": "forcePushed"}, {"oid": "06cdc5289968bef7b4acf11c7109d67f68fcbf0b", "url": "https://github.com/openzipkin/brave/commit/06cdc5289968bef7b4acf11c7109d67f68fcbf0b", "message": "Adds BaggagePropagation.allKeyNames and deprecates non-string propagation\n\nIn 5.11, we partially replaced functionality of ExtraFieldPropagation.extraKeys().\nThis completes the work after I noticed it was needed for several use cases, not\njust OpenTracing. `BaggagePropagation.allKeyNames()` is also more robust when\npropagation is wrapped by proxy or otherwise.\n\nThe Propagation `<K>` parameter allowed integration with requests that had\nheaders, but didn't use String types. This was over-generalized, as in practice\nonly gRPC instrumentation ever used this key type (`Metadata.Key`).\n\nRemoving this `<K>` parameter dramatically simplifies the model as it removes\nthe need to explain the key factory and the edge case it supported, which can\nbe accomplished differently.\n\nIn Brave 6, we will need to keep the generic parameter `Propagation<String>`\n(to avoid API breaks). However, the internals will be far less complex once we\ncan remove KeyFactory etc that are no longer needed.", "committedDate": "2020-04-24T06:34:34Z", "type": "commit"}, {"oid": "bed0aa9d359be54ba7797393859a444cf90c12f4", "url": "https://github.com/openzipkin/brave/commit/bed0aa9d359be54ba7797393859a444cf90c12f4", "message": "nit", "committedDate": "2020-04-24T06:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMTEyMg==", "url": "https://github.com/openzipkin/brave/pull/1171#discussion_r414331122", "bodyText": "ps this was redundant as config keyNames are by definition lc", "author": "codefromthecrypt", "createdAt": "2020-04-24T06:38:00Z", "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -138,92 +139,72 @@ public FactoryBuilder add(BaggagePropagationConfig config) {\n         throw new UnsupportedOperationException(\"dynamic fields not yet supported\");\n       }\n       SingleBaggageField field = (SingleBaggageField) config;\n-      if (fieldToKeyNames.containsKey(field.field)) {\n+      if (fieldToHandler.containsKey(field.field)) {\n         throw new IllegalArgumentException(field.field.name + \" already added\");\n       }\n       configs.add(field);\n-      Set<String> lcKeyNames = new LinkedHashSet<>();\n+      if (field.keyNames().isEmpty()) {\n+        fieldToHandler.put(field.field, BaggageHandlers.string(field.field));\n+        return this;\n+      }\n+\n       for (String keyName : field.keyNames) {\n-        String lcName = validateName(keyName).toLowerCase(Locale.ROOT);", "originalCommit": "bed0aa9d359be54ba7797393859a444cf90c12f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMTUzNQ==", "url": "https://github.com/openzipkin/brave/pull/1171#discussion_r414331535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * different than {@link BaggageField#name() baggage field names}.\n          \n          \n            \n               * different than {@linkplain BaggageField#name() baggage field names}.", "author": "codefromthecrypt", "createdAt": "2020-04-24T06:38:53Z", "path": "brave/src/main/java/brave/baggage/BaggagePropagation.java", "diffHunk": "@@ -259,6 +240,46 @@ public FactoryBuilder add(BaggagePropagationConfig config) {\n     return delegate.keys();\n   }\n \n+  /**\n+   * Returns the key names used for propagation, including those used for the {@linkplain #keys()\n+   * trace context} and {@linkplain SingleBaggageField#keyNames() baggage}. The result can be cached\n+   * in the same scope as the propagation instance.\n+   *\n+   * <p>This is here for the remote propagation use cases:\n+   * <ul>\n+   *   <li>To generate constants for all key names. ex. gRPC Metadata.Key</li>\n+   *   <li>To iterate fields when missing a get field by name function. ex. OpenTracing TextMap</li>\n+   *   <li>To clear fields on re-usable requests. ex. JMS message</li>\n+   * </ul>\n+   *\n+   * <h3>Details</h3>\n+   * The {@code propagation} parameter is required because there may be multiple tracers with\n+   * different baggage configuration. Also, {@link Propagation} instances can be wrapped, so you\n+   * cannot use {@code instanceof} to identify if baggage is internally supported. For example,\n+   * {@link ExtraFieldPropagation} internally wraps {@link BaggagePropagation}.\n+   *\n+   * <p>This is different than {@link BaggageField#getAll(TraceContext)}, as propagation keys may be\n+   * different than {@link BaggageField#name() baggage field names}.", "originalCommit": "bed0aa9d359be54ba7797393859a444cf90c12f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5042ef6b43777cd6400e504cc8dd9955f274e9f5", "chunk": "diff --git a/brave/src/main/java/brave/baggage/BaggagePropagation.java b/brave/src/main/java/brave/baggage/BaggagePropagation.java\nindex 5bdfe1968..67640ebe1 100644\n--- a/brave/src/main/java/brave/baggage/BaggagePropagation.java\n+++ b/brave/src/main/java/brave/baggage/BaggagePropagation.java\n\n@@ -259,7 +259,7 @@ public class BaggagePropagation<K> implements Propagation<K> {\n    * {@link ExtraFieldPropagation} internally wraps {@link BaggagePropagation}.\n    *\n    * <p>This is different than {@link BaggageField#getAll(TraceContext)}, as propagation keys may be\n-   * different than {@link BaggageField#name() baggage field names}.\n+   * different than {@linkplain BaggageField#name() baggage field names}.\n    *\n    * @param propagation used to extract configuration\n    * @return a list of remote propagation key names used for trace context and baggage.\n"}}, {"oid": "5042ef6b43777cd6400e504cc8dd9955f274e9f5", "url": "https://github.com/openzipkin/brave/commit/5042ef6b43777cd6400e504cc8dd9955f274e9f5", "message": "Update brave/src/main/java/brave/baggage/BaggagePropagation.java", "committedDate": "2020-04-24T06:38:59Z", "type": "commit"}]}