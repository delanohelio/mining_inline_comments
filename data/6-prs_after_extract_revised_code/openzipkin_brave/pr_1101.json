{"pr_number": 1101, "pr_title": "Enforces sampled field must be well formed", "pr_createdAt": "2020-02-25T07:05:54Z", "pr_url": "https://github.com/openzipkin/brave/pull/1101", "timeline": [{"oid": "f60f1d2ddc788880d721502370adacf042126e8c", "url": "https://github.com/openzipkin/brave/commit/f60f1d2ddc788880d721502370adacf042126e8c", "message": "Enforces sampled field must be well formed\n\nCurrently, we restart the trace if the identity fields: traceId and\nspanId are malformed. This restarts on malformed sampled flag. Formerly,\nwe treated malformed the same as an explicit sampled=false decision.", "committedDate": "2020-02-25T07:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ==", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383694329", "bodyText": "Perhaps : '{0}' with quotes - IIUC empty string will also log so if it just logs as empty it's tricky to read the log. But either's fine.", "author": "anuraaga", "createdAt": "2020-02-25T07:14:29Z", "path": "brave/src/main/java/brave/propagation/B3Propagation.java", "diffHunk": "@@ -115,10 +116,14 @@ public FactoryBuilder injectFormats(Span.Kind kind, Format format1, Format forma\n    * decision to the receiver of this header).\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n+  static final String SAMPLED_MALFORMED =\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";", "originalCommit": "f60f1d2ddc788880d721502370adacf042126e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNjE5Nw==", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383706197", "bodyText": "good idea.. in this case I'll put the whole thing in single quotes as was aiming for header format.\nEx. X-B3-Sampled:  in the case of empty string", "author": "codefromthecrypt", "createdAt": "2020-02-25T07:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNjM5Ng==", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383706396", "bodyText": "but then again, that would still have the same problem.. yeah single quoting it", "author": "codefromthecrypt", "createdAt": "2020-02-25T07:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf1fbe415c90cb631aae5c92acc14c5028ee2612", "chunk": "diff --git a/brave/src/main/java/brave/propagation/B3Propagation.java b/brave/src/main/java/brave/propagation/B3Propagation.java\nindex 244423f52..113ce8011 100644\n--- a/brave/src/main/java/brave/propagation/B3Propagation.java\n+++ b/brave/src/main/java/brave/propagation/B3Propagation.java\n\n@@ -117,7 +117,7 @@ public final class B3Propagation<K> implements Propagation<K> {\n    */\n   static final String SAMPLED_NAME = \"X-B3-Sampled\";\n   static final String SAMPLED_MALFORMED =\n-    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \": {0}\";\n+    \"Invalid input: expected 0 or 1 for \" + SAMPLED_NAME + \", but found '{0}'\";\n \n   /**\n    * \"1\" implies sampled and is a request to override collection-tier sampling policy.\n"}}, {"oid": "1a034c4d13784f3724fe30558e2efe18b52bd613", "url": "https://github.com/openzipkin/brave/commit/1a034c4d13784f3724fe30558e2efe18b52bd613", "message": "Ensures b3 single doesn't accept unicode and backfills", "committedDate": "2020-02-25T07:48:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNzUxMg==", "url": "https://github.com/openzipkin/brave/pull/1101#discussion_r383707512", "bodyText": "Nice", "author": "anuraaga", "createdAt": "2020-02-25T07:52:59Z", "path": "brave/src/test/java/brave/propagation/B3PropagationTest.java", "diffHunk": "@@ -179,9 +214,62 @@ void header(String key, String value) {\n \n     assertThat(request.headers)\n       .hasSize(4)\n-      .containsEntry(\"X-B3-TraceId\", \"0000000000000001\")\n-      .containsEntry(\"X-B3-ParentSpanId\", \"0000000000000002\")\n-      .containsEntry(\"X-B3-SpanId\", \"0000000000000003\")\n-      .containsEntry(\"b3\", \"0000000000000001-0000000000000003-0000000000000002\");\n+      .containsEntry(\"X-B3-TraceId\", traceId)\n+      .containsEntry(\"X-B3-ParentSpanId\", parentId)\n+      .containsEntry(\"X-B3-SpanId\", spanId)\n+      .containsEntry(\"b3\", traceId + \"-\" + spanId + \"-\" + parentId);\n+  }\n+\n+  @Test public void extract_notYetSampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    assertThat(extract(headers).sampled()).isNull();\n+  }\n+\n+  @Test public void extract_sampled() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"1\");\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+\n+    headers.put(\"X-B3-Sampled\", \"true\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isTrue();\n+  }\n+\n+  @Test public void extract_sampled_false() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    headers.put(\"X-B3-Sampled\", \"0\");\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+\n+    headers.put(\"X-B3-Sampled\", \"false\"); // old clients\n+\n+    assertThat(extract(headers).sampled()).isFalse();\n+  }\n+\n+  @Test public void extract_sampledCorrupt() {\n+    Map<String, String> headers = new LinkedHashMap<>();\n+    headers.put(\"X-B3-TraceId\", traceId);\n+    headers.put(\"X-B3-SpanId\", spanId);\n+\n+    Stream.of(\"\", \"d\", \"\ud83d\udca9\", \"hello\").forEach(sampled -> {", "originalCommit": "1a034c4d13784f3724fe30558e2efe18b52bd613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf1fbe415c90cb631aae5c92acc14c5028ee2612", "chunk": "diff --git a/brave/src/test/java/brave/propagation/B3PropagationTest.java b/brave/src/test/java/brave/propagation/B3PropagationTest.java\nindex d758a048b..23f5c80e2 100644\n--- a/brave/src/test/java/brave/propagation/B3PropagationTest.java\n+++ b/brave/src/test/java/brave/propagation/B3PropagationTest.java\n\n@@ -265,7 +265,7 @@ public class B3PropagationTest {\n       headers.put(\"X-B3-Sampled\", sampled);\n       assertThat(extract(headers)).isSameAs(TraceContextOrSamplingFlags.EMPTY);\n \n-      verify(platform).log(\"Invalid input: expected 0 or 1 for X-B3-Sampled: {0}\", sampled, null);\n+      verify(platform).log(\"Invalid input: expected 0 or 1 for X-B3-Sampled, but found '{0}'\", sampled, null);\n     });\n   }\n \n"}}, {"oid": "bf1fbe415c90cb631aae5c92acc14c5028ee2612", "url": "https://github.com/openzipkin/brave/commit/bf1fbe415c90cb631aae5c92acc14c5028ee2612", "message": "polish", "committedDate": "2020-02-25T07:53:05Z", "type": "commit"}]}