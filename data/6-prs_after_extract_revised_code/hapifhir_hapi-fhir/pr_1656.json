{"pr_number": 1656, "pr_title": "Changed BaseresourceReturningMethodBinding to accept IBaseBundle as a\u2026", "pr_createdAt": "2020-01-02T19:34:00Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1656", "timeline": [{"oid": "0c83c1ce44ef8e4ecd1caea9f122f62a8a136b78", "url": "https://github.com/hapifhir/hapi-fhir/commit/0c83c1ce44ef8e4ecd1caea9f122f62a8a136b78", "message": "Changed BaseresourceReturningMethodBinding to accept IBaseBundle as a bundle resource.", "committedDate": "2020-01-02T19:15:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMDg0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1656#discussion_r362600847", "bodyText": "You could actually only test for IBaseBundle (ie just keep the one you added and drop the other one). That should cover all cases actually. I don't think the IBaseBundle resource existed when this code was written..", "author": "jamesagnew", "createdAt": "2020-01-02T19:36:17Z", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java", "diffHunk": "@@ -81,7 +82,8 @@ public BaseResourceReturningMethodBinding(Class<?> theReturnResourceType, Method\n \t\t\t}\n \n \t\t} else if (IBaseResource.class.isAssignableFrom(methodReturnType)) {\n-\t\t\tif (Modifier.isAbstract(methodReturnType.getModifiers()) == false && theContext.getResourceDefinition((Class<? extends IBaseResource>) methodReturnType).isBundle()) {\n+\n+\t\t\tif ((Modifier.isAbstract(methodReturnType.getModifiers()) == false && theContext.getResourceDefinition((Class<? extends IBaseResource>) methodReturnType).isBundle()) || IBaseBundle.class.isAssignableFrom(methodReturnType)) {", "originalCommit": "0c83c1ce44ef8e4ecd1caea9f122f62a8a136b78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMzMwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1656#discussion_r362603306", "bodyText": "updated", "author": "j-chan", "createdAt": "2020-01-02T19:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMDg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e935c75025cfe4dc85a9df20c5bfca5f5dccb581", "chunk": "diff --git a/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java b/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java\nindex 704b72a60f..cffcd020f8 100644\n--- a/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java\n+++ b/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/server/method/BaseResourceReturningMethodBinding.java\n\n@@ -83,7 +83,7 @@ public abstract class BaseResourceReturningMethodBinding extends BaseMethodBindi\n \n \t\t} else if (IBaseResource.class.isAssignableFrom(methodReturnType)) {\n \n-\t\t\tif ((Modifier.isAbstract(methodReturnType.getModifiers()) == false && theContext.getResourceDefinition((Class<? extends IBaseResource>) methodReturnType).isBundle()) || IBaseBundle.class.isAssignableFrom(methodReturnType)) {\n+\t\t\tif ( IBaseBundle.class.isAssignableFrom(methodReturnType)) {\n \t\t\t\tmyMethodReturnType = MethodReturnTypeEnum.BUNDLE_RESOURCE;\n \t\t\t} else {\n \t\t\t\tmyMethodReturnType = MethodReturnTypeEnum.RESOURCE;\n"}}, {"oid": "e935c75025cfe4dc85a9df20c5bfca5f5dccb581", "url": "https://github.com/hapifhir/hapi-fhir/commit/e935c75025cfe4dc85a9df20c5bfca5f5dccb581", "message": "Changed BaseResourceReturningMethodBinding to accept IBaseBundle as a bundle resource.", "committedDate": "2020-01-02T19:39:29Z", "type": "commit"}]}