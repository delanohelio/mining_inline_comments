{"pr_number": 1951, "pr_title": "Allow search criteria as subscription delivery mechanism", "pr_createdAt": "2020-06-29T22:47:34Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1951", "timeline": [{"oid": "f74eba5397d40f948970c0fc77ef721b021de46a", "url": "https://github.com/hapifhir/hapi-fhir/commit/f74eba5397d40f948970c0fc77ef721b021de46a", "message": "Terser should create correct Enumeration on create", "committedDate": "2020-06-17T22:28:18Z", "type": "commit"}, {"oid": "64a9eaa4de38b5b16c0b5d8f3727634c897f06de", "url": "https://github.com/hapifhir/hapi-fhir/commit/64a9eaa4de38b5b16c0b5d8f3727634c897f06de", "message": "Start work", "committedDate": "2020-06-17T22:32:17Z", "type": "commit"}, {"oid": "52addcff5916ee3f32b245f464dfa13f4e1c6ac8", "url": "https://github.com/hapifhir/hapi-fhir/commit/52addcff5916ee3f32b245f464dfa13f4e1c6ac8", "message": "Merge branch 'master' into ja_20200617_subscription_send_bundles", "committedDate": "2020-06-27T22:09:23Z", "type": "commit"}, {"oid": "ed2e62752efc828c16e0ca772c76ca1428610777", "url": "https://github.com/hapifhir/hapi-fhir/commit/ed2e62752efc828c16e0ca772c76ca1428610777", "message": "Work on subscriptions", "committedDate": "2020-06-29T13:39:10Z", "type": "commit"}, {"oid": "7cde945281890ce34023a1e954a24503f2741809", "url": "https://github.com/hapifhir/hapi-fhir/commit/7cde945281890ce34023a1e954a24503f2741809", "message": "Work on seed bundles", "committedDate": "2020-06-29T21:10:33Z", "type": "commit"}, {"oid": "88bd4abf0cf105765e622a2fedd18b265ec8fbbe", "url": "https://github.com/hapifhir/hapi-fhir/commit/88bd4abf0cf105765e622a2fedd18b265ec8fbbe", "message": "Merge branch 'master' into ja_20200617_subscription_send_bundles", "committedDate": "2020-06-29T21:31:23Z", "type": "commit"}, {"oid": "4a1d7383b0c7d119acf0f97866be902c61cff0f5", "url": "https://github.com/hapifhir/hapi-fhir/commit/4a1d7383b0c7d119acf0f97866be902c61cff0f5", "message": "Bundle transmission", "committedDate": "2020-06-29T22:46:52Z", "type": "commit"}, {"oid": "6ebcceeb5ca314313c197ff8543a87343e82a7a1", "url": "https://github.com/hapifhir/hapi-fhir/commit/6ebcceeb5ca314313c197ff8543a87343e82a7a1", "message": "Add changelog", "committedDate": "2020-06-29T22:49:01Z", "type": "commit"}, {"oid": "b650fdb9ea7d09bdc1f9f811727e6d23bbf153ce", "url": "https://github.com/hapifhir/hapi-fhir/commit/b650fdb9ea7d09bdc1f9f811727e6d23bbf153ce", "message": "Test fix", "committedDate": "2020-06-30T13:20:52Z", "type": "commit"}, {"oid": "11c4f9defba581132a340a2e5f189a934e829b67", "url": "https://github.com/hapifhir/hapi-fhir/commit/11c4f9defba581132a340a2e5f189a934e829b67", "message": "Fix LGTM warning", "committedDate": "2020-06-30T13:38:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5OTE1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447699151", "bodyText": "Version independent builder.  Nice!", "author": "fil512", "createdAt": "2020-06-30T13:51:48Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/TransactionBuilder.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package ca.uhn.fhir.util;\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import org.hl7.fhir.instance.model.api.IBase;\n+import org.hl7.fhir.instance.model.api.IBaseBundle;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.thymeleaf.util.Validate;\n+\n+/**\n+ * This class can be used to build a Bundle resource to be used as a FHIR transaction.\n+ *\n+ * This is not yet complete, and doesn't support all FHIR features. <b>USE WITH CAUTION</b> as the API\n+ * may change.\n+ *\n+ * @since 5.1.0\n+ */\n+public class TransactionBuilder {\n+\n+\tprivate final FhirContext myContext;\n+\tprivate final IBaseBundle myBundle;\n+\tprivate final RuntimeResourceDefinition myBundleDef;\n+\tprivate final BaseRuntimeChildDefinition myEntryChild;\n+\tprivate final BaseRuntimeElementDefinition<?> myEntryDef;\n+\tprivate final BaseRuntimeChildDefinition myEntryResourceChild;\n+\tprivate final BaseRuntimeChildDefinition myEntryFullUrlChild;\n+\tprivate final BaseRuntimeChildDefinition myEntryRequestChild;\n+\tprivate final BaseRuntimeElementDefinition<?> myEntryRequestDef;\n+\tprivate final BaseRuntimeChildDefinition myEntryRequestUrlChild;\n+\tprivate final BaseRuntimeChildDefinition myEntryRequestMethodChild;\n+\tprivate final BaseRuntimeElementDefinition<?> myEntryRequestMethodDef;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic TransactionBuilder(FhirContext theContext) {\n+\t\tmyContext = theContext;\n+\n+\t\tmyBundleDef = myContext.getResourceDefinition(\"Bundle\");\n+\t\tmyBundle = (IBaseBundle) myBundleDef.newInstance();\n+\n+\t\tBaseRuntimeChildDefinition typeChild = myBundleDef.getChildByName(\"type\");\n+\t\tIPrimitiveType<?> type = (IPrimitiveType<?>) typeChild.getChildByName(\"type\").newInstance(typeChild.getInstanceConstructorArguments());\n+\t\ttype.setValueAsString(\"transaction\");\n+\t\ttypeChild.getMutator().setValue(myBundle, type);\n+\n+\t\tmyEntryChild = myBundleDef.getChildByName(\"entry\");\n+\t\tmyEntryDef = myEntryChild.getChildByName(\"entry\");\n+\n+\t\tmyEntryResourceChild = myEntryDef.getChildByName(\"resource\");\n+\t\tmyEntryFullUrlChild = myEntryDef.getChildByName(\"fullUrl\");\n+\n+\t\tmyEntryRequestChild = myEntryDef.getChildByName(\"request\");\n+\t\tmyEntryRequestDef = myEntryRequestChild.getChildByName(\"request\");\n+\n+\t\tmyEntryRequestUrlChild = myEntryRequestDef.getChildByName(\"url\");\n+\t\t\n+\t\tmyEntryRequestMethodChild = myEntryRequestDef.getChildByName(\"method\");\n+\t\tmyEntryRequestMethodDef = myEntryRequestMethodChild.getChildByName(\"method\");", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjYwMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447702603", "bodyText": "Can we move all the hapi resource extensions into their own constants class?  This class could live in a non jpa module so it's available to non-jpa implementations.", "author": "fil512", "createdAt": "2020-06-30T13:56:15Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/subscription/resthook/RestHookTestR4Test.java", "diffHunk": "@@ -1013,4 +1013,39 @@ public void testCustomSearchParam() throws Exception {\n \t}\n \n \n+\t@Test\n+\tpublic void testDeliverSearchResult() throws Exception {\n+\t\t{\n+\t\t\tSubscription subscription = newSubscription(\"Observation?\", \"application/json\");\n+\t\t\tsubscription.addExtension(JpaConstants.EXT_SUBSCRIPTION_PAYLOAD_SEARCH_RESULT, new StringType(\"Observation?_id=${matched_resource_id}&_include=*\"));", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MjgyMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447892823", "bodyText": "Done. Have created HapiExtensions", "author": "jamesagnew", "createdAt": "2020-06-30T18:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjYwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDQzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447704432", "bodyText": "nitipck: theFlags.length > 0 is redundant", "author": "fil512", "createdAt": "2020-06-30T13:58:38Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/MatchUrlService.java", "diffHunk": "@@ -79,6 +80,13 @@ public SearchParameterMap translateMatchUrl(String theMatchUrl, RuntimeResourceD\n \n \t\tfor (String nextParamName : nameToParamLists.keySet()) {\n \t\t\tList<QualifiedParamList> paramList = nameToParamLists.get(nextParamName);\n+\n+\t\t\tif (theFlags != null && theFlags.length > 0) {", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MzA0OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447893048", "bodyText": "removed", "author": "jamesagnew", "createdAt": "2020-06-30T18:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNDQzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0MTc2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447741761", "bodyText": "Nitpick: this adds more than one responsibility to this class.  single-responsibility classes are easier to test.", "author": "fil512", "createdAt": "2020-06-30T14:46:29Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/resthook/SubscriptionDeliveringRestHookSubscriber.java", "diffHunk": "@@ -81,55 +90,82 @@ protected void deliverPayload(ResourceDeliveryMessage theMsg, CanonicalSubscript\n \n \tprotected void doDelivery(ResourceDeliveryMessage theMsg, CanonicalSubscription theSubscription, EncodingEnum thePayloadType, IGenericClient theClient, IBaseResource thePayloadResource) {\n \t\tIClientExecutable<?, ?> operation;\n+\n+\t\tif (isNotBlank(theSubscription.getPayloadSearchResult())) {\n+\t\t\toperation = createDeliveryRequestTransaction(theSubscription, theClient, thePayloadResource);\n+\t\t} else if (thePayloadType != null) {\n+\t\t\toperation = createDeliveryRequestNormal(theMsg, theClient, thePayloadResource);\n+\t\t} else {\n+\t\t\tsendNotification(theMsg);\n+\t\t\toperation = null;\n+\t\t}\n+\n+\t\tif (operation != null) {\n+\n+\t\t\tif (thePayloadType != null) {\n+\t\t\t\toperation.encoded(thePayloadType);\n+\t\t\t}\n+\n+\t\t\tString payloadId = thePayloadResource.getIdElement().toUnqualified().getValue();\n+\t\t\tourLog.info(\"Delivering {} rest-hook payload {} for {}\", theMsg.getOperationType(), payloadId, theSubscription.getIdElement(myFhirContext).toUnqualifiedVersionless().getValue());\n+\n+\t\t\ttry {\n+\t\t\t\toperation.execute();\n+\t\t\t} catch (ResourceNotFoundException e) {\n+\t\t\t\tourLog.error(\"Cannot reach {} \", theMsg.getSubscription().getEndpointUrl());\n+\t\t\t\tourLog.error(\"Exception: \", e);\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\n+\t\t}\n+\t}\n+\n+\t@Nullable\n+\tprivate IClientExecutable<?, ?> createDeliveryRequestNormal(ResourceDeliveryMessage theMsg, IGenericClient theClient, IBaseResource thePayloadResource) {\n+\t\tIClientExecutable<?, ?> operation;\n \t\tswitch (theMsg.getOperationType()) {\n \t\t\tcase CREATE:\n \t\t\tcase UPDATE:\n-\t\t\t\tif (thePayloadResource == null || thePayloadResource.isEmpty()) {\n-\t\t\t\t\tif (thePayloadType != null) {\n-\t\t\t\t\t\toperation = theClient.create().resource(thePayloadResource);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tsendNotification(theMsg);\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tif (thePayloadType != null) {\n-\t\t\t\t\t\toperation = theClient.update().resource(thePayloadResource);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tsendNotification(theMsg);\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t\toperation = theClient.update().resource(thePayloadResource);\n \t\t\t\tbreak;\n \t\t\tcase DELETE:\n \t\t\t\toperation = theClient.delete().resourceById(theMsg.getPayloadId(myFhirContext));\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tourLog.warn(\"Ignoring delivery message of type: {}\", theMsg.getOperationType());\n-\t\t\t\treturn;\n+\t\t\t\toperation = null;\n+\t\t\t\tbreak;\n \t\t}\n+\t\treturn operation;\n+\t}\n \n-\t\tif (thePayloadType != null) {\n-\t\t\toperation.encoded(thePayloadType);\n-\t\t}\n+\tprivate IClientExecutable<?, ?> createDeliveryRequestTransaction(CanonicalSubscription theSubscription, IGenericClient theClient, IBaseResource thePayloadResource) {", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NDY3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447744671", "bodyText": "Is this a payloadSearchCriteria as opposed to a payloadSearchResult?", "author": "fil512", "createdAt": "2020-06-30T14:50:10Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/model/CanonicalSubscription.java", "diffHunk": "@@ -64,6 +68,8 @@\n \tprivate RestHookDetails myRestHookDetails;\n \t@JsonProperty(\"extensions\")\n \tprivate Map<String, List<String>> myChannelExtensions;\n+\t@JsonProperty(\"payloadSearchResult\")\n+\tprivate String myPayloadSearchResult;", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDIzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447894232", "bodyText": "Agree that's a better name, renaming", "author": "jamesagnew", "createdAt": "2020-06-30T18:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NDY3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NTIwOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447745209", "bodyText": "nice!", "author": "fil512", "createdAt": "2020-06-30T14:50:51Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/submit/interceptor/SubscriptionValidatingInterceptor.java", "diffHunk": "@@ -96,39 +97,48 @@ public void validateSubmittedSubscription(IBaseResource theSubscription) {\n \n \t\tif (!finished) {\n \n-\t\t\tString query = subscription.getCriteriaString();\n-\t\t\tif (isBlank(query)) {\n-\t\t\t\tthrow new UnprocessableEntityException(\"Subscription.criteria must be populated\");\n-\t\t\t}\n-\n-\t\t\tint sep = query.indexOf('?');\n-\t\t\tif (sep <= 1) {\n-\t\t\t\tthrow new UnprocessableEntityException(\"Subscription.criteria must be in the form \\\"{Resource Type}?[params]\\\"\");\n-\t\t\t}\n+\t\t\tvalidateQuery(subscription.getCriteriaString(), \"Subscription.criteria\");", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzA0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447747042", "bodyText": "Unrelated question, what do you think about having a statically cached TestFhirContext.R4 ?  I wonder if it would speed up our tests...", "author": "fil512", "createdAt": "2020-06-30T14:53:04Z", "path": "hapi-fhir-structures-r4/src/test/java/ca/uhn/fhir/util/TransactionBuilderTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package ca.uhn.fhir.util;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import org.hl7.fhir.r4.model.Bundle;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.codesystems.HttpVerb;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+public class TransactionBuilderTest {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(TransactionBuilderTest.class);\n+\tprivate FhirContext myFhirContext = FhirContext.forR4();", "originalCommit": "11c4f9defba581132a340a2e5f189a934e829b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDQ4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447894487", "bodyText": "I actually just did this on my JU5 branch to save memory... So, yes, agree! :)", "author": "jamesagnew", "createdAt": "2020-06-30T18:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MzU3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1951#discussion_r447963575", "bodyText": "Heh funny timing", "author": "fil512", "createdAt": "2020-06-30T20:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0NzA0Mg=="}], "type": "inlineReview", "revised_code": null}]}