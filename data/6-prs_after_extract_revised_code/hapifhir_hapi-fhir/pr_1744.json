{"pr_number": 1744, "pr_title": "fix near-distance for chained searches in dstu3", "pr_createdAt": "2020-03-03T02:40:20Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1744", "timeline": [{"oid": "24acb57f3b70e5abf3ee429f6a5d003ec5307bf8", "url": "https://github.com/hapifhir/hapi-fhir/commit/24acb57f3b70e5abf3ee429f6a5d003ec5307bf8", "message": "began with failing test.\ntest now passes.", "committedDate": "2020-03-02T22:56:25Z", "type": "commit"}, {"oid": "27dcafe4f247fd1c43c5078168d5252b6bc6c2c0", "url": "https://github.com/hapifhir/hapi-fhir/commit/27dcafe4f247fd1c43c5078168d5252b6bc6c2c0", "message": "all but unit tests", "committedDate": "2020-03-03T02:27:50Z", "type": "commit"}, {"oid": "d1b54a966827956bec879a6e01c004957ab8533a", "url": "https://github.com/hapifhir/hapi-fhir/commit/d1b54a966827956bec879a6e01c004957ab8533a", "message": "pre-review cleanup", "committedDate": "2020-03-03T02:32:27Z", "type": "commit"}, {"oid": "4e1be80525bcbe178183b09ad46033cdd0c20258", "url": "https://github.com/hapifhir/hapi-fhir/commit/4e1be80525bcbe178183b09ad46033cdd0c20258", "message": "fixme", "committedDate": "2020-03-03T02:39:28Z", "type": "commit"}, {"oid": "a56df030556d4d60fa194c60f1b4fcc4b5e58fe8", "url": "https://github.com/hapifhir/hapi-fhir/commit/a56df030556d4d60fa194c60f1b4fcc4b5e58fe8", "message": "restrict near-distance extraction to DSTU3", "committedDate": "2020-03-03T02:50:57Z", "type": "commit"}, {"oid": "bce1716c6cd6cb9dff4943b23bc0ad4fa38729c0", "url": "https://github.com/hapifhir/hapi-fhir/commit/bce1716c6cd6cb9dff4943b23bc0ad4fa38729c0", "message": "documentation", "committedDate": "2020-03-03T03:13:21Z", "type": "commit"}, {"oid": "5b5ef08500470fac599a5a061142d9df2e195cbd", "url": "https://github.com/hapifhir/hapi-fhir/commit/5b5ef08500470fac599a5a061142d9df2e195cbd", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200302-near-chain", "committedDate": "2020-03-03T14:44:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NTczNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387165734", "bodyText": "Any clue why this was commented out in the first place? Seems this test is just a test to see if searching by code text works...", "author": "tadgh", "createdAt": "2020-03-03T17:07:10Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ContainedTest.java", "diffHunk": "@@ -47,12 +51,9 @@ public void testIndexContained() {\n \t\tourLog.info(myFhirCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(o2));\n \t\t\n \t\t\n-\t\tSearchParameterMap map;\n-\t\t\n-//\t\tmap = new SearchParameterMap();\n-//\t\tmap.add(Observation.SP_CODE, new TokenParam(null, \"some observation\").setModifier(TokenParamModifier.TEXT));\n-//\t\tassertThat(toUnqualifiedVersionlessIdValues(myObservationDao.search(map)), containsInAnyOrder(toValues(id1, id2)));\n-\n+\t\tSearchParameterMap map = new SearchParameterMap();\n+\t\tmap.add(Observation.SP_CODE, new TokenParam(null, \"some observation\").setModifier(TokenParamModifier.TEXT));\n+\t\tassertThat(toUnqualifiedVersionlessIdValues(myObservationDao.search(map)), containsInAnyOrder(toValues(oid1, oid2)));", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMjE0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387202146", "bodyText": "No idea.  I was helping Ruslan with something and came across it.  They were commented out 3 years ago.  I uncommented them, the test passed, so why not?", "author": "fil512", "createdAt": "2020-03-03T18:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NTczNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2Njc2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387166768", "bodyText": "Ha, I like these example coordinates", "author": "tadgh", "createdAt": "2020-03-03T17:08:47Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3DistanceTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package ca.uhn.fhir.jpa.provider.dstu3;\n+\n+import ca.uhn.fhir.jpa.util.CoordCalculatorTest;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.dstu3.model.PractitionerRole;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.junit.Test;\n+\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ResourceProviderDstu3DistanceTest extends BaseResourceProviderDstu3Test {\n+\n+\t@Override\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\tmyDaoConfig.setReuseCachedSearchResultsForMillis(null);\n+\t}\n+\n+\t@Test\n+\tpublic void testNearSearchApproximate() {\n+\t\tLocation loc = new Location();\n+\t\tdouble latitude = CoordCalculatorTest.LATITUDE_UHN;\n+\t\tdouble longitude = CoordCalculatorTest.LONGITUDE_UHN;\n+\t\tLocation.LocationPositionComponent position = new Location.LocationPositionComponent().setLatitude(latitude).setLongitude(longitude);\n+\t\tloc.setPosition(position);\n+\t\tIIdType locId = ourClient.create().resource(loc).execute().getId().toUnqualifiedVersionless();\n+\n+\t\t{ // In the box\n+\t\t\tdouble bigEnoughDistance = CoordCalculatorTest.DISTANCE_KM_CHIN_TO_UHN * 2;", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MTUwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387171508", "bodyText": "Suggestion: would be great if we could get docstrings on public methods and the class, explaining what's going on inside.", "author": "tadgh", "createdAt": "2020-03-03T17:16:37Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMDkzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387210933", "bodyText": "Good suggestion.  Done.", "author": "fil512", "createdAt": "2020-03-03T18:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nsimilarity index 74%\nrename from hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\nrename to hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nindex f66e4a8b12..950e8b1fcf 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\n\n@@ -9,7 +9,15 @@ import org.hl7.fhir.instance.model.api.IBaseResource;\n \n import java.util.List;\n \n-public class DistanceHelper {\n+\n+/**\n+ * In DSTU3, the near-distance search parameter is separate from near.  In this utility method,\n+ * we search for near-distance search parameters and if we find any, remove them from the list\n+ * of search parameters and store it in a dedicated field in {@link SearchParameterMap}.  This is so that\n+ * when the \"near\" search parameter is processed, we have access to this near-distance value.\n+ * This requires at most one near-distance parameter.  If more are found, we throw an {@link IllegalArgumentException}.\n+ */\n+public class Dstu3DistanceHelper {\n \tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n \t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n \t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MjA5Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387172092", "bodyText": "Question: Is location ripped into a constant somewhere? If so, would be nice to use that here instead of the hard-coded string.", "author": "tadgh", "createdAt": "2020-03-03T17:17:37Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMjU0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387212541", "bodyText": "Completely agree.  I looked around, and could not find a good source for it.  It's really referring to a named path in multiple resources and their shared naming is convention, not structural, so I left it as a string.", "author": "fil512", "createdAt": "2020-03-03T18:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MjA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nsimilarity index 74%\nrename from hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\nrename to hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nindex f66e4a8b12..950e8b1fcf 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\n\n@@ -9,7 +9,15 @@ import org.hl7.fhir.instance.model.api.IBaseResource;\n \n import java.util.List;\n \n-public class DistanceHelper {\n+\n+/**\n+ * In DSTU3, the near-distance search parameter is separate from near.  In this utility method,\n+ * we search for near-distance search parameters and if we find any, remove them from the list\n+ * of search parameters and store it in a dedicated field in {@link SearchParameterMap}.  This is so that\n+ * when the \"near\" search parameter is processed, we have access to this near-distance value.\n+ * This requires at most one near-distance parameter.  If more are found, we throw an {@link IllegalArgumentException}.\n+ */\n+public class Dstu3DistanceHelper {\n \tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n \t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n \t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDgyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387174821", "bodyText": "I'm sure they are identical, but since this is an STU3 issue based on what you said, should we use the dstu3.resource.Location.SP_NEAR_DISTANCE ?", "author": "tadgh", "createdAt": "2020-03-03T17:22:27Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tReferenceParam retval = null;\n+\t\tList<IQueryParameterType> andParamToRemove = null;\n+\t\tfor (List<IQueryParameterType> paramOrList : theParamAndList) {\n+\t\t\tIQueryParameterType orParamToRemove = null;\n+\t\t\tfor (IQueryParameterType param : paramOrList) {\n+\t\t\t\tif (param instanceof ReferenceParam) {\n+\t\t\t\t\tReferenceParam referenceParam = (ReferenceParam) param;\n+\t\t\t\t\tif (Location.SP_NEAR_DISTANCE.equals(referenceParam.getChain())) {\n+\t\t\t\t\t\tif (retval != null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMzI5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387213298", "bodyText": "That was my intention--I could have sworn I fixed that.  Strange.  Fixed again", "author": "fil512", "createdAt": "2020-03-03T18:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nsimilarity index 74%\nrename from hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\nrename to hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nindex f66e4a8b12..950e8b1fcf 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\n\n@@ -9,7 +9,15 @@ import org.hl7.fhir.instance.model.api.IBaseResource;\n \n import java.util.List;\n \n-public class DistanceHelper {\n+\n+/**\n+ * In DSTU3, the near-distance search parameter is separate from near.  In this utility method,\n+ * we search for near-distance search parameters and if we find any, remove them from the list\n+ * of search parameters and store it in a dedicated field in {@link SearchParameterMap}.  This is so that\n+ * when the \"near\" search parameter is processed, we have access to this near-distance value.\n+ * This requires at most one near-distance parameter.  If more are found, we throw an {@link IllegalArgumentException}.\n+ */\n+public class Dstu3DistanceHelper {\n \tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n \t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n \t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5ODk0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387198946", "bodyText": "This function is a tad messy. I'm trying to think of ways in which we could simplify this, as its starting to look like arrow code. Am I right in thinking the pseudocode For this is essentially:\n1. Stream over all ParamAndLists and their child ParamOrLists\n2. if more than a single Param of type SP_NEAR_DISTANCE  exists, cumulatively, over any of the ParamOrLists, then throw illegal argument exception. \n3. If 0 exist, return null, \n4. If exactly 1 exists, return it, but also remove it from its paramOrList, and if that causes the subsequent parent ParamAndList to be empty, remove it too.\n\nHave I got the gist?", "author": "tadgh", "createdAt": "2020-03-03T18:06:38Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTE1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387215150", "bodyText": "Yes!  This yucky method is the reason why I spent an hour trying to do this processing at the point where search parameters are added initially.  I'd love to see a cleaner way to write this if you can come up with a way.", "author": "fil512", "createdAt": "2020-03-03T18:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5ODk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NTA2MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387245060", "bodyText": "I may be able to streamify this stuff, but the fact that we have to remove the offending params post-selection means its probably gonna stay yucky. Let's open an issue to just think about this I think. I'll poke at it when I've got some downtime", "author": "tadgh", "createdAt": "2020-03-03T19:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5ODk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0ODE2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387248161", "bodyText": "Created #1746 to address this.", "author": "tadgh", "createdAt": "2020-03-03T19:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5ODk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nsimilarity index 74%\nrename from hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\nrename to hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nindex f66e4a8b12..950e8b1fcf 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\n\n@@ -9,7 +9,15 @@ import org.hl7.fhir.instance.model.api.IBaseResource;\n \n import java.util.List;\n \n-public class DistanceHelper {\n+\n+/**\n+ * In DSTU3, the near-distance search parameter is separate from near.  In this utility method,\n+ * we search for near-distance search parameters and if we find any, remove them from the list\n+ * of search parameters and store it in a dedicated field in {@link SearchParameterMap}.  This is so that\n+ * when the \"near\" search parameter is processed, we have access to this near-distance value.\n+ * This requires at most one near-distance parameter.  If more are found, we throw an {@link IllegalArgumentException}.\n+ */\n+public class Dstu3DistanceHelper {\n \tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n \t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n \t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5OTg3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387199870", "bodyText": "Is this functionally equivalent to\nlong sum = theParamAndList.stream().mapToLong(Collection::size).sum();\n//No Near Distance Param\nif (sum  == 0) {\n\treturn null;\n// A single Near Distance Param\n} else if (sum == 1) {\n\treturn (QuantityParam) theParamAndList.get(0).get(0);\n//too many near distance params\n} else {\n\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\nOr are there some possible cases I'm missing?", "author": "tadgh", "createdAt": "2020-03-03T18:08:30Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.searchparam.util;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.dstu3.model.Location;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.List;\n+\n+public class DistanceHelper {\n+\tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n+\t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n+\t\t\tQuantityParam quantityParam = getNearDistanceParam(paramAndList);\n+\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\n+\t\t\t// Need to remove near-distance or it we'll get a hashcode predicate for it\n+\t\t\ttheParams.remove(Location.SP_NEAR_DISTANCE);\n+\t\t} else if (theParams.containsKey(\"location\")) {\n+\t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(\"location\");\n+\t\t\tReferenceParam referenceParam = getChainedLocationNearDistanceParam(paramAndList);\n+\t\t\tif (referenceParam != null) {\n+\t\t\t\tQuantityParam quantityParam = new QuantityParam(referenceParam.getValue());\n+\t\t\t\ttheParams.setNearDistanceParam(quantityParam);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ReferenceParam getChainedLocationNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tReferenceParam retval = null;\n+\t\tList<IQueryParameterType> andParamToRemove = null;\n+\t\tfor (List<IQueryParameterType> paramOrList : theParamAndList) {\n+\t\t\tIQueryParameterType orParamToRemove = null;\n+\t\t\tfor (IQueryParameterType param : paramOrList) {\n+\t\t\t\tif (param instanceof ReferenceParam) {\n+\t\t\t\t\tReferenceParam referenceParam = (ReferenceParam) param;\n+\t\t\t\t\tif (Location.SP_NEAR_DISTANCE.equals(referenceParam.getChain())) {\n+\t\t\t\t\t\tif (retval != null) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tretval = referenceParam;\n+\t\t\t\t\t\t\torParamToRemove = param;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (orParamToRemove != null) {\n+\t\t\t\tparamOrList.remove(orParamToRemove);\n+\t\t\t\tif (paramOrList.isEmpty()) {\n+\t\t\t\t\tandParamToRemove = paramOrList;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (andParamToRemove != null) {\n+\t\t\ttheParamAndList.remove(andParamToRemove);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tprivate static QuantityParam getNearDistanceParam(List<List<IQueryParameterType>> theParamAndList) {\n+\t\tif (theParamAndList.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (theParamAndList.size() > 1) {\n+\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t}\n+\t\tList<IQueryParameterType> paramOrList = theParamAndList.get(0);\n+\t\tif (paramOrList.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (paramOrList.size() > 1) {\n+\t\t\tthrow new IllegalArgumentException(\"Only one \" + ca.uhn.fhir.model.dstu2.resource.Location.SP_NEAR_DISTANCE + \" parameter may be present\");\n+\t\t}\n+\t\treturn (QuantityParam) paramOrList.get(0);", "originalCommit": "5b5ef08500470fac599a5a061142d9df2e195cbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMDYwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1744#discussion_r387220602", "bodyText": "Much nicer!  I replaced with your code and re-ran all the tests.", "author": "fil512", "createdAt": "2020-03-03T18:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5OTg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nsimilarity index 74%\nrename from hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\nrename to hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\nindex f66e4a8b12..950e8b1fcf 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/DistanceHelper.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/util/Dstu3DistanceHelper.java\n\n@@ -9,7 +9,15 @@ import org.hl7.fhir.instance.model.api.IBaseResource;\n \n import java.util.List;\n \n-public class DistanceHelper {\n+\n+/**\n+ * In DSTU3, the near-distance search parameter is separate from near.  In this utility method,\n+ * we search for near-distance search parameters and if we find any, remove them from the list\n+ * of search parameters and store it in a dedicated field in {@link SearchParameterMap}.  This is so that\n+ * when the \"near\" search parameter is processed, we have access to this near-distance value.\n+ * This requires at most one near-distance parameter.  If more are found, we throw an {@link IllegalArgumentException}.\n+ */\n+public class Dstu3DistanceHelper {\n \tpublic static void setNearDistance(Class<? extends IBaseResource> theResourceType, SearchParameterMap theParams) {\n \t\tif (theResourceType == Location.class && theParams.containsKey(Location.SP_NEAR_DISTANCE)) {\n \t\t\tList<List<IQueryParameterType>> paramAndList = theParams.get(Location.SP_NEAR_DISTANCE);\n"}}, {"oid": "705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "url": "https://github.com/hapifhir/hapi-fhir/commit/705735b9c08c82e5c2eda46e81bb0acf7f2140c7", "message": "review feedback: javadoc", "committedDate": "2020-03-03T18:29:10Z", "type": "commit"}, {"oid": "ccd983ab429c9c97dbc1821db246de218b4ebc04", "url": "https://github.com/hapifhir/hapi-fhir/commit/ccd983ab429c9c97dbc1821db246de218b4ebc04", "message": "review feedback: code improvement", "committedDate": "2020-03-03T18:46:23Z", "type": "commit"}]}