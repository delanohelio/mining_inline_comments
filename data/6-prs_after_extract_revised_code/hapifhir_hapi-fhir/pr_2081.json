{"pr_number": 2081, "pr_title": "Feature 2020 09 02 term multi version support", "pr_createdAt": "2020-09-15T13:10:19Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/2081", "timeline": [{"oid": "d39348d7bd1dbe13a2954835466c2242acf46014", "url": "https://github.com/hapifhir/hapi-fhir/commit/d39348d7bd1dbe13a2954835466c2242acf46014", "message": "Initial changes to support multiple versions for code system.", "committedDate": "2020-08-09T15:49:04Z", "type": "commit"}, {"oid": "bd94ff96cc8e0331e25b017df6e49d2a1ed9d810", "url": "https://github.com/hapifhir/hapi-fhir/commit/bd94ff96cc8e0331e25b017df6e49d2a1ed9d810", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-08-17T01:38:41Z", "type": "commit"}, {"oid": "4db00fa604579abe1b4b64695c6ffda6a1da25c4", "url": "https://github.com/hapifhir/hapi-fhir/commit/4db00fa604579abe1b4b64695c6ffda6a1da25c4", "message": "Fix broken test and cleanup.", "committedDate": "2020-08-17T22:14:37Z", "type": "commit"}, {"oid": "c1dcf0442c409b521bafd4664771ca11383dcb7f", "url": "https://github.com/hapifhir/hapi-fhir/commit/c1dcf0442c409b521bafd4664771ca11383dcb7f", "message": "Fix broken tests.", "committedDate": "2020-08-18T01:52:16Z", "type": "commit"}, {"oid": "2126c5c5564033949235c4da6392bc6da312ec9d", "url": "https://github.com/hapifhir/hapi-fhir/commit/2126c5c5564033949235c4da6392bc6da312ec9d", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-08-18T15:15:09Z", "type": "commit"}, {"oid": "dc786eaff920b70c62500d30fb561e287c9e8bba", "url": "https://github.com/hapifhir/hapi-fhir/commit/dc786eaff920b70c62500d30fb561e287c9e8bba", "message": "Refine model for storing multiple code versions.", "committedDate": "2020-08-21T14:16:10Z", "type": "commit"}, {"oid": "29b293f179103b72ee8550d75adf1470d541d155", "url": "https://github.com/hapifhir/hapi-fhir/commit/29b293f179103b72ee8550d75adf1470d541d155", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-08-21T14:16:49Z", "type": "commit"}, {"oid": "749c2bc4be43b23b06c6755c6d08ab6d01bc2445", "url": "https://github.com/hapifhir/hapi-fhir/commit/749c2bc4be43b23b06c6755c6d08ab6d01bc2445", "message": "Changes to enable request delete of specific Code System version.", "committedDate": "2020-08-25T16:06:07Z", "type": "commit"}, {"oid": "796d2923e00ea1f5a30a6f60060f929358906dc9", "url": "https://github.com/hapifhir/hapi-fhir/commit/796d2923e00ea1f5a30a6f60060f929358906dc9", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-08-25T16:07:13Z", "type": "commit"}, {"oid": "5a0bce915584881d0075cc3a71acf1549995e1b2", "url": "https://github.com/hapifhir/hapi-fhir/commit/5a0bce915584881d0075cc3a71acf1549995e1b2", "message": "Changes to enable request delete of specific Code System version.", "committedDate": "2020-08-25T16:45:53Z", "type": "commit"}, {"oid": "92313cd7703cb71c5e735fa0898b33677578fa8d", "url": "https://github.com/hapifhir/hapi-fhir/commit/92313cd7703cb71c5e735fa0898b33677578fa8d", "message": "Tests and fixes to support versioned CodeSystem lookup and subsume operations", "committedDate": "2020-08-26T20:23:17Z", "type": "commit"}, {"oid": "3fef8f7befd51e01c8991c4667f2d7a5e6bb929a", "url": "https://github.com/hapifhir/hapi-fhir/commit/3fef8f7befd51e01c8991c4667f2d7a5e6bb929a", "message": "Back out changes relating to validate operations. Cleanup of code", "committedDate": "2020-08-30T19:29:57Z", "type": "commit"}, {"oid": "ff7aab2924d61e8f07ccbcd589c0c686a3497adb", "url": "https://github.com/hapifhir/hapi-fhir/commit/ff7aab2924d61e8f07ccbcd589c0c686a3497adb", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-08-30T19:30:47Z", "type": "commit"}, {"oid": "1c55d87b103778321766562bd43f44c64a1ad5e1", "url": "https://github.com/hapifhir/hapi-fhir/commit/1c55d87b103778321766562bd43f44c64a1ad5e1", "message": "Problem found in LOINC loader.", "committedDate": "2020-08-30T21:11:48Z", "type": "commit"}, {"oid": "94440c849fb1e61a193cae8a2d00b067eff450e4", "url": "https://github.com/hapifhir/hapi-fhir/commit/94440c849fb1e61a193cae8a2d00b067eff450e4", "message": "Ensure that LOINC loader assigns a distinct ID for each version.", "committedDate": "2020-08-31T01:53:38Z", "type": "commit"}, {"oid": "5f005120c9990f281abdaddd7939317d6262c5fd", "url": "https://github.com/hapifhir/hapi-fhir/commit/5f005120c9990f281abdaddd7939317d6262c5fd", "message": "Initial changes to support multi-version ValueSets", "committedDate": "2020-09-04T02:36:15Z", "type": "commit"}, {"oid": "019d08a0640978ea289e4f1272ee198182dbe204", "url": "https://github.com/hapifhir/hapi-fhir/commit/019d08a0640978ea289e4f1272ee198182dbe204", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-09-04T02:37:39Z", "type": "commit"}, {"oid": "5b707f97a9e5b0f2ae0fd386136dad98c48ef81c", "url": "https://github.com/hapifhir/hapi-fhir/commit/5b707f97a9e5b0f2ae0fd386136dad98c48ef81c", "message": "Missing commits", "committedDate": "2020-09-04T13:25:35Z", "type": "commit"}, {"oid": "ed2801dbaf48a5502868283774ac8a35e35364b0", "url": "https://github.com/hapifhir/hapi-fhir/commit/ed2801dbaf48a5502868283774ac8a35e35364b0", "message": "ConceptMap multi-version supported", "committedDate": "2020-09-06T15:33:55Z", "type": "commit"}, {"oid": "45b88de3b67e6536aad82fc6f119334ec83a6e28", "url": "https://github.com/hapifhir/hapi-fhir/commit/45b88de3b67e6536aad82fc6f119334ec83a6e28", "message": "Fixed typo", "committedDate": "2020-09-06T15:47:07Z", "type": "commit"}, {"oid": "1ecec0abc923bedf44872324a2c3a5e4f878391c", "url": "https://github.com/hapifhir/hapi-fhir/commit/1ecec0abc923bedf44872324a2c3a5e4f878391c", "message": "Fixed duplicate ConceptMap URL only", "committedDate": "2020-09-06T19:23:26Z", "type": "commit"}, {"oid": "81cd73f820b6da861207c5eb3bcc630fd86f2c77", "url": "https://github.com/hapifhir/hapi-fhir/commit/81cd73f820b6da861207c5eb3bcc630fd86f2c77", "message": "Added test cases to for duplicate url and version of ConceptMap", "committedDate": "2020-09-06T19:27:29Z", "type": "commit"}, {"oid": "d019dee786b9c741a4d10cc348d9b320591f56b4", "url": "https://github.com/hapifhir/hapi-fhir/commit/d019dee786b9c741a4d10cc348d9b320591f56b4", "message": "Added url/conceptMapVersion for ConceptMap to support translate", "committedDate": "2020-09-06T20:11:09Z", "type": "commit"}, {"oid": "54100426434b5feb9d99f41965ad8c5fbe6b91e7", "url": "https://github.com/hapifhir/hapi-fhir/commit/54100426434b5feb9d99f41965ad8c5fbe6b91e7", "message": "Multi-version supported for ConceptMap $translate operation", "committedDate": "2020-09-07T14:43:58Z", "type": "commit"}, {"oid": "5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "url": "https://github.com/hapifhir/hapi-fhir/commit/5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "message": "Fixed NullPointerException for reverse $translate operation.", "committedDate": "2020-09-07T22:09:01Z", "type": "commit"}, {"oid": "2fd692f5bb134ec92042fea7eeb9fcffc7457993", "url": "https://github.com/hapifhir/hapi-fhir/commit/2fd692f5bb134ec92042fea7eeb9fcffc7457993", "message": "Updated R5 reverse $translate test case for more coverage", "committedDate": "2020-09-08T00:54:35Z", "type": "commit"}, {"oid": "b4a87adc640081b396658527a072178998021d2b", "url": "https://github.com/hapifhir/hapi-fhir/commit/b4a87adc640081b396658527a072178998021d2b", "message": "Suggested test that includes case where ConceptVersion is not specified in $translate operation.", "committedDate": "2020-09-09T20:53:14Z", "type": "commit"}, {"oid": "d00db11586bab260d92a9c9e948688c47dfa904c", "url": "https://github.com/hapifhir/hapi-fhir/commit/d00db11586bab260d92a9c9e948688c47dfa904c", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-09-09T21:38:24Z", "type": "commit"}, {"oid": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "url": "https://github.com/hapifhir/hapi-fhir/commit/c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "message": "Fixed ConceptMap $translation without conceptMapVersion issue.", "committedDate": "2020-09-10T02:24:02Z", "type": "commit"}, {"oid": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "url": "https://github.com/hapifhir/hapi-fhir/commit/972bdbd87d86c23f8c6800e5f6a2e438733547c2", "message": "Updated based on code review", "committedDate": "2020-09-11T01:17:41Z", "type": "commit"}, {"oid": "16a5f57ae955531b35926971a6b929ae48521809", "url": "https://github.com/hapifhir/hapi-fhir/commit/16a5f57ae955531b35926971a6b929ae48521809", "message": "Added for ConceptMap DB migration", "committedDate": "2020-09-11T01:41:06Z", "type": "commit"}, {"oid": "448caa3f938a4b62c4aa21ca8814174008474f0a", "url": "https://github.com/hapifhir/hapi-fhir/commit/448caa3f938a4b62c4aa21ca8814174008474f0a", "message": "Changed the ConceptMap.VER to nullable", "committedDate": "2020-09-11T13:02:46Z", "type": "commit"}, {"oid": "750cbf4ba3ffd22afbd71518e5b41d229bd66750", "url": "https://github.com/hapifhir/hapi-fhir/commit/750cbf4ba3ffd22afbd71518e5b41d229bd66750", "message": "@Deprecated the old findTermConceptMapByUrl method", "committedDate": "2020-09-11T13:20:01Z", "type": "commit"}, {"oid": "b29d5388c6354cb0bef2dc97db086d4f712dbb43", "url": "https://github.com/hapifhir/hapi-fhir/commit/b29d5388c6354cb0bef2dc97db086d4f712dbb43", "message": "Merge pull request #2067 from jamesagnew/ft_2020_09_02_term_multi_version_support\n\nConceptMap multi version support", "committedDate": "2020-09-11T16:05:14Z", "type": "commit"}, {"oid": "91c1df7ce48871d39a673d360361a450d629470a", "url": "https://github.com/hapifhir/hapi-fhir/commit/91c1df7ce48871d39a673d360361a450d629470a", "message": "Supported ConceptMap Version from the properties", "committedDate": "2020-09-12T01:38:42Z", "type": "commit"}, {"oid": "701fe81acf692eebe0acc7b8300c45eb62db2409", "url": "https://github.com/hapifhir/hapi-fhir/commit/701fe81acf692eebe0acc7b8300c45eb62db2409", "message": "Merge pull request #2072 from jamesagnew/ft_2020_09_10_term_multi_version_support_db_migration\n\nTerm multi version support db migration - ConceptMap table change", "committedDate": "2020-09-14T13:13:12Z", "type": "commit"}, {"oid": "8551b33e8a00cdff0de93711a3c7a3e39bf67afa", "url": "https://github.com/hapifhir/hapi-fhir/commit/8551b33e8a00cdff0de93711a3c7a3e39bf67afa", "message": "Merge branch 'feature_2020_09_02_term_multi_version_support' into ft_2020_09_11_term_multi_version_support_loader", "committedDate": "2020-09-14T13:15:12Z", "type": "commit"}, {"oid": "0d929d4d191e993b63ff085fb617d84ccc0d248d", "url": "https://github.com/hapifhir/hapi-fhir/commit/0d929d4d191e993b63ff085fb617d84ccc0d248d", "message": "Updated based on review comments", "committedDate": "2020-09-14T13:30:03Z", "type": "commit"}, {"oid": "64d3e79a37ca86f0be605e919988e6389fe47c50", "url": "https://github.com/hapifhir/hapi-fhir/commit/64d3e79a37ca86f0be605e919988e6389fe47c50", "message": "Merge pull request #2075 from jamesagnew/ft_2020_09_11_term_multi_version_support_loader\n\nAdded to support term multi version", "committedDate": "2020-09-14T20:00:27Z", "type": "commit"}, {"oid": "cd104ad6358ba4d2bf350bed002945491bc3615a", "url": "https://github.com/hapifhir/hapi-fhir/commit/cd104ad6358ba4d2bf350bed002945491bc3615a", "message": "Revised approach for versioning of ValueSet.", "committedDate": "2020-09-15T14:21:42Z", "type": "commit"}, {"oid": "fe684ee4c0c2066c086fde29586ed62add223010", "url": "https://github.com/hapifhir/hapi-fhir/commit/fe684ee4c0c2066c086fde29586ed62add223010", "message": "Further cleanup", "committedDate": "2020-09-15T16:26:17Z", "type": "commit"}, {"oid": "b4cd09a5b692a01ca239311f42ee45901bfd00cb", "url": "https://github.com/hapifhir/hapi-fhir/commit/b4cd09a5b692a01ca239311f42ee45901bfd00cb", "message": "Further cleanup", "committedDate": "2020-09-15T16:30:26Z", "type": "commit"}, {"oid": "087c9e3c3b49429eb58cf7b00c093df9491983b3", "url": "https://github.com/hapifhir/hapi-fhir/commit/087c9e3c3b49429eb58cf7b00c093df9491983b3", "message": "Merge remote-tracking branch 'remotes/origin/master' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-15T16:34:11Z", "type": "commit"}, {"oid": "7b15f85fa127d9ad6848046a2a94dd83f1e20bc1", "url": "https://github.com/hapifhir/hapi-fhir/commit/7b15f85fa127d9ad6848046a2a94dd83f1e20bc1", "message": "Merge remote-tracking branch 'remotes/origin/feature_20200830_term_multi_version_support' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-15T16:35:31Z", "type": "commit"}, {"oid": "539ef63fc09b74f570cfd9106128d23522432ea6", "url": "https://github.com/hapifhir/hapi-fhir/commit/539ef63fc09b74f570cfd9106128d23522432ea6", "message": "Merge branch 'im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-15T20:24:47Z", "type": "commit"}, {"oid": "ca0bdc8e4c6b21f573f7dc065c6f7d683f6e8e6c", "url": "https://github.com/hapifhir/hapi-fhir/commit/ca0bdc8e4c6b21f573f7dc065c6f7d683f6e8e6c", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-09-15T20:49:06Z", "type": "commit"}, {"oid": "3add1320b7b8a1dc10259481f47c726a2e9e43ff", "url": "https://github.com/hapifhir/hapi-fhir/commit/3add1320b7b8a1dc10259481f47c726a2e9e43ff", "message": "Merge remote-tracking branch 'remotes/origin/im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-15T20:52:02Z", "type": "commit"}, {"oid": "b2b63cbb02b98d1c30618af78ab9f447326262da", "url": "https://github.com/hapifhir/hapi-fhir/commit/b2b63cbb02b98d1c30618af78ab9f447326262da", "message": "Fixed JUnit tests.", "committedDate": "2020-09-16T02:05:46Z", "type": "commit"}, {"oid": "7f7e1f39bc46c87561a947a38a9a885fc57f88e5", "url": "https://github.com/hapifhir/hapi-fhir/commit/7f7e1f39bc46c87561a947a38a9a885fc57f88e5", "message": "Merge remote-tracking branch 'remotes/origin/im_20200728_term_multi_version_support' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-16T02:06:43Z", "type": "commit"}, {"oid": "64f2bae2e7ed279df7bcfe7eb6ac2909a27e613c", "url": "https://github.com/hapifhir/hapi-fhir/commit/64f2bae2e7ed279df7bcfe7eb6ac2909a27e613c", "message": "Impl CodeSystem $validate-code for R4 with basic test cases", "committedDate": "2020-09-19T02:30:59Z", "type": "commit"}, {"oid": "05de0c503124bd20bfe7081838d533ef68fb8dc5", "url": "https://github.com/hapifhir/hapi-fhir/commit/05de0c503124bd20bfe7081838d533ef68fb8dc5", "message": "Added more test cases for R4", "committedDate": "2020-09-19T16:36:14Z", "type": "commit"}, {"oid": "7db9f7475b4c9b6618edf3a6ae80316860bf3cf5", "url": "https://github.com/hapifhir/hapi-fhir/commit/7db9f7475b4c9b6618edf3a6ae80316860bf3cf5", "message": "Changed fetch size to 1 for CodeSystem $validate-code", "committedDate": "2020-09-19T16:52:18Z", "type": "commit"}, {"oid": "01d88a665d4db8ff3d8a4abe9b65edeb5f373aae", "url": "https://github.com/hapifhir/hapi-fhir/commit/01d88a665d4db8ff3d8a4abe9b65edeb5f373aae", "message": "Added CodeSystem/$validate-code for R5", "committedDate": "2020-09-19T18:13:07Z", "type": "commit"}, {"oid": "a3a032584bc8c083591f48a4176e94e56aa61860", "url": "https://github.com/hapifhir/hapi-fhir/commit/a3a032584bc8c083591f48a4176e94e56aa61860", "message": "Made Transactional", "committedDate": "2020-09-19T19:18:28Z", "type": "commit"}, {"oid": "8f692a4776001ffce2b2ac2779bf106fd4f90775", "url": "https://github.com/hapifhir/hapi-fhir/commit/8f692a4776001ffce2b2ac2779bf106fd4f90775", "message": "CodeSystem/$validate-code not supported for DSTU2, DSTU3", "committedDate": "2020-09-20T02:54:39Z", "type": "commit"}, {"oid": "302bbca8fd4ef3a54aaa1ed11f50959c3bd1c762", "url": "https://github.com/hapifhir/hapi-fhir/commit/302bbca8fd4ef3a54aaa1ed11f50959c3bd1c762", "message": "Changes to support multi-versioning in ValueSet $expand operation.", "committedDate": "2020-09-21T02:01:21Z", "type": "commit"}, {"oid": "f9f8bf6515f7b1ae59b3a916f6e760c53d812779", "url": "https://github.com/hapifhir/hapi-fhir/commit/f9f8bf6515f7b1ae59b3a916f6e760c53d812779", "message": "Merge remote-tracking branch 'origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-09-21T02:02:08Z", "type": "commit"}, {"oid": "4216cee8c6409ec1e6779ab739379830497f7d19", "url": "https://github.com/hapifhir/hapi-fhir/commit/4216cee8c6409ec1e6779ab739379830497f7d19", "message": "Added and enhanced tests plus fixes arising from tests.", "committedDate": "2020-09-22T18:44:32Z", "type": "commit"}, {"oid": "b32c4f01a835386024c0254a549acc78640d4703", "url": "https://github.com/hapifhir/hapi-fhir/commit/b32c4f01a835386024c0254a549acc78640d4703", "message": "Fixed lookupCode implementation in InMemoryTerminologyServerValidationSupport.", "committedDate": "2020-09-22T22:46:16Z", "type": "commit"}, {"oid": "673274a966580af4f02ad902514bc912bd973816", "url": "https://github.com/hapifhir/hapi-fhir/commit/673274a966580af4f02ad902514bc912bd973816", "message": "Added invalid test cases for CodeSystem/$validate-code R3", "committedDate": "2020-09-23T00:18:18Z", "type": "commit"}, {"oid": "20661c7a2b906e67b17585fa9a2d5b72086520bf", "url": "https://github.com/hapifhir/hapi-fhir/commit/20661c7a2b906e67b17585fa9a2d5b72086520bf", "message": "Removed unused import", "committedDate": "2020-09-23T00:19:43Z", "type": "commit"}, {"oid": "b6d86dc5f2ef3f819e5c7c7b09b0cde5629260ac", "url": "https://github.com/hapifhir/hapi-fhir/commit/b6d86dc5f2ef3f819e5c7c7b09b0cde5629260ac", "message": "Added fail(); in the invalid test cases", "committedDate": "2020-09-23T00:39:20Z", "type": "commit"}, {"oid": "e6a669444d4278b98fde5c30a9ece182eba19af0", "url": "https://github.com/hapifhir/hapi-fhir/commit/e6a669444d4278b98fde5c30a9ece182eba19af0", "message": "Added invalid test cases for DSTU3", "committedDate": "2020-09-23T00:51:20Z", "type": "commit"}, {"oid": "3d3d013d72e6f4d7ca6665897c79641157486b2a", "url": "https://github.com/hapifhir/hapi-fhir/commit/3d3d013d72e6f4d7ca6665897c79641157486b2a", "message": "Changed import of IdType to r5.", "committedDate": "2020-09-23T13:19:06Z", "type": "commit"}, {"oid": "404abb2dcbe010a86ca90fc1dc2679a0c92d25f2", "url": "https://github.com/hapifhir/hapi-fhir/commit/404abb2dcbe010a86ca90fc1dc2679a0c92d25f2", "message": "Merge pull request #2094 from jamesagnew/ft_2020_09_16_codesystem_validate\n\nSupport CodeSystem/$validate-code for R4, R5", "committedDate": "2020-09-23T19:34:38Z", "type": "commit"}, {"oid": "ceb5ec63847c2bee832027ea93edd902a5356270", "url": "https://github.com/hapifhir/hapi-fhir/commit/ceb5ec63847c2bee832027ea93edd902a5356270", "message": "Use canonical identifiers for code systems rather than specifying version separately.", "committedDate": "2020-09-23T20:42:29Z", "type": "commit"}, {"oid": "640ee94c5c0216d8c606646950426551885055d3", "url": "https://github.com/hapifhir/hapi-fhir/commit/640ee94c5c0216d8c606646950426551885055d3", "message": "Merge remote-tracking branch 'origin/master' into im_20200728_term_multi_version_support", "committedDate": "2020-09-23T20:43:22Z", "type": "commit"}, {"oid": "dffc02a12600ff670d4278e1e9fe94f481516586", "url": "https://github.com/hapifhir/hapi-fhir/commit/dffc02a12600ff670d4278e1e9fe94f481516586", "message": "Missing fixes for DSTU3 and R5.", "committedDate": "2020-09-23T20:51:18Z", "type": "commit"}, {"oid": "e5daea17b7fc2c2e1539e73fefc3d6d13a020b77", "url": "https://github.com/hapifhir/hapi-fhir/commit/e5daea17b7fc2c2e1539e73fefc3d6d13a020b77", "message": "Additional cleanup and migration tasks.", "committedDate": "2020-09-23T21:17:07Z", "type": "commit"}, {"oid": "5fe46be41cb8d0f455f3c5a32f3bc4a23fbaa2f2", "url": "https://github.com/hapifhir/hapi-fhir/commit/5fe46be41cb8d0f455f3c5a32f3bc4a23fbaa2f2", "message": "Validate code changes and new tests.", "committedDate": "2020-09-24T22:51:47Z", "type": "commit"}, {"oid": "2bceacd9a6cacae20259445d7e7961072fe8e017", "url": "https://github.com/hapifhir/hapi-fhir/commit/2bceacd9a6cacae20259445d7e7961072fe8e017", "message": "Update loader to ensure that ConceptMap and ValueSet Ids are unique for each version loaded.", "committedDate": "2020-09-25T12:51:53Z", "type": "commit"}, {"oid": "6f9874468a608165eb9263147c9f693f29805e7b", "url": "https://github.com/hapifhir/hapi-fhir/commit/6f9874468a608165eb9263147c9f693f29805e7b", "message": "Merge remote-tracking branch 'origin/master' into feature_2020_09_02_term_multi_version_support", "committedDate": "2020-09-25T12:54:17Z", "type": "commit"}, {"oid": "47244c54dc02cf76ef8b8dca7602d40c154a223a", "url": "https://github.com/hapifhir/hapi-fhir/commit/47244c54dc02cf76ef8b8dca7602d40c154a223a", "message": "Merge remote-tracking branch 'origin/feature_2020_09_02_term_multi_version_support' into im_20200728_term_multi_version_support\n\n# Conflicts:\n#\thapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincHandler.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincIeeeMedicalDeviceCodeHandler.java\n#\thapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\n#\thapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "committedDate": "2020-09-25T13:10:07Z", "type": "commit"}, {"oid": "1dc4a533d61fd4b9573777e97a7bed714ba1cf70", "url": "https://github.com/hapifhir/hapi-fhir/commit/1dc4a533d61fd4b9573777e97a7bed714ba1cf70", "message": "Fixes to terminology loader.", "committedDate": "2020-09-26T01:43:15Z", "type": "commit"}, {"oid": "732624bfaf1c5c80c902a806ede575c19771ca3b", "url": "https://github.com/hapifhir/hapi-fhir/commit/732624bfaf1c5c80c902a806ede575c19771ca3b", "message": "Fix broken JUnit test.", "committedDate": "2020-09-26T02:55:01Z", "type": "commit"}, {"oid": "e86d9deaacbc37ca465738e1cd810add78e69f0b", "url": "https://github.com/hapifhir/hapi-fhir/commit/e86d9deaacbc37ca465738e1cd810add78e69f0b", "message": "Additional tests.", "committedDate": "2020-09-27T21:45:15Z", "type": "commit"}, {"oid": "9d8664ccd84d7c5cd40f63faec3995632a13c151", "url": "https://github.com/hapifhir/hapi-fhir/commit/9d8664ccd84d7c5cd40f63faec3995632a13c151", "message": "Additional tests and updates.", "committedDate": "2020-09-28T01:09:06Z", "type": "commit"}, {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f", "url": "https://github.com/hapifhir/hapi-fhir/commit/42b4e9ae02f33baa02a49b523a10935275155b7f", "message": "Add change log.", "committedDate": "2020-09-28T12:45:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496191490", "bodyText": "This is no longer a version-independent concept. Consider renaming this to something more appropriate (e.g. Concept or VersionOptionalConcept).", "author": "dmuylwyk", "createdAt": "2020-09-28T19:45:58Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "diffHunk": "@@ -40,7 +41,12 @@ public VersionIndependentConcept(String theSystem, String theCode) {\n \t}\n \n \tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\t\tthis(theSystem, theCode, theDisplay, null);\n+\t}\n+\n+\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1ODc4NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496858785", "bodyText": "I understood the name of this class as being related to the FHIR version rather than Concept version, but I can see how this might be confusing. Renamed to FhirVersionIndependentConcept.", "author": "IanMMarshall", "createdAt": "2020-09-29T16:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjIwNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496966205", "bodyText": "Ah, I think you're absolutely right. My bad.", "author": "dmuylwyk", "createdAt": "2020-09-29T18:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/FhirVersionIndependentConcept.java\nsimilarity index 80%\nrename from hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java\nrename to hapi-fhir-base/src/main/java/ca/uhn/fhir/util/FhirVersionIndependentConcept.java\nindex ec5439fbff..cd524b8ef7 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/FhirVersionIndependentConcept.java\n\n@@ -36,15 +35,15 @@ public class VersionIndependentConcept implements Comparable<VersionIndependentC\n \t/**\n \t * Constructor\n \t */\n-\tpublic VersionIndependentConcept(String theSystem, String theCode) {\n+\tpublic FhirVersionIndependentConcept(String theSystem, String theCode) {\n \t\tthis(theSystem, theCode, null);\n \t}\n \n-\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\tpublic FhirVersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n \t\tthis(theSystem, theCode, theDisplay, null);\n \t}\n \n-\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {\n+\tpublic FhirVersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {\n \t\tmySystem = theSystem;\n \t\tmySystemVersion = theSystemVersion;\n \t\tmyCode = theCode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NTExNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496195116", "bodyText": "Surprised we didn't already support this. Good catch!", "author": "dmuylwyk", "createdAt": "2020-09-28T19:52:51Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java", "diffHunk": "@@ -42,6 +42,8 @@\n \n \tSubsumesResult subsumes(IPrimitiveType<String> theCodeA, IPrimitiveType<String> theCodeB, IPrimitiveType<String> theSystem, CD theCodingA, CD theCodingB, RequestDetails theRequestDetails);\n \n+\tIValidationSupport.CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, IPrimitiveType<String> theDisplay, CD theCoding, CC theCodeableConcept, RequestDetails theRequestDetails);", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjUyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496196524", "bodyText": "Nitpick: these kinds of comments add unnecessary visual noise; the method names should be descriptive enough.", "author": "dmuylwyk", "createdAt": "2020-09-28T19:55:33Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java", "diffHunk": "@@ -58,6 +61,32 @@ public void setResourceId(Long theResourceId) {\n \t\tmyResourceId = theResourceId;\n \t}\n \n+\t//-- url", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NzgxMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496877813", "bodyText": "Removed.", "author": "IanMMarshall", "createdAt": "2020-09-29T16:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "chunk": "diff --git a/hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java b/hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java\nindex 06bfd9cd07..04e51dd903 100644\n--- a/hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java\n+++ b/hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java\n\n@@ -61,7 +61,6 @@ public class TranslationQuery {\n \t\tmyResourceId = theResourceId;\n \t}\n \n-\t//-- url\n \tpublic boolean hasUrl() {\n \t\treturn myUrl != null && myUrl.hasValue();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496210677", "bodyText": "This seems incomplete to me. It's good to store a ConceptMap version as you do for CodeSystem and ValueSet; this is equivalent to the conceptMapVersion in parameter in the spec for ConceptMap$translate. However, I think what's required is support for the version in parameter, which corresponds to CodeSystem.version. The response should then include CodeSystem.version in any matches. We rarely refer to a specific ConceptMap; but we are interested in mapping for a particular version of the concept's CodeSystem.", "author": "dmuylwyk", "createdAt": "2020-09-28T20:24:08Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "diffHunk": "@@ -24,15 +27,15 @@\n import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.StringType;\n import org.hl7.fhir.r4.model.UriType;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class TranslationRequest {\n \tprivate CodeableConcept myCodeableConcept;\n \tprivate Long myResourceId;\n \tprivate BooleanType myReverse;\n+\tprivate UriType myUrl;\n+\tprivate StringType myConceptMapVersion;", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MDQ0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496890446", "bodyText": "The CodeSystem.version is actually captured, where provided, in the myCodeableConcept property. Specifically the TranslationRequest is instantiated by the translate method in the ConceptMap resource provider classes and the codeableConcept property in the request is created and/or populated from the parameters provided to the translate method.  The resource provider translate methods all support CodeSystem.version as a parameter and include these when creating/populating the codeableConcept property.", "author": "IanMMarshall", "createdAt": "2020-09-29T16:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzkxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496967910", "bodyText": "Terrific. Thanks!", "author": "dmuylwyk", "createdAt": "2020-09-29T18:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496212404", "bodyText": "This looks like we're assuming the version most recently updated is also the latest/current version. This needs to be documented somewhere; or we need a clearer way of identifying the current version. For example, a flag supported by an enum with values such as historical|current|draft.", "author": "dmuylwyk", "createdAt": "2020-09-28T20:27:31Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjEwOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496906109", "bodyText": "This assumption is correct. We opted for this approach for reasons of performance and simplicity. The HFJ_RESOURCE table is already indexed by update date/time and so need to add a new indexed column on the terminology tables. Also, this will avoid the need to update terminology table rows for previous version when uploading a new version.\nI agree however that this should be better documented. Renaming this query to be getTermConceptMapEntitiesByUrlOrderByMostRecentUpdate to make this clearer. Also will add a note to this effect as part of planned changes to the HAPI FHIR documentation.", "author": "IanMMarshall", "createdAt": "2020-09-29T17:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2OTcxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496969719", "bodyText": "What would be the impact of adding a new column for this flag and indexing on it? You would only need to update one other row when uploading a new version (set the previous current to historical, for example).", "author": "dmuylwyk", "createdAt": "2020-09-29T19:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzE0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497187142", "bodyText": "The impact would arise due to increasing the number of table write operations that would need to be done each time a new version is loaded (note that I am assuming we would have to do something similar for ValueSet). On top of the table writes, there would be additional overhead to query for the previous current version and to update the index on the column when it is changed.\nPerhaps I am overestimating the impact, but at the same time I am not seeing much of a benefit to adding a new column that would justify the added complexity and performance overhead.", "author": "IanMMarshall", "createdAt": "2020-09-30T01:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NjYxNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497586615", "bodyText": "Fair enough, @IanMMarshall. I'm torn between the two approaches.\nIf an implementer only ever loads terminology sequentially in order of versions, this is a non-issue. However, any updates to previous versions will require any subsequent versions to be updated/reloaded. I think this may be a good point for @jamesagnew to weigh in on.", "author": "dmuylwyk", "createdAt": "2020-09-30T15:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1OTc4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498259783", "bodyText": "I agree, I am not sure I am happy with this approach myself (i.e. that a site may need to reload current version after updating a previous version). One other point that I forgot to mention however that eventually tipped me towards the current approach, is the fact that the FHIR specification does not provide any mechanism for specifying that a particular version is the current version. In the terminology loader, we could easily add a config parameter to say that the version being loaded is current, but what if a site is loading or updating terminology using the REST APIs?\nI figured that making the latest update the current version was likely the simplest and most consistent way we could manage this until we come to some type of agreement on how this might be otherwise managed by the REST APIs.", "author": "IanMMarshall", "createdAt": "2020-10-01T13:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\nindex a7716ebafe..f4109f94e9 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n\n@@ -46,9 +46,10 @@ public interface ITermConceptMapDao extends JpaRepository<TermConceptMap, Long>\n \t\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n-\t\n+\n+\t// Note that last updated version is considered current version.\n \t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") \n-\tList<TermConceptMap> getTermConceptMapEntitiesByUrlOrderByVersion(Pageable thePage, @Param(\"url\") String theUrl);\n+\tList<TermConceptMap> getTermConceptMapEntitiesByUrlOrderByMostRecentUpdate(Pageable thePage, @Param(\"url\") String theUrl);\n \n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url AND cm.myVersion = :version\")\n \tOptional<TermConceptMap> findTermConceptMapByUrlAndVersion(@Param(\"url\") String theUrl, @Param(\"version\") String theVersion);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMzUwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496213502", "bodyText": "It's best practice to include a comment why this was deprecated.", "author": "dmuylwyk", "createdAt": "2020-09-28T20:29:35Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java", "diffHunk": "@@ -28,17 +28,29 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n+import java.util.List;\n import java.util.Optional;\n \n public interface ITermValueSetDao extends JpaRepository<TermValueSet, Long> {\n \n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myResourcePid = :resource_pid\")\n \tOptional<TermValueSet> findByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n+\t@Deprecated", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNDAxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496934012", "bodyText": "Good catch. Done.", "author": "IanMMarshall", "createdAt": "2020-09-29T17:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMzUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java\nindex bc698dc8b3..3046ac6a24 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java\n\n@@ -36,6 +36,7 @@ public interface ITermValueSetDao extends JpaRepository<TermValueSet, Long> {\n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myResourcePid = :resource_pid\")\n \tOptional<TermValueSet> findByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n+\t// Keeping for backwards compatibility but recommend using findTermValueSetByUrlAndNullVersion instead.\n \t@Deprecated\n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myUrl = :url\")\n \tOptional<TermValueSet> findByUrl(@Param(\"url\") String theUrl);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496218216", "bodyText": "I'm not sure I understand this change. Can you explain why it's necessary?", "author": "dmuylwyk", "createdAt": "2020-09-28T20:38:51Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MjI1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496942259", "bodyText": "Previously, there was only one ResourceTable row for a given CodeSystem with a specified URL. If a new version of the CodeSystem was loaded, it essentially resulted in an update of the existing resource and so there was never a need to update the resource ID of the CodeSystem resource in the TermCodeSystem table.\nNow that we are supporting multiple versions, there can be multiple ResourceTable rows for a given CodeSystem (each version will have a CodeSystem resource). We only want the TermCodeSystem to be linked to the ResourceTable row for the most recently updated CodeSystem version, and as such I needed to make this column updatable so that we could update it whenever a new version was loaded.", "author": "IanMMarshall", "createdAt": "2020-09-29T18:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjExMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496972111", "bodyText": "Understood. So for each version of a given code system, we will have a distinct CodeSystem resource and a row on ResourceTable.\nOnly the current / most recently updated code system will have a row on TermCodeSystem. Is that right?", "author": "dmuylwyk", "createdAt": "2020-09-29T19:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MzgxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496993810", "bodyText": "I suspect I'm misunderstanding something here but here goes:\nA given resource (e.g. CodeSystem) will have a single row on ResourceTable (the latest version) and one or more rows on ResourceHistoryTable (one for each version).\nIn the terminology tables, we have TermCodeSystem and TermCodeSystemVersion.\nA row on TermCodeSystem should identify the one row in ResourceTable (latest), and also identify a row on TermCodeSystemVersion (the current version).\nTo date, we've only ever supported a single version so we've had a one-to-one for TermCodeSystem and TermCodeSystemVersion.\nIt seems to me TermCodeSystemVersion should correspond to a row on ResourceHistoryTable, not ResourceTable. So we could have a single versioned resource for a CodeSystem, identify the latest in TermCodeSystem, and access its history via TermCodeSystemVersion.\nI thought that was the purpose of the TermCodeSystemVersion table but I'm probably mistaken. It just strikes me as a code smell that we will create distinct resources and ResourceTable records for each version of CodeSystem.version.\nSanity check: am I making sense?", "author": "dmuylwyk", "createdAt": "2020-09-29T19:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNTI0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497715249", "bodyText": "In response to your questions:\n\nUnderstood. So for each version of a given code system, we will have a distinct CodeSystem resource and a row on ResourceTable.\nOnly the current / most recently updated code system will have a row on TermCodeSystem. Is that right?\n\nThis is correct.\nIn regards to:\n\nIt seems to me TermCodeSystemVersion should correspond to a row on ResourceHistoryTable, not ResourceTable. So we could have a single versioned resource for a CodeSystem, identify the latest in TermCodeSystem, and access its history via TermCodeSystemVersion.\n\nI disagree. My understanding of ResourceHistoryTable is that it is used to show a state history for a given resource. It tracks how and when a resource was created, updated and possibly deleted. The versions in ResourceHistoryTable shows the current state of a Resource after a given point of time. This to me is different from the meaning of CodeSystem.version which is used to represent a given release or published implementation of a CodeSystem. If each new version of a CodeSystem replaces (i.e. invalidates or inactivates) all previous versions, then yes, I think the versioning of CodeSystem would be analogous to the versioning of resources in ResourceTable and ResourceHistoryTable. However, my understanding of the motivation for this change is the idea that there can be multiple actively supported versions of a CodeSystem. As such, I think that each version of a CodeSystem (version in this case meaning CodeSystem.version which is defined outside of the CDR) should be represented by a separate resource.", "author": "IanMMarshall", "createdAt": "2020-09-30T18:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMzIyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497803220", "bodyText": "Ah, this is really interesting. I think you're right about multiple actively supported versions. I think I agree with you. I expect @jamesagnew will agree as well.\nLet's make sure I understand:\nSo we should have multiple CodeSystem resources with the same value for CodeSystem.url - one for each value of CodeSystem.version. Each resource will have its own row on ResourceTable and one or more rows on ResourceHistoryTable.\nThen we should have a single row on TermCodeSystem for all of the CodeSystem resources with the same value for CodeSystem.url. We will have one row on TermCodeSystemVersion for each value of CodeSystem.version for that value of CodeSystem.url, and the single row on TermCodeSystem will point to the \"current\" or \"latest\" version on TermCodeSystemVersion.\nFor operations where the version isn't provided, we look up the \"current\" or \"latest\" on TermCodeSystemVersion via TermCodeSystem for that value of CodeSystem.url.\nFor operations where the version is provided, we look it up directly in TermCodeSystemVersion.\nIs that right? Is this also how it works for ValueSets now?", "author": "dmuylwyk", "createdAt": "2020-09-30T21:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTA1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498265056", "bodyText": "Yes, this is how I expect it should be working for CodeSystems, ValueSets and ConceptMaps (I recognize that ConceptMaps are separate, but the mappings themselves would be to a specific CodeSystem version and so I think they would necessarily have to be linked to the CodeSystem version as well).", "author": "IanMMarshall", "createdAt": "2020-10-01T13:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjE2Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498292163", "bodyText": "Okay. Thanks for fielding my questions. I understand we also identify the ValueSet and ConceptMap versions different in the terminology tables (i.e. no equivalent to TermCodeSystemVersion entity). Thanks again!", "author": "dmuylwyk", "createdAt": "2020-10-01T14:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMDI3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496220277", "bodyText": "Nitpick: for consistency and easier reading.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,\n          \n          \n            \n            \t\t@OperationParam(name = \"version\", min = 0, max = 1) StringType theVersion,", "author": "dmuylwyk", "createdAt": "2020-09-28T20:42:43Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java", "diffHunk": "@@ -84,13 +90,18 @@ public Parameters subsumes(\n \t\t@OperationParam(name = \"system\", min = 0, max = 1) UriType theSystem,\n \t\t@OperationParam(name = \"codingA\", min = 0, max = 1) Coding theCodingA,\n \t\t@OperationParam(name = \"codingB\", min = 0, max = 1) Coding theCodingB,\n+\t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10620a8bb46ffc081aea3214772bc51faa17defd", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java\nindex b4ede03ec9..237a9f2847 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java\n\n@@ -90,7 +90,7 @@ public class BaseJpaResourceProviderCodeSystemDstu3 extends JpaResourceProviderD\n \t\t@OperationParam(name = \"system\", min = 0, max = 1) UriType theSystem,\n \t\t@OperationParam(name = \"codingA\", min = 0, max = 1) Coding theCodingA,\n \t\t@OperationParam(name = \"codingB\", min = 0, max = 1) Coding theCodingB,\n-\t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,\n+\t\t@OperationParam(name = \"version\", min = 0, max = 1) StringType theVersion,\n \t\tRequestDetails theRequestDetails\n \t) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzI2Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227262", "bodyText": "Consider another name for this. This is CodeSystem.url and possibly also CodeSystem.version. CodeSystem.identifier is unrelated, and we probably want to avoid confusing the two.", "author": "dmuylwyk", "createdAt": "2020-09-28T20:56:19Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -793,7 +845,13 @@ private Boolean expandValueSetHandleIncludeOrExcludeUsingDatabase(IValueSetConce\n \t\t/*\n \t\t * Filters\n \t\t */\n-\t\thandleFilters(bool, theSystem, qb, theIncludeOrExclude);\n+\t\tString codeSystemIdentifier;", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMjkxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497002914", "bodyText": "Renamed to codeSystemUrlAndVersion.", "author": "IanMMarshall", "createdAt": "2020-09-29T19:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 2fe48ea79b..85e9afc540 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -845,13 +845,13 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\t/*\n \t\t * Filters\n \t\t */\n-\t\tString codeSystemIdentifier;\n+\t\tString codeSystemUrlAndVersion;\n \t\tif (codeSystemVersion != null) {\n-\t\t\tcodeSystemIdentifier = theSystem + \"|\" + codeSystemVersion;\n+\t\t\tcodeSystemUrlAndVersion = theSystem + \"|\" + codeSystemVersion;\n \t\t} else {\n-\t\t\tcodeSystemIdentifier = theSystem;\n+\t\t\tcodeSystemUrlAndVersion = theSystem;\n \t\t}\n-\t\thandleFilters(bool, codeSystemIdentifier, qb, theIncludeOrExclude);\n+\t\thandleFilters(bool, codeSystemUrlAndVersion, qb, theIncludeOrExclude);\n \n \t\tQuery luceneQuery = bool.createQuery();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzY0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227642", "bodyText": "Typo? Loing versus Loinc?", "author": "dmuylwyk", "createdAt": "2020-09-28T20:57:01Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -926,36 +984,36 @@ private void handleFilter(String theSystem, QueryBuilder theQb, BooleanJunction<\n \t\t\t\tbreak;\n \t\t\tcase \"concept\":\n \t\t\tcase \"code\":\n-\t\t\t\thandleFilterConceptAndCode(theSystem, theQb, theBool, theFilter);\n+\t\t\t\thandleFilterConceptAndCode(theCodeSystemIdentifier, theQb, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"parent\":\n \t\t\tcase \"child\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincParentChild(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincParentChild(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"ancestor\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincAncestor(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincAncestor(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"descendant\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincDescendant(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincDescendant(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"copyright\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincCopyright(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincCopyright(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\thandleFilterRegex(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t}\n \t}\n \n-\tprivate boolean isCodeSystemLoingOrThrowInvalidRequestException(String theSystem, String theProperty) {\n-\t\tif (!isCodeSystemLoinc(theSystem)) {\n-\t\t\tthrow new InvalidRequestException(\"Invalid filter, property \" + theProperty + \" is LOINC-specific and cannot be used with system: \" + theSystem);\n+\tprivate void isCodeSystemLoingOrThrowInvalidRequestException(String theSystemIdentifier, String theProperty) {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMzQ5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497003494", "bodyText": "Yeah, I guess I should have fixed the name of this method when I made the other changes. Corrected.", "author": "IanMMarshall", "createdAt": "2020-09-29T19:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 2fe48ea79b..85e9afc540 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -988,19 +988,19 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\t\t\tbreak;\n \t\t\tcase \"parent\":\n \t\t\tcase \"child\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\tisCodeSystemLoincOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n \t\t\t\thandleFilterLoincParentChild(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"ancestor\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\tisCodeSystemLoincOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n \t\t\t\thandleFilterLoincAncestor(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"descendant\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\tisCodeSystemLoincOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n \t\t\t\thandleFilterLoincDescendant(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"copyright\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\tisCodeSystemLoincOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n \t\t\t\thandleFilterLoincCopyright(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tdefault:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496228841", "bodyText": "I'm not sure I understand this comment. What does it mean?", "author": "dmuylwyk", "createdAt": "2020-09-28T20:59:25Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1920,6 +2069,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElementTarget> cachedTargets;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTQzOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497005439", "bodyText": "I think it was supposed to say get the latest ConceptMapVersion if the TranslationRequest has url but no ConceptMapVersion. Changed this to get the latest ConceptMapVersion if theTranslationRequest has ConceptMap url but no ConceptMap version to make it clearer..", "author": "IanMMarshall", "createdAt": "2020-09-29T19:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NzQ2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497587461", "bodyText": "Works for me!", "author": "dmuylwyk", "createdAt": "2020-09-30T15:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 2fe48ea79b..85e9afc540 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -2070,7 +2070,7 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n \n-\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has ConceptMap url but no ConceptMap version\n \t\tString latestConceptMapVersion = null;\n \t\tif (theTranslationRequest.hasUrl() && !theTranslationRequest.hasConceptMapVersion())\n \t\t\tlatestConceptMapVersion = getLatestConceptMapVersion(theTranslationRequest);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTE1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229150", "bodyText": "Same comment. What does it mean?", "author": "dmuylwyk", "createdAt": "2020-09-28T20:59:56Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2003,6 +2173,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElement> cachedElements;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTgzOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497005838", "bodyText": "Same response.", "author": "IanMMarshall", "createdAt": "2020-09-29T19:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 2fe48ea79b..85e9afc540 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -2174,7 +2174,7 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n \n-\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has ConceptMap url but no ConceptMap version\n \t\tString latestConceptMapVersion = null;\n \t\tif (theTranslationRequest.hasUrl() && !theTranslationRequest.hasConceptMapVersion())\n \t\t\tlatestConceptMapVersion = getLatestConceptMapVersion(theTranslationRequest);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229589", "bodyText": "What is the failure?", "author": "dmuylwyk", "createdAt": "2020-09-28T21:00:50Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2057,6 +2248,7 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \n \t\t\t\t\twhile (scrollableResultsIterator.hasNext()) {\n \t\t\t\t\t\tTermConceptMapGroupElement nextElement = scrollableResultsIterator.next();\n+\t\t\t\t\t\t// TODO: The invocation of the size() below does not seem to be necessary but for some reason, removing it causes tests in TerminologySvcImplR4Test to fail.", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNzcwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497017706", "bodyText": "The test methods throw an exception:\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: ca.uhn.fhir.jpa.entity.TermConceptMapGroupElement.myConceptMapGroupElementTargets, could not initialize proxy - no Session\nThe exception appears to be triggered when the test methods attempt to log TermConceptMapGroupElement elements. I could have simply removed the log statements from the test class, but I was not sure if this was indicative of another reason why the size() method is called below, so I made the note to look into this further later.", "author": "IanMMarshall", "createdAt": "2020-09-29T20:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzQzMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497053431", "bodyText": "Gotcha. That's weird.", "author": "dmuylwyk", "createdAt": "2020-09-29T20:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMTA1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496231051", "bodyText": "Is this referring to CodeSystem.version or a TermCodeSystemVersion? The log output may be misleading since TermCodeSystemVersion is internal and specific to HAPI FHIR whereas end-users will be more familiar with CodeSystem.version.", "author": "dmuylwyk", "createdAt": "2020-09-28T21:03:35Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java", "diffHunk": "@@ -231,6 +231,15 @@ public void deleteCodeSystem(TermCodeSystem theCodeSystem) {\n \t\t});\n \t}\n \n+\t@Override\n+\t@Transactional(propagation = Propagation.NEVER)\n+\tpublic void deleteCodeSystemVersion(TermCodeSystemVersion theCodeSystemVersion) {\n+\t\t// Delete TermCodeSystemVersion\n+\t\tourLog.info(\" * Deleting code system version {}\", theCodeSystemVersion.getCodeSystemVersionId());", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMDAxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497020012", "bodyText": "Good point. I was essentially adapting a message logged by a similar method, deleteCodeSystem which does the same thing for TermCodeSystem. I have updated the message to explicitly say Deleting TermCodeSystemVersion ....", "author": "IanMMarshall", "createdAt": "2020-09-29T20:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java\nindex b55e14cf0f..e8ba5fbb1b 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java\n\n@@ -235,7 +235,7 @@ public class TermCodeSystemStorageSvcImpl implements ITermCodeSystemStorageSvc {\n \t@Transactional(propagation = Propagation.NEVER)\n \tpublic void deleteCodeSystemVersion(TermCodeSystemVersion theCodeSystemVersion) {\n \t\t// Delete TermCodeSystemVersion\n-\t\tourLog.info(\" * Deleting code system version {}\", theCodeSystemVersion.getCodeSystemVersionId());\n+\t\tourLog.info(\" * Deleting TermCodeSystemVersion {}\", theCodeSystemVersion.getCodeSystemVersionId());\n \t\tdeleteCodeSystemVersion(theCodeSystemVersion.getPid());\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496233189", "bodyText": "Is it safe to set a specific version when one wasn't provided? This seems dangerous to me. Perhaps this should be a required property that triggers a failure when omitted?", "author": "dmuylwyk", "createdAt": "2020-09-28T21:07:43Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "diffHunk": "@@ -494,12 +499,20 @@ UploadStatistics processLoincFiles(LoadedFileDescriptors theDescriptors, Request\n \t\treturn new UploadStatistics(conceptCount, target);\n \t}\n \n-\tprivate ValueSet getValueSetLoincAll() {\n+\tprivate ValueSet getValueSetLoincAll(Properties theUploadProperties) {\n \t\tValueSet retVal = new ValueSet();\n \n-\t\tretVal.setId(\"loinc-all\");\n+\t\tString codeSystemVersionId = theUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = \"loinc-all\" + \"-\" + codeSystemVersionId;\n+\t\t} else {\n+\t\t\tvalueSetId = \"loinc-all\";\n+\t\t\tcodeSystemVersionId = \"1.0.0\";", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0MDk1NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497040955", "bodyText": "I actually did this for backwards compatibility (it was previously setting the version to 1.0.0 before these changes). If no version is specified, it should basically populate the version the same way as before.", "author": "IanMMarshall", "createdAt": "2020-09-29T20:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzIzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497053232", "bodyText": "Gotcha. I'm not sure I like it but I do understand it.", "author": "dmuylwyk", "createdAt": "2020-09-29T20:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235321", "bodyText": "Will appending the version to the resource ID break existing solutions that depend on or expect the versionless resource ID?", "author": "dmuylwyk", "createdAt": "2020-09-28T21:11:59Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1OTk0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497059944", "bodyText": "I am a bit unclear on whether a solution should ever be depending on specific IDs for accessing resources. That aside, the new functionality will only append version to the resource ID if one is provided in configuration. If there is a need to support implementations that depend on the old non-versioned resource IDs, it will still be possible to load LOINC terminology without specifying a version, which will result in a copy of the terminology being loaded with the non-versioned Resource IDs.", "author": "IanMMarshall", "createdAt": "2020-09-29T21:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MDgwNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497590805", "bodyText": "So a versioned implementation would have ValueSet/loinc-all-2.3.4 (for example), and the implementer would need to account for this change if they were previously expecting ValueSet/loinc-all. Conversely, a non-versioned implementation would happily continue using ValueSet/loinc-all. Do I have that right?", "author": "dmuylwyk", "createdAt": "2020-09-30T15:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTU1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498265551", "bodyText": "Yes, this is my understanding as well.", "author": "IanMMarshall", "createdAt": "2020-10-01T13:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NzM0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498277342", "bodyText": "Thanks!", "author": "dmuylwyk", "createdAt": "2020-10-01T14:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTczNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235735", "bodyText": "Same concern about appending version to the standard resource ID. I'm sure this happens repeatedly so I won't call it out again.", "author": "dmuylwyk", "createdAt": "2020-09-28T21:12:55Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincAnswerListHandler.java", "diffHunk": "@@ -74,7 +74,14 @@ public void accept(CSVRecord theRecord) {\n \t\t}\n \n \t\t// Answer list ValueSet\n-\t\tValueSet vs = getValueSet(answerListId, \"http://loinc.org/vs/\" + answerListId, answerListName, LOINC_ANSWERLIST_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tString codeSystemVersionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = answerListId + \"-\" + codeSystemVersionId;", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MDA1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497060051", "bodyText": "See my comment above.", "author": "IanMMarshall", "createdAt": "2020-09-29T21:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTczNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496236558", "bodyText": "This probably shouldn't be optional.", "author": "dmuylwyk", "createdAt": "2020-09-28T21:14:41Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "diffHunk": "@@ -96,6 +96,9 @@\n \t/*\n \t * OPTIONAL\n \t */\n+\t// This is the version identifier for the LOINC code system\n+\tLOINC_CODESYSTEM_VERSION(\"loinc.codesystem.version\"),", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MTA5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497061090", "bodyText": "As mentioned in previous comments, my intention here was to preserve the previous functionality where possible and as such I made the version optional. If no version is specified, then a non-versioned instance of LOINC will be loaded and will be accessible via non-versioned operations.", "author": "IanMMarshall", "createdAt": "2020-09-29T21:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MTc0OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497591748", "bodyText": "Gotcha. At some point I think we may want to make this mandatory but I accept your reasoning here.", "author": "dmuylwyk", "createdAt": "2020-09-30T15:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTAxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239010", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "author": "dmuylwyk", "createdAt": "2020-09-28T21:19:48Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\nindex f7aa915920..23b98065cb 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\n@@ -108,7 +108,7 @@ public class FhirResourceDaoDstu3ConceptMapTest extends BaseJpaDstu3Test {\n \t}\n \n \t@Test\n-\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\tpublic void testConceptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n \t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTEwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239102", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "author": "dmuylwyk", "createdAt": "2020-09-28T21:19:59Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\nindex f7aa915920..23b98065cb 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\n@@ -108,7 +108,7 @@ public class FhirResourceDaoDstu3ConceptMapTest extends BaseJpaDstu3Test {\n \t}\n \n \t@Test\n-\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\tpublic void testConceptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n \t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjI5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702290", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:09:10Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3940e7526fb6fc2e2087ae91a334fb9c6430e029", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\nindex 997e5a35b4..464ded634e 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\n@@ -1155,7 +1155,7 @@ public class FhirResourceDaoR4ConceptMapTest extends BaseJpaR4Test {\n \t}\n \n \t@Test\n-\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\tpublic void testConceptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n \t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjQ1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702450", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:09:24Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3940e7526fb6fc2e2087ae91a334fb9c6430e029", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\nindex 997e5a35b4..464ded634e 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\n@@ -1155,7 +1155,7 @@ public class FhirResourceDaoR4ConceptMapTest extends BaseJpaR4Test {\n \t}\n \n \t@Test\n-\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\tpublic void testConceptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n \t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjgxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:09:58Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n+\t\t\t\t\n+\t\tString theUrl = \"http://loinc.org/property/analyte-suffix\";\n+\t\tConceptMap theConceptMap1 = new ConceptMap();\n+\t\tConceptMap theConceptMap2 = new ConceptMap();\n+\t\t\n+\t\ttheConceptMap1.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name1\").setVersion(\"v1\");\n+\t\ttheConceptMap2.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name2\").setVersion(\"v2\");\n+\t\t\n+\t\tmyConceptMapDao.create(theConceptMap1);\n+\t\tmyConceptMapDao.create(theConceptMap2);\n+\t\t\n+\t\tOptional<TermConceptMap> theExpConceptMapV1 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v1\");\n+\t\tOptional<TermConceptMap> theExpConceptMapV2 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v2\");\n+\t\t\n+\t\tassertTrue(theExpConceptMapV1.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV1.get().getUrl());\n+\t\tassertEquals(\"v1\", theExpConceptMapV1.get().getVersion());\n+\t\t\n+\t\tassertTrue(theExpConceptMapV2.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV2.get().getUrl());\n+\t\tassertEquals(\"v2\", theExpConceptMapV2.get().getVersion());\n+\n+\t\t// should return the latest one which is v2\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpSecondOne = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, theUrl);\n+\t\t\n+\t\tassertEquals(1, theExpSecondOne.size());\n+\t\tassertEquals(theUrl, theExpSecondOne.get(0).getUrl());\n+\t\tassertEquals(\"v2\", theExpSecondOne.get(0).getVersion());\n+\t}\n \n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3940e7526fb6fc2e2087ae91a334fb9c6430e029", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\nindex 997e5a35b4..464ded634e 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\n@@ -1155,7 +1155,7 @@ public class FhirResourceDaoR4ConceptMapTest extends BaseJpaR4Test {\n \t}\n \n \t@Test\n-\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\tpublic void testConceptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n \t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjIxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706219", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v2() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:14:56Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 835e806e93..33e7d2fc2f 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -175,7 +175,7 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\tpublic void testTranslateWithVersionedConceptMapUrl_v2() {\n \n \t\tString url = \"http://url\";\n \t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjU2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706565", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v1() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:15:21Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 835e806e93..33e7d2fc2f 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -175,7 +175,7 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\tpublic void testTranslateWithVersionedConceptMapUrl_v2() {\n \n \t\tString url = \"http://url\";\n \t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjgwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:15:39Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 835e806e93..33e7d2fc2f 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -175,7 +175,7 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\tpublic void testTranslateWithVersionedConceptMapUrl_v2() {\n \n \t\tString url = \"http://url\";\n \t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjk3NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v1() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:15:54Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 835e806e93..33e7d2fc2f 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -175,7 +175,7 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\tpublic void testTranslateWithVersionedConceptMapUrl_v2() {\n \n \t\tString url = \"http://url\";\n \t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzIyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496707229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v2() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:16:17Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, null, \"12222\", \"Target Code 12222\"); // first version is null\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\t\t \t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 835e806e93..33e7d2fc2f 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -175,7 +175,7 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\tpublic void testTranslateWithVersionedConceptMapUrl_v2() {\n \n \t\tString url = \"http://url\";\n \t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718258", "bodyText": "Is it actually a requirement to modify CodeSystem.name? It strikes me as unusual that we would be modifying the content of the resource beyond its version and timestamp.", "author": "dmuylwyk", "createdAt": "2020-09-29T13:31:08Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "diffHunk": "@@ -416,5 +426,25 @@ public void testSubsumesOnCodings_Disjoint() {\n \t\tassertEquals(ConceptSubsumptionOutcome.NOTSUBSUMED.toCode(), ((CodeType) respParam.getParameter().get(0).getValue()).getValue());\n \t}\n \n+\t@Test\n+\tpublic void testUpdateCodeSystemName() throws IOException {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MDMzMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497080330", "bodyText": "You are correct, I do not believe that there is a requirement to modify CodeSystem.name. I cannot recall the details, but I believe the intent here was to provide basic test coverage for another case being flagged by the Code Cov check e.g. where an existing CodeSystem was being updated (i.e. but no change to URL or version).\nHave updated the method name to reflect what I think was the true intention of this test.", "author": "IanMMarshall", "createdAt": "2020-09-29T21:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MzkyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497593924", "bodyText": "Gotcha. Thanks!", "author": "dmuylwyk", "createdAt": "2020-09-30T15:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java\nindex 6b2fed44ea..c8dfce5efd 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java\n\n@@ -427,7 +431,7 @@ public class ResourceProviderR4CodeSystemTest extends BaseResourceProviderR4Test\n \t}\n \n \t@Test\n-\tpublic void testUpdateCodeSystemName() throws IOException {\n+\tpublic void testUpdateCodeSystemById() throws IOException {\n \n \t\tCodeSystem initialCodeSystem = myClient.read().resource(CodeSystem.class).withId(parentChildCsId).execute();\n \t\tassertEquals(\"Parent Child CodeSystem\", initialCodeSystem.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODg2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718867", "bodyText": "Nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n          \n          \n            \n            \tprivate static final String CS_ACME_URL = \"http://acme.org\";", "author": "dmuylwyk", "createdAt": "2020-09-29T13:32:01Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c593958d2c45b16ed7328eed815ab71c99f6269b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\nindex c4d705303f..0b55d5f445 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n\n@@ -31,7 +31,7 @@ public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProv\n \tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n \n \tprivate IIdType myCsId;\n-\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\tprivate static final String CS_ACME_URL = \"http://acme.org\";\n \n \t@BeforeEach\n \t@Transactional\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496722216", "bodyText": "It looks like all of the tests in this class are related to the CodeSystem$validate-code operation, and not the validation of a CodeSystem itself. Consider renaming.", "author": "dmuylwyk", "createdAt": "2020-09-29T13:36:22Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MjMyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497082321", "bodyText": "Renamed class to ResourceProviderR4CodeSystemValidateCodeTest.", "author": "IanMMarshall", "createdAt": "2020-09-29T21:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "c593958d2c45b16ed7328eed815ab71c99f6269b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\nindex c4d705303f..0b55d5f445 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n\n@@ -31,7 +31,7 @@ public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProv\n \tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n \n \tprivate IIdType myCsId;\n-\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\tprivate static final String CS_ACME_URL = \"http://acme.org\";\n \n \t@BeforeEach\n \t@Transactional\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496726360", "bodyText": "I'm curious: why did you chose to create ResourceProviderR4CodeSystemValidationTest and ResourceProviderR4CodeSystemVersionedTest instead of simply adding your tests to ResourceProviderR4CodeSystemTest?\nWith CodeSystem tests spread across multiple classes, discoverability is reduced. It also increases the likelihood that some tests might not be updated in light of future modifications. This goes for the multiple ValueSet and ConceptMap test classes as well; however, I won't call it out again. : )", "author": "dmuylwyk", "createdAt": "2020-09-29T13:41:38Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExMDM0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497110349", "bodyText": "I cannot speak to ResourceProviderR4CodeSystemVersionedTest as this was created by Frank. I opted to duplicate and rename the classes for a couple of reasons:\n\n\nIn many cases, I found I was simply duplicating most of the methods in the classes, but with a different Before setup. As such, it was much more efficient to simply duplicate the class.\n\n\nI wanted to ensure that the original, non-versioned functionality was not affected by the changes. The easiest way to do this was to keep the original tests intact as much as possible.\n\n\nPersonally, I am not sure how important it is for tests to be discoverable. In the case of future modifications, it should only be necessary to modify tests if those modifications break tests, in which case they will become discoverable.\nFor the ResourceProviderR4CodeSystemVersionedTest class, I have merged this into ResourceProviderR4CodeSystemTest.", "author": "IanMMarshall", "createdAt": "2020-09-29T22:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NDg3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497594875", "bodyText": "Understood. Thanks for the explanation!", "author": "dmuylwyk", "createdAt": "2020-09-30T15:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c593958d2c45b16ed7328eed815ab71c99f6269b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\nindex c4d705303f..0b55d5f445 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java\n\n@@ -31,7 +31,7 @@ public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProv\n \tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n \n \tprivate IIdType myCsId;\n-\tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n+\tprivate static final String CS_ACME_URL = \"http://acme.org\";\n \n \t@BeforeEach\n \t@Transactional\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyODg2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496728861", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithConcaptMapUrlAndVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithConceptMapUrlAndVersion() {", "author": "dmuylwyk", "createdAt": "2020-09-29T13:44:41Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -870,6 +885,90 @@ public void testTranslateUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithConcaptMapUrlAndVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c593958d2c45b16ed7328eed815ab71c99f6269b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\nindex 2888f57b25..35e1def3af 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\n\n@@ -886,7 +886,7 @@ public class ResourceProviderR4ConceptMapTest extends BaseResourceProviderR4Test\n \t}\n \n \t@Test\n-\tpublic void testTranslateWithConcaptMapUrlAndVersion() {\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n \t\t\n \t\t//- conceptMap1 v1\n \t\tConceptMap conceptMap1 = new ConceptMap();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDE0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496730144", "bodyText": "Please do a search and replace for all instances of \"concapt\". Should be \"concept\". : )", "author": "dmuylwyk", "createdAt": "2020-09-29T13:46:16Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -1621,6 +1720,89 @@ public void testTranslateWithReverseUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithReverseConcaptMapUrlAndVersion() {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExMjA0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497112044", "bodyText": "Done.", "author": "IanMMarshall", "createdAt": "2020-09-29T22:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\nindex 2888f57b25..9236a04309 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java\n\n@@ -1721,7 +1721,7 @@ public class ResourceProviderR4ConceptMapTest extends BaseResourceProviderR4Test\n \t}\n \n \t@Test\n-\tpublic void testTranslateWithReverseConcaptMapUrlAndVersion() {\n+\tpublic void testTranslateWithReverseConceptMapUrlAndVersion() {\n \t\t\n \t\t//- conceptMap1 v1\n \t\tConceptMap conceptMap1 = new ConceptMap();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496748087", "bodyText": "What is the difference between this class and TerminologyLoaderSvcLoincTest? Are these integration tests?", "author": "dmuylwyk", "createdAt": "2020-09-29T14:08:37Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MDEyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496750126", "bodyText": "These are not integration tests. I'm not sure why they're in their own class.", "author": "dmuylwyk", "createdAt": "2020-09-29T14:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MDg4MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497150881", "bodyText": "The difference between the two is that the TerminologyLoaderSvcLoincTest class uses mock implementations of the TermCodeStorageSvc and TermDeferredStorageSvc whereas the TerminologyLoaderSvcLoincIntegratedTest uses real implementations created by Spring. I admit the name could be confusing. I have renamed it to TerminologyLoaderSvcLoincJpaTest to indicate that it is tied into other JPA services.", "author": "IanMMarshall", "createdAt": "2020-09-29T23:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NTI3NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497595274", "bodyText": "Gotcha. Thanks!", "author": "dmuylwyk", "createdAt": "2020-09-30T15:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincJpaTest.java\nsimilarity index 97%\nrename from hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java\nrename to hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincJpaTest.java\nindex b6703763db..5b44a99f9e 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincJpaTest.java\n\n@@ -11,7 +11,7 @@ import org.junit.jupiter.api.Test;\n import java.io.IOException;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {\n+public class TerminologyLoaderSvcLoincJpaTest extends BaseJpaR4Test {\n \tprivate TermLoaderSvcImpl mySvc;\n \n \tprivate ZipCollectionBuilder myFiles;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496751468", "bodyText": "FWIW, we usually add tests for new functionality to the tests for the latest version of FHIR, and only update older versions as necessary. It's nice to have all of the additional tests though. :D", "author": "dmuylwyk", "createdAt": "2020-09-29T14:13:00Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package ca.uhn.fhir.jpa.provider.r5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n+import org.hl7.fhir.r5.model.Enumerations;\n+import org.hl7.fhir.r5.model.Coding;\n+import org.hl7.fhir.r5.model.BooleanType;\n+import org.hl7.fhir.r5.model.CodeSystem;\n+import org.hl7.fhir.r5.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r5.model.CodeType;\n+import org.hl7.fhir.r5.model.Parameters;\n+import org.hl7.fhir.r5.model.StringType;\n+import org.hl7.fhir.r5.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+\n+public class ResourceProviderR5CodeSystemTest extends BaseResourceProviderR5Test {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NDI1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496954259", "bodyText": "I added these tests because the Code Cov checker was flagging a bunch of changes that were not covered by tests, so I figured better safe than sorry.", "author": "IanMMarshall", "createdAt": "2020-09-29T18:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NTU1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497595556", "bodyText": "Ah, of course. Thank you!", "author": "dmuylwyk", "createdAt": "2020-09-30T15:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java\nindex f584c47a50..9d3d8914a5 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java\n\n@@ -1,10 +1,12 @@\n package ca.uhn.fhir.jpa.provider.r5;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.instance.model.api.IIdType;\n import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n import org.hl7.fhir.r5.model.Enumerations;\n import org.hl7.fhir.r5.model.Coding;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759131", "bodyText": "Is there a potential issue with migration when reusing an index name?", "author": "dmuylwyk", "createdAt": "2020-09-29T14:22:13Z", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1ODg0MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497158841", "bodyText": "I do not believe so given that the old index is being dropped before the new index is being added. I tested the migration myself and again when I deployed on the LOINC dev box and did not detect any issues.", "author": "IanMMarshall", "createdAt": "2020-09-29T23:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5Nzk5Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497597993", "bodyText": "Cool. I'm always a little wary of such changes with migration tasks. Thanks for validating it.", "author": "dmuylwyk", "createdAt": "2020-09-30T15:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTM1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759359", "bodyText": "Same. Duplicate index name?", "author": "dmuylwyk", "createdAt": "2020-09-29T14:22:30Z", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");\n+\n+\t\t//Term CodeSystem Version and Term ValueSet Version\n+\t\tBuilder.BuilderWithTableName trmCodeSystemVer = version.onTable(\"TRM_CODESYSTEM_VER\");\n+\t\ttrmCodeSystemVer.addIndex(\"20200923.1\", \"IDX_CODESYSTEM_AND_VER\").unique(true).withColumns(\"CODESYSTEM_PID\", \"CS_VERSION_ID\");\n+\t\tBuilder.BuilderWithTableName trmValueSet = version.onTable(\"TRM_VALUESET\");\n+\t\ttrmValueSet.addColumn(\"20200923.2\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermValueSet.MAX_VER_LENGTH);\n+\t\ttrmValueSet.dropIndex(\"20200923.3\", \"IDX_VALUESET_URL\");\n+\t\ttrmValueSet.addIndex(\"20200923.4\", \"IDX_VALUESET_URL\").unique(true).withColumns(\"URL\", \"VER\");", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTc3OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497159778", "bodyText": "Same answer as before. I do not believe this is an issue as the old index is being dropped. As per my previous comment, I have tested this (with PostgreSQL) and there were no issues.", "author": "IanMMarshall", "createdAt": "2020-09-29T23:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTM1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTUyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496761526", "bodyText": "Neat. Codecov includes a warning right in the diff! I guess you need to add some tests.\nCheck warning on line 338 in hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java\nCodecov\n/ codecov/patch\nhapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java#L337-L338\nAdded lines #L337 - L338 were not covered by tests", "author": "dmuylwyk", "createdAt": "2020-09-29T14:25:10Z", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -326,6 +326,48 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjMwNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497172306", "bodyText": "OK, I overlooked this when merging Frank's changes. I have added a test to exercise this in the R5 CodeSystem resource provider test.", "author": "IanMMarshall", "createdAt": "2020-09-30T00:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTUyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzE5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763199", "bodyText": "theWantSystemIdentifier is the system and version? Not an actual identifier in the context of a resource. Consider a more appropriate name.", "author": "dmuylwyk", "createdAt": "2020-09-29T14:27:10Z", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -91,23 +91,23 @@ public ValueSetExpansionOutcome expandValueSet(ValidationSupportContext theValid\n \t\treturn new ValueSetExpansionOutcome(expansion, null);\n \t}\n \n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MzUwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497173501", "bodyText": "Renamed it to theWantSystemUrlAndVersion.", "author": "IanMMarshall", "createdAt": "2020-09-30T00:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\nindex 4704912f7f..d6bad82267 100644\n--- a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n+++ b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n\n@@ -91,23 +91,23 @@ public class InMemoryTerminologyServerValidationSupport implements IValidationSu\n \t\treturn new ValueSetExpansionOutcome(expansion, null);\n \t}\n \n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemUrlAndVersion, @Nullable String theWantCode) {\n \t\torg.hl7.fhir.r5.model.ValueSet expansionR5;\n \t\tswitch (theValueSetToExpand.getStructureFhirVersionEnum()) {\n \t\t\tcase DSTU2: {\n-\t\t\t\texpansionR5 = expandValueSetDstu2(theValidationSupportContext, (ca.uhn.fhir.model.dstu2.resource.ValueSet) theValueSetToExpand, theWantSystemIdentifier, theWantCode);\n+\t\t\t\texpansionR5 = expandValueSetDstu2(theValidationSupportContext, (ca.uhn.fhir.model.dstu2.resource.ValueSet) theValueSetToExpand, theWantSystemUrlAndVersion, theWantCode);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tcase DSTU2_HL7ORG: {\n-\t\t\t\texpansionR5 = expandValueSetDstu2Hl7Org(theValidationSupportContext, (ValueSet) theValueSetToExpand, theWantSystemIdentifier, theWantCode);\n+\t\t\t\texpansionR5 = expandValueSetDstu2Hl7Org(theValidationSupportContext, (ValueSet) theValueSetToExpand, theWantSystemUrlAndVersion, theWantCode);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tcase DSTU3: {\n-\t\t\t\texpansionR5 = expandValueSetDstu3(theValidationSupportContext, (org.hl7.fhir.dstu3.model.ValueSet) theValueSetToExpand, theWantSystemIdentifier, theWantCode);\n+\t\t\t\texpansionR5 = expandValueSetDstu3(theValidationSupportContext, (org.hl7.fhir.dstu3.model.ValueSet) theValueSetToExpand, theWantSystemUrlAndVersion, theWantCode);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tcase R4: {\n-\t\t\t\texpansionR5 = expandValueSetR4(theValidationSupportContext, (org.hl7.fhir.r4.model.ValueSet) theValueSetToExpand, theWantSystemIdentifier, theWantCode);\n+\t\t\t\texpansionR5 = expandValueSetR4(theValidationSupportContext, (org.hl7.fhir.r4.model.ValueSet) theValueSetToExpand, theWantSystemUrlAndVersion, theWantCode);\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tcase R5: {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzU3OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763578", "bodyText": "There are more Codecov warnings in this class.", "author": "dmuylwyk", "createdAt": "2020-09-29T14:27:37Z", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -145,26 +142,59 @@ public CodeValidationResult validateCode(ValidationSupportContext theValidationS\n \t\t\t\treturn null;\n \t\t\t}\n \t\t} else {\n+\t\t\tString codeSystemUrl;\n+\t\t\tString codeSystemVersion = null;\n+\t\t\tint codeSystemVersionIndex = theCodeSystem.indexOf(\"|\");\n+\t\t\tif (codeSystemVersionIndex > -1) {\n+\t\t\t\tcodeSystemUrl = theCodeSystem.substring(0, codeSystemVersionIndex);\n+\t\t\t\tcodeSystemVersion = theCodeSystem.substring(codeSystemVersionIndex + 1);\n+\t\t\t} else {\n+\t\t\t\tcodeSystemUrl = theCodeSystem;\n+\t\t\t}\n \t\t\tswitch (myCtx.getVersion().getVersion()) {\n \t\t\t\tcase DSTU2_HL7ORG:\n-\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n+\t\t\t\t\tif (codeSystemVersion != null) {\n+\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n+\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n+\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(codeSystemUrl).setVersion(codeSystemVersion)));", "originalCommit": "42b4e9ae02f33baa02a49b523a10935275155b7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NjQyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497176421", "bodyText": "I have backed out the changes for DSTU2. I think this was a copy and paste error seeing there was never any intention to support code system versioning for DSTU2.\nAdded test coverage for DSTU3 and R5 changes.", "author": "IanMMarshall", "createdAt": "2020-09-30T00:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "chunk": "diff --git a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\nindex 4704912f7f..d6bad82267 100644\n--- a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n+++ b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n\n@@ -153,15 +153,9 @@ public class InMemoryTerminologyServerValidationSupport implements IValidationSu\n \t\t\t}\n \t\t\tswitch (myCtx.getVersion().getVersion()) {\n \t\t\t\tcase DSTU2_HL7ORG:\n-\t\t\t\t\tif (codeSystemVersion != null) {\n-\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(codeSystemUrl).setVersion(codeSystemVersion)));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n-\t\t\t\t\t}\n+\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n+\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n+\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n \t\t\t\t\tbreak;\n \t\t\t\tcase DSTU3:\n \t\t\t\t\tif (codeSystemVersion != null) {\n"}}, {"oid": "26688aac65204fcdbe41b3ebfa1f3c771cf20e6c", "url": "https://github.com/hapifhir/hapi-fhir/commit/26688aac65204fcdbe41b3ebfa1f3c771cf20e6c", "message": "Update hapi-fhir-base/src/main/resources/ca/uhn/fhir/i18n/hapi-messages.properties\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T16:11:56Z", "type": "commit"}, {"oid": "10620a8bb46ffc081aea3214772bc51faa17defd", "url": "https://github.com/hapifhir/hapi-fhir/commit/10620a8bb46ffc081aea3214772bc51faa17defd", "message": "Update hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:16:13Z", "type": "commit"}, {"oid": "ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "url": "https://github.com/hapifhir/hapi-fhir/commit/ebb3fa0ca1e0be3d9d7555b88c0c1bfa5c0bce3b", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:16:56Z", "type": "commit"}, {"oid": "6aa1a5ec3fcbcc9851b27c66a70868b13015440c", "url": "https://github.com/hapifhir/hapi-fhir/commit/6aa1a5ec3fcbcc9851b27c66a70868b13015440c", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:17:19Z", "type": "commit"}, {"oid": "3940e7526fb6fc2e2087ae91a334fb9c6430e029", "url": "https://github.com/hapifhir/hapi-fhir/commit/3940e7526fb6fc2e2087ae91a334fb9c6430e029", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:17:36Z", "type": "commit"}, {"oid": "b8531e599f99f48f6a400029cb92f7808e8dcc82", "url": "https://github.com/hapifhir/hapi-fhir/commit/b8531e599f99f48f6a400029cb92f7808e8dcc82", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:18:00Z", "type": "commit"}, {"oid": "2be47b5567b373061a601942b516de5220a2aedf", "url": "https://github.com/hapifhir/hapi-fhir/commit/2be47b5567b373061a601942b516de5220a2aedf", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:18:21Z", "type": "commit"}, {"oid": "43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "url": "https://github.com/hapifhir/hapi-fhir/commit/43b6bd38ff456fe0119cb4346d5f19426ca5f0cb", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:26:30Z", "type": "commit"}, {"oid": "43c16e17372e9abd34238cb59313c6a9a97aa56a", "url": "https://github.com/hapifhir/hapi-fhir/commit/43c16e17372e9abd34238cb59313c6a9a97aa56a", "message": "Update hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:27:03Z", "type": "commit"}, {"oid": "d63c15ef096b7401ae9422f278f33ca5d0a2c438", "url": "https://github.com/hapifhir/hapi-fhir/commit/d63c15ef096b7401ae9422f278f33ca5d0a2c438", "message": "Apply suggestions from code review\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T18:27:57Z", "type": "commit"}, {"oid": "c593958d2c45b16ed7328eed815ab71c99f6269b", "url": "https://github.com/hapifhir/hapi-fhir/commit/c593958d2c45b16ed7328eed815ab71c99f6269b", "message": "Apply suggestions from code review\n\nCo-authored-by: Diederik Muylwyk <diederik.muylwyk@gmail.com>", "committedDate": "2020-09-29T19:16:46Z", "type": "commit"}, {"oid": "8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "url": "https://github.com/hapifhir/hapi-fhir/commit/8e7b4e8437bb7f09b3cd14f57f3d9cb5231e61b8", "message": "Changes per code review.", "committedDate": "2020-09-30T01:05:28Z", "type": "commit"}, {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "url": "https://github.com/hapifhir/hapi-fhir/commit/dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "message": "Changes per code review.", "committedDate": "2020-09-30T01:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxNTkxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497615914", "bodyText": "You changed some but not all of theWantSystemIdentifier to theWantSystemUrlAndVersion. Quick search across the project found 19 instances of theWantSystemIdentifier remaining.", "author": "dmuylwyk", "createdAt": "2020-09-30T15:47:08Z", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -314,7 +349,7 @@ public LookupCodeResult lookupCode(ValidationSupportContext theValidationSupport\n \t}\n \n \t@Nullable\n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "originalCommit": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzODcyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497938728", "bodyText": "Changed all of the remaining theWantSystemIdentifier references to theWantSystemUrlAndVersion", "author": "IanMMarshall", "createdAt": "2020-10-01T02:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxNTkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "7899837fe0313a8601d1ee387a2025d52a859a6c", "chunk": "diff --git a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\nindex 037e88ffa4..f9d134ffe3 100644\n--- a/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n+++ b/hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java\n\n@@ -349,7 +349,7 @@ public class InMemoryTerminologyServerValidationSupport implements IValidationSu\n \t}\n \n \t@Nullable\n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemUrlAndVersion, @Nullable String theWantCode) {\n \t\tFunction<String, CodeSystem> codeSystemLoader = t -> {\n \t\t\torg.hl7.fhir.dstu2.model.ValueSet codeSystem = (org.hl7.fhir.dstu2.model.ValueSet) theValidationSupportContext.getRootValidationSupport().fetchCodeSystem(t);\n \t\t\tCodeSystem retVal = new CodeSystem();\n"}}, {"oid": "90f198181744253e1231e27c0c54f1a17132c882", "url": "https://github.com/hapifhir/hapi-fhir/commit/90f198181744253e1231e27c0c54f1a17132c882", "message": "Updated tests for missed dstu2 code coverage.", "committedDate": "2020-09-30T22:10:57Z", "type": "commit"}, {"oid": "7899837fe0313a8601d1ee387a2025d52a859a6c", "url": "https://github.com/hapifhir/hapi-fhir/commit/7899837fe0313a8601d1ee387a2025d52a859a6c", "message": "Replaced references to SystemIdentifier with SystemUrlAndVersion.", "committedDate": "2020-10-01T02:04:08Z", "type": "commit"}]}