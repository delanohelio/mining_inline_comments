{"pr_number": 1899, "pr_title": "Transaction create performance improvement", "pr_createdAt": "2020-06-04T20:52:24Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1899", "timeline": [{"oid": "8d49367449ab3175287d07ac70bff47ce61be192", "url": "https://github.com/hapifhir/hapi-fhir/commit/8d49367449ab3175287d07ac70bff47ce61be192", "message": "Work on perf issue", "committedDate": "2020-06-04T19:22:03Z", "type": "commit"}, {"oid": "c023ebcc10a8d13752ab5df997a95d53372467f7", "url": "https://github.com/hapifhir/hapi-fhir/commit/c023ebcc10a8d13752ab5df997a95d53372467f7", "message": "Improve write performance for large bundles with tags", "committedDate": "2020-06-04T20:43:24Z", "type": "commit"}, {"oid": "5f7e9e1147c50446ff5ca1bb5f7110d1818e5d1f", "url": "https://github.com/hapifhir/hapi-fhir/commit/5f7e9e1147c50446ff5ca1bb5f7110d1818e5d1f", "message": "Add changelog", "committedDate": "2020-06-04T20:55:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjQ2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1899#discussion_r435546466", "bodyText": "Good idea. I was just thinking today that I needed to add something like this.", "author": "IanMMarshall", "createdAt": "2020-06-04T21:01:13Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/config/DaoConfig.java", "diffHunk": "@@ -193,6 +193,34 @@\n \t */\n \tprivate boolean myDeleteEnabled = true;\n \n+\t/**\n+\t * If set to <code>true</code> (default is <code>false</code>) the <code>$lastn</code> operation will be enabled for\n+\t * indexing Observation resources. This operation involves creating a special set of tables in ElasticSearch for\n+\t * discovering Observation resources. Enabling this setting increases the amount of storage space required, and can\n+\t * slow write operations, but can be very useful for searching for collections of Observations for some applications.\n+\t *\n+\t * @since 5.1.0\n+\t */\n+\tpublic boolean isLastNEnabled() {\n+\t\treturn myLastNEnabled;\n+\t}\n+", "originalCommit": "5f7e9e1147c50446ff5ca1bb5f7110d1818e5d1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MjgyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1899#discussion_r435562820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitelY add nuance to this,\n          \n          \n            \n             * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitely add nuance to this,", "author": "IanMMarshall", "createdAt": "2020-06-04T21:27:18Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/**\n+ * This class acts as a central spot for all of the many Caffeine caches we use in HAPI FHIR.\n+ * <p>\n+ * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitelY add nuance to this,", "originalCommit": "5f7e9e1147c50446ff5ca1bb5f7110d1818e5d1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c7a4c47a921777ca618edc4e24fcc0498c22a6c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\nindex 05e2285857..005e4c19fe 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n\n@@ -14,7 +14,7 @@ import java.util.function.Function;\n /**\n  * This class acts as a central spot for all of the many Caffeine caches we use in HAPI FHIR.\n  * <p>\n- * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitelY add nuance to this,\n+ * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitely add nuance to this,\n  * which will be much easier now that this is being centralized.. Some logging/monitoring would be good too.\n  */\n public class MemoryCacheService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Mjk3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1899#discussion_r435562971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * which will be much easier now that this is being centralized.. Some logging/monitoring would be good too.\n          \n          \n            \n             * which will be much easier now that this is being centralized. Some logging/monitoring would be good too.", "author": "IanMMarshall", "createdAt": "2020-06-04T21:27:39Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/**\n+ * This class acts as a central spot for all of the many Caffeine caches we use in HAPI FHIR.\n+ * <p>\n+ * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitelY add nuance to this,\n+ * which will be much easier now that this is being centralized.. Some logging/monitoring would be good too.", "originalCommit": "5f7e9e1147c50446ff5ca1bb5f7110d1818e5d1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c7a4c47a921777ca618edc4e24fcc0498c22a6c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\nindex 05e2285857..005e4c19fe 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n\n@@ -14,7 +14,7 @@ import java.util.function.Function;\n /**\n  * This class acts as a central spot for all of the many Caffeine caches we use in HAPI FHIR.\n  * <p>\n- * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitelY add nuance to this,\n+ * The API is super simplistic, and caches are all 1-minute, max 10000 entries for starters. We could definitely add nuance to this,\n  * which will be much easier now that this is being centralized.. Some logging/monitoring would be good too.\n  */\n public class MemoryCacheService {\n"}}, {"oid": "3abc95440aae706cdcb51911155a69e54423e2e6", "url": "https://github.com/hapifhir/hapi-fhir/commit/3abc95440aae706cdcb51911155a69e54423e2e6", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_1_0/1899-improve-write-xact-perf-with-tags.yaml\n\nCo-authored-by: IanMMarshall <49525404+IanMMarshall@users.noreply.github.com>", "committedDate": "2020-06-04T22:23:17Z", "type": "commit"}, {"oid": "2c7a4c47a921777ca618edc4e24fcc0498c22a6c", "url": "https://github.com/hapifhir/hapi-fhir/commit/2c7a4c47a921777ca618edc4e24fcc0498c22a6c", "message": "Update hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n\nCo-authored-by: IanMMarshall <49525404+IanMMarshall@users.noreply.github.com>", "committedDate": "2020-06-04T22:23:23Z", "type": "commit"}, {"oid": "4e839a9f2760bd4e7ada1b404f67a2de8a1de6b0", "url": "https://github.com/hapifhir/hapi-fhir/commit/4e839a9f2760bd4e7ada1b404f67a2de8a1de6b0", "message": "Update hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/MemoryCacheService.java\n\nCo-authored-by: IanMMarshall <49525404+IanMMarshall@users.noreply.github.com>", "committedDate": "2020-06-04T22:23:31Z", "type": "commit"}, {"oid": "1bf6baea957a5c24d2b855579109595f2f0c5ae7", "url": "https://github.com/hapifhir/hapi-fhir/commit/1bf6baea957a5c24d2b855579109595f2f0c5ae7", "message": "Test fix", "committedDate": "2020-06-04T23:13:27Z", "type": "commit"}, {"oid": "cdf7b6b9da1bb61691b7e94deaeae81149b824d0", "url": "https://github.com/hapifhir/hapi-fhir/commit/cdf7b6b9da1bb61691b7e94deaeae81149b824d0", "message": "Merge branch 'master' into ja_20200604_large_bundle_performance", "committedDate": "2020-06-05T00:32:56Z", "type": "commit"}, {"oid": "167c3612b6b1aaa85cdd4214d4b713af0b40079c", "url": "https://github.com/hapifhir/hapi-fhir/commit/167c3612b6b1aaa85cdd4214d4b713af0b40079c", "message": "Test fixes", "committedDate": "2020-06-05T01:25:10Z", "type": "commit"}, {"oid": "9763bbf27077971928b11472d46fe03ea6bd21c0", "url": "https://github.com/hapifhir/hapi-fhir/commit/9763bbf27077971928b11472d46fe03ea6bd21c0", "message": "Test fixes", "committedDate": "2020-06-05T02:12:13Z", "type": "commit"}]}