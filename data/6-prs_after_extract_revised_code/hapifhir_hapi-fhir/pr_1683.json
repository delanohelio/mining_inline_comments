{"pr_number": 1683, "pr_title": "Ks 20200120 near search", "pr_createdAt": "2020-01-24T00:22:33Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1683", "timeline": [{"oid": "dd137a0a306b2971c13e3fe92b9bc54e1f89cc4e", "url": "https://github.com/hapifhir/hapi-fhir/commit/dd137a0a306b2971c13e3fe92b9bc54e1f89cc4e", "message": "Coord extraction implemented", "committedDate": "2020-01-21T15:17:49Z", "type": "commit"}, {"oid": "299e1e35e139f887cad2ed9a8e9666961e5886eb", "url": "https://github.com/hapifhir/hapi-fhir/commit/299e1e35e139f887cad2ed9a8e9666961e5886eb", "message": "removed coordextractor and moved to token (looks cleaner and more in line with how the other ones are parsed)", "committedDate": "2020-01-21T16:06:40Z", "type": "commit"}, {"oid": "eca21bec3ee248b7d40459f8389069030fe957dc", "url": "https://github.com/hapifhir/hapi-fhir/commit/eca21bec3ee248b7d40459f8389069030fe957dc", "message": "exact coord matching works now", "committedDate": "2020-01-21T19:30:51Z", "type": "commit"}, {"oid": "a961a7c022a1f262b5ab45aa1d28f529f64ab083", "url": "https://github.com/hapifhir/hapi-fhir/commit/a961a7c022a1f262b5ab45aa1d28f529f64ab083", "message": "begin with failing test", "committedDate": "2020-01-21T19:39:00Z", "type": "commit"}, {"oid": "b463929c28d7ec6a45670da24925aaf57e304dd7", "url": "https://github.com/hapifhir/hapi-fhir/commit/b463929c28d7ec6a45670da24925aaf57e304dd7", "message": "parse nearDistance into a special search parameter field so it's available when we're adding the near parameter", "committedDate": "2020-01-21T20:38:25Z", "type": "commit"}, {"oid": "3cb9a9f4a2e8a1e3dd4c3063c9e00de9a8790456", "url": "https://github.com/hapifhir/hapi-fhir/commit/3cb9a9f4a2e8a1e3dd4c3063c9e00de9a8790456", "message": "added asserts", "committedDate": "2020-01-21T20:45:41Z", "type": "commit"}, {"oid": "992b62151beb79d41f74786cd46bf459e22b6b00", "url": "https://github.com/hapifhir/hapi-fhir/commit/992b62151beb79d41f74786cd46bf459e22b6b00", "message": "yay box search works!", "committedDate": "2020-01-21T21:04:34Z", "type": "commit"}, {"oid": "04b60a4a16c7ccdac4ab29bf2888ecf902aceb5a", "url": "https://github.com/hapifhir/hapi-fhir/commit/04b60a4a16c7ccdac4ab29bf2888ecf902aceb5a", "message": "no distance and zero distance tested", "committedDate": "2020-01-21T21:18:42Z", "type": "commit"}, {"oid": "12dfac927e4eb3cb75a22f12db9470abef3904f6", "url": "https://github.com/hapifhir/hapi-fhir/commit/12dfac927e4eb3cb75a22f12db9470abef3904f6", "message": "moar tests", "committedDate": "2020-01-21T21:53:20Z", "type": "commit"}, {"oid": "6cebb56f13ccd53c0954982e155cdd263d5be152", "url": "https://github.com/hapifhir/hapi-fhir/commit/6cebb56f13ccd53c0954982e155cdd263d5be152", "message": "testing complete.  Now just need pre-review cleanup.", "committedDate": "2020-01-21T22:06:19Z", "type": "commit"}, {"oid": "02a95115a45029c39a0f8a5f630756ee3831941c", "url": "https://github.com/hapifhir/hapi-fhir/commit/02a95115a45029c39a0f8a5f630756ee3831941c", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200120-near-search", "committedDate": "2020-01-22T14:21:36Z", "type": "commit"}, {"oid": "5da282355330e3838adc33b4a7eec3096974c1a8", "url": "https://github.com/hapifhir/hapi-fhir/commit/5da282355330e3838adc33b4a7eec3096974c1a8", "message": "add negative test", "committedDate": "2020-01-22T14:25:43Z", "type": "commit"}, {"oid": "9413e8f1981c8ce73e191ca84276df540077f116", "url": "https://github.com/hapifhir/hapi-fhir/commit/9413e8f1981c8ce73e191ca84276df540077f116", "message": "r4 works.  But distance calculation still needs to be fixed.", "committedDate": "2020-01-22T16:59:03Z", "type": "commit"}, {"oid": "b07b87954dcb035233b7e08b5780f59923104711", "url": "https://github.com/hapifhir/hapi-fhir/commit/b07b87954dcb035233b7e08b5780f59923104711", "message": "r4 works.  But distance calculation still needs to be fixed.", "committedDate": "2020-01-22T17:00:09Z", "type": "commit"}, {"oid": "8b8088a3a2d9cfacf249e3865f92e94fd4c1ef96", "url": "https://github.com/hapifhir/hapi-fhir/commit/8b8088a3a2d9cfacf249e3865f92e94fd4c1ef96", "message": "begin with failing test", "committedDate": "2020-01-22T20:06:39Z", "type": "commit"}, {"oid": "f2e8037c902ebe0fe1cdf5c2dd942b6927e242f3", "url": "https://github.com/hapifhir/hapi-fhir/commit/f2e8037c902ebe0fe1cdf5c2dd942b6927e242f3", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200120-near-search", "committedDate": "2020-01-22T20:06:52Z", "type": "commit"}, {"oid": "e6f5af01ed2487b9d9d036698d3fb20968b1f2e3", "url": "https://github.com/hapifhir/hapi-fhir/commit/e6f5af01ed2487b9d9d036698d3fb20968b1f2e3", "message": "convert degrees to kilometers for near calculation", "committedDate": "2020-01-22T21:55:19Z", "type": "commit"}, {"oid": "4c53333539fcc2ea362ad9c6f18c7f580046daf7", "url": "https://github.com/hapifhir/hapi-fhir/commit/4c53333539fcc2ea362ad9c6f18c7f580046daf7", "message": "started to refactor predicates out of SearchBuilder", "committedDate": "2020-01-23T17:00:12Z", "type": "commit"}, {"oid": "e99402bd38da1c6f97427d431c773f7a0d7ea3ed", "url": "https://github.com/hapifhir/hapi-fhir/commit/e99402bd38da1c6f97427d431c773f7a0d7ea3ed", "message": "Almost done refactor.  Just need to separate state from service.", "committedDate": "2020-01-23T19:06:09Z", "type": "commit"}, {"oid": "c9fe68c5ab67a582b33d5835e7266e0363acb0ac", "url": "https://github.com/hapifhir/hapi-fhir/commit/c9fe68c5ab67a582b33d5835e7266e0363acb0ac", "message": "inlined single use methods", "committedDate": "2020-01-23T19:21:07Z", "type": "commit"}, {"oid": "49743352a6ccbf942da8bcbca2f14e6cf8c37d94", "url": "https://github.com/hapifhir/hapi-fhir/commit/49743352a6ccbf942da8bcbca2f14e6cf8c37d94", "message": "remove unused enum", "committedDate": "2020-01-23T19:28:10Z", "type": "commit"}, {"oid": "ab74e668705f7e5e78e87a756169ff6d143894b2", "url": "https://github.com/hapifhir/hapi-fhir/commit/ab74e668705f7e5e78e87a756169ff6d143894b2", "message": "compiles.  now to run the tests...", "committedDate": "2020-01-23T20:43:41Z", "type": "commit"}, {"oid": "d2ef5555fe5c0f8776dde0e7e305e415ad0ba82d", "url": "https://github.com/hapifhir/hapi-fhir/commit/d2ef5555fe5c0f8776dde0e7e305e415ad0ba82d", "message": "app context loads", "committedDate": "2020-01-23T20:48:25Z", "type": "commit"}, {"oid": "48a71d66492b49c0f856f2e3b1bd6038dc800624", "url": "https://github.com/hapifhir/hapi-fhir/commit/48a71d66492b49c0f856f2e3b1bd6038dc800624", "message": "fix npe", "committedDate": "2020-01-23T20:58:13Z", "type": "commit"}, {"oid": "8114419110c86981af2fc7933e3c3863681fc2eb", "url": "https://github.com/hapifhir/hapi-fhir/commit/8114419110c86981af2fc7933e3c3863681fc2eb", "message": "fix npe", "committedDate": "2020-01-23T21:06:15Z", "type": "commit"}, {"oid": "6ca97df1c950884169db547dc57de4d136ebbe04", "url": "https://github.com/hapifhir/hapi-fhir/commit/6ca97df1c950884169db547dc57de4d136ebbe04", "message": "fix npe", "committedDate": "2020-01-23T21:20:53Z", "type": "commit"}, {"oid": "a687d7c9c198da3b1515a8e0191cd130b5d8cf49", "url": "https://github.com/hapifhir/hapi-fhir/commit/a687d7c9c198da3b1515a8e0191cd130b5d8cf49", "message": "testSearchResourceLinkWithChain is failing", "committedDate": "2020-01-23T22:38:59Z", "type": "commit"}, {"oid": "3e28047f783d1bb4a05dcc99bd68e62dbe54de88", "url": "https://github.com/hapifhir/hapi-fhir/commit/3e28047f783d1bb4a05dcc99bd68e62dbe54de88", "message": "fix tests", "committedDate": "2020-01-23T23:27:35Z", "type": "commit"}, {"oid": "99949629a8b41ce5460e5f3ab2f3b3e2b186a42e", "url": "https://github.com/hapifhir/hapi-fhir/commit/99949629a8b41ce5460e5f3ab2f3b3e2b186a42e", "message": "FIXME", "committedDate": "2020-01-23T23:49:09Z", "type": "commit"}, {"oid": "e031ad203e139c104e5e72710c476b715960c25b", "url": "https://github.com/hapifhir/hapi-fhir/commit/e031ad203e139c104e5e72710c476b715960c25b", "message": "FIXME", "committedDate": "2020-01-24T00:12:05Z", "type": "commit"}, {"oid": "01bc941f5f2191edec11f526f50b54cc0935649a", "url": "https://github.com/hapifhir/hapi-fhir/commit/01bc941f5f2191edec11f526f50b54cc0935649a", "message": "Optimize imports", "committedDate": "2020-01-24T00:15:30Z", "type": "commit"}, {"oid": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "url": "https://github.com/hapifhir/hapi-fhir/commit/b465a7b7819ac1c3348ecd04d73dad996a34458d", "message": "final cleanup", "committedDate": "2020-01-24T00:20:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NjUwMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370566503", "bodyText": "Does this TODO still apply? Seems like it can be dropped now..", "author": "jamesagnew", "createdAt": "2020-01-24T10:30:26Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -456,8 +436,8 @@ public boolean isLogicalReference(IIdType theId) {\n \n \t// TODO KHS inject a searchBuilderFactory into callers of this method and delete this method", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODk1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370758954", "bodyText": "It does.  I resolved it.  But it took WAAAY more effort to resolve than I anticipated.", "author": "fil512", "createdAt": "2020-01-24T17:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NjUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "9b0f850cf4fde9c8ca939664f37abf1793566b8a", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\nindex a4753e4e69..cbfbc513b6 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\n\n@@ -434,12 +435,6 @@ public abstract class BaseHapiFhirDao<T extends IBaseResource> extends BaseStora\n \t\treturn LogicalReferenceHelper.isLogicalReference(myConfig.getModelConfig(), theId);\n \t}\n \n-\t// TODO KHS inject a searchBuilderFactory into callers of this method and delete this method\n-\t@Override\n-\tpublic SearchBuilder newSearchBuilder(String theResourceName, Class<? extends IBaseResource> theResourceType) {\n-\t\treturn mySearchBuilderFactory.newSearchBuilder(this, theResourceName, theResourceType);\n-\t}\n-\n \tpublic void notifyInterceptors(RestOperationTypeEnum theOperationType, ActionRequestDetails theRequestDetails) {\n \t\tif (theRequestDetails.getId() != null && theRequestDetails.getId().hasResourceType() && isNotBlank(theRequestDetails.getResourceType())) {\n \t\t\tif (theRequestDetails.getId().getResourceType().equals(theRequestDetails.getResourceType()) == false) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NjUzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370576533", "bodyText": "Nitpick: Are these fields all package protected deliberately? I'm not seeing any reason for them to need to be", "author": "jamesagnew", "createdAt": "2020-01-24T10:54:00Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzcyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370767729", "bodyText": "They need to be at least protected.  package-protected is stricter than protected and has two advantages: encourages people to put subclasses in the right package, and also it looks nicer.  If someone needs to relax to protected later on I assume they'll just do that.", "author": "fil512", "createdAt": "2020-01-24T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NjUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "16cb9a74e40bc13f8d827e03899a016798890809", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\nindex fea2bdd131..80c8eb6a70 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n\n@@ -3,6 +3,7 @@ package ca.uhn.fhir.jpa.dao.predicate;\n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.IDao;\n import ca.uhn.fhir.jpa.dao.SearchBuilder;\n import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NzA5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370577094", "bodyText": "This is one of those moments when you can tell that the person who designed a web UI doesn't use tabs in their own editor.. :s", "author": "jamesagnew", "createdAt": "2020-01-24T10:55:21Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n+import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.entity.SearchParamPresent;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.api.IQueryParameterType;\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.PostConstruct;\n+import javax.persistence.criteria.*;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.List;\n+\n+abstract class BasePredicateBuilder {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(BasePredicateBuilder.class);\n+\t@Autowired\n+\tFhirContext myContext;\n+\t@Autowired\n+\tDaoConfig myDaoConfig;\n+\n+\tboolean myDontUseHashesForSearch;\n+\tfinal BaseHapiFhirDao<?> myCallingDao;\n+\tfinal CriteriaBuilder myBuilder;\n+\tfinal QueryRoot myQueryRoot;\n+\tfinal Class<? extends IBaseResource> myResourceType;\n+\tfinal String myResourceName;\n+\tfinal SearchParameterMap myParams;\n+\n+\tBasePredicateBuilder(SearchBuilder theSearchBuilder) {\n+\t\tmyCallingDao = theSearchBuilder.getCallingDao();\n+\t\tmyBuilder = theSearchBuilder.getBuilder();\n+\t\tmyQueryRoot = theSearchBuilder.getQueryRoot();\n+\t\tmyResourceType = theSearchBuilder.getResourceType();\n+\t\tmyResourceName = theSearchBuilder.getResourceName();\n+\t\tmyParams = theSearchBuilder.getParams();\n+\t}\n+\n+\t@PostConstruct\n+\tprivate void postConstruct() {\n+\t\tmyDontUseHashesForSearch = myDaoConfig.getDisableHashBasedSearches();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t<T> Join<ResourceTable, T> createJoin(SearchBuilderJoinEnum theType, String theSearchParameterName) {\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = null;\n+\t\tswitch (theType) {\n+\t\t\tcase DATE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsDate\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase NUMBER:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsNumber\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase QUANTITY:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsQuantity\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase REFERENCE:\n+\t\t\t\tjoin = myQueryRoot.join(\"myResourceLinks\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase STRING:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsString\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase URI:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsUri\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase TOKEN:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsToken\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t\tcase COORDS:\n+\t\t\t\tjoin = myQueryRoot.join(\"myParamsCoords\", JoinType.LEFT);\n+\t\t\t\tbreak;\n+\t\t}\n+\n+\t\tSearchBuilderJoinKey key = new SearchBuilderJoinKey(theSearchParameterName, theType);\n+\t\tmyQueryRoot.putIndex(key, join);\n+\n+\t\treturn (Join<ResourceTable, T>) join;\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing) {\n+//\t\tif (myDontUseHashesForSearch) {\n+//\t\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+//\t\t\tJoin<Object, Object> paramJoin = paramPresentJoin.join(\"mySearchParam\", JoinType.LEFT);\n+//\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myResourceName\"), theResourceName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myParamName\"), theParamName));\n+//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramPresentJoin.get(\"myPresent\"), !theMissing));\n+//\t\t}\n+\n+\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n+\n+\t\tExpression<Long> hashPresence = paramPresentJoin.get(\"myHashPresence\").as(Long.class);\n+\t\tLong hash = SearchParamPresent.calculateHashPresence(theResourceName, theParamName, !theMissing);\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(hashPresence, hash));\n+\t}\n+\n+\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin) {\n+\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myResourceType\"), theResourceName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myParamName\"), theParamName));\n+\t\tmyQueryRoot.addPredicate(myBuilder.equal(theJoin.get(\"myMissing\"), theMissing));\n+\t}\n+\n+\tPredicate combineParamIndexPredicateWithParamNamePredicate(String theResourceName, String theParamName, From<?, ? extends BaseResourceIndexedSearchParam> theFrom, Predicate thePredicate) {\n+\t\tif (myDontUseHashesForSearch) {\n+\t\t\tPredicate resourceTypePredicate = myBuilder.equal(theFrom.get(\"myResourceType\"), theResourceName);\n+\t\t\tPredicate paramNamePredicate = myBuilder.equal(theFrom.get(\"myParamName\"), theParamName);\n+\t\t\tPredicate outerPredicate = myBuilder.and(resourceTypePredicate, paramNamePredicate, thePredicate);\n+\t\t\treturn outerPredicate;\n+\t\t}\n+\n+\t\tlong hashIdentity = BaseResourceIndexedSearchParam.calculateHashIdentity(theResourceName, theParamName);\n+\t\tPredicate hashIdentityPredicate = myBuilder.equal(theFrom.get(\"myHashIdentity\"), hashIdentity);\n+\t\treturn myBuilder.and(hashIdentityPredicate, thePredicate);\n+\t}\n+\n+\tPredicate createPredicateNumeric(String theResourceName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String theParamName,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  From<?, ? extends BaseResourceIndexedSearchParam> theFrom,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  CriteriaBuilder builder,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  IQueryParameterType theParam,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ParamPrefixEnum thePrefix,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  BigDecimal theValue,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  final Expression<BigDecimal> thePath,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String invalidMessageName) {", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODc4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370768786", "bodyText": "heh", "author": "fil512", "createdAt": "2020-01-24T18:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NzA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "16cb9a74e40bc13f8d827e03899a016798890809", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\nindex fea2bdd131..80c8eb6a70 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n\n@@ -3,6 +3,7 @@ package ca.uhn.fhir.jpa.dao.predicate;\n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.jpa.dao.BaseHapiFhirDao;\n import ca.uhn.fhir.jpa.dao.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.IDao;\n import ca.uhn.fhir.jpa.dao.SearchBuilder;\n import ca.uhn.fhir.jpa.model.entity.BaseResourceIndexedSearchParam;\n import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamDate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3Nzg5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370577899", "bodyText": "nitpick: should probably make this a regular class with a private constructor and call it XxxUtil just to be consistent with how other collections of statics are named in hapi fhir.. not sure about the Xxx though. SearchFuzzUtil?", "author": "jamesagnew", "createdAt": "2020-01-24T10:57:25Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package ca.uhn.fhir.jpa.dao.predicate;\n+\n+import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n+\n+import java.math.BigDecimal;\n+\n+public interface FuzzCalculator {", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2OTI1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370769259", "bodyText": "Renamed to SearchFuzzUtil.  Kept as interface per offline discussion.", "author": "fil512", "createdAt": "2020-01-24T18:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3Nzg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "11dc087750bce1e68f6ca64a4fb8f61a581f61ae", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/SearchFuzzUtil.java\nsimilarity index 96%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/SearchFuzzUtil.java\nindex 5ad21b22ac..ac7ce66c49 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/FuzzCalculator.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/SearchFuzzUtil.java\n\n@@ -4,7 +4,7 @@ import ca.uhn.fhir.rest.param.ParamPrefixEnum;\n \n import java.math.BigDecimal;\n \n-public interface FuzzCalculator {\n+public interface SearchFuzzUtil {\n \t/**\n \t * Figures out the tolerance for a search. For example, if the user is searching for <code>4.00</code>, this method\n \t * returns <code>0.005</code> because we shold actually match values which are\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MDA3OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370580078", "bodyText": "huh. i totally thought the radius of the earth was way bigger than that.\ni love a PR that teaches me geography....", "author": "jamesagnew", "createdAt": "2020-01-24T11:03:28Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+\n+import org.hibernate.search.spatial.impl.Point;\n+\n+public class CoordCalculator {\n+\tpublic static final double RADIUS_EARTH_KM = 6378.1;", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72ccd76ed013a61fa991d7c93f5cd947ebb30cdd", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java\nindex 200b0c2f24..abcbc4649b 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/CoordCalculator.java\n\n@@ -4,9 +4,11 @@ package ca.uhn.fhir.jpa.util;\n import org.hibernate.search.spatial.impl.Point;\n \n public class CoordCalculator {\n-\tpublic static final double RADIUS_EARTH_KM = 6378.1;\n+\tpublic static final double MAX_SUPPORTED_DISTANCE_KM = 10000.0; // Slightly less than a quarter of the earth's circumference\n+\tprivate static final double RADIUS_EARTH_KM = 6378.1;\n \n-\tpublic static Point findTarget(double theLatitudeDegrees, double theLongitudeDegrees, double theBearingDegrees, double theDistanceKm) {\n+\t// Source: https://stackoverflow.com/questions/7222382/get-lat-long-given-current-point-distance-and-bearing\n+\tstatic Point findTarget(double theLatitudeDegrees, double theLongitudeDegrees, double theBearingDegrees, double theDistanceKm) {\n \n \t\tdouble latitudeRadians = Math.toRadians(theLatitudeDegrees);\n \t\tdouble longitudeRadians = Math.toRadians(theLongitudeDegrees);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MDk2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370580968", "bodyText": "Presumably this can go", "author": "jamesagnew", "createdAt": "2020-01-24T11:05:54Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "diffHunk": "@@ -335,10 +319,19 @@ private void addUnexpectedDatatypeWarning(SearchParamSet<?> theParams, RuntimeSe\n \t\treturn extractSearchParams(theResource, extractor, RestSearchParameterTypeEnum.URI);\n \t}\n \n-\t@Override\n-\tpublic SearchParamSet<ResourceIndexedSearchParamCoords> extractSearchParamCoords(IBaseResource theResource) {\n-\t\treturn new SearchParamSet<>();\n-\t}\n+//\t@Override", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39c7642d8c5e87ce69788f98f2a27ed869b7c5f1", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java\nindex 1004e9d785..750b6188b6 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java\n\n@@ -319,20 +319,6 @@ public abstract class BaseSearchParamExtractor implements ISearchParamExtractor\n \t\treturn extractSearchParams(theResource, extractor, RestSearchParameterTypeEnum.URI);\n \t}\n \n-//\t@Override\n-//\tpublic SearchParamSet<ResourceIndexedSearchParamCoords> extractSearchParamCoords(IBaseResource theResource) {\n-//\t\tIExtractor<ResourceIndexedSearchParamCoords> extractor = (params, searchParam, value, path) -> {\n-//\t\t\tif (value.getClass().equals(myLocationPositionDefinition.getImplementingClass())) {\n-//\t\t\t\tString resourceType = toRootTypeName(theResource);\n-//\t\t\t\taddCoords_Position(resourceType, params, searchParam, value);\n-//\t\t\t} else {\n-//\t\t\t\taddUnexpectedDatatypeWarning(params, searchParam, value);\n-//\t\t\t}\n-//\t\t};\n-//\n-//\t\treturn extractSearchParams(theResource, extractor, RestSearchParameterTypeEnum.TOKEN);\n-//\t}\n-\n \t@Override\n \tpublic SearchParamSet<ResourceIndexedSearchParamDate> extractSearchParamDates(IBaseResource theResource) {\n \t\tIExtractor<ResourceIndexedSearchParamDate> extractor = (params, searchParam, value, path) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MTE0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370581145", "bodyText": "..and this can go", "author": "jamesagnew", "createdAt": "2020-01-24T11:06:24Z", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java", "diffHunk": "@@ -67,20 +67,28 @@ public void extractFromResource(RequestDetails theRequestDetails, ResourceIndexe\n \t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, uris);\n \t\ttheParams.myUriParams.addAll(uris);\n \n-\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);\n-\t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, coords);\n-\t\ttheParams.myCoordsParams.addAll(coords);\n+//\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDM3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370770377", "bodyText": "done", "author": "fil512", "createdAt": "2020-01-24T18:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MTE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "72ccd76ed013a61fa991d7c93f5cd947ebb30cdd", "chunk": "diff --git a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java\nindex 6f60979c97..95ce06c08d 100644\n--- a/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java\n+++ b/hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/SearchParamExtractorService.java\n\n@@ -67,10 +67,6 @@ public class SearchParamExtractorService {\n \t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, uris);\n \t\ttheParams.myUriParams.addAll(uris);\n \n-//\t\tISearchParamExtractor.SearchParamSet<ResourceIndexedSearchParamCoords> coords = extractSearchParamCoords(theResource);\n-//\t\thandleWarnings(theRequestDetails, myInterceptorBroadcaster, coords);\n-//\t\ttheParams.myCoordsParams.addAll(coords);\n-\n \t\tourLog.trace(\"Storing date indexes: {}\", theParams.myDateParams);\n \n \t\tfor (BaseResourceIndexedSearchParam next : extractSearchParamTokens(theResource)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370582349", "bodyText": "Overall comment 1: Is there any impact on the in memory matcher for this change? Not necessarily that it needs to support location searches, but does it at least do something consistent if you try to use them?\nOverall comment 2: What do you think about throwing a page in here? It could completely just be a page with one paragraph explaining how these work and leaving it at that.. I feel like that will avoid confusion", "author": "jamesagnew", "createdAt": "2020-01-24T11:09:45Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/param/ParameterUtil.java", "diffHunk": "@@ -98,6 +98,12 @@\n \t\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n \t\t\t\t\tCollections.<Class<? extends IQueryParameterType>>emptyList());\n \t\t\t\tbreak;\n+\t\t\tcase SPECIAL:", "originalCommit": "b465a7b7819ac1c3348ecd04d73dad996a34458d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwOTk4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370909987", "bodyText": "Good call on checking the in-memory matchers.  It worked fine for R4 and R5 (because the search param type is SPECIAL for those.) . But it failed for Dstu3.  I've added a failing test and will fix on the weekend sometime.", "author": "fil512", "createdAt": "2020-01-25T03:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0ODM3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370948375", "bodyText": "OK In-memory is working properly now.  (Unsupported for now.)", "author": "fil512", "createdAt": "2020-01-25T18:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MTY2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1683#discussion_r370951667", "bodyText": "Took the documentation a little further and added a JPA Server Search page and listed known limitations.  I'm sure I'm missing s few...", "author": "fil512", "createdAt": "2020-01-25T19:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjM0OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "39c7642d8c5e87ce69788f98f2a27ed869b7c5f1", "url": "https://github.com/hapifhir/hapi-fhir/commit/39c7642d8c5e87ce69788f98f2a27ed869b7c5f1", "message": "fix test", "committedDate": "2020-01-24T14:27:20Z", "type": "commit"}, {"oid": "16cb9a74e40bc13f8d827e03899a016798890809", "url": "https://github.com/hapifhir/hapi-fhir/commit/16cb9a74e40bc13f8d827e03899a016798890809", "message": "Remove newSearchBuilder() from BaseHapiFhirDao", "committedDate": "2020-01-24T17:19:08Z", "type": "commit"}, {"oid": "9b0f850cf4fde9c8ca939664f37abf1793566b8a", "url": "https://github.com/hapifhir/hapi-fhir/commit/9b0f850cf4fde9c8ca939664f37abf1793566b8a", "message": "remove newSearchBuilder from dao", "committedDate": "2020-01-24T18:01:35Z", "type": "commit"}, {"oid": "4ba91e07977c3f52347b2593b880f77292ac182c", "url": "https://github.com/hapifhir/hapi-fhir/commit/4ba91e07977c3f52347b2593b880f77292ac182c", "message": "remove getDao() from Dao", "committedDate": "2020-01-24T18:01:58Z", "type": "commit"}, {"oid": "672902486af9a65fcc1c580ab6f2147d26cda7c5", "url": "https://github.com/hapifhir/hapi-fhir/commit/672902486af9a65fcc1c580ab6f2147d26cda7c5", "message": "optimize imports", "committedDate": "2020-01-24T18:07:19Z", "type": "commit"}, {"oid": "11dc087750bce1e68f6ca64a4fb8f61a581f61ae", "url": "https://github.com/hapifhir/hapi-fhir/commit/11dc087750bce1e68f6ca64a4fb8f61a581f61ae", "message": "code review", "committedDate": "2020-01-24T18:08:47Z", "type": "commit"}, {"oid": "72ccd76ed013a61fa991d7c93f5cd947ebb30cdd", "url": "https://github.com/hapifhir/hapi-fhir/commit/72ccd76ed013a61fa991d7c93f5cd947ebb30cdd", "message": "prepping for antimeridian test", "committedDate": "2020-01-24T19:37:28Z", "type": "commit"}, {"oid": "c87f8e0f4a3ad8261751466d1c0e7697746ffea0", "url": "https://github.com/hapifhir/hapi-fhir/commit/c87f8e0f4a3ad8261751466d1c0e7697746ffea0", "message": "tested near anti-meridian", "committedDate": "2020-01-24T23:55:32Z", "type": "commit"}, {"oid": "2c5346817714329d0beb999d323410d8fe03a266", "url": "https://github.com/hapifhir/hapi-fhir/commit/2c5346817714329d0beb999d323410d8fe03a266", "message": "fix test", "committedDate": "2020-01-25T02:11:37Z", "type": "commit"}, {"oid": "78ab01f00b44ca72df9541aaa20fcee6028ecdba", "url": "https://github.com/hapifhir/hapi-fhir/commit/78ab01f00b44ca72df9541aaa20fcee6028ecdba", "message": "Change log and check in-memory search for location", "committedDate": "2020-01-25T02:56:14Z", "type": "commit"}, {"oid": "4f14e621ec29d1bc461cb62a465ecbf427ab95a0", "url": "https://github.com/hapifhir/hapi-fhir/commit/4f14e621ec29d1bc461cb62a465ecbf427ab95a0", "message": "added failing test for in-memory dstu3 case", "committedDate": "2020-01-25T03:03:23Z", "type": "commit"}, {"oid": "2bc31812187933d599d7fde5cf751e79cb559bec", "url": "https://github.com/hapifhir/hapi-fhir/commit/2bc31812187933d599d7fde5cf751e79cb559bec", "message": "ensure in-memory matching location search for Dstu3 falls back to a db search", "committedDate": "2020-01-25T18:30:26Z", "type": "commit"}, {"oid": "a63c62b2e13183b9b5e6e423dfc988700daff3ad", "url": "https://github.com/hapifhir/hapi-fhir/commit/a63c62b2e13183b9b5e6e423dfc988700daff3ad", "message": "ensure in-memory matching location search for Dstu3 falls back to a db search", "committedDate": "2020-01-25T19:35:20Z", "type": "commit"}, {"oid": "eff4b294df4294561497762428ae406a5ff7aead", "url": "https://github.com/hapifhir/hapi-fhir/commit/eff4b294df4294561497762428ae406a5ff7aead", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200120-near-search\n\n# Conflicts:\n#\thapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/4_2_0/changes.yaml", "committedDate": "2020-01-25T23:40:55Z", "type": "commit"}, {"oid": "cef58b528eedf054f85d3ee323894fd902e8057f", "url": "https://github.com/hapifhir/hapi-fhir/commit/cef58b528eedf054f85d3ee323894fd902e8057f", "message": "added _filter to list of search gaps", "committedDate": "2020-01-25T23:46:58Z", "type": "commit"}, {"oid": "a8ce54366c16b6202a6d5760bdc49e27fd5d238c", "url": "https://github.com/hapifhir/hapi-fhir/commit/a8ce54366c16b6202a6d5760bdc49e27fd5d238c", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200120-near-search", "committedDate": "2020-01-27T13:54:38Z", "type": "commit"}, {"oid": "2545fc6e3d0e12c32321fa7a0256387845ee51a3", "url": "https://github.com/hapifhir/hapi-fhir/commit/2545fc6e3d0e12c32321fa7a0256387845ee51a3", "message": "Merge remote-tracking branch 'remotes/origin/master' into ks-20200120-near-search\n\n# Conflicts:\n#\thapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/4_2_0/changes.yaml", "committedDate": "2020-01-29T22:06:02Z", "type": "commit"}]}