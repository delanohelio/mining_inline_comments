{"pr_number": 1989, "pr_title": "Empi docs", "pr_createdAt": "2020-07-20T21:30:24Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1989", "timeline": [{"oid": "9e4ee6cc902739a30ca88ffcbd000c6721571c79", "url": "https://github.com/hapifhir/hapi-fhir/commit/9e4ee6cc902739a30ca88ffcbd000c6721571c79", "message": "Remove lines from image edges.  Thanks Max!", "committedDate": "2020-07-20T14:03:03Z", "type": "commit"}, {"oid": "49bdbb862a216c82b0152f5bd6e6809fa41093d3", "url": "https://github.com/hapifhir/hapi-fhir/commit/49bdbb862a216c82b0152f5bd6e6809fa41093d3", "message": "fix case 4 docs\nonly mark possible match as eid if it was via an eid match", "committedDate": "2020-07-20T21:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyODg4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1989#discussion_r458228882", "bodyText": "nice", "author": "tadgh", "createdAt": "2020-07-21T16:26:50Z", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvc.java", "diffHunk": "@@ -101,14 +101,20 @@ private void handleEmpiWithMultipleCandidates(IAnyResource theResource, Candidat\n \t\t\tList<IAnyResource> persons = new ArrayList<>();\n \t\t\tfor (MatchedPersonCandidate matchedPersonCandidate : theCandidateList.getCandidates()) {\n \t\t\t\tIAnyResource person = myEmpiPersonFindingSvc.getPersonFromMatchedPersonCandidate(matchedPersonCandidate);\n-\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, EmpiMatchOutcome.EID_POSSIBLE_MATCH, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n+\t\t\t\tEmpiMatchOutcome outcome = EmpiMatchOutcome.POSSIBLE_MATCH;\n+\t\t\t\toutcome.setEidMatch(theCandidateList.isEidMatch());\n+\t\t\t\tmyEmpiLinkSvc.updateLink(person, theResource, outcome, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);\n \t\t\t\tpersons.add(person);\n \t\t\t}\n \n \t\t\t//Set all Persons as POSSIBLE_DUPLICATE of the last person.\n \t\t\tIAnyResource firstPerson = persons.get(0);\n \t\t\tpersons.subList(1, persons.size())\n-\t\t\t\t.forEach(possibleDuplicatePerson -> myEmpiLinkSvc.updateLink(firstPerson, possibleDuplicatePerson, EmpiMatchOutcome.EID_POSSIBLE_DUPLICATE, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext));\n+\t\t\t\t.forEach(possibleDuplicatePerson -> {\n+\t\t\t\t\tEmpiMatchOutcome outcome = EmpiMatchOutcome.POSSIBLE_DUPLICATE;\n+\t\t\t\t\toutcome.setEidMatch(theCandidateList.isEidMatch());\n+\t\t\t\t\tmyEmpiLinkSvc.updateLink(firstPerson, possibleDuplicatePerson, outcome, EmpiLinkSourceEnum.AUTO, theEmpiTransactionContext);", "originalCommit": "49bdbb862a216c82b0152f5bd6e6809fa41093d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzMDAzNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1989#discussion_r458230037", "bodyText": "not sure how much I like reading column by column in this format, but I can't think of a better way to do it.", "author": "tadgh", "createdAt": "2020-07-21T16:28:40Z", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiMatchLinkSvcTest.java", "diffHunk": "@@ -332,13 +354,18 @@ public void testMATCHResultWithMultipleCandidatesCreatesPOSSIBLE_DUPLICATELinksA\n \t\t//Ensure there is no successful MATCH links for incomingJanePatient\n \t\tOptional<EmpiLink> matchedLinkForTargetPid = myEmpiLinkDaoSvc.getMatchedLinkForTargetPid(myIdHelperService.getPidOrNull(incomingJanePatient));\n \t\tassertThat(matchedLinkForTargetPid.isPresent(), is(false));\n+\n+\t\tlogAllLinks();\n+\t\tassertLinksMatchResult(MATCH, MATCH, POSSIBLE_MATCH, POSSIBLE_MATCH, POSSIBLE_DUPLICATE);\n+\t\tassertLinksNewPerson(true, true, false, false, false);\n+\t\tassertLinksMatchedByEid(false, false, false, false, false);", "originalCommit": "49bdbb862a216c82b0152f5bd6e6809fa41093d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}