{"pr_number": 2067, "pr_title": "ConceptMap multi version support", "pr_createdAt": "2020-09-07T22:43:01Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/2067", "timeline": [{"oid": "ed2801dbaf48a5502868283774ac8a35e35364b0", "url": "https://github.com/hapifhir/hapi-fhir/commit/ed2801dbaf48a5502868283774ac8a35e35364b0", "message": "ConceptMap multi-version supported", "committedDate": "2020-09-06T15:33:55Z", "type": "commit"}, {"oid": "45b88de3b67e6536aad82fc6f119334ec83a6e28", "url": "https://github.com/hapifhir/hapi-fhir/commit/45b88de3b67e6536aad82fc6f119334ec83a6e28", "message": "Fixed typo", "committedDate": "2020-09-06T15:47:07Z", "type": "commit"}, {"oid": "1ecec0abc923bedf44872324a2c3a5e4f878391c", "url": "https://github.com/hapifhir/hapi-fhir/commit/1ecec0abc923bedf44872324a2c3a5e4f878391c", "message": "Fixed duplicate ConceptMap URL only", "committedDate": "2020-09-06T19:23:26Z", "type": "commit"}, {"oid": "81cd73f820b6da861207c5eb3bcc630fd86f2c77", "url": "https://github.com/hapifhir/hapi-fhir/commit/81cd73f820b6da861207c5eb3bcc630fd86f2c77", "message": "Added test cases to for duplicate url and version of ConceptMap", "committedDate": "2020-09-06T19:27:29Z", "type": "commit"}, {"oid": "d019dee786b9c741a4d10cc348d9b320591f56b4", "url": "https://github.com/hapifhir/hapi-fhir/commit/d019dee786b9c741a4d10cc348d9b320591f56b4", "message": "Added url/conceptMapVersion for ConceptMap to support translate", "committedDate": "2020-09-06T20:11:09Z", "type": "commit"}, {"oid": "54100426434b5feb9d99f41965ad8c5fbe6b91e7", "url": "https://github.com/hapifhir/hapi-fhir/commit/54100426434b5feb9d99f41965ad8c5fbe6b91e7", "message": "Multi-version supported for ConceptMap $translate operation", "committedDate": "2020-09-07T14:43:58Z", "type": "commit"}, {"oid": "5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "url": "https://github.com/hapifhir/hapi-fhir/commit/5e17625a1bd8cc3032abefdc41cd36aa10ab25fb", "message": "Fixed NullPointerException for reverse $translate operation.", "committedDate": "2020-09-07T22:09:01Z", "type": "commit"}, {"oid": "2fd692f5bb134ec92042fea7eeb9fcffc7457993", "url": "https://github.com/hapifhir/hapi-fhir/commit/2fd692f5bb134ec92042fea7eeb9fcffc7457993", "message": "Updated R5 reverse $translate test case for more coverage", "committedDate": "2020-09-08T00:54:35Z", "type": "commit"}, {"oid": "b4a87adc640081b396658527a072178998021d2b", "url": "https://github.com/hapifhir/hapi-fhir/commit/b4a87adc640081b396658527a072178998021d2b", "message": "Suggested test that includes case where ConceptVersion is not specified in $translate operation.", "committedDate": "2020-09-09T20:53:14Z", "type": "commit"}, {"oid": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "url": "https://github.com/hapifhir/hapi-fhir/commit/c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "message": "Fixed ConceptMap $translation without conceptMapVersion issue.", "committedDate": "2020-09-10T02:24:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NjkzOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486376938", "bodyText": "The method name might be a bit confusing now that we are supporting multiple ConceptMap versions.  Maybe could change this to something like findUnversionedTermConceptMapByUrl or findTermConceptMapByUrlAndNullVersion.", "author": "IanMMarshall", "createdAt": "2020-09-10T14:12:49Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,12 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNjIxMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486706211", "bodyText": "Will change to findTermConceptMapByUrlAndNullVersion, not sure this is used by outside out HAPI.", "author": "frankjtao", "createdAt": "2020-09-11T00:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NjkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNTAxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r487035016", "bodyText": "Good point about breaking backwards compatibility. I suppose we could have kept the old name as well and marked it as deprecated along with a comment recommending the use of the new name.", "author": "IanMMarshall", "createdAt": "2020-09-11T13:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3NjkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\nindex f3b609faa6..616432e2d6 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n\n@@ -40,10 +40,10 @@ public interface ITermConceptMapDao extends JpaRepository<TermConceptMap, Long>\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n-\tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n \t\n \t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") \n-\tList<TermConceptMap> findTermConceptMapByUrl(Pageable thePage, @Param(\"url\") String theUrl);\n+\tList<TermConceptMap> getTermConceptMapEntitiesByUrlOrderByVersion(Pageable thePage, @Param(\"url\") String theUrl);\n \n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url AND cm.myVersion = :version\")\n \tOptional<TermConceptMap> findTermConceptMapByUrlAndVersion(@Param(\"url\") String theUrl, @Param(\"version\") String theVersion);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3ODQ5Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486378493", "bodyText": "Suggestion for a more descriptive method name: getTermConceptMapEntitiesByUrlOrderByVersion.", "author": "IanMMarshall", "createdAt": "2020-09-10T14:14:52Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,12 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") \n+\tList<TermConceptMap> findTermConceptMapByUrl(Pageable thePage, @Param(\"url\") String theUrl);", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNzA0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486707044", "bodyText": "Changed", "author": "frankjtao", "createdAt": "2020-09-11T00:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3ODQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\nindex f3b609faa6..616432e2d6 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java\n\n@@ -40,10 +40,10 @@ public interface ITermConceptMapDao extends JpaRepository<TermConceptMap, Long>\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n-\tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n \t\n \t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") \n-\tList<TermConceptMap> findTermConceptMapByUrl(Pageable thePage, @Param(\"url\") String theUrl);\n+\tList<TermConceptMap> getTermConceptMapEntitiesByUrlOrderByVersion(Pageable thePage, @Param(\"url\") String theUrl);\n \n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url AND cm.myVersion = :version\")\n \tOptional<TermConceptMap> findTermConceptMapByUrlAndVersion(@Param(\"url\") String theUrl, @Param(\"version\") String theVersion);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjMxOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486416318", "bodyText": "It looks like the else clause above has created a gap in the test coverage for the case where a concept map version is specified but no URL is specified. To be honest, I am not sure if this would even be a valid use case. I would suggest either removing the else clause (e.g. ignore the version if no URL is specified) or adding a JUnit test for this use case.", "author": "IanMMarshall", "createdAt": "2020-09-10T15:03:30Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1946,6 +1969,25 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\t\t\t\tpredicates.add(criteriaBuilder.equal(groupJoin.get(\"myTarget\"), translationQuery.getTargetSystem().getValueAsString()));\n \t\t\t\t}\n \n+\t\t\t\tif (translationQuery.hasUrl()) { \n+\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myUrl\"), translationQuery.getUrl().getValueAsString()));\n+\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n+\t\t\t\t\t\t// both url and conceptMapVersion\n+\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (StringUtils.isNotBlank(latestConceptMapVersion)) {\n+\t\t\t\t\t\t\t// only url and use latestConceptMapVersion\n+\t\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), latestConceptMapVersion));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tpredicates.add(criteriaBuilder.isNull(conceptMapJoin.get(\"myVersion\")));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n+\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNzQxNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486707417", "bodyText": "the else clause is removed", "author": "frankjtao", "createdAt": "2020-09-11T00:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 817df66d9b..7553e6dbd3 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -1982,12 +1982,8 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\t\t\t\t\t\tpredicates.add(criteriaBuilder.isNull(conceptMapJoin.get(\"myVersion\")));\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n-\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n+\t\t\t\t} \n+\t\t\t\t\t\t\t\t\n \t\t\t\tif (translationQuery.hasSource()) {\n \t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"mySource\"), translationQuery.getSource().getValueAsString()));\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjY3Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486416677", "bodyText": "It looks like the else clause above has created a gap in the test coverage for the case where a concept map version is specified but no URL is specified. To be honest, I am not sure if this would even be a valid use case. I would suggest either removing the else clause (e.g. ignore the version if no URL is specified) or adding a JUnit test for this use case.", "author": "IanMMarshall", "createdAt": "2020-09-10T15:04:00Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2029,6 +2077,25 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\t\t\t\tpredicates.add(criteriaBuilder.equal(groupJoin.get(\"myTargetVersion\"), coding.getVersion()));\n \t\t\t\t}\n \n+\t\t\t\tif (translationQuery.hasUrl()) { \n+\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myUrl\"), translationQuery.getUrl().getValueAsString()));\n+\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n+\t\t\t\t\t\t// both url and conceptMapVersion\n+\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (StringUtils.isNotBlank(latestConceptMapVersion)) {\n+\t\t\t\t\t\t\t// only url and use latestConceptMapVersion\n+\t\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), latestConceptMapVersion));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tpredicates.add(criteriaBuilder.isNull(conceptMapJoin.get(\"myVersion\")));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n+\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNzkzNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486707936", "bodyText": "same as above", "author": "frankjtao", "createdAt": "2020-09-11T00:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxNjY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 817df66d9b..7553e6dbd3 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -2090,10 +2086,6 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\t\t\t\t\t\tpredicates.add(criteriaBuilder.isNull(conceptMapJoin.get(\"myVersion\")));\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tif (translationQuery.hasConceptMapVersion()) {\n-\t\t\t\t\t\tpredicates.add(criteriaBuilder.equal(conceptMapJoin.get(\"myVersion\"), translationQuery.getConceptMapVersion().getValueAsString()));\n-\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t\n \t\t\t\tif (translationQuery.hasTargetSystem()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMDA4Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486420082", "bodyText": "Might need a JUnit test for the case where translate is requested with a URL and no version, but the requested ConceptMap is not versioned in the repository.", "author": "IanMMarshall", "createdAt": "2020-09-10T15:08:29Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2094,6 +2161,20 @@ void throwInvalidValueSet(String theValueSet) {\n \t\tthrow new ResourceNotFoundException(\"Unknown ValueSet: \" + UrlUtil.escapeUrlParam(theValueSet));\n \t}\n \n+\t// Special case for the translate operation with url and without\n+\t// conceptMapVersion, find the latest conecptMapVersion\n+\tprivate String getLatestConceptMapVersion(TranslationRequest theTranslationRequest) {\n+\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theConceptMapList = myConceptMapDao.findTermConceptMapByUrl(page,\n+\t\t\t\ttheTranslationRequest.getUrl().asStringValue());\n+\t\tif (!theConceptMapList.isEmpty()) {\n+\t\t\treturn theConceptMapList.get(0).getVersion();\n+\t\t}\n+\n+\t\treturn null;", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMTI4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486711287", "bodyText": "new test case added", "author": "frankjtao", "createdAt": "2020-09-11T00:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyMDA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 817df66d9b..7553e6dbd3 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -2166,7 +2158,7 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \tprivate String getLatestConceptMapVersion(TranslationRequest theTranslationRequest) {\n \n \t\tPageable page = PageRequest.of(0, 1);\n-\t\tList<TermConceptMap> theConceptMapList = myConceptMapDao.findTermConceptMapByUrl(page,\n+\t\tList<TermConceptMap> theConceptMapList = myConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page,\n \t\t\t\ttheTranslationRequest.getUrl().asStringValue());\n \t\tif (!theConceptMapList.isEmpty()) {\n \t\t\treturn theConceptMapList.get(0).getVersion();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3MzA1Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486473052", "bodyText": "nitpick - comment should say should return the latest one which in this case is not versioned.", "author": "IanMMarshall", "createdAt": "2020-09-10T16:22:09Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.findTermConceptMapByUrl(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n+\t\t\t\t\n+\t\tString theUrl = \"http://loinc.org/property/analyte-suffix\";\n+\t\tConceptMap theConceptMap1 = new ConceptMap();\n+\t\tConceptMap theConceptMap2 = new ConceptMap();\n+\t\t\n+\t\ttheConceptMap1.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name1\").setVersion(\"v1\");\n+\t\ttheConceptMap2.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name2\").setVersion(\"v2\");\n+\t\t\n+\t\tmyConceptMapDao.create(theConceptMap1);\n+\t\tmyConceptMapDao.create(theConceptMap2);\n+\t\t\n+\t\tOptional<TermConceptMap> theExpConceptMapV1 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v1\");\n+\t\tOptional<TermConceptMap> theExpConceptMapV2 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v2\");\n+\t\t\n+\t\tassertTrue(theExpConceptMapV1.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV1.get().getUrl());\n+\t\tassertEquals(\"v1\", theExpConceptMapV1.get().getVersion());\n+\t\t\n+\t\tassertTrue(theExpConceptMapV2.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV2.get().getUrl());\n+\t\tassertEquals(\"v2\", theExpConceptMapV2.get().getVersion());\n+\n+\t\t// should return the latest one which is v2\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpSecondOne = myTermConceptMapDao.findTermConceptMapByUrl(page, theUrl);\n+\t\t\n+\t\tassertEquals(1, theExpSecondOne.size());\n+\t\tassertEquals(theUrl, theExpSecondOne.get(0).getUrl());\n+\t\tassertEquals(\"v2\", theExpSecondOne.get(0).getVersion());\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {\n+\t\t\t\t\n+\t\tString theUrl = \"http://loinc.org/property/analyte-suffix\";\n+\t\tConceptMap theConceptMap1 = new ConceptMap();\n+\t\tConceptMap theConceptMap2 = new ConceptMap();\n+\t\t\n+\t\ttheConceptMap1.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name1\").setVersion(\"v1\");\n+\t\ttheConceptMap2.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name2\");\n+\t\t\n+\t\tmyConceptMapDao.create(theConceptMap1);\n+\t\tmyConceptMapDao.create(theConceptMap2);\n+\t\t\n+\t\tOptional<TermConceptMap> theExpConceptMapV1 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v1\");\n+\t\t\n+\t\tassertTrue(theExpConceptMapV1.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV1.get().getUrl());\n+\t\tassertEquals(\"v1\", theExpConceptMapV1.get().getVersion());\n+\t\t\n+\t\t// should return the latest one which is v2", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMjEwNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486712107", "bodyText": "Comments updated", "author": "frankjtao", "createdAt": "2020-09-11T00:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3MzA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\nindex 271ef8f7c2..f7aa915920 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java\n\n@@ -111,7 +111,7 @@ public class FhirResourceDaoDstu3ConceptMapTest extends BaseJpaDstu3Test {\n \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n \t\t\t\n \t\tPageable page = PageRequest.of(0, 1);\n-\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.findTermConceptMapByUrl(page, CM_URL);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n \t\tassertEquals(1, theExpConceptMapList.size());\n \t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n \t\t\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3Nzk4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486477983", "bodyText": "nitpick: method ConceptMap spelled as ConcaptMap in the method name.", "author": "IanMMarshall", "createdAt": "2020-09-10T16:29:47Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +127,287 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConcaptMapUrlAndVersion() {", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMjc4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486712789", "bodyText": "Fixed", "author": "frankjtao", "createdAt": "2020-09-11T00:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3Nzk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\nindex 9f7505160b..835e806e93 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java\n\n@@ -129,54 +128,216 @@ public class ResourceProviderDstu3ConceptMapTest extends BaseResourceProviderDst\n \t}\n \t\n \t@Test\n-\tpublic void testTranslateWithConcaptMapUrlAndVersion() {\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n \t\t\n-\t\t//- conceptMap1 v1\n-\t\tConceptMap conceptMap1 = new ConceptMap();\n-\t\tconceptMap1.setUrl(CM_URL).setVersion(\"v1\").setSource(new UriType(VS_URL)).setTarget(new UriType(VS_URL_2));\n-\t\t\n-\t\tConceptMapGroupComponent group1 = conceptMap1.addGroup();\n-\t\tgroup1.setSource(CS_URL).setSourceVersion(\"Version 1\").setTarget(CS_URL_2).setTargetVersion(\"Version 2\");\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n \n-\t\tSourceElementComponent element1 = group1.addElement();\n-\t\telement1.setCode(\"11111\").setDisplay(\"Source Code 11111\");\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n \n-\t\tTargetElementComponent target1 = element1.addTarget();\n-\t\ttarget1.setCode(\"12222\").setDisplay(\"Target Code 12222\").setEquivalence(ConceptMapEquivalence.EQUAL);\n-\t\t\n-\t\tIIdType conceptMapId1 = myConceptMapDao.create(conceptMap1, mySrd).getId().toUnqualifiedVersionless();\n-\t\tconceptMap1 = myConceptMapDao.read(conceptMapId1);\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n \t\t\n-\t\tourLog.info(\"ConceptMap: 2 \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(conceptMap1));\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n \n-\t\t//- conceptMap1 v2\n-\t\tConceptMap conceptMap2 = new ConceptMap();\n-\t\tconceptMap2.setUrl(CM_URL).setVersion(\"v2\").setSource(new UriType(VS_URL)).setTarget(new UriType(VS_URL_2));\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n \t\t\n-\t\tConceptMapGroupComponent group2 = conceptMap2.addGroup();\n-\t\tgroup2.setSource(CS_URL).setSourceVersion(\"Version 1\").setTarget(CS_URL_2).setTargetVersion(\"Version 2\");\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n \n-\t\tSourceElementComponent element2 = group2.addElement();\n-\t\telement2.setCode(\"11111\").setDisplay(\"Source Code 11111\");\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n \n-\t\tTargetElementComponent target2 = element2.addTarget();\n-\t\ttarget2.setCode(\"13333\").setDisplay(\"Target Code 13333\").setEquivalence(ConceptMapEquivalence.EQUAL);\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n \t\t\n-\t\tIIdType conceptMapId2 = myConceptMapDao.create(conceptMap2, mySrd).getId().toUnqualifiedVersionless();\n-\t\tconceptMap2 = myConceptMapDao.read(conceptMapId2);\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n \t\t\n-\t\tourLog.info(\"ConceptMap: 2 \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(conceptMap2));\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n \n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, null, \"12222\", \"Target Code 12222\"); // first version is null\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\t\t \t\t\n+\t\t// Call translate with no ConceptMap version.\n \t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n \t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n \t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n \t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n \n \t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n \n-\t\t\n \t\tParameters respParams = ourClient\n \t\t\t.operation()\n \t\t\t.onType(ConceptMap.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDI2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486480265", "bodyText": "You can remove this class now (I added it for illustration purposes, but the ResourceProviderDstu3ConceptMapTest class provides adequate coverage now).", "author": "IanMMarshall", "createdAt": "2020-09-10T16:33:24Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMap_Ian_Test.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package ca.uhn.fhir.jpa.provider.dstu3;", "originalCommit": "c873b6d6dd382717ba5ff9c6683abfe9a4c6837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxNzQyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2067#discussion_r486717420", "bodyText": "This is class is removed and the test cases are merged to ResourceProviderDstu3ConceptMapTest class", "author": "frankjtao", "createdAt": "2020-09-11T01:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMap_Ian_Test.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMap_Ian_Test.java\ndeleted file mode 100644\nindex afd5964b9e..0000000000\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMap_Ian_Test.java\n+++ /dev/null\n\n@@ -1,296 +0,0 @@\n-package ca.uhn.fhir.jpa.provider.dstu3;\n-\n-import org.hl7.fhir.dstu3.model.BooleanType;\n-import org.hl7.fhir.dstu3.model.CodeType;\n-import org.hl7.fhir.dstu3.model.Coding;\n-import org.hl7.fhir.dstu3.model.ConceptMap;\n-import org.hl7.fhir.dstu3.model.ConceptMap.ConceptMapGroupComponent;\n-import org.hl7.fhir.dstu3.model.ConceptMap.SourceElementComponent;\n-import org.hl7.fhir.dstu3.model.ConceptMap.TargetElementComponent;\n-import org.hl7.fhir.dstu3.model.Enumerations.ConceptMapEquivalence;\n-import org.hl7.fhir.dstu3.model.Parameters;\n-import org.hl7.fhir.dstu3.model.Parameters.ParametersParameterComponent;\n-import org.hl7.fhir.dstu3.model.StringType;\n-import org.hl7.fhir.dstu3.model.UriType;\n-import org.hl7.fhir.instance.model.api.IIdType;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-public class ResourceProviderDstu3ConceptMap_Ian_Test extends BaseResourceProviderDstu3Test {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(ResourceProviderDstu3ConceptMap_Ian_Test.class);\n-\n-\t\n-\t@BeforeEach\n-\t@Transactional\n-\tpublic void before02() {\n-\n-\t}\n-\n-\t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n-\n-\t\tcreateConceptMap(\"v1\", \"12222\", \"Target Code 12222\");\n-\t\tcreateConceptMap(\"v2\", \"13333\", \"Target Code 13333\");\n-\t\t\n-\t\t// Call translate with ConceptMap v2.\n-\t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n-\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n-\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n-\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n-\n-\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n-\n-\t\tParameters respParams = ourClient\n-\t\t\t.operation()\n-\t\t\t.onType(ConceptMap.class)\n-\t\t\t.named(\"translate\")\n-\t\t\t.withParameters(inParams)\n-\t\t\t.execute();\n-\n-\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n-\n-\t\t// Should return v2 since v2 specified.\n-\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n-\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n-\n-\t\tparam = getParameterByName(respParams, \"message\");\n-\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n-\n-\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n-\t\tparam = getParametersByName(respParams, \"match\").get(0);\n-\t\tassertEquals(3, param.getPart().size());\n-\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n-\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n-\t\tpart = getPartByName(param, \"concept\");\n-\t\tCoding coding = (Coding) part.getValue();\n-\t\tassertEquals(\"13333\", coding.getCode());\n-\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n-\t\tassertFalse(coding.getUserSelected());\n-\t\tassertEquals(CS_URL_2, coding.getSystem());\n-\t\tassertEquals(\"Version 2\", coding.getVersion());\n-\t\tpart = getPartByName(param, \"source\");\n-\t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n-\n-\t}\n-\n-\t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n-\n-\t\tcreateConceptMap(\"v1\", \"12222\", \"Target Code 12222\");\n-\t\tcreateConceptMap(\"v2\", \"13333\", \"Target Code 13333\");;\n-\t\t\n-\t\t// Call translate with ConceptMap v1.\n-\t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n-\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n-\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n-\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n-\n-\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n-\n-\t\tParameters respParams = ourClient\n-\t\t\t.operation()\n-\t\t\t.onType(ConceptMap.class)\n-\t\t\t.named(\"translate\")\n-\t\t\t.withParameters(inParams)\n-\t\t\t.execute();\n-\n-\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n-\n-\t\t// Should return v1 since v1 specified.\n-\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n-\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n-\n-\t\tparam = getParameterByName(respParams, \"message\");\n-\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n-\n-\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n-\t\tparam = getParametersByName(respParams, \"match\").get(0);\n-\t\tassertEquals(3, param.getPart().size());\n-\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n-\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n-\t\tpart = getPartByName(param, \"concept\");\n-\t\tCoding coding = (Coding) part.getValue();\n-\t\tassertEquals(\"12222\", coding.getCode());\n-\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n-\t\tassertFalse(coding.getUserSelected());\n-\t\tassertEquals(CS_URL_2, coding.getSystem());\n-\t\tassertEquals(\"Version 2\", coding.getVersion());\n-\t\tpart = getPartByName(param, \"source\");\n-\t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n-\n-\t}\n-\n-\t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n-\n-\t\tcreateConceptMap(\"v1\", \"12222\", \"Target Code 12222\");\n-\t\tcreateConceptMap(\"v2\", \"13333\", \"Target Code 13333\");\n-\t\t\n-\t\t// Call translate with no ConceptMap version.\n-\t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n-\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n-\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n-\n-\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n-\n-\t\tParameters respParams = ourClient\n-\t\t\t.operation()\n-\t\t\t.onType(ConceptMap.class)\n-\t\t\t.named(\"translate\")\n-\t\t\t.withParameters(inParams)\n-\t\t\t.execute();\n-\n-\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n-\n-\t\t// Should return v2 since v2 is the most recently updated version.\n-\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n-\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n-\n-\t\tparam = getParameterByName(respParams, \"message\");\n-\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n-\n-\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n-\t\tparam = getParametersByName(respParams, \"match\").get(0);\n-\t\tassertEquals(3, param.getPart().size());\n-\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n-\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n-\t\tpart = getPartByName(param, \"concept\");\n-\t\tCoding coding = (Coding) part.getValue();\n-\t\tassertEquals(\"13333\", coding.getCode());\n-\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n-\t\tassertFalse(coding.getUserSelected());\n-\t\tassertEquals(CS_URL_2, coding.getSystem());\n-\t\tassertEquals(\"Version 2\", coding.getVersion());\n-\t\tpart = getPartByName(param, \"source\");\n-\t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n-\t}\n-\n-\t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n-\n-\t\tcreateConceptMap(null, \"12222\", \"Target Code 12222\"); // first version is null\n-\t\tcreateConceptMap(\"v2\", \"13333\", \"Target Code 13333\");\n-\t\t \t\t\n-\t\t// Call translate with no ConceptMap version.\n-\t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n-\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n-\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n-\n-\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n-\n-\t\tParameters respParams = ourClient\n-\t\t\t.operation()\n-\t\t\t.onType(ConceptMap.class)\n-\t\t\t.named(\"translate\")\n-\t\t\t.withParameters(inParams)\n-\t\t\t.execute();\n-\n-\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n-\n-\t\t// Should return v2 since v2 is the most recently updated version.\n-\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n-\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n-\n-\t\tparam = getParameterByName(respParams, \"message\");\n-\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n-\n-\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n-\t\tparam = getParametersByName(respParams, \"match\").get(0);\n-\t\tassertEquals(3, param.getPart().size());\n-\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n-\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n-\t\tpart = getPartByName(param, \"concept\");\n-\t\tCoding coding = (Coding) part.getValue();\n-\t\tassertEquals(\"13333\", coding.getCode());\n-\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n-\t\tassertFalse(coding.getUserSelected());\n-\t\tassertEquals(CS_URL_2, coding.getSystem());\n-\t\tassertEquals(\"Version 2\", coding.getVersion());\n-\t\tpart = getPartByName(param, \"source\");\n-\t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n-\t}\n-\n-\t@Test\n-\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {\n-\n-\t\tcreateConceptMap(\"v1\", \"12222\", \"Target Code 12222\"); \n-\t\tcreateConceptMap(null, \"13333\", \"Target Code 13333\"); // second version is null\n-\t\t\n-\t\t// Call translate with no ConceptMap version.\n-\t\tParameters inParams = new Parameters();\n-\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(CM_URL));\n-\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n-\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n-\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n-\n-\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n-\n-\t\tParameters respParams = ourClient\n-\t\t\t.operation()\n-\t\t\t.onType(ConceptMap.class)\n-\t\t\t.named(\"translate\")\n-\t\t\t.withParameters(inParams)\n-\t\t\t.execute();\n-\n-\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n-\n-\t\t// Should return v2 since v2 is the most recently updated version.\n-\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n-\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n-\n-\t\tparam = getParameterByName(respParams, \"message\");\n-\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n-\n-\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n-\t\tparam = getParametersByName(respParams, \"match\").get(0);\n-\t\tassertEquals(3, param.getPart().size());\n-\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n-\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n-\t\tpart = getPartByName(param, \"concept\");\n-\t\tCoding coding = (Coding) part.getValue();\n-\t\tassertEquals(\"13333\", coding.getCode());\n-\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n-\t\tassertFalse(coding.getUserSelected());\n-\t\tassertEquals(CS_URL_2, coding.getSystem());\n-\t\tassertEquals(\"Version 2\", coding.getVersion());\n-\t\tpart = getPartByName(param, \"source\");\n-\t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n-\t}\n-\t\n-\tprivate void createConceptMap(String version, String targetCode, String targetDisplay) {\n-\t\t\n-\t\tConceptMap conceptMap = new ConceptMap();\n-\t\tconceptMap.setUrl(CM_URL).setVersion(version).setSource(new UriType(VS_URL)).setTarget(new UriType(VS_URL_2));\n-\n-\t\tConceptMapGroupComponent group1 = conceptMap.addGroup();\n-\t\tgroup1.setSource(CS_URL).setSourceVersion(\"Version 1\").setTarget(CS_URL_2).setTargetVersion(\"Version 2\");\n-\n-\t\tSourceElementComponent element1 = group1.addElement();\n-\t\telement1.setCode(\"11111\").setDisplay(\"Source Code 11111\");\n-\n-\t\tTargetElementComponent target1 = element1.addTarget();\n-\t\ttarget1.setCode(targetCode).setDisplay(targetDisplay).setEquivalence(ConceptMapEquivalence.EQUAL);\n-\n-\t\tIIdType conceptMapId = myConceptMapDao.create(conceptMap, mySrd).getId().toUnqualifiedVersionless();\n-\t\tconceptMap = myConceptMapDao.read(conceptMapId);\n-\t\t\n-\t\tourLog.info(\"ConceptMap: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(conceptMap));\n-\t}\n-\t\n-\n-}\n"}}, {"oid": "972bdbd87d86c23f8c6800e5f6a2e438733547c2", "url": "https://github.com/hapifhir/hapi-fhir/commit/972bdbd87d86c23f8c6800e5f6a2e438733547c2", "message": "Updated based on code review", "committedDate": "2020-09-11T01:17:41Z", "type": "commit"}, {"oid": "750cbf4ba3ffd22afbd71518e5b41d229bd66750", "url": "https://github.com/hapifhir/hapi-fhir/commit/750cbf4ba3ffd22afbd71518e5b41d229bd66750", "message": "@Deprecated the old findTermConceptMapByUrl method", "committedDate": "2020-09-11T13:20:01Z", "type": "commit"}]}