{"pr_number": 2175, "pr_title": "Fixed expand filter issue", "pr_createdAt": "2020-11-16T03:40:52Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/2175", "timeline": [{"oid": "78f730c4caf9ff93f85a45dc83904f0d2e56782e", "url": "https://github.com/hapifhir/hapi-fhir/commit/78f730c4caf9ff93f85a45dc83904f0d2e56782e", "message": "Fixed expend filter issue", "committedDate": "2020-11-16T03:39:14Z", "type": "commit"}, {"oid": "f65fdb0d5244d4206bc4f6f25088c2d106504b49", "url": "https://github.com/hapifhir/hapi-fhir/commit/f65fdb0d5244d4206bc4f6f25088c2d106504b49", "message": "Merge branch 'master' into ft-fix-expend-filter-contains-issue", "committedDate": "2020-11-19T00:54:01Z", "type": "commit"}, {"oid": "878c22192efc6683336465480f435b678c5326d4", "url": "https://github.com/hapifhir/hapi-fhir/commit/878c22192efc6683336465480f435b678c5326d4", "message": "Added expand filter impl for R5 and dstu3, changed the filter logic", "committedDate": "2020-11-19T03:26:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyOTU2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r526629568", "bodyText": "Hi, @frankjtao and @IanMMarshall.\nWhat is the issue we're trying to solve here? What was the original request?", "author": "dmuylwyk", "createdAt": "2020-11-19T06:48:42Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/StringUtil.java", "diffHunk": "@@ -78,4 +79,24 @@ public static String toUtf8String(byte[] theBytes) {\n \t\treturn new String(bytes, StandardCharsets.UTF_8);\n \t}\n \n+\t/**\n+\t * Check the input string has prefix token \n+\t * \n+\t * @param theInput       the input string\n+\t * @param thePrefix      the prefix string of a token\n+\t * @return Return true if a input string token separated by space start with the prefix \n+\t */\n+\tpublic static boolean isStartsWithIgnoreCase(final String theInput, final String thePrefix) {", "originalCommit": "878c22192efc6683336465480f435b678c5326d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwNTczOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r526905739", "bodyText": "Posted the requirements here:\n#2175 (comment)", "author": "dmuylwyk", "createdAt": "2020-11-19T13:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyOTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e551f1837e6b21833672a8be43dac87e3c44f6e5", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/StringUtil.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/StringUtil.java\nindex 167c237151..dfc429ed63 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/StringUtil.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/util/StringUtil.java\n\n@@ -82,6 +82,10 @@ public class StringUtil {\n \t/**\n \t * Check the input string has prefix token \n \t * \n+\t * e.g. For a display text of \u201cBody height\u201d:\n+\t *\tsearching on \"Bo\" or \"he\" should find it\n+\t *\tsearching on \"ei\" or \"dy\" should not find it\n+\t * \n \t * @param theInput       the input string\n \t * @param thePrefix      the prefix string of a token\n \t * @return Return true if a input string token separated by space start with the prefix \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMTE4MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r526631181", "bodyText": "@frankjtao and/or @IanMMarshall, can you explain/justify this change from EQUAL to EXISTS?\nReviewing the FilterOperator value set here, I'm not sure this makes sense. EQUAL seems like the most appropriate fit for a partial-to-complete match. EXISTS simply identifies whether or not the property (in this case the display) is present at all.\nI'm calling this out only here; however, I have the same concern for all of the related resource DAOs by FHIR version.", "author": "dmuylwyk", "createdAt": "2020-11-19T06:53:14Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java", "diffHunk": "@@ -238,7 +240,7 @@ private void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionCont\n \tprivate void addFilterIfPresent(String theFilter, ConceptSetComponent include) {\n \t\tif (ElementUtil.isEmpty(include.getConcept())) {\n \t\t\tif (isNotBlank(theFilter)) {\n-\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(FilterOperator.EQUAL).setValue(theFilter);\n+\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(FilterOperator.EXISTS).setValue(theFilter);", "originalCommit": "878c22192efc6683336465480f435b678c5326d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAxMDA4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r529010089", "bodyText": "Resolved. We stuck with EQUAL.", "author": "dmuylwyk", "createdAt": "2020-11-23T21:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYzMTE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\nindex b704e8137c..a438f42986 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\n\n@@ -240,7 +240,7 @@ public class FhirResourceDaoValueSetDstu3 extends BaseHapiFhirResourceDao<ValueS\n \tprivate void addFilterIfPresent(String theFilter, ConceptSetComponent include) {\n \t\tif (ElementUtil.isEmpty(include.getConcept())) {\n \t\t\tif (isNotBlank(theFilter)) {\n-\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(FilterOperator.EXISTS).setValue(theFilter);\n+\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(FilterOperator.EQUAL).setValue(theFilter);\n \t\t\t}\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkwNzAwOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r526907009", "bodyText": "This change warrants a changelog entry to indicate $expand with filter now evaluates the display with left-matching by string token, case-insensitive.", "author": "dmuylwyk", "createdAt": "2020-11-19T13:58:32Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java", "diffHunk": "@@ -208,7 +210,11 @@ private void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionCont\n \n \t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n \t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !org.apache.commons.lang3.StringUtils.containsIgnoreCase(next.getDisplay(), theFilter)) {\n+\t\t\t\n+\t\t\t// e.g. For a display text of \u201cBody height\u201d:\n+\t\t\t// searching on \"Bo\" or \"he\" should find it\n+\t\t\t// searching on \"ei\" or \"dy\" should not find it\n+\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {", "originalCommit": "878c22192efc6683336465480f435b678c5326d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e551f1837e6b21833672a8be43dac87e3c44f6e5", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\nindex 9972e5efa4..358148c09c 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\n\n@@ -211,9 +211,6 @@ public class FhirResourceDaoValueSetR4 extends BaseHapiFhirResourceDao<ValueSet>\n \t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n \t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n \t\t\t\n-\t\t\t// e.g. For a display text of \u201cBody height\u201d:\n-\t\t\t// searching on \"Bo\" or \"he\" should find it\n-\t\t\t// searching on \"ei\" or \"dy\" should not find it\n \t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {\n \t\t\t\ttheContains.remove(idx);\n \t\t\t\tidx--;\n"}}, {"oid": "e551f1837e6b21833672a8be43dac87e3c44f6e5", "url": "https://github.com/hapifhir/hapi-fhir/commit/e551f1837e6b21833672a8be43dac87e3c44f6e5", "message": "Updated based on review", "committedDate": "2020-11-20T01:22:13Z", "type": "commit"}, {"oid": "2d2add60ec97e83583cf84115edb2ce96f589bda", "url": "https://github.com/hapifhir/hapi-fhir/commit/2d2add60ec97e83583cf84115edb2ce96f589bda", "message": "Updated the changelog", "committedDate": "2020-11-20T14:02:40Z", "type": "commit"}, {"oid": "5b471602c6acb207cd7e6219d4fb8eab1a58ef9e", "url": "https://github.com/hapifhir/hapi-fhir/commit/5b471602c6acb207cd7e6219d4fb8eab1a58ef9e", "message": "Merge branch 'master' into ft-fix-expend-filter-contains-issue", "committedDate": "2020-11-20T15:29:58Z", "type": "commit"}, {"oid": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "url": "https://github.com/hapifhir/hapi-fhir/commit/5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "message": "Revoked filter op to EQUAL and enabled NGramAnalyzer", "committedDate": "2020-11-21T19:46:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjYxMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r528992612", "bodyText": "After examining the changes in BaseTermReadSvcImpl more closely, I agree that enabling the \"myDisplayNGram\" in the addDisplayFilterInexact() method of BaseTermReadSvcImpl class is the correct solution here. That being said, I am now wondering if there is still a need for the applyFilter method in the FhirResourceDaoValueSet classes. I think this would only really be needed now for the case where HibernateSearch is not implemented.\nCurrently the BaseTermReadSvcImpl class disallows expand with filter in cases where HibernateSearch is not enabled. As such, I would say maybe remove this for now from the FhirResourceDaoValueSetDstu3, FhirResourceDaoValueSetR4 and FhirResourceDaoValueSetR5 classes.", "author": "IanMMarshall", "createdAt": "2020-11-23T21:00:22Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java", "diffHunk": "@@ -224,7 +226,7 @@ private void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionCont\n \n \t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n \t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !org.apache.commons.lang3.StringUtils.containsIgnoreCase(next.getDisplay(), theFilter)) {\n+\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {", "originalCommit": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0MzI3Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r529043272", "bodyText": "@IanMMarshall No. The applyFilter  method can't be removed in this case, since NGram Analyzer will return entry e.g.  for the display value of 'Systolic blood pressure' with the filter 'lood'. The applyFilter will return only left matching entries.", "author": "frankjtao", "createdAt": "2020-11-23T22:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a511543e77c99819d79a1a740f3c54f0fe93614a", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\nindex a438f42986..b895dc77b8 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\n\n@@ -31,218 +30,60 @@ import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n import ca.uhn.fhir.rest.api.server.RequestDetails;\n import ca.uhn.fhir.rest.api.server.storage.TransactionDetails;\n import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n-import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n-import ca.uhn.fhir.util.ElementUtil;\n-import ca.uhn.fhir.util.StringUtil;\n-\n+import org.hl7.fhir.convertors.conv30_40.ValueSet30_40;\n import org.hl7.fhir.dstu3.model.CodeableConcept;\n import org.hl7.fhir.dstu3.model.Coding;\n-import org.hl7.fhir.dstu3.model.IntegerType;\n import org.hl7.fhir.dstu3.model.ValueSet;\n-import org.hl7.fhir.dstu3.model.ValueSet.ConceptSetComponent;\n-import org.hl7.fhir.dstu3.model.ValueSet.ConceptSetFilterComponent;\n-import org.hl7.fhir.dstu3.model.ValueSet.FilterOperator;\n-import org.hl7.fhir.dstu3.model.ValueSet.ValueSetExpansionContainsComponent;\n import org.hl7.fhir.exceptions.FHIRException;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.hl7.fhir.instance.model.api.IPrimitiveType;\n \n import java.util.Date;\n-import java.util.List;\n \n import static ca.uhn.fhir.jpa.dao.FhirResourceDaoValueSetDstu2.toStringOrNull;\n-import static ca.uhn.fhir.jpa.dao.r4.FhirResourceDaoValueSetR4.validateHaveExpansionOrThrowInternalErrorException;\n-import static org.apache.commons.lang3.StringUtils.isBlank;\n-import static org.apache.commons.lang3.StringUtils.isNotBlank;\n import static org.hl7.fhir.convertors.conv30_40.ValueSet30_40.convertValueSet;\n \n public class FhirResourceDaoValueSetDstu3 extends BaseHapiFhirResourceDao<ValueSet> implements IFhirResourceDaoValueSet<ValueSet, Coding, CodeableConcept> {\n \n-\tprivate IValidationSupport myValidationSupport;\n-\n-\t@Override\n-\tpublic void start() {\n-\t\tsuper.start();\n-\t\tmyValidationSupport = getApplicationContext().getBean(IValidationSupport.class, \"myJpaValidationSupportChain\");\n-\t}\n-\n \t@Override\n-\tpublic ValueSet expand(IIdType theId, String theFilter, RequestDetails theRequestDetails) {\n-\t\tValueSet source = read(theId, theRequestDetails);\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expand(IIdType theId, String theFilter, RequestDetails theRequestDetails) {\n+\t\torg.hl7.fhir.dstu3.model.ValueSet source = read(theId, theRequestDetails);\n \t\treturn expand(source, theFilter);\n \t}\n \n \t@Override\n-\tpublic ValueSet expand(IIdType theId, String theFilter, int theOffset, int theCount, RequestDetails theRequestDetails) {\n-\t\tValueSet source = read(theId, theRequestDetails);\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expand(IIdType theId, String theFilter, int theOffset, int theCount, RequestDetails theRequestDetails) {\n+\t\torg.hl7.fhir.dstu3.model.ValueSet source = read(theId, theRequestDetails);\n \t\treturn expand(source, theFilter, theOffset, theCount);\n \t}\n \n-\tprivate ValueSet doExpand(ValueSet theSource) {\n-\t\tvalidateIncludes(\"include\", theSource.getCompose().getInclude());\n-\t\tvalidateIncludes(\"exclude\", theSource.getCompose().getExclude());\n-\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), null, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\n-\t}\n-\n-\tprivate ValueSet doExpand(ValueSet theSource, int theOffset, int theCount) {\n-\t\tvalidateIncludes(\"include\", theSource.getCompose().getInclude());\n-\t\tvalidateIncludes(\"exclude\", theSource.getCompose().getExclude());\n-\n-\t\tValueSetExpansionOptions options = new ValueSetExpansionOptions()\n-\t\t\t.setOffset(theOffset)\n-\t\t\t.setCount(theCount);\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), options, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\t}\n-\n-\tprivate void validateIncludes(String name, List<ConceptSetComponent> listToValidate) {\n-\t\tfor (ConceptSetComponent nextExclude : listToValidate) {\n-\t\t\tif (isBlank(nextExclude.getSystem()) && nextExclude.getValueSet().isEmpty() && !ElementUtil.isEmpty(nextExclude.getConcept(), nextExclude.getFilter())) {\n-\t\t\t\tthrow new InvalidRequestException(\"ValueSet contains \" + name + \" criteria with no system defined\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Override\n-\tpublic ValueSet expandByIdentifier(String theUri, String theFilter) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\treturn doExpand(source);\n-\n-\t\t// if (defaultValueSet != null) {\n-\t\t// source = getContext().newJsonParser().parseResource(ValueSet.class, getContext().newJsonParser().encodeResourceToString(defaultValueSet));\n-\t\t// } else {\n-\t\t// IBundleProvider ids = search(ValueSet.SP_URL, new UriParam(theUri));\n-\t\t// if (ids.size() == 0) {\n-\t\t// throw new InvalidRequestException(\"Unknown ValueSet URI: \" + theUri);\n-\t\t// }\n-\t\t// source = (ValueSet) ids.getResources(0, 1).get(0);\n-\t\t// }\n-\t\t//\n-\t\t// return expand(defaultValueSet, theFilter);\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expandByIdentifier(String theUri, String theFilter) {\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(null, theUri, theFilter);\n+\t\treturn ValueSet30_40.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n-\tpublic ValueSet expandByIdentifier(String theUri, String theFilter, int theOffset, int theCount) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\treturn doExpand(source, theOffset, theCount);\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expandByIdentifier(String theUri, String theFilter, int theOffset, int theCount) {\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(options, theUri, theFilter);\n+\t\treturn ValueSet30_40.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n-\tpublic ValueSet expand(ValueSet theSource, String theFilter) {\n-\t\tValueSet toExpand = new ValueSet();\n-\n-\t\t// for (UriType next : theSource.getCompose().getInclude()) {\n-\t\t// ConceptSetComponent include = toExpand.getCompose().addInclude();\n-\t\t// include.setSystem(next.getValue());\n-\t\t// addFilterIfPresent(theFilter, include);\n-\t\t// }\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expand(org.hl7.fhir.dstu3.model.ValueSet theSource, String theFilter) {\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalInput = ValueSet30_40.convertValueSet(theSource);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(null, canonicalInput, theFilter);\n+\t\treturn ValueSet30_40.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n-\tpublic ValueSet expand(ValueSet theSource, String theFilter, int theOffset, int theCount) {\n-\t\tValueSet toExpand = new ValueSet();\n-\t\ttoExpand.setId(theSource.getId());\n-\t\ttoExpand.setUrl(theSource.getUrl());\n-\t\tif (theSource.getVersion() != null) {\n-\t\t\ttoExpand.setVersion(theSource.getVersion());\n-\t\t}\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand, theOffset, theCount);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n-\t}\n-\n-\tprivate void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionContainsComponent> theContains, String theFilter) {\n-\n-\t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n-\t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {\n-\t\t\t\ttheContains.remove(idx);\n-\t\t\t\tidx--;\n-\t\t\t\tif (theTotalElement.getValue() != null) {\n-\t\t\t\t\ttheTotalElement.setValue(theTotalElement.getValue() - 1);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tapplyFilter(theTotalElement, next.getContains(), theFilter);\n-\t\t}\n-\t}\n-\n-\tprivate void addFilterIfPresent(String theFilter, ConceptSetComponent include) {\n-\t\tif (ElementUtil.isEmpty(include.getConcept())) {\n-\t\t\tif (isNotBlank(theFilter)) {\n-\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(FilterOperator.EQUAL).setValue(theFilter);\n-\t\t\t}\n-\t\t}\n+\tpublic org.hl7.fhir.dstu3.model.ValueSet expand(org.hl7.fhir.dstu3.model.ValueSet theSource, String theFilter, int theOffset, int theCount) {\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalInput = ValueSet30_40.convertValueSet(theSource);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(options, canonicalInput, theFilter);\n+\t\treturn ValueSet30_40.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjkyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r528992921", "bodyText": "See comments above in FhirResourceDaoValueSetDao3.", "author": "IanMMarshall", "createdAt": "2020-11-23T21:01:04Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java", "diffHunk": "@@ -208,7 +210,8 @@ private void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionCont\n \n \t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n \t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !org.apache.commons.lang3.StringUtils.containsIgnoreCase(next.getDisplay(), theFilter)) {\n+\t\t\t\n+\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {", "originalCommit": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0MzM3Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r529043372", "bodyText": "Same as above", "author": "frankjtao", "createdAt": "2020-11-23T22:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a511543e77c99819d79a1a740f3c54f0fe93614a", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\nindex 5279ec6d05..6433c1cdba 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\n\n@@ -77,157 +55,26 @@ public class FhirResourceDaoValueSetR4 extends BaseHapiFhirResourceDao<ValueSet>\n \t\treturn expand(source, theFilter, theOffset, theCount);\n \t}\n \n-\tprivate ValueSet doExpand(ValueSet theSource) {\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), null, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\n-\t}\n-\n-\tprivate ValueSet doExpand(ValueSet theSource, int theOffset, int theCount) {\n-\t\tValueSetExpansionOptions options = new ValueSetExpansionOptions()\n-\t\t\t.setOffset(theOffset)\n-\t\t\t.setCount(theCount);\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), options, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\t}\n-\n \t@Override\n \tpublic ValueSet expandByIdentifier(String theUri, String theFilter) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\treturn doExpand(source);\n-\n-\t\t// if (defaultValueSet != null) {\n-\t\t// source = getContext().newJsonParser().parseResource(ValueSet.class, getContext().newJsonParser().encodeResourceToString(defaultValueSet));\n-\t\t// } else {\n-\t\t// IBundleProvider ids = search(ValueSet.SP_URL, new UriParam(theUri));\n-\t\t// if (ids.size() == 0) {\n-\t\t// throw new InvalidRequestException(\"Unknown ValueSet URI: \" + theUri);\n-\t\t// }\n-\t\t// source = (ValueSet) ids.getResources(0, 1).get(0);\n-\t\t// }\n-\t\t//\n-\t\t// return expand(defaultValueSet, theFilter);\n+\t\treturn myTerminologySvc.expandValueSet(null, theUri, theFilter);\n \t}\n \n \t@Override\n \tpublic ValueSet expandByIdentifier(String theUri, String theFilter, int theOffset, int theCount) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\treturn doExpand(source, theOffset, theCount);\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\treturn myTerminologySvc.expandValueSet(options, theUri, theFilter);\n \t}\n \n \t@Override\n \tpublic ValueSet expand(ValueSet theSource, String theFilter) {\n-\t\tValueSet toExpand = new ValueSet();\n-\n-\t\t// for (UriType next : theSource.getCompose().getInclude()) {\n-\t\t// ConceptSetComponent include = toExpand.getCompose().addInclude();\n-\t\t// include.setSystem(next.getValue());\n-\t\t// addFilterIfPresent(theFilter, include);\n-\t\t// }\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n+\t\treturn myTerminologySvc.expandValueSet(null, theSource, theFilter);\n \t}\n \n \t@Override\n \tpublic ValueSet expand(ValueSet theSource, String theFilter, int theOffset, int theCount) {\n-\t\tValueSet toExpand = new ValueSet();\n-\t\ttoExpand.setId(theSource.getId());\n-\t\ttoExpand.setUrl(theSource.getUrl());\n-\t\tif (theSource.getVersion() != null) {\n-\t\t\ttoExpand.setVersion(theSource.getVersion());\n-\t\t}\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand, theOffset, theCount);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n-\t}\n-\n-\tprivate void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionContainsComponent> theContains, String theFilter) {\n-\n-\t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n-\t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\t\n-\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {\n-\t\t\t\ttheContains.remove(idx);\n-\t\t\t\tidx--;\n-\t\t\t\tif (theTotalElement.getValue() != null) {\n-\t\t\t\t\ttheTotalElement.setValue(theTotalElement.getValue() - 1);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tapplyFilter(theTotalElement, next.getContains(), theFilter);\n-\t\t}\n-\t}\n-\t\n-\tprivate void addFilterIfPresent(String theFilter, ConceptSetComponent include) {\n-\t\tif (ElementUtil.isEmpty(include.getConcept())) {\n-\t\t\tif (isNotBlank(theFilter)) {\n-\t\t\t\tinclude.addFilter().setProperty(JpaConstants.VALUESET_FILTER_DISPLAY).setOp(FilterOperator.EQUAL).setValue(theFilter);\n-\t\t\t}\n-\t\t}\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\treturn myTerminologySvc.expandValueSet(options, theSource, theFilter);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MzMxNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r528993317", "bodyText": "See comments above in FhirResourceDaoValueSetDstu3 and FhirResourceDaoValueSetR4.", "author": "IanMMarshall", "createdAt": "2020-11-23T21:01:53Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java", "diffHunk": "@@ -208,7 +210,7 @@ private void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionCont\n \n \t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n \t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !org.apache.commons.lang3.StringUtils.containsIgnoreCase(next.getDisplay(), theFilter)) {\n+\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {", "originalCommit": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0MzQyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r529043421", "bodyText": "Same as above", "author": "frankjtao", "createdAt": "2020-11-23T22:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a511543e77c99819d79a1a740f3c54f0fe93614a", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java\nindex d0f61a8696..9a9cb5fd99 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java\n\n@@ -76,157 +55,32 @@ public class FhirResourceDaoValueSetR5 extends BaseHapiFhirResourceDao<ValueSet>\n \t\treturn expand(source, theFilter, theOffset, theCount);\n \t}\n \n-\tprivate ValueSet doExpand(ValueSet theSource) {\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), null, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\n-\t}\n-\n-\tprivate ValueSet doExpand(ValueSet theSource, int theOffset, int theCount) {\n-\t\tValueSetExpansionOptions options = new ValueSetExpansionOptions()\n-\t\t\t.setOffset(theOffset)\n-\t\t\t.setCount(theCount);\n-\t\tIValidationSupport.ValueSetExpansionOutcome retVal = myValidationSupport.expandValueSet(new ValidationSupportContext(myValidationSupport), options, theSource);\n-\t\tvalidateHaveExpansionOrThrowInternalErrorException(retVal);\n-\t\treturn (ValueSet) retVal.getValueSet();\n-\t}\n-\n \t@Override\n \tpublic ValueSet expandByIdentifier(String theUri, String theFilter) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(Enumerations.FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\tValueSet retVal = doExpand(source);\n-\t\treturn retVal;\n-\n-\t\t// if (defaultValueSet != null) {\n-\t\t// source = getContext().newJsonParser().parseResource(ValueSet.class, getContext().newJsonParser().encodeResourceToString(defaultValueSet));\n-\t\t// } else {\n-\t\t// IBundleProvider ids = search(ValueSet.SP_URL, new UriParam(theUri));\n-\t\t// if (ids.size() == 0) {\n-\t\t// throw new InvalidRequestException(\"Unknown ValueSet URI: \" + theUri);\n-\t\t// }\n-\t\t// source = (ValueSet) ids.getResources(0, 1).get(0);\n-\t\t// }\n-\t\t//\n-\t\t// return expand(defaultValueSet, theFilter);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(null, theUri, theFilter);\n+\t\treturn ValueSet40_50.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n \tpublic ValueSet expandByIdentifier(String theUri, String theFilter, int theOffset, int theCount) {\n-\t\tif (isBlank(theUri)) {\n-\t\t\tthrow new InvalidRequestException(\"URI must not be blank or missing\");\n-\t\t}\n-\n-\t\tValueSet source = new ValueSet();\n-\t\tsource.setUrl(theUri);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tConceptSetFilterComponent filter = source.getCompose().addInclude().addValueSet(theUri).addFilter();\n-\t\t\tfilter.setProperty(\"display\");\n-\t\t\tfilter.setOp(Enumerations.FilterOperator.EQUAL);\n-\t\t\tfilter.setValue(theFilter);\n-\t\t} else {\n-\t\t\tsource.getCompose().addInclude().addValueSet(theUri);\n-\t\t}\n-\n-\t\treturn doExpand(source, theOffset, theCount);\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(options, theUri, theFilter);\n+\t\treturn ValueSet40_50.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n \tpublic ValueSet expand(ValueSet theSource, String theFilter) {\n-\t\tValueSet toExpand = new ValueSet();\n-\n-\t\t// for (UriType next : theSource.getCompose().getInclude()) {\n-\t\t// ConceptSetComponent include = toExpand.getCompose().addInclude();\n-\t\t// include.setSystem(next.getValue());\n-\t\t// addFilterIfPresent(theFilter, include);\n-\t\t// }\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalInput = ValueSet40_50.convertValueSet(theSource);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(null, canonicalInput, theFilter);\n+\t\treturn ValueSet40_50.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n \tpublic ValueSet expand(ValueSet theSource, String theFilter, int theOffset, int theCount) {\n-\t\tValueSet toExpand = new ValueSet();\n-\t\ttoExpand.setId(theSource.getId());\n-\t\ttoExpand.setUrl(theSource.getUrl());\n-\t\tif (theSource.getVersion() != null) {\n-\t\t\ttoExpand.setVersion(theSource.getVersion());\n-\t\t}\n-\n-\t\tfor (ConceptSetComponent next : theSource.getCompose().getInclude()) {\n-\t\t\ttoExpand.getCompose().addInclude(next);\n-\t\t\taddFilterIfPresent(theFilter, next);\n-\t\t}\n-\n-\t\tif (toExpand.getCompose().isEmpty()) {\n-\t\t\tthrow new InvalidRequestException(\"ValueSet does not have any compose.include or compose.import values, can not expand\");\n-\t\t}\n-\n-\t\ttoExpand.getCompose().getExclude().addAll(theSource.getCompose().getExclude());\n-\n-\t\tValueSet retVal = doExpand(toExpand, theOffset, theCount);\n-\n-\t\tif (isNotBlank(theFilter)) {\n-\t\t\tapplyFilter(retVal.getExpansion().getTotalElement(), retVal.getExpansion().getContains(), theFilter);\n-\t\t}\n-\n-\t\treturn retVal;\n-\t}\n-\n-\tprivate void applyFilter(IntegerType theTotalElement, List<ValueSetExpansionContainsComponent> theContains, String theFilter) {\n-\n-\t\tfor (int idx = 0; idx < theContains.size(); idx++) {\n-\t\t\tValueSetExpansionContainsComponent next = theContains.get(idx);\n-\t\t\tif (isBlank(next.getDisplay()) || !StringUtil.isStartsWithIgnoreCase(next.getDisplay(), theFilter)) {\n-\t\t\t\ttheContains.remove(idx);\n-\t\t\t\tidx--;\n-\t\t\t\tif (theTotalElement.getValue() != null) {\n-\t\t\t\t\ttheTotalElement.setValue(theTotalElement.getValue() - 1);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tapplyFilter(theTotalElement, next.getContains(), theFilter);\n-\t\t}\n-\t}\n-\n-\tprivate void addFilterIfPresent(String theFilter, ConceptSetComponent include) {\n-\t\tif (ElementUtil.isEmpty(include.getConcept())) {\n-\t\t\tif (isNotBlank(theFilter)) {\n-\t\t\t\tinclude.addFilter().setProperty(\"display\").setOp(Enumerations.FilterOperator.EQUAL).setValue(theFilter);\n-\t\t\t}\n-\t\t}\n+\t\tValueSetExpansionOptions options = ValueSetExpansionOptions.forOffsetAndCount(theOffset, theCount);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalInput = ValueSet40_50.convertValueSet(theSource);\n+\t\torg.hl7.fhir.r4.model.ValueSet canonicalOutput = myTerminologySvc.expandValueSet(options, canonicalInput, theFilter);\n+\t\treturn ValueSet40_50.convertValueSet(canonicalOutput);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NDE2Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r528994162", "bodyText": "I would suggest also adding a test for the expand with filter to the FhirResourceDaoR4SearchWithElasticSearchIT class as well to ensure that this change also works with the Elasticsearch mapping provider.", "author": "IanMMarshall", "createdAt": "2020-11-23T21:03:44Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1084,7 +1084,7 @@ private void addDisplayFilterInexact(QueryBuilder qb, BooleanJunction<?> bool, V\n \t\t\t.withSlop(2)\n \t\t\t.onField(\"myDisplay\").boostedTo(4.0f)\n \t\t\t.andField(\"myDisplayEdgeNGram\").boostedTo(2.0f)\n-\t\t\t// .andField(\"myDisplayNGram\").boostedTo(1.0f)\n+\t\t\t.andField(\"myDisplayNGram\").boostedTo(1.0f)", "originalCommit": "5a05513250c7b7f5233e4213dcd7fd359a9a87a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE1OTc4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/2175#discussion_r529159786", "bodyText": "Added 3 more test cases to FhirResourceDaoR4SearchWithElasticSearchIT", "author": "frankjtao", "createdAt": "2020-11-24T02:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NDE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "014e2ba9cbb2a607ad5ec4e97da555e5382d20e1", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\nindex 8a26c53a78..3405fab146 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java\n\n@@ -1083,8 +1091,8 @@ public abstract class BaseTermReadSvcImpl implements ITermReadSvc {\n \t\t\t.phrase()\n \t\t\t.withSlop(2)\n \t\t\t.onField(\"myDisplay\").boostedTo(4.0f)\n-\t\t\t.andField(\"myDisplayEdgeNGram\").boostedTo(2.0f)\n-\t\t\t.andField(\"myDisplayNGram\").boostedTo(1.0f)\n+\t\t\t//.andField(\"myDisplayEdgeNGram\").boostedTo(2.0f)\n+\t\t\t.andField(\"myDisplayWordEdgeNGram\").boostedTo(1.0f)\n \t\t\t// .andField(\"myDisplayPhonetic\").boostedTo(0.5f)\n \t\t\t.sentence(nextFilter.getValue().toLowerCase()).createQuery();\n \t\tbool.must(textQuery);\n"}}, {"oid": "3d9e0aeac18b4053b27fdc418cc89793e6da194d", "url": "https://github.com/hapifhir/hapi-fhir/commit/3d9e0aeac18b4053b27fdc418cc89793e6da194d", "message": "Added more test cases", "committedDate": "2020-11-24T02:32:46Z", "type": "commit"}, {"oid": "a511543e77c99819d79a1a740f3c54f0fe93614a", "url": "https://github.com/hapifhir/hapi-fhir/commit/a511543e77c99819d79a1a740f3c54f0fe93614a", "message": "Merge branch 'master' into ft-fix-expend-filter-contains-issue\n\n# Conflicts:\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoValueSetDstu3.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoValueSetR4.java\n#\thapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/r5/FhirResourceDaoValueSetR5.java\n#\thapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ValueSetTest.java", "committedDate": "2020-11-26T23:47:10Z", "type": "commit"}, {"oid": "014e2ba9cbb2a607ad5ec4e97da555e5382d20e1", "url": "https://github.com/hapifhir/hapi-fhir/commit/014e2ba9cbb2a607ad5ec4e97da555e5382d20e1", "message": "Rework on the expand issue replaced the EdgeAnalyzer", "committedDate": "2020-11-27T01:37:51Z", "type": "commit"}, {"oid": "08a59413c6fb7d902e0005ec5b4ecbd8743d02ad", "url": "https://github.com/hapifhir/hapi-fhir/commit/08a59413c6fb7d902e0005ec5b4ecbd8743d02ad", "message": "Remove unused import", "committedDate": "2020-11-27T01:58:18Z", "type": "commit"}, {"oid": "be88a256d0521fc8242bb4c16c44edb0b2876c93", "url": "https://github.com/hapifhir/hapi-fhir/commit/be88a256d0521fc8242bb4c16c44edb0b2876c93", "message": "Changed name for new tokenFilter to make it unique.", "committedDate": "2020-11-27T16:32:08Z", "type": "commit"}, {"oid": "bbba4428eef860ad6e196eff5f59e69d1813f568", "url": "https://github.com/hapifhir/hapi-fhir/commit/bbba4428eef860ad6e196eff5f59e69d1813f568", "message": "Changed name for new tokenFilter to make it unique.", "committedDate": "2020-11-27T16:38:24Z", "type": "commit"}]}