{"pr_number": 1821, "pr_title": "Multitenancy Ticket 2 -  #1813", "pr_createdAt": "2020-04-29T13:51:13Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1821", "timeline": [{"oid": "b74cd05e03a79e9bf215719e5fa1aaba3ba34cc8", "url": "https://github.com/hapifhir/hapi-fhir/commit/b74cd05e03a79e9bf215719e5fa1aaba3ba34cc8", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-04-23T13:14:03Z", "type": "commit"}, {"oid": "92efd1ea92a18944bc0efa9c774258da8a3c465c", "url": "https://github.com/hapifhir/hapi-fhir/commit/92efd1ea92a18944bc0efa9c774258da8a3c465c", "message": "Work on multitenancy", "committedDate": "2020-04-23T13:52:27Z", "type": "commit"}, {"oid": "c34b0d2a81aa33541c8ebdfcfc602e559ad0e3c7", "url": "https://github.com/hapifhir/hapi-fhir/commit/c34b0d2a81aa33541c8ebdfcfc602e559ad0e3c7", "message": "Second ticket started", "committedDate": "2020-04-23T22:02:40Z", "type": "commit"}, {"oid": "e92184bf74c7184c15fc48fe5dc4f8888d30fbb1", "url": "https://github.com/hapifhir/hapi-fhir/commit/e92184bf74c7184c15fc48fe5dc4f8888d30fbb1", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-04-24T15:47:45Z", "type": "commit"}, {"oid": "8d980a813fb1f309aee59e35ea2d82dad20eb3b7", "url": "https://github.com/hapifhir/hapi-fhir/commit/8d980a813fb1f309aee59e35ea2d82dad20eb3b7", "message": "More multitenancy work", "committedDate": "2020-04-25T23:51:18Z", "type": "commit"}, {"oid": "59ec0eaf784a5eb8095dc0aafeb4ce872e8ef0af", "url": "https://github.com/hapifhir/hapi-fhir/commit/59ec0eaf784a5eb8095dc0aafeb4ce872e8ef0af", "message": "Work on tenancy security", "committedDate": "2020-04-26T17:55:08Z", "type": "commit"}, {"oid": "1f80a9af1c407cf18d3cdea2334eedeaf933c2b4", "url": "https://github.com/hapifhir/hapi-fhir/commit/1f80a9af1c407cf18d3cdea2334eedeaf933c2b4", "message": "Work on multitenancy", "committedDate": "2020-04-29T13:02:29Z", "type": "commit"}, {"oid": "7d83a04cfb0ad4e1b3da39820abc6fc7d445bc71", "url": "https://github.com/hapifhir/hapi-fhir/commit/7d83a04cfb0ad4e1b3da39820abc6fc7d445bc71", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-04-29T13:25:56Z", "type": "commit"}, {"oid": "ee5fa2805b8880fd77be6b770be4fb091714f82b", "url": "https://github.com/hapifhir/hapi-fhir/commit/ee5fa2805b8880fd77be6b770be4fb091714f82b", "message": "Test fixes", "committedDate": "2020-04-29T13:48:26Z", "type": "commit"}, {"oid": "26b4d9af5a27be4b4d226f01348445eff2c15f90", "url": "https://github.com/hapifhir/hapi-fhir/commit/26b4d9af5a27be4b4d226f01348445eff2c15f90", "message": "Add docs", "committedDate": "2020-04-29T13:50:14Z", "type": "commit"}, {"oid": "bd03802837983335bb55c0476307ce76c949d02f", "url": "https://github.com/hapifhir/hapi-fhir/commit/bd03802837983335bb55c0476307ce76c949d02f", "message": "cs tweak", "committedDate": "2020-04-29T13:53:04Z", "type": "commit"}, {"oid": "1ea93c0d2db5f06d51503ad2a7b057365df3a9fb", "url": "https://github.com/hapifhir/hapi-fhir/commit/1ea93c0d2db5f06d51503ad2a7b057365df3a9fb", "message": "Multitenancy fixes", "committedDate": "2020-04-29T14:19:37Z", "type": "commit"}, {"oid": "d54be2669c35b18e18739ef80ebd8275abd42cb4", "url": "https://github.com/hapifhir/hapi-fhir/commit/d54be2669c35b18e18739ef80ebd8275abd42cb4", "message": "Add debug log", "committedDate": "2020-04-29T14:42:08Z", "type": "commit"}, {"oid": "72d6e75a40976e1584ceeef1d1fe07afa49d0928", "url": "https://github.com/hapifhir/hapi-fhir/commit/72d6e75a40976e1584ceeef1d1fe07afa49d0928", "message": "Fix build", "committedDate": "2020-04-29T16:50:18Z", "type": "commit"}, {"oid": "0a329440fa804c010dfef6c21e7f05deccc48fa6", "url": "https://github.com/hapifhir/hapi-fhir/commit/0a329440fa804c010dfef6c21e7f05deccc48fa6", "message": "Merge branch 'ja_20200423_multitenancy_2' of github.com:jamesagnew/hapi-fhir into ja_20200423_multitenancy_2", "committedDate": "2020-04-29T16:50:29Z", "type": "commit"}, {"oid": "85ed2b3fc10a02f543a87c36137ce143f1109b19", "url": "https://github.com/hapifhir/hapi-fhir/commit/85ed2b3fc10a02f543a87c36137ce143f1109b19", "message": "Add headers", "committedDate": "2020-04-29T16:50:47Z", "type": "commit"}, {"oid": "69bb7d1ab9c1b8da31a2c44ae884ddf725746758", "url": "https://github.com/hapifhir/hapi-fhir/commit/69bb7d1ab9c1b8da31a2c44ae884ddf725746758", "message": "Merge branch 'ja_20200423_multitenancy_2' of github.com:jamesagnew/hapi-fhir into ja_20200423_multitenancy_2", "committedDate": "2020-04-29T16:50:52Z", "type": "commit"}, {"oid": "a82518eb48c09e505d15473393c69e581f665879", "url": "https://github.com/hapifhir/hapi-fhir/commit/a82518eb48c09e505d15473393c69e581f665879", "message": "Add partition selection interceptor hook", "committedDate": "2020-04-29T22:27:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418067195", "bodyText": "I think this is a kind of request, not a kind of partition id, so I'd go with \"PartitionIdRequest\".", "author": "fil512", "createdAt": "2020-04-30T14:47:51Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NTY2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418575666", "bodyText": "Hmmm this is fun. TBH I kind of feel the opposite.. It's a \"request partition ID\", meaning the partition ID for a request. PartitionIdRequest sounds to me more like it's a request FOR a partition ID, which is the opposite of what it is really..... I don't know, I don't know...", "author": "jamesagnew", "createdAt": "2020-05-01T14:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0NzIxNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419647215", "bodyText": "oh funny when I initially suggested adding \"Request\" to the name, I wasn't thinking of it in in the http request sense, but more like \"I'm asking for a partition id\".  Because the answer could come back, \"no such partition exists\" which would be a failed outcome on that request.  But I see it's confusing because Request already means something in the framework.", "author": "fil512", "createdAt": "2020-05-04T18:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\nindex 47ce2ad599..168892df93 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n\n@@ -24,8 +24,6 @@ import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.time.LocalDate;\n \n-import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n-\n /**\n  * @since 5.0.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NDQyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418074429", "bodyText": "nitpick: I used to write it this way, but I think it's not obvious what it's doing.  Even though it's more code, I think it's clearer to write:\nif (myPartitionId == null) {\n  return \"null\"\n}\nreturn myPartitionId.toString();", "author": "fil512", "createdAt": "2020-04-30T14:57:38Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -64,7 +86,17 @@ public String toString() {\n \t * Returns the partition ID (numeric) as a string, or the string \"null\"\n \t */\n \tpublic String getPartitionIdStringOrNullString() {\n-\t\treturn defaultIfNull(myPartitionId, \"null\").toString();\n+\t\treturn defaultIfNull(getPartitionId(), \"null\").toString();", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjIwMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576200", "bodyText": "Fair enough, have changed it", "author": "jamesagnew", "createdAt": "2020-05-01T14:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NDQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\nindex 47ce2ad599..168892df93 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n\n@@ -86,7 +84,10 @@ public class RequestPartitionId {\n \t * Returns the partition ID (numeric) as a string, or the string \"null\"\n \t */\n \tpublic String getPartitionIdStringOrNullString() {\n-\t\treturn defaultIfNull(getPartitionId(), \"null\").toString();\n+\t\tif (myPartitionId == null) {\n+\t\t\treturn \"null\";\n+\t\t}\n+\t\treturn myPartitionId.toString();\n \t}\n \n \t@Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQ3Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418076476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.\n          \n          \n            \n            \t * key will be of type {@link ca.uhn.fhir.interceptor.model.RequestPartitionId}.", "author": "fil512", "createdAt": "2020-04-30T15:00:14Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java", "diffHunk": "@@ -264,6 +264,13 @@\n \tpublic static final String PARAM_FHIRPATH = \"_fhirpath\";\n \tpublic static final String PARAM_TYPE = \"_type\";\n \n+\t/**\n+\t * {@link org.hl7.fhir.instance.model.api.IBaseResource#getUserData(String) User metadata key} used\n+\t * to store the partition ID (if any) associated with the given resource. Value for this\n+\t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjQxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576419", "bodyText": "I am surprised IJ didn't auto fix that when I refactored.... Weird.", "author": "jamesagnew", "createdAt": "2020-05-01T14:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d8a34c0589dbfee30521163ba0025d91a57bd6e3", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java\nindex 92b26f6eb1..b8d66cac6c 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java\n\n@@ -267,7 +267,7 @@ public class Constants {\n \t/**\n \t * {@link org.hl7.fhir.instance.model.api.IBaseResource#getUserData(String) User metadata key} used\n \t * to store the partition ID (if any) associated with the given resource. Value for this\n-\t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.\n+\t * key will be of type {@link ca.uhn.fhir.interceptor.model.RequestPartitionId}.\n \t */\n \tpublic static final String RESOURCE_PARTITION_ID = Constants.class.getName() + \"_RESOURCE_PARTITION_ID\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3ODM5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418078398", "bodyText": "rather than static, why not make it an instance method?  (default method since it's an interface)", "author": "fil512", "createdAt": "2020-04-30T15:03:01Z", "path": "hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java", "diffHunk": "@@ -33,5 +33,9 @@\n \tboolean hasValue();\n \t\n \tIPrimitiveType<T> setValue(T theValue) throws IllegalArgumentException;\n-\t\n+\n+\tstatic <T> T toValueOrNull(IPrimitiveType<T> thePrimitiveType) {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjcxOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576719", "bodyText": "I thought about that, but the whole point is that it can accept null.. If it was an instance method it could not do that", "author": "jamesagnew", "createdAt": "2020-05-01T14:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3ODM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java b/hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java\nindex d610af51d4..8a782d961e 100644\n--- a/hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java\n+++ b/hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java\n\n@@ -22,19 +22,25 @@ package org.hl7.fhir.instance.model.api;\n  */\n \n \n-public interface IPrimitiveType<T> extends IBaseDatatype {\n+import javax.annotation.Nullable;\n \n-\tvoid setValueAsString(String theValue) throws IllegalArgumentException;\n+public interface IPrimitiveType<T> extends IBaseDatatype {\n \n \tString getValueAsString();\n \n+\tvoid setValueAsString(String theValue) throws IllegalArgumentException;\n+\n \tT getValue();\n \n-\tboolean hasValue();\n-\t\n \tIPrimitiveType<T> setValue(T theValue) throws IllegalArgumentException;\n \n-\tstatic <T> T toValueOrNull(IPrimitiveType<T> thePrimitiveType) {\n+\tboolean hasValue();\n+\n+\t/**\n+\t * If the supplied argument is non-null, returns the results of {@link #getValue()}. If the supplied argument is null, returns null.\n+\t */\n+\t@Nullable\n+\tstatic <T> T toValueOrNull(@Nullable IPrimitiveType<T> thePrimitiveType) {\n \t\treturn thePrimitiveType != null ? thePrimitiveType.getValue() : null;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418082789", "bodyText": "This looks risky.  What if I have a tenantId that is the same name as a legit path?  Is there some other way in the request we can track whether the tenandId has been appended?  (e.g. in a custom header)", "author": "fil512", "createdAt": "2020-04-30T15:09:09Z", "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java", "diffHunk": "@@ -81,6 +81,10 @@ public void request(IRestfulClient theClient, IHttpRequest theRequest) {\n \n \t\tValidate.isTrue(requestUri.startsWith(serverBase), \"Request URI %s does not start with server base %s\", requestUri, serverBase);\n \n+\t\tif (requestUri.startsWith(serverBase + \"/\" + tenantId)) {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NzA0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418577047", "bodyText": "Hmm... Thinking on this now", "author": "jamesagnew", "createdAt": "2020-05-01T14:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjAyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418602026", "bodyText": "Ok, figured out a way to track where the URL actually came from.. If it came from the outside world as opposed to being generated, we won't tweak it", "author": "jamesagnew", "createdAt": "2020-05-01T15:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java b/hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java\nindex 2fa095f31c..90d419a552 100644\n--- a/hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java\n+++ b/hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java\n\n@@ -81,7 +82,7 @@ public class UrlTenantSelectionInterceptor {\n \n \t\tValidate.isTrue(requestUri.startsWith(serverBase), \"Request URI %s does not start with server base %s\", requestUri, serverBase);\n \n-\t\tif (requestUri.startsWith(serverBase + \"/\" + tenantId)) {\n+\t\tif (theRequest.getUrlSource() == UrlSourceEnum.EXPLICIT) {\n \t\t\treturn;\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4NTc5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418085798", "bodyText": "This SNIPPET stuff is so incredibly awesome!", "author": "fil512", "createdAt": "2020-04-30T15:13:18Z", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "diffHunk": "@@ -60,6 +61,29 @@ public void createProxy() {\n       // END SNIPPET: proxy\n    }\n \n+\n+   public void tenantId() {\n+   \t// START SNIPPET: tenantId", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTU5Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419649596", "bodyText": "Agree!", "author": "jamesagnew", "createdAt": "2020-05-04T18:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4NTc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0bea3fc2bb82d4b6f1196971bd26f55ddde2c190", "chunk": "diff --git a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\nindex 5ed2fb1eda..e8a7a512b3 100644\n--- a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\n+++ b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\n\n@@ -79,7 +79,7 @@ public class ClientExamples {\n \n \t\t// Read from tenant B\n \t\ttenantSelection.setTenantId(\"TENANT-B\");\n-\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n+\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"456\").execute();\n \t\t// END SNIPPET: tenantId\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4ODIzNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418088234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n          \n          \n            \n            \t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"456\").execute();\n          \n      \n    \n    \n  \n\nI'm worried people might get the impression you can have the same id in different partitions.", "author": "fil512", "createdAt": "2020-04-30T15:16:52Z", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "diffHunk": "@@ -60,6 +61,29 @@ public void createProxy() {\n       // END SNIPPET: proxy\n    }\n \n+\n+   public void tenantId() {\n+   \t// START SNIPPET: tenantId\n+\t\tFhirContext ctx = FhirContext.forR4();\n+\n+\t\t// Create the client\n+\t\tIGenericClient genericClient = ctx.newRestfulGenericClient(\"http://localhost:9999/fhir\");\n+\n+\t\t// Register the interceptor\n+\t\tUrlTenantSelectionInterceptor tenantSelection = new UrlTenantSelectionInterceptor();\n+\t\tgenericClient.registerInterceptor(tenantSelection);\n+\n+\t\t// Read from tenant A\n+\t\ttenantSelection.setTenantId(\"TENANT-A\");\n+\t\tPatient patientA = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n+\n+\t\t// Read from tenant B\n+\t\ttenantSelection.setTenantId(\"TENANT-B\");\n+\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bea3fc2bb82d4b6f1196971bd26f55ddde2c190", "chunk": "diff --git a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\nindex 5ed2fb1eda..e8a7a512b3 100644\n--- a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\n+++ b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\n\n@@ -79,7 +79,7 @@ public class ClientExamples {\n \n \t\t// Read from tenant B\n \t\ttenantSelection.setTenantId(\"TENANT-B\");\n-\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n+\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"456\").execute();\n \t\t// END SNIPPET: tenantId\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDQ0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418094442", "bodyText": "gurgle", "author": "fil512", "createdAt": "2020-04-30T15:25:40Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java", "diffHunk": "@@ -35,36 +35,37 @@\n \n public interface IResourceHistoryTableDao extends JpaRepository<ResourceHistoryTable, Long> {\n \n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myUpdated >= :cutoff\")\n-\tint countForAllResourceTypes(\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t\")\n-\tint countForAllResourceTypes(\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id AND t.myUpdated >= :cutoff\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type AND t.myUpdated >= :cutoff\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType\n-\t);\n+\t// FIXME: remove commented", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MDc3OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419650779", "bodyText": "oops! gone", "author": "jamesagnew", "createdAt": "2020-05-04T18:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java\nindex 21a9ea45ef..63d1779ae2 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java\n\n@@ -35,37 +30,6 @@ import java.util.Date;\n \n public interface IResourceHistoryTableDao extends JpaRepository<ResourceHistoryTable, Long> {\n \n-\t// FIXME: remove commented\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myUpdated >= :cutoff\")\n-//\tint countForAllResourceTypes(\n-//\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-//\t);\n-//\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t\")\n-//\tint countForAllResourceTypes(\n-//\t);\n-//\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id AND t.myUpdated >= :cutoff\")\n-//\tint countForResourceInstance(\n-//\t\t@Param(\"id\") Long theId,\n-//\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-//\t);\n-//\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id\")\n-//\tint countForResourceInstance(\n-//\t\t@Param(\"id\") Long theId\n-//\t);\n-//\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type AND t.myUpdated >= :cutoff\")\n-//\tint countForResourceType(\n-//\t\t@Param(\"type\") String theType,\n-//\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-//\t);\n-//\n-//\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type\")\n-//\tint countForResourceType(\n-//\t\t@Param(\"type\") String theType\n-//\t);\n \n \t@Query(\"SELECT t FROM ResourceHistoryTable t LEFT OUTER JOIN FETCH t.myProvenance WHERE t.myResourceId = :id AND t.myResourceVersion = :version\")\n \tResourceHistoryTable findForIdAndVersionAndFetchProvenance(@Param(\"id\") long theId, @Param(\"version\") long theVersion);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5OTQyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418099426", "bodyText": "Nice.  This is a really elegant way to manage this cache.", "author": "fil512", "createdAt": "2020-04-30T15:32:41Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -389,6 +385,36 @@ public void clearCache() {\n \t\t\t.build();\n \t}\n \n+\tpublic Map<Long, Optional<String>> translatePidsToForcedIds(Set<Long> thePids) {\n+\t\tMap<Long, Optional<String>> retVal = new HashMap<>(myForcedIdCache.getAllPresent(thePids));\n+\n+\t\tList<Long> remainingPids = thePids\n+\t\t\t.stream()\n+\t\t\t.filter(t -> !retVal.containsKey(t))\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\tnew QueryChunker<Long>().chunk(remainingPids, t->{\n+\t\t\tList<ForcedId> forcedIds = myForcedIdDao.findAllById(t);\n+\t\t\tfor (ForcedId forcedId : forcedIds) {\n+\t\t\t\tLong nextResourcePid = forcedId.getResourceId();\n+\t\t\t\tOptional<String> nextForcedId = Optional.of(forcedId.getForcedId());\n+\t\t\t\tretVal.put(nextResourcePid, nextForcedId);\n+\t\t\t\tmyForcedIdCache.put(nextResourcePid, nextForcedId);\n+\t\t\t}\n+\t\t});\n+\n+\t\tremainingPids = thePids\n+\t\t\t.stream()\n+\t\t\t.filter(t -> !retVal.containsKey(t))\n+\t\t\t.collect(Collectors.toList());\n+\t\tfor (Long nextResourcePid : remainingPids) {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d89a07504f2e9abf2a8da8d0f0bb6467da272bb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\nindex 06676d4fbf..674843fc95 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n\n@@ -386,6 +395,7 @@ public class IdHelperService {\n \t}\n \n \tpublic Map<Long, Optional<String>> translatePidsToForcedIds(Set<Long> thePids) {\n+\n \t\tMap<Long, Optional<String>> retVal = new HashMap<>(myForcedIdCache.getAllPresent(thePids));\n \n \t\tList<Long> remainingPids = thePids\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMDMyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418100320", "bodyText": "Nice you got rid of a meaningful null.", "author": "fil512", "createdAt": "2020-04-30T15:34:01Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {\n+\t\tsuper();\n+\t\tmyPartitionDate = null;\n+\t\tmyPartitionName = null;\n+\t\tmyPartitionId = null;\n+\t\tmyAllPartitions = true;", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MTY3Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419651673", "bodyText": "Yeah I had this nagging feeling (guess it was a code smell) that this would lead to subtle bugs eventually....", "author": "jamesagnew", "createdAt": "2020-05-04T18:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMDMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\nindex 47ce2ad599..168892df93 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n\n@@ -24,8 +24,6 @@ import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import java.time.LocalDate;\n \n-import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n-\n /**\n  * @since 5.0.0\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMTY3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418101675", "bodyText": "nitpick: Replace numbered comments with methods", "author": "fil512", "createdAt": "2020-04-30T15:36:04Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -924,6 +918,17 @@ public IBaseResource toResource(BaseHasResource theEntity, boolean theForHistory\n \n \t\t}\n \n+\t\t// 7. Add partition information", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzYzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419653633", "bodyText": "Agree in general, but don't want to refaxctor this existing method right now", "author": "jamesagnew", "createdAt": "2020-05-04T18:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMTY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "10522363f16ef8404daa42bdff9ff77e89d8b2f0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\nindex 7194d729e4..4892135426 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java\n\n@@ -918,17 +924,6 @@ public abstract class BaseHapiFhirDao<T extends IBaseResource> extends BaseStora\n \n \t\t}\n \n-\t\t// 7. Add partition information\n-\t\tif (myPartitionSettings.isPartitioningEnabled()) {\n-\t\t\tRequestPartitionId partitionId = theEntity.getPartitionId();\n-\t\t\tif (partitionId != null && partitionId.getPartitionId() != null) {\n-\t\t\t\tPartitionEntity persistedPartition = myPartitionLookupSvc.getPartitionById(partitionId.getPartitionId());\n-\t\t\t\tretVal.setUserData(Constants.RESOURCE_PARTITION_ID, persistedPartition.toRequestPartitionId());\n-\t\t\t} else {\n-\t\t\t\tretVal.setUserData(Constants.RESOURCE_PARTITION_ID, null);\n-\t\t\t}\n-\t\t}\n-\n \t\treturn retVal;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418105890", "bodyText": "How do you decide if a class is a Service or a Svc?", "author": "fil512", "createdAt": "2020-04-30T15:42:07Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -216,7 +216,7 @@ public DaoMethodOutcome create(T theResource, String theIfNoneExist, boolean the\n \t\t\ttheResource.setUserData(JpaConstants.RESOURCE_ID_SERVER_ASSIGNED, Boolean.TRUE);\n \t\t}\n \n-\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource);\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource, getResourceName());", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjIxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418106210", "bodyText": "Or just a Helper?\nI've been using Helper for instance helpers and Util for static helpers.", "author": "fil512", "createdAt": "2020-04-30T15:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MjAxMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419652010", "bodyText": "GUess it should be Svc based on today's conversation", "author": "jamesagnew", "createdAt": "2020-05-04T18:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "10522363f16ef8404daa42bdff9ff77e89d8b2f0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\nindex ca9f558a93..45d07ea8fa 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n\n@@ -216,7 +216,7 @@ public abstract class BaseHapiFhirResourceDao<T extends IBaseResource> extends B\n \t\t\ttheResource.setUserData(JpaConstants.RESOURCE_ID_SERVER_ASSIGNED, Boolean.TRUE);\n \t\t}\n \n-\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource, getResourceName());\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource);\n \t\treturn doCreate(theResource, theIfNoneExist, thePerformIndexing, theUpdateTimestamp, theRequestDetails, requestPartitionId);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDE0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418110146", "bodyText": "I know it's probably too late for this comment, but seeing this code here makes me wonder: are there pieces of the partition filter that could be implemented as a consent interceptor?  (clearly when it's a predicate added to a query this doesn't make sense--but there are parts of the code like this where it's not a part of the query and might be more clearly expressed as a consent interceptor...?)", "author": "fil512", "createdAt": "2020-04-30T15:48:19Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -1005,19 +1000,19 @@ public BaseHasResource readEntity(IIdType theId, RequestDetails theRequest) {\n \tpublic BaseHasResource readEntity(IIdType theId, boolean theCheckForForcedId, RequestDetails theRequest) {\n \t\tvalidateResourceTypeAndThrowInvalidRequestException(theId);\n \n-\t\t@Nullable RequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n \t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(requestPartitionId, getResourceName(), theId.getIdPart());\n \t\tBaseHasResource entity = myEntityManager.find(ResourceTable.class, pid.getIdAsLong());\n \n \t\t// Verify that the resource is for the correct partition\n-\t\tif (requestPartitionId != null) {\n+\t\tif (!requestPartitionId.isAllPartitions()) {\n \t\t\tif (requestPartitionId.getPartitionId() == null) {\n \t\t\t\tif (entity.getPartitionId() != null) {\n \t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n \t\t\t} else if (entity.getPartitionId() != null) {\n-\t\t\t\tif (!entity.getPartitionId().getPartitionId().equals(requestPartitionId.getPartitionId())) {\n+\t\t\t\tif (!requestPartitionId.getPartitionId().equals(entity.getPartitionId().getPartitionId())) {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzQwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419653404", "bodyText": "The problem with the consent interceptor is that it is applied to resources -after- the SQL query has taken place, so it's really intended for stuations where you expect the majority of resources to not be filtered out...That is an issue with the way consent interceptor works right now, but I think it makes it not a great place for this logic", "author": "jamesagnew", "createdAt": "2020-05-04T18:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4d89a07504f2e9abf2a8da8d0f0bb6467da272bb", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\nindex ca9f558a93..b75fa9d9d0 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n\n@@ -1007,11 +1007,11 @@ public abstract class BaseHapiFhirResourceDao<T extends IBaseResource> extends B\n \t\t// Verify that the resource is for the correct partition\n \t\tif (!requestPartitionId.isAllPartitions()) {\n \t\t\tif (requestPartitionId.getPartitionId() == null) {\n-\t\t\t\tif (entity.getPartitionId() != null) {\n+\t\t\t\tif (entity.getPartitionId().getPartitionId() != null) {\n \t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n-\t\t\t} else if (entity.getPartitionId() != null) {\n+\t\t\t} else if (entity.getPartitionId().getPartitionId() != null) {\n \t\t\t\tif (!requestPartitionId.getPartitionId().equals(entity.getPartitionId().getPartitionId())) {\n \t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418113346", "bodyText": "Never used.  If this is called to build the cache, maybe don't store the results?", "author": "fil512", "createdAt": "2020-04-30T15:52:46Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.jpa.dao.SearchBuilder.toPredicateArray;\n+\n+/**\n+ * The HistoryBuilder is responsible for building history queries\n+ */\n+public class HistoryBuilder {\n+\n+\tprivate final String myResourceType;\n+\tprivate final Long myResourceId;\n+\tprivate final Date myRangeStartInclusive;\n+\tprivate final Date myRangeEndInclusive;\n+\t@Autowired\n+\tprotected IInterceptorBroadcaster myInterceptorBroadcaster;\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\t@Autowired\n+\tprivate PartitionSettings myPartitionSettings;\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic HistoryBuilder(@Nullable String theResourceType, @Nullable Long theResourceId, @Nullable Date theRangeStartInclusive, @Nullable Date theRangeEndInclusive) {\n+\t\tmyResourceType = theResourceType;\n+\t\tmyResourceId = theResourceId;\n+\t\tmyRangeStartInclusive = theRangeStartInclusive;\n+\t\tmyRangeEndInclusive = theRangeEndInclusive;\n+\t}\n+\n+\tpublic Long fetchCount(RequestPartitionId thePartitionId) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\t\tcriteriaQuery.select(cb.count(from));\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tTypedQuery<Long> query = myEntityManager.createQuery(criteriaQuery);\n+\t\treturn query.getSingleResult();\n+\t}\n+\n+\t@SuppressWarnings(\"OptionalIsPresent\")\n+\tpublic List<ResourceHistoryTable> fetchEntities(RequestPartitionId thePartitionId, int theFromIndex, int theToIndex) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<ResourceHistoryTable> criteriaQuery = cb.createQuery(ResourceHistoryTable.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tfrom.fetch(\"myProvenance\", JoinType.LEFT);\n+\n+\t\tcriteriaQuery.orderBy(cb.desc(from.get(\"myUpdated\")));\n+\n+\t\tTypedQuery<ResourceHistoryTable> query = myEntityManager.createQuery(criteriaQuery);\n+\n+\t\tquery.setFirstResult(theFromIndex);\n+\t\tquery.setMaxResults(theToIndex - theFromIndex);\n+\n+\t\tList<ResourceHistoryTable> tables = query.getResultList();\n+\t\tif (tables.size() > 0) {\n+\t\t\tImmutableListMultimap<Long, ResourceHistoryTable> resourceIdToHistoryEntries = Multimaps.index(tables, ResourceHistoryTable::getResourceId);\n+\n+\t\t\tMap<Long, Optional<String>> pidToForcedId = myIdHelperService.translatePidsToForcedIds(resourceIdToHistoryEntries.keySet());", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1NTI0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419655244", "bodyText": "@fil512 I'm not sure I follow this comment", "author": "jamesagnew", "createdAt": "2020-05-04T18:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1NjY3OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419656678", "bodyText": "IntelliJ twas telling me that the pidToForcedId variable is never used.  So I'm suggesting either delete the line, or if the call to translatePidsToForcedIds() is important because it's building a cache, then call it but don't store the return value.", "author": "fil512", "createdAt": "2020-05-04T18:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5ODEyNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419698127", "bodyText": "Ah ok.. refactored.", "author": "jamesagnew", "createdAt": "2020-05-04T20:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java\nindex faf9c73003..064a2330a7 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java\n\n@@ -30,7 +30,6 @@ import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n import com.google.common.collect.ImmutableListMultimap;\n import com.google.common.collect.Multimaps;\n-import org.hl7.fhir.instance.model.api.IIdType;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import javax.annotation.Nullable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjYzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418116635", "bodyText": "Good call.  I fell victim to \"Gosh this is so cool\" syndrome here.", "author": "fil512", "createdAt": "2020-04-30T15:57:25Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "diffHunk": "@@ -21,12 +21,20 @@\n  */\n \n import ca.uhn.fhir.jpa.api.dao.IDao;\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Lookup;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.stereotype.Service;\n \n-@Service\n-public abstract class SearchBuilderFactory {\n-\t@Lookup", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\nindex 72007f0afa..f1d93c91d1 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\n\n@@ -24,9 +24,7 @@ import ca.uhn.fhir.jpa.api.dao.IDao;\n import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Lookup;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.stereotype.Service;\n \n public class SearchBuilderFactory {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzU0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418117544", "bodyText": "Need to optimize imports across this whole MR.  (lmk if you haven't seen this before.)", "author": "fil512", "createdAt": "2020-04-30T15:58:52Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "diffHunk": "@@ -21,12 +21,20 @@\n  */\n \n import ca.uhn.fhir.jpa.api.dao.IDao;\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Lookup;", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMzU5Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418613593", "bodyText": "Will do", "author": "jamesagnew", "createdAt": "2020-05-01T16:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\nindex 72007f0afa..f1d93c91d1 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java\n\n@@ -24,9 +24,7 @@ import ca.uhn.fhir.jpa.api.dao.IDao;\n import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Lookup;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.stereotype.Service;\n \n public class SearchBuilderFactory {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMjg1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418122854", "bodyText": "Love it!!", "author": "fil512", "createdAt": "2020-04-30T16:06:51Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * As always, Oracle can't handle things that other databases don't mind.. In this\n+ * case it doesn't like more than ~1000 IDs in a single load, so we break this up\n+ * if it's lots of IDs. I suppose maybe we should be doing this as a join anyhow\n+ * but this should work too. Sigh.\n+ */\n+public class QueryChunker<T> {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxNzYyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418617620", "bodyText": ":)", "author": "jamesagnew", "createdAt": "2020-05-01T16:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMjg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "10522363f16ef8404daa42bdff9ff77e89d8b2f0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java\ndeleted file mode 100644\nindex c549c9fd48..0000000000\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-package ca.uhn.fhir.jpa.util;\n-\n-/*-\n- * #%L\n- * HAPI FHIR JPA Server\n- * %%\n- * Copyright (C) 2014 - 2020 University Health Network\n- * %%\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * #L%\n- */\n-\n-import ca.uhn.fhir.jpa.dao.SearchBuilder;\n-\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-/**\n- * As always, Oracle can't handle things that other databases don't mind.. In this\n- * case it doesn't like more than ~1000 IDs in a single load, so we break this up\n- * if it's lots of IDs. I suppose maybe we should be doing this as a join anyhow\n- * but this should work too. Sigh.\n- */\n-public class QueryChunker<T> {\n-\n-\tpublic void chunk(List<T> theInput, Consumer<List<T>> theBatchConsumer) {\n-\t\tfor (int i = 0; i < theInput.size(); i += SearchBuilder.MAXIMUM_PAGE_SIZE) {\n-\t\t\tint to = i + SearchBuilder.MAXIMUM_PAGE_SIZE;\n-\t\t\tto = Math.min(to, theInput.size());\n-\t\t\tList<T> batch = theInput.subList(i, to);\n-\t\t\ttheBatchConsumer.accept(batch);\n-\t\t}\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNDE5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418124194", "bodyText": "this assert doesn't cover the case where there are 4..", "author": "fil512", "createdAt": "2020-04-30T16:08:51Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java", "diffHunk": "@@ -246,6 +247,117 @@ public void testReferenceToForcedId_DeletesDisabled() {\n \n \t}\n \n+\t@Test\n+\tpublic void testHistory_Server() {\n+\t\trunInTransaction(() -> {\n+\t\t\tPatient p = new Patient();\n+\t\t\tp.setId(\"A\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"1\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.setId(\"B\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.create(p).getId().toUnqualified();\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\trunInTransaction(() -> {\n+\t\t\tIBundleProvider history = mySystemDao.history(null, null, null);\n+\t\t\tassertEquals(3, history.getResources(0, 3).size());", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxNzk2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418617967", "bodyText": "Good call, fixed", "author": "jamesagnew", "createdAt": "2020-05-01T16:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNDE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java\nindex 86a80de7b5..fb4feb5f70 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java\n\n@@ -268,7 +268,7 @@ public class FhirResourceDaoR4QueryCountTest extends BaseJpaR4Test {\n \t\tmyCaptureQueriesListener.clear();\n \t\trunInTransaction(() -> {\n \t\t\tIBundleProvider history = mySystemDao.history(null, null, null);\n-\t\t\tassertEquals(3, history.getResources(0, 3).size());\n+\t\t\tassertEquals(3, history.getResources(0, 99).size());\n \t\t});\n \t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n \t\t// Perform count, Search history table, resolve forced IDs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMjAwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418132002", "bodyText": "This method name is confusing but I'm struggling to think of a better name.  sizeOrThrowException()?", "author": "fil512", "createdAt": "2020-04-30T16:21:01Z", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java", "diffHunk": "@@ -163,4 +164,12 @@ default boolean isEmpty() {\n \t\treturn getResources(0, 1).isEmpty();\n \t}\n \n+\t/**\n+\t * Returns the value of {@link #size()} and throws a {@link NullPointerException} of it is null\n+\t */\n+\tdefault int sizeNotNull() {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODQxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418618414", "bodyText": "I went with sizeOrThrowNpe()", "author": "jamesagnew", "createdAt": "2020-05-01T16:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMjAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "chunk": "diff --git a/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java b/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java\nindex 073badbbe1..3f87a81743 100644\n--- a/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java\n+++ b/hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java\n\n@@ -167,7 +167,7 @@ public interface IBundleProvider {\n \t/**\n \t * Returns the value of {@link #size()} and throws a {@link NullPointerException} of it is null\n \t */\n-\tdefault int sizeNotNull() {\n+\tdefault int sizeOrThrowNpe() {\n \t\tInteger retVal = size();\n \t\tValidate.notNull(retVal, \"size() returned null\");\n \t\treturn retVal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzY5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418137698", "bodyText": "This is super cool.  I've added it to our next meeting agenda.", "author": "fil512", "createdAt": "2020-04-30T16:29:54Z", "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package ca.uhn.fhir.test.utilities;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Test Utilities\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseReference;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.ICompositeType;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * This is an experiment to see if we can make test data creation for storage unit tests a bit more readable.\n+ */\n+@SuppressWarnings({\"unchecked\", \"ConstantConditions\"})\n+public interface ITestDataBuilder {", "originalCommit": "a82518eb48c09e505d15473393c69e581f665879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODA0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418618047", "bodyText": "Perfect", "author": "jamesagnew", "createdAt": "2020-05-01T16:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "10522363f16ef8404daa42bdff9ff77e89d8b2f0", "chunk": "diff --git a/hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java b/hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java\ndeleted file mode 100644\nindex e5788a08e2..0000000000\n--- a/hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-package ca.uhn.fhir.test.utilities;\n-\n-/*-\n- * #%L\n- * HAPI FHIR Test Utilities\n- * %%\n- * Copyright (C) 2014 - 2020 University Health Network\n- * %%\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * #L%\n- */\n-\n-import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n-import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.context.RuntimeResourceDefinition;\n-import org.hl7.fhir.instance.model.api.IBaseReference;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.ICompositeType;\n-import org.hl7.fhir.instance.model.api.IIdType;\n-import org.hl7.fhir.instance.model.api.IPrimitiveType;\n-\n-import javax.annotation.Nullable;\n-import java.util.function.Consumer;\n-\n-import static org.apache.commons.lang3.StringUtils.isNotBlank;\n-import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.Assert.assertThat;\n-\n-/**\n- * This is an experiment to see if we can make test data creation for storage unit tests a bit more readable.\n- */\n-@SuppressWarnings({\"unchecked\", \"ConstantConditions\"})\n-public interface ITestDataBuilder {\n-\n-\t/**\n-\t * Set Patient.active = true\n-\t */\n-\tdefault Consumer<IBaseResource> withActiveTrue() {\n-\t\treturn t -> __setPrimitiveChild(getFhirContext(), t, \"active\", \"boolean\", \"true\");\n-\t}\n-\n-\t/**\n-\t * Set Patient.active = false\n-\t */\n-\tdefault Consumer<IBaseResource> withActiveFalse() {\n-\t\treturn t -> __setPrimitiveChild(getFhirContext(), t, \"active\", \"boolean\", \"false\");\n-\t}\n-\n-\tdefault Consumer<IBaseResource> withFamily(String theFamily) {\n-\t\treturn t -> {\n-\t\t\tIPrimitiveType<?> family = (IPrimitiveType<?>) getFhirContext().getElementDefinition(\"string\").newInstance();\n-\t\t\tfamily.setValueAsString(theFamily);\n-\n-\t\t\tBaseRuntimeElementCompositeDefinition<?> humanNameDef = (BaseRuntimeElementCompositeDefinition<?>) getFhirContext().getElementDefinition(\"HumanName\");\n-\t\t\tICompositeType humanName = (ICompositeType) humanNameDef.newInstance();\n-\t\t\thumanNameDef.getChildByName(\"family\").getMutator().addValue(humanName, family);\n-\n-\t\t\tRuntimeResourceDefinition resourceDef = getFhirContext().getResourceDefinition(t.getClass());\n-\t\t\tresourceDef.getChildByName(\"name\").getMutator().addValue(t, humanName);\n-\t\t};\n-\t}\n-\n-\t/**\n-\t * Set Patient.birthdate\n-\t */\n-\tdefault Consumer<IBaseResource> withBirthdate(String theBirthdate) {\n-\t\treturn t -> __setPrimitiveChild(getFhirContext(), t, \"birthDate\", \"dateTime\", theBirthdate);\n-\t}\n-\n-\t/**\n-\t * Set Observation.status\n-\t */\n-\tdefault Consumer<IBaseResource> withStatus(String theStatus) {\n-\t\treturn t -> __setPrimitiveChild(getFhirContext(), t, \"status\", \"code\", theStatus);\n-\t}\n-\n-\t/**\n-\t * Set [Resource].identifier.system and [Resource].identifier.value\n-\t */\n-\tdefault Consumer<IBaseResource> withIdentifier(String theSystem, String theValue) {\n-\t\treturn t -> {\n-\t\t\tIPrimitiveType<?> system = (IPrimitiveType<?>) getFhirContext().getElementDefinition(\"uri\").newInstance();\n-\t\t\tsystem.setValueAsString(theSystem);\n-\n-\t\t\tIPrimitiveType<?> value = (IPrimitiveType<?>) getFhirContext().getElementDefinition(\"string\").newInstance();\n-\t\t\tvalue.setValueAsString(theValue);\n-\n-\t\t\tBaseRuntimeElementCompositeDefinition<?> identifierDef = (BaseRuntimeElementCompositeDefinition<?>) getFhirContext().getElementDefinition(\"Identifier\");\n-\t\t\tICompositeType identifier = (ICompositeType) identifierDef.newInstance();\n-\t\t\tidentifierDef.getChildByName(\"system\").getMutator().addValue(identifier, system);\n-\t\t\tidentifierDef.getChildByName(\"value\").getMutator().addValue(identifier, value);\n-\n-\t\t\tRuntimeResourceDefinition resourceDef = getFhirContext().getResourceDefinition(t.getClass());\n-\t\t\tresourceDef.getChildByName(\"identifier\").getMutator().addValue(t, identifier);\n-\t\t};\n-\t}\n-\n-\tdefault <T extends IBaseResource> Consumer<T> withId(String theId) {\n-\t\treturn t -> {\n-\t\t\tassertThat(theId, matchesPattern(\"[a-zA-Z0-9]+\"));\n-\t\t\tt.setId(theId);\n-\t\t};\n-\t}\n-\n-\tdefault Consumer<IBaseResource> withTag(String theSystem, String theCode) {\n-\t\treturn t -> t.getMeta().addTag().setSystem(theSystem).setCode(theCode).setDisplay(theCode);\n-\t}\n-\n-\tdefault IIdType createObservation(Consumer<IBaseResource>... theModifiers) {\n-\t\treturn createResource(\"Observation\", theModifiers);\n-\t}\n-\n-\tdefault IIdType createPatient(Consumer<IBaseResource>... theModifiers) {\n-\t\treturn createResource(\"Patient\", theModifiers);\n-\t}\n-\n-\tdefault IIdType createResource(String theResourceType, Consumer<IBaseResource>[] theModifiers) {\n-\t\tIBaseResource resource = getFhirContext().getResourceDefinition(theResourceType).newInstance();\n-\t\tfor (Consumer<IBaseResource> next : theModifiers) {\n-\t\t\tnext.accept(resource);\n-\t\t}\n-\n-\t\tif (isNotBlank(resource.getIdElement().getValue())) {\n-\t\t\treturn doUpdateResource(resource);\n-\t\t} else {\n-\t\t\treturn doCreateResource(resource);\n-\t\t}\n-\t}\n-\n-\n-\tdefault Consumer<IBaseResource> withSubject(@Nullable IIdType theSubject) {\n-\t\treturn t -> {\n-\t\t\tif (theSubject != null) {\n-\t\t\t\tIBaseReference reference = (IBaseReference) getFhirContext().getElementDefinition(\"Reference\").newInstance();\n-\t\t\t\treference.setReference(theSubject.getValue());\n-\n-\t\t\t\tRuntimeResourceDefinition resourceDef = getFhirContext().getResourceDefinition(t.getClass());\n-\t\t\t\tresourceDef.getChildByName(\"subject\").getMutator().addValue(t, reference);\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-\n-\t/**\n-\t * Name chosen to avoid potential for conflict. This is an internal API to this interface.\n-\t */\n-\tstatic void __setPrimitiveChild(FhirContext theFhirContext, IBaseResource theTarget, String theElementName, String theElementType, String theValue) {\n-\t\tRuntimeResourceDefinition def = theFhirContext.getResourceDefinition(theTarget.getClass());\n-\t\tBaseRuntimeChildDefinition activeChild = def.getChildByName(theElementName);\n-\n-\t\tIPrimitiveType<?> booleanType = (IPrimitiveType<?>) activeChild.getChildByName(theElementName).newInstance();\n-\t\tbooleanType.setValueAsString(theValue);\n-\t\tactiveChild.getMutator().addValue(theTarget, booleanType);\n-\t}\n-\n-\t/**\n-\t * Users of this API must implement this method\n-\t */\n-\tIIdType doCreateResource(IBaseResource theResource);\n-\n-\t/**\n-\t * Users of this API must implement this method\n-\t */\n-\tIIdType doUpdateResource(IBaseResource theResource);\n-\n-\t/**\n-\t * Users of this API must implement this method\n-\t */\n-\tFhirContext getFhirContext();\n-\n-\n-}\n"}}, {"oid": "d8a34c0589dbfee30521163ba0025d91a57bd6e3", "url": "https://github.com/hapifhir/hapi-fhir/commit/d8a34c0589dbfee30521163ba0025d91a57bd6e3", "message": "Update hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-05-01T14:52:57Z", "type": "commit"}, {"oid": "d8f5a9889a059e5f13c51bdd930c6444d37fa636", "url": "https://github.com/hapifhir/hapi-fhir/commit/d8f5a9889a059e5f13c51bdd930c6444d37fa636", "message": "Account for review comments", "committedDate": "2020-05-01T16:27:11Z", "type": "commit"}, {"oid": "9ffcbb96ef4202d70f3aea6e82742cea4ed7c708", "url": "https://github.com/hapifhir/hapi-fhir/commit/9ffcbb96ef4202d70f3aea6e82742cea4ed7c708", "message": "Merge branch 'ja_20200423_multitenancy_2' of github.com:jamesagnew/hapi-fhir into ja_20200423_multitenancy_2", "committedDate": "2020-05-01T16:30:42Z", "type": "commit"}, {"oid": "b0471cc2c335f0a297758b1850821eef939df075", "url": "https://github.com/hapifhir/hapi-fhir/commit/b0471cc2c335f0a297758b1850821eef939df075", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-05-01T16:32:48Z", "type": "commit"}, {"oid": "d4634e7eea732558ef0d423ad514e3708a091e2f", "url": "https://github.com/hapifhir/hapi-fhir/commit/d4634e7eea732558ef0d423ad514e3708a091e2f", "message": "Resolve FIXMES", "committedDate": "2020-05-01T17:06:42Z", "type": "commit"}, {"oid": "a962f6454939c3fd9256b5cf2a377fb8bdd846ef", "url": "https://github.com/hapifhir/hapi-fhir/commit/a962f6454939c3fd9256b5cf2a377fb8bdd846ef", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-05-01T19:06:39Z", "type": "commit"}, {"oid": "1f7f9be98bb002aeed46ad609189eb803531e528", "url": "https://github.com/hapifhir/hapi-fhir/commit/1f7f9be98bb002aeed46ad609189eb803531e528", "message": "Work on tests", "committedDate": "2020-05-01T19:16:32Z", "type": "commit"}, {"oid": "4d89a07504f2e9abf2a8da8d0f0bb6467da272bb", "url": "https://github.com/hapifhir/hapi-fhir/commit/4d89a07504f2e9abf2a8da8d0f0bb6467da272bb", "message": "Test fixes", "committedDate": "2020-05-02T17:44:39Z", "type": "commit"}, {"oid": "8767d0e9a421ebf9c3505d5cd3c3b883bf589fef", "url": "https://github.com/hapifhir/hapi-fhir/commit/8767d0e9a421ebf9c3505d5cd3c3b883bf589fef", "message": "A bit more cleanup", "committedDate": "2020-05-02T17:46:38Z", "type": "commit"}, {"oid": "c37951320f6f937466958be26510b5703d3ca00b", "url": "https://github.com/hapifhir/hapi-fhir/commit/c37951320f6f937466958be26510b5703d3ca00b", "message": "Work on multitenancy", "committedDate": "2020-05-04T09:40:20Z", "type": "commit"}, {"oid": "0bea3fc2bb82d4b6f1196971bd26f55ddde2c190", "url": "https://github.com/hapifhir/hapi-fhir/commit/0bea3fc2bb82d4b6f1196971bd26f55ddde2c190", "message": "Update hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-05-04T18:45:52Z", "type": "commit"}, {"oid": "08eac70f356f5bf68f8602f82b56fda73df515d2", "url": "https://github.com/hapifhir/hapi-fhir/commit/08eac70f356f5bf68f8602f82b56fda73df515d2", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/client/examples.md\n\nCo-authored-by: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-05-04T18:46:05Z", "type": "commit"}, {"oid": "02f8675df69bf662f91dc9aff70ede55c3e4391a", "url": "https://github.com/hapifhir/hapi-fhir/commit/02f8675df69bf662f91dc9aff70ede55c3e4391a", "message": "Address review comments", "committedDate": "2020-05-04T18:54:18Z", "type": "commit"}, {"oid": "6d4762c33f25c6dbcc8d4c05d1fe32bdfe1ffd84", "url": "https://github.com/hapifhir/hapi-fhir/commit/6d4762c33f25c6dbcc8d4c05d1fe32bdfe1ffd84", "message": "Merge branch 'ja_20200423_multitenancy_2' of github.com:jamesagnew/hapi-fhir into ja_20200423_multitenancy_2", "committedDate": "2020-05-04T18:54:27Z", "type": "commit"}, {"oid": "37beb301242339e490787e7cafd76e1dfe2b6675", "url": "https://github.com/hapifhir/hapi-fhir/commit/37beb301242339e490787e7cafd76e1dfe2b6675", "message": "Merge branch 'ja_20200423_multitenancy_2' of github.com:jamesagnew/hapi-fhir into ja_20200423_multitenancy_2", "committedDate": "2020-05-04T21:05:49Z", "type": "commit"}, {"oid": "10522363f16ef8404daa42bdff9ff77e89d8b2f0", "url": "https://github.com/hapifhir/hapi-fhir/commit/10522363f16ef8404daa42bdff9ff77e89d8b2f0", "message": "Allow disabling text modifier indexing", "committedDate": "2020-05-05T13:41:17Z", "type": "commit"}, {"oid": "190cac2b1c3971c7c9f0259f7a99b808a8d7fee4", "url": "https://github.com/hapifhir/hapi-fhir/commit/190cac2b1c3971c7c9f0259f7a99b808a8d7fee4", "message": "Add changelog", "committedDate": "2020-05-05T13:43:14Z", "type": "commit"}, {"oid": "050ff6feb37ce57d5b8c147e2b0fc4295e91bc68", "url": "https://github.com/hapifhir/hapi-fhir/commit/050ff6feb37ce57d5b8c147e2b0fc4295e91bc68", "message": "Docs fixes", "committedDate": "2020-05-05T15:12:33Z", "type": "commit"}, {"oid": "717cc92603bccb7b71d8139a133a9d4e25a4c3fc", "url": "https://github.com/hapifhir/hapi-fhir/commit/717cc92603bccb7b71d8139a133a9d4e25a4c3fc", "message": "Address review comment", "committedDate": "2020-05-05T15:15:20Z", "type": "commit"}, {"oid": "a265691afb7d2b6dc8de30f6df645a11e440978f", "url": "https://github.com/hapifhir/hapi-fhir/commit/a265691afb7d2b6dc8de30f6df645a11e440978f", "message": "Merge branch 'master' into ja_20200505_disable_text_modifier", "committedDate": "2020-05-05T15:18:04Z", "type": "commit"}, {"oid": "4e004834c63094baa5844ce36b513471253d9db3", "url": "https://github.com/hapifhir/hapi-fhir/commit/4e004834c63094baa5844ce36b513471253d9db3", "message": "Resolve merge conflicts", "committedDate": "2020-05-05T15:29:24Z", "type": "commit"}, {"oid": "a5c3c940fc2e68d3b37a690154f19ab28597b127", "url": "https://github.com/hapifhir/hapi-fhir/commit/a5c3c940fc2e68d3b37a690154f19ab28597b127", "message": "Merge branch 'ja_20200505_disable_text_modifier' into ja_20200423_multitenancy_2", "committedDate": "2020-05-05T15:34:48Z", "type": "commit"}, {"oid": "44354ef7fdf60ec5a6256e9973f1fa0745b4d902", "url": "https://github.com/hapifhir/hapi-fhir/commit/44354ef7fdf60ec5a6256e9973f1fa0745b4d902", "message": "Merge master", "committedDate": "2020-05-05T16:20:01Z", "type": "commit"}, {"oid": "d6548b5c8c556daa91a7f3105f87e95166ded3c9", "url": "https://github.com/hapifhir/hapi-fhir/commit/d6548b5c8c556daa91a7f3105f87e95166ded3c9", "message": "Merge branch 'master' into ja_20200423_multitenancy_2", "committedDate": "2020-05-05T16:20:22Z", "type": "commit"}, {"oid": "4ad03c0413503f58ec5c6d03952eb45eff8d60f5", "url": "https://github.com/hapifhir/hapi-fhir/commit/4ad03c0413503f58ec5c6d03952eb45eff8d60f5", "message": "Compile fix", "committedDate": "2020-05-05T16:48:56Z", "type": "commit"}, {"oid": "c93596f8a460cddefddfc354114a48c6676fffc5", "url": "https://github.com/hapifhir/hapi-fhir/commit/c93596f8a460cddefddfc354114a48c6676fffc5", "message": "Test fix", "committedDate": "2020-05-05T17:39:44Z", "type": "commit"}]}