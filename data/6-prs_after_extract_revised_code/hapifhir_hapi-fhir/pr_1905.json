{"pr_number": 1905, "pr_title": "Im 2020601 lastn code text filter", "pr_createdAt": "2020-06-08T22:13:32Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1905", "timeline": [{"oid": "2e709a50c0d4f24d4bbbb21ca8904c572765e00f", "url": "https://github.com/hapifhir/hapi-fhir/commit/2e709a50c0d4f24d4bbbb21ca8904c572765e00f", "message": "Enable filtering $lastn operation by Observation effective date.", "committedDate": "2020-06-02T20:37:07Z", "type": "commit"}, {"oid": "bfc5f93ec8bec69224c0ba856cc6d7222d9f485b", "url": "https://github.com/hapifhir/hapi-fhir/commit/bfc5f93ec8bec69224c0ba856cc6d7222d9f485b", "message": "Enable filtering $lastn operation by Observation effective date.", "committedDate": "2020-06-02T20:39:06Z", "type": "commit"}, {"oid": "3f50d8e53da0e9233708ec0d0fc8acf58b43df99", "url": "https://github.com/hapifhir/hapi-fhir/commit/3f50d8e53da0e9233708ec0d0fc8acf58b43df99", "message": "Merge branch 'master' of https://github.com/jamesagnew/hapi-fhir", "committedDate": "2020-06-02T20:41:10Z", "type": "commit"}, {"oid": "8d5232bcedfd982927e44377e35b30c0bd94a4a2", "url": "https://github.com/hapifhir/hapi-fhir/commit/8d5232bcedfd982927e44377e35b30c0bd94a4a2", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_2020601_lastn_code_text_filter", "committedDate": "2020-06-03T01:28:10Z", "type": "commit"}, {"oid": "78b7f091eccf4c7528fff106a8fa8cd0f8b4748c", "url": "https://github.com/hapifhir/hapi-fhir/commit/78b7f091eccf4c7528fff106a8fa8cd0f8b4748c", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_2020601_lastn_code_text_filter\n\n# Conflicts:\n#\thapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/search/lastn/LastNElasticsearchSvcMultipleObservationsIT.java", "committedDate": "2020-06-04T20:55:18Z", "type": "commit"}, {"oid": "549993886db040f40074a80411b9d8150652aabd", "url": "https://github.com/hapifhir/hapi-fhir/commit/549993886db040f40074a80411b9d8150652aabd", "message": "Fix merge conflicts.", "committedDate": "2020-06-04T21:57:38Z", "type": "commit"}, {"oid": "56cbc5149ba2ac45965c7d14c2ec71bc58971236", "url": "https://github.com/hapifhir/hapi-fhir/commit/56cbc5149ba2ac45965c7d14c2ec71bc58971236", "message": "Add support for partial code description matching.", "committedDate": "2020-06-08T13:24:09Z", "type": "commit"}, {"oid": "4982e67a0f2ab44bf4cfff9dad569bfbc13caec2", "url": "https://github.com/hapifhir/hapi-fhir/commit/4982e67a0f2ab44bf4cfff9dad569bfbc13caec2", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_2020601_lastn_code_text_filter", "committedDate": "2020-06-08T13:26:55Z", "type": "commit"}, {"oid": "30dd858f17a24f4ce46f9b25e22d7bf714385211", "url": "https://github.com/hapifhir/hapi-fhir/commit/30dd858f17a24f4ce46f9b25e22d7bf714385211", "message": "Add close method for Elasticsearch service. Fix the partial code match.", "committedDate": "2020-06-08T19:07:02Z", "type": "commit"}, {"oid": "c86e46b19651a2196df96fa9343c3ac8ccd15cf5", "url": "https://github.com/hapifhir/hapi-fhir/commit/c86e46b19651a2196df96fa9343c3ac8ccd15cf5", "message": "Add documentation and remove requirement for max parameter (defaulted to 1 now).", "committedDate": "2020-06-08T22:08:02Z", "type": "commit"}, {"oid": "3c600e06d47ef58bf8647dfb5f5608398c14a283", "url": "https://github.com/hapifhir/hapi-fhir/commit/3c600e06d47ef58bf8647dfb5f5608398c14a283", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_2020601_lastn_code_text_filter", "committedDate": "2020-06-08T22:08:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTgyNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437049826", "bodyText": "All these strings should probably be ripped into constants", "author": "tadgh", "createdAt": "2020-06-08T23:09:29Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java", "diffHunk": "@@ -504,15 +517,50 @@ private void addObservationCodeCriteria(BoolQueryBuilder theBoolQueryBuilder, Se\n \t\t\tif (textOnlyList.size() > 0) {\n \t\t\t\tBoolQueryBuilder myTextBoolQueryBuilder = QueryBuilders.boolQuery();\n \t\t\t\tfor (String textOnlyParam : textOnlyList) {\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhraseQuery(\"codeconcepttext\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconcepttext\", textOnlyParam));", "originalCommit": "3c600e06d47ef58bf8647dfb5f5608398c14a283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MDkxNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437440917", "bodyText": "Done (along with other similar constants in this class).", "author": "IanMMarshall", "createdAt": "2020-06-09T13:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "122bd9734425e5942a95ea6332546365f9f82021", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java\nindex 0a5619059f..5b0c177f0c 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/lastn/ElasticsearchSvcImpl.java\n\n@@ -506,19 +527,19 @@ public class ElasticsearchSvcImpl implements IElasticsearchSvc {\n \t\t\t\ttextOnlyList.addAll(getCodingTextOnlyValues(nextAnd));\n \t\t\t}\n \t\t\tif (codeSystemHashList.size() > 0) {\n-\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(\"codeconceptcodingcode_system_hash\", codeSystemHashList));\n+\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(OBSERVATION_CODEHASH_FIELD_NAME, codeSystemHashList));\n \t\t\t}\n \t\t\tif (codeOnlyList.size() > 0) {\n-\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(\"codeconceptcodingcode\", codeOnlyList));\n+\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(OBSERVATION_CODEVALUE_FIELD_NAME, codeOnlyList));\n \t\t\t}\n \t\t\tif (systemOnlyList.size() > 0) {\n-\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(\"codeconceptcodingsystem\", systemOnlyList));\n+\t\t\t\ttheBoolQueryBuilder.must(QueryBuilders.termsQuery(OBSERVATION_CODESYSTEM_FIELD_NAME, systemOnlyList));\n \t\t\t}\n \t\t\tif (textOnlyList.size() > 0) {\n \t\t\t\tBoolQueryBuilder myTextBoolQueryBuilder = QueryBuilders.boolQuery();\n \t\t\t\tfor (String textOnlyParam : textOnlyList) {\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconceptcodingdisplay\", textOnlyParam));\n-\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(\"codeconcepttext\", textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(OBSERVATION_CODEDISPLAY_FIELD_NAME, textOnlyParam));\n+\t\t\t\t\tmyTextBoolQueryBuilder.should(QueryBuilders.matchPhrasePrefixQuery(OBSERVATION_CODE_TEXT_FIELD_NAME, textOnlyParam));\n \t\t\t\t}\n \t\t\t\ttheBoolQueryBuilder.must(myTextBoolQueryBuilder);\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MzYwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437053601", "bodyText": "What is this calculation doing? Consider ripping the math out into a constant that explains the purpose", "author": "tadgh", "createdAt": "2020-06-08T23:22:06Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java", "diffHunk": "@@ -154,15 +160,13 @@ private void createObservationsForPatient(IIdType thePatientId) {\n \n \tprivate void createFiveObservationsForPatientCodeCategory(IIdType thePatientId, String theObservationCode, String theCategoryCode,\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Integer theTimeOffset) {\n-\t\tCalendar observationDate = new GregorianCalendar();\n \n \t\tfor (int idx=0; idx<5; idx++ ) {\n \t\t\tObservation obs = new Observation();\n \t\t\tobs.getSubject().setReferenceElement(thePatientId);\n \t\t\tobs.getCode().addCoding().setCode(theObservationCode).setSystem(codeSystem);\n \t\t\tobs.setValue(new StringType(theObservationCode + \"_0\"));\n-\t\t\tobservationDate.add(Calendar.HOUR, -theTimeOffset+idx);\n-\t\t\tDate effectiveDtm = observationDate.getTime();\n+\t\t\tDate effectiveDtm = new Date(observationDate.getTimeInMillis() - (3600*1000*(theTimeOffset+idx)));", "originalCommit": "3c600e06d47ef58bf8647dfb5f5608398c14a283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxNTU5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1905#discussion_r437415595", "bodyText": "The idea here was to generate a new and distinct observation effective date time for each Observation by subtracting a calculated and unique offset value from a constant Date value. To make this more clear,  I have moved this coding into a separate method, broken up the calculation and added some comments.", "author": "IanMMarshall", "createdAt": "2020-06-09T13:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MzYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "122bd9734425e5942a95ea6332546365f9f82021", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java\nindex 390efd1e7a..976882aaf0 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/BaseR4SearchLastN.java\n\n@@ -166,7 +166,7 @@ public class BaseR4SearchLastN extends BaseJpaTest {\n \t\t\tobs.getSubject().setReferenceElement(thePatientId);\n \t\t\tobs.getCode().addCoding().setCode(theObservationCode).setSystem(codeSystem);\n \t\t\tobs.setValue(new StringType(theObservationCode + \"_0\"));\n-\t\t\tDate effectiveDtm = new Date(observationDate.getTimeInMillis() - (3600*1000*(theTimeOffset+idx)));\n+\t\t\tDate effectiveDtm = calculateObservationDateFromOffset(theTimeOffset, idx);\n \t\t\tobs.setEffective(new DateTimeType(effectiveDtm));\n \t\t\tobs.getCategoryFirstRep().addCoding().setCode(theCategoryCode).setSystem(categorySystem);\n \t\t\tString observationId = myObservationDao.create(obs, mockSrd()).getId().toUnqualifiedVersionless().getValue();\n"}}, {"oid": "122bd9734425e5942a95ea6332546365f9f82021", "url": "https://github.com/hapifhir/hapi-fhir/commit/122bd9734425e5942a95ea6332546365f9f82021", "message": "Changes recommended during code review.", "committedDate": "2020-06-09T13:59:03Z", "type": "commit"}, {"oid": "1ec6a7edb60bae09f3e312d2b25d32dc32868af7", "url": "https://github.com/hapifhir/hapi-fhir/commit/1ec6a7edb60bae09f3e312d2b25d32dc32868af7", "message": "Merge remote-tracking branch 'remotes/origin/master' into im_2020601_lastn_code_text_filter", "committedDate": "2020-06-09T15:45:04Z", "type": "commit"}]}