{"pr_number": 1790, "pr_title": "Decouple subscription submission / matching", "pr_createdAt": "2020-04-03T11:44:21Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1790", "timeline": [{"oid": "e1142f4043190a970c0fece44995a3f91c19a43d", "url": "https://github.com/hapifhir/hapi-fhir/commit/e1142f4043190a970c0fece44995a3f91c19a43d", "message": "Start work on subscription cleanup", "committedDate": "2020-04-02T09:31:12Z", "type": "commit"}, {"oid": "6baf1995c9e23bbfeb4770bc471ceffe64d0ead5", "url": "https://github.com/hapifhir/hapi-fhir/commit/6baf1995c9e23bbfeb4770bc471ceffe64d0ead5", "message": "Work on subscription cleanup", "committedDate": "2020-04-03T00:30:19Z", "type": "commit"}, {"oid": "43b4d8e0e32f9b44d3f85e63f149af9c400e674b", "url": "https://github.com/hapifhir/hapi-fhir/commit/43b4d8e0e32f9b44d3f85e63f149af9c400e674b", "message": "Work on subscriptions", "committedDate": "2020-04-03T01:15:07Z", "type": "commit"}, {"oid": "470063e8ab349f9ef548f8d7a499f232e5ed247d", "url": "https://github.com/hapifhir/hapi-fhir/commit/470063e8ab349f9ef548f8d7a499f232e5ed247d", "message": "Subscription cleanup", "committedDate": "2020-04-03T01:19:54Z", "type": "commit"}, {"oid": "7c6024fa14576d8a3a953d6eac8b877d6ed549b0", "url": "https://github.com/hapifhir/hapi-fhir/commit/7c6024fa14576d8a3a953d6eac8b877d6ed549b0", "message": "More work on subscriptions", "committedDate": "2020-04-03T11:43:21Z", "type": "commit"}, {"oid": "68db40d057b961f4fe3b91b5d6d99227d1922a71", "url": "https://github.com/hapifhir/hapi-fhir/commit/68db40d057b961f4fe3b91b5d6d99227d1922a71", "message": "Queue factory cleanup", "committedDate": "2020-04-03T12:07:39Z", "type": "commit"}, {"oid": "fef447afeebd6a82eb39f5a88939fc616f757f31", "url": "https://github.com/hapifhir/hapi-fhir/commit/fef447afeebd6a82eb39f5a88939fc616f757f31", "message": "Work on subscription cleanup", "committedDate": "2020-04-04T20:07:01Z", "type": "commit"}, {"oid": "79da1578cb45ac6213e15689a2188106421bab29", "url": "https://github.com/hapifhir/hapi-fhir/commit/79da1578cb45ac6213e15689a2188106421bab29", "message": "Subscription cleanup", "committedDate": "2020-04-05T00:04:32Z", "type": "commit"}, {"oid": "0a28c0c0609cb1a96fdec73a4205acf6a72c41b8", "url": "https://github.com/hapifhir/hapi-fhir/commit/0a28c0c0609cb1a96fdec73a4205acf6a72c41b8", "message": "Work on subscription cleanup", "committedDate": "2020-04-05T11:21:05Z", "type": "commit"}, {"oid": "d0884663d27024bdd681bdc8a3e9ec32fc4d19f0", "url": "https://github.com/hapifhir/hapi-fhir/commit/d0884663d27024bdd681bdc8a3e9ec32fc4d19f0", "message": "Work on subscription cleanup", "committedDate": "2020-04-05T15:34:47Z", "type": "commit"}, {"oid": "40d0c27ae3d743909595fab45a50c4f8143c8b29", "url": "https://github.com/hapifhir/hapi-fhir/commit/40d0c27ae3d743909595fab45a50c4f8143c8b29", "message": "Work on subscription cleanup", "committedDate": "2020-04-05T22:43:27Z", "type": "commit"}, {"oid": "b78205c218a1bf5df7661a6dbceb0e184b8085cb", "url": "https://github.com/hapifhir/hapi-fhir/commit/b78205c218a1bf5df7661a6dbceb0e184b8085cb", "message": "Ongoing cleanup", "committedDate": "2020-04-06T21:00:45Z", "type": "commit"}, {"oid": "826ba6458a461bf96883effc3864cd126045238f", "url": "https://github.com/hapifhir/hapi-fhir/commit/826ba6458a461bf96883effc3864cd126045238f", "message": "Subscription work", "committedDate": "2020-04-07T00:15:41Z", "type": "commit"}, {"oid": "347ecc7d516d35091b28699dba83e7c2c3ba0d9a", "url": "https://github.com/hapifhir/hapi-fhir/commit/347ecc7d516d35091b28699dba83e7c2c3ba0d9a", "message": "Tests passing", "committedDate": "2020-04-07T13:39:14Z", "type": "commit"}, {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "url": "https://github.com/hapifhir/hapi-fhir/commit/2205d2306ce25fd84cb6a39d21d7ef52bb634436", "message": "Move resource provider factory", "committedDate": "2020-04-07T14:56:05Z", "type": "commit"}, {"oid": "47786660d5c4a734600c1de16b238975df19265a", "url": "https://github.com/hapifhir/hapi-fhir/commit/47786660d5c4a734600c1de16b238975df19265a", "message": "Test fixes", "committedDate": "2020-04-07T17:58:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5MDgzNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404890837", "bodyText": "Love changes like this.  No good reason for a Dao to have a SP Registry.", "author": "fil512", "createdAt": "2020-04-07T15:15:34Z", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IDao.java", "diffHunk": "@@ -43,14 +41,8 @@\n \n \tFhirContext getContext();\n \n-\t/**\n-\t * Populate all of the runtime dependencies that a bundle provider requires in order to work\n-\t */\n-\tvoid injectDependenciesIntoBundleProvider(PersistedJpaBundleProvider theProvider);\n-\n \tIBaseResource toResource(BaseHasResource theEntity, boolean theForHistoryOperation);\n \n \t<R extends IBaseResource> R toResource(Class<R> theResourceType, IBaseResourceEntity theEntity, Collection<ResourceTag> theTagList, boolean theForHistoryOperation);\n \n-\tISearchParamRegistry getSearchParamRegistry();", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNjI5Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404906292", "bodyText": "Nice!\nI remember needing this for something.  I look forward to seeing how you solved that.", "author": "fil512", "createdAt": "2020-04-07T15:35:05Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -51,15 +55,13 @@\n \tDaoConfig myDaoConfig;\n \n \tboolean myDontUseHashesForSearch;\n-\tfinal IDao myCallingDao;", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNDEyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404914124", "bodyText": "Nice!\nCurious why you use name and not type here.", "author": "fil512", "createdAt": "2020-04-07T15:45:17Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProviderFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package ca.uhn.fhir.jpa.search;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.entity.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+\n+public class PersistedJpaBundleProviderFactory {\n+\n+\t@Autowired\n+\tprivate ApplicationContext myApplicationContext;\n+\n+\tpublic PersistedJpaBundleProvider newInstance(RequestDetails theRequest, String theUuid) {\n+\t\tObject retVal = myApplicationContext.getBean(BaseConfig.PERSISTED_JPA_BUNDLE_PROVIDER, theRequest, theUuid);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjM5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405142395", "bodyText": "Cause there are two of them and one is a subclass of the other", "author": "jamesagnew", "createdAt": "2020-04-07T22:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNDEyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMzU5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404923598", "bodyText": "These are all over the place.  Nice you cleaned them up.  I wonder how they got in there in the first place...?", "author": "fil512", "createdAt": "2020-04-07T15:57:40Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java", "diffHunk": "@@ -572,7 +578,7 @@ public MetaDt metaGetOperation(RequestDetails theRequestDetails) {\n \t\treturn retVal;\n \t}\n \n-\tprivate ca.uhn.fhir.jpa.dao.IFhirResourceDao<? extends IBaseResource> toDao(UrlParts theParts, String theVerb, String theUrl) {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjEwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405142102", "bodyText": "Yeah, agree! Not clear why they were here....", "author": "jamesagnew", "createdAt": "2020-04-07T22:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMzU5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNzA3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404927071", "bodyText": "These aren't JpaConstants.  Can we have a ProviderConstants class where we put all the provider params?", "author": "fil512", "createdAt": "2020-04-07T16:01:52Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java", "diffHunk": "@@ -47,17 +45,17 @@\n \n \t@Operation(name = JpaConstants.OPERATION_TRIGGER_SUBSCRIPTION)\n \tpublic IBaseParameters triggerSubscription(\n-\t\t@OperationParam(name = RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,\n-\t\t@OperationParam(name = SEARCH_URL, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"string\") List<IPrimitiveType<String>> theSearchUrls\n+\t\t@OperationParam(name = JpaConstants.SUBSCRIPTION_TRIGGERING_PARAM_RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTk4MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405141981", "bodyText": "Done", "author": "jamesagnew", "createdAt": "2020-04-07T22:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNzA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java\nindex 5c398c8697..8aba30e107 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java\n\n@@ -45,8 +46,8 @@ public class SubscriptionTriggeringProvider implements IResourceProvider {\n \n \t@Operation(name = JpaConstants.OPERATION_TRIGGER_SUBSCRIPTION)\n \tpublic IBaseParameters triggerSubscription(\n-\t\t@OperationParam(name = JpaConstants.SUBSCRIPTION_TRIGGERING_PARAM_RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,\n-\t\t@OperationParam(name = JpaConstants.SUBSCRIPTION_TRIGGERING_PARAM_SEARCH_URL, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"string\") List<IPrimitiveType<String>> theSearchUrls\n+\t\t@OperationParam(name = ProviderConstants.SUBSCRIPTION_TRIGGERING_PARAM_RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,\n+\t\t@OperationParam(name = ProviderConstants.SUBSCRIPTION_TRIGGERING_PARAM_SEARCH_URL, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"string\") List<IPrimitiveType<String>> theSearchUrls\n \t) {\n \t\treturn mySubscriptionTriggeringSvc.triggerSubscription(theResourceIds, theSearchUrls, null);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyODQyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404928424", "bodyText": "This is a big improvement", "author": "fil512", "createdAt": "2020-04-07T16:03:49Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/DatabaseBackedPagingProvider.java", "diffHunk": "@@ -57,8 +59,7 @@ public DatabaseBackedPagingProvider(int theSize) {\n \n \t@Override\n \tpublic synchronized IBundleProvider retrieveResultList(RequestDetails theRequestDetails, String theId) {\n-\t\tIFhirSystemDao<?, ?> systemDao = myDaoRegistry.getSystemDao();\n-\t\tPersistedJpaBundleProvider provider = new PersistedJpaBundleProvider(theRequestDetails, theId, systemDao, mySearchBuilderFactory);\n+\t\tPersistedJpaBundleProvider provider = myPersistedJpaBundleProviderFactory.newInstance(theRequestDetails, theId);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTQyMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404931421", "bodyText": "jetbrains.\nhttps://gitlab.com/simpatico.ai/cdr/-/wikis/HOW-TO#how-to-get-intellij-to-use-the-preferred-null-annotations", "author": "fil512", "createdAt": "2020-04-07T16:08:07Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java", "diffHunk": "@@ -36,11 +38,19 @@\n import ca.uhn.fhir.jpa.util.InterceptorUtil;\n import ca.uhn.fhir.jpa.util.JpaInterceptorBroadcaster;\n import ca.uhn.fhir.model.primitive.InstantDt;\n-import ca.uhn.fhir.rest.api.server.*;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.api.server.IPreResourceAccessDetails;\n+import ca.uhn.fhir.rest.api.server.IPreResourceShowDetails;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.api.server.SimplePreResourceAccessDetails;\n+import ca.uhn.fhir.rest.api.server.SimplePreResourceShowDetails;\n import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n+import com.google.common.annotations.VisibleForTesting;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MzgwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405143804", "bodyText": "Fixed", "author": "jamesagnew", "createdAt": "2020-04-07T22:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\nindex ac5e0e6932..f3652502ab 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\n\n@@ -47,7 +47,6 @@ import ca.uhn.fhir.rest.api.server.SimplePreResourceShowDetails;\n import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n import com.google.common.annotations.VisibleForTesting;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.jetbrains.annotations.NotNull;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTcwMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404931703", "bodyText": "lambda?", "author": "fil512", "createdAt": "2020-04-07T16:08:30Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java", "diffHunk": "@@ -220,13 +252,11 @@ public InstantDt getPublished() {\n \t@Nonnull\n \t@Override\n \tpublic List<IBaseResource> getResources(final int theFromIndex, final int theToIndex) {\n-\t\tensureDependenciesInjected();\n-\n-\t\tTransactionTemplate template = new TransactionTemplate(myPlatformTransactionManager);\n+\t\tTransactionTemplate template = new TransactionTemplate(myTxManager);\n \n \t\ttemplate.execute(new TransactionCallbackWithoutResult() {\n \t\t\t@Override\n-\t\t\tprotected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n+\t\t\tprotected void doInTransactionWithoutResult(@NotNull TransactionStatus theStatus) {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MzMxNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405143315", "bodyText": "IJ isn't doing it for me automatically so I'm gonna leave it as a future enhancement..", "author": "jamesagnew", "createdAt": "2020-04-07T22:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\nindex ac5e0e6932..f3652502ab 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java\n\n@@ -256,7 +255,7 @@ public class PersistedJpaBundleProvider implements IBundleProvider {\n \n \t\ttemplate.execute(new TransactionCallbackWithoutResult() {\n \t\t\t@Override\n-\t\t\tprotected void doInTransactionWithoutResult(@NotNull TransactionStatus theStatus) {\n+\t\t\tprotected void doInTransactionWithoutResult(@Nonnull TransactionStatus theStatus) {\n \t\t\t\tboolean entityLoaded = ensureSearchEntityLoaded();\n \t\t\t\tassert entityLoaded;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMzU5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404933599", "bodyText": "YAY You did my TODO!   \ud83d\ude04\ud83d\ude04\ud83d\ude04", "author": "fil512", "createdAt": "2020-04-07T16:11:05Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java", "diffHunk": "@@ -44,21 +46,23 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Scope(\"prototype\")\n+@Component\n public class PersistedJpaSearchFirstPageBundleProvider extends PersistedJpaBundleProvider {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(PersistedJpaSearchFirstPageBundleProvider.class);\n \tprivate SearchTask mySearchTask;\n \tprivate ISearchBuilder mySearchBuilder;\n \tprivate Search mySearch;\n-\tprivate PlatformTransactionManager myTxManager;\n \n-\t// TODO KHS too many collaborators.  This should be a prototype bean", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\nindex ed248ce666..89daeb8f8a 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\n\n@@ -46,8 +46,6 @@ import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n-@Scope(\"prototype\")\n-@Component\n public class PersistedJpaSearchFirstPageBundleProvider extends PersistedJpaBundleProvider {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(PersistedJpaSearchFirstPageBundleProvider.class);\n \tprivate SearchTask mySearchTask;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDUyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404934529", "bodyText": "I assume these annotations aren't required since you're not using @Lookup?", "author": "fil512", "createdAt": "2020-04-07T16:12:25Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java", "diffHunk": "@@ -44,21 +46,23 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Scope(\"prototype\")\n+@Component", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDExMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405144111", "bodyText": "Good call, removing", "author": "jamesagnew", "createdAt": "2020-04-07T22:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\nindex ed248ce666..89daeb8f8a 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java\n\n@@ -46,8 +46,6 @@ import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n-@Scope(\"prototype\")\n-@Component\n public class PersistedJpaSearchFirstPageBundleProvider extends PersistedJpaBundleProvider {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(PersistedJpaSearchFirstPageBundleProvider.class);\n \tprivate SearchTask mySearchTask;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNjU1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404936551", "bodyText": "I see this in quite a few places.  Curious why you chose to bind the result tighter to the interface?", "author": "fil512", "createdAt": "2020-04-07T16:15:09Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/api/ITermReadSvc.java", "diffHunk": "@@ -107,7 +107,7 @@\n \t/**\n \t * Version independent\n \t */\n-\tValidateCodeResult validateCodeIsInPreExpandedValueSet(ValidationOptions theOptions, IBaseResource theValueSet, String theSystem, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept);\n+\tIFhirResourceDaoValueSet.ValidateCodeResult validateCodeIsInPreExpandedValueSet(ValidationOptions theOptions, IBaseResource theValueSet, String theSystem, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDQ1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405144451", "bodyText": "Eclipse preferred to auto-import nested classes directly, Intellij prefers this style. So it's mostly a preference picked by the IDE I'm using at the time. :)", "author": "jamesagnew", "createdAt": "2020-04-07T22:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNjU1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NDA2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404994068", "bodyText": "fascinating.  I didn't realize that mockito any() used to match null and now no longer does", "author": "fil512", "createdAt": "2020-04-07T17:40:52Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImplTest.java", "diffHunk": "@@ -107,16 +138,17 @@ public void before() {\n \n \t\twhen(myTxManager.getTransaction(any())).thenReturn(mock(TransactionStatus.class));\n \n-\t\tdoAnswer(theInvocation -> {\n-\t\t\tPersistedJpaBundleProvider provider = (PersistedJpaBundleProvider) theInvocation.getArguments()[0];\n-\t\t\tprovider.setSearchCoordinatorSvc(mySvc);\n-\t\t\tprovider.setPlatformTransactionManager(myTxManager);\n-\t\t\tprovider.setSearchCacheSvc(mySearchCacheSvc);\n-\t\t\tprovider.setEntityManager(myEntityManager);\n-\t\t\tprovider.setContext(ourCtx);\n-\t\t\tprovider.setInterceptorBroadcaster(myInterceptorBroadcaster);\n-\t\t\treturn null;\n-\t\t}).when(myCallingDao).injectDependenciesIntoBundleProvider(any(PersistedJpaBundleProvider.class));\n+\t\twhen(myPersistedJpaBundleProviderFactory.newInstanceFirstPage(nullable(RequestDetails.class), nullable(Search.class), nullable(SearchCoordinatorSvcImpl.SearchTask.class), nullable(ISearchBuilder.class))).thenAnswer(t->{", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMTA4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405001089", "bodyText": "Options sounds like an enum.\nMaybe ChannelConsumerConfig?", "author": "fil512", "createdAt": "2020-04-07T17:52:10Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerOptions.java", "diffHunk": "@@ -20,12 +20,24 @@\n  * #L%\n  */\n \n-import org.springframework.messaging.SubscribableChannel;\n+public class ChannelConsumerOptions {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDU3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405144570", "bodyText": "Will change", "author": "jamesagnew", "createdAt": "2020-04-07T22:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a77d839c3b8df8d5684b1aced7d1ea156988178", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerOptions.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerSettings.java\nsimilarity index 85%\nrename from hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerOptions.java\nrename to hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerSettings.java\nindex 6ca9eff31d..5d17afd376 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerOptions.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerSettings.java\n\n@@ -20,12 +20,12 @@ package ca.uhn.fhir.jpa.subscription.channel.api;\n  * #L%\n  */\n \n-public class ChannelConsumerOptions {\n+public class ChannelConsumerSettings {\n \n \t/**\n \t * Constructor\n \t */\n-\tpublic ChannelConsumerOptions() {\n+\tpublic ChannelConsumerSettings() {\n \t\tsuper();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMzQ4NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405003484", "bodyText": "I like the getOrCreate part.\nMan naming is so hard.  I don't feel like I'm getting a channel back when I call this.  I feel like I'm getting something back that receives stuff from a channel.  But I'm having trouble coming up with a better name.  ReceivingChannel?", "author": "fil512", "createdAt": "2020-04-07T17:55:56Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {\n+\n+\t/**\n+\t * Create a channel that is used to receive messages from the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelReceiver getOrCreateReceiver(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjExOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405162119", "bodyText": "I don't disagree with your suggestion, but FYI I'm going to leave this as is. I can't  bear the thought of any more huge renames right now and reconciling it. Let's do this later.", "author": "jamesagnew", "createdAt": "2020-04-07T22:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMzQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\nindex 23d7b434d6..8ded3b6239 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n\n@@ -38,7 +38,7 @@ public interface IChannelFactory {\n \t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n \t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n \t *                       both {@link #getOrCreateReceiver} and\n-\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       {@link #getOrCreateProducer(String, Class, ChannelConsumerOptions)}\n \t *                       even though this object is used to configure the sender only. We do this because the factory\n \t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n \t *                       the config details to be known regardless of which method is returned first.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNTY1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405005659", "bodyText": "Same here.  Sounds like I get something that produces stuff onto a channel rather than the channel itself.  Maybe SendingChannel?", "author": "fil512", "createdAt": "2020-04-07T17:59:20Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {\n+\n+\t/**\n+\t * Create a channel that is used to receive messages from the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelReceiver getOrCreateReceiver(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);\n+\n+\t/**\n+\t * Create a channel that is used to send messages to the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelProducer getOrCreateSender(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\nindex 23d7b434d6..8ded3b6239 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n\n@@ -38,7 +38,7 @@ public interface IChannelFactory {\n \t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n \t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n \t *                       both {@link #getOrCreateReceiver} and\n-\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       {@link #getOrCreateProducer(String, Class, ChannelConsumerOptions)}\n \t *                       even though this object is used to configure the sender only. We do this because the factory\n \t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n \t *                       the config details to be known regardless of which method is returned first.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzIyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405007224", "bodyText": "Add @PreDestroy stop() to shutdown all of these?", "author": "fil512", "createdAt": "2020-04-07T18:01:44Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package ca.uhn.fhir.jpa.subscription.channel.impl;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import ca.uhn.fhir.util.StopWatch;\n+import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LinkedBlockingChannelFactory implements IChannelFactory {\n+\n+\tprivate Map<String, LinkedBlockingChannel> myChannels = Collections.synchronizedMap(new HashMap<>());", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjUwNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405162505", "bodyText": "Good call, done", "author": "jamesagnew", "createdAt": "2020-04-07T22:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java\nindex ab806b3b28..2021aa391a 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java\n\n@@ -30,6 +30,7 @@ import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.PreDestroy;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzY1Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405007657", "bodyText": "I really like the idea of the factory also being the registry.  It's Spring like.", "author": "fil512", "createdAt": "2020-04-07T18:02:26Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\nindex 23d7b434d6..8ded3b6239 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java\n\n@@ -38,7 +38,7 @@ public interface IChannelFactory {\n \t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n \t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n \t *                       both {@link #getOrCreateReceiver} and\n-\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       {@link #getOrCreateProducer(String, Class, ChannelConsumerOptions)}\n \t *                       even though this object is used to configure the sender only. We do this because the factory\n \t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n \t *                       the config details to be known regardless of which method is returned first.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjcyNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012727", "bodyText": "encapsulation doesn't quite feel right here.\ncan you remove newConfigForMatchingChannel and replace it with getDeliveryChannelConcurrentConsumerOptions() that returns a ConsumerOptions object instead of an int?", "author": "fil512", "createdAt": "2020-04-07T18:10:48Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MjY3NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405162675", "bodyText": "Will slack you about this.", "author": "jamesagnew", "createdAt": "2020-04-07T23:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\nindex c543a1c6f7..302bd30f36 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n\n@@ -49,7 +49,7 @@ public class SubscriptionChannelFactory {\n \n \tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n \t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n-\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn myQueueChannelFactory.getOrCreateProducer(theChannelName, ResourceDeliveryJsonMessage.class, config);\n \t}\n \n \tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjg2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012866", "bodyText": "Unused parameter.  See above.", "author": "fil512", "createdAt": "2020-04-07T18:11:02Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tprotected ChannelConsumerOptions newConfigForDeliveryChannel(ChannelConsumerOptions theOptions) {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDcyMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405164720", "bodyText": "Will slack you", "author": "jamesagnew", "createdAt": "2020-04-07T23:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\nindex c543a1c6f7..302bd30f36 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n\n@@ -49,7 +49,7 @@ public class SubscriptionChannelFactory {\n \n \tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n \t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n-\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn myQueueChannelFactory.getOrCreateProducer(theChannelName, ResourceDeliveryJsonMessage.class, config);\n \t}\n \n \tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjk3Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012976", "bodyText": "Unused parameter theOptions", "author": "fil512", "createdAt": "2020-04-07T18:11:17Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\nindex c543a1c6f7..302bd30f36 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java\n\n@@ -49,7 +49,7 @@ public class SubscriptionChannelFactory {\n \n \tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n \t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n-\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn myQueueChannelFactory.getOrCreateProducer(theChannelName, ResourceDeliveryJsonMessage.class, config);\n \t}\n \n \tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNDQ2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405014468", "bodyText": "Is this cache redundant with the cache in the IChannelFactory?", "author": "fil512", "createdAt": "2020-04-07T18:13:46Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelRegistry.java", "diffHunk": "@@ -20,100 +20,94 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.subscription.module.cache.ActiveSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.cache.SubscriptionRegistry;\n-import com.google.common.annotations.VisibleForTesting;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionRegistry;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.MultimapBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHandler;\n-import org.springframework.messaging.SubscribableChannel;\n-import org.springframework.stereotype.Component;\n \n-import java.util.Collection;\n+import java.util.Map;\n import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n \n-@Component\n public class SubscriptionChannelRegistry {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(SubscriptionRegistry.class);\n \n-\tprivate final SubscriptionChannelCache mySubscriptionChannelCache = new SubscriptionChannelCache();\n+\tprivate final SubscriptionChannelCache myDeliveryReceiverChannels = new SubscriptionChannelCache();", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2Mjg5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405162898", "bodyText": "Probably. Leaving for now in order to minimize risk.", "author": "jamesagnew", "createdAt": "2020-04-07T23:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNDQ2OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDE3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405020171", "bodyText": "To stay consistent with your other prototype bean constructors, maybe call these newSubs... instead of getSubs...\nBy the way, in retrospect, I believe your explicit getBean() creation code is more maintainable than the opaque @lookup I was using before.", "author": "fil512", "createdAt": "2020-04-07T18:23:12Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java", "diffHunk": "@@ -20,30 +20,28 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscriptionChannelType;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.SubscriptionDeliveringRestHookSubscriber;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.email.IEmailSender;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.email.SubscriptionDeliveringEmailSubscriber;\n-import org.springframework.beans.factory.annotation.Lookup;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscriptionChannelType;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.email.IEmailSender;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.email.SubscriptionDeliveringEmailSubscriber;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.resthook.SubscriptionDeliveringRestHookSubscriber;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.messaging.MessageHandler;\n-import org.springframework.stereotype.Component;\n \n import java.util.Optional;\n \n-@Component\n public class SubscriptionDeliveryHandlerFactory {\n \tprivate IEmailSender myEmailSender;\n \n-\t@Lookup\n-\tprotected SubscriptionDeliveringEmailSubscriber getSubscriptionDeliveringEmailSubscriber(IEmailSender myEmailSender) {\n-\t\t// stub method since this is a @Lookup\n-\t\tthrow new IllegalStateException();\n+\t@Autowired\n+\tprivate ApplicationContext myApplicationContext;\n+\n+\tprotected SubscriptionDeliveringEmailSubscriber getSubscriptionDeliveringEmailSubscriber(IEmailSender theEmailSender) {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzQ0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405163449", "bodyText": "Done", "author": "jamesagnew", "createdAt": "2020-04-07T23:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java\nindex 1578e1183c..15cd802c49 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java\n\n@@ -36,19 +36,19 @@ public class SubscriptionDeliveryHandlerFactory {\n \t@Autowired\n \tprivate ApplicationContext myApplicationContext;\n \n-\tprotected SubscriptionDeliveringEmailSubscriber getSubscriptionDeliveringEmailSubscriber(IEmailSender theEmailSender) {\n+\tprotected SubscriptionDeliveringEmailSubscriber newSubscriptionDeliveringEmailSubscriber(IEmailSender theEmailSender) {\n \t\treturn myApplicationContext.getBean(SubscriptionDeliveringEmailSubscriber.class, theEmailSender);\n \t}\n \n-\tprotected SubscriptionDeliveringRestHookSubscriber getSubscriptionDeliveringRestHookSubscriber() {\n+\tprotected SubscriptionDeliveringRestHookSubscriber newSubscriptionDeliveringRestHookSubscriber() {\n \t\treturn myApplicationContext.getBean(SubscriptionDeliveringRestHookSubscriber.class);\n \t}\n \n \tpublic Optional<MessageHandler> createDeliveryHandler(CanonicalSubscriptionChannelType theChannelType) {\n \t\tif (theChannelType == CanonicalSubscriptionChannelType.EMAIL) {\n-\t\t\treturn Optional.of(getSubscriptionDeliveringEmailSubscriber(myEmailSender));\n+\t\t\treturn Optional.of(newSubscriptionDeliveringEmailSubscriber(myEmailSender));\n \t\t} else if (theChannelType == CanonicalSubscriptionChannelType.RESTHOOK) {\n-\t\t\treturn Optional.of(getSubscriptionDeliveringRestHookSubscriber());\n+\t\t\treturn Optional.of(newSubscriptionDeliveringRestHookSubscriber());\n \t\t} else {\n \t\t\treturn Optional.empty();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNDI1NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405024255", "bodyText": "As in other places, when you remove @ComponentScan, the @Scope(\"prototype\") moves from the @component to the @bean.  So I think you can remove all these and just leave the ones with the @bean annotations.", "author": "fil512", "createdAt": "2020-04-07T18:29:57Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java", "diffHunk": "@@ -22,23 +22,21 @@\n \n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.BaseSubscriptionDeliverySubscriber;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.ResourceDeliveryMessage;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscription;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.BaseSubscriptionDeliverySubscriber;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryMessage;\n import ca.uhn.fhir.rest.api.EncodingEnum;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.apache.commons.lang3.StringUtils.*;\n \n-@Component\n @Scope(\"prototype\")", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzgwMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405163803", "bodyText": "Ah good call. I think  I actually added that back when trying to figure out why something wasn't working and never removed it again..", "author": "jamesagnew", "createdAt": "2020-04-07T23:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNDI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java\nindex 55303d75b4..b1677b114d 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java\n\n@@ -37,7 +37,6 @@ import java.util.List;\n \n import static org.apache.commons.lang3.StringUtils.*;\n \n-@Scope(\"prototype\")\n public class SubscriptionDeliveringEmailSubscriber extends BaseSubscriptionDeliverySubscriber {\n \tprivate Logger ourLog = LoggerFactory.getLogger(SubscriptionDeliveringEmailSubscriber.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjU3NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405026574", "bodyText": "I'd be inclined to remove this abstraction since we no longer support subscriptions without daos", "author": "fil512", "createdAt": "2020-04-07T18:33:49Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/DaoResourceRetriever.java", "diffHunk": "@@ -22,26 +22,38 @@\n \n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.context.RuntimeResourceDefinition;\n-import ca.uhn.fhir.jpa.dao.DaoRegistry;\n-import ca.uhn.fhir.jpa.dao.IFhirResourceDao;\n-import ca.uhn.fhir.jpa.subscription.module.cache.ActiveSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.IResourceRetriever;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n import ca.uhn.fhir.rest.server.exceptions.ResourceGoneException;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n \n-@Service\n public class DaoResourceRetriever implements IResourceRetriever {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDYyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405164628", "bodyText": "Oh yeah.. Good point! Done", "author": "jamesagnew", "createdAt": "2020-04-07T23:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/DaoResourceRetriever.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/DaoResourceRetriever.java\ndeleted file mode 100644\nindex f7891507e4..0000000000\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/DaoResourceRetriever.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.match.deliver;\n-\n-/*-\n- * #%L\n- * HAPI FHIR Subscription Server\n- * %%\n- * Copyright (C) 2014 - 2020 University Health Network\n- * %%\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * #L%\n- */\n-\n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.context.RuntimeResourceDefinition;\n-import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n-import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n-import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n-import ca.uhn.fhir.rest.server.exceptions.ResourceGoneException;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.IIdType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class DaoResourceRetriever implements IResourceRetriever {\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(ActiveSubscription.class);\n-\n-\t/**\n-\t * Constructor\n-\t */\n-\tpublic DaoResourceRetriever() {\n-\t\tsuper();\n-\t}\n-\n-\t/**\n-\t * Constructor\n-\t */\n-\tpublic DaoResourceRetriever(FhirContext theFhirContext, DaoRegistry theDaoRegistry) {\n-\t\tmyFhirContext = theFhirContext;\n-\t\tmyDaoRegistry = theDaoRegistry;\n-\t}\n-\n-\t@Autowired\n-\tprivate FhirContext myFhirContext;\n-\t@Autowired\n-\tprivate DaoRegistry myDaoRegistry;\n-\n-\t@Override\n-\tpublic IBaseResource getResource(IIdType payloadId) throws ResourceGoneException {\n-\t\tRuntimeResourceDefinition resourceDef = myFhirContext.getResourceDefinition(payloadId.getResourceType());\n-\t\tIFhirResourceDao dao = myDaoRegistry.getResourceDao(resourceDef.getImplementingClass());\n-\t\treturn dao.read(payloadId.toVersionless());\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyODk0NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405028944", "bodyText": "omg this is so much cleaner!", "author": "fil512", "createdAt": "2020-04-07T18:37:40Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/matcher/subscriber/SubscriptionActivatingSubscriber.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package ca.uhn.fhir.jpa.subscription.match.matcher.subscriber;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscriptionChannelType;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionStrategyEvaluator;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionCanonicalizer;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionRegistry;\n+import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n+import ca.uhn.fhir.util.SubscriptionUtil;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.MessagingException;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Responsible for transitioning subscription resources from REQUESTED to ACTIVE\n+ * Once activated, the subscription is added to the SubscriptionRegistry.\n+ * <p>\n+ * Also validates criteria.  If invalid, rejects the subscription without persisting the subscription.\n+ */\n+public class SubscriptionActivatingSubscriber extends BaseSubscriberForSubscriptionResources implements MessageHandler {\n+\tprivate Logger ourLog = LoggerFactory.getLogger(SubscriptionActivatingSubscriber.class);\n+\t@Autowired\n+\tprivate SubscriptionRegistry mySubscriptionRegistry;\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate SubscriptionCanonicalizer mySubscriptionCanonicalizer;\n+\t@Autowired\n+\tprivate DaoConfig myDaoConfig;\n+\t@Autowired\n+\tprivate SubscriptionStrategyEvaluator mySubscriptionStrategyEvaluator;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionActivatingSubscriber() {\n+\t\tsuper();\n+\t}\n+\n+\t@Override\n+\tpublic void handleMessage(@Nonnull Message<?> theMessage) throws MessagingException {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNjA4MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405036080", "bodyText": "Wow.  This is a big change.  I like it.  Decouples the sender from the receiver which is how queues are supposed to work.  Will make testing this stuff more robust--Over the months I maintained this code, I spent a lot of time in this method dealing with sender/reciever pairing.  Decoupling it should make it simpler and cleaner.", "author": "fil512", "createdAt": "2020-04-07T18:49:23Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/submit/interceptor/SubscriptionMatcherInterceptor.java", "diffHunk": "@@ -66,41 +65,38 @@ public SubscriptionMatcherInterceptor() {\n \t\tsuper();\n \t}\n \n-\tpublic void start() {\n+\t@EventListener(classes = {ContextRefreshedEvent.class})\n+\tpublic void startIfNeeded() {\n \t\tif (myMatchingChannel == null) {\n-\t\t\tmyMatchingChannel = mySubscriptionChannelFactory.newMatchingChannel(SUBSCRIPTION_MATCHING_CHANNEL_NAME);\n-\t\t}\n-\t\tmyMatchingChannel.subscribe(mySubscriptionMatchingSubscriber);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NTE5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405045190", "bodyText": "Want to draw your attention to the TODO below in case it is relevant to the changes you made", "author": "fil512", "createdAt": "2020-04-07T19:04:22Z", "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java", "diffHunk": "@@ -80,18 +83,14 @@ public void syncSubscriptions() {\n \t\t}\n \t}\n \n-\t@VisibleForTesting\n-\tvoid acquireSemaphoreForUnitTest() throws InterruptedException {\n-\t\tmySyncSubscriptionsSemaphore.acquire();\n-\t}\n-\n-\n \t@PostConstruct\n \tpublic void scheduleJob() {\n \t\tScheduledJobDefinition jobDetail = new ScheduledJobDefinition();\n \t\tjobDetail.setId(getClass().getName());\n \t\tjobDetail.setJobClass(Job.class);\n \t\tmySchedulerService.scheduleLocalJob(DateUtils.MILLIS_PER_MINUTE, jobDetail);\n+\n+\t\tsyncSubscriptions();", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java\nindex e27e27ea6d..a7129ff551 100644\n--- a/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java\n+++ b/hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java\n\n@@ -93,14 +93,9 @@ public class SubscriptionLoader {\n \t\tsyncSubscriptions();\n \t}\n \n-\tpublic static class Job implements HapiJob {\n-\t\t@Autowired\n-\t\tprivate SubscriptionLoader myTarget;\n-\n-\t\t@Override\n-\t\tpublic void execute(JobExecutionContext theContext) {\n-\t\t\tmyTarget.syncSubscriptions();\n-\t\t}\n+\t@VisibleForTesting\n+\tpublic void acquireSemaphoreForUnitTest() throws InterruptedException {\n+\t\tmySyncSubscriptionsSemaphore.acquire();\n \t}\n \n \t@VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0ODc0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405048747", "bodyText": "nice test!", "author": "fil512", "createdAt": "2020-04-07T19:10:50Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/submit/interceptor/SubscriptionSubmitInterceptorLoaderTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.subscription.submit.interceptor;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n+import ca.uhn.fhir.jpa.model.sched.ISchedulerService;\n+import ca.uhn.fhir.jpa.searchparam.config.SearchParamConfig;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamProvider;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.SubscriptionChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.submit.config.SubscriptionSubmitterConfig;\n+import org.hl7.fhir.dstu2.model.Subscription;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = {\n+\tSubscriptionSubmitterConfig.class,\n+\tSearchParamConfig.class,\n+\tSubscriptionSubmitInterceptorLoaderTest.MyConfig.class\n+})\n+public class SubscriptionSubmitInterceptorLoaderTest {\n+\n+\t@MockBean\n+\tprivate ISearchParamProvider mySearchParamProvider;\n+\t@MockBean\n+\tprivate ISchedulerService mySchedulerService;\n+\t@MockBean\n+\tprivate IInterceptorService myInterceptorService;\n+\t@MockBean\n+\tprivate IValidationSupport myValidationSupport;\n+\t@MockBean\n+\tprivate SubscriptionChannelFactory mySubscriptionChannelFactory;\n+\t@MockBean\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate SubscriptionSubmitInterceptorLoader mySubscriptionSubmitInterceptorLoader;\n+\t@Autowired\n+\tprivate SubscriptionMatcherInterceptor mySubscriptionMatcherInterceptor;\n+\n+\t/**\n+\t * It should be possible to run only the {@link SubscriptionSubmitterConfig} without the\n+\t * {@link ca.uhn.fhir.jpa.subscription.match.config.SubscriptionProcessorConfig}\n+\t */\n+\t@Test\n+\tpublic void testLoaderCanRunWithoutProcessorConfigLoaded() {\n+\t\tverify(myInterceptorService, times(1)).registerInterceptor(eq(mySubscriptionMatcherInterceptor));", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTc4Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405049783", "bodyText": "Is this test still relevant?  Maybe for mongo?", "author": "fil512", "createdAt": "2020-04-07T19:12:40Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/match/matcher/matching/DaoSubscriptionMatcherTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package ca.uhn.fhir.jpa.subscription.match.matcher.matching;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n+import ca.uhn.fhir.jpa.model.sched.ISchedulerService;\n+import ca.uhn.fhir.jpa.searchparam.config.SearchParamConfig;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamProvider;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.SubscriptionChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.match.config.SubscriptionProcessorConfig;\n+import ca.uhn.fhir.jpa.subscription.submit.config.SubscriptionSubmitterConfig;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = {\n+\tSubscriptionProcessorConfig.class,\n+\tSearchParamConfig.class,\n+\tDaoSubscriptionMatcherTest.MyConfig.class\n+})\n+public class DaoSubscriptionMatcherTest {\n+\n+\t@Autowired(required = false)\n+\tprivate PlatformTransactionManager myTxManager;\n+\t@Autowired\n+\tprivate DaoSubscriptionMatcher mySvc;\n+\t@MockBean\n+\tprivate ModelConfig myModelConfig;\n+\t@MockBean\n+\tprivate DaoConfig myDaoConfig;\n+\t@MockBean\n+\tprivate ISearchParamProvider mySearchParamProvider;\n+\t@MockBean\n+\tprivate ISchedulerService mySchedulerService;\n+\t@MockBean\n+\tprivate IInterceptorService myInterceptorService;\n+\t@MockBean\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@MockBean\n+\tprivate IValidationSupport myValidationSupport;\n+\t@MockBean\n+\tprivate SubscriptionChannelFactory mySubscriptionChannelFactory;\n+\n+\t/**\n+\t * Make sure that if we're only running the {@link SubscriptionSubmitterConfig}, we don't need\n+\t * a transaction manager\n+\t */\n+\t@Test\n+\tpublic void testSubmitterCanRunWithoutTransactionManager() {\n+\t\tassertNull(myTxManager);", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MDU0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405050542", "bodyText": "This test still looks useful.  Consider keeping it.", "author": "fil512", "createdAt": "2020-04-07T19:13:59Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionLoaderTest.java", "diffHunk": "@@ -1,69 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import ca.uhn.fhir.jpa.subscription.module.cache.SubscriptionLoader;\n-import ca.uhn.fhir.jpa.subscription.module.config.MockFhirClientSubscriptionProvider;\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-public class SubscriptionLoaderTest extends BaseBlockingQueueSubscribableChannelDstu3Test {\n-\tprivate static final int MOCK_FHIR_CLIENT_FAILURES = 3;\n-\t@Autowired\n-\tprivate MockFhirClientSubscriptionProvider myMockFhirClientSubscriptionProvider;\n-\n-\t@Before\n-\tpublic void setFailCount() {\n-\t\tmyMockFhirClientSubscriptionProvider.setFailCount(MOCK_FHIR_CLIENT_FAILURES);\n-\t}\n-\n-\t@After\n-\tpublic void restoreFailCount() {\n-\t\tmyMockFhirClientSubscriptionProvider.setFailCount(0);\n-\t}\n-\n-\t@Test\n-\tpublic void testSubscriptionLoaderFhirClientDown() throws Exception {\n-\t\tString payload = \"application/fhir+json\";\n-\n-\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + myCode + \"&_format=xml\";\n-\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + myCode + \"111&_format=xml\";\n-\n-\t\tList<Subscription> subs = new ArrayList<>();\n-\t\tsubs.add(makeActiveSubscription(criteria1, payload, ourListenerServerBase));\n-\t\tsubs.add(makeActiveSubscription(criteria2, payload, ourListenerServerBase));\n-\n-\t\tmySubscriptionActivatedPost.setExpectedCount(2);\n-\t\tinitSubscriptionLoader(subs, \"uuid\");\n-\t\tmySubscriptionActivatedPost.awaitExpected();\n-\t\tassertEquals(0, myMockFhirClientSubscriptionProvider.getFailCount());\n-\t}\n-\n-\n-\t@Test\n-\tpublic void testMultipleThreadsDontBlock() throws InterruptedException {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionLoaderTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionLoaderTest.java\nnew file mode 100644\nindex 0000000000..31af0d2160\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionLoaderTest.java\n\n@@ -0,0 +1,71 @@\n+package ca.uhn.fhir.jpa.subscription.module.cache;\n+\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionLoader;\n+import ca.uhn.fhir.jpa.subscription.module.config.MockFhirClientSubscriptionProvider;\n+import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n+import org.hl7.fhir.dstu3.model.Subscription;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SubscriptionLoaderTest extends BaseBlockingQueueSubscribableChannelDstu3Test {\n+\tprivate static final int MOCK_FHIR_CLIENT_FAILURES = 3;\n+\t@Autowired\n+\tprivate MockFhirClientSubscriptionProvider myMockFhirClientSubscriptionProvider;\n+\n+\t@Before\n+\tpublic void setFailCount() {\n+\t\tmyMockFhirClientSubscriptionProvider.setFailCount(MOCK_FHIR_CLIENT_FAILURES);\n+\t}\n+\n+\t@After\n+\tpublic void restoreFailCount() {\n+\t\tmyMockFhirClientSubscriptionProvider.setFailCount(0);\n+\t}\n+\n+\t@Test\n+\t@Ignore\n+\tpublic void testSubscriptionLoaderFhirClientDown() throws Exception {\n+\t\tString payload = \"application/fhir+json\";\n+\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + myCode + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + myCode + \"111&_format=xml\";\n+\n+\t\tList<Subscription> subs = new ArrayList<>();\n+\t\tsubs.add(makeActiveSubscription(criteria1, payload, ourListenerServerBase));\n+\t\tsubs.add(makeActiveSubscription(criteria2, payload, ourListenerServerBase));\n+\n+\t\tmySubscriptionActivatedPost.setExpectedCount(2);\n+\t\tinitSubscriptionLoader(subs, \"uuid\");\n+\t\tmySubscriptionActivatedPost.awaitExpected();\n+\t\tassertEquals(0, myMockFhirClientSubscriptionProvider.getFailCount());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testMultipleThreadsDontBlock() throws InterruptedException {\n+\t\tSubscriptionLoader svc = new SubscriptionLoader();\n+\t\tCountDownLatch latch = new CountDownLatch(1);\n+\t\tnew Thread(()->{\n+\t\t\ttry {\n+\t\t\t\tsvc.acquireSemaphoreForUnitTest();\n+\t\t\t\tlatch.countDown();\n+\t\t\t} catch (InterruptedException theE) {\n+\t\t\t\t// ignore\n+\t\t\t}\n+\t\t}).start();\n+\n+\t\tlatch.await(10, TimeUnit.SECONDS);\n+\t\tsvc.syncSubscriptions();\n+\t}\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTM2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405051366", "bodyText": "This test should not be deleted.", "author": "fil512", "createdAt": "2020-04-07T19:15:31Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistrySharedTest.java", "diffHunk": "@@ -1,44 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.channel.ISubscriptionDeliveryChannelNamer;\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.Test;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Primary;\n-import org.springframework.test.annotation.DirtiesContext;\n-\n-@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n-public class SubscriptionRegistrySharedTest extends BaseSubscriptionRegistryTest {\n-\n-\tprivate static final String OTHER_ID = \"OTHER_ID\";\n-\n-\t@Configuration\n-\tpublic static class SpringConfig {\n-\t\t@Primary\n-\t\t@Bean\n-\t\tISubscriptionDeliveryChannelNamer subscriptionDeliveryChannelNamer() {\n-\t\t\treturn new SharedNamer();\n-\t\t}\n-\n-\t\tprivate class SharedNamer implements ISubscriptionDeliveryChannelNamer {\n-\t\t\t@Override\n-\t\t\tpublic String nameFromSubscription(CanonicalSubscription theCanonicalSubscription) {\n-\t\t\t\treturn \"shared\";\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testTwoSubscriptionsOneChannel() {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistrySharedTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistrySharedTest.java\nnew file mode 100644\nindex 0000000000..884f56810e\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistrySharedTest.java\n\n@@ -0,0 +1,50 @@\n+package ca.uhn.fhir.jpa.subscription.module.cache;\n+\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.ISubscriptionDeliveryChannelNamer;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscription;\n+import org.hl7.fhir.dstu3.model.Subscription;\n+import org.junit.Test;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n+@ContextConfiguration(classes = {\n+\tSubscriptionRegistrySharedTest.SpringConfig.class\n+})\n+public class SubscriptionRegistrySharedTest extends BaseSubscriptionRegistryTest {\n+\n+\tprivate static final String OTHER_ID = \"OTHER_ID\";\n+\n+\t@Configuration\n+\tpublic static class SpringConfig {\n+\n+\t\t@Primary\n+\t\t@Bean\n+\t\tISubscriptionDeliveryChannelNamer subscriptionDeliveryChannelNamer() {\n+\t\t\treturn new SharedNamer();\n+\t\t}\n+\n+\t\tprivate class SharedNamer implements ISubscriptionDeliveryChannelNamer {\n+\t\t\t@Override\n+\t\t\tpublic String nameFromSubscription(CanonicalSubscription theCanonicalSubscription) {\n+\t\t\t\treturn \"shared\";\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTwoSubscriptionsOneChannel() {\n+\t\tSubscription subscription = createSubscription();\n+\t\tassertRegistrySize(0);\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\t\tSubscription otherSubscription = createSubscription();\n+\t\totherSubscription.setId(OTHER_ID);\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(otherSubscription);\n+\t\tassertRegistrySize(2, 1);\n+\t}\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjUxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405052514", "bodyText": "These are important tests that shouldn't be deleted.", "author": "fil512", "createdAt": "2020-04-07T19:17:34Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistryTest.java", "diffHunk": "@@ -1,59 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-public class SubscriptionRegistryTest extends BaseSubscriptionRegistryTest {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MDU0Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405140547", "bodyText": "Restored", "author": "jamesagnew", "createdAt": "2020-04-07T22:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistryTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistryTest.java\nnew file mode 100644\nindex 0000000000..0cf1edb523\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistryTest.java\n\n@@ -0,0 +1,60 @@\n+package ca.uhn.fhir.jpa.subscription.module.cache;\n+\n+import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n+import org.hl7.fhir.dstu3.model.Subscription;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class SubscriptionRegistryTest extends BaseSubscriptionRegistryTest {\n+\t@Test\n+\tpublic void updateSubscriptionReusesActiveSubscription() {\n+\t\tSubscription subscription = createSubscription();\n+\t\tassertRegistrySize(0);\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\t\tActiveSubscription origActiveSubscription = mySubscriptionRegistry.get(SUBSCRIPTION_ID);\n+\t\tassertEquals(ORIG_CRITERIA, origActiveSubscription.getCriteriaString());\n+\n+\t\tsubscription.setCriteria(NEW_CRITERIA);\n+\t\tassertEquals(ORIG_CRITERIA, origActiveSubscription.getCriteriaString());\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\t\tActiveSubscription newActiveSubscription = mySubscriptionRegistry.get(SUBSCRIPTION_ID);\n+\t\tassertEquals(NEW_CRITERIA, newActiveSubscription.getCriteriaString());\n+\t\t// The same object\n+\t\tassertTrue(newActiveSubscription == origActiveSubscription);\n+\t}\n+\n+\t@Test\n+\tpublic void updateSubscriptionDoesntReusesActiveSubscriptionWhenChannelChanges() {\n+\t\tSubscription subscription = createSubscription();\n+\t\tassertRegistrySize(0);\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\n+\t\tActiveSubscription origActiveSubscription = mySubscriptionRegistry.get(SUBSCRIPTION_ID);\n+\t\tassertEquals(ORIG_CRITERIA, origActiveSubscription.getCriteriaString());\n+\n+\t\tsetChannel(subscription, Subscription.SubscriptionChannelType.EMAIL);\n+\n+\t\tassertEquals(ORIG_CRITERIA, origActiveSubscription.getCriteriaString());\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\n+\t\tActiveSubscription newActiveSubscription = mySubscriptionRegistry.get(SUBSCRIPTION_ID);\n+\t\t// A new object\n+\t\tassertFalse(newActiveSubscription == origActiveSubscription);\n+\t}\n+\n+\t@Test\n+\tpublic void updateRemove() {\n+\t\tSubscription subscription = createSubscription();\n+\t\tassertRegistrySize(0);\n+\t\tmySubscriptionRegistry.registerSubscriptionUnlessAlreadyRegistered(subscription);\n+\t\tassertRegistrySize(1);\n+\t\tmySubscriptionRegistry.unregisterSubscriptionIfRegistered(subscription.getId());\n+\t\tassertRegistrySize(0);\n+\t}\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDk4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405054987", "bodyText": "These are important tests that shouldn't be deleted.", "author": "fil512", "createdAt": "2020-04-07T19:21:50Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR3Test.java", "diffHunk": "@@ -1,645 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.matcher;\n-\n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.searchparam.matcher.InMemoryMatchResult;\n-import ca.uhn.fhir.jpa.searchparam.matcher.SearchParamMatcher;\n-import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n-import ca.uhn.fhir.rest.api.server.IBundleProvider;\n-import ca.uhn.fhir.rest.server.SimpleBundleProvider;\n-import ca.uhn.fhir.util.UrlUtil;\n-import org.hl7.fhir.dstu3.model.*;\n-import org.hl7.fhir.dstu3.model.codesystems.MedicationRequestCategory;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.IIdType;\n-import org.junit.After;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import static org.junit.Assert.*;\n-\n-public class InMemorySubscriptionMatcherR3Test extends BaseSubscriptionDstu3Test {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNzEzNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405127134", "bodyText": "Whoops. I don't think I meant to delete these, I was aiming at just the standalone tests. Good catch, I have restored them.", "author": "jamesagnew", "createdAt": "2020-04-07T21:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTEzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405141132", "bodyText": "Restored", "author": "jamesagnew", "createdAt": "2020-04-07T22:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR3Test.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR3Test.java\nnew file mode 100644\nindex 0000000000..dc2b5738e7\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR3Test.java\n\n@@ -0,0 +1,649 @@\n+package ca.uhn.fhir.jpa.subscription.module.matcher;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n+import ca.uhn.fhir.jpa.searchparam.matcher.InMemoryMatchResult;\n+import ca.uhn.fhir.jpa.searchparam.matcher.SearchParamMatcher;\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionMatchingStrategy;\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionStrategyEvaluator;\n+import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.server.SimpleBundleProvider;\n+import ca.uhn.fhir.util.UrlUtil;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.dstu3.model.codesystems.MedicationRequestCategory;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class InMemorySubscriptionMatcherR3Test extends BaseSubscriptionDstu3Test {\n+\t@Autowired\n+\tSubscriptionStrategyEvaluator mySubscriptionStrategyEvaluator;\n+\t@Autowired\n+\tSearchParamMatcher mySearchParamMatcher;\n+\t@Autowired\n+\tModelConfig myModelConfig;\n+\t@Autowired\n+\tFhirContext myFhirContext;\n+\n+\tprivate void assertUnsupported(IBaseResource resource, String criteria) {\n+\t\tassertFalse(mySearchParamMatcher.match(criteria, resource, null).supported());\n+\t\tassertEquals(SubscriptionMatchingStrategy.DATABASE, mySubscriptionStrategyEvaluator.determineStrategy(criteria));\n+\t}\n+\n+\tprivate void assertMatched(IBaseResource resource, String criteria) {\n+\t\tInMemoryMatchResult result = mySearchParamMatcher.match(criteria, resource, null);\n+\n+\t\tassertTrue(result.supported());\n+\t\tassertTrue(result.matched());\n+\t\tassertEquals(SubscriptionMatchingStrategy.IN_MEMORY, mySubscriptionStrategyEvaluator.determineStrategy(criteria));\n+\t}\n+\n+\tprivate void assertNotMatched(IBaseResource resource, String criteria) {\n+\t\tassertNotMatched(resource, criteria, SubscriptionMatchingStrategy.IN_MEMORY);\n+\t}\n+\n+\tprivate void assertNotMatched(IBaseResource resource, String criteria, SubscriptionMatchingStrategy theSubscriptionMatchingStrategy) {\n+\t\tInMemoryMatchResult result = mySearchParamMatcher.match(criteria, resource, null);\n+\n+\t\tassertTrue(result.supported());\n+\t\tassertFalse(result.matched());\n+\n+\t\tassertEquals(theSubscriptionMatchingStrategy, mySubscriptionStrategyEvaluator.determineStrategy(criteria));\n+\t}\n+\n+\t@After\n+\tpublic void after() {\n+\t\tmyModelConfig.setTreatBaseUrlsAsLocal(new ModelConfig().getTreatBaseUrlsAsLocal());\n+\t}\n+\n+\t/**\n+\t * Technically this is an invalid reference in most cases, but this shouldn't choke\n+\t * the matcher in the case that it gets used.\n+\t */\n+\t@Test\n+\tpublic void testPlaceholderIdInReference() {\n+\n+\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\tpr.setId(\"ProcedureRequest/123\");\n+\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.ORIGINALORDER);\n+\n+\t\tpr.setSubject(new Reference(\"urn:uuid:aaaaaaaaaa\"));\n+\t\tassertMatched(pr, \"ProcedureRequest?intent=original-order\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?subject=Patient/123\");\n+\n+\t\tpr.setSubject(new Reference(\"Foo/123\"));\n+\t\tassertMatched(pr, \"ProcedureRequest?intent=original-order\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?subject=Patient/123\");\n+\n+\t\tpr.setSubject(new Reference(\"Patient/\"));\n+\t\tassertMatched(pr, \"ProcedureRequest?intent=original-order\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?subject=Patient/123\");\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testResourceById() {\n+\n+\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\tpr.setId(\"ProcedureRequest/123\");\n+\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.ORIGINALORDER);\n+\n+\t\tassertMatched(pr, \"ProcedureRequest?_id=123\");\n+\t\tassertMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/123\");\n+\t\tassertMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/123,ProcedureRequest/999\");\n+\t\tassertMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/123&_id=ProcedureRequest/123\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/888\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/888,ProcedureRequest/999\");\n+\t\tassertNotMatched(pr, \"ProcedureRequest?_id=ProcedureRequest/123&_id=ProcedureRequest/888\");\n+\n+\t}\n+\n+\n+\t\t/*\n+\tThe following tests are copied from an e-mail from a site using HAPI FHIR\n+\t */\n+\n+\t@Test\n+\tpublic void testQuestionnaireResponse() {\n+\t\tString criteria = \"QuestionnaireResponse?questionnaire=HomeAbsenceHospitalizationRecord,ARIncenterAbsRecord\";\n+\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/HomeAbsenceHospitalizationRecord\");\n+\t\t\tassertMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/Other\");\n+\t\t\tassertNotMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setDisplay(\"Questionnaire/HomeAbsenceHospitalizationRecord\");\n+\t\t\tassertNotMatched(qr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testCommunicationRequest() {\n+\t\tString criteria = \"CommunicationRequest?occurrence==2018-10-17\";\n+\n+\t\t{\n+\t\t\tCommunicationRequest cr = new CommunicationRequest();\n+\t\t\tcr.setOccurrence(new DateTimeType(\"2018-10-17\"));\n+\t\t\tassertMatched(cr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tCommunicationRequest cr = new CommunicationRequest();\n+\t\t\tcr.setOccurrence(new DateTimeType(\"2018-10-16\"));\n+\t\t\tassertNotMatched(cr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tCommunicationRequest cr = new CommunicationRequest();\n+\t\t\tcr.setOccurrence(new DateTimeType(\"2018-10-16\"));\n+\t\t\tassertNotMatched(cr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testProcedureRequest() {\n+\t\tString criteria = \"ProcedureRequest?intent=original-order\";\n+\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.ORIGINALORDER);\n+\t\t\tassertMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.ORDER);\n+\t\t\tassertNotMatched(pr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testObservationContextTypeUnsupported() {\n+\t\tString criteria = \"Observation?code=17861-6&context.type=IHD\";\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"XXX\");\n+\t\t\tassertNotMatched(obs, criteria, SubscriptionMatchingStrategy.DATABASE);\n+\t\t}\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"17861-6\");\n+\t\t\tassertUnsupported(obs, criteria);\n+\t\t}\n+\t}\n+\n+\t// Check that it still fails fast even if the chained parameter is first\n+\t@Test\n+\tpublic void testObservationContextTypeUnsupportedReverse() {\n+\t\tString criteria = \"Observation?context.type=IHD&code=17861-6\";\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"XXX\");\n+\t\t\tassertNotMatched(obs, criteria, SubscriptionMatchingStrategy.DATABASE);\n+\t\t}\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"17861-6\");\n+\t\t\tassertUnsupported(obs, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void medicationRequestOutpatient() {\n+\t\t// Note the date== evaluates to date=eq which is a legacy format supported by hapi fhir\n+\t\tString criteria = \"MedicationRequest?intent=instance-order&category=outpatient&date==2018-10-19\";\n+\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.INSTANCEORDER);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tDosage dosage = new Dosage();\n+\t\t\tTiming timing = new Timing();\n+\t\t\ttiming.getEvent().add(new DateTimeType(\"2018-10-19\"));\n+\t\t\tdosage.setTiming(timing);\n+\t\t\tmr.getDosageInstruction().add(dosage);\n+\t\t\tassertMatched(mr, criteria);\n+\t\t}\n+\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.INSTANCEORDER);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.INPATIENT.toCode());\n+\t\t\tDosage dosage = new Dosage();\n+\t\t\tTiming timing = new Timing();\n+\t\t\ttiming.getEvent().add(new DateTimeType(\"2018-10-19\"));\n+\t\t\tdosage.setTiming(timing);\n+\t\t\tmr.getDosageInstruction().add(dosage);\n+\t\t\tassertNotMatched(mr, criteria);\n+\t\t}\n+\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.INSTANCEORDER);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tDosage dosage = new Dosage();\n+\t\t\tTiming timing = new Timing();\n+\t\t\ttiming.getEvent().add(new DateTimeType(\"2018-10-20\"));\n+\t\t\tdosage.setTiming(timing);\n+\t\t\tmr.getDosageInstruction().add(dosage);\n+\t\t\tassertNotMatched(mr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testMedicationRequestStatuses() {\n+\t\tString criteria = \"MedicationRequest?intent=plan&category=outpatient&status=suspended,entered-in-error,cancelled,stopped\";\n+\n+\t\t// Note suspended is an invalid status and will never match\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tmr.setStatus(MedicationRequest.MedicationRequestStatus.ENTEREDINERROR);\n+\t\t\tassertMatched(mr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tmr.setStatus(MedicationRequest.MedicationRequestStatus.CANCELLED);\n+\t\t\tassertMatched(mr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tmr.setStatus(MedicationRequest.MedicationRequestStatus.STOPPED);\n+\t\t\tassertMatched(mr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tMedicationRequest mr = new MedicationRequest();\n+\t\t\tmr.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);\n+\t\t\tmr.getCategory().addCoding().setCode(MedicationRequestCategory.OUTPATIENT.toCode());\n+\t\t\tmr.setStatus(MedicationRequest.MedicationRequestStatus.ACTIVE);\n+\t\t\tassertNotMatched(mr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testBloodTest() {\n+\t\tString criteria = \"Observation?code=FR_Org1Blood2nd,FR_Org1Blood3rd,FR_Org%201BldCult,FR_Org2Blood2nd,FR_Org2Blood3rd,FR_Org%202BldCult,FR_Org3Blood2nd,FR_Org3Blood3rd,FR_Org3BldCult,FR_Org4Blood2nd,FR_Org4Blood3rd,FR_Org4BldCult,FR_Org5Blood2nd,FR_Org5Blood3rd,FR_Org%205BldCult,FR_Org6Blood2nd,FR_Org6Blood3rd,FR_Org6BldCult,FR_Org7Blood2nd,FR_Org7Blood3rd,FR_Org7BldCult,FR_Org8Blood2nd,FR_Org8Blood3rd,FR_Org8BldCult,FR_Org9Blood2nd,FR_Org9Blood3rd,FR_Org9BldCult,FR_Bld2ndCulture,FR_Bld3rdCulture,FR_Blood%20Culture,FR_Com1Bld3rd,FR_Com1BldCult,FR_Com2Bld2nd,FR_Com2Bld3rd,FR_Com2BldCult,FR_CultureBld2nd,FR_CultureBld3rd,FR_CultureBldCul,FR_GmStainBldCul,FR_GramStain2Bld,FR_GramStain3Bld,FR_GramStNegBac&context.type=IHD\";\n+\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"FR_Org1Blood2nd\");\n+\t\t\tassertUnsupported(obs, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.getCode().addCoding().setCode(\"XXX\");\n+\t\t\tassertNotMatched(obs, criteria, SubscriptionMatchingStrategy.DATABASE);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testProcedureHemodialysis() {\n+\t\tString criteria = \"Procedure?category=Hemodialysis\";\n+\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCategory().addCoding().setCode(\"Hemodialysis\");\n+\t\t\tassertMatched(proc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCategory().addCoding().setCode(\"XXX\");\n+\t\t\tassertNotMatched(proc, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testProcedureHDStandard() {\n+\t\tString criteria = \"Procedure?code=HD_Standard&status=completed&location=Lab123\";\n+\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"HD_Standard\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.COMPLETED);\n+\t\t\tIIdType locId = new IdType(\"Location\", \"Lab123\");\n+\t\t\tproc.getLocation().setReference(locId.getValue());\n+\t\t\tassertMatched(proc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"HD_Standard\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.COMPLETED);\n+\t\t\tIIdType locId = new IdType(\"Location\", \"XXX\");\n+\t\t\tproc.getLocation().setReference(locId.getValue());\n+\t\t\tassertNotMatched(proc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"XXX\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.COMPLETED);\n+\t\t\tIIdType locId = new IdType(\"Location\", \"Lab123\");\n+\t\t\tproc.getLocation().setReference(locId.getValue());\n+\t\t\tassertNotMatched(proc, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testProvenance() {\n+\t\tString criteria = \"Provenance?activity=http://hl7.org/fhir/v3/DocumentCompletion%7CAU\";\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"Provenance\");\n+\t\tsp.setCode(\"activity\");\n+\t\tsp.setType(Enumerations.SearchParamType.TOKEN);\n+\t\tsp.setExpression(\"Provenance.activity\");\n+\t\tsp.setXpathUsage(SearchParameter.XPathUsageType.NORMAL);\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\n+\t\tIBundleProvider bundle = new SimpleBundleProvider(Collections.singletonList(sp), \"uuid\");\n+\t\tinitSearchParamRegistry(bundle);\n+\n+\t\t{\n+\t\t\tProvenance prov = new Provenance();\n+\t\t\tprov.setActivity(new Coding().setSystem(\"http://hl7.org/fhir/v3/DocumentCompletion\").setCode(\"AU\"));\n+\t\t\tassertMatched(prov, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProvenance prov = new Provenance();\n+\t\t\tassertNotMatched(prov, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProvenance prov = new Provenance();\n+\t\t\tprov.setActivity(new Coding().setCode(\"XXX\"));\n+\t\t\tassertNotMatched(prov, criteria);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testBodySite() {\n+\t\tString criteria = \"BodySite?accessType=Catheter,PD%20Catheter\";\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"BodySite\");\n+\t\tsp.setCode(\"accessType\");\n+\t\tsp.setType(Enumerations.SearchParamType.TOKEN);\n+\t\tsp.setExpression(\"BodySite.extension('BodySite#accessType')\");\n+\t\tsp.setXpathUsage(SearchParameter.XPathUsageType.NORMAL);\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\n+\t\tIBundleProvider bundle = new SimpleBundleProvider(Collections.singletonList(sp), \"uuid\");\n+\t\tinitSearchParamRegistry(bundle);\n+\n+\t\t{\n+\t\t\tBodySite bodySite = new BodySite();\n+\t\t\tbodySite.addExtension().setUrl(\"BodySite#accessType\").setValue(new Coding().setCode(\"Catheter\"));\n+\t\t\tassertMatched(bodySite, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tBodySite bodySite = new BodySite();\n+\t\t\tbodySite.addExtension().setUrl(\"BodySite#accessType\").setValue(new Coding().setCode(\"PD Catheter\"));\n+\t\t\tassertMatched(bodySite, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tBodySite bodySite = new BodySite();\n+\t\t\tassertNotMatched(bodySite, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tBodySite bodySite = new BodySite();\n+\t\t\tbodySite.addExtension().setUrl(\"BodySite#accessType\").setValue(new Coding().setCode(\"XXX\"));\n+\t\t\tassertNotMatched(bodySite, criteria);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testProcedureAnyLocation() {\n+\t\tString criteria = \"Procedure?code=HD_Standard&status=completed\";\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"HD_Standard\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.COMPLETED);\n+\t\t\tIIdType locId = new IdType(\"Location\", \"Lab456\");\n+\t\t\tproc.getLocation().setReference(locId.getValue());\n+\t\t\tassertMatched(proc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"HD_Standard\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.ABORTED);\n+\t\t\tassertNotMatched(proc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedure proc = new Procedure();\n+\t\t\tproc.getCode().addCoding().setCode(\"XXX\");\n+\t\t\tproc.setStatus(Procedure.ProcedureStatus.COMPLETED);\n+\t\t\tassertNotMatched(proc, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testQuestionnaireResponseLong() {\n+\t\tString criteria = \"QuestionnaireResponse?questionnaire=HomeAbsenceHospitalizationRecord,ARIncenterAbsRecord,FMCSWDepressionSymptomsScreener,FMCAKIComprehensiveSW,FMCSWIntensiveScreener,FMCESRDComprehensiveSW,FMCNutritionProgressNote,FMCAKIComprehensiveRN\";\n+\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/HomeAbsenceHospitalizationRecord\");\n+\t\t\tassertMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/FMCSWIntensiveScreener\");\n+\t\t\tassertMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/FMCAKIComprehensiveRN\");\n+\t\t\tassertMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tassertNotMatched(qr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tQuestionnaireResponse qr = new QuestionnaireResponse();\n+\t\t\tqr.getQuestionnaire().setReference(\"Questionnaire/FMCAKIComprehensiveRM\");\n+\t\t\tassertNotMatched(qr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testProcedureRequestCategory() {\n+\t\tString criteria = \"ProcedureRequest?intent=instance-order&category=Laboratory,Ancillary%20Orders,Hemodialysis&occurrence==2018-10-19\";\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"ProcedureRequest\");\n+\t\tsp.setCode(\"category\");\n+\t\tsp.setType(Enumerations.SearchParamType.TOKEN);\n+\t\tsp.setExpression(\"ProcedureRequest.category\");\n+\t\tsp.setXpathUsage(SearchParameter.XPathUsageType.NORMAL);\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\n+\t\tIBundleProvider bundle = new SimpleBundleProvider(Collections.singletonList(sp), \"uuid\");\n+\t\tinitSearchParamRegistry(bundle);\n+\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"Laboratory\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"Ancillary Orders\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"Hemodialysis\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertNotMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"Hemodialysis\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertNotMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"Hemodialysis\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tassertNotMatched(pr, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tProcedureRequest pr = new ProcedureRequest();\n+\t\t\tpr.setIntent(ProcedureRequest.ProcedureRequestIntent.INSTANCEORDER);\n+\t\t\tCodeableConcept code = new CodeableConcept();\n+\t\t\tcode.addCoding().setCode(\"XXX\");\n+\t\t\tpr.getCategory().add(code);\n+\t\t\tpr.setOccurrence(new DateTimeType(\"2018-10-19\"));\n+\t\t\tassertNotMatched(pr, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testEposideOfCare() {\n+\t\tString criteria = \"EpisodeOfCare?status=active\";\n+\t\t{\n+\t\t\tEpisodeOfCare eoc = new EpisodeOfCare();\n+\t\t\teoc.setStatus(EpisodeOfCare.EpisodeOfCareStatus.ACTIVE);\n+\t\t\tassertMatched(eoc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tEpisodeOfCare eoc = new EpisodeOfCare();\n+\t\t\tassertNotMatched(eoc, criteria);\n+\t\t}\n+\t\t{\n+\t\t\tEpisodeOfCare eoc = new EpisodeOfCare();\n+\t\t\teoc.setStatus(EpisodeOfCare.EpisodeOfCareStatus.CANCELLED);\n+\t\t\tassertNotMatched(eoc, criteria);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testCommunicationRequestWithRefAndDate() {\n+\t\tString criteria = \"CommunicationRequest?requester=O1271,O1276&occurrence=ge2019-02-08T00:00:00-05:00&occurrence=le2019-02-09T00:00:00-05:00\";\n+\t\tCommunicationRequest cr = new CommunicationRequest();\n+\t\tcr.getRequester().getAgent().setReference(\"Organization/O1276\");\n+\t\tcr.setOccurrence(new DateTimeType(\"2019-02-08T00:01:00-05:00\"));\n+\t\tassertMatched(cr, criteria);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testCommunicationRequestWithRef() {\n+\t\tString criteria = \"CommunicationRequest?requester=O1271,O1276\";\n+\t\tCommunicationRequest cr = new CommunicationRequest();\n+\t\tcr.getRequester().getAgent().setReference(\"Organization/O1276\");\n+\t\tassertMatched(cr, criteria);\n+\t}\n+\n+\t@Test\n+\tpublic void testSystemWithNullValue() {\n+\t\tString criteria = \"Observation?code=17861-6\";\n+\t\tObservation observation = new Observation();\n+\t\tCodeableConcept code = new CodeableConcept();\n+\t\tobservation.getCode().addCoding().setSystem(\"http://loinc.org\");\n+\n+\t\tassertNotMatched(observation, criteria);\n+\t}\n+\n+\t@Test\n+\tpublic void testNullSystemNotNullValue() {\n+\t\tString criteria = \"Observation?code=17861-6\";\n+\t\tObservation observation = new Observation();\n+\t\tCodeableConcept code = new CodeableConcept();\n+\t\tobservation.getCode().addCoding().setCode(\"look ma no system\");\n+\n+\t\tassertNotMatched(observation, criteria);\n+\t}\n+\n+\t@Test\n+\tpublic void testExternalReferenceMatches() {\n+\t\tString goodReference = \"http://example.com/base/Organization/FOO\";\n+\t\tString goodCriteria = \"Patient?organization=\" + UrlUtil.escapeUrlParam(goodReference);\n+\n+\t\tString badReference1 = \"http://example.com/bad/Organization/FOO\";\n+\t\tString badCriteria1 = \"Patient?organization=\" + UrlUtil.escapeUrlParam(badReference1);\n+\n+\t\tString badReference2 = \"http://example.org/base/Organization/FOO\";\n+\t\tString badCriteria2 = \"Patient?organization=\" + UrlUtil.escapeUrlParam(badReference2);\n+\n+\t\tString badReference3 = \"https://example.com/base/Organization/FOO\";\n+\t\tString badCriteria3 = \"Patient?organization=\" + UrlUtil.escapeUrlParam(badReference3);\n+\n+\t\tString badReference4 = \"http://example.com/base/Organization/GOO\";\n+\t\tString badCriteria4 = \"Patient?organization=\" + UrlUtil.escapeUrlParam(badReference4);\n+\n+\t\tSet<String> urls = new HashSet<>();\n+\t\turls.add(\"http://example.com/base/\");\n+\t\tmyModelConfig.setTreatBaseUrlsAsLocal(urls);\n+\n+\t\tPatient patient = new Patient();\n+\t\tpatient.getManagingOrganization().setReference(\"Organization/FOO\");\n+\n+\t\tassertMatched(patient, goodCriteria);\n+\t\tassertNotMatched(patient, badCriteria1);\n+\t\tassertNotMatched(patient, badCriteria2);\n+\t\tassertNotMatched(patient, badCriteria3);\n+\t\tassertNotMatched(patient, badCriteria4);\n+\t}\n+\n+\t@Test\n+\tpublic void testLocationPositionNotSupported() {\n+\t\tLocation loc = new Location();\n+\t\tdouble latitude = 30.0;\n+\t\tdouble longitude = 40.0;\n+\t\tLocation.LocationPositionComponent position = new Location.LocationPositionComponent().setLatitude(latitude).setLongitude(longitude);\n+\t\tloc.setPosition(position);\n+\t\tdouble bigEnoughDistance = 100.0;\n+\t\tString badCriteria =\n+\t\t\t\"Location?\" +\n+\t\t\t\tLocation.SP_NEAR + \"=\" + latitude + \":\" + longitude +\n+\t\t\t\t\"&\" +\n+\t\t\t\tLocation.SP_NEAR_DISTANCE + \"=\" + bigEnoughDistance + \"|http://unitsofmeasure.org|km\";\n+\n+\t\tassertUnsupported(loc, badCriteria);\n+\t}\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTQ2OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405055469", "bodyText": "These are important tests that shouldn't be deleted.", "author": "fil512", "createdAt": "2020-04-07T19:22:47Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/SubscriptionStrategyEvaluatorTest.java", "diffHunk": "@@ -1,53 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.matcher;\n-\n-import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n-import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.matchers.JUnitMatchers.containsString;\n-\n-public class SubscriptionStrategyEvaluatorTest extends BaseSubscriptionDstu3Test {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTA1Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405141057", "bodyText": "Restored", "author": "jamesagnew", "createdAt": "2020-04-07T22:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/SubscriptionStrategyEvaluatorTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/SubscriptionStrategyEvaluatorTest.java\nnew file mode 100644\nindex 0000000000..6d01c515ac\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/SubscriptionStrategyEvaluatorTest.java\n\n@@ -0,0 +1,55 @@\n+package ca.uhn.fhir.jpa.subscription.module.matcher;\n+\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionMatchingStrategy;\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionStrategyEvaluator;\n+import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.matchers.JUnitMatchers.containsString;\n+\n+public class SubscriptionStrategyEvaluatorTest extends BaseSubscriptionDstu3Test {\n+\t@Autowired\n+\tSubscriptionStrategyEvaluator mySubscriptionStrategyEvaluator;\n+\n+\t@Rule\n+\tpublic ExpectedException exception = ExpectedException.none();\n+\n+\t@Test\n+\tpublic void testInMemory() {\n+\t\tassertInMemory(\"Observation?\");\n+\t\tassertInMemory(\"QuestionnaireResponse?questionnaire=HomeAbsenceHospitalizationRecord,ARIncenterAbsRecord\");\n+\t\tassertInMemory(\"CommunicationRequest?occurrence==2018-10-17\");\n+\t\tassertInMemory(\"ProcedureRequest?intent=original-order\");\n+\t\tassertInMemory(\"MedicationRequest?intent=instance-order&category=outpatient&date==2018-10-19\");\n+\t\tassertInMemory(\"MedicationRequest?intent=plan&category=outpatient&status=suspended,entered-in-error,cancelled,stopped\");\n+\t\tassertDatabase(\"Observation?code=FR_Org1Blood2nd,FR_Org1Blood3rd,FR_Org%201BldCult,FR_Org2Blood2nd,FR_Org2Blood3rd,FR_Org%202BldCult,FR_Org3Blood2nd,FR_Org3Blood3rd,FR_Org3BldCult,FR_Org4Blood2nd,FR_Org4Blood3rd,FR_Org4BldCult,FR_Org5Blood2nd,FR_Org5Blood3rd,FR_Org%205BldCult,FR_Org6Blood2nd,FR_Org6Blood3rd,FR_Org6BldCult,FR_Org7Blood2nd,FR_Org7Blood3rd,FR_Org7BldCult,FR_Org8Blood2nd,FR_Org8Blood3rd,FR_Org8BldCult,FR_Org9Blood2nd,FR_Org9Blood3rd,FR_Org9BldCult,FR_Bld2ndCulture,FR_Bld3rdCulture,FR_Blood%20Culture,FR_Com1Bld3rd,FR_Com1BldCult,FR_Com2Bld2nd,FR_Com2Bld3rd,FR_Com2BldCult,FR_CultureBld2nd,FR_CultureBld3rd,FR_CultureBldCul,FR_GmStainBldCul,FR_GramStain2Bld,FR_GramStain3Bld,FR_GramStNegBac&context.type=IHD\");\n+\t\tassertInMemory(\"Procedure?category=Hemodialysis\");\n+\t\tassertInMemory(\"Procedure?code=HD_Standard&status=completed&location=Lab123\");\n+\t\tassertInMemory(\"Procedure?code=HD_Standard&status=completed\");\n+\t\tassertInMemory(\"QuestionnaireResponse?questionnaire=HomeAbsenceHospitalizationRecord,ARIncenterAbsRecord,FMCSWDepressionSymptomsScreener,FMCAKIComprehensiveSW,FMCSWIntensiveScreener,FMCESRDComprehensiveSW,FMCNutritionProgressNote,FMCAKIComprehensiveRN\");\n+\t\tassertInMemory(\"EpisodeOfCare?status=active\");\n+\t\tassertInMemory(\"Observation?code=111111111&_format=xml\");\n+\t\tassertInMemory(\"Observation?code=SNOMED-CT|123&_format=xml\");\n+\n+\t\tassertDatabase(\"Observation?code=17861-6&context.type=IHD\");\n+\t\tassertDatabase(\"Observation?context.type=IHD&code=17861-6\");\n+\n+\t\texception.expect(InvalidRequestException.class);\n+\t\texception.expectMessage(containsString(\"Resource type Observation does not have a parameter with name: codeee\"));\n+\t\tassertInMemory(\"Observation?codeee=SNOMED-CT|123&_format=xml\");\n+\t}\n+\n+\tprivate void assertDatabase(String theCriteria) {\n+\t\tassertEquals(SubscriptionMatchingStrategy.DATABASE, mySubscriptionStrategyEvaluator.determineStrategy(theCriteria));\n+\t}\n+\n+\tprivate void assertInMemory(String theCriteria) {\n+\t\tassertEquals(SubscriptionMatchingStrategy.IN_MEMORY, mySubscriptionStrategyEvaluator.determineStrategy(theCriteria));\n+\t}\n+}\n+\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjY2Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405056663", "bodyText": "Deleted test.  Is this functionality tested elsewhere?", "author": "fil512", "createdAt": "2020-04-07T19:24:47Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionCheckingSubscriberTest.java", "diffHunk": "@@ -1,119 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.subscriber;\n-\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import ca.uhn.fhir.rest.api.Constants;\n-import org.hl7.fhir.dstu3.model.CodeableConcept;\n-import org.hl7.fhir.dstu3.model.Coding;\n-import org.hl7.fhir.dstu3.model.IdType;\n-import org.hl7.fhir.dstu3.model.Observation;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n- */\n-public class SubscriptionCheckingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTE5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405141199", "bodyText": "Restored", "author": "jamesagnew", "createdAt": "2020-04-07T22:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionCheckingSubscriberTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionCheckingSubscriberTest.java\nnew file mode 100644\nindex 0000000000..791d28b5c3\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionCheckingSubscriberTest.java\n\n@@ -0,0 +1,119 @@\n+package ca.uhn.fhir.jpa.subscription.module.subscriber;\n+\n+import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n+import ca.uhn.fhir.rest.api.Constants;\n+import org.hl7.fhir.dstu3.model.CodeableConcept;\n+import org.hl7.fhir.dstu3.model.Coding;\n+import org.hl7.fhir.dstu3.model.IdType;\n+import org.hl7.fhir.dstu3.model.Observation;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n+ */\n+public class SubscriptionCheckingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SubscriptionCheckingSubscriberTest.class);\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionApplicationFhirJson() throws Exception {\n+\t\tString payload = \"application/fhir+json\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111&_format=xml\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(1);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.awaitExpected();\n+\n+\t\tassertEquals(1, ourContentTypes.size());\n+\t\tassertEquals(Constants.CT_FHIR_JSON_NEW, ourContentTypes.get(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionApplicationXmlJson() throws Exception {\n+\t\tString payload = \"application/fhir+xml\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111&_format=xml\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(1);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.awaitExpected();\n+\n+\t\tassertEquals(1, ourContentTypes.size());\n+\t\tassertEquals(Constants.CT_FHIR_XML_NEW, ourContentTypes.get(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionWithoutPayload() throws Exception {\n+\t\tString payload = \"\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code;\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(0);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.clear();\n+\n+\t\tassertEquals(0, ourContentTypes.size());\n+\t}\n+\n+\t@Test\n+\tpublic void testReferenceWithDisplayOnly() throws Exception {\n+\t\tString payload = \"application/fhir+json\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111&_format=xml\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(1);\n+\t\tObservation observation = new Observation();\n+\t\tIdType id = new IdType(\"Observation\", nextId());\n+\t\tobservation.setId(id);\n+\n+\t\t// Reference has display only!\n+\t\tobservation.getSubject().setDisplay(\"Mr Jones\");\n+\n+\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\tobservation.setCode(codeableConcept);\n+\t\tCoding coding = codeableConcept.addCoding();\n+\t\tcoding.setCode(code);\n+\t\tcoding.setSystem(\"SNOMED-CT\");\n+\n+\t\tobservation.setStatus(Observation.ObservationStatus.FINAL);\n+\n+\t\tsendResource(observation);\n+\t\tourObservationListener.awaitExpected();\n+\n+\t\tassertEquals(1, ourContentTypes.size());\n+\t\tassertEquals(Constants.CT_FHIR_JSON_NEW, ourContentTypes.get(0));\n+\t}\n+\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1Njk0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405056945", "bodyText": "Deleted test.  Is this functionality tested elsewhere?", "author": "fil512", "createdAt": "2020-04-07T19:25:19Z", "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionMatchingSubscriberTest.java", "diffHunk": "@@ -1,78 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.subscriber;\n-\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import ca.uhn.fhir.rest.api.Constants;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n- */\n-public class SubscriptionMatchingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {", "originalCommit": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTI0OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405141248", "bodyText": "Restored", "author": "jamesagnew", "createdAt": "2020-04-07T22:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1Njk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "chunk": "diff --git a/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionMatchingSubscriberTest.java b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionMatchingSubscriberTest.java\nnew file mode 100644\nindex 0000000000..b50fab8e0c\n--- /dev/null\n+++ b/hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionMatchingSubscriberTest.java\n\n@@ -0,0 +1,78 @@\n+package ca.uhn.fhir.jpa.subscription.module.subscriber;\n+\n+import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n+import ca.uhn.fhir.rest.api.Constants;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n+ */\n+public class SubscriptionMatchingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SubscriptionMatchingSubscriberTest.class);\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionApplicationFhirJson() throws Exception {\n+\t\tString payload = \"application/fhir+json\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111&_format=xml\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(1);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.awaitExpected();\n+\n+\t\tassertEquals(1, ourContentTypes.size());\n+\t\tassertEquals(Constants.CT_FHIR_JSON_NEW, ourContentTypes.get(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionApplicationXmlJson() throws Exception {\n+\t\tString payload = \"application/fhir+xml\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code + \"&_format=xml\";\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111&_format=xml\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(1);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.awaitExpected();\n+\n+\t\tassertEquals(1, ourContentTypes.size());\n+\t\tassertEquals(Constants.CT_FHIR_XML_NEW, ourContentTypes.get(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testRestHookSubscriptionWithoutPayload() throws Exception {\n+\t\tString payload = \"\";\n+\n+\t\tString code = \"1000000050\";\n+\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + code;\n+\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + code + \"111\";\n+\n+\t\tsendSubscription(criteria1, payload, ourListenerServerBase);\n+\t\tsendSubscription(criteria2, payload, ourListenerServerBase);\n+\n+\t\tassertEquals(2, mySubscriptionRegistry.size());\n+\n+\t\tourObservationListener.setExpectedCount(0);\n+\t\tsendObservation(code, \"SNOMED-CT\");\n+\t\tourObservationListener.clear();\n+\n+\t\tassertEquals(0, ourContentTypes.size());\n+\t}\n+}\n"}}, {"oid": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "url": "https://github.com/hapifhir/hapi-fhir/commit/edc30568f257187aa94caaafd937ae4a45c9eaf0", "message": "Address review changes", "committedDate": "2020-04-07T23:07:07Z", "type": "commit"}, {"oid": "8a77d839c3b8df8d5684b1aced7d1ea156988178", "url": "https://github.com/hapifhir/hapi-fhir/commit/8a77d839c3b8df8d5684b1aced7d1ea156988178", "message": "One more change", "committedDate": "2020-04-07T23:09:44Z", "type": "commit"}, {"oid": "a5b5e344cad775ec11a94a6a4db0e877b9e0384d", "url": "https://github.com/hapifhir/hapi-fhir/commit/a5b5e344cad775ec11a94a6a4db0e877b9e0384d", "message": "Test fixes", "committedDate": "2020-04-07T23:54:45Z", "type": "commit"}, {"oid": "0e4478632038ec3744bed636d13d97627cb0cca8", "url": "https://github.com/hapifhir/hapi-fhir/commit/0e4478632038ec3744bed636d13d97627cb0cca8", "message": "Add changelog", "committedDate": "2020-04-08T22:07:36Z", "type": "commit"}]}