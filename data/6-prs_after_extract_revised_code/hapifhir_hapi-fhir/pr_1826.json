{"pr_number": 1826, "pr_title": "Install external ig package at startup", "pr_createdAt": "2020-05-01T18:24:43Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1826", "timeline": [{"oid": "245c2302a44b9606a2453d06e2962b74050de6ce", "url": "https://github.com/hapifhir/hapi-fhir/commit/245c2302a44b9606a2453d06e2962b74050de6ce", "message": "Do not use deprecated methods in structures-r4 test", "committedDate": "2020-04-23T14:38:14Z", "type": "commit"}, {"oid": "a073969a36eb5da0b5b10a29f0694680efe5c80a", "url": "https://github.com/hapifhir/hapi-fhir/commit/a073969a36eb5da0b5b10a29f0694680efe5c80a", "message": "beginning development of feature Implementation Guide installer", "committedDate": "2020-04-24T13:39:30Z", "type": "commit"}, {"oid": "9870e302a41ee13daeb10133c9e235b7e0abaeb3", "url": "https://github.com/hapifhir/hapi-fhir/commit/9870e302a41ee13daeb10133c9e235b7e0abaeb3", "message": "fetch IG, generate snapshots of SDs of and persist conformance resources to db\n\nMissing initialization, error-handling and handling of NameSystems and Subscriptions", "committedDate": "2020-04-28T14:46:20Z", "type": "commit"}, {"oid": "7f2cd24432e7f09169d69cb5e0f991860a17aeb4", "url": "https://github.com/hapifhir/hapi-fhir/commit/7f2cd24432e7f09169d69cb5e0f991860a17aeb4", "message": "Refactor IgInstaller and implement support for R4 and R5", "committedDate": "2020-04-30T13:19:13Z", "type": "commit"}, {"oid": "73c312e980e8e2c2b334d773b2f77a4ad97e74b1", "url": "https://github.com/hapifhir/hapi-fhir/commit/73c312e980e8e2c2b334d773b2f77a4ad97e74b1", "message": "Error handling and removed logic for invoking IG installation\n\nIgInstaller should be invoked by applications", "committedDate": "2020-05-01T18:14:25Z", "type": "commit"}, {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "url": "https://github.com/hapifhir/hapi-fhir/commit/5e925b9e6f0c7d1491434283d64da22cb5bd6928", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup", "committedDate": "2020-05-01T18:20:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzUzNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003536", "bodyText": "We are in the process of removing the use of @Service and @Component and explicitly auto constructing all of our beans (too many issues over time caused by component auto-discovery glitches..). I'd be inclined to call this class IgInstallerSvc for consistency with how other services are named, and can it be created via  @Bean method in BaseConfig?", "author": "jamesagnew", "createdAt": "2020-05-06T18:29:33Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nsimilarity index 61%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nindex 1a81d5744c..56d88c8ac4 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\n\n@@ -1,10 +1,11 @@\n package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.util.FhirTerser;\n import com.google.gson.Gson;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.utilities.cache.NpmPackage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzg0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003846", "bodyText": "Please use field autowiring for consistency", "author": "jamesagnew", "createdAt": "2020-05-06T18:30:03Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nsimilarity index 61%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nindex 1a81d5744c..56d88c8ac4 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\n\n@@ -1,10 +1,11 @@\n package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.util.FhirTerser;\n import com.google.gson.Gson;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.utilities.cache.NpmPackage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421008304", "bodyText": "This could probably be made version independent by using the terser (FhirContext#newFhirTerser()) to access field values using paths (e.g. myCtx.newFhirTerser().getSingleValueOrNull(\"url\"); )\nThat would reduce the maintenance burden in the long run and avoid issues where a fix gets accidentally applied to one version only", "author": "jamesagnew", "createdAt": "2020-05-06T18:37:14Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MDYxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421470614", "bodyText": "Good point, haven't had a look at the terser before now - seems perfect for the job, however, when trying to access the the uniqueId of a NamingSystem I'm running into trouble: Extracting the value of a StringType in a version independentent way using the FhirTerser#getSingleValueOrNull throws the following exception:\njava.lang.IllegalArgumentException: Target is not a composite type: org.hl7.fhir.dstu3.model.StringType\nat ca.uhn.fhir.util.FhirTerser.getSingleValueOrNull(FhirTerser.java:230)", "author": "mzgtrifork", "createdAt": "2020-05-07T12:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzMTEyMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423131123", "bodyText": "You can't add .value to the end of the terser expression.. Just use the path without that part, and the result will be of type IPrimitiveype. You can call getValueAsString() on that.", "author": "jamesagnew", "createdAt": "2020-05-11T15:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5OTIyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423999228", "bodyText": "Okay - hmm - is this refactoring necessary for the PR to be accepted (it works as is)? I understand the release of version 5.0.0 is in two days. I can submit the refactoring within a week, but I'm a bit preoccupied the next couple of days.", "author": "mzgtrifork", "createdAt": "2020-05-12T20:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDE5OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r424900199", "bodyText": "Fixed.", "author": "mzgtrifork", "createdAt": "2020-05-14T06:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java\nindex 86cf5bf8e3..2a5b01b1ce 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java\n\n@@ -1,6 +1,7 @@\n package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.model.dstu2.resource.ImplementationGuide;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n import ca.uhn.fhir.rest.param.StringParam;\n import ca.uhn.fhir.rest.param.TokenParam;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTA2MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009061", "bodyText": "Could you just autowire in an instance of IValidationSupport and call its generateSnapshot method? I think that would replace this class entirely and avoid the use of an unwrapped snapshot generator", "author": "jamesagnew", "createdAt": "2020-05-06T18:38:30Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoStructureDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class SnapshotGeneratorImpl {", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMjIzOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421512239", "bodyText": "Yes - combined with the terser to perform a version-independent check if a StructureDefinition already has a snapshot. Updated.", "author": "mzgtrifork", "createdAt": "2020-05-07T13:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java\ndeleted file mode 100644\nindex ed6ac42b18..0000000000\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-package ca.uhn.fhir.jpa.packages;\n-\n-import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n-import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoStructureDefinition;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-\n-import java.util.Collection;\n-import java.util.stream.Collectors;\n-\n-public class SnapshotGeneratorImpl {\n-\tpublic static SnapshotGenerator forR5(IFhirResourceDao sdDao) {\n-\t\treturn new SnapshotGenerator() {\n-\t\t\tprivate IFhirResourceDaoStructureDefinition dao = (IFhirResourceDaoStructureDefinition) sdDao;\n-\t\t\t@Override\n-\t\t\tpublic Collection<IBaseResource> generateFrom(Collection<IBaseResource> structureDefinitions) {\n-\t\t\t\treturn structureDefinitions.stream()\n-\t\t\t\t\t.map(org.hl7.fhir.r5.model.StructureDefinition.class::cast)\n-\t\t\t\t\t.map(sd -> sd.hasSnapshot() ? sd : dao.generateSnapshot(sd, null, null, null))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-\tpublic static SnapshotGenerator forR4(IFhirResourceDao sdDao) {\n-\t\treturn new SnapshotGenerator() {\n-\t\t\tprivate IFhirResourceDaoStructureDefinition dao = (IFhirResourceDaoStructureDefinition) sdDao;\n-\t\t\t@Override\n-\t\t\tpublic Collection<IBaseResource> generateFrom(Collection<IBaseResource> structureDefinitions) {\n-\t\t\t\treturn structureDefinitions.stream()\n-\t\t\t\t\t.map(org.hl7.fhir.r4.model.StructureDefinition.class::cast)\n-\t\t\t\t\t.map(sd -> sd.hasSnapshot() ? sd : dao.generateSnapshot(sd, null, null, null))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-\tpublic static SnapshotGenerator forDstu3(IFhirResourceDao sdDao) {\n-\t\treturn new SnapshotGenerator() {\n-\t\t\tprivate IFhirResourceDaoStructureDefinition dao = (IFhirResourceDaoStructureDefinition) sdDao;\n-\t\t\t@Override\n-\t\t\tpublic Collection<IBaseResource> generateFrom(Collection<IBaseResource> structureDefinitions) {\n-\t\t\t\treturn structureDefinitions.stream()\n-\t\t\t\t\t.map(org.hl7.fhir.dstu3.model.StructureDefinition.class::cast)\n-\t\t\t\t\t.map(sd -> sd.hasSnapshot() ? sd : dao.generateSnapshot(sd, null, null, null))\n-\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\t}\n-\t\t};\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009446", "bodyText": "We definitely can't have unit tests making external calls to an HTTP server outside the project. Could this be replaced with a local Jetty server simulating the right calls?", "author": "jamesagnew", "createdAt": "2020-05-06T18:39:11Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.dstu3.BaseJpaDstu3Test;\n+import org.hl7.fhir.dstu3.model.StructureDefinition;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.*;\n+\n+public class IgInstallerTestDstu3 extends BaseJpaDstu3Test {\n+\n+\t@Autowired\n+\tprivate DaoConfig daoConfig;\n+\t@Autowired\n+\tprivate IgInstaller igInstaller;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/vs/*\");\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/cs/*\");", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTc2Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421675766", "bodyText": "Fixed by only testing IGs that reside locally under src/main/resources", "author": "mzgtrifork", "createdAt": "2020-05-07T17:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java\nindex 0bca90e3fe..4d13c7b4ae 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java\n\n@@ -2,33 +2,52 @@ package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.jpa.api.config.DaoConfig;\n import ca.uhn.fhir.jpa.dao.dstu3.BaseJpaDstu3Test;\n-import org.hl7.fhir.dstu3.model.StructureDefinition;\n-import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n import org.junit.Before;\n-import org.junit.Ignore;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import java.io.IOException;\n-import java.util.Collection;\n-\n-import static org.junit.Assert.*;\n+import java.io.InputStream;\n \n public class IgInstallerTestDstu3 extends BaseJpaDstu3Test {\n \n \t@Autowired\n \tprivate DaoConfig daoConfig;\n \t@Autowired\n-\tprivate IgInstaller igInstaller;\n+\tprivate IgInstallerSvc igInstaller;\n+\n+\t@Rule\n+\tpublic final ExpectedException expectedException = ExpectedException.none();\n \n \t@Before\n-\tpublic void before() {\n-\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/vs/*\");\n-\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/cs/*\");\n+\tpublic void before() throws IOException {\n+\t\tPackageCacheManager packageCacheManager = new PackageCacheManager(true, 1);\n+\t\tInputStream stream;\n+\t\tstream = IgInstallerTestDstu3.class.getResourceAsStream(\"erroneous-ig.tar.gz\");\n+\t\tpackageCacheManager.addPackageToCache(\"erroneous-ig\", \"1.0.0\", stream, \"erroneous-ig\");\n+\t\tstream = IgInstallerTestDstu3.class.getResourceAsStream(\"NHSD.Assets.STU3.tar.gz\");\n+\t\tpackageCacheManager.addPackageToCache(\"NHSD.Assets.STU3\", \"1.0.0\", stream, \"NHSD.Assets.STU3\");\n+\t\tstream = IgInstallerTestDstu3.class.getResourceAsStream(\"basisprofil.de.tar.gz\");\n+\t\tpackageCacheManager.addPackageToCache(\"basisprofil.de\", \"0.2.40\", stream, \"basisprofil.de\");\n+\t}\n+\n+\t@Test(expected = ImplementationGuideInstallationException.class)\n+\tpublic void negativeTestInstallFromCache() {\n+\t\t// Unknown base of StructureDefinitions\n+\t\tigInstaller.install(\"erroneous-ig\", \"1.0.0\");\n+\t}\n+\n+\t@Test\n+\tpublic void installFromCache() {\n+\t\tdaoConfig.setAllowExternalReferences(true);\n+\t\tigInstaller.install(\"NHSD.Assets.STU3\", \"1.2.0\");\n \t}\n \n \t@Test\n-\tpublic void installIgForDstu3() throws IOException {\n-\t\tassertTrue(igInstaller.install(\"https://docs.ehealth.sundhed.dk/latest/ig/package.tgz\"));\n+\tpublic void installFromCache2() {\n+\t\tigInstaller.install(\"basisprofil.de\", \"0.2.40\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421010113", "bodyText": "I'm always nervous about having boolean flags as an indicator of success. Could we just use exceptions? It would probably be sufficient to throw an InternalErrorException in the event that something fails", "author": "jamesagnew", "createdAt": "2020-05-06T18:40:20Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQwMzc1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421403754", "bodyText": "Hmm.. The InternalErrorException indicates that the server has failed at processing the incoming (client) request. Which I believe is a bit misleading error to raise if the IG installation fails.\nWhat do you think about using a custom subclass 'ImplementationGuideInstallationException' of RuntimeException?", "author": "mzgtrifork", "createdAt": "2020-05-07T10:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzMjEzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423132132", "bodyText": "Yup that works", "author": "jamesagnew", "createdAt": "2020-05-11T15:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw=="}], "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nsimilarity index 61%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nindex 1a81d5744c..56d88c8ac4 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\n\n@@ -1,10 +1,11 @@\n package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.util.FhirTerser;\n import com.google.gson.Gson;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.utilities.cache.NpmPackage;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTYxNg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421011616", "bodyText": "Just confirming- Do the unit tests cover this? (Not sure why codecov failed to run on this PR... definitely not your fault, it has been flaky lately..)", "author": "jamesagnew", "createdAt": "2020-05-06T18:42:45Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {\n+\t\tif (enabled) {\n+\t\t\ttry  {\n+\t\t\t\treturn install(NpmPackage.fromPackage(toInputStream(url)));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from URL {}\", url, e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate InputStream toInputStream(String url) throws IOException {\n+\t\tURL u = new URL(url);\n+\t\tURLConnection c = u.openConnection();\n+\t\treturn c.getInputStream();\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG from a file on disk or the Simplifier repo using\n+\t * the {@link PackageCacheManager}.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param id of the package, or name of folder in filesystem\n+\t * @param version of package, or path to folder in filesystem\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String id, String version) {\n+\t\tif (enabled) {\n+\t\t\ttry {\n+\t\t\t\treturn install(packageCacheManager.loadPackage(id, version));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from packages.fhir.org or \" +\n+\t\t\t\t\t\"file on disk using ID {} and version {}\", id, version, e);\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Installs a package and its dependencies.\n+\t *\n+\t * Fails fast if one of its dependencies could not be installed.\n+\t *\n+\t * @return success of the installation\n+\t */\n+\tprivate boolean install(NpmPackage npmPackage) {\n+\t\tString name = npmPackage.getNpm().get(\"name\").getAsString();\n+\t\tString version = npmPackage.getNpm().get(\"version\").getAsString();\n+\t\tString packageFhirVersion = npmPackage.fhirVersion();\n+\t\tif (!isCompatibleWithCurrentFhirVersion(packageFhirVersion)) {\n+\t\t\tourLog.warn(\"Cannot install package {}#{}, FHIR versions mismatch (expected <={}, package uses {})\",\n+\t\t\t\tname, version, fhirContext.getVersion().getVersion().getFhirVersionString(), packageFhirVersion);\n+\t\t\treturn false;\n+\t\t}\n+\t\tboolean success = fetchAndInstallDependencies(npmPackage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"An error occoured when installing dependencies for the package {}#{}\", name, version);\n+\t\t\treturn false;\n+\t\t}\n+\t\tourLog.info(\"Installing package: {}#{}\", name, version);\n+\t\tfor (String type : SUPPORTED_RESOURCE_TYPES) {\n+\t\t\tCollection<IBaseResource> resources = parseResourcesOfType(type, npmPackage);\n+\t\t\tif (type.equals(\"StructureDefinition\")) {\n+\t\t\t\tresources = snapshotGenerator.generateFrom(resources);\n+\t\t\t}\n+\t\t\tourLog.info(String.format(\"creating or updating %s resources of type %s\", resources.size(), type));\n+\n+\t\t\tresources.stream().forEach(r -> createOrUpdate(r));\n+\t\t}\n+\t\tourLog.info(String.format(\"Finished installation of package: %s#%s\", name, version));\n+\t\treturn true;\n+\t}\n+\n+\tprivate boolean fetchAndInstallDependencies(NpmPackage npmPackage) {", "originalCommit": "5e925b9e6f0c7d1491434283d64da22cb5bd6928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NTg3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421385870", "bodyText": "Yes - they could be more exhaustive though. I'll look into implementing more tests if I find the time.", "author": "mzgtrifork", "createdAt": "2020-05-07T09:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f4756b175a7da85317df6d61502584f23c48edf8", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nsimilarity index 61%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\nindex 1a81d5744c..56d88c8ac4 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstallerSvc.java\n\n@@ -1,10 +1,11 @@\n package ca.uhn.fhir.jpa.packages;\n \n import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.util.FhirTerser;\n import com.google.gson.Gson;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.utilities.cache.NpmPackage;\n"}}, {"oid": "f4756b175a7da85317df6d61502584f23c48edf8", "url": "https://github.com/hapifhir/hapi-fhir/commit/f4756b175a7da85317df6d61502584f23c48edf8", "message": "Implement pull request comments in IgInstaller\n\n1) Renamed IgInstaller -> IgInstallerSvc for consistency\n2) Use field autowiring and @PostConstruct for consistency\n3) Use exceptions instead of boolean flags for success indication\n4) Use IValidationSuport to generate snapshots of StructureDefinitions\nin a version independent way (less maintenance) instead of SnapshotGenerator.java\n5) Read IGs for tests from src/main/resources instead of external URL", "committedDate": "2020-05-07T17:09:17Z", "type": "commit"}, {"oid": "7b5d46c8ec802d0763f40f3de22cc12bb9eb2587", "url": "https://github.com/hapifhir/hapi-fhir/commit/7b5d46c8ec802d0763f40f3de22cc12bb9eb2587", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup", "committedDate": "2020-05-07T17:19:35Z", "type": "commit"}, {"oid": "fb999bcb6fbf128b4cdb715734cb358c507f8d3e", "url": "https://github.com/hapifhir/hapi-fhir/commit/fb999bcb6fbf128b4cdb715734cb358c507f8d3e", "message": "IG installation: Wrap exceptions during resource creation in custom class", "committedDate": "2020-05-07T18:55:33Z", "type": "commit"}, {"oid": "56ee524348e7317dea8f7246335d067cf47aa425", "url": "https://github.com/hapifhir/hapi-fhir/commit/56ee524348e7317dea8f7246335d067cf47aa425", "message": "IG installation: Improved logging", "committedDate": "2020-05-11T08:19:25Z", "type": "commit"}, {"oid": "35a9247bc833da81773e70d027ff8d6a2b33f0cf", "url": "https://github.com/hapifhir/hapi-fhir/commit/35a9247bc833da81773e70d027ff8d6a2b33f0cf", "message": "IG installation: Search for existing resources in a version independent way", "committedDate": "2020-05-14T06:31:38Z", "type": "commit"}, {"oid": "625127dbe732b09d1ce5b729bbc90e7792434cd1", "url": "https://github.com/hapifhir/hapi-fhir/commit/625127dbe732b09d1ce5b729bbc90e7792434cd1", "message": "Merge remote-tracking branch 'jamesagnew/master' into install-external-ig-package-at-startup", "committedDate": "2020-05-14T06:32:47Z", "type": "commit"}]}