{"pr_number": 1807, "pr_title": "Add Partitioning / Multitenancy", "pr_createdAt": "2020-04-20T15:03:09Z", "pr_url": "https://github.com/hapifhir/hapi-fhir/pull/1807", "timeline": [{"oid": "b2d2346228a8d1fcaa17afbf8e2932da661b4815", "url": "https://github.com/hapifhir/hapi-fhir/commit/b2d2346228a8d1fcaa17afbf8e2932da661b4815", "message": "Work on multitenancy", "committedDate": "2020-02-07T20:18:06Z", "type": "commit"}, {"oid": "f7ec41ffc5e03aa1abc127950ccd830bd8a8ac3d", "url": "https://github.com/hapifhir/hapi-fhir/commit/f7ec41ffc5e03aa1abc127950ccd830bd8a8ac3d", "message": "Work on multitenancy", "committedDate": "2020-02-09T13:40:15Z", "type": "commit"}, {"oid": "ebf395bee94fcff25bad0a9e27618ce5ad46134f", "url": "https://github.com/hapifhir/hapi-fhir/commit/ebf395bee94fcff25bad0a9e27618ce5ad46134f", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-02-09T13:40:29Z", "type": "commit"}, {"oid": "1d1aadb81300c2b84296bab1ca410185d9673c1f", "url": "https://github.com/hapifhir/hapi-fhir/commit/1d1aadb81300c2b84296bab1ca410185d9673c1f", "message": "Work on multitenancy", "committedDate": "2020-02-10T01:57:50Z", "type": "commit"}, {"oid": "4a160a2df33ac8addfabc42d9a710c1913d7372e", "url": "https://github.com/hapifhir/hapi-fhir/commit/4a160a2df33ac8addfabc42d9a710c1913d7372e", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-03-03T14:25:19Z", "type": "commit"}, {"oid": "58ee76549c3325ec99e79ad51f66df55f894dc04", "url": "https://github.com/hapifhir/hapi-fhir/commit/58ee76549c3325ec99e79ad51f66df55f894dc04", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-03-04T13:19:22Z", "type": "commit"}, {"oid": "4bd2d1f2f93d22b42f92383a687fd2430fb1b6d8", "url": "https://github.com/hapifhir/hapi-fhir/commit/4bd2d1f2f93d22b42f92383a687fd2430fb1b6d8", "message": "Add columns", "committedDate": "2020-03-04T18:49:36Z", "type": "commit"}, {"oid": "ec6fe70acb17aba2ab34deeacf9138efefa75d8b", "url": "https://github.com/hapifhir/hapi-fhir/commit/ec6fe70acb17aba2ab34deeacf9138efefa75d8b", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-03-27T09:50:08Z", "type": "commit"}, {"oid": "9df4c5812279ad58502eb3f4b5d695f171cab6d0", "url": "https://github.com/hapifhir/hapi-fhir/commit/9df4c5812279ad58502eb3f4b5d695f171cab6d0", "message": "Work on multitenancy", "committedDate": "2020-03-27T13:22:00Z", "type": "commit"}, {"oid": "691f2c4e9a681780cf8c07af3d7fe003f3d2e8cf", "url": "https://github.com/hapifhir/hapi-fhir/commit/691f2c4e9a681780cf8c07af3d7fe003f3d2e8cf", "message": "Work on muiltitenancy", "committedDate": "2020-03-29T17:35:20Z", "type": "commit"}, {"oid": "62d867902f63e8a15a1e74ace47011eb268f9fa7", "url": "https://github.com/hapifhir/hapi-fhir/commit/62d867902f63e8a15a1e74ace47011eb268f9fa7", "message": "Work on multitenancy", "committedDate": "2020-03-29T22:16:04Z", "type": "commit"}, {"oid": "8e714b6b14adf2387bcfd84fb43bc74f819ce796", "url": "https://github.com/hapifhir/hapi-fhir/commit/8e714b6b14adf2387bcfd84fb43bc74f819ce796", "message": "Work on uniques", "committedDate": "2020-03-30T09:36:24Z", "type": "commit"}, {"oid": "2e43c57032264ad9297bd9c3927dc21a6fc3aaf3", "url": "https://github.com/hapifhir/hapi-fhir/commit/2e43c57032264ad9297bd9c3927dc21a6fc3aaf3", "message": "Work on multitenancy", "committedDate": "2020-03-30T13:49:17Z", "type": "commit"}, {"oid": "ea1f35beaac46d2c00537e6f8471b2f90819e9d9", "url": "https://github.com/hapifhir/hapi-fhir/commit/ea1f35beaac46d2c00537e6f8471b2f90819e9d9", "message": "Work on multitenancy", "committedDate": "2020-03-31T14:33:47Z", "type": "commit"}, {"oid": "e0fcbe1df208555d0ab943a1f185eec034d84313", "url": "https://github.com/hapifhir/hapi-fhir/commit/e0fcbe1df208555d0ab943a1f185eec034d84313", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-09T15:52:27Z", "type": "commit"}, {"oid": "219332e9e323b49cfb0348f18bb7e794bc30dedf", "url": "https://github.com/hapifhir/hapi-fhir/commit/219332e9e323b49cfb0348f18bb7e794bc30dedf", "message": "Work on multitenancy", "committedDate": "2020-04-10T15:11:29Z", "type": "commit"}, {"oid": "8d8c657ce23533bd9e2f2ab80173c1b69ebb6ec8", "url": "https://github.com/hapifhir/hapi-fhir/commit/8d8c657ce23533bd9e2f2ab80173c1b69ebb6ec8", "message": "More work on multitenancy", "committedDate": "2020-04-10T17:05:17Z", "type": "commit"}, {"oid": "e55ccf88fc7e90eace40398cbcf87c9fce1ad812", "url": "https://github.com/hapifhir/hapi-fhir/commit/e55ccf88fc7e90eace40398cbcf87c9fce1ad812", "message": "Work on multitenancy", "committedDate": "2020-04-11T00:01:59Z", "type": "commit"}, {"oid": "c26a5553e9cc0b96c2b7e5d856552212bef443b5", "url": "https://github.com/hapifhir/hapi-fhir/commit/c26a5553e9cc0b96c2b7e5d856552212bef443b5", "message": "Multitenancy work", "committedDate": "2020-04-13T00:47:32Z", "type": "commit"}, {"oid": "982b54df57bef4311dbbbe873427ae640dcf2130", "url": "https://github.com/hapifhir/hapi-fhir/commit/982b54df57bef4311dbbbe873427ae640dcf2130", "message": "Work on multitenancy", "committedDate": "2020-04-13T15:50:49Z", "type": "commit"}, {"oid": "d822867a4a75563782cb82340910716b597db9a1", "url": "https://github.com/hapifhir/hapi-fhir/commit/d822867a4a75563782cb82340910716b597db9a1", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-16T02:12:20Z", "type": "commit"}, {"oid": "cd06137745a28a18dcab700fd27e88f9abb8d1b3", "url": "https://github.com/hapifhir/hapi-fhir/commit/cd06137745a28a18dcab700fd27e88f9abb8d1b3", "message": "Work on multitenancy", "committedDate": "2020-04-16T02:12:28Z", "type": "commit"}, {"oid": "25cdbb15c24d455d3136e98a8ff256482e1e9886", "url": "https://github.com/hapifhir/hapi-fhir/commit/25cdbb15c24d455d3136e98a8ff256482e1e9886", "message": "Work on multitenancy", "committedDate": "2020-04-16T19:33:48Z", "type": "commit"}, {"oid": "81723c30d8173467775d3674f2d51f79bf43ab9a", "url": "https://github.com/hapifhir/hapi-fhir/commit/81723c30d8173467775d3674f2d51f79bf43ab9a", "message": "Work on multitenancy", "committedDate": "2020-04-16T19:52:15Z", "type": "commit"}, {"oid": "a1b3a97acfd6f66120162ebb327070963fcdb8a9", "url": "https://github.com/hapifhir/hapi-fhir/commit/a1b3a97acfd6f66120162ebb327070963fcdb8a9", "message": "Work on docs", "committedDate": "2020-04-17T13:28:44Z", "type": "commit"}, {"oid": "48057b9d8ec4d4e6b63f63cea741b92c151e8ab4", "url": "https://github.com/hapifhir/hapi-fhir/commit/48057b9d8ec4d4e6b63f63cea741b92c151e8ab4", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-17T21:59:48Z", "type": "commit"}, {"oid": "2ddeea37c29bbe9258c211f7b79a1ae1fcf43c8e", "url": "https://github.com/hapifhir/hapi-fhir/commit/2ddeea37c29bbe9258c211f7b79a1ae1fcf43c8e", "message": "Work on multitenancy", "committedDate": "2020-04-18T21:27:06Z", "type": "commit"}, {"oid": "c0965b1be822457370fa5190d7e442aa241289a1", "url": "https://github.com/hapifhir/hapi-fhir/commit/c0965b1be822457370fa5190d7e442aa241289a1", "message": "Work on docs", "committedDate": "2020-04-18T22:54:46Z", "type": "commit"}, {"oid": "6c760c9bffc32e1ccf69e2ca769e8f46cfd0b51b", "url": "https://github.com/hapifhir/hapi-fhir/commit/6c760c9bffc32e1ccf69e2ca769e8f46cfd0b51b", "message": "DOcs work", "committedDate": "2020-04-18T23:14:02Z", "type": "commit"}, {"oid": "cd3e1c5e728961a848796cbaaa4383473153e9f6", "url": "https://github.com/hapifhir/hapi-fhir/commit/cd3e1c5e728961a848796cbaaa4383473153e9f6", "message": "Tenancy docs", "committedDate": "2020-04-19T14:15:51Z", "type": "commit"}, {"oid": "d3479cd093d15f9b7a3ea8385488d27e3fb6ee99", "url": "https://github.com/hapifhir/hapi-fhir/commit/d3479cd093d15f9b7a3ea8385488d27e3fb6ee99", "message": "Work on docs", "committedDate": "2020-04-19T18:41:18Z", "type": "commit"}, {"oid": "c412339a05a76655bc050f7761567da0eed9ecb4", "url": "https://github.com/hapifhir/hapi-fhir/commit/c412339a05a76655bc050f7761567da0eed9ecb4", "message": "Merge branch 'ja_20200206_multitenancy' of github.com:jamesagnew/hapi-fhir into ja_20200206_multitenancy", "committedDate": "2020-04-19T18:41:26Z", "type": "commit"}, {"oid": "7248b4e18e290b519d35788f0b6594cc80866fbc", "url": "https://github.com/hapifhir/hapi-fhir/commit/7248b4e18e290b519d35788f0b6594cc80866fbc", "message": "Finish docs", "committedDate": "2020-04-20T15:02:27Z", "type": "commit"}, {"oid": "95b77af5707b4cbfe7efb8901bd14a581e5147bf", "url": "https://github.com/hapifhir/hapi-fhir/commit/95b77af5707b4cbfe7efb8901bd14a581e5147bf", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-20T15:07:10Z", "type": "commit"}, {"oid": "faddeeb779097275b44590dd348b2e53c37e9c5c", "url": "https://github.com/hapifhir/hapi-fhir/commit/faddeeb779097275b44590dd348b2e53c37e9c5c", "message": "Add changelog", "committedDate": "2020-04-20T15:15:35Z", "type": "commit"}, {"oid": "bbab016ca664934bfd9741d4dd04469f2f3f927b", "url": "https://github.com/hapifhir/hapi-fhir/commit/bbab016ca664934bfd9741d4dd04469f2f3f927b", "message": "Rename config", "committedDate": "2020-04-20T16:38:04Z", "type": "commit"}, {"oid": "544d9fbc6cbbfc6dea83f33a0f65719864e4caad", "url": "https://github.com/hapifhir/hapi-fhir/commit/544d9fbc6cbbfc6dea83f33a0f65719864e4caad", "message": "Add migration tasks", "committedDate": "2020-04-20T20:58:48Z", "type": "commit"}, {"oid": "e6c806283e9e2374d2d2ae2ae82685f4a8b92ed6", "url": "https://github.com/hapifhir/hapi-fhir/commit/e6c806283e9e2374d2d2ae2ae82685f4a8b92ed6", "message": "Merge branch 'ja_20200206_multitenancy' of github.com:jamesagnew/hapi-fhir into ja_20200206_multitenancy", "committedDate": "2020-04-20T20:58:59Z", "type": "commit"}, {"oid": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "url": "https://github.com/hapifhir/hapi-fhir/commit/00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "message": "Fix typo", "committedDate": "2020-04-20T20:59:32Z", "type": "commit"}, {"oid": "e98bf2b0d30fe909181f44161b77ec98f570b489", "url": "https://github.com/hapifhir/hapi-fhir/commit/e98bf2b0d30fe909181f44161b77ec98f570b489", "message": "Migration fix", "committedDate": "2020-04-20T21:39:12Z", "type": "commit"}, {"oid": "9ed358f665345d07caf044f3fa05821411310dd4", "url": "https://github.com/hapifhir/hapi-fhir/commit/9ed358f665345d07caf044f3fa05821411310dd4", "message": "One more migration fix", "committedDate": "2020-04-20T21:44:50Z", "type": "commit"}, {"oid": "465bce952ec04bf856cbc83c016a24ef258119c3", "url": "https://github.com/hapifhir/hapi-fhir/commit/465bce952ec04bf856cbc83c016a24ef258119c3", "message": "A couple more migration fixes", "committedDate": "2020-04-20T22:32:48Z", "type": "commit"}, {"oid": "4abebf22478414c7be32efd8ab5844920b71c453", "url": "https://github.com/hapifhir/hapi-fhir/commit/4abebf22478414c7be32efd8ab5844920b71c453", "message": "Docs cleanup", "committedDate": "2020-04-21T13:28:52Z", "type": "commit"}, {"oid": "7b2db8381f4e52113fd9213222b8687725d8b9fd", "url": "https://github.com/hapifhir/hapi-fhir/commit/7b2db8381f4e52113fd9213222b8687725d8b9fd", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-21T13:29:44Z", "type": "commit"}, {"oid": "998c1f7751feaa67f83e89c962555241502ce38b", "url": "https://github.com/hapifhir/hapi-fhir/commit/998c1f7751feaa67f83e89c962555241502ce38b", "message": "Work on docs", "committedDate": "2020-04-21T18:32:41Z", "type": "commit"}, {"oid": "11fade2c2e5c61632a5ec07b78fcd02555dc33ee", "url": "https://github.com/hapifhir/hapi-fhir/commit/11fade2c2e5c61632a5ec07b78fcd02555dc33ee", "message": "Bump boot version", "committedDate": "2020-04-21T19:55:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMDU1Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r411710557", "bodyText": "Consider using Predicate<Object> instead of Function<Object, Boolean>", "author": "fil512", "createdAt": "2020-04-20T21:39:31Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/IInterceptorService.java", "diffHunk": "@@ -90,4 +91,8 @@\n \n \tvoid registerInterceptors(@Nullable Collection<?> theInterceptors);\n \n+\t/**\n+\t * Unregisters all interceptors that are indicated by the given callback function returning <code>true</code>\n+\t */\n+\tvoid unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction);", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MjkzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412572933", "bodyText": "good call, will do", "author": "jamesagnew", "createdAt": "2020-04-22T00:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMDU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/IInterceptorService.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/IInterceptorService.java\nindex c4655ce8ac..96d9804117 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/IInterceptorService.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/IInterceptorService.java\n\n@@ -94,5 +95,5 @@ public interface IInterceptorService extends IInterceptorBroadcaster {\n \t/**\n \t * Unregisters all interceptors that are indicated by the given callback function returning <code>true</code>\n \t */\n-\tvoid unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction);\n+\tvoid unregisterInterceptorsIf(Predicate<Object> theShouldUnregisterFunction);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMjI3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r411712270", "bodyText": "Fix javadoc.  No resource is being created here.", "author": "fil512", "createdAt": "2020-04-20T21:42:49Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/Pointcut.java", "diffHunk": "@@ -1364,6 +1374,80 @@\n \t\t\"ca.uhn.fhir.rest.server.servlet.ServletRequestDetails\"\n \t),\n \n+\t/**\n+\t * <b>Storage Hook:</b>\n+\t * Invoked before FHIR <b>create</b> operation to request the identification of the partition ID to be associated\n+\t * with the resource being created. This hook will only be called if partitioning is enabled in the JPA\n+\t * server.\n+\t * <p>\n+\t * Hooks may accept the following parameters:\n+\t * </p>\n+\t * <ul>\n+\t * <li>\n+\t * org.hl7.fhir.instance.model.api.IBaseResource - The resource that will be created and needs a tenant ID assigned.\n+\t * </li>\n+\t * <li>\n+\t * ca.uhn.fhir.rest.api.server.RequestDetails - A bean containing details about the request that is about to be processed, including details such as the\n+\t * resource type and logical ID (if any) and other FHIR-specific aspects of the request which have been\n+\t * pulled out of the servlet request. Note that the bean\n+\t * properties are not all guaranteed to be populated, depending on how early during processing the\n+\t * exception occurred.\n+\t * </li>\n+\t * <li>\n+\t * ca.uhn.fhir.rest.server.servlet.ServletRequestDetails - A bean containing details about the request that is about to be processed, including details such as the\n+\t * resource type and logical ID (if any) and other FHIR-specific aspects of the request which have been\n+\t * pulled out of the servlet request. This parameter is identical to the RequestDetails parameter above but will\n+\t * only be populated when operating in a RestfulServer implementation. It is provided as a convenience.\n+\t * </li>\n+\t * </ul>\n+\t * <p>\n+\t * Hooks should return an instance of <code>ca.uhn.fhir.jpa.api.model.PartitionId</code> or <code>null</code>.\n+\t * </p>\n+\t */\n+\tSTORAGE_PARTITION_IDENTIFY_CREATE(\n+\t\t// Return type\n+\t\t\"ca.uhn.fhir.interceptor.model.PartitionId\",\n+\t\t// Params\n+\t\t\"org.hl7.fhir.instance.model.api.IBaseResource\",\n+\t\t\"ca.uhn.fhir.rest.api.server.RequestDetails\",\n+\t\t\"ca.uhn.fhir.rest.server.servlet.ServletRequestDetails\"\n+\t),\n+\n+\t/**\n+\t * <b>Storage Hook:</b>\n+\t * Invoked before FHIR read/access operation (e.g. <b>read/vread</b>, <b>search</b>, <b>history</b>, etc.) operation to request the\n+\t * identification of the partition ID to be associated with the resource being created. This hook will only be called if", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MzMwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412573301", "bodyText": "will do", "author": "jamesagnew", "createdAt": "2020-04-22T00:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMjI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/Pointcut.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/Pointcut.java\nindex 971cdb9ad7..6d282350c5 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/Pointcut.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/api/Pointcut.java\n\n@@ -1416,8 +1416,11 @@ public enum Pointcut {\n \t/**\n \t * <b>Storage Hook:</b>\n \t * Invoked before FHIR read/access operation (e.g. <b>read/vread</b>, <b>search</b>, <b>history</b>, etc.) operation to request the\n-\t * identification of the partition ID to be associated with the resource being created. This hook will only be called if\n+\t * identification of the partition ID to be associated with the resource(s) being searched for, read, etc.\n+\t * <p>\n+\t * This hook will only be called if\n \t * partitioning is enabled in the JPA server.\n+\t * </p>\n \t * <p>\n \t * Hooks may accept the following parameters:\n \t * </p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNDQ0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r411714442", "bodyText": "Less code this way:\ntheGlobalInvokers.entries().removeIf(entry -> theShouldUnregisterFunction(entry.getValue().getInterceptor()));", "author": "fil512", "createdAt": "2020-04-20T21:47:03Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/executor/InterceptorService.java", "diffHunk": "@@ -145,6 +146,22 @@ public void registerInterceptors(@Nullable Collection<?> theInterceptors) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction) {\n+\t\tunregisterInterceptorsIf(theShouldUnregisterFunction, myGlobalInvokers);\n+\t\tunregisterInterceptorsIf(theShouldUnregisterFunction, myAnonymousInvokers);\n+\t}\n+\n+\tprivate void unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction, ListMultimap<Pointcut, BaseInvoker> theGlobalInvokers) {\n+\t\tfor (Iterator<Map.Entry<Pointcut, BaseInvoker>> iter = theGlobalInvokers.entries().iterator(); iter.hasNext(); ) {\n+\t\t\tMap.Entry<Pointcut, BaseInvoker> next = iter.next();\n+\t\t\tObject nextInterceptor = next.getValue().getInterceptor();\n+\t\t\tif (theShouldUnregisterFunction.apply(nextInterceptor)) {\n+\t\t\t\titer.remove();\n+\t\t\t}\n+\t\t}\n+\t}", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3Mzk4MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412573980", "bodyText": "thanks, done", "author": "jamesagnew", "createdAt": "2020-04-22T00:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNDQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/executor/InterceptorService.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/executor/InterceptorService.java\nindex 25ff3fed92..a6ff71a222 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/executor/InterceptorService.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/executor/InterceptorService.java\n\n@@ -147,19 +153,13 @@ public class InterceptorService implements IInterceptorService, IInterceptorBroa\n \t}\n \n \t@Override\n-\tpublic void unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction) {\n+\tpublic void unregisterInterceptorsIf(Predicate<Object> theShouldUnregisterFunction) {\n \t\tunregisterInterceptorsIf(theShouldUnregisterFunction, myGlobalInvokers);\n \t\tunregisterInterceptorsIf(theShouldUnregisterFunction, myAnonymousInvokers);\n \t}\n \n-\tprivate void unregisterInterceptorsIf(Function<Object, Boolean> theShouldUnregisterFunction, ListMultimap<Pointcut, BaseInvoker> theGlobalInvokers) {\n-\t\tfor (Iterator<Map.Entry<Pointcut, BaseInvoker>> iter = theGlobalInvokers.entries().iterator(); iter.hasNext(); ) {\n-\t\t\tMap.Entry<Pointcut, BaseInvoker> next = iter.next();\n-\t\t\tObject nextInterceptor = next.getValue().getInterceptor();\n-\t\t\tif (theShouldUnregisterFunction.apply(nextInterceptor)) {\n-\t\t\t\titer.remove();\n-\t\t\t}\n-\t\t}\n+\tprivate void unregisterInterceptorsIf(Predicate<Object> theShouldUnregisterFunction, ListMultimap<Pointcut, BaseInvoker> theGlobalInvokers) {\n+\t\ttheGlobalInvokers.entries().removeIf(t->theShouldUnregisterFunction.test(t.getValue().getInterceptor()));\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNTYwMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r411715601", "bodyText": "Consider renaming to PartitionIdRequest or PartitionIdParam", "author": "fil512", "createdAt": "2020-04-20T21:49:17Z", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/PartitionId.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package ca.uhn.fhir.interceptor.model;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Core Library\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.time.LocalDate;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+public class PartitionId {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODA1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412578056", "bodyText": "Changed to RequestPartitionId", "author": "jamesagnew", "createdAt": "2020-04-22T00:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNTYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/PartitionId.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\nsimilarity index 62%\nrename from hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/PartitionId.java\nrename to hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\nindex 555f075bf7..c1d0f8291c 100644\n--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/PartitionId.java\n+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java\n\n@@ -26,7 +26,7 @@ import java.time.LocalDate;\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n-public class PartitionId {\n+public class RequestPartitionId {\n \n \tprivate final Integer myPartitionId;\n \tprivate final LocalDate myPartitionDate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzM1Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412153356", "bodyText": "Is this the first time we're requesting a non-boolean from a callback?  I wonder if we need to consider any other concerns--e.g. any consequences for other languages we need to consider?", "author": "fil512", "createdAt": "2020-04-21T12:47:16Z", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package ca.uhn.hapi.fhir.docs;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Docs\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.interceptor.api.Hook;\n+import ca.uhn.fhir.interceptor.api.Interceptor;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n+import ca.uhn.fhir.rest.server.tenant.UrlBaseTenantIdentificationStrategy;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@SuppressWarnings(\"InnerClassMayBeStatic\")\n+public class PartitionExamples {\n+\n+\tpublic void multitenantServer() {\n+\n+\t}\n+\n+\n+\t// START SNIPPET: partitionInterceptorRequestPartition\n+\t@Interceptor\n+\tpublic class RequestTenantPartitionInterceptor {\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_CREATE)\n+\t\tpublic PartitionId PartitionIdentifyCreate(ServletRequestDetails theRequestDetails) {\n+\t\t\treturn extractPartitionIdFromRequest(theRequestDetails);\n+\t\t}\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_READ)\n+\t\tpublic PartitionId PartitionIdentifyRead(ServletRequestDetails theRequestDetails) {\n+\t\t\treturn extractPartitionIdFromRequest(theRequestDetails);\n+\t\t}\n+\n+\t\tprivate PartitionId extractPartitionIdFromRequest(ServletRequestDetails theRequestDetails) {\n+\t\t\t// We will use the tenant ID that came from the request as the partition name\n+\t\t\tString tenantId = theRequestDetails.getTenantId();\n+\t\t\treturn PartitionId.fromPartitionName(tenantId);\n+\t\t}\n+\n+\t}\n+\t// END SNIPPET: partitionInterceptorRequestPartition\n+\n+\n+\t// START SNIPPET: partitionInterceptorHeaders\n+\t@Interceptor\n+\tpublic class CustomHeaderBasedPartitionInterceptor {\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_CREATE)\n+\t\tpublic PartitionId PartitionIdentifyCreate(ServletRequestDetails theRequestDetails) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODQyOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412578428", "bodyText": "No, we've done this before.. E.g. for delete conflicts", "author": "jamesagnew", "createdAt": "2020-04-22T00:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MDM0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412580342", "bodyText": "right!", "author": "fil512", "createdAt": "2020-04-22T00:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MzM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\nindex 8c32c59f25..ad56551221 100644\n--- a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\n+++ b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\n\n@@ -23,7 +23,7 @@ package ca.uhn.hapi.fhir.docs;\n import ca.uhn.fhir.interceptor.api.Hook;\n import ca.uhn.fhir.interceptor.api.Interceptor;\n import ca.uhn.fhir.interceptor.api.Pointcut;\n-import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n import ca.uhn.fhir.rest.server.RestfulServer;\n import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTY0Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412159646", "bodyText": "Nice clear examples!", "author": "fil512", "createdAt": "2020-04-21T12:55:58Z", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package ca.uhn.hapi.fhir.docs;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Docs\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.interceptor.api.Hook;\n+import ca.uhn.fhir.interceptor.api.Interceptor;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.rest.server.RestfulServer;\n+import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n+import ca.uhn.fhir.rest.server.tenant.UrlBaseTenantIdentificationStrategy;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@SuppressWarnings(\"InnerClassMayBeStatic\")\n+public class PartitionExamples {\n+\n+\tpublic void multitenantServer() {\n+\n+\t}\n+\n+\n+\t// START SNIPPET: partitionInterceptorRequestPartition\n+\t@Interceptor\n+\tpublic class RequestTenantPartitionInterceptor {\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_CREATE)\n+\t\tpublic PartitionId PartitionIdentifyCreate(ServletRequestDetails theRequestDetails) {\n+\t\t\treturn extractPartitionIdFromRequest(theRequestDetails);\n+\t\t}\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_READ)\n+\t\tpublic PartitionId PartitionIdentifyRead(ServletRequestDetails theRequestDetails) {\n+\t\t\treturn extractPartitionIdFromRequest(theRequestDetails);\n+\t\t}\n+\n+\t\tprivate PartitionId extractPartitionIdFromRequest(ServletRequestDetails theRequestDetails) {\n+\t\t\t// We will use the tenant ID that came from the request as the partition name\n+\t\t\tString tenantId = theRequestDetails.getTenantId();\n+\t\t\treturn PartitionId.fromPartitionName(tenantId);\n+\t\t}\n+\n+\t}\n+\t// END SNIPPET: partitionInterceptorRequestPartition\n+\n+\n+\t// START SNIPPET: partitionInterceptorHeaders\n+\t@Interceptor\n+\tpublic class CustomHeaderBasedPartitionInterceptor {\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_CREATE)\n+\t\tpublic PartitionId PartitionIdentifyCreate(ServletRequestDetails theRequestDetails) {\n+\t\t\tString partitionName = theRequestDetails.getHeader(\"X-Partition-Name\");\n+\t\t\treturn PartitionId.fromPartitionName(partitionName);\n+\t\t}\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_READ)\n+\t\tpublic PartitionId PartitionIdentifyRead(ServletRequestDetails theRequestDetails) {\n+\t\t\tString partitionName = theRequestDetails.getHeader(\"X-Partition-Name\");\n+\t\t\treturn PartitionId.fromPartitionName(partitionName);\n+\t\t}\n+\n+\t}\n+\t// END SNIPPET: partitionInterceptorHeaders\n+\n+\n+\t// START SNIPPET: partitionInterceptorResourceContents\n+\t@Interceptor\n+\tpublic class ResourceTypePartitionInterceptor {\n+\n+\t\t@Hook(Pointcut.STORAGE_PARTITION_IDENTIFY_CREATE)\n+\t\tpublic PartitionId PartitionIdentifyCreate(IBaseResource theResource) {\n+\t\t\tif (theResource instanceof Patient) {\n+\t\t\t\treturn PartitionId.fromPartitionName(\"PATIENT\");\n+\t\t\t} else if (theResource instanceof Observation) {\n+\t\t\t\t\treturn PartitionId.fromPartitionName(\"OBSERVATION\");\n+\t\t\t} else {\n+\t\t\t\treturn PartitionId.fromPartitionName(\"OTHER\");\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\t// END SNIPPET: partitionInterceptorResourceContents\n+\n+\n+\t// START SNIPPET: multitenantServer\n+\tpublic class MultitenantServer extends RestfulServer {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODU0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412578542", "bodyText": ":)", "author": "jamesagnew", "createdAt": "2020-04-22T00:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\nindex 8c32c59f25..ad56551221 100644\n--- a/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\n+++ b/hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/PartitionExamples.java\n\n@@ -23,7 +23,7 @@ package ca.uhn.hapi.fhir.docs;\n import ca.uhn.fhir.interceptor.api.Hook;\n import ca.uhn.fhir.interceptor.api.Interceptor;\n import ca.uhn.fhir.interceptor.api.Pointcut;\n-import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n import ca.uhn.fhir.rest.server.RestfulServer;\n import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4NjgwOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412286808", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic PartitionSettings partitionConfig() {\n          \n          \n            \n            \tpublic PartitionSettings partitionSettings() {", "author": "fil512", "createdAt": "2020-04-21T15:28:41Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java", "diffHunk": "@@ -230,11 +240,33 @@ public IConsentContextServices consentContextServices() {\n \t\treturn new JpaConsentContextServices();\n \t}\n \n+\t@Bean\n+\tpublic PartitionSettings partitionConfig() {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDI2NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412584264", "bodyText": "done", "author": "jamesagnew", "createdAt": "2020-04-22T00:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4NjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "998c1f7751feaa67f83e89c962555241502ce38b", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java\nindex 54fdf45a16..6cfc235e3b 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java\n\n@@ -240,11 +239,6 @@ public abstract class BaseConfig {\n \t\treturn new JpaConsentContextServices();\n \t}\n \n-\t@Bean\n-\tpublic PartitionSettings partitionConfig() {\n-\t\treturn new PartitionSettings();\n-\t}\n-\n \t@Bean\n \t@Lazy\n \tpublic IPartitionConfigSvc partitionConfigSvc() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NDI0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412294242", "bodyText": "It looks like this is only needed for tests.  Perhaps \"forUnitTest\"?", "author": "fil512", "createdAt": "2020-04-21T15:49:55Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceIndexedCompositeStringUniqueDao.java", "diffHunk": "@@ -25,15 +25,13 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n-import java.util.Collection;\n-import java.util.Optional;\n+import java.util.List;\n \n public interface IResourceIndexedCompositeStringUniqueDao extends JpaRepository<ResourceIndexedCompositeStringUnique, Long> {\n \n \t@Query(\"SELECT r FROM ResourceIndexedCompositeStringUnique r WHERE r.myIndexString = :str\")\n \tResourceIndexedCompositeStringUnique findByQueryString(@Param(\"str\") String theQueryString);\n \n-\t@Query(\"SELECT r.myResourceId FROM ResourceIndexedCompositeStringUnique r WHERE r.myIndexString IN :str\")\n-\tCollection<Long> findResourcePidsByQueryStrings(@Param(\"str\") Collection<String> theQueryString);\n-\n+\t@Query(\"SELECT r FROM ResourceIndexedCompositeStringUnique r WHERE r.myResourceId = :resId\")\n+\tList<ResourceIndexedCompositeStringUnique> findAllForResourceId(@Param(\"resId\") Long theResourceId);", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyMTU4NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412321584", "bodyText": "Same goes for the other ones like this", "author": "fil512", "createdAt": "2020-04-21T16:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NDI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDU3MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412584570", "bodyText": "done", "author": "jamesagnew", "createdAt": "2020-04-22T00:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NDI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceIndexedCompositeStringUniqueDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceIndexedCompositeStringUniqueDao.java\nindex 29ea1e5473..1e142e91ca 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceIndexedCompositeStringUniqueDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceIndexedCompositeStringUniqueDao.java\n\n@@ -33,5 +33,5 @@ public interface IResourceIndexedCompositeStringUniqueDao extends JpaRepository<\n \tResourceIndexedCompositeStringUnique findByQueryString(@Param(\"str\") String theQueryString);\n \n \t@Query(\"SELECT r FROM ResourceIndexedCompositeStringUnique r WHERE r.myResourceId = :resId\")\n-\tList<ResourceIndexedCompositeStringUnique> findAllForResourceId(@Param(\"resId\") Long theResourceId);\n+\tList<ResourceIndexedCompositeStringUnique> findAllForResourceIdForUnitTest(@Param(\"resId\") Long theResourceId);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NjI5MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412296290", "bodyText": "Nitpick: That's a lot of parameters.  Looks like an opportunity to group them together into a new class.", "author": "fil512", "createdAt": "2020-04-21T15:57:55Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoSearchParameterDstu3.java", "diffHunk": "@@ -72,8 +72,9 @@ protected void validateResourceForStorage(SearchParameter theResource, ResourceT\n \t\tString expression = theResource.getExpression();\n \t\tFhirContext context = getContext();\n \t\tEnumerations.SearchParamType type = theResource.getType();\n+\t\tString code = theResource.getCode();\n \n-\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamExtractor, type, status, base, expression, context, getConfig());\n+\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamRegistry, mySearchParamExtractor, code, type, status, base, expression, context, getConfig());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NTQ2NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412585465", "bodyText": "It's kinda gross, but this approach helps us have one codebase to validate all versions.. i actually put it this way to fix a bug where the checks were inconsistent across versions", "author": "jamesagnew", "createdAt": "2020-04-22T00:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NjI5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NjQwMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412296400", "bodyText": "Nitpick: That's a lot of parameters.  Looks like an opportunity to group them together into a new class.", "author": "fil512", "createdAt": "2020-04-21T15:58:19Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoSearchParameterDstu3.java", "diffHunk": "@@ -72,8 +72,9 @@ protected void validateResourceForStorage(SearchParameter theResource, ResourceT\n \t\tString expression = theResource.getExpression();\n \t\tFhirContext context = getContext();\n \t\tEnumerations.SearchParamType type = theResource.getType();\n+\t\tString code = theResource.getCode();\n \n-\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamExtractor, type, status, base, expression, context, getConfig());\n+\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamRegistry, mySearchParamExtractor, code, type, status, base, expression, context, getConfig());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NDg1OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412584859", "bodyText": "It's kinda gross, but this approach helps us have one codebase to validate all versions.. i actually put it this way to fix a bug where the checks were inconsistent across versions", "author": "jamesagnew", "createdAt": "2020-04-22T00:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NjQwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyMTY5NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412321695", "bodyText": "Nitpick: That's a lot of parameters.  Looks like an opportunity to group them together into a new class.", "author": "fil512", "createdAt": "2020-04-21T16:49:57Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoSearchParameterDstu3.java", "diffHunk": "@@ -72,8 +72,9 @@ protected void validateResourceForStorage(SearchParameter theResource, ResourceT\n \t\tString expression = theResource.getExpression();\n \t\tFhirContext context = getContext();\n \t\tEnumerations.SearchParamType type = theResource.getType();\n+\t\tString code = theResource.getCode();\n \n-\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamExtractor, type, status, base, expression, context, getConfig());\n+\t\tFhirResourceDaoSearchParameterR4.validateSearchParam(mySearchParamRegistry, mySearchParamExtractor, code, type, status, base, expression, context, getConfig());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NTQ5OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412585498", "bodyText": "It's kinda gross, but this approach helps us have one codebase to validate all versions.. i actually put it this way to fix a bug where the checks were inconsistent across versions", "author": "jamesagnew", "createdAt": "2020-04-22T00:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyMTY5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTM5Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412329396", "bodyText": "I suspect there may need to be changes to LiveBundle", "author": "fil512", "createdAt": "2020-04-21T16:59:12Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -132,14 +135,14 @@ public IResourceLookup resolveResourceIdentity(String theResourceName, String th\n \t * @throws ResourceNotFoundException If the ID can not be found\n \t */\n \t@Nonnull\n-\tpublic ResourcePersistentId resolveResourcePersistentIds(String theResourceType, String theId) {\n+\tpublic ResourcePersistentId resolveResourcePersistentIds(PartitionId thePartitionId, String theResourceType, String theId) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NTU1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412585554", "bodyText": "I'm adjusting it to just not support partitioning for now...", "author": "jamesagnew", "createdAt": "2020-04-22T00:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\nindex d53cfbc2a6..03ab4c5ada 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n\n@@ -135,14 +135,14 @@ public class IdHelperService {\n \t * @throws ResourceNotFoundException If the ID can not be found\n \t */\n \t@Nonnull\n-\tpublic ResourcePersistentId resolveResourcePersistentIds(PartitionId thePartitionId, String theResourceType, String theId) {\n+\tpublic ResourcePersistentId resolveResourcePersistentIds(RequestPartitionId theRequestPartitionId, String theResourceType, String theId) {\n \t\tLong retVal;\n \t\tif (myDaoConfig.getResourceClientIdStrategy() == DaoConfig.ClientIdStrategyEnum.ANY || !isValidPid(theId)) {\n \t\t\tif (myDaoConfig.isDeleteEnabled()) {\n-\t\t\t\tretVal = resolveResourceIdentity(thePartitionId, theResourceType, theId);\n+\t\t\t\tretVal = resolveResourceIdentity(theRequestPartitionId, theResourceType, theId);\n \t\t\t} else {\n-\t\t\t\tString key = PartitionId.stringifyForKey(thePartitionId) + \"/\" + theResourceType + \"/\" + theId;\n-\t\t\t\tretVal = myPersistentIdCache.get(key, t -> resolveResourceIdentity(thePartitionId, theResourceType, theId));\n+\t\t\t\tString key = RequestPartitionId.stringifyForKey(theRequestPartitionId) + \"/\" + theResourceType + \"/\" + theId;\n+\t\t\t\tretVal = myPersistentIdCache.get(key, t -> resolveResourceIdentity(theRequestPartitionId, theResourceType, theId));\n \t\t\t}\n \n \t\t} else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0Mjg4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412342886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (pid.isPresent() == false) {\n          \n          \n            \n            \t\tif (pid.isEmpty()) {", "author": "fil512", "createdAt": "2020-04-21T17:17:56Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -248,15 +260,35 @@ private String translatePidIdToForcedId(String theResourceType, ResourcePersiste\n \t\treturn typeToIds;\n \t}\n \n-\tprivate Long resolveResourceIdentity(String theResourceType, String theId) {\n-\t\tLong retVal;\n-\t\tretVal = myForcedIdDao\n-\t\t\t.findByTypeAndForcedId(theResourceType, theId)\n-\t\t\t.orElseThrow(() -> new ResourceNotFoundException(new IdDt(theResourceType, theId)));\n-\t\treturn retVal;\n+\tprivate Long resolveResourceIdentity(@Nullable PartitionId thePartitionId, @Nonnull String theResourceType, @Nonnull String theId) {\n+\t\tOptional<Long> pid;\n+\t\tif (thePartitionId != null) {\n+\t\t\tif (thePartitionId.getPartitionId() == null) {\n+\t\t\t\tpid = myForcedIdDao.findByPartitionIdNullAndTypeAndForcedId(theResourceType, theId);\n+\t\t\t} else {\n+\t\t\t\tpid = myForcedIdDao.findByPartitionIdAndTypeAndForcedId(thePartitionId.getPartitionId(), theResourceType, theId);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tpid = myForcedIdDao.findByTypeAndForcedId(theResourceType, theId);\n+\t\t\t} catch (IncorrectResultSizeDataAccessException e) {\n+\t\t\t\t/*\n+\t\t\t\t *  This means that:\n+\t\t\t\t *  1. There are two resources with the exact same resource type and forced id\n+\t\t\t\t *  2. The unique constraint on this column-pair has been dropped\n+\t\t\t\t */\n+\t\t\t\tString msg = myFhirCtx.getLocalizer().getMessage(IdHelperService.class, \"nonUniqueForcedId\");\n+\t\t\t\tthrow new PreconditionFailedException(msg);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (pid.isPresent() == false) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\nindex d53cfbc2a6..03ab4c5ada 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n\n@@ -260,13 +260,13 @@ public class IdHelperService {\n \t\treturn typeToIds;\n \t}\n \n-\tprivate Long resolveResourceIdentity(@Nullable PartitionId thePartitionId, @Nonnull String theResourceType, @Nonnull String theId) {\n+\tprivate Long resolveResourceIdentity(@Nullable RequestPartitionId theRequestPartitionId, @Nonnull String theResourceType, @Nonnull String theId) {\n \t\tOptional<Long> pid;\n-\t\tif (thePartitionId != null) {\n-\t\t\tif (thePartitionId.getPartitionId() == null) {\n+\t\tif (theRequestPartitionId != null) {\n+\t\t\tif (theRequestPartitionId.getPartitionId() == null) {\n \t\t\t\tpid = myForcedIdDao.findByPartitionIdNullAndTypeAndForcedId(theResourceType, theId);\n \t\t\t} else {\n-\t\t\t\tpid = myForcedIdDao.findByPartitionIdAndTypeAndForcedId(thePartitionId.getPartitionId(), theResourceType, theId);\n+\t\t\t\tpid = myForcedIdDao.findByPartitionIdAndTypeAndForcedId(theRequestPartitionId.getPartitionId(), theResourceType, theId);\n \t\t\t}\n \t\t} else {\n \t\t\ttry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MzQ3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412343471", "bodyText": "Nitpick: this looks like a method", "author": "fil512", "createdAt": "2020-04-21T17:18:43Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -272,9 +304,19 @@ private Long resolveResourceIdentity(String theResourceType, String theId) {\n \t\t\t\t.map(t -> t.getIdPartAsLong())\n \t\t\t\t.collect(Collectors.toList());\n \t\t\tif (!pids.isEmpty()) {\n-\t\t\t\tmyResourceTableDao.findLookupFieldsByResourcePid(pids)\n+\t\t\t\tCollection<Object[]> lookup;\n+\t\t\t\tif (thePartitionId != null) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU5MDQzNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412590435", "bodyText": "refactored", "author": "jamesagnew", "createdAt": "2020-04-22T00:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MzQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\nindex d53cfbc2a6..03ab4c5ada 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n\n@@ -305,9 +305,9 @@ public class IdHelperService {\n \t\t\t\t.collect(Collectors.toList());\n \t\t\tif (!pids.isEmpty()) {\n \t\t\t\tCollection<Object[]> lookup;\n-\t\t\t\tif (thePartitionId != null) {\n-\t\t\t\t\tif (thePartitionId.getPartitionId() != null) {\n-\t\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(pids, thePartitionId.getPartitionId());\n+\t\t\t\tif (theRequestPartitionId != null) {\n+\t\t\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n+\t\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartition(pids, theRequestPartitionId.getPartitionId());\n \t\t\t\t\t} else {\n \t\t\t\t\t\tlookup = myResourceTableDao.findLookupFieldsByResourcePidInPartitionNull(pids);\n \t\t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NTM5Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412345397", "bodyText": "I wonder what the performance implications of this will be.  Good idea putting it first.", "author": "fil512", "createdAt": "2020-04-21T17:21:24Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -110,41 +115,57 @@ private void postConstruct() {\n \t\treturn (Join<ResourceTable, T>) join;\n \t}\n \n-\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing) {\n-//\t\tif (myDontUseHashesForSearch) {\n-//\t\t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n-//\t\t\tJoin<Object, Object> paramJoin = paramPresentJoin.join(\"mySearchParam\", JoinType.LEFT);\n-//\n-//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myResourceName\"), theResourceName));\n-//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramJoin.get(\"myParamName\"), theParamName));\n-//\t\t\tmyQueryRoot.addPredicate(myBuilder.equal(paramPresentJoin.get(\"myPresent\"), !theMissing));\n-//\t\t}\n-\n+\tvoid addPredicateParamMissingForReference(String theResourceName, String theParamName, boolean theMissing, PartitionId thePartitionId) {\n \t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n \n \t\tExpression<Long> hashPresence = paramPresentJoin.get(\"myHashPresence\").as(Long.class);\n-\t\tLong hash = SearchParamPresent.calculateHashPresence(theResourceName, theParamName, !theMissing);\n-\t\tmyQueryRoot.addPredicate(myCriteriaBuilder.equal(hashPresence, hash));\n-\t}\n+\t\tLong hash = SearchParamPresent.calculateHashPresence(myPartitionSettings, thePartitionId, theResourceName, theParamName, !theMissing);\n+\n+\t\tList<Predicate> predicates = new ArrayList<>();\n+\t\tpredicates.add(myCriteriaBuilder.equal(hashPresence, hash));\n \n-\tvoid addPredicateParamMissing(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin) {\n+\t\taddPartitionIdPredicate(thePartitionId, paramPresentJoin, predicates);\n \n+\t\tmyQueryRoot.setHasIndexJoins();\n+\t\tmyQueryRoot.addPredicates(predicates);\n+\t}\n+\n+\tvoid addPredicateParamMissingForNonReference(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin, PartitionId thePartitionId) {\n+\t\tif (thePartitionId != null) {\n+\t\t\tif (thePartitionId.getPartitionId() != null) {\n+\t\t\t\tmyQueryRoot.addPredicate(myCriteriaBuilder.equal(theJoin.get(\"myPartitionIdValue\"), thePartitionId.getPartitionId()));", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NTc2Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412585767", "bodyText": "This will absolutely require index tuning in order to work in a performant way...", "author": "jamesagnew", "createdAt": "2020-04-22T00:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\nindex caac1c332b..1015b7d24c 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java\n\n@@ -115,25 +115,25 @@ abstract class BasePredicateBuilder {\n \t\treturn (Join<ResourceTable, T>) join;\n \t}\n \n-\tvoid addPredicateParamMissingForReference(String theResourceName, String theParamName, boolean theMissing, PartitionId thePartitionId) {\n+\tvoid addPredicateParamMissingForReference(String theResourceName, String theParamName, boolean theMissing, RequestPartitionId theRequestPartitionId) {\n \t\tJoin<ResourceTable, SearchParamPresent> paramPresentJoin = myQueryRoot.join(\"mySearchParamPresents\", JoinType.LEFT);\n \n \t\tExpression<Long> hashPresence = paramPresentJoin.get(\"myHashPresence\").as(Long.class);\n-\t\tLong hash = SearchParamPresent.calculateHashPresence(myPartitionSettings, thePartitionId, theResourceName, theParamName, !theMissing);\n+\t\tLong hash = SearchParamPresent.calculateHashPresence(myPartitionSettings, theRequestPartitionId, theResourceName, theParamName, !theMissing);\n \n \t\tList<Predicate> predicates = new ArrayList<>();\n \t\tpredicates.add(myCriteriaBuilder.equal(hashPresence, hash));\n \n-\t\taddPartitionIdPredicate(thePartitionId, paramPresentJoin, predicates);\n+\t\taddPartitionIdPredicate(theRequestPartitionId, paramPresentJoin, predicates);\n \n \t\tmyQueryRoot.setHasIndexJoins();\n \t\tmyQueryRoot.addPredicates(predicates);\n \t}\n \n-\tvoid addPredicateParamMissingForNonReference(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin, PartitionId thePartitionId) {\n-\t\tif (thePartitionId != null) {\n-\t\t\tif (thePartitionId.getPartitionId() != null) {\n-\t\t\t\tmyQueryRoot.addPredicate(myCriteriaBuilder.equal(theJoin.get(\"myPartitionIdValue\"), thePartitionId.getPartitionId()));\n+\tvoid addPredicateParamMissingForNonReference(String theResourceName, String theParamName, boolean theMissing, Join<ResourceTable, ? extends BaseResourceIndexedSearchParam> theJoin, RequestPartitionId theRequestPartitionId) {\n+\t\tif (theRequestPartitionId != null) {\n+\t\t\tif (theRequestPartitionId.getPartitionId() != null) {\n+\t\t\t\tmyQueryRoot.addPredicate(myCriteriaBuilder.equal(theJoin.get(\"myPartitionIdValue\"), theRequestPartitionId.getPartitionId()));\n \t\t\t} else {\n \t\t\t\tmyQueryRoot.addPredicate(myCriteriaBuilder.isNull(theJoin.get(\"myPartitionIdValue\")));\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1MDQzOA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412350438", "bodyText": "This surprises me.  I guess this is a fairly urgent TODO to add support for history back in when partitioning is enabled?  This means that FMC will lose the history operation?  I don't think this came across in the docs that we are switching off functionality like this when partitions are switched on.", "author": "fil512", "createdAt": "2020-04-21T17:28:32Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -635,6 +685,11 @@ public void setResourceType(Class<? extends IBaseResource> theTableType) {\n \n \t@Override\n \tpublic IBundleProvider history(Date theSince, Date theUntil, RequestDetails theRequestDetails) {\n+\t\tif (myPartitionSettings.isPartitioningEnabled()) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NjAxNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412586014", "bodyText": "Yeah, I'll make that the next ticket", "author": "jamesagnew", "createdAt": "2020-04-22T00:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1MDQzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODg5NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412418894", "bodyText": "This is an interesting tradeoff of read/write performance.  I think you chose the better option.  I guess another option would be to index partition id with pid and do the find directly on that.  But I guess that doesn't work with partition id = null as an option.  (Maybe a reason to consider default partition = 0?).", "author": "fil512", "createdAt": "2020-04-21T19:07:56Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -943,17 +998,35 @@ public T read(IIdType theId, RequestDetails theRequest, boolean theDeletedOk) {\n \n \t@Override\n \tpublic BaseHasResource readEntity(IIdType theId, RequestDetails theRequest) {\n-\n \t\treturn readEntity(theId, true, theRequest);\n \t}\n \n \t@Override\n \tpublic BaseHasResource readEntity(IIdType theId, boolean theCheckForForcedId, RequestDetails theRequest) {\n \t\tvalidateResourceTypeAndThrowInvalidRequestException(theId);\n \n-\t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(getResourceName(), theId.getIdPart());\n+\t\t@Nullable PartitionId partitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n+\t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(partitionId, getResourceName(), theId.getIdPart());\n \t\tBaseHasResource entity = myEntityManager.find(ResourceTable.class, pid.getIdAsLong());\n \n+\t\t// Verify that the resource is for the correct partition\n+\t\tif (partitionId != null) {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\nindex 6ef82febaa..45d07ea8fa 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java\n\n@@ -1005,20 +1005,20 @@ public abstract class BaseHapiFhirResourceDao<T extends IBaseResource> extends B\n \tpublic BaseHasResource readEntity(IIdType theId, boolean theCheckForForcedId, RequestDetails theRequest) {\n \t\tvalidateResourceTypeAndThrowInvalidRequestException(theId);\n \n-\t\t@Nullable PartitionId partitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n-\t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(partitionId, getResourceName(), theId.getIdPart());\n+\t\t@Nullable RequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n+\t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(requestPartitionId, getResourceName(), theId.getIdPart());\n \t\tBaseHasResource entity = myEntityManager.find(ResourceTable.class, pid.getIdAsLong());\n \n \t\t// Verify that the resource is for the correct partition\n-\t\tif (partitionId != null) {\n-\t\t\tif (partitionId.getPartitionId() == null) {\n+\t\tif (requestPartitionId != null) {\n+\t\t\tif (requestPartitionId.getPartitionId() == null) {\n \t\t\t\tif (entity.getPartitionId() != null) {\n-\t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", partitionId, entity.getPartitionId());\n+\t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n \t\t\t} else if (entity.getPartitionId() != null) {\n-\t\t\t\tif (!entity.getPartitionId().getPartitionId().equals(partitionId.getPartitionId())) {\n-\t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", partitionId, entity.getPartitionId());\n+\t\t\t\tif (!entity.getPartitionId().getPartitionId().equals(requestPartitionId.getPartitionId())) {\n+\t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n \t\t\t} else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyNDY4Nw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412424687", "bodyText": "I don't think line changes the behaviour.  Did you add it for future change safety?", "author": "fil512", "createdAt": "2020-04-21T19:16:49Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "diffHunk": "@@ -762,6 +794,7 @@ private IQueryParameterType toParameterType(RuntimeSearchParam theParam) {\n \t\t\t\t\tqp = new SpecialParam();\n \t\t\t\t\tbreak;\n \t\t\t\t}\n+\t\t\t\tthrow new InternalErrorException(\"Don't know how to convert param type: \" + theParam.getParamType());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NjcwMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412586702", "bodyText": "yup", "author": "jamesagnew", "createdAt": "2020-04-22T00:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyNDY4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyNjg1NA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412426854", "bodyText": "I see these in all the predicates.  It feels dangerous to expect all the predicates to explicitly set this properly.  (Or maybe it's just an optimization thing).  Isn't there an inexpensive way to test if the query root has joins at the point where we need to know?", "author": "fil512", "createdAt": "2020-04-21T19:20:17Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderTag.java", "diffHunk": "@@ -151,13 +159,24 @@ void addPredicateTag(List<List<IQueryParameterType>> theList, String theParamNam\n \t\t\t\tdefJoin.where(tagListPredicate);\n \n \t\t\t\tcontinue;\n+\n+\t\t\t} else {\n+\n+\t\t\t\tmyQueryRoot.setHasIndexJoins();", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NzIzMw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412587233", "bodyText": "it's just an optimization thing... the consequence of missing it is that an  extra predicate on the resource type + partition ends up in the SQL... that only hurts performance", "author": "jamesagnew", "createdAt": "2020-04-22T00:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyNjg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderTag.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderTag.java\nindex 544ba889d8..04bab4248e 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderTag.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderTag.java\n\n@@ -172,8 +172,8 @@ class PredicateBuilderTag extends BasePredicateBuilder {\n \t\t\tPredicate tagListPredicate = createPredicateTagList(defJoin, myCriteriaBuilder, tagType, tokens);\n \t\t\tList<Predicate> predicates = Lists.newArrayList(tagListPredicate);\n \n-\t\t\tif (thePartitionId != null) {\n-\t\t\t\taddPartitionIdPredicate(thePartitionId, tagJoin, predicates);\n+\t\t\tif (theRequestPartitionId != null) {\n+\t\t\t\taddPartitionIdPredicate(theRequestPartitionId, tagJoin, predicates);\n \t\t\t}\n \n \t\t\tmyQueryRoot.addPredicates(predicates);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMTY1Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412431652", "bodyText": "This cache timeout seems really short to me--I assume this table changes really infrequently.  Can we just invalidate the cache whenever the table is changed and set the refresh to way longer?", "author": "fil512", "createdAt": "2020-04-21T19:27:31Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package ca.uhn.fhir.jpa.partition;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.data.IPartitionDao;\n+import ca.uhn.fhir.jpa.entity.PartitionEntity;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.github.benmanes.caffeine.cache.CacheLoader;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n+import org.apache.commons.lang3.Validate;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.transaction.Transactional;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class PartitionConfigSvcImpl implements IPartitionConfigSvc {\n+\n+\tpublic static final int DEFAULT_PERSISTED_PARTITION_ID = 0;\n+\tpublic static final String DEFAULT_PERSISTED_PARTITION_NAME = \"DEFAULT\";\n+\tprivate static final String DEFAULT_PERSISTED_PARTITION_DESC = \"Default partition\";\n+\tprivate static final Pattern PARTITION_NAME_VALID_PATTERN = Pattern.compile(\"[a-zA-Z0-9_-]+\");\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionConfigSvcImpl.class);\n+\n+\t@Autowired\n+\tprivate PlatformTransactionManager myTxManager;\n+\t@Autowired\n+\tprivate IPartitionDao myPartitionDao;\n+\n+\tprivate LoadingCache<String, PartitionEntity> myNameToPartitionCache;\n+\tprivate LoadingCache<Integer, PartitionEntity> myIdToPartitionCache;\n+\tprivate TransactionTemplate myTxTemplate;\n+\t@Autowired\n+\tprivate FhirContext myFhirCtx;\n+\n+\t@Override\n+\t@PostConstruct\n+\tpublic void start() {\n+\t\tmyNameToPartitionCache = Caffeine\n+\t\t\t.newBuilder()\n+\t\t\t.expireAfterWrite(1, TimeUnit.MINUTES)", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NzQ0OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412587449", "bodyText": "That's dangerous in a cluster..", "author": "jamesagnew", "createdAt": "2020-04-22T00:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMTY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\nsimilarity index 90%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\nindex 052c196a15..696e38c552 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\n\n@@ -44,13 +44,13 @@ import java.util.regex.Pattern;\n \n import static org.apache.commons.lang3.StringUtils.isBlank;\n \n-public class PartitionConfigSvcImpl implements IPartitionConfigSvc {\n+public class PartitionLookupSvcImpl implements IPartitionLookupSvc {\n \n \tpublic static final int DEFAULT_PERSISTED_PARTITION_ID = 0;\n \tpublic static final String DEFAULT_PERSISTED_PARTITION_NAME = \"DEFAULT\";\n \tprivate static final String DEFAULT_PERSISTED_PARTITION_DESC = \"Default partition\";\n \tprivate static final Pattern PARTITION_NAME_VALID_PATTERN = Pattern.compile(\"[a-zA-Z0-9_-]+\");\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionConfigSvcImpl.class);\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionLookupSvcImpl.class);\n \n \t@Autowired\n \tprivate PlatformTransactionManager myTxManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMjY0Mg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412432642", "bodyText": "I know there are \"reasons\" but man why can't we just make this a CRUD REST service?  Would probably be like 5 lines of Spring code...", "author": "fil512", "createdAt": "2020-04-21T19:29:11Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionManagementProvider.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package ca.uhn.fhir.jpa.partition;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.entity.PartitionEntity;\n+import ca.uhn.fhir.jpa.model.util.ProviderConstants;\n+import ca.uhn.fhir.rest.annotation.Operation;\n+import ca.uhn.fhir.rest.annotation.OperationParam;\n+import ca.uhn.fhir.rest.annotation.ResourceParam;\n+import ca.uhn.fhir.util.ParametersUtil;\n+import org.hl7.fhir.instance.model.api.IBaseParameters;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n+/**\n+ * This HAPI FHIR Server Plain Provider class provides the following operations:\n+ * <ul>\n+ *    <li><code>partition-management-add-partition</code></li>\n+ *    <li><code>partition-management-update-partition</code></li>\n+ *    <li><code>partition-management-delete-partition</code></li>\n+ * </ul>\n+ */\n+public class PartitionManagementProvider {\n+\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\t@Autowired\n+\tprivate IPartitionConfigSvc myPartitionConfigSvc;\n+\n+\t/**\n+\t * Add Partition:\n+\t * <code>\n+\t * $partition-management-add-partition\n+\t * </code>\n+\t */\n+\t@Operation(name = ProviderConstants.PARTITION_MANAGEMENT_ADD_PARTITION)", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NzgwNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412587807", "bodyText": "that might be better... but currently not a pattern we have at all", "author": "jamesagnew", "createdAt": "2020-04-22T00:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionManagementProvider.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionManagementProvider.java\nindex 22ed62e95e..62512764be 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionManagementProvider.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionManagementProvider.java\n\n@@ -47,7 +47,7 @@ public class PartitionManagementProvider {\n \t@Autowired\n \tprivate FhirContext myCtx;\n \t@Autowired\n-\tprivate IPartitionConfigSvc myPartitionConfigSvc;\n+\tprivate IPartitionLookupSvc myPartitionConfigSvc;\n \n \t/**\n \t * Add Partition:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNTczNQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412435735", "bodyText": "Nitpick: this looks like a PartitionLookupSvc to me as opposed to a PartitionConfigSvc.", "author": "fil512", "createdAt": "2020-04-21T19:34:17Z", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package ca.uhn.fhir.jpa.partition;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.dao.data.IPartitionDao;\n+import ca.uhn.fhir.jpa.entity.PartitionEntity;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.github.benmanes.caffeine.cache.CacheLoader;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n+import org.apache.commons.lang3.Validate;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import javax.annotation.PostConstruct;\n+import javax.transaction.Transactional;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+public class PartitionConfigSvcImpl implements IPartitionConfigSvc {", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4ODEwMA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412588100", "bodyText": "renamed", "author": "jamesagnew", "createdAt": "2020-04-22T00:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\nsimilarity index 90%\nrename from hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java\nrename to hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\nindex 052c196a15..696e38c552 100644\n--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionConfigSvcImpl.java\n+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/partition/PartitionLookupSvcImpl.java\n\n@@ -44,13 +44,13 @@ import java.util.regex.Pattern;\n \n import static org.apache.commons.lang3.StringUtils.isBlank;\n \n-public class PartitionConfigSvcImpl implements IPartitionConfigSvc {\n+public class PartitionLookupSvcImpl implements IPartitionLookupSvc {\n \n \tpublic static final int DEFAULT_PERSISTED_PARTITION_ID = 0;\n \tpublic static final String DEFAULT_PERSISTED_PARTITION_NAME = \"DEFAULT\";\n \tprivate static final String DEFAULT_PERSISTED_PARTITION_DESC = \"Default partition\";\n \tprivate static final Pattern PARTITION_NAME_VALID_PATTERN = Pattern.compile(\"[a-zA-Z0-9_-]+\");\n-\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionConfigSvcImpl.class);\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionLookupSvcImpl.class);\n \n \t@Autowired\n \tprivate PlatformTransactionManager myTxManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzODgzNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412438837", "bodyText": "This is a great regression test for tracking how code changes affect db interactions.  It's the gift that keeps on giving.", "author": "fil512", "createdAt": "2020-04-21T19:39:22Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java", "diffHunk": "@@ -279,8 +278,8 @@ public void testSearchUsingForcedIdReference() {\n \t\tmyCaptureQueriesListener.clear();\n \t\tassertEquals(1, myObservationDao.search(map).size().intValue());\n \t\tmyCaptureQueriesListener.logAllQueriesForCurrentThread();\n-\t\t// Resolve forced ID, Perform search, load result\n-\t\tassertEquals(3, myCaptureQueriesListener.countSelectQueriesForCurrentThread());\n+\t\t// Resolve forced ID, Perform search, load result (this time we reuse the cached forced-id resolution)", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4ODMzMQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412588331", "bodyText": "Yeah I love this test!", "author": "jamesagnew", "createdAt": "2020-04-22T00:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzODgzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjM2OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412442369", "bodyText": "the test would be clearer if it calculated this number instead of hardcoding it.", "author": "fil512", "createdAt": "2020-04-21T19:45:07Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirSystemDaoR4Test.java", "diffHunk": "@@ -609,6 +609,15 @@ public void testReindexingSingleStringHashValueIsDeleted() {\n \t\tmyResourceReindexingSvc.markAllResourcesForReindexing();\n \t\tmyResourceReindexingSvc.forceReindexingPass();\n \n+\t\trunInTransaction(()->{\n+\t\t\tResourceIndexedSearchParamString param = myResourceIndexedSearchParamStringDao.findAll()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(t -> t.getParamName().equals(\"family\"))\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(() -> new IllegalArgumentException());\n+\t\t\tassertEquals(-6332913947530887803L, param.getHashNormalizedPrefix().longValue());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4ODU1MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412588551", "bodyText": "this way is safest in terms of catching accidental changes to the algorithm though", "author": "jamesagnew", "createdAt": "2020-04-22T00:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjM2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MzA3Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412453073", "bodyText": "this repeated line is confusing", "author": "fil512", "createdAt": "2020-04-21T20:02:17Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java", "diffHunk": "@@ -0,0 +1,2145 @@\n+package ca.uhn.fhir.jpa.dao.r4;\n+\n+import ca.uhn.fhir.interceptor.api.Hook;\n+import ca.uhn.fhir.interceptor.api.Interceptor;\n+import ca.uhn.fhir.interceptor.api.Pointcut;\n+import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.jpa.entity.PartitionEntity;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.entity.*;\n+import ca.uhn.fhir.jpa.partition.IPartitionConfigSvc;\n+import ca.uhn.fhir.jpa.searchparam.SearchParamConstants;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.Constants;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.DateAndListParam;\n+import ca.uhn.fhir.rest.param.DateOrListParam;\n+import ca.uhn.fhir.rest.param.DateParam;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.TokenParamModifier;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.MethodNotAllowedException;\n+import ca.uhn.fhir.rest.server.exceptions.PreconditionFailedException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n+import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n+import ca.uhn.fhir.util.TestUtil;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n+import org.hamcrest.Matchers;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Organization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.SearchParameter;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.servlet.ServletException;\n+import java.time.LocalDate;\n+import java.time.Month;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class PartitioningR4Test extends BaseJpaR4SystemTest {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(PartitioningR4Test.class);\n+\n+\tprivate MyInterceptor myPartitionInterceptor;\n+\tprivate LocalDate myPartitionDate;\n+\tprivate LocalDate myPartitionDate2;\n+\tprivate int myPartitionId;\n+\tprivate int myPartitionId2;\n+\tprivate boolean myHaveDroppedForcedIdUniqueConstraint;\n+\t@Autowired\n+\tprivate IPartitionConfigSvc myPartitionConfigSvc;\n+\n+\t@After\n+\tpublic void after() {\n+\t\tmyPartitionInterceptor.assertNoRemainingIds();\n+\n+\t\tmyPartitionSettings.setIncludePartitionInSearchHashes(new PartitionSettings().isIncludePartitionInSearchHashes());\n+\t\tmyPartitionSettings.setPartitioningEnabled(new PartitionSettings().isPartitioningEnabled());\n+\t\tmyPartitionSettings.setAllowReferencesAcrossPartitions(new PartitionSettings().getAllowReferencesAcrossPartitions());\n+\n+\t\tmyInterceptorRegistry.unregisterInterceptorsIf(t -> t instanceof MyInterceptor);\n+\t\tmyInterceptor = null;\n+\n+\t\tif (myHaveDroppedForcedIdUniqueConstraint) {\n+\t\t\trunInTransaction(() -> {\n+\t\t\t\tmyEntityManager.createNativeQuery(\"delete from HFJ_FORCED_ID\").executeUpdate();\n+\t\t\t\tmyEntityManager.createNativeQuery(\"alter table HFJ_FORCED_ID add constraint IDX_FORCEDID_TYPE_FID unique (RESOURCE_TYPE, FORCED_ID)\");\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\t@Before\n+\tpublic void before() throws ServletException {\n+\t\tsuper.before();\n+\n+\t\tmyPartitionSettings.setPartitioningEnabled(true);\n+\t\tmyPartitionSettings.setIncludePartitionInSearchHashes(new PartitionSettings().isIncludePartitionInSearchHashes());\n+\n+\t\tmyDaoConfig.setUniqueIndexesEnabled(true);\n+\n+\t\tmyModelConfig.setDefaultSearchParamsCanBeOverridden(true);\n+\n+\t\tmyPartitionDate = LocalDate.of(2020, Month.JANUARY, 14);\n+\t\tmyPartitionDate2 = LocalDate.of(2020, Month.JANUARY, 15);\n+\t\tmyPartitionId = 1;\n+\t\tmyPartitionId2 = 2;\n+\n+\t\tmyPartitionInterceptor = new MyInterceptor();\n+\t\tmyInterceptorRegistry.registerInterceptor(myPartitionInterceptor);\n+\n+\t\tmyPartitionConfigSvc.createPartition(new PartitionEntity().setId(1).setName(\"PART-1\"));\n+\t\tmyPartitionConfigSvc.createPartition(new PartitionEntity().setId(2).setName(\"PART-2\"));\n+\t\tmyPartitionConfigSvc.createPartition(new PartitionEntity().setId(3).setName(\"PART-3\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateSearchParameter_DefaultPartition() {\n+\t\taddCreateNoPartition();\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"Patient\");\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\tsp.setType(Enumerations.SearchParamType.REFERENCE);\n+\t\tsp.setCode(\"extpatorg\");\n+\t\tsp.setName(\"extpatorg\");\n+\t\tsp.setExpression(\"Patient.extension('http://patext').value.as(Reference)\");\n+\t\tLong id = mySearchParameterDao.create(sp).getId().getIdPartAsLong();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tResourceTable resourceTable = myResourceTableDao.findById(id).orElseThrow(IllegalArgumentException::new);\n+\t\t\tassertNull(resourceTable.getPartitionId());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_CrossPartitionReference_ByPid_Allowed() {\n+\t\tmyPartitionSettings.setAllowReferencesAcrossPartitions(PartitionSettings.CrossPartitionReferenceMode.ALLOWED_UNQUALIFIED);\n+\n+\t\t// Create patient in partition 1\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.create(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition 2\n+\t\taddCreatePartition(myPartitionId2, myPartitionDate2);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\t\tIIdType obsId = myObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tList<ResourceLink> resLinks = myResourceLinkDao.findAll();\n+\t\t\tourLog.info(\"Resource links:\\n{}\", resLinks.toString());\n+\t\t\tassertEquals(2, resLinks.size());\n+\t\t\tassertEquals(obsId.getIdPartAsLong(), resLinks.get(0).getSourceResourcePid());\n+\t\t\tassertEquals(patientId.getIdPartAsLong(), resLinks.get(0).getTargetResourcePid());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_CrossPartitionReference_ByPid_NotAllowed() {\n+\n+\t\t// Create patient in partition 1\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.create(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition 2\n+\t\taddCreatePartition(myPartitionId2, myPartitionDate2);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\n+\t\ttry {\n+\t\t\tmyObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\t\t\tfail();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertThat(e.getMessage(), startsWith(\"Resource Patient/\" + patientId.getIdPart() + \" not found, specified in path: Observation.subject\"));\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_CrossPartitionReference_ByForcedId_Allowed() {\n+\t\tmyPartitionSettings.setAllowReferencesAcrossPartitions(PartitionSettings.CrossPartitionReferenceMode.ALLOWED_UNQUALIFIED);\n+\n+\t\t// Create patient in partition 1\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setId(\"ONE\");\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.update(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition 2\n+\t\taddCreatePartition(myPartitionId2, myPartitionDate2);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\t\tIIdType obsId = myObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tList<ResourceLink> resLinks = myResourceLinkDao.findAll();\n+\t\t\tourLog.info(\"Resource links:\\n{}\", resLinks.toString());\n+\t\t\tassertEquals(2, resLinks.size());\n+\t\t\tassertEquals(obsId.getIdPartAsLong(), resLinks.get(0).getSourceResourcePid());\n+\t\t\tassertEquals(patientId.getIdPart(), resLinks.get(0).getTargetResourceId());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_CrossPartitionReference_ByForcedId_NotAllowed() {\n+\n+\t\t// Create patient in partition 1\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setId(\"ONE\");\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.update(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition 2\n+\t\taddCreatePartition(myPartitionId2, myPartitionDate2);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\n+\t\ttry {\n+\t\t\tmyObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\t\t\tfail();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertThat(e.getMessage(), startsWith(\"Resource Patient/ONE not found, specified in path: Observation.subject\"));\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_SamePartitionReference_DefaultPartition_ByPid() {\n+\t\t// Create patient in partition NULL\n+\t\taddCreateNoPartitionId(myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.create(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition NULL\n+\t\taddCreateNoPartitionId(myPartitionDate);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\t\tIIdType obsId = myObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tList<ResourceLink> resLinks = myResourceLinkDao.findAll();\n+\t\t\tourLog.info(\"Resource links:\\n{}\", resLinks.toString());\n+\t\t\tassertEquals(2, resLinks.size());\n+\t\t\tassertEquals(obsId.getIdPartAsLong(), resLinks.get(0).getSourceResourcePid());\n+\t\t\tassertEquals(patientId.getIdPartAsLong(), resLinks.get(0).getTargetResourcePid());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_SamePartitionReference_DefaultPartition_ByForcedId() {\n+\t\t// Create patient in partition NULL\n+\t\taddCreateNoPartitionId(myPartitionDate);\n+\t\tPatient patient = new Patient();\n+\t\tpatient.setId(\"ONE\");\n+\t\tpatient.setActive(true);\n+\t\tIIdType patientId = myPatientDao.update(patient).getId().toUnqualifiedVersionless();\n+\n+\t\t// Create observation in partition NULL\n+\t\taddCreateNoPartitionId(myPartitionDate);\n+\t\tObservation obs = new Observation();\n+\t\tobs.getSubject().setReference(patientId.getValue());\n+\t\tIIdType obsId = myObservationDao.create(obs).getId().toUnqualifiedVersionless();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tList<ResourceLink> resLinks = myResourceLinkDao.findAll();\n+\t\t\tourLog.info(\"Resource links:\\n{}\", resLinks.toString());\n+\t\t\tassertEquals(2, resLinks.size());\n+\t\t\tassertEquals(obsId.getIdPartAsLong(), resLinks.get(0).getSourceResourcePid());\n+\t\t\tassertEquals(patientId.getIdPart(), resLinks.get(0).getTargetResourceId());\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateSearchParameter_DefaultPartitionWithDate() {\n+\t\taddCreateNoPartitionId(myPartitionDate);\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"Patient\");\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\tsp.setType(Enumerations.SearchParamType.REFERENCE);\n+\t\tsp.setCode(\"extpatorg\");\n+\t\tsp.setName(\"extpatorg\");\n+\t\tsp.setExpression(\"Patient.extension('http://patext').value.as(Reference)\");\n+\t\tLong id = mySearchParameterDao.create(sp).getId().getIdPartAsLong();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\t// HFJ_RESOURCE\n+\t\t\tResourceTable resourceTable = myResourceTableDao.findById(id).orElseThrow(IllegalArgumentException::new);\n+\t\t\tassertNull(resourceTable.getPartitionId().getPartitionId());\n+\t\t\tassertEquals(myPartitionDate, resourceTable.getPartitionId().getPartitionDate());\n+\t\t});\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testCreateSearchParameter_NonDefaultPartition() {\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\n+\t\tSearchParameter sp = new SearchParameter();\n+\t\tsp.addBase(\"Patient\");\n+\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\tsp.setType(Enumerations.SearchParamType.REFERENCE);\n+\t\tsp.setCode(\"extpatorg\");\n+\t\tsp.setName(\"extpatorg\");\n+\t\tsp.setExpression(\"Patient.extension('http://patext').value.as(Reference)\");\n+\t\ttry {\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tfail();\n+\t\t} catch (UnprocessableEntityException e) {\n+\t\t\tassertEquals(\"Resource type SearchParameter can not be partitioned\", e.getMessage());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_UnknownPartition() {\n+\t\taddCreatePartition(99, null);\n+\n+\t\tPatient p = new Patient();\n+\t\tp.addIdentifier().setSystem(\"system\").setValue(\"value\");\n+\t\tp.setBirthDate(new Date());\n+\t\ttry {\n+\t\t\tmyPatientDao.create(p);\n+\t\t\tfail();\n+\t\t} catch (InvalidRequestException e) {\n+\t\t\tassertEquals(\"Unknown partition ID: 99\", e.getMessage());\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testCreate_ServerId_NoPartition() {\n+\t\taddCreateNoPartition();\n+\n+\t\tPatient p = new Patient();\n+\t\tp.addIdentifier().setSystem(\"system\").setValue(\"value\");\n+\t\tp.setBirthDate(new Date());\n+\t\tLong patientId = myPatientDao.create(p).getId().getIdPartAsLong();\n+\n+\t\trunInTransaction(() -> {\n+\t\t\tResourceTable resourceTable = myResourceTableDao.findById(patientId).orElseThrow(IllegalArgumentException::new);\n+\t\t\tassertNull(resourceTable.getPartitionId());\n+\t\t});\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testCreate_ServerId_WithPartition() {\n+\t\tcreateUniqueCompositeSp();\n+\t\tcreateRequestId();\n+\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);\n+\t\taddCreatePartition(myPartitionId, myPartitionDate);", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4ODc4Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412588786", "bodyText": "we add 2 creates because we're about to create 2 resources... i'lll reorder to make that more clear", "author": "jamesagnew", "createdAt": "2020-04-22T00:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MzA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java\nindex 172e7198b1..7d76132060 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/PartitioningR4Test.java\n\n@@ -3,7 +3,7 @@ package ca.uhn.fhir.jpa.dao.r4;\n import ca.uhn.fhir.interceptor.api.Hook;\n import ca.uhn.fhir.interceptor.api.Interceptor;\n import ca.uhn.fhir.interceptor.api.Pointcut;\n-import ca.uhn.fhir.interceptor.model.PartitionId;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n import ca.uhn.fhir.jpa.entity.PartitionEntity;\n import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n import ca.uhn.fhir.jpa.model.entity.*;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwOTM2OA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412509368", "bodyText": "this is unlikely to fail, but this feels like a weak assert.\nCan you strength any() here?  can it go createPartition(eq(expectedPartition))", "author": "fil512", "createdAt": "2020-04-21T21:37:50Z", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/partition/PartitionManagementProviderTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package ca.uhn.fhir.jpa.partition;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.entity.PartitionEntity;\n+import ca.uhn.fhir.jpa.model.util.ProviderConstants;\n+import ca.uhn.fhir.rest.client.api.IGenericClient;\n+import ca.uhn.fhir.rest.client.interceptor.LoggingInterceptor;\n+import ca.uhn.fhir.test.utilities.server.RestfulServerRule;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.IntegerType;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.stubbing.Answer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(classes = PartitionManagementProviderTest.MyConfig.class)\n+public class PartitionManagementProviderTest {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(PartitionManagementProviderTest.class);\n+\tprivate static FhirContext ourCtx = FhirContext.forR4();\n+\t@ClassRule\n+\tpublic static RestfulServerRule ourServerRule = new RestfulServerRule(ourCtx);\n+\t@MockBean\n+\tprivate IPartitionConfigSvc myPartitionConfigSvc;\n+\t@Autowired\n+\tprivate PartitionManagementProvider myPartitionManagementProvider;\n+\tprivate IGenericClient myClient;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tourServerRule.getRestfulServer().registerProvider(myPartitionManagementProvider);\n+\t\tmyClient = ourServerRule.getFhirClient();\n+\t\tmyClient.registerInterceptor(new LoggingInterceptor(false));\n+\t}\n+\n+\t@After\n+\tpublic void after() {\n+\t\tourServerRule.getRestfulServer().unregisterProvider(myPartitionManagementProvider);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddPartition() {\n+\t\twhen(myPartitionConfigSvc.createPartition(any())).thenAnswer(createAnswer());\n+\n+\t\tParameters input = new Parameters();\n+\t\tinput.addParameter(ProviderConstants.PARTITION_MANAGEMENT_PARTITION_ID, new IntegerType(123));\n+\t\tinput.addParameter(ProviderConstants.PARTITION_MANAGEMENT_PARTITION_NAME, new CodeType(\"PARTITION-123\"));\n+\t\tinput.addParameter(ProviderConstants.PARTITION_MANAGEMENT_PARTITION_DESC, new StringType(\"a description\"));\n+\t\tourLog.info(\"Input:\\n{}\", ourCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(input));\n+\n+\t\tParameters response = myClient\n+\t\t\t.operation()\n+\t\t\t.onServer()\n+\t\t\t.named(ProviderConstants.PARTITION_MANAGEMENT_ADD_PARTITION)\n+\t\t\t.withParameters(input)\n+\t\t\t.encodedXml()\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response:\\n{}\", ourCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(response));\n+\t\tverify(myPartitionConfigSvc, times(1)).createPartition(any());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NTI2Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412575263", "bodyText": "We're verifying the response, which contains the same contents we sent in, so we know it is good.", "author": "jamesagnew", "createdAt": "2020-04-22T00:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwOTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MTkzMg==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412581932", "bodyText": "but the service is mocked\nI think the ideal mock provider tests confirm that the REST parameters got properly translated to service method parameters", "author": "fil512", "createdAt": "2020-04-22T00:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwOTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkwNjIyNA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412906224", "bodyText": "Well yeah but that mock implementation returns the same thing it receives, not a hardcoded response. So if we see data in the response, it can only have come from the request. I'm not getting what added value testing things in the intermediate state would add, unless we didn't trust HAPI's operations framework", "author": "jamesagnew", "createdAt": "2020-04-22T11:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwOTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5MDM4OQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412990389", "bodyText": "That means the test assumes that the provider returns what the service returns unchanged.  Might be a safe assumption or it might not be.  I'd need to look at the implementation to know.", "author": "fil512", "createdAt": "2020-04-22T13:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwOTM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "chunk": "diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/partition/PartitionManagementProviderTest.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/partition/PartitionManagementProviderTest.java\nindex 367d733d8a..8a32306065 100644\n--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/partition/PartitionManagementProviderTest.java\n+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/partition/PartitionManagementProviderTest.java\n\n@@ -43,7 +43,7 @@ public class PartitionManagementProviderTest {\n \t@ClassRule\n \tpublic static RestfulServerRule ourServerRule = new RestfulServerRule(ourCtx);\n \t@MockBean\n-\tprivate IPartitionConfigSvc myPartitionConfigSvc;\n+\tprivate IPartitionLookupSvc myPartitionConfigSvc;\n \t@Autowired\n \tprivate PartitionManagementProvider myPartitionManagementProvider;\n \tprivate IGenericClient myClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjkzOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412512939", "bodyText": "double check version order before final merge", "author": "fil512", "createdAt": "2020-04-21T21:44:30Z", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -57,17 +58,68 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \t\tinit400(); // 20190401 - 20190814\n \t\tinit410(); // 20190815 - 20191014\n \t\tinit420(); // 20191015 - 20200217\n-\t\tinit430(); // 20200218 - present\n+\t\tinit500(); // 20200218 - present\n \t}\n \n-\tprotected void init430() { // 20200218 - present\n+\tprotected void init500() { // 20200218 - present\n \t\tBuilder version = forVersion(VersionEnum.V4_3_0);\n \n \t\t// Eliminate circular dependency.\n \t\tversion.onTable(\"HFJ_RESOURCE\").dropColumn(\"20200218.1\", \"FORCED_ID_PID\");\n \t\tversion.onTable(\"HFJ_RES_VER\").dropColumn(\"20200218.2\", \"FORCED_ID_PID\");\n \t\tversion.onTable(\"HFJ_RES_VER\").addForeignKey(\"20200218.3\", \"FK_RESOURCE_HISTORY_RESOURCE\").toColumn(\"RES_ID\").references(\"HFJ_RESOURCE\", \"RES_ID\");\n \t\tversion.onTable(\"HFJ_RES_VER\").modifyColumn(\"20200220.1\", \"RES_ID\").nonNullable().failureAllowed().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n+", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NTM0NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412575345", "bodyText": "will do", "author": "jamesagnew", "createdAt": "2020-04-22T00:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "138369ede2c2ba06097b42caadcf0a81cd26dcb4", "chunk": "diff --git a/hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java b/hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\nindex 462eec9541..daa0f9f0d3 100644\n--- a/hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\n+++ b/hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\n\n@@ -72,18 +72,19 @@ public class HapiFhirJpaMigrationTasks extends BaseMigrationTasks<VersionEnum> {\n \n \t\t// These should have been non-nullable a long time ago\n \t\tversion.onTable(\"HFJ_SPIDX_STRING\").modifyColumn(\"20200413.1\", \"HASH_NORM_PREFIX\").nonNullable().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n-\t\tversion.onTable(\"HFJ_SPIDX_STRING\").modifyColumn(\"20200413.1\", \"HASH_IDENTITY\").nonNullable().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n-\t\tversion.onTable(\"HFJ_SPIDX_STRING\").modifyColumn(\"20200413.1\", \"HASH_EXACT\").nonNullable().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n+\t\tversion.onTable(\"HFJ_SPIDX_STRING\").modifyColumn(\"20200413.2\", \"HASH_IDENTITY\").nonNullable().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n+\t\tversion.onTable(\"HFJ_SPIDX_STRING\").modifyColumn(\"20200413.3\", \"HASH_EXACT\").nonNullable().withType(BaseTableColumnTypeTask.ColumnTypeEnum.LONG);\n \n \t\t// Drop unused column\n \t\tversion.onTable(\"HFJ_RESOURCE\").dropIndex(\"20200419.1\", \"IDX_RES_PROFILE\");\n-\t\tversion.onTable(\"HFJ_RESOURCE\").dropColumn(\"2020419.2\", \"RES_PROFILE\");\n+\t\tversion.onTable(\"HFJ_RESOURCE\").dropColumn(\"20200419.2\", \"RES_PROFILE\");\n \n \t\t// Add Partitioning\n-\t\tBuilder.BuilderAddTableByColumns partition = version.addTableByColumns(\"20200420.1\", \"HFJ_PARTITION\", \"PART_ID\");\n+\t\tBuilder.BuilderAddTableByColumns partition = version.addTableByColumns(\"20200420.0\", \"HFJ_PARTITION\", \"PART_ID\");\n \t\tpartition.addColumn(\"PART_ID\").nonNullable().type(BaseTableColumnTypeTask.ColumnTypeEnum.INT);\n \t\tpartition.addColumn(\"PART_NAME\").nonNullable().type(BaseTableColumnTypeTask.ColumnTypeEnum.STRING, 200);\n \t\tpartition.addColumn(\"PART_DESC\").nullable().type(BaseTableColumnTypeTask.ColumnTypeEnum.STRING, 200);\n+\t\tpartition.addIndex(\"20200420.1\", \"IDX_PART_NAME\").unique(true).withColumns(\"PART_NAME\");\n \n \t\t// Partition columns on individual tables\n \t\tversion.onTable(\"HFJ_RESOURCE\").addColumn(\"20200420.2\", \"PARTITION_ID\").nullable().type(BaseTableColumnTypeTask.ColumnTypeEnum.INT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxNDAxNw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412514017", "bodyText": "I assume you're excluding the case where hashes need to be recalculated for now?", "author": "fil512", "createdAt": "2020-04-21T21:46:30Z", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -511,7 +566,7 @@ private void init350() { // 20180601 - 20180917\n \t\t\tspidxNumber\n \t\t\t\t.addTask(new CalculateHashesTask(VersionEnum.V3_5_0, \"20180903.14\")\n \t\t\t\t\t.setColumnName(\"HASH_IDENTITY\")\n-\t\t\t\t\t.addCalculator(\"HASH_IDENTITY\", t -> BaseResourceIndexedSearchParam.calculateHashIdentity(t.getResourceType(), t.getString(\"SP_NAME\")))\n+\t\t\t\t\t.addCalculator(\"HASH_IDENTITY\", t -> BaseResourceIndexedSearchParam.calculateHashIdentity(new PartitionSettings(), null, t.getResourceType(), t.getString(\"SP_NAME\")))", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NTQ4NQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412575485", "bodyText": "Yeah, definitely out of scope for now", "author": "jamesagnew", "createdAt": "2020-04-22T00:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxNDAxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxNTAyOQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412515029", "bodyText": "Consider adding:\nONLY_TO_DEFAULT_PARTITION,", "author": "fil512", "createdAt": "2020-04-21T21:48:26Z", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/config/PartitionSettings.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package ca.uhn.fhir.jpa.model.config;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * @since 5.0.0\n+ */\n+public class PartitionSettings {\n+\n+\tprivate boolean myPartitioningEnabled = false;\n+\tprivate CrossPartitionReferenceMode myAllowReferencesAcrossPartitions = CrossPartitionReferenceMode.NOT_ALLOWED;\n+\tprivate boolean myIncludePartitionInSearchHashes = true;\n+\n+\t/**\n+\t * If set to <code>true</code> (default is <code>true</code>) the <code>PARTITION_ID</code> value will be factored into the\n+\t * hash values used in the <code>HFJ_SPIDX_xxx</code> tables, removing the need to explicitly add a selector\n+\t * on this column in queries. If set to <code>false</code>, an additional selector is used instead, which may perform\n+\t * better when using native database partitioning features.\n+\t * <p>\n+\t * This setting has no effect if partitioning is not enabled via {@link #isPartitioningEnabled()}.\n+\t * </p>\n+\t */\n+\tpublic boolean isIncludePartitionInSearchHashes() {\n+\t\treturn myIncludePartitionInSearchHashes;\n+\t}\n+\n+\t/**\n+\t * If set to <code>true</code> (default is <code>true</code>) the <code>PARTITION_ID</code> value will be factored into the\n+\t * hash values used in the <code>HFJ_SPIDX_xxx</code> tables, removing the need to explicitly add a selector\n+\t * on this column in queries. If set to <code>false</code>, an additional selector is used instead, which may perform\n+\t * better when using native database partitioning features.\n+\t * <p>\n+\t * This setting has no effect if partitioning is not enabled via {@link #isPartitioningEnabled()}.\n+\t * </p>\n+\t */\n+\tpublic void setIncludePartitionInSearchHashes(boolean theIncludePartitionInSearchHashes) {\n+\t\tmyIncludePartitionInSearchHashes = theIncludePartitionInSearchHashes;\n+\t}\n+\n+\t/**\n+\t * If enabled (default is <code>false</code>) the JPA server will support data partitioning\n+\t *\n+\t * @since 5.0.0\n+\t */\n+\tpublic boolean isPartitioningEnabled() {\n+\t\treturn myPartitioningEnabled;\n+\t}\n+\n+\t/**\n+\t * If enabled (default is <code>false</code>) the JPA server will support data partitioning\n+\t *\n+\t * @since 5.0.0\n+\t */\n+\tpublic void setPartitioningEnabled(boolean theMultiTenancyEnabled) {\n+\t\tmyPartitioningEnabled = theMultiTenancyEnabled;\n+\t}\n+\n+\t/**\n+\t * Should resources references be permitted to cross partition boundaries. Default is {@link CrossPartitionReferenceMode#NOT_ALLOWED}.\n+\t *\n+\t * @since 5.0.0\n+\t */\n+\tpublic CrossPartitionReferenceMode getAllowReferencesAcrossPartitions() {\n+\t\treturn myAllowReferencesAcrossPartitions;\n+\t}\n+\n+\t/**\n+\t * Should resources references be permitted to cross partition boundaries. Default is {@link CrossPartitionReferenceMode#NOT_ALLOWED}.\n+\t *\n+\t * @since 5.0.0\n+\t */\n+\tpublic void setAllowReferencesAcrossPartitions(CrossPartitionReferenceMode theAllowReferencesAcrossPartitions) {\n+\t\tmyAllowReferencesAcrossPartitions = theAllowReferencesAcrossPartitions;\n+\t}\n+\n+\n+\tpublic enum CrossPartitionReferenceMode {\n+\n+\t\t/**\n+\t\t * References between resources are not allowed to cross partition boundaries\n+\t\t */\n+\t\tNOT_ALLOWED,\n+\n+\t\t/**", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NTY1MA==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412575650", "bodyText": "I'm going to leave that for a future ticket", "author": "jamesagnew", "createdAt": "2020-04-22T00:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxNTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4MjQ0Mw==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412582443", "bodyText": "I know one client would really benefit from testing partition alignment on the way in, but they'll only be able to do that if a \"special\" lookup partition is excluded from the integrity check.", "author": "fil512", "createdAt": "2020-04-22T00:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxNTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/config/PartitionSettings.java b/hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/config/PartitionSettings.java\nindex 8d049d0eef..602b78bf1d 100644\n--- a/hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/config/PartitionSettings.java\n+++ b/hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/config/PartitionSettings.java\n\n@@ -51,8 +51,9 @@ public class PartitionSettings {\n \t * This setting has no effect if partitioning is not enabled via {@link #isPartitioningEnabled()}.\n \t * </p>\n \t */\n-\tpublic void setIncludePartitionInSearchHashes(boolean theIncludePartitionInSearchHashes) {\n+\tpublic PartitionSettings setIncludePartitionInSearchHashes(boolean theIncludePartitionInSearchHashes) {\n \t\tmyIncludePartitionInSearchHashes = theIncludePartitionInSearchHashes;\n+\t\treturn this;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxOTc5Ng==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412519796", "bodyText": "One of these tests should compare with non-empty PartitionSettings", "author": "fil512", "createdAt": "2020-04-21T21:57:24Z", "path": "hapi-fhir-jpaserver-model/src/test/java/ca/uhn/fhir/jpa/model/entity/ResourceIndexedSearchParamStringTest.java", "diffHunk": "@@ -36,10 +37,12 @@ public void testEquals() {\n \t\tResourceIndexedSearchParamString val1 = new ResourceIndexedSearchParamString()\n \t\t\t.setValueExact(\"aaa\")\n \t\t\t.setValueNormalized(\"AAA\");\n+\t\tval1.setPartitionSettings(new PartitionSettings());", "originalCommit": "00b1912a67ef878bc53bc0c924f6988e6e3ce77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3NzQ3MQ==", "url": "https://github.com/hapifhir/hapi-fhir/pull/1807#discussion_r412577471", "bodyText": "Done", "author": "jamesagnew", "createdAt": "2020-04-22T00:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxOTc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c7de85339ce55adaaed560fa875ab226a1fe435c", "chunk": "diff --git a/hapi-fhir-jpaserver-model/src/test/java/ca/uhn/fhir/jpa/model/entity/ResourceIndexedSearchParamStringTest.java b/hapi-fhir-jpaserver-model/src/test/java/ca/uhn/fhir/jpa/model/entity/ResourceIndexedSearchParamStringTest.java\nindex 9f884b9287..ff07d7c699 100644\n--- a/hapi-fhir-jpaserver-model/src/test/java/ca/uhn/fhir/jpa/model/entity/ResourceIndexedSearchParamStringTest.java\n+++ b/hapi-fhir-jpaserver-model/src/test/java/ca/uhn/fhir/jpa/model/entity/ResourceIndexedSearchParamStringTest.java\n\n@@ -50,4 +50,22 @@ public class ResourceIndexedSearchParamStringTest {\n \t\tassertNotEquals(val1, \"\");\n \t}\n \n+\t@Test\n+\tpublic void testEqualsDifferentPartition() {\n+\t\tResourceIndexedSearchParamString val1 = new ResourceIndexedSearchParamString()\n+\t\t\t.setValueExact(\"aaa\")\n+\t\t\t.setValueNormalized(\"AAA\");\n+\t\tval1.setPartitionSettings(new PartitionSettings().setIncludePartitionInSearchHashes(true));\n+\t\tval1.calculateHashes();\n+\t\tResourceIndexedSearchParamString val2 = new ResourceIndexedSearchParamString()\n+\t\t\t.setValueExact(\"aaa\")\n+\t\t\t.setValueNormalized(\"AAA\");\n+\t\tval2.setPartitionSettings(new PartitionSettings().setIncludePartitionInSearchHashes(true));\n+\t\tval2.calculateHashes();\n+\t\tassertEquals(val1, val1);\n+\t\tassertEquals(val1, val2);\n+\t\tassertNotEquals(val1, null);\n+\t\tassertNotEquals(val1, \"\");\n+\t}\n+\n }\n"}}, {"oid": "138369ede2c2ba06097b42caadcf0a81cd26dcb4", "url": "https://github.com/hapifhir/hapi-fhir/commit/138369ede2c2ba06097b42caadcf0a81cd26dcb4", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:17:17Z", "type": "commit"}, {"oid": "02e5dcb90daec39afe75e3412bddf5c77f6d2f73", "url": "https://github.com/hapifhir/hapi-fhir/commit/02e5dcb90daec39afe75e3412bddf5c77f6d2f73", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:17:44Z", "type": "commit"}, {"oid": "c7de85339ce55adaaed560fa875ab226a1fe435c", "url": "https://github.com/hapifhir/hapi-fhir/commit/c7de85339ce55adaaed560fa875ab226a1fe435c", "message": "Work on review comments", "committedDate": "2020-04-22T00:18:06Z", "type": "commit"}, {"oid": "c67cbca8c2531016a3c2e784cca0fe432c6fb471", "url": "https://github.com/hapifhir/hapi-fhir/commit/c67cbca8c2531016a3c2e784cca0fe432c6fb471", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:18:33Z", "type": "commit"}, {"oid": "53695c50a09c3c0172e3418643adb7ff9e92c936", "url": "https://github.com/hapifhir/hapi-fhir/commit/53695c50a09c3c0172e3418643adb7ff9e92c936", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:18:47Z", "type": "commit"}, {"oid": "4fe7f6e322009bd48344be48b79714b1aa9e5f44", "url": "https://github.com/hapifhir/hapi-fhir/commit/4fe7f6e322009bd48344be48b79714b1aa9e5f44", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:19:02Z", "type": "commit"}, {"oid": "532c830a4386d6f5e621ff905f7c67f29d5a1856", "url": "https://github.com/hapifhir/hapi-fhir/commit/532c830a4386d6f5e621ff905f7c67f29d5a1856", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:19:35Z", "type": "commit"}, {"oid": "fb4e620ba81d992fdc394842fba276961cb1f9fa", "url": "https://github.com/hapifhir/hapi-fhir/commit/fb4e620ba81d992fdc394842fba276961cb1f9fa", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:19:50Z", "type": "commit"}, {"oid": "d10538cdbe23226549b5d161de4038111d32b56d", "url": "https://github.com/hapifhir/hapi-fhir/commit/d10538cdbe23226549b5d161de4038111d32b56d", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:20:20Z", "type": "commit"}, {"oid": "7d0d7d9ab70ff95ce4ad93c6a56d16a217f506cf", "url": "https://github.com/hapifhir/hapi-fhir/commit/7d0d7d9ab70ff95ce4ad93c6a56d16a217f506cf", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:20:34Z", "type": "commit"}, {"oid": "6e444986bcf00b58df496e62547216cc4cb54968", "url": "https://github.com/hapifhir/hapi-fhir/commit/6e444986bcf00b58df496e62547216cc4cb54968", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:26:02Z", "type": "commit"}, {"oid": "50ef7d7afdbdb018d4660bd4767413950578b007", "url": "https://github.com/hapifhir/hapi-fhir/commit/50ef7d7afdbdb018d4660bd4767413950578b007", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:27:24Z", "type": "commit"}, {"oid": "4184268bea8cf64f7a3ee255bf75f4d4083eb87a", "url": "https://github.com/hapifhir/hapi-fhir/commit/4184268bea8cf64f7a3ee255bf75f4d4083eb87a", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:30:10Z", "type": "commit"}, {"oid": "45fdd9981e4303ef26a2eaec9d3f9eace53afbae", "url": "https://github.com/hapifhir/hapi-fhir/commit/45fdd9981e4303ef26a2eaec9d3f9eace53afbae", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:30:50Z", "type": "commit"}, {"oid": "49d15dbbe8f63f6783b0da49d68a7f075e814220", "url": "https://github.com/hapifhir/hapi-fhir/commit/49d15dbbe8f63f6783b0da49d68a7f075e814220", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/schema.md\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:32:27Z", "type": "commit"}, {"oid": "cc2b7452be28663c47854aec8727c0768dfdaebd", "url": "https://github.com/hapifhir/hapi-fhir/commit/cc2b7452be28663c47854aec8727c0768dfdaebd", "message": "Update hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java\n\nCo-Authored-By: Ken Stevens <khstevens@gmail.com>", "committedDate": "2020-04-22T00:36:19Z", "type": "commit"}, {"oid": "1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "url": "https://github.com/hapifhir/hapi-fhir/commit/1f37cdd8cf2c1c6cea2d532ff92d13f73e2d0d07", "message": "Address review comments", "committedDate": "2020-04-22T00:53:10Z", "type": "commit"}, {"oid": "62263815954ac6dfa7286126dcbd73c1fda23170", "url": "https://github.com/hapifhir/hapi-fhir/commit/62263815954ac6dfa7286126dcbd73c1fda23170", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-22T00:54:56Z", "type": "commit"}, {"oid": "7efd8a9f6ecc654cde093ef5a613f2f2dbb24807", "url": "https://github.com/hapifhir/hapi-fhir/commit/7efd8a9f6ecc654cde093ef5a613f2f2dbb24807", "message": "Merge branch 'ja_20200206_multitenancy' of github.com:jamesagnew/hapi-fhir into ja_20200206_multitenancy", "committedDate": "2020-04-22T00:55:09Z", "type": "commit"}, {"oid": "009d6443f598d04babbcc8976ecae9ebd92d822a", "url": "https://github.com/hapifhir/hapi-fhir/commit/009d6443f598d04babbcc8976ecae9ebd92d822a", "message": "Compile fx", "committedDate": "2020-04-22T01:34:15Z", "type": "commit"}, {"oid": "8a2b799df01b00e26e0f4e41e1cc8c8252471934", "url": "https://github.com/hapifhir/hapi-fhir/commit/8a2b799df01b00e26e0f4e41e1cc8c8252471934", "message": "Test fixes", "committedDate": "2020-04-22T12:43:00Z", "type": "commit"}, {"oid": "be5f8191dcd44b3e7e360b546c4542309ce18581", "url": "https://github.com/hapifhir/hapi-fhir/commit/be5f8191dcd44b3e7e360b546c4542309ce18581", "message": "One more bugfix", "committedDate": "2020-04-22T13:08:46Z", "type": "commit"}, {"oid": "06ae9bc64a24642cec618b1afc5af52421ea53c4", "url": "https://github.com/hapifhir/hapi-fhir/commit/06ae9bc64a24642cec618b1afc5af52421ea53c4", "message": "Update operation name", "committedDate": "2020-04-22T16:08:10Z", "type": "commit"}, {"oid": "6b7d8c47e8eb5c642cf222f3293174d5812d4d57", "url": "https://github.com/hapifhir/hapi-fhir/commit/6b7d8c47e8eb5c642cf222f3293174d5812d4d57", "message": "Merge branch 'master' into ja_20200206_multitenancy", "committedDate": "2020-04-22T16:08:29Z", "type": "commit"}, {"oid": "fc6642e1504384cc2040de50da0faa6d69267e49", "url": "https://github.com/hapifhir/hapi-fhir/commit/fc6642e1504384cc2040de50da0faa6d69267e49", "message": "Add one more constant", "committedDate": "2020-04-22T16:25:17Z", "type": "commit"}, {"oid": "af43c4377ad03794f12307506b162b70836eb6f3", "url": "https://github.com/hapifhir/hapi-fhir/commit/af43c4377ad03794f12307506b162b70836eb6f3", "message": "Roll back a change that was causing test failures", "committedDate": "2020-04-22T18:11:01Z", "type": "commit"}, {"oid": "36a7e9c9805058f38492a340afbda14e7fe5cbc0", "url": "https://github.com/hapifhir/hapi-fhir/commit/36a7e9c9805058f38492a340afbda14e7fe5cbc0", "message": "Test fixes", "committedDate": "2020-04-22T18:56:13Z", "type": "commit"}, {"oid": "37aa11182df2d046ad75f69c0077c358646ab636", "url": "https://github.com/hapifhir/hapi-fhir/commit/37aa11182df2d046ad75f69c0077c358646ab636", "message": "Docs fixes", "committedDate": "2020-04-24T01:05:23Z", "type": "commit"}]}