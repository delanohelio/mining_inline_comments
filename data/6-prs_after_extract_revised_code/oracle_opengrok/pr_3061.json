{"pr_number": 3061, "pr_title": "Bugfix/perforce", "pr_createdAt": "2020-03-04T01:16:03Z", "pr_url": "https://github.com/oracle/opengrok/pull/3061", "timeline": [{"oid": "760f2eb601778a757723ca6caa1d1ef2e2a36cab", "url": "https://github.com/oracle/opengrok/commit/760f2eb601778a757723ca6caa1d1ef2e2a36cab", "message": "Reorder repositories by cost and popularity", "committedDate": "2020-03-03T03:28:04Z", "type": "commit"}, {"oid": "36201ddc5c7bf322fa1e2cc406827245f65182eb", "url": "https://github.com/oracle/opengrok/commit/36201ddc5c7bf322fa1e2cc406827245f65182eb", "message": "Fix #2919 Fix #2797 Fix #981 Fix #878 Fix #502 Perforce refactoring\n\n- Run a p4-changes and p4-filelog, and integrate\n  the results, so only two p4 commands are needed\n  for History for a directory tree.\n- Parse file names from p4 commands so that\n  HistoryEntry instances have defined files.\n- Recognize binary file log for annotations.", "committedDate": "2020-03-04T01:13:24Z", "type": "commit"}, {"oid": "f916bde247d3958e7eae0cc86504cdc0f670c4d3", "url": "https://github.com/oracle/opengrok/commit/f916bde247d3958e7eae0cc86504cdc0f670c4d3", "message": "Avoid IllegalArgumentException, and log condition\n\nAccommodate a repository that can transiently\nreturn errors, such as Perforce when a login\nexpires.", "committedDate": "2020-03-04T01:14:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMzE5Ng==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387523196", "bodyText": "I assume this needs some setup steps to populate the root somehow. Could you perhaps update the test case with the steps ?", "author": "vladak", "createdAt": "2020-03-04T08:52:29Z", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java", "diffHunk": "@@ -40,36 +41,38 @@\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertEquals;\n-import org.opengrok.indexer.configuration.RuntimeEnvironment;\n import static org.opengrok.indexer.history.PerforceRepository.protectPerforceFilename;\n+import static org.opengrok.indexer.history.PerforceRepository.unprotectPerforceFilename;\n \n /**\n  * Do basic testing of the Perforce support\n  *\n  * @author Trond Norbye\n  */\n-@ConditionalRun(RepositoryInstalled.PerforceInstalled.class)\n public class PerforceRepositoryTest {\n \n     @Rule\n     public ConditionalRunRule rule = new ConditionalRunRule();\n     \n     private static boolean skip;\n     private static List<File> files;\n-    private static final File root = new File(\"/export/opengrok_p4_test\");\n+    private static final File root = new File(\"/var/opengrok/src/p4foo\");", "originalCommit": "f916bde247d3958e7eae0cc86504cdc0f670c4d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTE1MA==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035150", "bodyText": "OK done", "author": "idodeclare", "createdAt": "2020-03-05T01:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "665789e2b25f4b055561183cfd661b9d51d37d97", "chunk": "diff --git a/opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java b/opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java\nindex 74d81caddb..93e620d2a5 100644\n--- a/opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java\n+++ b/opengrok-indexer/src/test/java/org/opengrok/indexer/history/PerforceRepositoryTest.java\n\n@@ -71,6 +71,45 @@ public class PerforceRepositoryTest {\n         }\n     }\n \n+    /**\n+     * Following are steps to set up for testing:\n+     * <p><ul>\n+     * <li>Install a Perforce server instance. I elected to install the\n+     * helix-p4d package on Ubuntu by following the instructions at\n+     * <a href=\"https://www.perforce.com/manuals/p4sag/Content/P4SAG/install.linux.packages.install.html\">\n+     * Helix Core Server Administrator Guide > Installing the server > Linux\n+     * package-based installation > Installation</a>.\n+     * <li>Configure the Perforce server. Follow the instructions at\n+     * <a href=\"https://www.perforce.com/manuals/p4sag/Content/P4SAG/install.linux.packages.configure.html\">\n+     * Helix Core Server Administrator Guide > Installing the server > Linux\n+     * package-based installation > Post-installation configuration</a>.\n+     * <li>Secure the Perforce server transport layer. I deployed a private key\n+     * and certificate following the instructions at\n+     * <a href=\"https://www.perforce.com/manuals/p4sag/Content/P4SAG/DB5-16618.html\">\n+     * Helix Core Server Administrator Guide > Securing the server > Using SSL\n+     * to encrypt connections to a Helix server > Key and certificate\n+     * management</a>.\n+     * <li>Define an authentication method for the Perforce server. I elected to\n+     * authenticate against my home Active Directory following the instructions\n+     * at <a href=\"https://www.perforce.com/manuals/p4sag/Content/P4SAG/security.ldap.auth.html\">\n+     * Helix Core Server Administrator Guide > Securing the server > LDAP\n+     * authentication > Authenticating against Active Directory and LDAP\n+     * servers</a> and then testing the LDAP configuration per\n+     * <a href=\"https://www.perforce.com/manuals/p4sag/Content/P4SAG/security.ldap.testing.html\">\n+     * Helix Core Server Administrator Guide > Securing the server > LDAP\n+     * authentication > Testing and enabling LDAP configurations</a>.\n+     * <li>Install Perforce on the development workstation. I used Homebrew to\n+     * install: {@code admin$ brew cask install perforce}\n+     * <li>Set environment to connect to the Perforce server. My server is named\n+     * p4: {@code export P4PORT=ssl:p4.localdomain:1666}\n+     * <li>Define a Perforce client view on the workstation. For a workstation\n+     * named workstation1: {@code cd /var/opengrok/src && p4 client workstation1}\n+     * <li>Add sample code and submit: {@code p4 add *.h && p4 submit}\n+     * <li>Add more sample code and submit: {@code p4 add *.c && p4 submit}\n+     * <li>Add more sample code and submit: {@code p4 add *.txt && p4 submit}\n+     * <li>Code, Index, Test, and Debug.\n+     * </ul><p>\n+     */\n     @Test\n     @ConditionalRun(RepositoryInstalled.PerforceInstalled.class)\n     public void testHistoryAndAnnotations() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNDQzNw==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387524437", "bodyText": "good idea !", "author": "vladak", "createdAt": "2020-03-04T08:55:01Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/RepositoryFactory.java", "diffHunk": "@@ -51,21 +51,30 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryFactory.class);\n \n     private static final Repository[] repositories = {\n-        new BitKeeperRepository(),\n-        new MercurialRepository(),\n-        new AccuRevRepository(),\n-        new BazaarRepository(),\n-        new GitRepository(),\n-        new MonotoneRepository(),\n-        new SubversionRepository(),\n-        new SCCSRepository(),\n-        new RazorRepository(),\n-        new ClearCaseRepository(),\n-        new PerforceRepository(),\n-        new RCSRepository(),\n-        new CVSRepository(),\n-        new RepoRepository(),\n-        new SSCMRepository()\n+            /*\n+             * The following do cheap checks to determine isRepositoryFor(),\n+             * but still put the most popular at the head of the repositories\n+             * array.\n+             */\n+            new GitRepository(),\n+            new MercurialRepository(),\n+            new RepoRepository(),\n+            new BitKeeperRepository(),\n+            new BazaarRepository(),\n+            new MonotoneRepository(),\n+            new SubversionRepository(),\n+            new SCCSRepository(),\n+            new RazorRepository(),\n+            new RCSRepository(),\n+            new CVSRepository(),\n+            new SSCMRepository(),\n+            /*\n+             * The following do expensive checks to determine isRepositoryFor(),\n+             * so put them at the end of the repositories array.\n+             */\n+            new AccuRevRepository(),", "originalCommit": "f916bde247d3958e7eae0cc86504cdc0f670c4d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTMwMw==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387525303", "bodyText": "use isLoggable() also here ?", "author": "vladak", "createdAt": "2020-03-04T08:56:41Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java", "diffHunk": "@@ -78,18 +78,31 @@ static String protectPerforceFilename(String name) {\n         return t;\n     }\n \n+    static String unprotectPerforceFilename(String name) {\n+        String t = name.replace(\"%40\", \"@\");\n+        t = t.replace(\"%23\", \"#\");\n+        t = t.replace(\"%2A\", \"*\");\n+        t = t.replace(\"%25\", \"%\");\n+        if (!name.equals(t)) {\n+            LOGGER.log(Level.FINEST,", "originalCommit": "f916bde247d3958e7eae0cc86504cdc0f670c4d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTE3OA==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035178", "bodyText": "Yes", "author": "idodeclare", "createdAt": "2020-03-05T01:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "665789e2b25f4b055561183cfd661b9d51d37d97", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java\nindex 7227d5c559..5b2024c18e 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceRepository.java\n\n@@ -70,7 +70,7 @@ public class PerforceRepository extends Repository {\n         t = t.replace(\"#\", \"%23\");\n         t = t.replace(\"*\", \"%2A\");\n         t = t.replace(\"@\", \"%40\");\n-        if (!name.equals(t)) {\n+        if (LOGGER.isLoggable(Level.FINEST) && !name.equals(t)) {\n             LOGGER.log(Level.FINEST,\n                        \"protectPerforceFilename: replaced ''{0}'' with ''{1}''\",\n                        new Object[]{name, t});\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyOTAxOA==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r387529018", "bodyText": "what does Lede stand for ?", "author": "vladak", "createdAt": "2020-03-04T09:03:49Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java", "diffHunk": "@@ -271,4 +304,56 @@ private static Date newDate(int year, int month, int day, int hour, int minute,\n         cal.set(year, month - 1, day, hour, minute, second);\n         return cal.getTime();\n     }\n+\n+    private static HistoryEntry parseLedeLine(List<HistoryEntry> entries, HistoryEntry entry,", "originalCommit": "f916bde247d3958e7eae0cc86504cdc0f670c4d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNTI1Ng==", "url": "https://github.com/oracle/opengrok/pull/3061#discussion_r388035256", "bodyText": "I renamed as parseEntryLine().", "author": "idodeclare", "createdAt": "2020-03-05T01:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyOTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "665789e2b25f4b055561183cfd661b9d51d37d97", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java\nindex 17832c6de4..b25f1753f7 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/PerforceHistoryParser.java\n\n@@ -305,7 +305,7 @@ class PerforceHistoryParser {\n         return cal.getTime();\n     }\n \n-    private static HistoryEntry parseLedeLine(List<HistoryEntry> entries, HistoryEntry entry,\n+    private static HistoryEntry parseEntryLine(List<HistoryEntry> entries, HistoryEntry entry,\n             StringBuilder messageBuilder, Matcher matcher) {\n         if (entry != null) {\n             /* An entry finishes when a new entry starts ... */\n"}}, {"oid": "665789e2b25f4b055561183cfd661b9d51d37d97", "url": "https://github.com/oracle/opengrok/commit/665789e2b25f4b055561183cfd661b9d51d37d97", "message": "Revise after review", "committedDate": "2020-03-05T01:41:23Z", "type": "commit"}, {"oid": "c573aab51dc1b5d3ca9931bc2851b336a2a3b8d8", "url": "https://github.com/oracle/opengrok/commit/c573aab51dc1b5d3ca9931bc2851b336a2a3b8d8", "message": "Fix to escape > in JavaDoc", "committedDate": "2020-03-05T04:45:39Z", "type": "commit"}]}