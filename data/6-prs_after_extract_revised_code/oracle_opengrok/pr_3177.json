{"pr_number": 3177, "pr_title": "lucene 8.6", "pr_createdAt": "2020-07-20T09:51:30Z", "pr_url": "https://github.com/oracle/opengrok/pull/3177", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457244550", "bodyText": "So, why is this no longer accessible ? And why do we actually need Lucene 5.0 related value ?", "author": "vladak", "createdAt": "2020-07-20T10:04:32Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -415,8 +417,18 @@ public void update() throws IOException {\n              * compression on the minority of data that is stored, since it\n              * should not have a detrimental impact on overall throughput.\n              */\n-            iwc.setCodec(new Lucene84Codec(\n-                Lucene50StoredFieldsFormat.Mode.BEST_COMPRESSION));", "originalCommit": "940bc7e9a68723fd068b62677ac5a008de0a610b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MTkzOA==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457361938", "bodyText": "good question,\nit is still needed, I am just doing it with dynamic variable/class instead of hardcoded LuceneXXCodec", "author": "tarzanek", "createdAt": "2020-07-20T13:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MjI4NQ==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457362285", "bodyText": "but I didn't find a latest way for Lucene50StoredFieldsFormat getting of compression Mode", "author": "tarzanek", "createdAt": "2020-07-20T13:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2ODU1Nw==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457368557", "bodyText": "I mean - could we replace with something else ?", "author": "vladak", "createdAt": "2020-07-20T13:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MDE5NA==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457370194", "bodyText": "the documentation still mentions it: https://lucene.apache.org/core/8_4_1/core/org/apache/lucene/codecs/lucene84/Lucene84Codec.html#Lucene84Codec-org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.Mode-", "author": "vladak", "createdAt": "2020-07-20T13:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMTk2Mw==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457501963", "bodyText": "Some parts of the Lucene API are stable over major releases, so Lucene50StoredFieldsFormat is still the \"latest.\"\nThere is a public constructor for the 8.6 codec, so I don't believe reflection would be necessary:\npublic Lucene86Codec(Lucene50StoredFieldsFormat.Mode mode) {", "author": "idodeclare", "createdAt": "2020-07-20T15:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzIwMA==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457503200", "bodyText": "exactly. I am still puzzled why to use reflection here.", "author": "vladak", "createdAt": "2020-07-20T15:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzIxOQ==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457503219", "bodyText": "... and the codec is itself public:\npublic class Lucene86Codec extends Codec {", "author": "idodeclare", "createdAt": "2020-07-20T15:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2ODI1Mg==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457568252", "bodyText": "the goal is to get rid of version specific hard-codes and have upgrade automatic", "author": "tarzanek", "createdAt": "2020-07-20T17:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5OTY1Ng==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457599656", "bodyText": "Isn't it still effectively hard-coded since it's reflecting to seek a constructor taking lucene50.Lucene50StoredFieldsFormat?\nMaybe I was thinking backward to write \"Most data in OpenGrok is indexed but not stored, so use the best compression....\" Since it's the very minority of data, BEST_SPEED sounds just fine too in hindsight. Perhaps no real need to setCodec()?", "author": "idodeclare", "createdAt": "2020-07-20T18:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MzI3Ng==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r457943276", "bodyText": "Right. I don't think we care too much about size reduction either.", "author": "vladak", "createdAt": "2020-07-21T08:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTYxMg==", "url": "https://github.com/oracle/opengrok/pull/3177#discussion_r458299612", "bodyText": "then this is even better, we can just drop this whole section :-)", "author": "tarzanek", "createdAt": "2020-07-21T18:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0NDU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "04dc712e7764ecac248cbadc4920ec1883ac39da", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 88c430e03b..7fb357c5c0 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -412,23 +408,6 @@ public class IndexDatabase {\n             IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n             iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n             iwc.setRAMBufferSizeMB(env.getRamBufferSize());\n-            /**\n-             * Most data in OpenGrok is indexed but not stored, so use the best\n-             * compression on the minority of data that is stored, since it\n-             * should not have a detrimental impact on overall throughput.\n-             */\n-            Class<?> codecClass = Codec.getDefault().getClass();\n-            Constructor<?> cons;\n-            Object codec = null;\n-            try {\n-                cons = codecClass.getConstructor(Mode.class);\n-                codec = cons.newInstance(Mode.BEST_COMPRESSION);\n-            } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n-                LOGGER.log(Level.SEVERE,\n-                        \"Couldn''t initialize codec.\");\n-                System.exit(1);\n-            }\n-            iwc.setCodec((Codec) codec);\n             writer = new IndexWriter(indexDirectory, iwc);\n             writer.commit(); // to make sure index exists on the disk\n             completer = new PendingFileCompleter();\n"}}, {"oid": "04dc712e7764ecac248cbadc4920ec1883ac39da", "url": "https://github.com/oracle/opengrok/commit/04dc712e7764ecac248cbadc4920ec1883ac39da", "message": "lucene 8.6", "committedDate": "2020-07-28T09:47:43Z", "type": "commit"}, {"oid": "04dc712e7764ecac248cbadc4920ec1883ac39da", "url": "https://github.com/oracle/opengrok/commit/04dc712e7764ecac248cbadc4920ec1883ac39da", "message": "lucene 8.6", "committedDate": "2020-07-28T09:47:43Z", "type": "forcePushed"}]}