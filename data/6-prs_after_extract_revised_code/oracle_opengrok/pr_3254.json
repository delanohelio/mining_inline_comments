{"pr_number": 3254, "pr_title": "parallelize repository scan", "pr_createdAt": "2020-10-02T19:15:38Z", "pr_url": "https://github.com/oracle/opengrok/pull/3254", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTgyMQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499039821", "bodyText": "I wouldn't think a bounce would be required if futures are being awaited. Why is it necessary?", "author": "idodeclare", "createdAt": "2020-10-02T20:39:10Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");\n+            }\n+        });\n+\n+        env.getIndexerParallelizer().bounceRepositorySearchExecutor();", "originalCommit": "6b824f18148ea6bf410e0695a0d886ce4a01930c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NzI5MA==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057290", "bodyText": "just didn't want to keep the threads around.", "author": "vladak", "createdAt": "2020-10-02T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\nindex 3afe1e4039..941d596068 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n\n@@ -490,7 +490,7 @@ public final class HistoryGuru {\n             try {\n                 repoList.addAll(future.get());\n             } catch (Exception e) {\n-                LOGGER.log(Level.WARNING, \"failed to get future\");\n+                LOGGER.log(Level.WARNING, \"failed to get results of repository scan\");\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTA0Mg==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499041042", "bodyText": "See line 435:\nLimit usage lines to 72 characters for concise formatting.", "author": "idodeclare", "createdAt": "2020-10-02T20:42:08Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,\n+                    \"The number of threads to use for scanning for repositories.\",\n+                    \"By default the number of threads will be set to the number of available CPUs.\").", "originalCommit": "6b824f18148ea6bf410e0695a0d886ce4a01930c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NzgxNg==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057816", "bodyText": "fixed", "author": "vladak", "createdAt": "2020-10-02T21:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\nindex ffc7fe20ca..2b496cc040 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\n\n@@ -683,11 +683,6 @@ public final class Indexer {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n-            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,\n-                    \"The number of threads to use for scanning for repositories.\",\n-                    \"By default the number of threads will be set to the number of available CPUs.\").\n-                    execute(threadCount -> cfg.setRepositorySearchParallelism((Integer) threadCount));\n-\n             parser.on(\"-R /path/to/configuration\",\n                 \"Read configuration from the specified file.\").execute(v -> {\n                 // Already handled above. This populates usage.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTIzOA==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499041238", "bodyText": "This is mis-ordered and should appear after --repository", "author": "idodeclare", "createdAt": "2020-10-02T20:42:38Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java", "diffHunk": "@@ -679,6 +683,11 @@ public static void main(String[] argv) {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n+            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,", "originalCommit": "6b824f18148ea6bf410e0695a0d886ce4a01930c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1Nzg4Ng==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499057886", "bodyText": "fixed", "author": "vladak", "createdAt": "2020-10-02T21:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\nindex ffc7fe20ca..2b496cc040 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/Indexer.java\n\n@@ -683,11 +683,6 @@ public final class Indexer {\n                     \"Run as quietly as possible. Sets logging level to WARNING.\").execute(v ->\n                     LoggerUtil.setBaseConsoleLogLevel(Level.WARNING));\n \n-            parser.on(\"--repositorySearchThreads\", \"=number\", Integer.class,\n-                    \"The number of threads to use for scanning for repositories.\",\n-                    \"By default the number of threads will be set to the number of available CPUs.\").\n-                    execute(threadCount -> cfg.setRepositorySearchParallelism((Integer) threadCount));\n-\n             parser.on(\"-R /path/to/configuration\",\n                 \"Read configuration from the specified file.\").execute(v -> {\n                 // Already handled above. This populates usage.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDM2OA==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499090368", "bodyText": "Maybe a more activity-specific message?", "author": "idodeclare", "createdAt": "2020-10-02T23:43:22Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n+        for (File file: files) {\n+            futures.add(executor.submit(() -> addRepositories(new File[]{file},\n+                    env.getNestingMaximum(), 0, false)));\n+        }\n+\n+        List<RepositoryInfo> repoList = new ArrayList<>();\n+        futures.forEach(future -> {\n+            try {\n+                repoList.addAll(future.get());\n+            } catch (Exception e) {\n+                LOGGER.log(Level.WARNING, \"failed to get future\");", "originalCommit": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMDc1NA==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499420754", "bodyText": "fixed", "author": "vladak", "createdAt": "2020-10-05T08:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\nindex 3afe1e4039..941d596068 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n\n@@ -490,7 +490,7 @@ public final class HistoryGuru {\n             try {\n                 repoList.addAll(future.get());\n             } catch (Exception e) {\n-                LOGGER.log(Level.WARNING, \"failed to get future\");\n+                LOGGER.log(Level.WARNING, \"failed to get results of repository scan\");\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTY4MQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499091681", "bodyText": "May I suggest just using the -T,--threads executor? It's not otherwise being used at this stage of a run", "author": "idodeclare", "createdAt": "2020-10-02T23:50:35Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "originalCommit": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMjc1Nw==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499422757", "bodyText": "yes, that's reasonable.", "author": "vladak", "createdAt": "2020-10-05T08:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\nindex 3afe1e4039..941d596068 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n\n@@ -490,7 +490,7 @@ public final class HistoryGuru {\n             try {\n                 repoList.addAll(future.get());\n             } catch (Exception e) {\n-                LOGGER.log(Level.WARNING, \"failed to get future\");\n+                LOGGER.log(Level.WARNING, \"failed to get results of repository scan\");\n             }\n         });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499131554", "bodyText": "what is the point of caching what you can get from the lazy supplier?\nIs it that you need to keep track if it has ever been initialized?", "author": "tulinkry", "createdAt": "2020-10-03T09:17:09Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java", "diffHunk": "@@ -147,6 +151,15 @@ public ExecutorService getCtagsWatcherExecutor() {\n         return result;\n     }\n \n+    /**\n+     * @return the ExecutorService used for repository scan\n+     */\n+    public ExecutorService getRepositorySearchExecutor() {\n+        ExecutorService result = lzRepositorySearchExecutor.get();\n+        repositorySearchExecutor = result;", "originalCommit": "95e6658c5bec95fa39c5a6819fc1c58ab4d057fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2MDkzMQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499160931", "bodyText": "Yes, because you want to avoid initializing something expensive if it hasn't been used elsewhere. I have a branch where I've added an isActive property to LazilyInstantiate to allow simplifying IndexerParallelizer. I can extract that part from the branch and raise a narrow PR.", "author": "idodeclare", "createdAt": "2020-10-03T16:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2NzE2OQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499167169", "bodyText": "I think it looks cleaner with the PR you just raised. Good job. (#3256)", "author": "tulinkry", "createdAt": "2020-10-03T17:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzNzM1NQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499437355", "bodyText": "Indeed, rebased.", "author": "vladak", "createdAt": "2020-10-05T08:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "0cabe5040044815e011a0e34262749435ea00d85", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java\nindex cbbb5df050..a9bfcb7acb 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexerParallelizer.java\n\n@@ -101,54 +95,42 @@ public class IndexerParallelizer implements AutoCloseable {\n      * @return the fixedExecutor\n      */\n     public ExecutorService getFixedExecutor() {\n-        ExecutorService result = lzFixedExecutor.get();\n-        fixedExecutor = result;\n-        return result;\n+        return lzFixedExecutor.get();\n     }\n \n     /**\n      * @return the forkJoinPool\n      */\n     public ForkJoinPool getForkJoinPool() {\n-        ForkJoinPool result = lzForkJoinPool.get();\n-        forkJoinPool = result;\n-        return result;\n+        return lzForkJoinPool.get();\n     }\n \n     /**\n      * @return the ctagsPool\n      */\n     public ObjectPool<Ctags> getCtagsPool() {\n-        ObjectPool<Ctags> result = lzCtagsPool.get();\n-        ctagsPool = result;\n-        return result;\n+        return lzCtagsPool.get();\n     }\n \n     /**\n      * @return the ExecutorService used for history parallelism\n      */\n     public ExecutorService getHistoryExecutor() {\n-        ExecutorService result = lzHistoryExecutor.get();\n-        historyExecutor = result;\n-        return result;\n+        return lzHistoryExecutor.get();\n     }\n \n     /**\n      * @return the ExecutorService used for history-renamed parallelism\n      */\n     public ExecutorService getHistoryRenamedExecutor() {\n-        ExecutorService result = lzHistoryRenamedExecutor.get();\n-        historyRenamedExecutor = result;\n-        return result;\n+        return lzHistoryRenamedExecutor.get();\n     }\n \n     /**\n      * @return the Executor used for ctags parallelism\n      */\n     public ExecutorService getCtagsWatcherExecutor() {\n-        ExecutorService result = lzCtagsWatcherExecutor.get();\n-        ctagsWatcherExecutor = result;\n-        return result;\n+        return lzCtagsWatcherExecutor.get();\n     }\n \n     /**\n"}}, {"oid": "0cabe5040044815e011a0e34262749435ea00d85", "url": "https://github.com/oracle/opengrok/commit/0cabe5040044815e011a0e34262749435ea00d85", "message": "detect repositories for each source root subdirectory in parallel\n\nfixes #773", "committedDate": "2020-10-05T08:47:17Z", "type": "forcePushed"}, {"oid": "7489151118d8928f639ed98e794548a2ec5006c4", "url": "https://github.com/oracle/opengrok/commit/7489151118d8928f639ed98e794548a2ec5006c4", "message": "avoid raw types\n\ncauses warning: missing type arguments for generic class java.lang.Class<T>", "committedDate": "2020-10-05T10:24:22Z", "type": "commit"}, {"oid": "67aeb8275d894051538e87c22cc8fe386244b664", "url": "https://github.com/oracle/opengrok/commit/67aeb8275d894051538e87c22cc8fe386244b664", "message": "detect repositories for each source root subdirectory in parallel\n\nfixes #773", "committedDate": "2020-10-05T10:24:22Z", "type": "forcePushed"}, {"oid": "f8935467a8451c34165f556c8046d4030be87698", "url": "https://github.com/oracle/opengrok/commit/f8935467a8451c34165f556c8046d4030be87698", "message": "detect repositories for each source root subdirectory in parallel\n\nfixes #773", "committedDate": "2020-10-05T21:38:32Z", "type": "forcePushed"}, {"oid": "ed9a1d80f5a5d49f54a12c6822847994173c2c84", "url": "https://github.com/oracle/opengrok/commit/ed9a1d80f5a5d49f54a12c6822847994173c2c84", "message": "detect repositories for each source root subdirectory in parallel\n\nfixes #773", "committedDate": "2020-10-05T21:41:02Z", "type": "commit"}, {"oid": "ed9a1d80f5a5d49f54a12c6822847994173c2c84", "url": "https://github.com/oracle/opengrok/commit/ed9a1d80f5a5d49f54a12c6822847994173c2c84", "message": "detect repositories for each source root subdirectory in parallel\n\nfixes #773", "committedDate": "2020-10-05T21:41:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NTg5Mg==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r499945892", "bodyText": "I was suggesting just to use getFixedExecutor() since it's fully available at this point during a run. It would be fine to leave it to be used later during indexing. IndexerParallelizer could be kept simple, and no additional configuration would be needed.", "author": "idodeclare", "createdAt": "2020-10-06T00:42:10Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java", "diffHunk": "@@ -480,7 +478,25 @@ public boolean hasAnnotation(File file) {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        return addRepositories(files, env.getNestingMaximum(), 0, false);\n+        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();", "originalCommit": "ed9a1d80f5a5d49f54a12c6822847994173c2c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3MzU4NQ==", "url": "https://github.com/oracle/opengrok/pull/3254#discussion_r500073585", "bodyText": "I see, makes sense.", "author": "vladak", "createdAt": "2020-10-06T07:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0NTg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "42d46d309cb92a0b405c96ba5f27d39893fa8a1f", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\nindex 941d596068..0d53442764 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/history/HistoryGuru.java\n\n@@ -478,7 +478,7 @@ public final class HistoryGuru {\n      * @return collection of added repositories\n      */\n     public Collection<RepositoryInfo> addRepositories(File[] files) {\n-        ExecutorService executor = env.getIndexerParallelizer().getRepositorySearchExecutor();\n+        ExecutorService executor = env.getIndexerParallelizer().getFixedExecutor();\n         List<Future<Collection<RepositoryInfo>>> futures = new ArrayList<>();\n         for (File file: files) {\n             futures.add(executor.submit(() -> addRepositories(new File[]{file},\n"}}, {"oid": "42d46d309cb92a0b405c96ba5f27d39893fa8a1f", "url": "https://github.com/oracle/opengrok/commit/42d46d309cb92a0b405c96ba5f27d39893fa8a1f", "message": "simplify", "committedDate": "2020-10-06T07:50:36Z", "type": "commit"}]}