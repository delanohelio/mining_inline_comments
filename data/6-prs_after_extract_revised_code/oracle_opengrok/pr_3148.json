{"pr_number": 3148, "pr_title": "Fix another batch of Sonar-identified issues", "pr_createdAt": "2020-05-09T21:38:17Z", "pr_url": "https://github.com/oracle/opengrok/pull/3148", "timeline": [{"oid": "20463cfe62e8d338ddce6727625e7f840d98355f", "url": "https://github.com/oracle/opengrok/commit/20463cfe62e8d338ddce6727625e7f840d98355f", "message": "Fix another batch of Sonar-identified issues\n\n- Sanitize several user-supplied strings.\n- Fix some scope issues.\n- Prohibit XML external access.", "committedDate": "2020-05-09T21:34:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4MzgwMA==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422883800", "bodyText": "why is this deleted ?", "author": "vladak", "createdAt": "2020-05-11T08:49:54Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java", "diffHunk": "@@ -561,7 +554,6 @@ private void findFilelessChildren(SkeletonDirs skels, File directory) {\n \n     /**\n      * Counts segments arising from {@code File.separatorChar} or '\\\\'.\n-     * @param path", "originalCommit": "20463cfe62e8d338ddce6727625e7f840d98355f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTEzMg==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r423405132", "bodyText": "Restored with a comment", "author": "idodeclare", "createdAt": "2020-05-12T01:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4MzgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d26fc5a1ed8b18146f36800a57ca77c976332872", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java\nindex 8e8f0ef209..c845149e66 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/PendingFileCompleter.java\n\n@@ -554,6 +554,7 @@ class PendingFileCompleter {\n \n     /**\n      * Counts segments arising from {@code File.separatorChar} or '\\\\'.\n+     * @param path a defined instance\n      * @return a natural number\n      */\n     private static int countPathSegments(String path) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NTk2OQ==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422885969", "bodyText": "reuse the String literal ?", "author": "vladak", "createdAt": "2020-05-11T08:53:10Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.web;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a container for sanitizing methods for avoiding classifications as\n+ * taint bugs.\n+ */\n+public class LaunderUtil {\n+\n+    /**\n+     * Sanitize {@code value} where it will be used in subsequent OpenGrok\n+     * (non-logging) processing.\n+     * @return {@code null} if null or else {@code value} with \"pattern-breaking\n+     * characters\" (tabs, CR, LF, FF) replaced as underscores (one for one)\n+     */\n+    public static String userInput(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return value.replaceAll(\"[\\\\n\\\\r\\\\t\\\\f]\", \"_\");", "originalCommit": "20463cfe62e8d338ddce6727625e7f840d98355f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MjQxNg==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422892416", "bodyText": "also, userInput() and luceneQuery() can be refactored into using common underlying method ?", "author": "vladak", "createdAt": "2020-05-11T09:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTE2NQ==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r423405165", "bodyText": "Yes done", "author": "idodeclare", "createdAt": "2020-05-12T01:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NTk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d26fc5a1ed8b18146f36800a57ca77c976332872", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nsimilarity index 64%\nrename from opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\nrename to opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nindex 874894de60..c12c1b8120 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\n\n@@ -25,12 +25,16 @@ package org.opengrok.indexer.web;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n  * Represents a container for sanitizing methods for avoiding classifications as\n  * taint bugs.\n  */\n-public class LaunderUtil {\n+public class Laundromat {\n+\n+    private static final String ESC_N_R_T_F = \"[\\\\n\\\\r\\\\t\\\\f]\";\n+    private static final String ESG_N_R_T_F__1_n = ESC_N_R_T_F + \"+\";\n \n     /**\n      * Sanitize {@code value} where it will be used in subsequent OpenGrok\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4Njk4MQ==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422886981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String k = logging(entry.getKey());\n          \n          \n            \n                        String key = logging(entry.getKey());", "author": "vladak", "createdAt": "2020-05-11T08:54:49Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.web;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a container for sanitizing methods for avoiding classifications as\n+ * taint bugs.\n+ */\n+public class LaunderUtil {\n+\n+    /**\n+     * Sanitize {@code value} where it will be used in subsequent OpenGrok\n+     * (non-logging) processing.\n+     * @return {@code null} if null or else {@code value} with \"pattern-breaking\n+     * characters\" (tabs, CR, LF, FF) replaced as underscores (one for one)\n+     */\n+    public static String userInput(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return value.replaceAll(\"[\\\\n\\\\r\\\\t\\\\f]\", \"_\");\n+    }\n+\n+    /**\n+     * Sanitize {@code query} where it will be used in a Lucene query.\n+     * @return {@code null} if null or else {@code query} with \"pattern-breaking\n+     * characters\" (tabs, CR, LF, FF) replaced as spaces. Contiguous matches are\n+     * replaced with one space.\n+     */\n+    public static String luceneQuery(String query) {\n+        if (query == null) {\n+            return null;\n+        }\n+        return query.replaceAll(\"[\\\\n\\\\r\\\\t\\\\f]+\", \" \");\n+    }\n+\n+    /**\n+     * Sanitize {@code value} where it will be used in a log message only.\n+     * @return {@code null} if null or else {@code value} with \"pattern-breaking\n+     * characters\" tabs, CR, LF, and FF replaced as {@code \"<TAB>\"},\n+     * {@code \"<CR>\"}, {@code \"<LF>\"}, and {@code \"<FF>\"} resp.\n+     */\n+    public static String logging(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return value.replaceAll(\"\\\\n\", \"<LF>\").\n+                replaceAll(\"\\\\r\", \"<CR>\").\n+                replaceAll(\"\\\\t\", \"<TAB>\").\n+                replaceAll(\"\\\\f\", \"<FF>\");\n+    }\n+\n+    /**\n+     * Sanitize {@code map} where it will be used in a log message only.\n+     * @return {@code null} if null or else {@code map} with keys and values\n+     * sanitized with {@link #logging(String)}. If the sanitizing causes key\n+     * collisions, the colliding keys' values are combined.\n+     */\n+    public static Map<String, String[]> logging(Map<String, String[]> map) {\n+        if (map == null) {\n+            return null;\n+        }\n+\n+        HashMap<String, String[]> safes = new HashMap<>();\n+        for (Map.Entry<String, String[]> entry : map.entrySet()) {\n+            String k = logging(entry.getKey());", "originalCommit": "20463cfe62e8d338ddce6727625e7f840d98355f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTE4Nw==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r423405187", "bodyText": "OK done", "author": "idodeclare", "createdAt": "2020-05-12T01:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4Njk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d26fc5a1ed8b18146f36800a57ca77c976332872", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nsimilarity index 64%\nrename from opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\nrename to opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nindex 874894de60..c12c1b8120 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\n\n@@ -25,12 +25,16 @@ package org.opengrok.indexer.web;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n  * Represents a container for sanitizing methods for avoiding classifications as\n  * taint bugs.\n  */\n-public class LaunderUtil {\n+public class Laundromat {\n+\n+    private static final String ESC_N_R_T_F = \"[\\\\n\\\\r\\\\t\\\\f]\";\n+    private static final String ESG_N_R_T_F__1_n = ESC_N_R_T_F + \"+\";\n \n     /**\n      * Sanitize {@code value} where it will be used in subsequent OpenGrok\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MTc0NQ==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422891745", "bodyText": "perhaps this class should be called Laundromat and have the launder as a method ? :-)", "author": "vladak", "createdAt": "2020-05-11T09:02:19Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.web;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a container for sanitizing methods for avoiding classifications as\n+ * taint bugs.\n+ */\n+public class LaunderUtil {", "originalCommit": "20463cfe62e8d338ddce6727625e7f840d98355f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwODQzNw==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r422908437", "bodyText": "also, add a simple test ?", "author": "vladak", "createdAt": "2020-05-11T09:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTI2Mg==", "url": "https://github.com/oracle/opengrok/pull/3148#discussion_r423405262", "bodyText": "You got it", "author": "idodeclare", "createdAt": "2020-05-12T01:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d26fc5a1ed8b18146f36800a57ca77c976332872", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nsimilarity index 64%\nrename from opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\nrename to opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\nindex 874894de60..c12c1b8120 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/web/LaunderUtil.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/web/Laundromat.java\n\n@@ -25,12 +25,16 @@ package org.opengrok.indexer.web;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n  * Represents a container for sanitizing methods for avoiding classifications as\n  * taint bugs.\n  */\n-public class LaunderUtil {\n+public class Laundromat {\n+\n+    private static final String ESC_N_R_T_F = \"[\\\\n\\\\r\\\\t\\\\f]\";\n+    private static final String ESG_N_R_T_F__1_n = ESC_N_R_T_F + \"+\";\n \n     /**\n      * Sanitize {@code value} where it will be used in subsequent OpenGrok\n"}}, {"oid": "d26fc5a1ed8b18146f36800a57ca77c976332872", "url": "https://github.com/oracle/opengrok/commit/d26fc5a1ed8b18146f36800a57ca77c976332872", "message": "Address review feedback", "committedDate": "2020-05-12T01:06:05Z", "type": "commit"}]}