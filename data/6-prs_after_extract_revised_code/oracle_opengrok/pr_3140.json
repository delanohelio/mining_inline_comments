{"pr_number": 3140, "pr_title": "Regular readable time", "pr_createdAt": "2020-05-06T03:47:08Z", "pr_url": "https://github.com/oracle/opengrok/pull/3140", "timeline": [{"oid": "b0e02dcfebee1fdd12a7a1468cca29578b0991b6", "url": "https://github.com/oracle/opengrok/commit/b0e02dcfebee1fdd12a7a1468cca29578b0991b6", "message": "Use StringUtils.getReadableTime()\n\nAlso, truncate if only seconds or ms close to\nwhole days. Clarify zero value.\n\n... Use StringUtils.getReadableTime", "committedDate": "2020-05-06T04:53:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjM1MA==", "url": "https://github.com/oracle/opengrok/pull/3140#discussion_r420616350", "bodyText": "consider moving this comment to the javadoc as it's valuable for the caller", "author": "tulinkry", "createdAt": "2020-05-06T08:13:53Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/StringUtils.java", "diffHunk": "@@ -116,53 +116,61 @@ public static boolean isOnlyWhitespace(String str) {\n      * @return true if string could be a java class name\n     */\n     public static boolean isPossiblyJavaClass(String s) {\n-    // Only match a small subset of possible class names to prevent false\n-    // positives:\n-    //    - class must be qualified with a package name\n-    //    - only letters in package name, starting with lower case\n-    //    - class name must be in CamelCase, starting with upper case\n-    return javaClassPattern.matcher(s).matches();\n-  }\n+        // Only match a small subset of possible class names to prevent false\n+        // positives:\n+        //    - class must be qualified with a package name\n+        //    - only letters in package name, starting with lower case\n+        //    - class name must be in CamelCase, starting with upper case", "originalCommit": "b0e02dcfebee1fdd12a7a1468cca29578b0991b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MTkwMQ==", "url": "https://github.com/oracle/opengrok/pull/3140#discussion_r420951901", "bodyText": "OK done", "author": "idodeclare", "createdAt": "2020-05-06T17:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3b581a431a274397ad27bbb616fc54a78d6769e3", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/StringUtils.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/StringUtils.java\nindex 06869fbbaa..23dd56e4c7 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/StringUtils.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/StringUtils.java\n\n@@ -124,53 +124,45 @@ public final class StringUtils {\n         return javaClassPattern.matcher(s).matches();\n     }\n \n-    /**\n-     * Convert value in milliseconds to readable time.\n-     * @param time_ms delta in milliseconds\n-     * @return human readable string\n-     */\n-    public static String getReadableTime(long time_ms) {\n-        StringBuilder output = new StringBuilder();\n-        long time_delta = time_ms;\n+  /**\n+   * Convert value in milliseconds to readable time.\n+   * @param time_ms delta in milliseconds\n+   * @return human readable string   \n+   */\n+  public static String getReadableTime(long time_ms) {\n+      String output = \"\";\n+      long time_delta = time_ms;\n \n-        int milliseconds = (int) (time_delta % 1000);\n-        time_delta /= 1000;\n-        int seconds = (int) (time_delta % 60);\n-        time_delta /= 60;\n-        int minutes = (int) (time_delta % 60);\n-        time_delta /= 60;\n-        int hours = (int) (time_delta % 24);\n-        int days = (int) (time_delta / 24);\n+      int milliseconds = (int) (time_delta % 1000);\n+      time_delta /= 1000;\n+      int seconds = (int) (time_delta % 60);\n+      time_delta /= 60;\n+      int minutes = (int) (time_delta % 60);\n+      time_delta /= 60;\n+      int hours = (int) (time_delta % 24);\n+      int days = (int) (time_delta / 24);\n \n-        if (days != 0) {\n-            output.append(days);\n-            output.append(\" day\");\n-            if (days > 1) {\n-                output.append(\"s\");\n-            }\n-        }\n-        if ((hours != 0) || (minutes != 0)) {\n-            if (output.length() > 0) {\n-                // Use zero-padded hours here as it's longer than a day.\n-                output.append(String.format(\" %02d:%02d:%02d\", hours, minutes, seconds));\n-            } else {\n-                // Don't pad hours if less than a day.\n-                output.append(String.format(\"%d:%02d:%02d\", hours, minutes, seconds));\n-            }\n-        } else if (output.length() > 0) {\n-            /*\n-             * If a day+ with zero hours and zero minutes, just report the days.\n-             * E.g. \"1 day\", and not \"1 day 35 ms\".\n-             */\n-            return output.toString();\n-        } else if (seconds != 0) {\n-            output.append(String.format(\"%d.%d seconds\", seconds, milliseconds));\n-        } else if (milliseconds != 0) {\n-            output.append(String.format(\"%d ms\", milliseconds));\n-        }\n+      if (days != 0) {\n+          output += String.format(\"%d day\", days);\n+          if (days > 1) {\n+              output += \"s\";\n+          }\n+          if ((hours != 0) || (minutes != 0) || (seconds != 0)) {\n+              output += \" \";\n+          }\n+      }\n+      if ((hours != 0) || (minutes != 0)) {\n+          return output + String.format(\"%d:%02d:%02d\", hours, minutes, seconds);\n+      }\n+      if (seconds != 0) {\n+          return output + String.format(\"%d.%d seconds\", seconds, milliseconds);\n+      }\n+      if (milliseconds != 0) {\n+          return output + String.format(\"%d ms\", milliseconds);\n+      }\n \n-        return (output.length() == 0 ? \"0 ms\" : output.toString());\n-    }\n+      return (output.length() == 0 ? \"0\" : output);\n+  }\n \n     /**\n      * Finds n-th index of a given substring in a string.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxODg5MA==", "url": "https://github.com/oracle/opengrok/pull/3140#discussion_r420618890", "bodyText": "could you add a 86400001 (one day + one ms) too?", "author": "tulinkry", "createdAt": "2020-05-06T08:18:43Z", "path": "opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java", "diffHunk": "@@ -39,12 +39,12 @@ public void testValues() {\n         int i;\n         long[] values = {\n             0, 100, 1000, 1500, 64000, 124531, 3651782, 86400000, 86434349,\n-            1075634299\n+            1075634299, 86480001\n         };\n         String[] expected = {\n-            \"0\", \"100 ms\", \"1.0 seconds\", \"1.500 seconds\", \"0:01:04\",\n-            \"0:02:04\", \"1:00:51\", \"1 day\", \"1 day 34.349 seconds\",\n-            \"12 days 10:47:14\"\n+            \"0 ms\", \"100 ms\", \"1.0 seconds\", \"1.500 seconds\", \"0:01:04\",\n+            \"0:02:04\", \"1:00:51\", \"1 day\", \"1 day\",\n+            \"12 days 10:47:14\", \"1 day 00:01:20\"", "originalCommit": "b0e02dcfebee1fdd12a7a1468cca29578b0991b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MTk3Mw==", "url": "https://github.com/oracle/opengrok/pull/3140#discussion_r420951973", "bodyText": "OK", "author": "idodeclare", "createdAt": "2020-05-06T17:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxODg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "3b581a431a274397ad27bbb616fc54a78d6769e3", "chunk": "diff --git a/opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java b/opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java\nindex d13b5758f0..8a23d97e05 100644\n--- a/opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java\n+++ b/opengrok-indexer/src/test/java/org/opengrok/indexer/util/StringUtilsTest.java\n\n@@ -39,12 +39,12 @@ public class StringUtilsTest {\n         int i;\n         long[] values = {\n             0, 100, 1000, 1500, 64000, 124531, 3651782, 86400000, 86434349,\n-            1075634299, 86480001\n+            1075634299\n         };\n         String[] expected = {\n-            \"0 ms\", \"100 ms\", \"1.0 seconds\", \"1.500 seconds\", \"0:01:04\",\n-            \"0:02:04\", \"1:00:51\", \"1 day\", \"1 day\",\n-            \"12 days 10:47:14\", \"1 day 00:01:20\"\n+            \"0\", \"100 ms\", \"1.0 seconds\", \"1.500 seconds\", \"0:01:04\",\n+            \"0:02:04\", \"1:00:51\", \"1 day\", \"1 day 34.349 seconds\",\n+            \"12 days 10:47:14\"\n         };\n \n         for (i = 0; i < values.length; i++) {\n"}}, {"oid": "3b581a431a274397ad27bbb616fc54a78d6769e3", "url": "https://github.com/oracle/opengrok/commit/3b581a431a274397ad27bbb616fc54a78d6769e3", "message": "Fix indentation", "committedDate": "2020-05-06T17:00:31Z", "type": "commit"}, {"oid": "aa020cbb4151c52d4d61bfd182890a63d5da6ca7", "url": "https://github.com/oracle/opengrok/commit/aa020cbb4151c52d4d61bfd182890a63d5da6ca7", "message": "Use StringUtils.getReadableTime()\n\nAlso, truncate if only seconds or ms close to\nwhole days. Clarify zero value.\n\n... Use StringUtils.getReadableTime", "committedDate": "2020-05-06T17:00:31Z", "type": "commit"}, {"oid": "e66a41ee56c3091c9d26de9e95a1881aa482097c", "url": "https://github.com/oracle/opengrok/commit/e66a41ee56c3091c9d26de9e95a1881aa482097c", "message": "Address review feedback", "committedDate": "2020-05-06T17:06:46Z", "type": "commit"}, {"oid": "e66a41ee56c3091c9d26de9e95a1881aa482097c", "url": "https://github.com/oracle/opengrok/commit/e66a41ee56c3091c9d26de9e95a1881aa482097c", "message": "Address review feedback", "committedDate": "2020-05-06T17:06:46Z", "type": "forcePushed"}]}