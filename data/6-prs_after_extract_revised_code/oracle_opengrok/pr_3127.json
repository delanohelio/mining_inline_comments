{"pr_number": 3127, "pr_title": "Minimize reflection into Configuration", "pr_createdAt": "2020-04-23T01:34:52Z", "pr_url": "https://github.com/oracle/opengrok/pull/3127", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Mzg4Mw==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413543883", "bodyText": "I'd swap the parameter order cause at it seems more natural to me like this\nsyncWriteConfiguration(groups, (c, g) -> {\n      populateGroups(g, new TreeSet<>(getProjects().values()));\n      c.setGroups(g);\n});\n\nas its \"value -> consume\" that value, rather then \"consumer of a value -> value\"", "author": "ktulinger", "createdAt": "2020-04-23T06:30:12Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -1996,14 +1843,45 @@ public File getDtagsEftar() {\n     }\n \n     public SuggesterConfig getSuggesterConfig() {\n-        return (SuggesterConfig) getConfigurationValue(\"suggesterConfig\");\n+        return syncReadConfiguration(Configuration::getSuggesterConfig);\n     }\n \n     public void setSuggesterConfig(SuggesterConfig config) {\n-        setConfigurationValue(\"suggesterConfig\", config);\n+        syncWriteConfiguration(Configuration::setSuggesterConfig, config);\n+    }\n+\n+    /**\n+     * Applies the specified function to the runtime configuration, after having\n+     * obtained the configuration read-lock (and releasing afterward).\n+     * @param function a defined function\n+     * @param <R> the type of the result of the function\n+     * @return the function result\n+     */\n+    public <R> R syncReadConfiguration(Function<Configuration, R> function) {\n+        try (ResourceLock resourceLock = configLock.readLockAsResource()) {\n+            //noinspection ConstantConditions to silence unreference auto-closeable\n+            assert resourceLock != null;\n+            return function.apply(configuration);\n+        }\n+    }\n+\n+    /**\n+     * Performs the specified operation which is provided the runtime\n+     * configuration and the specified argument, after first having obtained the\n+     * configuration write-lock (and releasing afterward).\n+     * @param consumer a defined consumer\n+     * @param v the input argument\n+     * @param <V> the type of the input to the operation\n+     */\n+    public <V> void syncWriteConfiguration(ConfigurationValueConsumer<V> consumer, V v) {", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5OTQzMw==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413999433", "bodyText": "That would mean a line like the following:\nsyncWriteConfiguration(flag, Configuration::setListDirsFirst);\nwhich seems to invert the important part.", "author": "idodeclare", "createdAt": "2020-04-23T17:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNTYzMg==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414005632", "bodyText": "I'll rename the vague arguments and transpose it as you suggest", "author": "idodeclare", "createdAt": "2020-04-23T17:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Mzg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyMTMxNA==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r419621314", "bodyText": "thank you", "author": "tulinkry", "createdAt": "2020-05-04T17:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0Mzg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\nindex 6d1a37694a..60d327b901 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n\n@@ -1846,8 +1850,8 @@ public final class RuntimeEnvironment {\n         return syncReadConfiguration(Configuration::getSuggesterConfig);\n     }\n \n-    public void setSuggesterConfig(SuggesterConfig config) {\n-        syncWriteConfiguration(Configuration::setSuggesterConfig, config);\n+    public void setSuggesterConfig(SuggesterConfig suggesterConfig) {\n+        syncWriteConfiguration(suggesterConfig, Configuration::setSuggesterConfig);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTU0OA==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413545548", "bodyText": "why this.writeLock().unlock() is not enough?", "author": "ktulinger", "createdAt": "2020-04-23T06:33:52Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This work is licensed under the Creative Commons Attribution-ShareAlike 4.0\n+ * International License. To view a copy of this license, visit\n+ * https://creativecommons.org/licenses/by-sa/4.0/ or send a letter to\n+ * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n+ *\n+ * Copyright (c) 2017, https://stackoverflow.com/users/7583219/skoskav\n+ * Copyright (c) 2011, https://stackoverflow.com/questions/6965731/are-locks-autocloseable\n+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.\n+ *\n+ * Used under CC 4 with modifications noted as follows as required by license:\n+ * 2019-09-10 -- cfraire@me.com, derived to use for ReentrantReadWriteLock.\n+ * 2020-04-21 -- cfraire@me.com, updated for proper handling re Serializable.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Represents a subclass of {@link ReentrantReadWriteLock} that can return\n+ * {@link ResourceLock} instances.\n+ */\n+public final class CloseableReentrantReadWriteLock extends ReentrantReadWriteLock {\n+\n+    private static final long serialVersionUID = 95L;\n+\n+    private transient ResourceLock readUnlocker = newReadUnlocker();\n+\n+    private transient ResourceLock writeUnlocker = newWriteUnlocker();\n+\n+    /**\n+     * @return a defined {@link ResourceLock} once the {@link #readLock()} has\n+     * been acquired\n+     */\n+    public ResourceLock readLockAsResource() {\n+        /*\n+         * A subclass of ReentrantReadWriteLock is forced to be serializable, so\n+         * we would have to handle where serialization can short-circuit field\n+         * initialization above and leave the instance's fields null.\n+         * Consequently, the fields cannot be final. They are encapsulating\n+         * fixed logic, so we can optimize and choose not to even bother\n+         * serializing by declaring transient and handling below.\n+         */\n+        ResourceLock unlocker = readUnlocker;\n+        if (unlocker == null) {\n+            unlocker = newReadUnlocker();\n+            // No synchronization necessary since overwrite is of no matter.\n+            readUnlocker = unlocker;\n+        }\n+        readLock().lock();\n+        return unlocker;\n+    }\n+\n+    /**\n+     * @return a defined {@link ResourceLock} once the {@link #writeLock()} ()}\n+     * has been acquired\n+     */\n+    public ResourceLock writeLockAsResource() {\n+        /*\n+         * A subclass of ReentrantReadWriteLock is forced to be serializable, so\n+         * we would have to handle where serialization can short-circuit field\n+         * initialization above and leave the instance's fields null.\n+         * Consequently, the fields cannot be final. They are encapsulating\n+         * fixed logic, so we can optimize and choose not to even bother\n+         * serializing by declaring transient and handling below.\n+         */\n+        ResourceLock unlocker = writeUnlocker;\n+        if (unlocker == null) {\n+            unlocker = newWriteUnlocker();\n+            // No synchronization necessary since overwrite is of no matter.\n+            writeUnlocker = unlocker;\n+        }\n+        writeLock().lock();\n+        return unlocker;\n+    }\n+\n+    private ResourceLock newReadUnlocker() {\n+        return () -> CloseableReentrantReadWriteLock.this.readLock().unlock();\n+    }\n+\n+    private ResourceLock newWriteUnlocker() {\n+        return () -> CloseableReentrantReadWriteLock.this.writeLock().unlock();", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NzM0NQ==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413997345", "bodyText": "Oh that was from the imported implementation. Yes it seems superfluous", "author": "idodeclare", "createdAt": "2020-04-23T17:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\nindex adf5283e93..c1dc9b56bd 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\n\n@@ -53,7 +53,7 @@ public final class CloseableReentrantReadWriteLock extends ReentrantReadWriteLoc\n     }\n \n     /**\n-     * @return a defined {@link ResourceLock} once the {@link #writeLock()} ()}\n+     * @return a defined {@link ResourceLock} once the {@link #writeLock()}\n      * has been acquired\n      */\n     public ResourceLock writeLockAsResource() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Mjg4Nw==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413552887", "bodyText": "why do you assert this when you're explicitely checking this in write|readLockAsResource?", "author": "ktulinger", "createdAt": "2020-04-23T06:48:19Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java", "diffHunk": "@@ -1996,14 +1843,45 @@ public File getDtagsEftar() {\n     }\n \n     public SuggesterConfig getSuggesterConfig() {\n-        return (SuggesterConfig) getConfigurationValue(\"suggesterConfig\");\n+        return syncReadConfiguration(Configuration::getSuggesterConfig);\n     }\n \n     public void setSuggesterConfig(SuggesterConfig config) {\n-        setConfigurationValue(\"suggesterConfig\", config);\n+        syncWriteConfiguration(Configuration::setSuggesterConfig, config);\n+    }\n+\n+    /**\n+     * Applies the specified function to the runtime configuration, after having\n+     * obtained the configuration read-lock (and releasing afterward).\n+     * @param function a defined function\n+     * @param <R> the type of the result of the function\n+     * @return the function result\n+     */\n+    public <R> R syncReadConfiguration(Function<Configuration, R> function) {\n+        try (ResourceLock resourceLock = configLock.readLockAsResource()) {\n+            //noinspection ConstantConditions to silence unreference auto-closeable\n+            assert resourceLock != null;\n+            return function.apply(configuration);\n+        }\n+    }\n+\n+    /**\n+     * Performs the specified operation which is provided the runtime\n+     * configuration and the specified argument, after first having obtained the\n+     * configuration write-lock (and releasing afterward).\n+     * @param consumer a defined consumer\n+     * @param v the input argument\n+     * @param <V> the type of the input to the operation\n+     */\n+    public <V> void syncWriteConfiguration(ConfigurationValueConsumer<V> consumer, V v) {\n+        try (ResourceLock resourceLock = configLock.writeLockAsResource()) {\n+            //noinspection ConstantConditions to silence unreference auto-closeable\n+            assert resourceLock != null;", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5Njc1Mg==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413996752", "bodyText": "That's to silent an annoying Java warning of the auto-closeable not being referenced in the block which was a blocker in IDEA when it runs tests with warnings-as-errors", "author": "idodeclare", "createdAt": "2020-04-23T17:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Mjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDMwNQ==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414020305", "bodyText": "what about @SuppressWarnings(\"unused\") ?", "author": "ktulinger", "createdAt": "2020-04-23T18:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Mjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyOTM4OQ==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414029389", "bodyText": "No it\u2019s a very focused warning for auto-closeable", "author": "idodeclare", "createdAt": "2020-04-23T18:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Mjg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\nindex 6d1a37694a..60d327b901 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/configuration/RuntimeEnvironment.java\n\n@@ -1846,8 +1850,8 @@ public final class RuntimeEnvironment {\n         return syncReadConfiguration(Configuration::getSuggesterConfig);\n     }\n \n-    public void setSuggesterConfig(SuggesterConfig config) {\n-        syncWriteConfiguration(Configuration::setSuggesterConfig, config);\n+    public void setSuggesterConfig(SuggesterConfig suggesterConfig) {\n+        syncWriteConfiguration(suggesterConfig, Configuration::setSuggesterConfig);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MzYyMA==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413553620", "bodyText": "there are some extra brackets", "author": "ktulinger", "createdAt": "2020-04-23T06:49:03Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This work is licensed under the Creative Commons Attribution-ShareAlike 4.0\n+ * International License. To view a copy of this license, visit\n+ * https://creativecommons.org/licenses/by-sa/4.0/ or send a letter to\n+ * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n+ *\n+ * Copyright (c) 2017, https://stackoverflow.com/users/7583219/skoskav\n+ * Copyright (c) 2011, https://stackoverflow.com/questions/6965731/are-locks-autocloseable\n+ * Portions Copyright (c) 2019-2020, Chris Fraire <cfraire@me.com>.\n+ *\n+ * Used under CC 4 with modifications noted as follows as required by license:\n+ * 2019-09-10 -- cfraire@me.com, derived to use for ReentrantReadWriteLock.\n+ * 2020-04-21 -- cfraire@me.com, updated for proper handling re Serializable.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Represents a subclass of {@link ReentrantReadWriteLock} that can return\n+ * {@link ResourceLock} instances.\n+ */\n+public final class CloseableReentrantReadWriteLock extends ReentrantReadWriteLock {\n+\n+    private static final long serialVersionUID = 95L;\n+\n+    private transient ResourceLock readUnlocker = newReadUnlocker();\n+\n+    private transient ResourceLock writeUnlocker = newWriteUnlocker();\n+\n+    /**\n+     * @return a defined {@link ResourceLock} once the {@link #readLock()} has\n+     * been acquired\n+     */\n+    public ResourceLock readLockAsResource() {\n+        /*\n+         * A subclass of ReentrantReadWriteLock is forced to be serializable, so\n+         * we would have to handle where serialization can short-circuit field\n+         * initialization above and leave the instance's fields null.\n+         * Consequently, the fields cannot be final. They are encapsulating\n+         * fixed logic, so we can optimize and choose not to even bother\n+         * serializing by declaring transient and handling below.\n+         */\n+        ResourceLock unlocker = readUnlocker;\n+        if (unlocker == null) {\n+            unlocker = newReadUnlocker();\n+            // No synchronization necessary since overwrite is of no matter.\n+            readUnlocker = unlocker;\n+        }\n+        readLock().lock();\n+        return unlocker;\n+    }\n+\n+    /**\n+     * @return a defined {@link ResourceLock} once the {@link #writeLock()} ()}", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5OTY1Ng==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413999656", "bodyText": "Got it", "author": "idodeclare", "createdAt": "2020-04-23T17:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\nindex adf5283e93..c1dc9b56bd 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/CloseableReentrantReadWriteLock.java\n\n@@ -53,7 +53,7 @@ public final class CloseableReentrantReadWriteLock extends ReentrantReadWriteLoc\n     }\n \n     /**\n-     * @return a defined {@link ResourceLock} once the {@link #writeLock()} ()}\n+     * @return a defined {@link ResourceLock} once the {@link #writeLock()}\n      * has been acquired\n      */\n     public ResourceLock writeLockAsResource() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1NzY1NQ==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413557655", "bodyText": "the exception here is only translated to throw new WebApplicationException(e, Response.Status.BAD_REQUEST)\ncan you thro that one here and remove the try block in the caller?", "author": "ktulinger", "createdAt": "2020-04-23T06:54:09Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java", "diffHunk": "@@ -91,4 +94,37 @@ public void reloadAuthorization() {\n         env.getAuthorizationFramework().reload();\n     }\n \n+    private Object getConfigurationValueException(String fieldName) throws IOException {\n+        final IOException[] capture = new IOException[1];\n+        final int EXCEPTION_INDEX = 0;\n+        Object result = env.syncReadConfiguration(configuration -> {\n+            try {\n+                return ClassUtil.getFieldValue(configuration, fieldName);\n+            } catch (IOException ex) {\n+                capture[EXCEPTION_INDEX] = ex;\n+                return null;\n+            }\n+        });\n+        if (capture[EXCEPTION_INDEX] != null) {\n+            throw capture[EXCEPTION_INDEX];", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMDY3MQ==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414000671", "bodyText": "Yes", "author": "idodeclare", "createdAt": "2020-04-23T17:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1NzY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java b/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\nindex 04306d52cc..a301182330 100644\n--- a/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\n+++ b/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\n\n@@ -94,37 +85,37 @@ public class ConfigurationController {\n         env.getAuthorizationFramework().reload();\n     }\n \n-    private Object getConfigurationValueException(String fieldName) throws IOException {\n+    private Object getConfigurationValueException(String fieldName) throws WebApplicationException {\n         final IOException[] capture = new IOException[1];\n-        final int EXCEPTION_INDEX = 0;\n+        final int IOE_INDEX = 0;\n         Object result = env.syncReadConfiguration(configuration -> {\n             try {\n                 return ClassUtil.getFieldValue(configuration, fieldName);\n             } catch (IOException ex) {\n-                capture[EXCEPTION_INDEX] = ex;\n+                capture[IOE_INDEX] = ex;\n                 return null;\n             }\n         });\n-        if (capture[EXCEPTION_INDEX] != null) {\n-            throw capture[EXCEPTION_INDEX];\n+        if (capture[IOE_INDEX] != null) {\n+            throw new WebApplicationException(capture[IOE_INDEX], Response.Status.BAD_REQUEST);\n         }\n         return result;\n     }\n \n     private void setConfigurationValueException(String fieldName, String value)\n-            throws IOException {\n+            throws WebApplicationException {\n \n         final IOException[] capture = new IOException[1];\n-        final int EXCEPTION_INDEX = 0;\n-        env.syncWriteConfiguration((configuration, v) -> {\n+        final int IOE_INDEX = 0;\n+        env.syncWriteConfiguration(value, (configuration, v) -> {\n             try {\n                 ClassUtil.setFieldValue(configuration, fieldName, v);\n             } catch (IOException ex) {\n-                capture[EXCEPTION_INDEX] = ex;\n+                capture[IOE_INDEX] = ex;\n             }\n-        }, value);\n-        if (capture[EXCEPTION_INDEX] != null) {\n-            throw capture[EXCEPTION_INDEX];\n+        });\n+        if (capture[IOE_INDEX] != null) {\n+            throw new WebApplicationException(capture[IOE_INDEX], Response.Status.BAD_REQUEST);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1NzkzMA==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r413557930", "bodyText": "extra line?", "author": "ktulinger", "createdAt": "2020-04-23T06:54:42Z", "path": "opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java", "diffHunk": "@@ -91,4 +94,37 @@ public void reloadAuthorization() {\n         env.getAuthorizationFramework().reload();\n     }\n \n+    private Object getConfigurationValueException(String fieldName) throws IOException {\n+        final IOException[] capture = new IOException[1];\n+        final int EXCEPTION_INDEX = 0;\n+        Object result = env.syncReadConfiguration(configuration -> {\n+            try {\n+                return ClassUtil.getFieldValue(configuration, fieldName);\n+            } catch (IOException ex) {\n+                capture[EXCEPTION_INDEX] = ex;\n+                return null;\n+            }\n+        });\n+        if (capture[EXCEPTION_INDEX] != null) {\n+            throw capture[EXCEPTION_INDEX];\n+        }\n+        return result;\n+    }\n+", "originalCommit": "bd623fb108a34b2c49017c772ea9a93776367a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMDU2Mw==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414000563", "bodyText": "I don't understand", "author": "idodeclare", "createdAt": "2020-04-23T17:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwMTcyMA==", "url": "https://github.com/oracle/opengrok/pull/3127#discussion_r414001720", "bodyText": "I don't know :-D I somehow saw two lines. Nevermind.", "author": "ktulinger", "createdAt": "2020-04-23T17:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1NzkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "754ebdfb143928d28147e93dc63439b87a11f921", "chunk": "diff --git a/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java b/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\nindex 04306d52cc..a301182330 100644\n--- a/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\n+++ b/opengrok-web/src/main/java/org/opengrok/web/api/v1/controller/ConfigurationController.java\n\n@@ -94,37 +85,37 @@ public class ConfigurationController {\n         env.getAuthorizationFramework().reload();\n     }\n \n-    private Object getConfigurationValueException(String fieldName) throws IOException {\n+    private Object getConfigurationValueException(String fieldName) throws WebApplicationException {\n         final IOException[] capture = new IOException[1];\n-        final int EXCEPTION_INDEX = 0;\n+        final int IOE_INDEX = 0;\n         Object result = env.syncReadConfiguration(configuration -> {\n             try {\n                 return ClassUtil.getFieldValue(configuration, fieldName);\n             } catch (IOException ex) {\n-                capture[EXCEPTION_INDEX] = ex;\n+                capture[IOE_INDEX] = ex;\n                 return null;\n             }\n         });\n-        if (capture[EXCEPTION_INDEX] != null) {\n-            throw capture[EXCEPTION_INDEX];\n+        if (capture[IOE_INDEX] != null) {\n+            throw new WebApplicationException(capture[IOE_INDEX], Response.Status.BAD_REQUEST);\n         }\n         return result;\n     }\n \n     private void setConfigurationValueException(String fieldName, String value)\n-            throws IOException {\n+            throws WebApplicationException {\n \n         final IOException[] capture = new IOException[1];\n-        final int EXCEPTION_INDEX = 0;\n-        env.syncWriteConfiguration((configuration, v) -> {\n+        final int IOE_INDEX = 0;\n+        env.syncWriteConfiguration(value, (configuration, v) -> {\n             try {\n                 ClassUtil.setFieldValue(configuration, fieldName, v);\n             } catch (IOException ex) {\n-                capture[EXCEPTION_INDEX] = ex;\n+                capture[IOE_INDEX] = ex;\n             }\n-        }, value);\n-        if (capture[EXCEPTION_INDEX] != null) {\n-            throw capture[EXCEPTION_INDEX];\n+        });\n+        if (capture[IOE_INDEX] != null) {\n+            throw new WebApplicationException(capture[IOE_INDEX], Response.Status.BAD_REQUEST);\n         }\n     }\n }\n"}}, {"oid": "4151dbf5c28985f406f4f07f1c40626ac31346b4", "url": "https://github.com/oracle/opengrok/commit/4151dbf5c28985f406f4f07f1c40626ac31346b4", "message": "Minimize reflection into Configuration", "committedDate": "2020-05-05T17:27:39Z", "type": "commit"}, {"oid": "754ebdfb143928d28147e93dc63439b87a11f921", "url": "https://github.com/oracle/opengrok/commit/754ebdfb143928d28147e93dc63439b87a11f921", "message": "Address review feedback", "committedDate": "2020-05-05T17:27:39Z", "type": "commit"}, {"oid": "754ebdfb143928d28147e93dc63439b87a11f921", "url": "https://github.com/oracle/opengrok/commit/754ebdfb143928d28147e93dc63439b87a11f921", "message": "Address review feedback", "committedDate": "2020-05-05T17:27:39Z", "type": "forcePushed"}]}