{"pr_number": 3396, "pr_title": "Suggester rebuild terminate on undeploy", "pr_createdAt": "2020-12-05T10:24:00Z", "pr_url": "https://github.com/oracle/opengrok/pull/3396", "timeline": [{"oid": "3c9a6d39bd2a8a0ed9354494cd7166dfc4f99b87", "url": "https://github.com/oracle/opengrok/commit/3c9a6d39bd2a8a0ed9354494cd7166dfc4f99b87", "message": "do not start rebuild jobs once webapp is undeployed\n\nfixes #3395", "committedDate": "2020-12-05T10:20:49Z", "type": "commit"}, {"oid": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf", "url": "https://github.com/oracle/opengrok/commit/62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf", "message": "rename logger -> LOGGER", "committedDate": "2020-12-05T10:21:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA==", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537079504", "bodyText": "What would you think about also short-circuiting the init- and rebuild-runnables to check terminating?", "author": "idodeclare", "createdAt": "2020-12-06T16:55:48Z", "path": "suggester/src/main/java/org/opengrok/suggest/Suggester.java", "diffHunk": "@@ -278,8 +279,12 @@ public void rebuild(final Collection<NamedIndexDir> indexDirs) {\n         rebuildLock.unlock();\n \n         synchronized (lock) {\n+            if (terminating) {", "originalCommit": "62b8e45d3cd5ddf17881b0855c28f4c6fde8dfdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NzUxMw==", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537387513", "bodyText": "Inside the runnables the benefit is small I think however checking it in init() makes sense.", "author": "vladak", "createdAt": "2020-12-07T10:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0NzgzOQ==", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r537747839", "bodyText": "The runnables are the items potentially in queue. It makes sense for them to be terminating-aware so that when they're awakened they do no unnecessary work. If you have a for-loop that is just submitting to an asynchronous executor (as this code does), you have a minuscule amount of time where being terminating-aware has a chance of being effective.\nMoreover, shutdown() for a work-stealing pool only prevent new tasks from being submitted; it is an \"orderly shutdown \" that allows all submitted tasks to be executed. So again, the runnables should be terminating-aware for there to be any realistic chance of avoiding work.\nI recommend reverting to your commit 62b8e45 and just addressing the runnables.", "author": "idodeclare", "createdAt": "2020-12-07T18:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE1ODI2OA==", "url": "https://github.com/oracle/opengrok/pull/3396#discussion_r538158268", "bodyText": "You're right, addressing this in the runnables is better and actually more readable.", "author": "vladak", "createdAt": "2020-12-08T09:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3OTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "0b5f4264b81a1deac088ee265d4f63d5cd7a8c55", "chunk": "diff --git a/suggester/src/main/java/org/opengrok/suggest/Suggester.java b/suggester/src/main/java/org/opengrok/suggest/Suggester.java\nindex eacd4399f6..ddafb96fc8 100644\n--- a/suggester/src/main/java/org/opengrok/suggest/Suggester.java\n+++ b/suggester/src/main/java/org/opengrok/suggest/Suggester.java\n\n@@ -289,6 +307,12 @@ public final class Suggester implements Closeable {\n             ExecutorService executor = Executors.newWorkStealingPool(rebuildParallelismLevel);\n \n             for (NamedIndexDir indexDir : indexDirs) {\n+                if (terminating) {\n+                    LOGGER.log(Level.INFO, \"Terminating suggester rebuild\");\n+                    shutdownAndAwaitTermination(executor);\n+                    return;\n+                }\n+\n                 SuggesterProjectData data = this.projectData.get(indexDir.name);\n                 if (data != null) {\n                     executor.submit(getRebuildRunnable(data));\n"}}, {"oid": "538c9b1f4fce134098324e6cf0f774d46758473d", "url": "https://github.com/oracle/opengrok/commit/538c9b1f4fce134098324e6cf0f774d46758473d", "message": "check terminating in init()", "committedDate": "2020-12-07T09:59:03Z", "type": "commit"}, {"oid": "2115c1c61b198fc0979859e9069fe81cb7f3ae41", "url": "https://github.com/oracle/opengrok/commit/2115c1c61b198fc0979859e9069fe81cb7f3ae41", "message": "more the check", "committedDate": "2020-12-07T10:03:25Z", "type": "commit"}, {"oid": "0b5f4264b81a1deac088ee265d4f63d5cd7a8c55", "url": "https://github.com/oracle/opengrok/commit/0b5f4264b81a1deac088ee265d4f63d5cd7a8c55", "message": "terminate the cycles in init()/rebuild()", "committedDate": "2020-12-07T10:18:29Z", "type": "commit"}, {"oid": "0ccd600e4edcdea7a05ac952d3c2f967ce6ec4c1", "url": "https://github.com/oracle/opengrok/commit/0ccd600e4edcdea7a05ac952d3c2f967ce6ec4c1", "message": "Revert \"terminate the cycles in init()/rebuild()\"\n\nThis reverts commit 0b5f4264b81a1deac088ee265d4f63d5cd7a8c55.", "committedDate": "2020-12-08T09:03:03Z", "type": "commit"}, {"oid": "3495007dcf807f538d7f327a29f88f06a4a24b64", "url": "https://github.com/oracle/opengrok/commit/3495007dcf807f538d7f327a29f88f06a4a24b64", "message": "check terminating in the runnables", "committedDate": "2020-12-08T09:04:46Z", "type": "commit"}]}