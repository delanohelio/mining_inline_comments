{"pr_number": 3053, "pr_title": "Feature/redirect 1 result", "pr_createdAt": "2020-02-25T05:18:30Z", "pr_url": "https://github.com/oracle/opengrok/pull/3053", "timeline": [{"oid": "4c348f3c0ab54a11f780ea662e7e37d2bbe1ffaa", "url": "https://github.com/oracle/opengrok/commit/4c348f3c0ab54a11f780ea662e7e37d2bbe1ffaa", "message": "Fix #423 Fix #1984 : redirect when 1 hit for any eligible query", "committedDate": "2020-03-13T21:27:37Z", "type": "forcePushed"}, {"oid": "a274f5c4a650493a208d645736eefbf12de14a3d", "url": "https://github.com/oracle/opengrok/commit/a274f5c4a650493a208d645736eefbf12de14a3d", "message": "Fix #423 Fix #1984 : redirect when 1 hit for any eligible query", "committedDate": "2020-03-20T16:50:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396067616", "bodyText": "Why 0?\nAbove looked like optimization so toArray won't have to allocate new Array, since we know how many elements we will have.\nI think if 0 is correct, then in case of above you could just directly call .toArray() with no params", "author": "tarzanek", "createdAt": "2020-03-22T08:34:26Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java", "diffHunk": "@@ -212,7 +210,7 @@ public boolean getContext2(RuntimeEnvironment env, IndexSearcher searcher,\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n+            String[] fields = fieldList.toArray(new String[0]);", "originalCommit": "a274f5c4a650493a208d645736eefbf12de14a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5NTgwMQ==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396095801", "bodyText": "IntelliJ recommends 0", "author": "idodeclare", "createdAt": "2020-03-22T13:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDQ1MQ==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396104451", "bodyText": "I remember @ahornace telling me that there is no optimization on using size and 0.", "author": "tulinkry", "createdAt": "2020-03-22T15:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExMTE0MA==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396111140", "bodyText": "Taken directly from idea:\nThere are two styles to convert a collection to an array: either using a pre-sized array (like c.toArray(new String[c.size()])) or using an empty array (like c.toArray(new String[0]).\nIn older Java versions using pre-sized array was recommended, as the reflection call which is necessary to create an array of proper size was quite slow. However since late updates of OpenJDK 6 this call was intrinsified, making the performance of the empty array version the same and sometimes even better, compared to the pre-sized version. Also passing pre-sized array is dangerous for a concurrent or synchronized collection as a data race is possible between the size and toArray call which may result in extra nulls at the end of the array, if the collection was concurrently shrunk during the operation.\nThis inspection allows to follow the uniform style: either using an empty array (which is recommended in modern Java) or using a pre-sized array (which might be faster in older Java versions or non-HotSpot based JVMs).\n\n.toArray(T[] t) is necessary so JVM can create array of proper type because of type erasure", "author": "ahornace", "createdAt": "2020-03-22T16:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NTYyMA==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r399185620", "bodyText": "ok, so this means javadocs suck, I mean, they are outdated :-)", "author": "tarzanek", "createdAt": "2020-03-27T11:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2NzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "ee1827ac1637da18e7fcd2f6ba8881747afdd996", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java\nindex 12877e4c8f..f20c542214 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/search/context/Context.java\n\n@@ -210,7 +212,7 @@ public class Context {\n \n         try {\n             List<String> fieldList = qbuilder.getContextFields();\n-            String[] fields = fieldList.toArray(new String[0]);\n+            String[] fields = fieldList.toArray(new String[fieldList.size()]);\n \n             String res = uhi.highlightFieldsUnion(fields, query, docId,\n                 linelimit);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396067971", "bodyText": "seriously?\ndo we want to go for endless cycles with goto?\nback to Basic? :-D\n(yes, it's easy for me to complain, but this raises eyebrows, so there has to be a better way)\n(the first thing that came to my mind was a jflex lexer, but not sure if we don't have the same problem with line # there too)", "author": "tarzanek", "createdAt": "2020-03-22T08:38:56Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java", "diffHunk": "@@ -65,65 +63,52 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n-        length = 0;\n-        lineOffsets = null;\n-\n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n+        SplitterUtil.reset(this::reset, src, wrapper);\n     }\n \n     private void reset(Reader reader) throws IOException {\n+        length = 0;\n+        lineOffsets = null;\n+\n         List<Integer> newOffsets = new ArrayList<>();\n         newOffsets.add(0);\n \n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        newOffsets.add(length);\n-                        break;\n-                    } else {\n+\n+            redo_c:\n+            while (true) {", "originalCommit": "a274f5c4a650493a208d645736eefbf12de14a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2ODA0MA==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396068040", "bodyText": "couldn't resist to ping @kahatlen here as the EOL expert ;-)\n(hey Knuth, how are you these days?)", "author": "tarzanek", "createdAt": "2020-03-22T08:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjExOTY5Mw==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396119693", "bodyText": "seriously?\ndo we want to go for endless cycles with goto?\nback to Basic? :-D\n(yes, it's easy for me to complain, but this raises eyebrows, so there has to be a better way)\n\nYou've never hand-written a scanner? \ud83d\ude04 But you're right it's generally not a good idea; imagine code reviewing a hand-written PerlXref. But this is a teeny one, and look at that clear break at the end of the inner.... (Anyway search for while (true) in opengrok....)\n\n(the first thing that came to my mind was a jflex lexer, but not sure if we don't have the same problem with line # there too)\n\nI wrote these classes originally when it was a big pain to add additional .lex files, especially in packages where they weren't already used. But now we can add them anywhere easily (e.g. XrefSourceTransformer). Also I confess if I had used JFlex originally I wouldn't have had the deficient handling that I'm updating here....\nHow about if we decide at some point to update OpenGrok STANDARD_EOL as we probably should do, then I rewrite these to use JFlex? But for now I do think I'm updating and testing sufficiently in this patch.", "author": "idodeclare", "createdAt": "2020-03-22T17:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MDk2NA==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396250964", "bodyText": "OK I spent some time and replaced with a couple of new JFlex scanners", "author": "idodeclare", "createdAt": "2020-03-23T07:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2Nzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "24a06f243ed108341788ac3e525eb2301e6a09d7", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java\nindex d028ec90f5..3d80e7ffe2 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/LineBreaker.java\n\n@@ -71,43 +71,11 @@ public class LineBreaker {\n         lineOffsets = null;\n \n         List<Integer> newOffsets = new ArrayList<>();\n-        newOffsets.add(0);\n-\n-        int c;\n-        while ((c = reader.read()) != -1) {\n-            ++length;\n-\n-            redo_c:\n-            while (true) {\n-                switch (c) {\n-                    case '\\r':\n-                        c = reader.read();\n-                        if (c == -1) {\n-                            newOffsets.add(length);\n-                            break redo_c;\n-                        }\n-                        ++length;\n-                        if (c == '\\n') {\n-                            newOffsets.add(length);\n-                            break redo_c;\n-                        }\n-                        newOffsets.add(length - 1);\n-                        continue redo_c;\n-                    case '\\n':\n-                        newOffsets.add(length);\n-                        break redo_c;\n-                    default:\n-                        // pass\n-                }\n-                break;\n-            }\n-        }\n-\n-        count = newOffsets.size();\n-        if (newOffsets.get(newOffsets.size() - 1) < length) {\n-            newOffsets.add(length);\n-            // Do not increment count.\n-        }\n+        LineBreakerScanner scanner = new LineBreakerScanner(reader);\n+        scanner.setTarget(newOffsets);\n+        scanner.consume();\n+        length = scanner.getLength();\n+        count = newOffsets.size() - 1;\n \n         lineOffsets = new int[newOffsets.size()];\n         for (int i = 0; i < lineOffsets.length; ++i) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA2ODEyNA==", "url": "https://github.com/oracle/opengrok/pull/3053#discussion_r396068124", "bodyText": "same as above\n-1 for endless cycles", "author": "tarzanek", "createdAt": "2020-03-22T08:40:56Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java", "diffHunk": "@@ -189,74 +150,49 @@ public void reset(StreamSource src, ReaderWrapper wrapper)\n             throw new IllegalArgumentException(\"`src' is null\");\n         }\n \n+        SplitterUtil.reset(this::reset, src, wrapper);\n+    }\n+\n+    private void reset(Reader reader) throws IOException {\n         length = 0;\n         lines = null;\n         lineOffsets = null;\n \n-        try (InputStream in = src.getStream();\n-            Reader rdr = IOUtils.createBOMStrippedReader(in,\n-                StandardCharsets.UTF_8.name())) {\n-            Reader intermediate = null;\n-            if (wrapper != null) {\n-                intermediate = wrapper.get(rdr);\n-            }\n-\n-            try (BufferedReader brdr = new BufferedReader(\n-                    intermediate != null ? intermediate : rdr)) {\n-                reset(brdr);\n-            } finally {\n-                if (intermediate != null) {\n-                    intermediate.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    private void reset(Reader reader) throws IOException {\n         List<String> slist = new ArrayList<>();\n         StringBuilder bld = new StringBuilder();\n         int c;\n         while ((c = reader.read()) != -1) {\n             ++length;\n-            bld.append((char) c);\n-            switch (c) {\n-                case '\\r':\n-                    c = reader.read();\n-                    if (c == -1) {\n-                        slist.add(bld.toString());\n-                        bld.setLength(0);\n-                        break;\n-                    } else {\n-                        ++length;\n-                        switch (c) {\n-                            case '\\n':\n-                                bld.append((char) c);\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-                                break;\n-                            case '\\r':\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-\n-                                bld.append((char) c);\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n-                                break;\n-                            default:\n-                                slist.add(bld.toString());\n-                                bld.setLength(0);\n \n-                                bld.append((char) c);\n-                                break;\n+            redo_c:\n+            while (true) {", "originalCommit": "a274f5c4a650493a208d645736eefbf12de14a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "24a06f243ed108341788ac3e525eb2301e6a09d7", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java\nindex b029041437..3dae65a57f 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/util/SourceSplitter.java\n\n@@ -159,52 +159,10 @@ public class SourceSplitter {\n         lineOffsets = null;\n \n         List<String> slist = new ArrayList<>();\n-        StringBuilder bld = new StringBuilder();\n-        int c;\n-        while ((c = reader.read()) != -1) {\n-            ++length;\n-\n-            redo_c:\n-            while (true) {\n-                bld.append((char) c);\n-                switch (c) {\n-                    case '\\r':\n-                        c = reader.read();\n-                        if (c == -1) {\n-                            slist.add(bld.toString());\n-                            bld.setLength(0);\n-                            break redo_c;\n-                        }\n-                        ++length;\n-                        if (c == '\\n') {\n-                            bld.append((char) c);\n-                            slist.add(bld.toString());\n-                            bld.setLength(0);\n-                            break redo_c;\n-                        }\n-                        slist.add(bld.toString());\n-                        bld.setLength(0);\n-                        continue redo_c;\n-                    case '\\n':\n-                        slist.add(bld.toString());\n-                        bld.setLength(0);\n-                        break redo_c;\n-                    default:\n-                        // pass\n-                }\n-                break;\n-            }\n-        }\n-        if (bld.length() > 0) {\n-            slist.add(bld.toString());\n-            bld.setLength(0);\n-        } else {\n-            /*\n-             * Following JFlexXref's custom, an empty file or a file ending\n-             * with LF produces an additional line of length zero.\n-             */\n-            slist.add(\"\");\n-        }\n+        SourceSplitterScanner scanner = new SourceSplitterScanner(reader);\n+        scanner.setTarget(slist);\n+        scanner.consume();\n+        length = scanner.getLength();\n \n         lines = slist.toArray(new String[0]);\n         setLineOffsets();\n"}}, {"oid": "24a06f243ed108341788ac3e525eb2301e6a09d7", "url": "https://github.com/oracle/opengrok/commit/24a06f243ed108341788ac3e525eb2301e6a09d7", "message": "Use JFlex scanners for SourceSplitter and LineBreaker\n\nAlso, tweak STANDARD_EOL to have definite\nmatches as the start of each conditional.", "committedDate": "2020-03-23T17:23:46Z", "type": "forcePushed"}, {"oid": "ee1827ac1637da18e7fcd2f6ba8881747afdd996", "url": "https://github.com/oracle/opengrok/commit/ee1827ac1637da18e7fcd2f6ba8881747afdd996", "message": "Share some code between SourceSplitter and LineBreaker\n\nAlso, use \"offset\" consistently to align with\nLucene.", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "1465e1cd5bc18ecdced6bdfcf1993da80b066cc5", "url": "https://github.com/oracle/opengrok/commit/1465e1cd5bc18ecdced6bdfcf1993da80b066cc5", "message": "Fix to handle any combination of interspersed CR, LF, CRLF", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "62fea7d9efb8dea3f5e80c5c8b5af9c33033a86a", "url": "https://github.com/oracle/opengrok/commit/62fea7d9efb8dea3f5e80c5c8b5af9c33033a86a", "message": "Relocate package-private member", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "f045fcbeff00fd4f24ae36f331f4a23f02aa3b6f", "url": "https://github.com/oracle/opengrok/commit/f045fcbeff00fd4f24ae36f331f4a23f02aa3b6f", "message": "return after sendRedirect() (already done everywhere except here)", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "d9b723265f687fbd63a19ed57a0609ee73b5e9f2", "url": "https://github.com/oracle/opengrok/commit/d9b723265f687fbd63a19ed57a0609ee73b5e9f2", "message": "Create large buffer only if needed", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "b082910875c789371efcdbdca6fe71306426d93d", "url": "https://github.com/oracle/opengrok/commit/b082910875c789371efcdbdca6fe71306426d93d", "message": "Initialize PlainLineTokenizer only if needed", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "044a0d2ea72157723fb3903dd77669da8f536276", "url": "https://github.com/oracle/opengrok/commit/044a0d2ea72157723fb3903dd77669da8f536276", "message": "Last field can be final too", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "bee0118c9d87bc013b0729f7f29e45652f5ed743", "url": "https://github.com/oracle/opengrok/commit/bee0118c9d87bc013b0729f7f29e45652f5ed743", "message": "Simplify uniqueDefinition handling (no functional change)", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "05618953f9a2eb9638a887dd19e63cb7f6235c4d", "url": "https://github.com/oracle/opengrok/commit/05618953f9a2eb9638a887dd19e63cb7f6235c4d", "message": "Fix uniqueDefinition handling\n\n- Size is wrong for /s prefix.\n- Marshal definition name via query parameter to\n  accomodate rev redirect.", "committedDate": "2020-04-15T03:42:13Z", "type": "commit"}, {"oid": "c1c35457e9357029378ebfe112d23e3d7c2df069", "url": "https://github.com/oracle/opengrok/commit/c1c35457e9357029378ebfe112d23e3d7c2df069", "message": "Remove a bit of old redundancy", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "80652c77819df692d03613ca804e00a01c0e5068", "url": "https://github.com/oracle/opengrok/commit/80652c77819df692d03613ca804e00a01c0e5068", "message": "Remove unnecessary catch block", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "963a3f81841bb4742587571f143f6c44608a44ca", "url": "https://github.com/oracle/opengrok/commit/963a3f81841bb4742587571f143f6c44608a44ca", "message": "Clean up with IOUtils.close()", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "96b0c1420a97a577b2362eed9223f98d20898aa6", "url": "https://github.com/oracle/opengrok/commit/96b0c1420a97a577b2362eed9223f98d20898aa6", "message": "getRevisionLocation() can be simplified without null handling", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "b5cf496828477fb7628070c20c0dd1433e5f9d05", "url": "https://github.com/oracle/opengrok/commit/b5cf496828477fb7628070c20c0dd1433e5f9d05", "message": "Fix to log previously-swallowed error message", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "eeb959245eefe49db4cc01ed2c80c05896aad69c", "url": "https://github.com/oracle/opengrok/commit/eeb959245eefe49db4cc01ed2c80c05896aad69c", "message": "Fix #423 Fix #1984 : redirect when 1 hit for any eligible query", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "5454473033f17a1b4988083abcbd48df8a5589be", "url": "https://github.com/oracle/opengrok/commit/5454473033f17a1b4988083abcbd48df8a5589be", "message": "Use JFlex scanners for SourceSplitter and LineBreaker\n\nAlso, tweak STANDARD_EOL to have definite\nmatches as the start of each conditional.", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "4a68f312162e670d8b88bdd098ec011492e90e4a", "url": "https://github.com/oracle/opengrok/commit/4a68f312162e670d8b88bdd098ec011492e90e4a", "message": "Make JFlex versions as efficient as previous hand-coding", "committedDate": "2020-04-15T03:42:14Z", "type": "commit"}, {"oid": "4a68f312162e670d8b88bdd098ec011492e90e4a", "url": "https://github.com/oracle/opengrok/commit/4a68f312162e670d8b88bdd098ec011492e90e4a", "message": "Make JFlex versions as efficient as previous hand-coding", "committedDate": "2020-04-15T03:42:14Z", "type": "forcePushed"}, {"oid": "043289de22afd9e9e88ba47c8abbcf03f9c0d77f", "url": "https://github.com/oracle/opengrok/commit/043289de22afd9e9e88ba47c8abbcf03f9c0d77f", "message": "Fix to avoid possible NPE", "committedDate": "2020-04-15T03:44:52Z", "type": "commit"}, {"oid": "53377eb8957f016388c05c978febe4d9493984b5", "url": "https://github.com/oracle/opengrok/commit/53377eb8957f016388c05c978febe4d9493984b5", "message": "Remove defunct field, `compressed`", "committedDate": "2020-04-15T03:44:52Z", "type": "commit"}, {"oid": "fe7b53d8d1f4c2cbb1fd9efc1d1904b693523eca", "url": "https://github.com/oracle/opengrok/commit/fe7b53d8d1f4c2cbb1fd9efc1d1904b693523eca", "message": "Use QueryParameters in a couple of missed spots", "committedDate": "2020-04-15T03:44:52Z", "type": "commit"}, {"oid": "99167638334138bbdf78a4d0da2f30e6f3dbea2f", "url": "https://github.com/oracle/opengrok/commit/99167638334138bbdf78a4d0da2f30e6f3dbea2f", "message": "Add hidden #xrd to manage redirect/no-redirect", "committedDate": "2020-04-15T03:44:52Z", "type": "commit"}, {"oid": "01dfb76c25a62cb8daac84a9d667c16e5162afd8", "url": "https://github.com/oracle/opengrok/commit/01dfb76c25a62cb8daac84a9d667c16e5162afd8", "message": "Fix to adjust docID by Leaf docBase", "committedDate": "2020-04-15T03:44:52Z", "type": "commit"}, {"oid": "384ec09df44541b807c60672b3ee8a1f3ca65980", "url": "https://github.com/oracle/opengrok/commit/384ec09df44541b807c60672b3ee8a1f3ca65980", "message": "Fix JavaDoc 11 problem that is OK for Java 8", "committedDate": "2020-04-15T05:12:55Z", "type": "commit"}]}