{"pr_number": 3138, "pr_title": "Directories #Lines and LOC", "pr_createdAt": "2020-05-06T00:11:14Z", "pr_url": "https://github.com/oracle/opengrok/pull/3138", "timeline": [{"oid": "acc8e112e410fde686da184169dc3ee0b96f48f2", "url": "https://github.com/oracle/opengrok/commit/acc8e112e410fde686da184169dc3ee0b96f48f2", "message": "Do not emphasize counts for directories", "committedDate": "2020-05-06T01:04:18Z", "type": "forcePushed"}, {"oid": "1bd5cb02bc66c9a897f2c8940feb2154665ba043", "url": "https://github.com/oracle/opengrok/commit/1bd5cb02bc66c9a897f2c8940feb2154665ba043", "message": "Fix to ensure at least one D-document\n\n(I thought I tested fully locally oops.)", "committedDate": "2020-05-06T03:26:12Z", "type": "forcePushed"}, {"oid": "341fc99642aae1a10230ac3f3328df16eb32a749", "url": "https://github.com/oracle/opengrok/commit/341fc99642aae1a10230ac3f3328df16eb32a749", "message": "Fix to ensure at least one D-document", "committedDate": "2020-05-06T16:35:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421604935", "bodyText": "i think the default should be a parameter for this so the caller can specify what it expects in case of a non-long string", "author": "tulinkry", "createdAt": "2020-05-07T15:43:00Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/util/NumberUtil.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2017, 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.util;\n+\n+public class NumberUtil {\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception.\n+     */\n+    public static Long tryParseLong(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return Long.parseLong(value);\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Parses the specified {@code value} without throwing a checked exception,\n+     * returning a default 0.\n+     */\n+    public static long tryParseLongPrimitive(String value) {", "originalCommit": "c152a8d610e885e93c0a3d508b9007884d21917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMDY5Ng==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421730696", "bodyText": "Shouldn't we wait for that use case?", "author": "idodeclare", "createdAt": "2020-05-07T19:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzc2Mg==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733762", "bodyText": "allright", "author": "tulinkry", "createdAt": "2020-05-07T19:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDkzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421606749", "bodyText": "I don't like this duplication, any way around this with Optionals, or simply any other way than just duplicating class?", "author": "tulinkry", "createdAt": "2020-05-07T15:45:38Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/analysis/NullableNumLinesLOC.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * CDDL HEADER START\n+ *\n+ * The contents of this file are subject to the terms of the\n+ * Common Development and Distribution License (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *\n+ * See LICENSE.txt included in this distribution for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing Covered Code, include this CDDL HEADER in each\n+ * file and include the License file at LICENSE.txt.\n+ * If applicable, add the following below this CDDL HEADER, with the\n+ * fields enclosed by brackets \"[]\" replaced with your own identifying\n+ * information: Portions Copyright [yyyy] [name of copyright owner]\n+ *\n+ * CDDL HEADER END\n+ */\n+\n+/*\n+ * Copyright (c) 2020, Chris Fraire <cfraire@me.com>.\n+ */\n+\n+package org.opengrok.indexer.analysis;\n+\n+/**\n+ * Represents an immutable data object that associates a file with its analyzed\n+ * number-of-lines and lines-of-code or with null values.\n+ */\n+public class NullableNumLinesLOC {\n+    private final String path;\n+    private final Long numLines;\n+    private final Long loc;\n+\n+    public NullableNumLinesLOC(String path, Long numLines, Long loc) {\n+        this.path = path;\n+        this.numLines = numLines;\n+        this.loc = loc;\n+    }\n+\n+    public String getPath() {\n+        return path;\n+    }\n+\n+    public Long getNumLines() {\n+        return numLines;\n+    }\n+\n+    public Long getLOC() {\n+        return loc;\n+    }\n+}", "originalCommit": "c152a8d610e885e93c0a3d508b9007884d21917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMTUxMA==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421721510", "bodyText": "NullableNumLinesLOC is a renamed FileExtra where possible nullability is acknowledged for reporting purposes (e.g. for files that have no #Lines/LOC such as ZIP files). For the analysis and aggregation of this data, it's useful to leave out nullability, so NumLinesLOC exists with long and not Long.", "author": "idodeclare", "createdAt": "2020-05-07T18:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzE5Ng==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733196", "bodyText": "Understood, and what about forexample method supportsLoc that would return true for the cases you mentioned and then you could read the primitive values and false when reading these values wouldn't be meaningful. Basically - using only one class and hiding the ugly logic (loc != null && lines != null) inside it?", "author": "tulinkry", "createdAt": "2020-05-07T19:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMzQzNA==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421733434", "bodyText": "Just an idea", "author": "tulinkry", "createdAt": "2020-05-07T19:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyMzAxMQ==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421923011", "bodyText": "Your idea would increase cyclomatic complexity everywhere the current non-nullable class is used. I don't support", "author": "idodeclare", "createdAt": "2020-05-08T03:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNjc0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421734524", "bodyText": "I'm not sure if I follow this logic. Could you extract the filename to a constant?", "author": "ktulinger", "createdAt": "2020-05-07T19:15:27Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -505,6 +534,17 @@ public void update() throws IOException {\n                         }\n                     }\n \n+                    /*\n+                     * Since we are avoiding an IndexAnalysisSettings bump to\n+                     * store needed state related to #Lines/LOC, we need to\n+                     * ensure that at least one D-document gets saved. Record\n+                     * zeroes for a .foo under sourceRoot to do this.\n+                     */\n+                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));", "originalCommit": "c152a8d610e885e93c0a3d508b9007884d21917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyNjg5Mw==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r421926893", "bodyText": "I don't understand how a constant will help anyone follow if that long comment cannot do.", "author": "idodeclare", "createdAt": "2020-05-08T04:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYxMjAwMA==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422612000", "bodyText": "These two weren't connected.", "author": "tulinkry", "createdAt": "2020-05-10T08:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDAxOA==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422754018", "bodyText": "Oh. OK I extracted a constant and updated the comment hopefully for clarity.", "author": "idodeclare", "createdAt": "2020-05-11T03:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg0NzIwMQ==", "url": "https://github.com/oracle/opengrok/pull/3138#discussion_r422847201", "bodyText": "Understood, nice.", "author": "tulinkry", "createdAt": "2020-05-11T07:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "5c182cd761ad1209ee5ae4901def15b1ac07dc11", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 4929c104b8..999c41b730 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -535,12 +525,22 @@ public class IndexDatabase {\n                     }\n \n                     /*\n-                     * Since we are avoiding an IndexAnalysisSettings bump to\n-                     * store needed state related to #Lines/LOC, we need to\n-                     * ensure that at least one D-document gets saved. Record\n-                     * zeroes for a .foo under sourceRoot to do this.\n+                     * As a signifier that #Lines/LOC are comprehensively\n+                     * stored so that later calculation is in deltas mode, we\n+                     * need at least one D-document saved. For a repo with only\n+                     * non-code files, however, no true #Lines/LOC will have\n+                     * been saved. Subsequent re-indexing will do more work\n+                     * than necessary (until a source code file is placed). We\n+                     * can record zeroes for a fake file under the root to get\n+                     * a D-document even for this special repo situation.\n+                     *\n+                     * Metrics are aggregated for directories up to the root,\n+                     * so it suffices to put the fake directly under the root.\n                      */\n-                    countsAggregator.register(new NumLinesLOC(\"/.foo\", 0, 0));\n+                    if (!isWithDirectoryCounts) {\n+                        final String ROOT_FAKE_FILE = \"/.foo\";\n+                        countsAggregator.register(new NumLinesLOC(ROOT_FAKE_FILE, 0, 0));\n+                    }\n                     NumLinesLOCAccessor countsAccessor = new NumLinesLOCAccessor();\n                     countsAccessor.store(writer, reader, countsAggregator,\n                             isWithDirectoryCounts && isCountingDeltas);\n"}}, {"oid": "5c182cd761ad1209ee5ae4901def15b1ac07dc11", "url": "https://github.com/oracle/opengrok/commit/5c182cd761ad1209ee5ae4901def15b1ac07dc11", "message": "Only use ROOT_FAKE_FILE if not yet stored a D-document\n\n... to avoid a Lucene write if also no source\ncode has changed", "committedDate": "2020-08-20T17:22:13Z", "type": "forcePushed"}, {"oid": "41351de38a23428e9b1d8d30e09ea1a153413326", "url": "https://github.com/oracle/opengrok/commit/41351de38a23428e9b1d8d30e09ea1a153413326", "message": "Aggregate #Lines and LOC for directories up to the root", "committedDate": "2020-10-08T02:00:40Z", "type": "commit"}, {"oid": "0402c7e44598872bd473860a4288973f0a55111a", "url": "https://github.com/oracle/opengrok/commit/0402c7e44598872bd473860a4288973f0a55111a", "message": "Do not emphasize counts for directories", "committedDate": "2020-10-08T02:00:40Z", "type": "commit"}, {"oid": "ea1e4d2042ac515f09be83cae1a8396213a85ad1", "url": "https://github.com/oracle/opengrok/commit/ea1e4d2042ac515f09be83cae1a8396213a85ad1", "message": "Fix to ensure at least one D-document", "committedDate": "2020-10-08T02:00:40Z", "type": "commit"}, {"oid": "9474ffdf322679da3e30bf8461ee86d73c3a8a8a", "url": "https://github.com/oracle/opengrok/commit/9474ffdf322679da3e30bf8461ee86d73c3a8a8a", "message": "Need to store for /, which means normalizing its parent too", "committedDate": "2020-10-08T02:00:41Z", "type": "commit"}, {"oid": "125d0ce7c1121ff07b66db30839e260e188ec5d7", "url": "https://github.com/oracle/opengrok/commit/125d0ce7c1121ff07b66db30839e260e188ec5d7", "message": "Address review feedback", "committedDate": "2020-10-08T02:00:41Z", "type": "commit"}, {"oid": "ee69d6a215354f526f0e0269670d88da9559be58", "url": "https://github.com/oracle/opengrok/commit/ee69d6a215354f526f0e0269670d88da9559be58", "message": "fixPathIfWindows in aggregator", "committedDate": "2020-10-08T02:00:41Z", "type": "commit"}, {"oid": "2bb04ff305ecf7d0637f8c0bf716920c68c2ebb5", "url": "https://github.com/oracle/opengrok/commit/2bb04ff305ecf7d0637f8c0bf716920c68c2ebb5", "message": "Only use ROOT_FAKE_FILE if not yet stored a D-document\n\n... to avoid a Lucene write if also no source\ncode has changed", "committedDate": "2020-10-08T02:00:41Z", "type": "commit"}, {"oid": "2bb04ff305ecf7d0637f8c0bf716920c68c2ebb5", "url": "https://github.com/oracle/opengrok/commit/2bb04ff305ecf7d0637f8c0bf716920c68c2ebb5", "message": "Only use ROOT_FAKE_FILE if not yet stored a D-document\n\n... to avoid a Lucene write if also no source\ncode has changed", "committedDate": "2020-10-08T02:00:41Z", "type": "forcePushed"}]}