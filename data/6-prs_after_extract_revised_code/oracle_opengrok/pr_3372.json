{"pr_number": 3372, "pr_title": "generate xref for non empty compressed files", "pr_createdAt": "2020-11-19T14:32:47Z", "pr_url": "https://github.com/oracle/opengrok/pull/3372", "timeline": [{"oid": "0a9f3891d94e46ec3a7a8b25836a41883433a3ee", "url": "https://github.com/oracle/opengrok/commit/0a9f3891d94e46ec3a7a8b25836a41883433a3ee", "message": "always create xref writer\n\nfixes #858", "committedDate": "2020-11-19T12:26:39Z", "type": "commit"}, {"oid": "7a92942b5e0153044f350d8abbafd6ddc4ffafab", "url": "https://github.com/oracle/opengrok/commit/7a92942b5e0153044f350d8abbafd6ddc4ffafab", "message": "check fa in newXrefWriter()", "committedDate": "2020-11-19T12:43:05Z", "type": "commit"}, {"oid": "08991a1b1c8b0b72e969d4e40675a11360f673be", "url": "https://github.com/oracle/opengrok/commit/08991a1b1c8b0b72e969d4e40675a11360f673be", "message": "avoid empty xref files", "committedDate": "2020-11-19T13:57:22Z", "type": "commit"}, {"oid": "c30af2bd362f4a61a7e3ca97ebbde3a57e76e032", "url": "https://github.com/oracle/opengrok/commit/c30af2bd362f4a61a7e3ca97ebbde3a57e76e032", "message": "bump copyright year", "committedDate": "2020-11-19T14:21:58Z", "type": "commit"}, {"oid": "9ae1f0ba0a75752b667c101734a9eab87432a716", "url": "https://github.com/oracle/opengrok/commit/9ae1f0ba0a75752b667c101734a9eab87432a716", "message": "reuse basic indexer test as xref test", "committedDate": "2020-11-19T16:48:18Z", "type": "commit"}, {"oid": "8a8debca1220afd5011be27920e56dda74eedcea", "url": "https://github.com/oracle/opengrok/commit/8a8debca1220afd5011be27920e56dda74eedcea", "message": "move finishWriting() to the common finally block\n\nfixes #3373", "committedDate": "2020-11-19T19:31:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MjAwNg==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r527192006", "bodyText": "Please don't relocate this. That breaks known failure handling where we would actually not want to finish writing. I.e. finishWriting() in advance of a RuntimeException catch is deliberate.\nRecommend you swallow web exceptions as per your alternative idea. Web exceptions didn't used to abort an index run; you used to be able to index without Opengrok web running. Not sure what changed or when to break that.", "author": "idodeclare", "createdAt": "2020-11-19T20:55:03Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -486,17 +487,17 @@ public void update() throws IOException {\n                     reader.close();\n                 }\n             }\n-\n-            try {", "originalCommit": "8a8debca1220afd5011be27920e56dda74eedcea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNjQyOA==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r527526428", "bodyText": "Oh, okay. Also added a comment there. The API failure is really a soft one.", "author": "vladak", "createdAt": "2020-11-20T08:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MjAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "0242d362ec1714ee2afa656c7d8abe3d4ab366b4", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 7de3397166..cd3f9c9a80 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -487,17 +487,17 @@ public class IndexDatabase {\n                     reader.close();\n                 }\n             }\n-        } catch (RuntimeException ex) {\n-            LOGGER.log(Level.SEVERE,\n-                \"Failed with unexpected RuntimeException\", ex);\n-            throw ex;\n-        } finally {\n+\n             try {\n                 finishWriting();\n             } catch (IOException e) {\n                 finishingException = e;\n             }\n-\n+        } catch (RuntimeException ex) {\n+            LOGGER.log(Level.SEVERE,\n+                \"Failed with unexpected RuntimeException\", ex);\n+            throw ex;\n+        } finally {\n             completer = null;\n             try {\n                 if (writer != null) {\n"}}, {"oid": "0242d362ec1714ee2afa656c7d8abe3d4ab366b4", "url": "https://github.com/oracle/opengrok/commit/0242d362ec1714ee2afa656c7d8abe3d4ab366b4", "message": "Revert \"move finishWriting() to the common finally block\"\n\nThis reverts commit 8a8debca1220afd5011be27920e56dda74eedcea.", "committedDate": "2020-11-20T08:30:11Z", "type": "commit"}, {"oid": "de0f83f32f3cf880db21ac5c40a53b3f475cb151", "url": "https://github.com/oracle/opengrok/commit/de0f83f32f3cf880db21ac5c40a53b3f475cb151", "message": "swallow exceptions in markProjectIndexed()\n\nfixes #3373", "committedDate": "2020-11-20T08:34:39Z", "type": "commit"}, {"oid": "0a37e60f32e338d8e1e3f20823c70996ad07a952", "url": "https://github.com/oracle/opengrok/commit/0a37e60f32e338d8e1e3f20823c70996ad07a952", "message": "add comment per Chris", "committedDate": "2020-11-20T08:37:58Z", "type": "commit"}, {"oid": "64f5708ab95ecbcbcde4944c312b89da6c08a8d8", "url": "https://github.com/oracle/opengrok/commit/64f5708ab95ecbcbcde4944c312b89da6c08a8d8", "message": "remove unused import", "committedDate": "2020-11-20T08:39:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODIxNg==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r528438216", "bodyText": "I worry on NTFS that a deletion of an open file wouldn't succeed as it would do on *nix. Perhaps instead schedule a PendingFileDeletion of the transientXref?", "author": "idodeclare", "createdAt": "2020-11-23T01:35:07Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -725,8 +739,28 @@ private void addFile(File file, String path, Ctags ctags)\n         fa.setFoldingEnabled(env.isFoldingEnabled());\n \n         Document doc = new Document();\n-        try (Writer xrefOut = newXrefWriter(fa, path)) {\n+        CountingWriter xrefOut = null;\n+        try {\n+            String xrefAbs = null;\n+            File transientXref = null;\n+            if (env.isGenerateHtml()) {\n+                xrefAbs = getXrefPath(path);\n+                transientXref = new File(TandemPath.join(xrefAbs,\n+                        PendingFileCompleter.PENDING_EXTENSION));\n+                xrefOut = newXrefWriter(path, transientXref, env.isCompressXref());\n+            }\n+\n             analyzerGuru.populateDocument(doc, file, path, fa, xrefOut);\n+\n+            // Avoid producing empty xref files.\n+            if (xrefOut != null && xrefOut.getCount() > 0) {\n+                PendingFileRenaming ren = new PendingFileRenaming(xrefAbs,\n+                        transientXref.getAbsolutePath());\n+                completer.add(ren);\n+            } else if (xrefOut != null) {\n+                LOGGER.log(Level.FINER, \"xref for {0} would be empty, removing\", path);\n+                transientXref.delete();", "originalCommit": "64f5708ab95ecbcbcde4944c312b89da6c08a8d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUyMzQ0OA==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r528523448", "bodyText": "Good point. I had the same idea however thought it is unnecessary.", "author": "vladak", "createdAt": "2020-11-23T08:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzODIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "33a15e8d9e7a74c593fc2074921f810cddd9840e", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 35e50c80b6..676727d5ea 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -758,8 +758,8 @@ public class IndexDatabase {\n                         transientXref.getAbsolutePath());\n                 completer.add(ren);\n             } else if (xrefOut != null) {\n-                LOGGER.log(Level.FINER, \"xref for {0} would be empty, removing\", path);\n-                transientXref.delete();\n+                LOGGER.log(Level.FINER, \"xref for {0} would be empty, will remove\", path);\n+                completer.add(new PendingFileDeletion(transientXref.toString()));\n             }\n         } catch (InterruptedException e) {\n             LOGGER.log(Level.WARNING, \"File ''{0}'' interrupted--{1}\",\n"}}, {"oid": "33a15e8d9e7a74c593fc2074921f810cddd9840e", "url": "https://github.com/oracle/opengrok/commit/33a15e8d9e7a74c593fc2074921f810cddd9840e", "message": "delete transient xref file via PendingFileCompleter", "committedDate": "2020-11-23T08:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODY3Nw==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r530498677", "bodyText": "Not sure the ramification, but usually we would see used the log(Level, String, Throwable) method when an entire Throwable is reported (versus e.g. just the getMessage())", "author": "idodeclare", "createdAt": "2020-11-25T16:25:19Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",", "originalCommit": "33a15e8d9e7a74c593fc2074921f810cddd9840e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNDQ0MA==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r531014440", "bodyText": "True, changed.", "author": "vladak", "createdAt": "2020-11-26T13:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "74b0fb81465d398d6eed90abc01ebdbce4c63c05", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 676727d5ea..79f0880986 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -378,8 +378,8 @@ public class IndexDatabase {\n                     .request()\n                     .put(Entity.text(\"\"));\n         } catch (RuntimeException e) {\n-            LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                    new Object[] {project, e});\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",\n+                    project), e);\n             return;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTU1MQ==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r530501551", "bodyText": "redundant?", "author": "idodeclare", "createdAt": "2020-11-25T16:29:23Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -1629,46 +1666,63 @@ public int hashCode() {\n         return hash;\n     }\n \n-    private boolean isXrefWriter(AbstractAnalyzer fa) {\n-        AbstractAnalyzer.Genre g = fa.getFactory().getGenre();\n-        return (g == AbstractAnalyzer.Genre.PLAIN || g == AbstractAnalyzer.Genre.XREFABLE);\n+    private class CountingWriter extends Writer {\n+        private long count;\n+        private Writer out;\n+\n+        CountingWriter(Writer out) {\n+            super(out);\n+            this.out = out;\n+            this.count = 0;", "originalCommit": "33a15e8d9e7a74c593fc2074921f810cddd9840e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxNjg5Mg==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r531016892", "bodyText": "Looks like it. I also did bunch of other changes suggester by IDEA.", "author": "vladak", "createdAt": "2020-11-26T13:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 676727d5ea..8af95fa4a1 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -1666,14 +1666,13 @@ public class IndexDatabase {\n         return hash;\n     }\n \n-    private class CountingWriter extends Writer {\n+    private static class CountingWriter extends Writer {\n         private long count;\n-        private Writer out;\n+        private final Writer out;\n \n         CountingWriter(Writer out) {\n             super(out);\n             this.out = out;\n-            this.count = 0;\n         }\n \n         @Override\n"}}, {"oid": "74b0fb81465d398d6eed90abc01ebdbce4c63c05", "url": "https://github.com/oracle/opengrok/commit/74b0fb81465d398d6eed90abc01ebdbce4c63c05", "message": "pass the exception as 3rd argument", "committedDate": "2020-11-26T13:02:32Z", "type": "commit"}, {"oid": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3", "url": "https://github.com/oracle/opengrok/commit/18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3", "message": "property changes for CountingWriter", "committedDate": "2020-11-26T13:04:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0MTUzNA==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532241534", "bodyText": "Does {0} work with String.format?", "author": "idodeclare", "createdAt": "2020-11-29T17:39:28Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",", "originalCommit": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5NzI3NQ==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532497275", "bodyText": "Good catch, this will likely not work.", "author": "vladak", "createdAt": "2020-11-30T10:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI0MTUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d16b7bb8860126655609b487f470a54783b81c2b", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 8af95fa4a1..ec5611423b 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -378,7 +378,7 @@ public class IndexDatabase {\n                     .request()\n                     .put(Entity.text(\"\"));\n         } catch (RuntimeException e) {\n-            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project %s was indexed\",\n                     project), e);\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5NzgwOQ==", "url": "https://github.com/oracle/opengrok/pull/3372#discussion_r532497809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",\n          \n          \n            \n                        LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project %s was indexed\",", "author": "vladak", "createdAt": "2020-11-30T10:37:23Z", "path": "opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java", "diffHunk": "@@ -353,27 +354,38 @@ private void markProjectIndexed(Project project) {\n         // Successfully indexed the project. The message is sent even if\n         // the project's isIndexed() is true because it triggers RepositoryInfo\n         // refresh.\n-        if (project != null) {\n-            // Also need to store the correct value in configuration\n-            // when indexer writes it to a file.\n-            project.setIndexed(true);\n-\n-            if (env.getConfigURI() != null) {\n-                Response r = ClientBuilder.newClient()\n-                        .target(env.getConfigURI())\n-                        .path(\"api\")\n-                        .path(\"v1\")\n-                        .path(\"projects\")\n-                        .path(Util.URIEncode(project.getName()))\n-                        .path(\"indexed\")\n-                        .request()\n-                        .put(Entity.text(\"\"));\n-\n-                if (r.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL) {\n-                    LOGGER.log(Level.WARNING, \"Couldn''t notify the webapp that project {0} was indexed: {1}\",\n-                            new Object[] {project, r});\n-                }\n-            }\n+        if (project == null) {\n+            return;\n+        }\n+\n+        // Also need to store the correct value in configuration\n+        // when indexer writes it to a file.\n+        project.setIndexed(true);\n+\n+        if (env.getConfigURI() == null) {\n+            return;\n+        }\n+\n+        Response r;\n+        try {\n+            r = ClientBuilder.newClient()\n+                    .target(env.getConfigURI())\n+                    .path(\"api\")\n+                    .path(\"v1\")\n+                    .path(\"projects\")\n+                    .path(Util.URIEncode(project.getName()))\n+                    .path(\"indexed\")\n+                    .request()\n+                    .put(Entity.text(\"\"));\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",", "originalCommit": "18dfe5ea678ab7e4bdd4547d9d4fe0d848eaaeb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d16b7bb8860126655609b487f470a54783b81c2b", "chunk": "diff --git a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\nindex 8af95fa4a1..ec5611423b 100644\n--- a/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n+++ b/opengrok-indexer/src/main/java/org/opengrok/indexer/index/IndexDatabase.java\n\n@@ -378,7 +378,7 @@ public class IndexDatabase {\n                     .request()\n                     .put(Entity.text(\"\"));\n         } catch (RuntimeException e) {\n-            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project {0} was indexed\",\n+            LOGGER.log(Level.WARNING, String.format(\"Couldn''t notify the webapp that project %s was indexed\",\n                     project), e);\n             return;\n         }\n"}}, {"oid": "d16b7bb8860126655609b487f470a54783b81c2b", "url": "https://github.com/oracle/opengrok/commit/d16b7bb8860126655609b487f470a54783b81c2b", "message": "use correct format string", "committedDate": "2020-11-30T10:37:42Z", "type": "commit"}]}