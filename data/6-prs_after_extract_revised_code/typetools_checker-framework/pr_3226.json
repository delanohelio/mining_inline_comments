{"pr_number": 3226, "pr_title": "Make all the obj parameters in Field @NonNull.", "pr_createdAt": "2020-04-04T02:38:21Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3226", "timeline": [{"oid": "8c1a400c1a0ece1cb018e24dfc9344edfa71a281", "url": "https://github.com/typetools/checker-framework/commit/8c1a400c1a0ece1cb018e24dfc9344edfa71a281", "message": "Make all the obj parameters in Field @NonNull.", "committedDate": "2020-04-04T01:47:30Z", "type": "commit"}, {"oid": "0783e32167a8c26035dfc80fe1e150cd534bd872", "url": "https://github.com/typetools/checker-framework/commit/0783e32167a8c26035dfc80fe1e150cd534bd872", "message": "Update jdkShaHash.", "committedDate": "2020-04-04T02:34:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403487438", "bodyText": "Please also remove the @UnknownInitialization. We also don't want the top initialization qualifier, for the same reasons as why we don't want @Nullable.", "author": "wmdietl", "createdAt": "2020-04-04T16:17:37Z", "path": "checker/jdk/nullness/src/java/lang/reflect/Field.java", "diffHunk": "@@ -21,25 +21,27 @@ protected Field() {}\n   @Pure public int hashCode() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toString() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toGenericString() { throw new RuntimeException(\"skeleton method\"); }\n-  // These Object formal parameters can be null if the field is static.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void set(@UnknownInitialization @Nullable Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setBoolean(@UnknownInitialization @Nullable Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setByte(@UnknownInitialization @Nullable Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setChar(@UnknownInitialization @Nullable Object obj, char value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setShort(@UnknownInitialization @Nullable Object obj, short value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setInt(@UnknownInitialization @Nullable Object obj, int value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setLong(@UnknownInitialization @Nullable Object obj, long value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setFloat(@UnknownInitialization @Nullable Object obj, float value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setDouble(@UnknownInitialization @Nullable Object obj, double value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // These Object formal parameters can be null if the field is static, or can be non-null if the\n+  // field is field instance. We don't know which. To prevent a possible NullPointerException,\n+  // the Nullness Checker should conservatively issue a warning whenever null is passed.\n+  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }", "originalCommit": "0783e32167a8c26035dfc80fe1e150cd534bd872", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MjA2Nw==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403492067", "bodyText": "Could you explain this comment?  We don't want @Nullable because it might lead to NullPointerException.  How does an @UnknownInitialization argument lead to an exception?", "author": "mernst", "createdAt": "2020-04-04T17:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMjcwOQ==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403602709", "bodyText": "It won't lead to an exception, that is true. But it would allow reading information from an object that is still being initialized.\nSo then the return type should also be @UnknownInitialization, shouldn't it?\nIt seems easier to normally only allow fully initialized objects and require a suppression if the receiver is not.", "author": "wmdietl", "createdAt": "2020-04-05T00:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTkxOQ==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403641919", "bodyText": "A @PolyInitialized annotation seems appropriate in that case.", "author": "mernst", "createdAt": "2020-04-05T03:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0Mjg4NQ==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403642885", "bodyText": "... but until we do so, we could remove @UnknownInitialization.", "author": "mernst", "createdAt": "2020-04-05T03:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NDY0Nw==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403744647", "bodyText": "Even if we had a @PolyInitialized, I think it would be unsound here.\nAny field read from a fully-initialized object needs to be fully-initialized, but a field read from an under-initialization object may not be under initialization. So using @PolyInitialized would introduce an unsoundness.", "author": "wmdietl", "createdAt": "2020-04-05T19:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ4NzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "2403284d768519f3a0afc7dfbbee75298a86fe8d", "chunk": "diff --git a/checker/jdk/nullness/src/java/lang/reflect/Field.java b/checker/jdk/nullness/src/java/lang/reflect/Field.java\nindex cd1bdfbb0..d1d1d214b 100644\n--- a/checker/jdk/nullness/src/java/lang/reflect/Field.java\n+++ b/checker/jdk/nullness/src/java/lang/reflect/Field.java\n\n@@ -24,15 +24,16 @@ public final class Field extends AccessibleObject implements Member {\n   // These Object formal parameters can be null if the field is static, or can be non-null if the\n   // field is field instance. We don't know which. To prevent a possible NullPointerException,\n   // the Nullness Checker should conservatively issue a warning whenever null is passed.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @SideEffectFree public @Nullable Object get(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public boolean getBoolean(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public byte getByte(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public char getChar(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public short getShort(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public int getInt(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public long getLong(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public float getFloat(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public double getDouble(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // It is OK to set value to a not fully initialized obj parameter\n   public void set(@UnknownInitialization Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n   public void setBoolean(@UnknownInitialization Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n   public void setByte(@UnknownInitialization Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n"}}, {"oid": "ed08af3287ce34268a07c3321df638d99f0c5994", "url": "https://github.com/typetools/checker-framework/commit/ed08af3287ce34268a07c3321df638d99f0c5994", "message": "Merge ../checker-framework-branch-master into jdk-update", "committedDate": "2020-04-05T00:31:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMzQ2Nw==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403603467", "bodyText": "Related to the previous comment: allowing the value to be @Nullable, but not @UnknownInitialization, seems inconsistent.\nI would change this to fully-initialized and non-null values only.\nOtherwise, reflection can be used to set a field that is declared @NonNull to null, without a single warning that needs to be suppressed.", "author": "wmdietl", "createdAt": "2020-04-05T00:44:42Z", "path": "checker/jdk/nullness/src/java/lang/reflect/Field.java", "diffHunk": "@@ -21,25 +21,27 @@ protected Field() {}\n   @Pure public int hashCode() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toString() { throw new RuntimeException(\"skeleton method\"); }\n   @SideEffectFree public String toGenericString() { throw new RuntimeException(\"skeleton method\"); }\n-  // These Object formal parameters can be null if the field is static.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization @Nullable Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void set(@UnknownInitialization @Nullable Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setBoolean(@UnknownInitialization @Nullable Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setByte(@UnknownInitialization @Nullable Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setChar(@UnknownInitialization @Nullable Object obj, char value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setShort(@UnknownInitialization @Nullable Object obj, short value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setInt(@UnknownInitialization @Nullable Object obj, int value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setLong(@UnknownInitialization @Nullable Object obj, long value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setFloat(@UnknownInitialization @Nullable Object obj, float value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  public void setDouble(@UnknownInitialization @Nullable Object obj, double value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // These Object formal parameters can be null if the field is static, or can be non-null if the\n+  // field is field instance. We don't know which. To prevent a possible NullPointerException,\n+  // the Nullness Checker should conservatively issue a warning whenever null is passed.\n+  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public boolean getBoolean(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public byte getByte(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public char getChar(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public short getShort(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public int getInt(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public long getLong(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public float getFloat(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public double getDouble(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  public void set(@UnknownInitialization Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }", "originalCommit": "ed08af3287ce34268a07c3321df638d99f0c5994", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NDgyNg==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403744826", "bodyText": "@mernst Do you agree with removing the @Nullable here?", "author": "wmdietl", "createdAt": "2020-04-05T19:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMzQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0ODI1MQ==", "url": "https://github.com/typetools/checker-framework/pull/3226#discussion_r403748251", "bodyText": "Yes, that seems reasonable.  Thanks for the comment.", "author": "mernst", "createdAt": "2020-04-05T19:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMzQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2403284d768519f3a0afc7dfbbee75298a86fe8d", "chunk": "diff --git a/checker/jdk/nullness/src/java/lang/reflect/Field.java b/checker/jdk/nullness/src/java/lang/reflect/Field.java\nindex cd1bdfbb0..d1d1d214b 100644\n--- a/checker/jdk/nullness/src/java/lang/reflect/Field.java\n+++ b/checker/jdk/nullness/src/java/lang/reflect/Field.java\n\n@@ -24,15 +24,16 @@ public final class Field extends AccessibleObject implements Member {\n   // These Object formal parameters can be null if the field is static, or can be non-null if the\n   // field is field instance. We don't know which. To prevent a possible NullPointerException,\n   // the Nullness Checker should conservatively issue a warning whenever null is passed.\n-  @SideEffectFree public @Nullable Object get(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public boolean getBoolean(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public byte getByte(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public char getChar(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public short getShort(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public int getInt(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public long getLong(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public float getFloat(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n-  @Pure public double getDouble(@UnknownInitialization Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @SideEffectFree public @Nullable Object get(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public boolean getBoolean(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public byte getByte(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public char getChar(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public short getShort(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public int getInt(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public long getLong(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public float getFloat(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  @Pure public double getDouble(Object obj) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n+  // It is OK to set value to a not fully initialized obj parameter\n   public void set(@UnknownInitialization Object obj, @Nullable Object value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n   public void setBoolean(@UnknownInitialization Object obj, boolean value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n   public void setByte(@UnknownInitialization Object obj, byte value) throws IllegalArgumentException, IllegalAccessException { throw new RuntimeException(\"skeleton method\"); }\n"}}, {"oid": "2403284d768519f3a0afc7dfbbee75298a86fe8d", "url": "https://github.com/typetools/checker-framework/commit/2403284d768519f3a0afc7dfbbee75298a86fe8d", "message": "Remove @UnknownInitialization from all the get methods.", "committedDate": "2020-04-05T03:28:42Z", "type": "commit"}, {"oid": "3a4575edaee8a835ee2be1e69966068599255381", "url": "https://github.com/typetools/checker-framework/commit/3a4575edaee8a835ee2be1e69966068599255381", "message": "Merge remote-tracking branch 'origin/jdk-update' into jdk-update", "committedDate": "2020-04-05T03:29:41Z", "type": "commit"}, {"oid": "6b90271d29561897918cffee64ebe749ed2cfd39", "url": "https://github.com/typetools/checker-framework/commit/6b90271d29561897918cffee64ebe749ed2cfd39", "message": "Update jdkShaHash.", "committedDate": "2020-04-05T04:26:45Z", "type": "commit"}, {"oid": "7d4554092a4c7222a1af781906828e0c1339dee6", "url": "https://github.com/typetools/checker-framework/commit/7d4554092a4c7222a1af781906828e0c1339dee6", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update", "committedDate": "2020-04-05T17:30:36Z", "type": "commit"}, {"oid": "0efa818c6f3079ed273df375584e956ac7bd0b45", "url": "https://github.com/typetools/checker-framework/commit/0efa818c6f3079ed273df375584e956ac7bd0b45", "message": "Resolve comments.", "committedDate": "2020-04-05T19:49:43Z", "type": "commit"}, {"oid": "74a42fefdb6a0ab0a382933548a81c322fc76c0a", "url": "https://github.com/typetools/checker-framework/commit/74a42fefdb6a0ab0a382933548a81c322fc76c0a", "message": "Update jdkShaHash.", "committedDate": "2020-04-05T20:20:57Z", "type": "commit"}, {"oid": "398303cfd4ce6ea9cf8ed18a7f525ada41a7fefd", "url": "https://github.com/typetools/checker-framework/commit/398303cfd4ce6ea9cf8ed18a7f525ada41a7fefd", "message": "Adapt to the latest change.", "committedDate": "2020-04-05T21:56:20Z", "type": "commit"}, {"oid": "c3d3f7b897838ea1bd9f616b8328743afe6939f7", "url": "https://github.com/typetools/checker-framework/commit/c3d3f7b897838ea1bd9f616b8328743afe6939f7", "message": "Tweaks the wording.", "committedDate": "2020-04-06T02:46:28Z", "type": "commit"}, {"oid": "483074de83c57ef6a32b050244be3cc899a0b591", "url": "https://github.com/typetools/checker-framework/commit/483074de83c57ef6a32b050244be3cc899a0b591", "message": "Merge branch 'jdk-update' of github.com:xingweitian/checker-framework into jdk-update", "committedDate": "2020-04-07T00:57:43Z", "type": "commit"}, {"oid": "3cd0a126b5fc8b17a2fd1a0c1f804681b1309d75", "url": "https://github.com/typetools/checker-framework/commit/3cd0a126b5fc8b17a2fd1a0c1f804681b1309d75", "message": "Small wording tweaks.", "committedDate": "2020-04-07T01:06:38Z", "type": "commit"}, {"oid": "c7473a452d6dcc35b385ee4322532759f436d7ac", "url": "https://github.com/typetools/checker-framework/commit/c7473a452d6dcc35b385ee4322532759f436d7ac", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update", "committedDate": "2020-04-07T01:28:52Z", "type": "commit"}, {"oid": "9485cb44cdceafd0d61eab6b4443e4b1a3d1b4af", "url": "https://github.com/typetools/checker-framework/commit/9485cb44cdceafd0d61eab6b4443e4b1a3d1b4af", "message": "Reflect the changes in jdk11 to jdk8.", "committedDate": "2020-04-07T02:12:07Z", "type": "commit"}, {"oid": "f21f881e46ee1fc29a9ed25e308ed15274eb1dfc", "url": "https://github.com/typetools/checker-framework/commit/f21f881e46ee1fc29a9ed25e308ed15274eb1dfc", "message": "Update jdkShaHash.", "committedDate": "2020-04-07T02:40:50Z", "type": "commit"}, {"oid": "6515f4b0c5a363548abdd99277ffe83e4900da53", "url": "https://github.com/typetools/checker-framework/commit/6515f4b0c5a363548abdd99277ffe83e4900da53", "message": "Update interning annotation.", "committedDate": "2020-04-07T15:55:15Z", "type": "commit"}, {"oid": "6891c953ed8d447c7a99e0ab6328bbcaa2d6fa17", "url": "https://github.com/typetools/checker-framework/commit/6891c953ed8d447c7a99e0ab6328bbcaa2d6fa17", "message": "Merge remote-tracking branch 'typetools/master' into jdk-update", "committedDate": "2020-04-07T15:55:28Z", "type": "commit"}, {"oid": "0f94aac2a0ddf723c255f7fb85dae6fd740be31b", "url": "https://github.com/typetools/checker-framework/commit/0f94aac2a0ddf723c255f7fb85dae6fd740be31b", "message": "Update jdkShaHash.", "committedDate": "2020-04-07T16:21:22Z", "type": "commit"}, {"oid": "5dee86d38588e36f20c1f909a6a05e0fc8e6db61", "url": "https://github.com/typetools/checker-framework/commit/5dee86d38588e36f20c1f909a6a05e0fc8e6db61", "message": "Suppress interning warning.", "committedDate": "2020-04-07T19:25:45Z", "type": "commit"}]}