{"pr_number": 3346, "pr_title": "Make type parameter names in dataflow framework consistent.", "pr_createdAt": "2020-06-02T02:19:59Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3346", "timeline": [{"oid": "c2b1bf5e6bcbaa97d0af9e78859b8eba0f8212b1", "url": "https://github.com/typetools/checker-framework/commit/c2b1bf5e6bcbaa97d0af9e78859b8eba0f8212b1", "message": "Make dataflow type param consistent.", "committedDate": "2020-06-01T23:47:43Z", "type": "commit"}, {"oid": "e6e3b10126f5fb916a81b2a1161bf1fda2ff6d4e", "url": "https://github.com/typetools/checker-framework/commit/e6e3b10126f5fb916a81b2a1161bf1fda2ff6d4e", "message": "Add javadoc.", "committedDate": "2020-06-02T01:07:16Z", "type": "commit"}, {"oid": "15146c33e95bb68f6049ca3cbfce7196ef2f0738", "url": "https://github.com/typetools/checker-framework/commit/15146c33e95bb68f6049ca3cbfce7196ef2f0738", "message": "Fix javadoc.", "committedDate": "2020-06-02T01:51:48Z", "type": "commit"}, {"oid": "9e2e7437264e247a6234460a47acbc63acbe1842", "url": "https://github.com/typetools/checker-framework/commit/9e2e7437264e247a6234460a47acbc63acbe1842", "message": "Fix javadoc.", "committedDate": "2020-06-02T06:06:02Z", "type": "commit"}, {"oid": "f7dce8f8f77015496e114c3b07448fca8de8ff79", "url": "https://github.com/typetools/checker-framework/commit/f7dce8f8f77015496e114c3b07448fca8de8ff79", "message": "Add more javadoc..", "committedDate": "2020-06-02T06:39:33Z", "type": "commit"}, {"oid": "f72009238b350c077de29fc826bd032c90ae5575", "url": "https://github.com/typetools/checker-framework/commit/f72009238b350c077de29fc826bd032c90ae5575", "message": "Add more javadoc.", "committedDate": "2020-06-02T14:06:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NTc2OA==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r434145768", "bodyText": "the transfer result to use maybe? The type is confusing, b/c we use the value from that transfer result.", "author": "wmdietl", "createdAt": "2020-06-02T20:07:09Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -400,13 +400,17 @@ protected void propagateStoresTo(\n     /**\n      * Updates the value of node {@code node} to the value of the {@code transferResult}. Returns\n      * true if the node's value changed, or a store was updated.\n+     *\n+     * @param node a node\n+     * @param transferResult the result type of a transfer function", "originalCommit": "f72009238b350c077de29fc826bd032c90ae5575", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57935cac8570dcbe7e67e8927096fe5b360ea2f6", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\nindex 999cd52f2a..e3eb3f5cb7 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n\n@@ -402,7 +402,7 @@ public class Analysis<\n      * true if the node's value changed, or a store was updated.\n      *\n      * @param node a node\n-     * @param transferResult the result type of a transfer function\n+     * @param transferResult the transfer result to use\n      * @return true if the node's value changed, or a store was updated\n      */\n     protected boolean updateNodeValues(Node node, TransferResult<V, S> transferResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjExMw==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r434146113", "bodyText": "Similarly, the type here doesn't seem necessary.", "author": "wmdietl", "createdAt": "2020-06-02T20:07:52Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -416,8 +420,12 @@ protected boolean updateNodeValues(Node node, TransferResult<A, S> transferResul\n \n     /**\n      * Call the transfer function for node {@code node}, and set that node as current node first.\n+     *\n+     * @param node a node\n+     * @param store the input type of a transfer function", "originalCommit": "f72009238b350c077de29fc826bd032c90ae5575", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57935cac8570dcbe7e67e8927096fe5b360ea2f6", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\nindex 999cd52f2a..e3eb3f5cb7 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n\n@@ -422,7 +422,7 @@ public class Analysis<\n      * Call the transfer function for node {@code node}, and set that node as current node first.\n      *\n      * @param node a node\n-     * @param store the input type of a transfer function\n+     * @param store the input of a transfer function\n      * @return the transfer result for node {@code node}\n      */\n     protected TransferResult<V, S> callTransferFunction(Node node, TransferInput<V, S> store) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjY2OQ==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r434146669", "bodyText": "the {@code b} part is unnecessary, here and below.", "author": "wmdietl", "createdAt": "2020-06-02T20:09:01Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -678,16 +686,20 @@ public String toString() {\n     /**\n      * Read the {@link TransferInput} for a particular basic block (or {@code null} if none exists\n      * yet).\n+     *\n+     * @param b a block {@code b}", "originalCommit": "f72009238b350c077de29fc826bd032c90ae5575", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57935cac8570dcbe7e67e8927096fe5b360ea2f6", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\nindex 999cd52f2a..e3eb3f5cb7 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n\n@@ -687,17 +687,16 @@ public class Analysis<\n      * Read the {@link TransferInput} for a particular basic block (or {@code null} if none exists\n      * yet).\n      *\n-     * @param b a block {@code b}\n-     * @return the transfer input for the basic block {@code b}\n+     * @param b a block\n+     * @return the transfer input for the basic block\n      */\n     public @Nullable TransferInput<V, S> getInput(Block b) {\n         return getInputBefore(b);\n     }\n \n     /**\n-     * @param b a block {@code b}\n-     * @return the transfer input corresponding to the location right before the basic block {@code\n-     *     b}\n+     * @param b a block\n+     * @return the transfer input corresponding to the location right before the basic block\n      */\n     protected @Nullable TransferInput<V, S> getInputBefore(Block b) {\n         return inputs.get(b);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODUxMg==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r434148512", "bodyText": "Links to the types are unnecessary in the description - javadoc already links the types in the signature.", "author": "wmdietl", "createdAt": "2020-06-02T20:12:23Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java", "diffHunk": "@@ -743,24 +756,33 @@ public boolean isRunning() {\n         return nodeValues.get(n);\n     }\n \n-    /** Return all current node values. */\n-    public IdentityHashMap<Node, A> getNodeValues() {\n+    /**\n+     * Return all current node values.\n+     *\n+     * @return {@link #nodeValues}\n+     */\n+    public IdentityHashMap<Node, V> getNodeValues() {\n         return nodeValues;\n     }\n \n-    /** Set all current node values to the given map. */\n-    /*package-private*/ void setNodeValues(IdentityHashMap<Node, A> in) {\n+    /**\n+     * Set all current node values to the given map.\n+     *\n+     * @param in the current node values\n+     */\n+    /*package-private*/ void setNodeValues(IdentityHashMap<Node, V> in) {\n         assert !isRunning;\n         nodeValues.clear();\n         nodeValues.putAll(in);\n     }\n \n     /**\n+     * @param t a {@link Tree} t", "originalCommit": "f72009238b350c077de29fc826bd032c90ae5575", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "57935cac8570dcbe7e67e8927096fe5b360ea2f6", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\nindex 999cd52f2a..e3eb3f5cb7 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/Analysis.java\n\n@@ -777,7 +776,7 @@ public class Analysis<\n     }\n \n     /**\n-     * @param t a {@link Tree} t\n+     * @param t a tree\n      * @return the abstract value for {@link Tree} {@code t}, or {@code null} if no information is\n      *     available. Note that if the analysis has not finished yet, this value might not represent\n      *     the final value for this node.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MDU1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r434150552", "bodyText": "ConditionalTransferResult below uses\n * @param <S> the {@link Store} used to keep track of intermediate results\nMaybe also make all these descriptions consistent?\nIn this particular case, the two descriptions aren't symmetric, which makes them a bit ugly.", "author": "wmdietl", "createdAt": "2020-06-02T20:16:31Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/AnalysisResult.java", "diffHunk": "@@ -21,12 +21,13 @@\n  * providing the abstract values given a node or a tree. Note that it does not keep track of custom\n  * results computed by some analysis.\n  *\n- * @param <A> type of the abstract value that is tracked\n+ * @param <V> type of the abstract value that is tracked\n+ * @param <S> the store type used in the analysis", "originalCommit": "f72009238b350c077de29fc826bd032c90ae5575", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "57935cac8570dcbe7e67e8927096fe5b360ea2f6", "url": "https://github.com/typetools/checker-framework/commit/57935cac8570dcbe7e67e8927096fe5b360ea2f6", "message": "Resolve comments.", "committedDate": "2020-06-02T20:59:49Z", "type": "commit"}, {"oid": "9b3cf3f55eddc7ff8e25fbc560c88f087b225ff4", "url": "https://github.com/typetools/checker-framework/commit/9b3cf3f55eddc7ff8e25fbc560c88f087b225ff4", "message": "Resolve comments.", "committedDate": "2020-06-02T21:11:13Z", "type": "commit"}, {"oid": "2f52590092991120adf71d27ce599d774dcb5192", "url": "https://github.com/typetools/checker-framework/commit/2f52590092991120adf71d27ce599d774dcb5192", "message": "Resolve comments.", "committedDate": "2020-06-02T21:34:13Z", "type": "commit"}, {"oid": "5d037fcec8e0ffb295451a50180b0cb5e58234e7", "url": "https://github.com/typetools/checker-framework/commit/5d037fcec8e0ffb295451a50180b0cb5e58234e7", "message": "Resolve comments. [ci skip]", "committedDate": "2020-06-02T22:22:31Z", "type": "commit"}, {"oid": "fdacf167f8df758513366afb4c2694504baafa4b", "url": "https://github.com/typetools/checker-framework/commit/fdacf167f8df758513366afb4c2694504baafa4b", "message": "Merge ../checker-framework-branch-master into typetools-dataflow-consistent-type-param-name", "committedDate": "2020-06-03T16:40:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMDM1NA==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r436200354", "bodyText": "There already is some javadoc above. Can you merge the two?", "author": "wmdietl", "createdAt": "2020-06-05T23:03:11Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java", "diffHunk": "@@ -37,8 +38,18 @@\n      *     produced\n      * @param exceptionalStores the stores to use if the basic block throws an exception\n      */\n+    /**", "originalCommit": "fdacf167f8df758513366afb4c2694504baafa4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\nindex a712eb020a..857644f7c7 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\n\n@@ -31,13 +31,6 @@ public abstract class TransferResult<V extends AbstractValue<V>, S extends Store\n      */\n     protected final @Nullable Map<TypeMirror, S> exceptionalStores;\n \n-    /**\n-     * Create a new TransferResult.\n-     *\n-     * @param resultValue the abstract value of the node, or {@code null} if no value has been\n-     *     produced\n-     * @param exceptionalStores the stores to use if the basic block throws an exception\n-     */\n     /**\n      * Create a {@link #TransferResult(AbstractValue, Map)}, given {@link #resultValue} and {@link\n      * #exceptionalStores}.\n"}}, {"oid": "1bc953bb4bf0250501c14aeef88096903e04af9f", "url": "https://github.com/typetools/checker-framework/commit/1bc953bb4bf0250501c14aeef88096903e04af9f", "message": "Merge remote-tracking branch 'typetools/master' into typetools-dataflow-consistent-type-param-name", "committedDate": "2020-06-06T03:48:37Z", "type": "commit"}, {"oid": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "url": "https://github.com/typetools/checker-framework/commit/cda4d59e0d5fa978583374ad549d1c097fcfe3db", "message": "Resolve comments.", "committedDate": "2020-06-06T03:51:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MDY5OA==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r436390698", "bodyText": "Should the linked constructor be consistent with the @see constructor below? At the moment this links to itself, which doesn't make much sense.\nThe implementation actually calls a constructor without a map...\nShould it be documented that false is used for the boolean?\nSame comment for the constructor below this one.", "author": "wmdietl", "createdAt": "2020-06-07T18:44:21Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/ConditionalTransferResult.java", "diffHunk": "@@ -32,31 +33,42 @@\n      *\n      * <p><em>Aliasing</em>: {@code thenStore} and {@code elseStore} are not allowed to be used\n      * anywhere outside of this class (including use through aliases). Complete control over the\n-     * objects is transfered to this class.\n+     * objects is transferred to this class.\n      *\n+     * @param value the abstract value produced by the transfer function\n+     * @param thenStore {@link #thenStore}\n+     * @param elseStore {@link #elseStore}\n+     * @param storeChanged {@link #storeChanged}\n      * @see #ConditionalTransferResult(AbstractValue, Store, Store, Map, boolean)\n      */\n     public ConditionalTransferResult(\n-            @Nullable A value, S thenStore, S elseStore, boolean storeChanged) {\n+            @Nullable V value, S thenStore, S elseStore, boolean storeChanged) {\n         this(value, thenStore, elseStore, null, storeChanged);\n     }\n \n     /**\n-     * See {@link #ConditionalTransferResult(AbstractValue, Store, Store, Map, boolean)}.\n+     * Create a new {@link #ConditionalTransferResult(AbstractValue, Store, Store)}.", "originalCommit": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50a8f583fd16c968a9f4a9dda09621ac709aee26", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/ConditionalTransferResult.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/ConditionalTransferResult.java\nindex 4a4831bdae..c87f58d577 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/ConditionalTransferResult.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/ConditionalTransferResult.java\n\n@@ -26,10 +26,13 @@ public class ConditionalTransferResult<V extends AbstractValue<V>, S extends Sto\n     protected final S elseStore;\n \n     /**\n-     * <em>Exceptions</em>: If the corresponding {@link org.checkerframework.dataflow.cfg.node.Node}\n-     * throws an exception, then it is assumed that no special handling is necessary and the store\n-     * before the corresponding {@link org.checkerframework.dataflow.cfg.node.Node} will be passed\n-     * along any exceptional edge.\n+     * Create a new {@link #ConditionalTransferResult(AbstractValue, Store, Store, Map, boolean)},\n+     * with passing {@code null} to {@link #exceptionalStores}.\n+     *\n+     * <p><em>Exceptions</em>: If the corresponding {@link\n+     * org.checkerframework.dataflow.cfg.node.Node} throws an exception, then it is assumed that no\n+     * special handling is necessary and the store before the corresponding {@link\n+     * org.checkerframework.dataflow.cfg.node.Node} will be passed along any exceptional edge.\n      *\n      * <p><em>Aliasing</em>: {@code thenStore} and {@code elseStore} are not allowed to be used\n      * anywhere outside of this class (including use through aliases). Complete control over the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MDgzOA==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r436390838", "bodyText": "Same comment about self-referential constructor docs in this class.", "author": "wmdietl", "createdAt": "2020-06-07T18:45:55Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java", "diffHunk": "@@ -32,28 +33,36 @@\n      * class (including use through aliases). Complete control over the object is transfered to this\n      * class.\n      *\n+     * @param value the abstract value produced by the transfer function\n+     * @param resultStore {@link #store}\n+     * @param storeChanged {@link #storeChanged}\n      * @see #RegularTransferResult(AbstractValue, Store, Map, boolean)\n      */\n-    public RegularTransferResult(@Nullable A value, S resultStore, boolean storeChanged) {\n+    public RegularTransferResult(@Nullable V value, S resultStore, boolean storeChanged) {\n         this(value, resultStore, null, storeChanged);\n     }\n \n     /**\n-     * See {@link #RegularTransferResult(AbstractValue, Store, Map, boolean)}.\n+     * Create a new {@link #RegularTransferResult(AbstractValue, Store)}.", "originalCommit": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50a8f583fd16c968a9f4a9dda09621ac709aee26", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\nindex 9f1a286a3a..faa5afd5af 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\n\n@@ -30,8 +31,8 @@ public class RegularTransferResult<V extends AbstractValue<V>, S extends Store<S\n      * org.checkerframework.dataflow.cfg.node.Node} will be passed along any exceptional edge.\n      *\n      * <p><em>Aliasing</em>: {@code resultStore} is not allowed to be used anywhere outside of this\n-     * class (including use through aliases). Complete control over the object is transfered to this\n-     * class.\n+     * class (including use through aliases). Complete control over the object is transferred to\n+     * this class.\n      *\n      * @param value the abstract value produced by the transfer function\n      * @param resultStore {@link #store}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MDkxMw==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r436390913", "bodyText": "Can you add a summary for this constructor? At the top it currently has * *.", "author": "wmdietl", "createdAt": "2020-06-07T18:47:04Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java", "diffHunk": "@@ -32,28 +33,36 @@\n      * class (including use through aliases). Complete control over the object is transfered to this\n      * class.\n      *\n+     * @param value the abstract value produced by the transfer function", "originalCommit": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50a8f583fd16c968a9f4a9dda09621ac709aee26", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\nindex 9f1a286a3a..faa5afd5af 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/RegularTransferResult.java\n\n@@ -30,8 +31,8 @@ public class RegularTransferResult<V extends AbstractValue<V>, S extends Store<S\n      * org.checkerframework.dataflow.cfg.node.Node} will be passed along any exceptional edge.\n      *\n      * <p><em>Aliasing</em>: {@code resultStore} is not allowed to be used anywhere outside of this\n-     * class (including use through aliases). Complete control over the object is transfered to this\n-     * class.\n+     * class (including use through aliases). Complete control over the object is transferred to\n+     * this class.\n      *\n      * @param value the abstract value produced by the transfer function\n      * @param resultStore {@link #store}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5MTAwOQ==", "url": "https://github.com/typetools/checker-framework/pull/3346#discussion_r436391009", "bodyText": "Another link to the same constructor.", "author": "wmdietl", "createdAt": "2020-06-07T18:48:22Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java", "diffHunk": "@@ -31,14 +32,17 @@\n     protected final @Nullable Map<TypeMirror, S> exceptionalStores;\n \n     /**\n-     * Create a new TransferResult.\n+     * Create a {@link #TransferResult(AbstractValue, Map)}, given {@link #resultValue} and {@link", "originalCommit": "cda4d59e0d5fa978583374ad549d1c097fcfe3db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "50a8f583fd16c968a9f4a9dda09621ac709aee26", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\nindex 857644f7c7..548ac27a43 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/analysis/TransferResult.java\n\n@@ -32,8 +32,7 @@ public abstract class TransferResult<V extends AbstractValue<V>, S extends Store\n     protected final @Nullable Map<TypeMirror, S> exceptionalStores;\n \n     /**\n-     * Create a {@link #TransferResult(AbstractValue, Map)}, given {@link #resultValue} and {@link\n-     * #exceptionalStores}.\n+     * Create a new TransferResult, given {@link #resultValue} and {@link #exceptionalStores}.\n      *\n      * @param resultValue the abstract value of the {@link\n      *     org.checkerframework.dataflow.cfg.node.Node} associated with this {@link TransferResult}\n"}}, {"oid": "50a8f583fd16c968a9f4a9dda09621ac709aee26", "url": "https://github.com/typetools/checker-framework/commit/50a8f583fd16c968a9f4a9dda09621ac709aee26", "message": "Resolve comments.", "committedDate": "2020-06-08T04:04:32Z", "type": "commit"}, {"oid": "1cd819ae59652d751961fdbde881e8da58326e49", "url": "https://github.com/typetools/checker-framework/commit/1cd819ae59652d751961fdbde881e8da58326e49", "message": "Wording tweaks", "committedDate": "2020-06-08T22:50:07Z", "type": "commit"}, {"oid": "6b1b63e6f9601f69af255b76165346c0f0a8249a", "url": "https://github.com/typetools/checker-framework/commit/6b1b63e6f9601f69af255b76165346c0f0a8249a", "message": "Wording tweaks", "committedDate": "2020-06-08T22:52:55Z", "type": "commit"}, {"oid": "daa7b6ffacd1a1606ffd6f01fd3d9d5a5ed4ff84", "url": "https://github.com/typetools/checker-framework/commit/daa7b6ffacd1a1606ffd6f01fd3d9d5a5ed4ff84", "message": "Reformat.", "committedDate": "2020-06-08T23:04:14Z", "type": "commit"}, {"oid": "36a57a9d0af365d41fc1809bf91dd18976a76dd8", "url": "https://github.com/typetools/checker-framework/commit/36a57a9d0af365d41fc1809bf91dd18976a76dd8", "message": "Merge ../checker-framework-branch-master into typetools-dataflow-consistent-type-param-name", "committedDate": "2020-06-09T03:28:42Z", "type": "commit"}, {"oid": "03925e96f794a8d0dd7dc950967a8fb16c755818", "url": "https://github.com/typetools/checker-framework/commit/03925e96f794a8d0dd7dc950967a8fb16c755818", "message": "Improve documentation", "committedDate": "2020-06-09T03:41:48Z", "type": "commit"}]}