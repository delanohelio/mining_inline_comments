{"pr_number": 3587, "pr_title": "Improve ControlFlowGraph documentation", "pr_createdAt": "2020-08-11T21:59:47Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3587", "timeline": [{"oid": "228438e058cea0229b9873a56bf1ccfe8236d970", "url": "https://github.com/typetools/checker-framework/commit/228438e058cea0229b9873a56bf1ccfe8236d970", "message": "Improve ControlFlowGraph documentation", "committedDate": "2020-08-11T21:57:16Z", "type": "commit"}, {"oid": "14237cf352e60cd2abc4f0077413407412f774d4", "url": "https://github.com/typetools/checker-framework/commit/14237cf352e60cd2abc4f0077413407412f774d4", "message": "More documentation", "committedDate": "2020-08-11T22:07:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5NDk3OQ==", "url": "https://github.com/typetools/checker-framework/pull/3587#discussion_r469394979", "bodyText": "This is incorrect.  This method does not use the refined type from dataflow. Rather it use the synthetic NewArrayTree created by dataflow and computes a type of that NewArrayTree via the AnnotatedTypeFactory.  It does not return null if the method call is in dead code.\nThis method only returns null if useFlow is false.", "author": "smillst", "createdAt": "2020-08-12T16:40:46Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1457,9 +1457,17 @@ public AnnotatedTypeMirror getAnnotatedTypeLhs(Tree lhsTree) {\n     /**\n      * Returns the type of a varargs array of a method invocation or a constructor invocation.\n      *\n+     * <p>A null return value might mean:\n+     *\n+     * <ul>\n+     *   <li>This type-checker is not using dataflow analysis.\n+     *   <li>The given tree is dead code, so dataflow analysis never reached it to refine its type.", "originalCommit": "14237cf352e60cd2abc4f0077413407412f774d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c31dd8890cb9c5cdb4e33e9717a15f8e10fe0d2", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\nindex 298585758e..3789eb0a8f 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n\n@@ -1456,18 +1456,11 @@ public abstract class GenericAnnotatedTypeFactory<\n \n     /**\n      * Returns the type of a varargs array of a method invocation or a constructor invocation.\n-     *\n-     * <p>A null return value might mean:\n-     *\n-     * <ul>\n-     *   <li>This type-checker is not using dataflow analysis.\n-     *   <li>The given tree is dead code, so dataflow analysis never reached it to refine its type.\n-     *   <li>TODO: Are there other reasons the return value might be null?\n-     * </ul>\n+     * Returns null only if private field {@code useFlow} is false.\n      *\n      * @param tree a method invocation or a constructor invocation\n      * @return AnnotatedTypeMirror of varargs array for a method or constructor invocation {@code\n-     *     tree}; may return null\n+     *     tree}; returns null if private field {@code useFlow} is false\n      */\n     public @Nullable AnnotatedTypeMirror getAnnotatedTypeVarargsArray(Tree tree) {\n         if (!useFlow) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5NjA3OQ==", "url": "https://github.com/typetools/checker-framework/pull/3587#discussion_r469396079", "bodyText": "I was confused about which maps the \"both maps\" was referring to.  I think it's treeLookup and convertedTreeLookup.", "author": "smillst", "createdAt": "2020-08-12T16:42:36Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java", "diffHunk": "@@ -55,10 +55,18 @@\n     protected final UnderlyingAST underlyingAST;\n \n     /**\n-     * Maps from AST {@link Tree}s to sets of {@link Node}s. Every Tree that produces a value will\n-     * have at least one corresponding Node. Trees that undergo conversions, such as boxing or\n-     * unboxing, can map to two distinct Nodes. The Node for the pre-conversion value is stored in\n-     * treeLookup, while the Node for the post-conversion value is stored in convertedTreeLookup.\n+     * Maps from AST {@link Tree}s to sets of {@link Node}s.\n+     *\n+     * <ul>\n+     *   <li>Most Trees that produce a value will have at least one corresponding Node.\n+     *   <li>Trees that undergo conversions, such as boxing or unboxing, can map to two distinct\n+     *       Nodes. The Node for the pre-conversion value is stored in {@link #treeLookup}, while\n+     *       the Node for the post-conversion value is stored in {@link #convertedTreeLookup}.\n+     * </ul>\n+     *\n+     * Some of the mapped-to nodes (in both maps) do not appear in {@link #getAllNodes} because", "originalCommit": "14237cf352e60cd2abc4f0077413407412f774d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c31dd8890cb9c5cdb4e33e9717a15f8e10fe0d2", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java\nindex 42c62998e6..c0cd015a06 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/ControlFlowGraph.java\n\n@@ -64,9 +64,9 @@ public class ControlFlowGraph {\n      *       the Node for the post-conversion value is stored in {@link #convertedTreeLookup}.\n      * </ul>\n      *\n-     * Some of the mapped-to nodes (in both maps) do not appear in {@link #getAllNodes} because\n-     * their blocks are not reachable in the control flow graph. Dataflow will not compute abstract\n-     * values for these nodes.\n+     * Some of the mapped-to nodes (in both {@link #treeLookup} and {@link #convertedTreeLookup}) do\n+     * not appear in {@link #getAllNodes} because their blocks are not reachable in the control flow\n+     * graph. Dataflow will not compute abstract values for these nodes.\n      */\n     protected final IdentityHashMap<Tree, Set<Node>> treeLookup;\n \n"}}, {"oid": "1c31dd8890cb9c5cdb4e33e9717a15f8e10fe0d2", "url": "https://github.com/typetools/checker-framework/commit/1c31dd8890cb9c5cdb4e33e9717a15f8e10fe0d2", "message": "Fixes from code review", "committedDate": "2020-08-12T17:25:17Z", "type": "commit"}]}