{"pr_number": 3501, "pr_title": "Add a TypeHierarchy for the Signedness Checker", "pr_createdAt": "2020-07-23T13:53:19Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3501", "timeline": [{"oid": "531fcc46b89a12b0c11be517a0c7638e3b9a7080", "url": "https://github.com/typetools/checker-framework/commit/531fcc46b89a12b0c11be517a0c7638e3b9a7080", "message": "Add a TypeHierarchy for the Signedness Checker", "committedDate": "2020-07-23T05:16:17Z", "type": "commit"}, {"oid": "443f7a58efd4d87d41058f9fc244bba23a5869c2", "url": "https://github.com/typetools/checker-framework/commit/443f7a58efd4d87d41058f9fc244bba23a5869c2", "message": "Merge ../checker-framework-branch-master into signedness-typehierarchy", "committedDate": "2020-07-23T05:19:01Z", "type": "commit"}, {"oid": "3191e05cf5832d80c0832368edbf075b92882523", "url": "https://github.com/typetools/checker-framework/commit/3191e05cf5832d80c0832368edbf075b92882523", "message": "Javadoc fixes", "committedDate": "2020-07-23T05:30:38Z", "type": "commit"}, {"oid": "12694b1cbf9ad400bbf2f32f23deed3f9acb9586", "url": "https://github.com/typetools/checker-framework/commit/12694b1cbf9ad400bbf2f32f23deed3f9acb9586", "message": "Test against correct variable", "committedDate": "2020-07-23T13:22:03Z", "type": "commit"}, {"oid": "786ddbcb80bc9f148350ba871af4cbefe6a0c83f", "url": "https://github.com/typetools/checker-framework/commit/786ddbcb80bc9f148350ba871af4cbefe6a0c83f", "message": "Merge ../checker-framework-branch-master into signedness-typehierarchy", "committedDate": "2020-07-23T13:25:27Z", "type": "commit"}, {"oid": "3d027c184342522a568dcef3a430928d3e7b2251", "url": "https://github.com/typetools/checker-framework/commit/3d027c184342522a568dcef3a430928d3e7b2251", "message": "Avoid change to framework", "committedDate": "2020-07-24T14:14:36Z", "type": "commit"}, {"oid": "1fe13b280ec1e0a631c7ad3dd2b89e532fb15f8a", "url": "https://github.com/typetools/checker-framework/commit/1fe13b280ec1e0a631c7ad3dd2b89e532fb15f8a", "message": "Add manual section about widening conversions", "committedDate": "2020-07-24T14:25:32Z", "type": "commit"}, {"oid": "35ce7b42a8cb02978438b5849aaf11c8617eac39", "url": "https://github.com/typetools/checker-framework/commit/35ce7b42a8cb02978438b5849aaf11c8617eac39", "message": "Remove references to removed method", "committedDate": "2020-07-24T14:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNTU4NQ==", "url": "https://github.com/typetools/checker-framework/pull/3501#discussion_r460125585", "bodyText": "This should be !AnnotationUtils.areSameByName(superAnno, SIGNEDNESS_BOTTOM).", "author": "smillst", "createdAt": "2020-07-24T15:28:23Z", "path": "checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java", "diffHunk": "@@ -239,4 +251,140 @@ public Void visitCompoundAssignment(CompoundAssignmentTree tree, AnnotatedTypeMi\n             return null;\n         }\n     }\n+\n+    @Override\n+    protected TypeHierarchy createTypeHierarchy() {\n+        return new SignednessTypeHierarchy(\n+                checker,\n+                getQualifierHierarchy(),\n+                checker.getBooleanOption(\"ignoreRawTypeArguments\", true),\n+                checker.hasOption(\"invariantArrays\"));\n+    }\n+\n+    /**\n+     * The type hierarchy for the signedness type system. If A is narrower (fewer bits) than B, then\n+     * A with any qualifier is a subtype of @SignedPositive B.\n+     */\n+    protected class SignednessTypeHierarchy extends DefaultTypeHierarchy {\n+\n+        /**\n+         * Create a new SignednessTypeHierarchy.\n+         *\n+         * @param checker the checker\n+         * @param qualifierHierarchy the qualifier hierarchy\n+         * @param ignoreRawTypes from -AignoreRawTypes\n+         * @param invariantArrayComponents from -AinvariantArrays\n+         */\n+        public SignednessTypeHierarchy(\n+                BaseTypeChecker checker,\n+                QualifierHierarchy qualifierHierarchy,\n+                boolean ignoreRawTypes,\n+                boolean invariantArrayComponents) {\n+            super(checker, qualifierHierarchy, ignoreRawTypes, invariantArrayComponents);\n+        }\n+\n+        @Override\n+        public Boolean visitPrimitive_Primitive(\n+                AnnotatedPrimitiveType subtype, AnnotatedPrimitiveType supertype, Void p) {\n+\n+            boolean superResult = super.visitPrimitive_Primitive(subtype, supertype, p);\n+            if (superResult) {\n+                return true;\n+            }\n+\n+            PrimitiveType subPrimitive = subtype.getUnderlyingType();\n+            PrimitiveType superPrimitive = supertype.getUnderlyingType();\n+            if (isNarrowerIntegral(subPrimitive, superPrimitive)) {\n+                // AnnotationMirror subAnno = subtype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n+                AnnotationMirror superAnno = supertype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n+                if (!superAnno.equals(SIGNEDNESS_BOTTOM)) {", "originalCommit": "35ce7b42a8cb02978438b5849aaf11c8617eac39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ab3001ba665eed327936d59ac7a68761668ea8c", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java b/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\nindex c26b5d9fd1..1c1d706034 100644\n--- a/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\n+++ b/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\n\n@@ -295,9 +295,8 @@ public class SignednessAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n             PrimitiveType subPrimitive = subtype.getUnderlyingType();\n             PrimitiveType superPrimitive = supertype.getUnderlyingType();\n             if (isNarrowerIntegral(subPrimitive, superPrimitive)) {\n-                // AnnotationMirror subAnno = subtype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n                 AnnotationMirror superAnno = supertype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n-                if (!superAnno.equals(SIGNEDNESS_BOTTOM)) {\n+                if (!AnnotationUtils.areSameByName(superAnno, SIGNEDNESS_BOTTOM)) {\n                     return true;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNzI4Ng==", "url": "https://github.com/typetools/checker-framework/pull/3501#discussion_r460127286", "bodyText": "Maybe delete this?", "author": "smillst", "createdAt": "2020-07-24T15:31:19Z", "path": "checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java", "diffHunk": "@@ -239,4 +251,140 @@ public Void visitCompoundAssignment(CompoundAssignmentTree tree, AnnotatedTypeMi\n             return null;\n         }\n     }\n+\n+    @Override\n+    protected TypeHierarchy createTypeHierarchy() {\n+        return new SignednessTypeHierarchy(\n+                checker,\n+                getQualifierHierarchy(),\n+                checker.getBooleanOption(\"ignoreRawTypeArguments\", true),\n+                checker.hasOption(\"invariantArrays\"));\n+    }\n+\n+    /**\n+     * The type hierarchy for the signedness type system. If A is narrower (fewer bits) than B, then\n+     * A with any qualifier is a subtype of @SignedPositive B.\n+     */\n+    protected class SignednessTypeHierarchy extends DefaultTypeHierarchy {\n+\n+        /**\n+         * Create a new SignednessTypeHierarchy.\n+         *\n+         * @param checker the checker\n+         * @param qualifierHierarchy the qualifier hierarchy\n+         * @param ignoreRawTypes from -AignoreRawTypes\n+         * @param invariantArrayComponents from -AinvariantArrays\n+         */\n+        public SignednessTypeHierarchy(\n+                BaseTypeChecker checker,\n+                QualifierHierarchy qualifierHierarchy,\n+                boolean ignoreRawTypes,\n+                boolean invariantArrayComponents) {\n+            super(checker, qualifierHierarchy, ignoreRawTypes, invariantArrayComponents);\n+        }\n+\n+        @Override\n+        public Boolean visitPrimitive_Primitive(\n+                AnnotatedPrimitiveType subtype, AnnotatedPrimitiveType supertype, Void p) {\n+\n+            boolean superResult = super.visitPrimitive_Primitive(subtype, supertype, p);\n+            if (superResult) {\n+                return true;\n+            }\n+\n+            PrimitiveType subPrimitive = subtype.getUnderlyingType();\n+            PrimitiveType superPrimitive = supertype.getUnderlyingType();\n+            if (isNarrowerIntegral(subPrimitive, superPrimitive)) {\n+                // AnnotationMirror subAnno = subtype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);", "originalCommit": "35ce7b42a8cb02978438b5849aaf11c8617eac39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ab3001ba665eed327936d59ac7a68761668ea8c", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java b/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\nindex c26b5d9fd1..1c1d706034 100644\n--- a/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\n+++ b/checker/src/main/java/org/checkerframework/checker/signedness/SignednessAnnotatedTypeFactory.java\n\n@@ -295,9 +295,8 @@ public class SignednessAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n             PrimitiveType subPrimitive = subtype.getUnderlyingType();\n             PrimitiveType superPrimitive = supertype.getUnderlyingType();\n             if (isNarrowerIntegral(subPrimitive, superPrimitive)) {\n-                // AnnotationMirror subAnno = subtype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n                 AnnotationMirror superAnno = supertype.getAnnotationInHierarchy(UNKNOWN_SIGNEDNESS);\n-                if (!superAnno.equals(SIGNEDNESS_BOTTOM)) {\n+                if (!AnnotationUtils.areSameByName(superAnno, SIGNEDNESS_BOTTOM)) {\n                     return true;\n                 }\n             }\n"}}, {"oid": "3ab3001ba665eed327936d59ac7a68761668ea8c", "url": "https://github.com/typetools/checker-framework/commit/3ab3001ba665eed327936d59ac7a68761668ea8c", "message": "Fixes from code review", "committedDate": "2020-07-24T15:35:33Z", "type": "commit"}, {"oid": "87e3a54b22a1e72cdb18331f97e0a29dd04c08d9", "url": "https://github.com/typetools/checker-framework/commit/87e3a54b22a1e72cdb18331f97e0a29dd04c08d9", "message": "Add import statement", "committedDate": "2020-07-24T15:45:18Z", "type": "commit"}]}