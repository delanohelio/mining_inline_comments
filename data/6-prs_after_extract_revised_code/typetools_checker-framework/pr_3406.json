{"pr_number": 3406, "pr_title": "Issue#1395 : Dump on error fix", "pr_createdAt": "2020-06-27T08:11:50Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3406", "timeline": [{"oid": "97ff12d4b6dbfbfcb62d7d52815f1c90ea6900b9", "url": "https://github.com/typetools/checker-framework/commit/97ff12d4b6dbfbfcb62d7d52815f1c90ea6900b9", "message": "Fix for feature request #3313 in Aliasing Checker", "committedDate": "2020-06-11T07:53:26Z", "type": "commit"}, {"oid": "629a1a971c44ee9e2b268854f3767b91b28c2da0", "url": "https://github.com/typetools/checker-framework/commit/629a1a971c44ee9e2b268854f3767b91b28c2da0", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055.", "committedDate": "2020-06-11T07:53:26Z", "type": "commit"}, {"oid": "deab153dc6304b3dfa19741b1550f75e2c5dac75", "url": "https://github.com/typetools/checker-framework/commit/deab153dc6304b3dfa19741b1550f75e2c5dac75", "message": "Fix for Issue #1395", "committedDate": "2020-06-16T07:44:49Z", "type": "commit"}, {"oid": "c0e6deb6b56ba93c0c5cc73a00519cb8cca6dd83", "url": "https://github.com/typetools/checker-framework/commit/c0e6deb6b56ba93c0c5cc73a00519cb8cca6dd83", "message": "Fix for Issue #1395", "committedDate": "2020-06-16T07:56:58Z", "type": "commit"}, {"oid": "d1ffe78c5a849e89a710175c3c2caf0d71dd444b", "url": "https://github.com/typetools/checker-framework/commit/d1ffe78c5a849e89a710175c3c2caf0d71dd444b", "message": "Adding documentation", "committedDate": "2020-06-16T09:47:48Z", "type": "commit"}, {"oid": "11e70d3a9af6a651715a1501afd359ffbaff5f6c", "url": "https://github.com/typetools/checker-framework/commit/11e70d3a9af6a651715a1501afd359ffbaff5f6c", "message": "Adding dcumentation", "committedDate": "2020-06-16T11:48:31Z", "type": "commit"}, {"oid": "25b602a276a6d40e8510aeab62e952b6a1c2b44e", "url": "https://github.com/typetools/checker-framework/commit/25b602a276a6d40e8510aeab62e952b6a1c2b44e", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-16T11:49:22Z", "type": "commit"}, {"oid": "4719faca22d6ef010de48be3c8041598d669ebe6", "url": "https://github.com/typetools/checker-framework/commit/4719faca22d6ef010de48be3c8041598d669ebe6", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-06-16T11:57:19Z", "type": "commit"}, {"oid": "1e1ce111f342d466b19fa0e146ad89c56c92ecd9", "url": "https://github.com/typetools/checker-framework/commit/1e1ce111f342d466b19fa0e146ad89c56c92ecd9", "message": "Commiting requested changes and documentation", "committedDate": "2020-06-17T15:18:11Z", "type": "commit"}, {"oid": "eb424fd817490cc389323adf5d721d39b0ad8533", "url": "https://github.com/typetools/checker-framework/commit/eb424fd817490cc389323adf5d721d39b0ad8533", "message": "Fix for feature request #3313 in Aliasing Checker", "committedDate": "2020-06-17T16:20:58Z", "type": "commit"}, {"oid": "c3240948aa8891c016b04e627e15f0505cfaf18f", "url": "https://github.com/typetools/checker-framework/commit/c3240948aa8891c016b04e627e15f0505cfaf18f", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055.", "committedDate": "2020-06-17T16:20:58Z", "type": "commit"}, {"oid": "941cab0d71c66e682d99347b2604d104331d34b8", "url": "https://github.com/typetools/checker-framework/commit/941cab0d71c66e682d99347b2604d104331d34b8", "message": "Fix for feature request #3313 in Aliasing Checker", "committedDate": "2020-06-17T16:20:58Z", "type": "commit"}, {"oid": "d71f60820a8e44e21b9f1cc542cb798958006dc3", "url": "https://github.com/typetools/checker-framework/commit/d71f60820a8e44e21b9f1cc542cb798958006dc3", "message": "Revert \"Fix for feature request #3313 in Aliasing Checker\"\n\nThis reverts commit fd536c4de755dc1c53adbca9ad2b684e9b39a055.", "committedDate": "2020-06-17T16:20:58Z", "type": "commit"}, {"oid": "2237a0069aebeb1015ae46ccfc26b003b8d56f77", "url": "https://github.com/typetools/checker-framework/commit/2237a0069aebeb1015ae46ccfc26b003b8d56f77", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-06-17T16:24:48Z", "type": "commit"}, {"oid": "53a6c12b02f9cbde8742bf4e1f69f2139eed1b94", "url": "https://github.com/typetools/checker-framework/commit/53a6c12b02f9cbde8742bf4e1f69f2139eed1b94", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-19T16:01:19Z", "type": "commit"}, {"oid": "4bfe4454601a203c236f0940f442830f26cf0977", "url": "https://github.com/typetools/checker-framework/commit/4bfe4454601a203c236f0940f442830f26cf0977", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-26T12:35:52Z", "type": "commit"}, {"oid": "46aef3a476329d20626674e58edb9eb8819bfd39", "url": "https://github.com/typetools/checker-framework/commit/46aef3a476329d20626674e58edb9eb8819bfd39", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-06-26T12:40:30Z", "type": "commit"}, {"oid": "e5efd64b551726df922ff6ed2ef38a74ca6adbd6", "url": "https://github.com/typetools/checker-framework/commit/e5efd64b551726df922ff6ed2ef38a74ca6adbd6", "message": "Adding requested changes", "committedDate": "2020-06-26T13:01:07Z", "type": "commit"}, {"oid": "7b431cb47345898536df0a580e60f8342b3f4bc4", "url": "https://github.com/typetools/checker-framework/commit/7b431cb47345898536df0a580e60f8342b3f4bc4", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-26T15:01:27Z", "type": "commit"}, {"oid": "8f4123acf1663534eabfd226cad16d9f5c71d2e7", "url": "https://github.com/typetools/checker-framework/commit/8f4123acf1663534eabfd226cad16d9f5c71d2e7", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-27T06:16:52Z", "type": "commit"}, {"oid": "c16f886f1dbd3f020745f89d001817d0ccacb564", "url": "https://github.com/typetools/checker-framework/commit/c16f886f1dbd3f020745f89d001817d0ccacb564", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-06-27T06:18:28Z", "type": "commit"}, {"oid": "987c5604a43bf6f431c61318df693799ffabdcff", "url": "https://github.com/typetools/checker-framework/commit/987c5604a43bf6f431c61318df693799ffabdcff", "message": "Tweaks", "committedDate": "2020-07-01T14:33:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzE5Mg==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r448407192", "bodyText": "We don't want individual messages for each element. Build up one string, including line breaks, and issue one NOTE.", "author": "wmdietl", "createdAt": "2020-07-01T14:34:29Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -584,6 +586,22 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         if (messageStore != null) {\n             for (CheckerMessage msg : messageStore) {\n                 super.printOrStoreMessage(msg.kind, msg.message, msg.source, unit);\n+                printStackTrace(msg.trace);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors = getBooleanOption(\"dumpOnErrors\", false);\n+        if (dumpOnErrors) {\n+            for (StackTraceElement elem : trace) {\n+                String msg = \"\\tat \" + elem;\n+                message(Diagnostic.Kind.NOTE, msg);", "originalCommit": "987c5604a43bf6f431c61318df693799ffabdcff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7cb7634783820e7ecff5aa920828ff0169f94f0", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\nindex b7df00982..1bf4e0664 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n\n@@ -594,7 +595,7 @@ public abstract class BaseTypeChecker extends SourceChecker implements BaseTypeC\n     /**\n      * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n      *\n-     * @param trace stack trace when the checker encountered a warning/error\n+     * @param trace stack trace when the checker encounters an error\n      */\n     private void printStackTrace(StackTraceElement[] trace) {\n         boolean dumpOnErrors = getBooleanOption(\"dumpOnErrors\", false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwODUxOQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r448408519", "bodyText": "The printOrStoreMessage in this class should also handle this flag. So you might need to move the printStackTrace into this class and make it protected.", "author": "wmdietl", "createdAt": "2020-07-01T14:36:22Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -313,6 +313,10 @@\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n+    // Output stack trace when checker encounters errors\n+    // org.checkerframework.common.basetype.BaseTypeChecker.printStackTrace()\n+    \"dumpOnErrors\",", "originalCommit": "987c5604a43bf6f431c61318df693799ffabdcff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42aeb4f3566249959ed2c7fecfe5d012c57616f5", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 1e969c8b5..0c25dab08 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -314,7 +317,7 @@ import org.plumelib.util.UtilPlume;\n     \"showInferenceSteps\",\n \n     // Output stack trace when checker encounters errors\n-    // org.checkerframework.common.basetype.BaseTypeChecker.printStackTrace()\n+    // org.checkerframework.common.basetype.SourceChecker.printStackTrace()\n     \"dumpOnErrors\",\n \n     /// Visualizing the CFG\n"}}, {"oid": "f7cb7634783820e7ecff5aa920828ff0169f94f0", "url": "https://github.com/typetools/checker-framework/commit/f7cb7634783820e7ecff5aa920828ff0169f94f0", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-03T13:46:35Z", "type": "commit"}, {"oid": "8de96f814f3345441adce4db16187e649d0b2076", "url": "https://github.com/typetools/checker-framework/commit/8de96f814f3345441adce4db16187e649d0b2076", "message": "Removing multiple note messages and boolean argument", "committedDate": "2020-07-03T13:48:19Z", "type": "commit"}, {"oid": "80ac56bee18649d77da31f9730f2f94a1f72fc49", "url": "https://github.com/typetools/checker-framework/commit/80ac56bee18649d77da31f9730f2f94a1f72fc49", "message": "Merge branch '1395-dump-on-error-fix' of https://github.com/aditya3434/checker-framework into 1395-dump-on-error-fix", "committedDate": "2020-07-03T13:48:44Z", "type": "commit"}, {"oid": "d11fcf7912b488b03879dd3ee232dbe4b8548c7a", "url": "https://github.com/typetools/checker-framework/commit/d11fcf7912b488b03879dd3ee232dbe4b8548c7a", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-04T06:29:33Z", "type": "commit"}, {"oid": "c0d2ff5eccd6340dd48b39072c47f14cb492677a", "url": "https://github.com/typetools/checker-framework/commit/c0d2ff5eccd6340dd48b39072c47f14cb492677a", "message": "Modifying documentation and requested changes", "committedDate": "2020-07-04T08:50:40Z", "type": "commit"}, {"oid": "340c22d393f98147a4f95cb533f799e16f1d84e3", "url": "https://github.com/typetools/checker-framework/commit/340c22d393f98147a4f95cb533f799e16f1d84e3", "message": "Resolving merge conflicts", "committedDate": "2020-07-10T10:16:15Z", "type": "commit"}, {"oid": "c82f4b55a3fb795f6f4ad3e6cc3359567eea0391", "url": "https://github.com/typetools/checker-framework/commit/c82f4b55a3fb795f6f4ad3e6cc3359567eea0391", "message": "Resolving merge conflicts", "committedDate": "2020-07-10T10:18:26Z", "type": "commit"}, {"oid": "42aeb4f3566249959ed2c7fecfe5d012c57616f5", "url": "https://github.com/typetools/checker-framework/commit/42aeb4f3566249959ed2c7fecfe5d012c57616f5", "message": "Shifting printStackTrace method to SourceChecker.java", "committedDate": "2020-07-10T11:05:06Z", "type": "commit"}, {"oid": "e1c8ac216f6bbc31c2a8ca1b4caf551053fe159d", "url": "https://github.com/typetools/checker-framework/commit/e1c8ac216f6bbc31c2a8ca1b4caf551053fe159d", "message": "Annotating parameters", "committedDate": "2020-07-10T11:59:41Z", "type": "commit"}, {"oid": "f712249ff1c3d4eed5d44fe4d8a30e887580e3b7", "url": "https://github.com/typetools/checker-framework/commit/f712249ff1c3d4eed5d44fe4d8a30e887580e3b7", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-11T09:26:18Z", "type": "commit"}, {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d", "url": "https://github.com/typetools/checker-framework/commit/b61546280613118ff773da926b6f035a2cb6fd2d", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-17T06:02:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTMwMA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457659300", "bodyText": "Use the short message I proposed for the manual.", "author": "wmdietl", "createdAt": "2020-07-20T20:02:36Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -315,6 +316,10 @@\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n+    // Output stack trace when checker encounters errors", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTA0Mg==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457985042", "bodyText": "I have used the short message in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-21T10:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 0c25dab08..1dfb937f5 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -316,7 +318,7 @@ import org.plumelib.util.UtilPlume;\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n-    // Output stack trace when checker encounters errors\n+    // Output a stack trace when reporting errors or warnings\n     // org.checkerframework.common.basetype.SourceChecker.printStackTrace()\n     \"dumpOnErrors\",\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457661004", "bodyText": "Don't say constructor message. The same Create a new CheckerMessage. as for the other constructor is fine.", "author": "wmdietl", "createdAt": "2020-07-20T20:05:56Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -619,10 +622,29 @@ private CheckerMessage(\n                 String message,\n                 @FindDistinct Tree source,\n                 @FindDistinct BaseTypeChecker checker) {\n+            this(kind, message, source, checker, null);\n+        }\n+\n+        /**\n+         * Constructor method for checker message if stack trace needs to be stored.", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTcxNw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457661717", "bodyText": "Actually, there are no calls of the constructor without a trace, so why have two constructors?", "author": "wmdietl", "createdAt": "2020-07-20T20:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTM5OA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457985398", "bodyText": "I have updated the summary and removed the first redundant constructor from BaseTypeChecker.", "author": "aditya3434", "createdAt": "2020-07-21T10:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\nindex d3c8cd76e..607d3a1a2 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n\n@@ -612,22 +612,6 @@ public abstract class BaseTypeChecker extends SourceChecker implements BaseTypeC\n         /**\n          * Create a new CheckerMessage.\n          *\n-         * @param kind the severity of the message\n-         * @param message the text of the message\n-         * @param source the source code that the message is about\n-         * @param checker the checker that issued the message.\n-         */\n-        private CheckerMessage(\n-                Diagnostic.Kind kind,\n-                String message,\n-                @FindDistinct Tree source,\n-                @FindDistinct BaseTypeChecker checker) {\n-            this(kind, message, source, checker, null);\n-        }\n-\n-        /**\n-         * Constructor method for checker message if stack trace needs to be stored.\n-         *\n          * @param kind kind of diagnostic, for example, error or warning\n          * @param message error message that needs to be printed\n          * @param source tree element causing the error\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457662376", "bodyText": "I don't see a call of this method in this class when the dumpOnErrors flag is provided.\nIs the flag handled for a SourceChecker?", "author": "wmdietl", "createdAt": "2020-07-20T20:08:47Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MzQ0Mw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457993443", "bodyText": "The dumpOnErrors flag stores the stack trace when the Checker Framework starts to print/store the error messages. The stack trace is stored in BaseTypeChecker, because after the error messages are stored, the stack trace starts to unwind for compound checkers. This is why the printOrStoreMessage is not seen in the stack trace because it wasn't part of it when the stack trace was stored. Hence, the functions calls that print and log the errors are not visible in the stack trace, but the user can observe where the error occurred.", "author": "aditya3434", "createdAt": "2020-07-21T10:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDcwNA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458430704", "bodyText": "This is a new message in SourceChecker, but I don't see a call to it in SourceChecker.\nThere should be a call in SourceChecker as well, in case somebody directly uses/extends it.", "author": "wmdietl", "createdAt": "2020-07-21T22:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTU5Nw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r459905597", "bodyText": "I have added the method call in this function so the stack trace will be printed if someone directly calls it.", "author": "aditya3434", "createdAt": "2020-07-24T07:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 0c25dab08..1dfb937f5 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1113,11 +1118,11 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n         boolean dumpOnErrors =\n                 getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n         if (dumpOnErrors) {\n-            String msg = new String();\n+            StringBuilder msg = new StringBuilder();\n             for (StackTraceElement elem : trace) {\n-                msg = msg + \"\\tat \" + elem + \"\\n\";\n+                msg.append(\"\\tat \" + elem + \"\\n\");\n             }\n-            message(Diagnostic.Kind.NOTE, msg);\n+            message(Diagnostic.Kind.NOTE, msg.toString());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457662611", "bodyText": "Add an implementation comment why here you don't just call the other printOrStoreMessage overload.", "author": "wmdietl", "createdAt": "2020-07-20T20:09:18Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4OTg3OQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457989879", "bodyText": "We can alternatively call the other printOrStoreMessage and it wouldn't affect the output. So I don't have a particular reason for not calling the function. If you think I should call the function, I can make a commit accordingly.", "author": "aditya3434", "createdAt": "2020-07-21T10:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDkzNQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458430935", "bodyText": "I don't think that would give the same behavior, because BaseTypeChecker overrides that method and you would get two stack traces, wouldn't you?", "author": "wmdietl", "createdAt": "2020-07-21T22:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0NDY0NQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458644645", "bodyText": "I called the other function in the printOrStoreMessage method. It printed the stack trace once but didn't print the error itself. I have added an implementation comment about this behaviour in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-22T09:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 0c25dab08..1dfb937f5 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1113,11 +1118,11 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n         boolean dumpOnErrors =\n                 getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n         if (dumpOnErrors) {\n-            String msg = new String();\n+            StringBuilder msg = new StringBuilder();\n             for (StackTraceElement elem : trace) {\n-                msg = msg + \"\\tat \" + elem + \"\\n\";\n+                msg.append(\"\\tat \" + elem + \"\\n\");\n             }\n-            message(Diagnostic.Kind.NOTE, msg);\n+            message(Diagnostic.Kind.NOTE, msg.toString());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457663598", "bodyText": "Shouldn't this just be getBooleanOption(\"dumpOnErrors\")? That method already checks whether the option is given and false should be the default, shouldn't it?", "author": "wmdietl", "createdAt": "2020-07-20T20:11:17Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4ODUwNw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457988507", "bodyText": "I originally tried getBooleanOption(\"dumpOnErrors\", false), however it returns false whenever no boolean argument is given. getBooleanOption(\"dumpOnErrors\", true) works for the most part but returns true even if the dumpOnErrors option is not provided. To prevent that, I used the getOptions().containsKey(\"dumpOnErrors\") to check whether the dumpOnErrors option is given.", "author": "aditya3434", "createdAt": "2020-07-21T10:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzQ0Nw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458433447", "bodyText": "That's a bit odd, looking at \n  \n    \n      checker-framework/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n    \n    \n         Line 1589\n      in\n      3498970\n    \n    \n    \n    \n\n        \n          \n           if (value == null) { \n        \n    \n  \n\n I wouldn't expect that behavior.\nCan you investigate why this doesn't work as specified?", "author": "wmdietl", "createdAt": "2020-07-21T22:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0ODcyMQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458648721", "bodyText": "If we write dumpOnErrors without a boolean argument, the value variable in the getBooleanOption() method would be null. Hence, the function would return the default value which, if we used getBooleanOption(\"dumpOnErrors\", false) would be false. So the stack trace won't be printed if we don't give the boolean value true. If we use getBooleanOption(\"dumpOnErrors\", true), then we don't need a boolean argument to print the stack trace, however, then it would print the stack trace even if dumpOnErrors is not provided because value will be null, and it would return the default value which is true.", "author": "aditya3434", "createdAt": "2020-07-22T09:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMDEwMQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462320101", "bodyText": "Is simply hasOption(\"dumpOnErrors\") enough? Then you don't need to introduce a local variable for this.\nIn a separate PR, can you look into what getBooleanOption is doing wrong? It is hardly used, so we should discuss what the correct behavior is.", "author": "wmdietl", "createdAt": "2020-07-29T13:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjIxNQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462516215", "bodyText": "hasOption(\"dumpOnErrors\") is the same as getOptions().containtsKey(\"dumpOnErrors\"). If we give the option -AdumpOnErrors=false, hasOption(\"dumpOnErrors\") will return true. Hence, we cannot use this directly. I have replaced getOptions().containtsKey(\"dumpOnErrors\") with hasOption(\"dumpOnErrors\").", "author": "aditya3434", "createdAt": "2020-07-29T18:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 0c25dab08..1dfb937f5 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1113,11 +1118,11 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n         boolean dumpOnErrors =\n                 getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n         if (dumpOnErrors) {\n-            String msg = new String();\n+            StringBuilder msg = new StringBuilder();\n             for (StackTraceElement elem : trace) {\n-                msg = msg + \"\\tat \" + elem + \"\\n\";\n+                msg.append(\"\\tat \" + elem + \"\\n\");\n             }\n-            message(Diagnostic.Kind.NOTE, msg);\n+            message(Diagnostic.Kind.NOTE, msg.toString());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAzMg==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457665032", "bodyText": "Don't build up with just a String! In particular that initial new String() is very ugly.\nUse a StringBuilder or a StringJoiner.", "author": "wmdietl", "createdAt": "2020-07-20T20:14:04Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n+        if (dumpOnErrors) {\n+            String msg = new String();", "originalCommit": "b61546280613118ff773da926b6f035a2cb6fd2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4MjMyMg==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457982322", "bodyText": "I have used a StringBuilder to build the stack trace and print it as a note in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-21T10:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 0c25dab08..1dfb937f5 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1113,11 +1118,11 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n         boolean dumpOnErrors =\n                 getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n         if (dumpOnErrors) {\n-            String msg = new String();\n+            StringBuilder msg = new StringBuilder();\n             for (StackTraceElement elem : trace) {\n-                msg = msg + \"\\tat \" + elem + \"\\n\";\n+                msg.append(\"\\tat \" + elem + \"\\n\");\n             }\n-            message(Diagnostic.Kind.NOTE, msg);\n+            message(Diagnostic.Kind.NOTE, msg.toString());\n         }\n     }\n \n"}}, {"oid": "7d44943db5763aff7018411f94e8ca95934998f3", "url": "https://github.com/typetools/checker-framework/commit/7d44943db5763aff7018411f94e8ca95934998f3", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-21T09:57:52Z", "type": "commit"}, {"oid": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "url": "https://github.com/typetools/checker-framework/commit/3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "message": "Requested changes", "committedDate": "2020-07-21T09:58:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyOTU0OA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458429548", "bodyText": "Why is the field @Nullable? Same for the trace parameter that sets the field.\nThread.currentThread().getStackTrace() returns something non-null.", "author": "wmdietl", "createdAt": "2020-07-21T22:38:57Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */\n+        final StackTraceElement @Nullable [] trace;", "originalCommit": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0MjgyMA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458642820", "bodyText": "I think the IDE added it automatically when I initialized it. I have removed the annotation since it was, as you said, redundant.", "author": "aditya3434", "createdAt": "2020-07-22T08:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyOTU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "062a2841836b68f1424540fb996a76b65fc2b321", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\nindex 607d3a1a2..fc0bd9092 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n\n@@ -601,7 +601,7 @@ public abstract class BaseTypeChecker extends SourceChecker implements BaseTypeC\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n         /** Stores the stack trace till the point the checker encounters an error. */\n-        final StackTraceElement @Nullable [] trace;\n+        final StackTraceElement[] trace;\n \n         /**\n          * The checker that issued this message. The compound checker that depends on this checker\n"}}, {"oid": "062a2841836b68f1424540fb996a76b65fc2b321", "url": "https://github.com/typetools/checker-framework/commit/062a2841836b68f1424540fb996a76b65fc2b321", "message": "Removing @Nullable and adding implementation comment", "committedDate": "2020-07-22T08:53:28Z", "type": "commit"}, {"oid": "4ccbadb0775a5d2decbc00aa13266b97cae6125e", "url": "https://github.com/typetools/checker-framework/commit/4ccbadb0775a5d2decbc00aa13266b97cae6125e", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-22T08:55:44Z", "type": "commit"}, {"oid": "4460e8c55c6752114233accb3e0404fc35ac70b1", "url": "https://github.com/typetools/checker-framework/commit/4460e8c55c6752114233accb3e0404fc35ac70b1", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-24T07:54:04Z", "type": "commit"}, {"oid": "7f7ce236a5b83c459d28039c1437aa25195566eb", "url": "https://github.com/typetools/checker-framework/commit/7f7ce236a5b83c459d28039c1437aa25195566eb", "message": "Calling method in Source Checker", "committedDate": "2020-07-24T07:56:24Z", "type": "commit"}, {"oid": "b434c02838752959e35ba92d2690452acae617a0", "url": "https://github.com/typetools/checker-framework/commit/b434c02838752959e35ba92d2690452acae617a0", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-27T07:58:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMjg1OA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462312858", "bodyText": "This is the stack trace when it encountered an error, so this should be something like The stack trace when the message is created.\nAlso change the parameter documentation to the same.", "author": "wmdietl", "createdAt": "2020-07-29T13:49:20Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */", "originalCommit": "b434c02838752959e35ba92d2690452acae617a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMzg4Mw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462513883", "bodyText": "I have changed the field and parameter description in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-29T18:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMjg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8fafccd1537d4b3f821bdd8e884d01dc47eb752c", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\nindex fc0bd9092..211106a3e 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java\n\n@@ -600,7 +600,7 @@ public abstract class BaseTypeChecker extends SourceChecker implements BaseTypeC\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n-        /** Stores the stack trace till the point the checker encounters an error. */\n+        /** Stores the stack trace when the message is created. */\n         final StackTraceElement[] trace;\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzA5Mg==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462317092", "bodyText": "Like for other overloaded methods, start out with the normal description of what the method is for and then describe the differences.\nAlso, @see cross-references can be useful.", "author": "wmdietl", "createdAt": "2020-07-29T13:54:58Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed", "originalCommit": "b434c02838752959e35ba92d2690452acae617a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDA0MQ==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462514041", "bodyText": "I have updated the documentation in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-29T18:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8fafccd1537d4b3f821bdd8e884d01dc47eb752c", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 80e8961f4..f3b707a65 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1078,7 +1078,7 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n      *\n      * @param kind the kind of message to print\n      * @param message the message text\n-     * @param source the souce code position of the diagnostic message\n+     * @param source the source code position of the diagnostic message\n      * @param root the compilation unit\n      */\n     protected void printOrStoreMessage(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzkwOA==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462317908", "bodyText": "That comment is out-of-date - you would now create an infinite loop, so this question no longer arises.", "author": "wmdietl", "createdAt": "2020-07-29T13:56:05Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        // Not calling printOrStoreMessage(kind, message, source, root) since the error message", "originalCommit": "b434c02838752959e35ba92d2690452acae617a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDIxMw==", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462514213", "bodyText": "I have deleted the comment in my latest commit.", "author": "aditya3434", "createdAt": "2020-07-29T18:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8fafccd1537d4b3f821bdd8e884d01dc47eb752c", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 80e8961f4..f3b707a65 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -1078,7 +1078,7 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n      *\n      * @param kind the kind of message to print\n      * @param message the message text\n-     * @param source the souce code position of the diagnostic message\n+     * @param source the source code position of the diagnostic message\n      * @param root the compilation unit\n      */\n     protected void printOrStoreMessage(\n"}}, {"oid": "8fafccd1537d4b3f821bdd8e884d01dc47eb752c", "url": "https://github.com/typetools/checker-framework/commit/8fafccd1537d4b3f821bdd8e884d01dc47eb752c", "message": "Making requested changes", "committedDate": "2020-07-29T18:16:37Z", "type": "commit"}, {"oid": "004d5e8cf7bc66825082c39e3cd679e94d680ac5", "url": "https://github.com/typetools/checker-framework/commit/004d5e8cf7bc66825082c39e3cd679e94d680ac5", "message": "Merge branch 'master' into 1395-dump-on-error-fix", "committedDate": "2020-07-29T18:18:24Z", "type": "commit"}, {"oid": "ae972ffeec3907d2615ece7d38269a6731d74fb1", "url": "https://github.com/typetools/checker-framework/commit/ae972ffeec3907d2615ece7d38269a6731d74fb1", "message": "Simplify code", "committedDate": "2020-07-30T22:50:26Z", "type": "commit"}]}