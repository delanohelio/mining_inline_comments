{"pr_number": 3877, "pr_title": "Define method getDefaultValueAnnotatedType", "pr_createdAt": "2020-11-09T01:46:39Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3877", "timeline": [{"oid": "046e5d3a1b6c9555b232984e2645b4c1f6ea69d4", "url": "https://github.com/typetools/checker-framework/commit/046e5d3a1b6c9555b232984e2645b4c1f6ea69d4", "message": "Define method getDefaultValueAnnotatedType", "committedDate": "2020-11-07T20:36:30Z", "type": "commit"}, {"oid": "9ea45ca9d3957cb8f9dbbd7505f8f73590d48fcb", "url": "https://github.com/typetools/checker-framework/commit/9ea45ca9d3957cb8f9dbbd7505f8f73590d48fcb", "message": "Update expected output", "committedDate": "2020-11-08T01:48:08Z", "type": "commit"}, {"oid": "5346eb249abe4e1e30c5f214b4aee3933ae5879c", "url": "https://github.com/typetools/checker-framework/commit/5346eb249abe4e1e30c5f214b4aee3933ae5879c", "message": "Update expected output", "committedDate": "2020-11-08T14:11:54Z", "type": "commit"}, {"oid": "7d726a544d24a676a79294c56bbac8325086ad27", "url": "https://github.com/typetools/checker-framework/commit/7d726a544d24a676a79294c56bbac8325086ad27", "message": "Fix TypeTag", "committedDate": "2020-11-09T00:42:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDEwNA==", "url": "https://github.com/typetools/checker-framework/pull/3877#discussion_r520114104", "bodyText": "org.checkerframework.javacutil.trees.TreeBuilder#buildLiteral seems to build a literal tree from a given value.\nYou should be able to do something like this:\n    public static LiteralTree buildLiteral(Object value, ProcessingEnvironment env) {\n        Context context = ((JavacProcessingEnvironment) env).getContext();\n         TreeMaker maker = TreeMaker.instance(context);\n        return maker.Literal(value);\n    }\n\n(This sort of method should be in TreeUtils.)\nIn case it's not easy to figure out.  Here are the imports for the code above:\nimport com.sun.tools.javac.tree.TreeMaker;\nimport javax.annotation.processing.ProcessingEnvironment;\nimport com.sun.tools.javac.util.Context;\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;", "author": "smillst", "createdAt": "2020-11-09T20:55:12Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -2174,4 +2181,76 @@ private boolean isRelevantHelper(TypeMirror tm) {\n                 throw new BugInCF(\"isRelevantHelper(%s): Unexpected TypeKind %s\", tm, tm.getKind());\n         }\n     }\n+\n+    /**\n+     * Return the type of the default value of the given type. The default value is 0, false, or\n+     * null.\n+     *\n+     * @param typeMirror a type\n+     * @return the annotated type of {@code type}'s default value\n+     */\n+    public AnnotatedTypeMirror getDefaultValueAnnotatedType(TypeMirror typeMirror) {\n+        return getAnnotatedType(getDefaultValueTree(typeMirror));\n+    }\n+\n+    /**\n+     * Return a tree for the default value of the given type. The default value is 0, false, or\n+     * null.\n+     *\n+     * @param typeMirror a type\n+     * @return a tree for {@code type}'s default value\n+     */\n+    private static LiteralTree getDefaultValueTree(TypeMirror typeMirror) {\n+        switch (typeMirror.getKind()) {\n+            case BYTE:\n+                return createJCLiteral(TypeTag.BYTE, (byte) 0, typeMirror);\n+            case CHAR:\n+                return createJCLiteral(TypeTag.CHAR, '\\u0000', typeMirror);\n+            case SHORT:\n+                return createJCLiteral(TypeTag.SHORT, (short) 0, typeMirror);\n+            case LONG:\n+                return createJCLiteral(TypeTag.LONG, 0L, typeMirror);\n+            case FLOAT:\n+                return createJCLiteral(TypeTag.FLOAT, 0.0f, typeMirror);\n+            case INT:\n+                return createJCLiteral(TypeTag.INT, 0, typeMirror);\n+            case DOUBLE:\n+                return createJCLiteral(TypeTag.DOUBLE, 0.0d, typeMirror);\n+            case BOOLEAN:\n+                return createJCLiteral(TypeTag.BOOLEAN, false, typeMirror);\n+            default:\n+                return createJCLiteral(TypeTag.BOT, null, typeMirror);\n+        }\n+    }\n+\n+    /** The constructor for the JCLiteral class. */\n+    private static Constructor<JCLiteral> jcLiteralConstructor;\n+\n+    {\n+        try {\n+            jcLiteralConstructor =\n+                    JCLiteral.class.getDeclaredConstructor(TypeTag.class, Object.class);\n+        } catch (NoSuchElementException | NoSuchMethodException e) {\n+            throw new BugInCF(e);\n+        }\n+        jcLiteralConstructor.setAccessible(true);\n+    }\n+\n+    /**\n+     * Calls the protected JCLiteral constructor.\n+     *\n+     * @param typeTag the literal's type tag\n+     * @param value the literal's value\n+     * @param typeMirror the typeMirror for the literal\n+     * @return a JCLiteral tree for the given type tag and value\n+     */\n+    private static JCLiteral createJCLiteral(TypeTag typeTag, Object value, TypeMirror typeMirror) {", "originalCommit": "7d726a544d24a676a79294c56bbac8325086ad27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "672523fce73cf58ebda212cdd28b5254536ff721", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\nindex bcda54096..45f243036 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n\n@@ -2200,57 +2195,26 @@ public abstract class GenericAnnotatedTypeFactory<\n      * @param typeMirror a type\n      * @return a tree for {@code type}'s default value\n      */\n-    private static LiteralTree getDefaultValueTree(TypeMirror typeMirror) {\n+    private LiteralTree getDefaultValueTree(TypeMirror typeMirror) {\n         switch (typeMirror.getKind()) {\n             case BYTE:\n-                return createJCLiteral(TypeTag.BYTE, (byte) 0, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.BYTE, (byte) 0, typeMirror, processingEnv);\n             case CHAR:\n-                return createJCLiteral(TypeTag.CHAR, '\\u0000', typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.CHAR, '\\u0000', typeMirror, processingEnv);\n             case SHORT:\n-                return createJCLiteral(TypeTag.SHORT, (short) 0, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.SHORT, (short) 0, typeMirror, processingEnv);\n             case LONG:\n-                return createJCLiteral(TypeTag.LONG, 0L, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.LONG, 0L, typeMirror, processingEnv);\n             case FLOAT:\n-                return createJCLiteral(TypeTag.FLOAT, 0.0f, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.FLOAT, 0.0f, typeMirror, processingEnv);\n             case INT:\n-                return createJCLiteral(TypeTag.INT, 0, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.INT, 0, typeMirror, processingEnv);\n             case DOUBLE:\n-                return createJCLiteral(TypeTag.DOUBLE, 0.0d, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.DOUBLE, 0.0d, typeMirror, processingEnv);\n             case BOOLEAN:\n-                return createJCLiteral(TypeTag.BOOLEAN, false, typeMirror);\n+                return TreeUtils.createLiteral(TypeTag.BOOLEAN, false, typeMirror, processingEnv);\n             default:\n-                return createJCLiteral(TypeTag.BOT, null, typeMirror);\n-        }\n-    }\n-\n-    /** The constructor for the JCLiteral class. */\n-    private static Constructor<JCLiteral> jcLiteralConstructor;\n-\n-    {\n-        try {\n-            jcLiteralConstructor =\n-                    JCLiteral.class.getDeclaredConstructor(TypeTag.class, Object.class);\n-        } catch (NoSuchElementException | NoSuchMethodException e) {\n-            throw new BugInCF(e);\n-        }\n-        jcLiteralConstructor.setAccessible(true);\n-    }\n-\n-    /**\n-     * Calls the protected JCLiteral constructor.\n-     *\n-     * @param typeTag the literal's type tag\n-     * @param value the literal's value\n-     * @param typeMirror the typeMirror for the literal\n-     * @return a JCLiteral tree for the given type tag and value\n-     */\n-    private static JCLiteral createJCLiteral(TypeTag typeTag, Object value, TypeMirror typeMirror) {\n-        try {\n-            JCLiteral result = jcLiteralConstructor.newInstance(typeTag, value);\n-            result.type = (Type) typeMirror;\n-            return result;\n-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n-            throw new BugInCF(e);\n+                return TreeUtils.createLiteral(TypeTag.BOT, null, typeMirror, processingEnv);\n         }\n     }\n }\n"}}, {"oid": "672523fce73cf58ebda212cdd28b5254536ff721", "url": "https://github.com/typetools/checker-framework/commit/672523fce73cf58ebda212cdd28b5254536ff721", "message": "Define method TreeUtils.createLiteral", "committedDate": "2020-11-09T22:43:17Z", "type": "commit"}, {"oid": "130e789c3a1cfc28b44ae431a8aed4445f4748be", "url": "https://github.com/typetools/checker-framework/commit/130e789c3a1cfc28b44ae431a8aed4445f4748be", "message": "Merge ../checker-framework-branch-master into getDefaultValueAnnotatedType", "committedDate": "2020-11-09T22:49:49Z", "type": "commit"}, {"oid": "c7102ffe700075909e9700d9e074d12494d2c585", "url": "https://github.com/typetools/checker-framework/commit/c7102ffe700075909e9700d9e074d12494d2c585", "message": "Revert expected warnings", "committedDate": "2020-11-09T22:52:02Z", "type": "commit"}, {"oid": "6bcca8cbc67a865485a9bbe07acec1ec58511a46", "url": "https://github.com/typetools/checker-framework/commit/6bcca8cbc67a865485a9bbe07acec1ec58511a46", "message": "Add TODO", "committedDate": "2020-11-09T22:52:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NzQ2OQ==", "url": "https://github.com/typetools/checker-framework/pull/3877#discussion_r520187469", "bodyText": "maker.Literal(TypeTag.BOT, null) should be  maker.Literal(typeTag, value), right?  Why doesn't maker.Literal(typeTag, value) work? I don't think there are any test for this, so I can't check myself.", "author": "smillst", "createdAt": "2020-11-09T23:31:00Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1641,4 +1644,25 @@ public static boolean isWideningBinary(BinaryTree node) {\n             }\n         }\n     }\n+\n+    /**\n+     * Creates a LiteralTree for the given value.\n+     *\n+     * @param typeTag the literal's type tag\n+     * @param value a wrapped primitive, null, or a String\n+     * @param typeMirror the typeMirror for the literal\n+     * @param processingEnv the processing environment\n+     * @return a LiteralTree for the given type tag and value\n+     */\n+    public static LiteralTree createLiteral(\n+            TypeTag typeTag,\n+            Object value,\n+            TypeMirror typeMirror,\n+            ProcessingEnvironment processingEnv) {\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        TreeMaker maker = TreeMaker.instance(context);\n+        LiteralTree result = maker.Literal(TypeTag.BOT, null);", "originalCommit": "6bcca8cbc67a865485a9bbe07acec1ec58511a46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d56081d823842f09c698f20551f77f68d85da", "chunk": "diff --git a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\nindex b97ee6597..4554d14bb 100644\n--- a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n+++ b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n\n@@ -1661,7 +1661,7 @@ public final class TreeUtils {\n             ProcessingEnvironment processingEnv) {\n         Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n         TreeMaker maker = TreeMaker.instance(context);\n-        LiteralTree result = maker.Literal(TypeTag.BOT, null);\n+        LiteralTree result = maker.Literal(typeTag, null);\n         ((JCLiteral) result).type = (Type) typeMirror;\n         return result;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NzkxOQ==", "url": "https://github.com/typetools/checker-framework/pull/3877#discussion_r520187919", "bodyText": "This should be in TreeUtils because it imports a class from outside the support complier API, (com.sun.tools.javac.code.TypeTag).", "author": "smillst", "createdAt": "2020-11-09T23:32:14Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -2198,4 +2200,46 @@ private boolean isRelevantHelper(TypeMirror tm) {\n                 throw new BugInCF(\"isRelevantHelper(%s): Unexpected TypeKind %s\", tm, tm.getKind());\n         }\n     }\n+\n+    /**\n+     * Return the type of the default value of the given type. The default value is 0, false, or\n+     * null.\n+     *\n+     * @param typeMirror a type\n+     * @return the annotated type of {@code type}'s default value\n+     */\n+    // TODO: Cache results to avoid recomputation.\n+    public AnnotatedTypeMirror getDefaultValueAnnotatedType(TypeMirror typeMirror) {\n+        return getAnnotatedType(getDefaultValueTree(typeMirror));\n+    }\n+\n+    /**\n+     * Return a tree for the default value of the given type. The default value is 0, false, or\n+     * null.\n+     *\n+     * @param typeMirror a type\n+     * @return a tree for {@code type}'s default value\n+     */\n+    private LiteralTree getDefaultValueTree(TypeMirror typeMirror) {", "originalCommit": "6bcca8cbc67a865485a9bbe07acec1ec58511a46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32174b41c6ddd7e97e9def9e6582f936a5563a4c", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\nindex 701cca6de..3edeceae1 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java\n\n@@ -2210,36 +2208,6 @@ public abstract class GenericAnnotatedTypeFactory<\n      */\n     // TODO: Cache results to avoid recomputation.\n     public AnnotatedTypeMirror getDefaultValueAnnotatedType(TypeMirror typeMirror) {\n-        return getAnnotatedType(getDefaultValueTree(typeMirror));\n-    }\n-\n-    /**\n-     * Return a tree for the default value of the given type. The default value is 0, false, or\n-     * null.\n-     *\n-     * @param typeMirror a type\n-     * @return a tree for {@code type}'s default value\n-     */\n-    private LiteralTree getDefaultValueTree(TypeMirror typeMirror) {\n-        switch (typeMirror.getKind()) {\n-            case BYTE:\n-                return TreeUtils.createLiteral(TypeTag.BYTE, (byte) 0, typeMirror, processingEnv);\n-            case CHAR:\n-                return TreeUtils.createLiteral(TypeTag.CHAR, '\\u0000', typeMirror, processingEnv);\n-            case SHORT:\n-                return TreeUtils.createLiteral(TypeTag.SHORT, (short) 0, typeMirror, processingEnv);\n-            case LONG:\n-                return TreeUtils.createLiteral(TypeTag.LONG, 0L, typeMirror, processingEnv);\n-            case FLOAT:\n-                return TreeUtils.createLiteral(TypeTag.FLOAT, 0.0f, typeMirror, processingEnv);\n-            case INT:\n-                return TreeUtils.createLiteral(TypeTag.INT, 0, typeMirror, processingEnv);\n-            case DOUBLE:\n-                return TreeUtils.createLiteral(TypeTag.DOUBLE, 0.0d, typeMirror, processingEnv);\n-            case BOOLEAN:\n-                return TreeUtils.createLiteral(TypeTag.BOOLEAN, false, typeMirror, processingEnv);\n-            default:\n-                return TreeUtils.createLiteral(TypeTag.BOT, null, typeMirror, processingEnv);\n-        }\n+        return getAnnotatedType(TreeUtils.getDefaultValueTree(typeMirror, processingEnv));\n     }\n }\n"}}, {"oid": "e30d56081d823842f09c698f20551f77f68d85da", "url": "https://github.com/typetools/checker-framework/commit/e30d56081d823842f09c698f20551f77f68d85da", "message": "Fix typo", "committedDate": "2020-11-09T23:43:36Z", "type": "commit"}, {"oid": "32174b41c6ddd7e97e9def9e6582f936a5563a4c", "url": "https://github.com/typetools/checker-framework/commit/32174b41c6ddd7e97e9def9e6582f936a5563a4c", "message": "Move method, also fix a dumb bug", "committedDate": "2020-11-09T23:47:40Z", "type": "commit"}, {"oid": "f1d18358308224e4c358646f4338267c23f8a0df", "url": "https://github.com/typetools/checker-framework/commit/f1d18358308224e4c358646f4338267c23f8a0df", "message": "Add type annotation", "committedDate": "2020-11-10T01:05:53Z", "type": "commit"}]}