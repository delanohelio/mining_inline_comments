{"pr_number": 3333, "pr_title": "Treat `MyClass.class.getCanonicalName()` as non-null", "pr_createdAt": "2020-05-27T16:02:18Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3333", "timeline": [{"oid": "e834a37ff46b97b12e203aac9620771f6d4c932a", "url": "https://github.com/typetools/checker-framework/commit/e834a37ff46b97b12e203aac9620771f6d4c932a", "message": "`MyClass.class.getCanonicalName()` is non-null", "committedDate": "2020-05-27T16:00:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NjcxMg==", "url": "https://github.com/typetools/checker-framework/pull/3333#discussion_r431266712", "bodyText": "You can use org.checkerframework.javacutil.TreeUtils#isClassLiteral here.", "author": "smillst", "createdAt": "2020-05-27T16:11:18Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "diffHunk": "@@ -300,8 +309,22 @@ public ParameterizedExecutableType methodFromUse(MethodInvocationTree tree) {\n         ParameterizedExecutableType mType = super.methodFromUse(tree);\n         AnnotatedExecutableType method = mType.executableType;\n \n+        // Special cases for method invocations with specific arguments.\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n+        // `MyClass.class.getCanonicalName()` is non-null.\n+        System.out.printf(\"tree: %s%n\", tree);\n+        if (TreeUtils.isMethodInvocation(tree, classGetCanonicalName, processingEnv)) {\n+            System.out.printf(\"is invocation%n\");\n+            ExpressionTree receiver = ((MemberSelectTree) tree.getMethodSelect()).getExpression();\n+            System.out.printf(\"receiver: %s%n\", receiver);\n+            if ((receiver instanceof MemberSelectTree)", "originalCommit": "e834a37ff46b97b12e203aac9620771f6d4c932a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8974a46a646205c5f8de65156b0835abdd538c6d", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\nindex c7fa6a21c1..df740bc727 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\n\n@@ -313,13 +313,9 @@ public class NullnessAnnotatedTypeFactory\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n         // `MyClass.class.getCanonicalName()` is non-null.\n-        System.out.printf(\"tree: %s%n\", tree);\n         if (TreeUtils.isMethodInvocation(tree, classGetCanonicalName, processingEnv)) {\n-            System.out.printf(\"is invocation%n\");\n             ExpressionTree receiver = ((MemberSelectTree) tree.getMethodSelect()).getExpression();\n-            System.out.printf(\"receiver: %s%n\", receiver);\n-            if ((receiver instanceof MemberSelectTree)\n-                    && ((MemberSelectTree) receiver).getIdentifier().contentEquals(\"class\")) {\n+            if (TreeUtils.isClassLiteral(receiver)) {\n                 AnnotatedTypeMirror type = method.getReturnType();\n                 type.replaceAnnotation(NONNULL);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njc0Nw==", "url": "https://github.com/typetools/checker-framework/pull/3333#discussion_r431266747", "bodyText": "The printf's should be removed.", "author": "smillst", "createdAt": "2020-05-27T16:11:20Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java", "diffHunk": "@@ -300,8 +309,22 @@ public ParameterizedExecutableType methodFromUse(MethodInvocationTree tree) {\n         ParameterizedExecutableType mType = super.methodFromUse(tree);\n         AnnotatedExecutableType method = mType.executableType;\n \n+        // Special cases for method invocations with specific arguments.\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n+        // `MyClass.class.getCanonicalName()` is non-null.\n+        System.out.printf(\"tree: %s%n\", tree);", "originalCommit": "e834a37ff46b97b12e203aac9620771f6d4c932a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8974a46a646205c5f8de65156b0835abdd538c6d", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\nindex c7fa6a21c1..df740bc727 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessAnnotatedTypeFactory.java\n\n@@ -313,13 +313,9 @@ public class NullnessAnnotatedTypeFactory\n         systemGetPropertyHandler.handle(tree, method);\n         collectionToArrayHeuristics.handle(tree, method);\n         // `MyClass.class.getCanonicalName()` is non-null.\n-        System.out.printf(\"tree: %s%n\", tree);\n         if (TreeUtils.isMethodInvocation(tree, classGetCanonicalName, processingEnv)) {\n-            System.out.printf(\"is invocation%n\");\n             ExpressionTree receiver = ((MemberSelectTree) tree.getMethodSelect()).getExpression();\n-            System.out.printf(\"receiver: %s%n\", receiver);\n-            if ((receiver instanceof MemberSelectTree)\n-                    && ((MemberSelectTree) receiver).getIdentifier().contentEquals(\"class\")) {\n+            if (TreeUtils.isClassLiteral(receiver)) {\n                 AnnotatedTypeMirror type = method.getReturnType();\n                 type.replaceAnnotation(NONNULL);\n             }\n"}}, {"oid": "8974a46a646205c5f8de65156b0835abdd538c6d", "url": "https://github.com/typetools/checker-framework/commit/8974a46a646205c5f8de65156b0835abdd538c6d", "message": "Use TreeUtils.isClassLiteral", "committedDate": "2020-05-27T16:17:49Z", "type": "commit"}]}