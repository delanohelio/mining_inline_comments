{"pr_number": 3755, "pr_title": "Warn about nullness annotations on outer class scoping constructs", "pr_createdAt": "2020-10-09T02:48:15Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3755", "timeline": [{"oid": "a63fed8d175c4623c06d104f3505850e834fabed", "url": "https://github.com/typetools/checker-framework/commit/a63fed8d175c4623c06d104f3505850e834fabed", "message": "Test case for warnings about scoping constructs", "committedDate": "2020-10-03T19:05:16Z", "type": "commit"}, {"oid": "9a5b091633352d48f60189ad0007649290c1d681", "url": "https://github.com/typetools/checker-framework/commit/9a5b091633352d48f60189ad0007649290c1d681", "message": "A tutorial is out of date", "committedDate": "2020-10-08T01:12:58Z", "type": "commit"}, {"oid": "c5b96445094f9fce2bda0ff68cb9e65918d56bf1", "url": "https://github.com/typetools/checker-framework/commit/c5b96445094f9fce2bda0ff68cb9e65918d56bf1", "message": "Merge ../checker-framework-branch-master into scoping-construct", "committedDate": "2020-10-08T01:13:06Z", "type": "commit"}, {"oid": "b0f31c540ec8de0ec7959ac0d1071bb7f36176ef", "url": "https://github.com/typetools/checker-framework/commit/b0f31c540ec8de0ec7959ac0d1071bb7f36176ef", "message": "Javadoc fixes", "committedDate": "2020-10-08T04:06:24Z", "type": "commit"}, {"oid": "73578ded669b84537927fe13d8f17c5a324e4c9d", "url": "https://github.com/typetools/checker-framework/commit/73578ded669b84537927fe13d8f17c5a324e4c9d", "message": "Abstract out override of visitAnnotatedType", "committedDate": "2020-10-08T04:15:17Z", "type": "commit"}, {"oid": "e3d89116af6a6eb09197a2ffee501e48de7d9165", "url": "https://github.com/typetools/checker-framework/commit/e3d89116af6a6eb09197a2ffee501e48de7d9165", "message": "Merge ../checker-framework-branch-master into visitAnnotatedType", "committedDate": "2020-10-08T04:17:19Z", "type": "commit"}, {"oid": "d049f3c65f9f267b66dc320b8c1e85a2f387b76f", "url": "https://github.com/typetools/checker-framework/commit/d049f3c65f9f267b66dc320b8c1e85a2f387b76f", "message": "Checkpoint", "committedDate": "2020-10-08T04:17:43Z", "type": "commit"}, {"oid": "b56bcea52c81794a194d1513e646cc1b8a1a33e5", "url": "https://github.com/typetools/checker-framework/commit/b56bcea52c81794a194d1513e646cc1b8a1a33e5", "message": "Merge ../checker-framework-branch-master into scoping-construct", "committedDate": "2020-10-08T04:18:03Z", "type": "commit"}, {"oid": "66e06f7b581b8097f4809abe3e8a1bdb4877a361", "url": "https://github.com/typetools/checker-framework/commit/66e06f7b581b8097f4809abe3e8a1bdb4877a361", "message": "Merge ../checker-framework-fork-mernst-branch-scoping-construct into visitAnnotatedType", "committedDate": "2020-10-08T04:18:50Z", "type": "commit"}, {"oid": "7adabe3649dd18b2f0bd75136a5b911920a029d0", "url": "https://github.com/typetools/checker-framework/commit/7adabe3649dd18b2f0bd75136a5b911920a029d0", "message": "Checkpoint", "committedDate": "2020-10-08T04:24:22Z", "type": "commit"}, {"oid": "e48593616165ae5aabfb9921b765939e2f5a1d78", "url": "https://github.com/typetools/checker-framework/commit/e48593616165ae5aabfb9921b765939e2f5a1d78", "message": "Remove unrelated code", "committedDate": "2020-10-08T04:27:02Z", "type": "commit"}, {"oid": "9cb45d96b0b178f1cab94ff2622cfa0124016a38", "url": "https://github.com/typetools/checker-framework/commit/9cb45d96b0b178f1cab94ff2622cfa0124016a38", "message": "Remove comment", "committedDate": "2020-10-08T04:27:17Z", "type": "commit"}, {"oid": "235e1867fb611ec617e2badfbf11e1c410a79bf9", "url": "https://github.com/typetools/checker-framework/commit/235e1867fb611ec617e2badfbf11e1c410a79bf9", "message": "Remove comment", "committedDate": "2020-10-08T04:29:08Z", "type": "commit"}, {"oid": "fcc4b5d74f558d7c4bef026dcfc02275891e8156", "url": "https://github.com/typetools/checker-framework/commit/fcc4b5d74f558d7c4bef026dcfc02275891e8156", "message": "Merge ../checker-framework-fork-mernst-branch-visitAnnotatedType into scoping-construct", "committedDate": "2020-10-08T04:29:14Z", "type": "commit"}, {"oid": "80609f0dfc5ab4d61f69d08d2d220b6b9c5ffccc", "url": "https://github.com/typetools/checker-framework/commit/80609f0dfc5ab4d61f69d08d2d220b6b9c5ffccc", "message": "Change interface of visitAnnotatedType", "committedDate": "2020-10-08T15:31:34Z", "type": "commit"}, {"oid": "9de6c266b093ed50207bbd207dc6a17628de97c7", "url": "https://github.com/typetools/checker-framework/commit/9de6c266b093ed50207bbd207dc6a17628de97c7", "message": "Updates", "committedDate": "2020-10-08T15:41:22Z", "type": "commit"}, {"oid": "f2a69605e7dcbfc18e643d2e0611b563a8484e13", "url": "https://github.com/typetools/checker-framework/commit/f2a69605e7dcbfc18e643d2e0611b563a8484e13", "message": "Fix signature", "committedDate": "2020-10-08T21:01:42Z", "type": "commit"}, {"oid": "8e67695f24d9ff88ec36a2efe1fe65fbc998d242", "url": "https://github.com/typetools/checker-framework/commit/8e67695f24d9ff88ec36a2efe1fe65fbc998d242", "message": "Merge ../checker-framework-fork-mernst-branch-visitAnnotatedType into scoping-construct", "committedDate": "2020-10-08T21:07:11Z", "type": "commit"}, {"oid": "b848df7ed264e58d7f37055b78c407bd82aba5d0", "url": "https://github.com/typetools/checker-framework/commit/b848df7ed264e58d7f37055b78c407bd82aba5d0", "message": "Fix body", "committedDate": "2020-10-08T21:11:34Z", "type": "commit"}, {"oid": "14322a256c7957872e9bb13d9476ac82784f15cc", "url": "https://github.com/typetools/checker-framework/commit/14322a256c7957872e9bb13d9476ac82784f15cc", "message": "Whitespace change", "committedDate": "2020-10-08T21:12:05Z", "type": "commit"}, {"oid": "ea97bd35e4cd560530d535c7f79a8d535f10dc0c", "url": "https://github.com/typetools/checker-framework/commit/ea97bd35e4cd560530d535c7f79a8d535f10dc0c", "message": "Merge ../checker-framework-fork-mernst-branch-visitAnnotatedType into scoping-construct", "committedDate": "2020-10-08T21:12:57Z", "type": "commit"}, {"oid": "2b19e4f161cf60a8f48bfa437e9877fcf6e10f5e", "url": "https://github.com/typetools/checker-framework/commit/2b19e4f161cf60a8f48bfa437e9877fcf6e10f5e", "message": "Merge ../checker-framework-branch-master into visitAnnotatedType", "committedDate": "2020-10-08T21:20:03Z", "type": "commit"}, {"oid": "ade140acac0e7c3b586034f9bf88c387541210db", "url": "https://github.com/typetools/checker-framework/commit/ade140acac0e7c3b586034f9bf88c387541210db", "message": "Merge ../checker-framework-fork-mernst-branch-visitAnnotatedType into scoping-construct", "committedDate": "2020-10-08T21:20:09Z", "type": "commit"}, {"oid": "faf2600fdc4f935467fdb1de34750b1f6f38cae2", "url": "https://github.com/typetools/checker-framework/commit/faf2600fdc4f935467fdb1de34750b1f6f38cae2", "message": "Issue warnings about nullness annotations on scoping constructs", "committedDate": "2020-10-08T21:44:17Z", "type": "commit"}, {"oid": "8e2fd9616ab41599034f1f6473e2f876e54cea67", "url": "https://github.com/typetools/checker-framework/commit/8e2fd9616ab41599034f1f6473e2f876e54cea67", "message": "More fixes", "committedDate": "2020-10-08T21:53:10Z", "type": "commit"}, {"oid": "c8763ca86c23e2ccb2546db75af4fbe2888a6d29", "url": "https://github.com/typetools/checker-framework/commit/c8763ca86c23e2ccb2546db75af4fbe2888a6d29", "message": "Javadoc fix", "committedDate": "2020-10-08T22:09:58Z", "type": "commit"}, {"oid": "77897561584f94ea54018488d9a6371cc7d94e60", "url": "https://github.com/typetools/checker-framework/commit/77897561584f94ea54018488d9a6371cc7d94e60", "message": "Add a case", "committedDate": "2020-10-08T22:18:28Z", "type": "commit"}, {"oid": "7df7620e495ddd8ac98175c962d6082b229bf825", "url": "https://github.com/typetools/checker-framework/commit/7df7620e495ddd8ac98175c962d6082b229bf825", "message": "Merge ../checker-framework-fork-mernst-branch-visitAnnotatedType into scoping-construct", "committedDate": "2020-10-09T00:49:38Z", "type": "commit"}, {"oid": "1ac42a6ce603b57f7ca86ab76b463a3eb3319b7e", "url": "https://github.com/typetools/checker-framework/commit/1ac42a6ce603b57f7ca86ab76b463a3eb3319b7e", "message": "Merge ../checker-framework-branch-master into scoping-construct", "committedDate": "2020-10-09T00:55:45Z", "type": "commit"}, {"oid": "8690e7bd518d3ef77eb04b59889a14dc402ee042", "url": "https://github.com/typetools/checker-framework/commit/8690e7bd518d3ef77eb04b59889a14dc402ee042", "message": "Fix call", "committedDate": "2020-10-09T01:49:33Z", "type": "commit"}, {"oid": "8e185ea3b0b227952e6adb4065152522ec172a91", "url": "https://github.com/typetools/checker-framework/commit/8e185ea3b0b227952e6adb4065152522ec172a91", "message": "Improve logic in visitAnnotatedType", "committedDate": "2020-10-09T02:15:54Z", "type": "commit"}, {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "url": "https://github.com/typetools/checker-framework/commit/3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "message": "Move methods to TreeUtils", "committedDate": "2020-10-09T02:26:12Z", "type": "commit"}, {"oid": "a27cebab67e3cb1cfe22daffc735fc0e4d6e0c35", "url": "https://github.com/typetools/checker-framework/commit/a27cebab67e3cb1cfe22daffc735fc0e4d6e0c35", "message": "nullness.on.outer isn't issued on arrays.", "committedDate": "2020-10-09T18:19:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3ODE0OA==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502578148", "bodyText": "The should be called leftmostTypeTree.", "author": "smillst", "createdAt": "2020-10-09T17:35:03Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,68 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos a list of annotations on a variable/method declaration; null if this type is\n+     *     not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotations(\n+            List<? extends AnnotationTree> declAnnos, Tree typeTree) {\n+        while (true) {\n+            switch (typeTree.getKind()) {\n+                case IDENTIFIER:\n+                case PRIMITIVE_TYPE:\n+                    if (declAnnos == null) {\n+                        return Collections.emptyList();\n+                    }\n+                    return declAnnos;\n+                case ANNOTATED_TYPE:\n+                    return ((AnnotatedTypeTree) typeTree).getAnnotations();\n+                case MEMBER_SELECT:\n+                    if (declAnnos == null) {\n+                        return Collections.emptyList();\n+                    }\n+                    typeTree = ((MemberSelectTree) typeTree).getExpression();\n+                    break;\n+                case PARAMETERIZED_TYPE:\n+                    typeTree = ((ParameterizedTypeTree) typeTree).getType();\n+                    break;\n+                default:\n+                    throw new BugInCF(\n+                            \"what typeTree? %s %s %s\",\n+                            typeTree.getKind(), typeTree.getClass(), typeTree);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the leftmost type component of the argument. This is the type component that a type\n+     * annotation would apply to, if written on a declaration of a variable of the given type.\n+     *\n+     * @param typeTree a type\n+     * @return the leftmost type component of the argument\n+     */\n+    public static Tree leftmostType(Tree typeTree) {", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\nindex 0c1d84ac6d..0ca5e380bc 100644\n--- a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n+++ b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n\n@@ -1549,7 +1549,7 @@ public final class TreeUtils {\n      * @param typeTree the type whose annotations to return\n      * @return the annotations explicitly written on the given type.\n      */\n-    public static List<? extends AnnotationTree> getExplicitAnnotations(\n+    public static List<? extends AnnotationTree> getExplicitAnnotationTrees(\n             List<? extends AnnotationTree> declAnnos, Tree typeTree) {\n         while (true) {\n             switch (typeTree.getKind()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3OTE5Nw==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502579197", "bodyText": "This should be getExplicitAnnotatonTrees.   Also, typeTree can't be any type tree.  For example, ArrayTrees can't be passed.  The documentation should be explicit about what trees may be passed. (And/or maybe just make it a private method in the class that uses it. Since it doesn't take all TypeTrees, I'm not sure it is of general use.)", "author": "smillst", "createdAt": "2020-10-09T17:37:16Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,68 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos a list of annotations on a variable/method declaration; null if this type is\n+     *     not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotations(", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\nindex 0c1d84ac6d..0ca5e380bc 100644\n--- a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n+++ b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n\n@@ -1549,7 +1549,7 @@ public final class TreeUtils {\n      * @param typeTree the type whose annotations to return\n      * @return the annotations explicitly written on the given type.\n      */\n-    public static List<? extends AnnotationTree> getExplicitAnnotations(\n+    public static List<? extends AnnotationTree> getExplicitAnnotationTrees(\n             List<? extends AnnotationTree> declAnnos, Tree typeTree) {\n         while (true) {\n             switch (typeTree.getKind()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MDIxMQ==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502580211", "bodyText": "Why not just make this a void method?", "author": "smillst", "createdAt": "2020-10-09T17:39:09Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this\n+     *     type is from one; null otherwise\n+     * @param typeTree the type that the annotations apply to\n+     * @param node where to report errors/warnings\n+     * @return nothing\n+     */\n+    public Void visitAnnotatedType(", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\nindex 8f78cc0fe5..d02cea6163 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n\n@@ -2265,6 +2265,11 @@ public class BaseTypeVisitor<Factory extends GenericAnnotatedTypeFactory<?, ?, ?\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * It is often easier to override {@link visitAnnotatedType(List,Tree,Tree)}, which also handles\n+     * the case of annotations at the beginning of a variable declaration that javac parses as being\n+     * on the variable declaration rather than on the type.\n+     */\n     @Override\n     public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n         visitAnnotatedType(null, node, node);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502581176", "bodyText": "These aren't declaration annotations; they are the annotation trees stored as modifiers of a variable.", "author": "smillst", "createdAt": "2020-10-09T17:41:03Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0ODczMg==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502748732", "bodyText": "Can you be explicit about what change you are suggesting?  I can't tell from your comment.\nI agree they are not declaration annotations; they are annotations stored in the declaration location.  I used declAnnos for that concept.  Are you asking for a different variable name, and if so what name do you suggest?\nI don't agree with your suggestion to change \"variable declaration\" to \"variable\".  Strictly speaking, they are not stored as modifiers of a variable, but as modifiers of a variable declaration (which is represented as a VariableTree).", "author": "mernst", "createdAt": "2020-10-10T05:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMDA1NQ==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503400055", "bodyText": "When I see declAnnos, I think thats a collection/set of AnnotationMirrors that are declaration annotations, as in annotation without @Target(ElementType.TYPE_USE).  I would change declAnnos to annoTrees.  Also, the annotations could be declarations annotations or type annotations, so I would change the user-written type annotations to just the user-written annotations.", "author": "smillst", "createdAt": "2020-10-12T16:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\nindex 8f78cc0fe5..d02cea6163 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n\n@@ -2265,6 +2265,11 @@ public class BaseTypeVisitor<Factory extends GenericAnnotatedTypeFactory<?, ?, ?\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * It is often easier to override {@link visitAnnotatedType(List,Tree,Tree)}, which also handles\n+     * the case of annotations at the beginning of a variable declaration that javac parses as being\n+     * on the variable declaration rather than on the type.\n+     */\n     @Override\n     public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n         visitAnnotatedType(null, node, node);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjAwMA==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502582000", "bodyText": "The Javadoc here should mention #visitAnnotatedType(List<? extends AnnotationTree>, Tree, Tree).", "author": "smillst", "createdAt": "2020-10-09T17:42:48Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\nindex 8f78cc0fe5..d02cea6163 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n\n@@ -2265,6 +2265,11 @@ public class BaseTypeVisitor<Factory extends GenericAnnotatedTypeFactory<?, ?, ?\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * It is often easier to override {@link visitAnnotatedType(List,Tree,Tree)}, which also handles\n+     * the case of annotations at the beginning of a variable declaration that javac parses as being\n+     * on the variable declaration rather than on the type.\n+     */\n     @Override\n     public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n         visitAnnotatedType(null, node, node);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjQ2Mg==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502582462", "bodyText": "I don't understand why ArrayTypes are treated differently.", "author": "smillst", "createdAt": "2020-10-09T17:43:46Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -1156,6 +1158,12 @@ public Void visitTypeParameter(TypeParameterTree node, Void p) {\n     public Void visitVariable(VariableTree node, Void p) {\n         warnAboutTypeAnnotationsTooEarly(node, node.getModifiers());\n \n+        Tree typeTree = node.getType();\n+        while (typeTree.getKind() == Tree.Kind.ARRAY_TYPE) {", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea772c54737466434e272b0ede93577fc9d8b2d8", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\nindex 8f78cc0fe5..73c1731259 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n\n@@ -1158,11 +1161,7 @@ public class BaseTypeVisitor<Factory extends GenericAnnotatedTypeFactory<?, ?, ?\n     public Void visitVariable(VariableTree node, Void p) {\n         warnAboutTypeAnnotationsTooEarly(node, node.getModifiers());\n \n-        Tree typeTree = node.getType();\n-        while (typeTree.getKind() == Tree.Kind.ARRAY_TYPE) {\n-            typeTree = ((ArrayTypeTree) typeTree).getType();\n-        }\n-        visitAnnotatedType(node.getModifiers().getAnnotations(), typeTree, node);\n+        visitAnnotatedType(node.getModifiers().getAnnotations(), node.getType());\n \n         Pair<Tree, AnnotatedTypeMirror> preAssignmentContext = visitorState.getAssignmentContext();\n         AnnotatedTypeMirror variableType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTcxMQ==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502589711", "bodyText": "This is an unannotatedTypeTree.", "author": "smillst", "createdAt": "2020-10-09T17:58:42Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "diffHunk": "@@ -663,42 +667,48 @@ public Void visitAnnotation(AnnotationTree node, Void p) {\n         return null;\n     }\n \n-    // This is needed in addition to visitAnnotatedType because there isn't an AnnotatedTypeTree\n-    // within a variable declaration -- all the annotations are attached to the VariableTree.\n     @Override\n-    public Void visitVariable(VariableTree node, Void p) {\n-        TypeMirror tm = TreeUtils.typeOf(node.getType());\n-        if (TypesUtils.isPrimitive(tm)) {\n-            if (atypeFactory.containsNullnessAnnotation(node.getModifiers().getAnnotations())) {\n+    public Void visitAnnotatedType(\n+            @Nullable List<? extends AnnotationTree> declAnnos, Tree typeTree, Tree node) {\n+        Tree unannotatedType = unannotatedType(typeTree);\n+\n+        if (unannotatedType.getKind() == Tree.Kind.PRIMITIVE_TYPE) {\n+            if (atypeFactory.containsNullnessAnnotation(declAnnos, typeTree)) {\n                 checker.reportError(node, \"nullness.on.primitive\");\n                 return null;\n             }\n-        } else if (tm.getKind() == TypeKind.ARRAY) {\n-            Tree innermostComponentTypeTree = node.getType();\n-            while (innermostComponentTypeTree.getKind() == Tree.Kind.ARRAY_TYPE) {\n-                innermostComponentTypeTree = ((ArrayTypeTree) innermostComponentTypeTree).getType();\n-            }\n-            if (innermostComponentTypeTree.getKind() == Tree.Kind.PRIMITIVE_TYPE\n-                    && atypeFactory.containsNullnessAnnotation(\n-                            node.getModifiers().getAnnotations())) {\n-                checker.reportError(innermostComponentTypeTree, \"nullness.on.primitive\");\n-                return null;\n+        }\n+\n+        if (declAnnos != null) {\n+            switch (unannotatedType.getKind()) {\n+                case MEMBER_SELECT:\n+                    if (atypeFactory.containsNullnessAnnotation(\n+                            declAnnos, ((MemberSelectTree) unannotatedType).getExpression())) {\n+                        checker.reportError(\n+                                TreeUtils.leftmostType(unannotatedType), \"nullness.on.outer\");\n+                    }\n+                    break;\n+                default:\n+                    break;\n             }\n         }\n \n-        return super.visitVariable(node, p);\n+        return super.visitAnnotatedType(declAnnos, typeTree, node);\n     }\n \n-    @Override\n-    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n-        TypeMirror tm = TreeUtils.typeOf(node);\n-        if (TypesUtils.isPrimitive(tm)) {\n-            if (atypeFactory.containsNullnessAnnotation(node.getAnnotations())) {\n-                checker.reportError(node, \"nullness.on.primitive\");\n-                return null;\n-            }\n+    /**\n+     * If the argument is a tree of kind ANNOTATED_TYPE, return its unannotated version. Otherwise,\n+     * return the argument.\n+     *\n+     * @param typeTree a tree\n+     * @return the tree without annotations\n+     */\n+    private Tree unannotatedType(Tree typeTree) {", "originalCommit": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java\nindex a87f8d4122..f72d12e88d 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java\n\n@@ -668,14 +668,14 @@ public class NullnessVisitor\n     }\n \n     @Override\n-    public Void visitAnnotatedType(\n+    public void visitAnnotatedType(\n             @Nullable List<? extends AnnotationTree> declAnnos, Tree typeTree, Tree node) {\n-        Tree unannotatedType = unannotatedType(typeTree);\n+        Tree unannotatedType = unannotatedTypeTree(typeTree);\n \n         if (unannotatedType.getKind() == Tree.Kind.PRIMITIVE_TYPE) {\n             if (atypeFactory.containsNullnessAnnotation(declAnnos, typeTree)) {\n                 checker.reportError(node, \"nullness.on.primitive\");\n-                return null;\n+                return;\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwMDQ5NQ==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502600495", "bodyText": "There is currently no error on this line.  Should there be?", "author": "smillst", "createdAt": "2020-10-09T18:20:56Z", "path": "checker/tests/nullness/ScopingConstruct.java", "diffHunk": "@@ -0,0 +1,28 @@\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+@SuppressWarnings(\"initialization.fields.uninitialized\")\n+class ScopingConstruct {\n+\n+    // TODO: add nested classes within these two?\n+    static class StaticNested {}\n+\n+    class Inner {}\n+\n+    @Nullable StaticNested nsn;\n+\n+    @Nullable Inner ni;\n+\n+    // This is a Java error.\n+    // @Nullable ScopingConstruct.StaticNested nscsn;\n+\n+    ScopingConstruct.@Nullable StaticNested scnsn;\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner nsci;\n+\n+    ScopingConstruct.@Nullable Inner scni;\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner @Nullable [] array;", "originalCommit": "a27cebab67e3cb1cfe22daffc735fc0e4d6e0c35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea772c54737466434e272b0ede93577fc9d8b2d8", "chunk": "diff --git a/checker/tests/nullness/ScopingConstruct.java b/checker/tests/nullness/ScopingConstruct.java\nindex 80de8f6258..7b48e9751c 100644\n--- a/checker/tests/nullness/ScopingConstruct.java\n+++ b/checker/tests/nullness/ScopingConstruct.java\n\n@@ -24,5 +24,24 @@ class ScopingConstruct {\n \n     // :: error: (nullness.on.outer)\n     @Nullable ScopingConstruct.Inner @Nullable [] array;\n+\n     ScopingConstruct.@Nullable Inner @Nullable [] array2;\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner nsci() {\n+        throw new Error(\"not implemented\");\n+    }\n+\n+    ScopingConstruct.@Nullable Inner scni() {\n+        throw new Error(\"not implemented\");\n+    }\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner @Nullable [] array() {\n+        throw new Error(\"not implemented\");\n+    }\n+\n+    ScopingConstruct.@Nullable Inner @Nullable [] array2() {\n+        throw new Error(\"not implemented\");\n+    }\n }\n"}}, {"oid": "b152dc44a769ce9127c7530c2ced1f13b0a33873", "url": "https://github.com/typetools/checker-framework/commit/b152dc44a769ce9127c7530c2ced1f13b0a33873", "message": "Start to address code review feedback", "committedDate": "2020-10-09T23:29:57Z", "type": "commit"}, {"oid": "55e8e6322c1cd0116a1c7d34c709f04b4e7ac8ec", "url": "https://github.com/typetools/checker-framework/commit/55e8e6322c1cd0116a1c7d34c709f04b4e7ac8ec", "message": "Merge ../checker-framework-branch-master into scoping-construct", "committedDate": "2020-10-09T23:30:12Z", "type": "commit"}, {"oid": "ea772c54737466434e272b0ede93577fc9d8b2d8", "url": "https://github.com/typetools/checker-framework/commit/ea772c54737466434e272b0ede93577fc9d8b2d8", "message": "Improve logic", "committedDate": "2020-10-10T05:13:23Z", "type": "commit"}, {"oid": "cc6ca5bb96e151e2627343a2d90cf65c716c3daf", "url": "https://github.com/typetools/checker-framework/commit/cc6ca5bb96e151e2627343a2d90cf65c716c3daf", "message": "Fix `@link` tag", "committedDate": "2020-10-10T13:41:09Z", "type": "commit"}, {"oid": "11daecfa2f5b74bc79ea6ce49e95e064ad324c00", "url": "https://github.com/typetools/checker-framework/commit/11daecfa2f5b74bc79ea6ce49e95e064ad324c00", "message": "Fix infinite-loop bug", "committedDate": "2020-10-11T03:06:07Z", "type": "commit"}, {"oid": "c43a51ea8a0000d5fd266f70749970cf1b5f8363", "url": "https://github.com/typetools/checker-framework/commit/c43a51ea8a0000d5fd266f70749970cf1b5f8363", "message": "Add more tests", "committedDate": "2020-10-11T17:30:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzcwNQ==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503403705", "bodyText": "I would also change declAnnos to annoTree here, too.", "author": "smillst", "createdAt": "2020-10-12T16:22:50Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,47 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos annotations written before a variable/method declaration; null if this type\n+     *     is not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotationTrees(\n+            List<? extends AnnotationTree> declAnnos, Tree typeTree) {", "originalCommit": "c43a51ea8a0000d5fd266f70749970cf1b5f8363", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36d796065c0f36674671b16a824c635788fbae16", "chunk": "diff --git a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\nindex 058c695a97..57f4656801 100644\n--- a/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n+++ b/javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java\n\n@@ -1544,21 +1544,21 @@ public final class TreeUtils {\n     /**\n      * Returns the annotations explicitly written on the given type.\n      *\n-     * @param declAnnos annotations written before a variable/method declaration; null if this type\n+     * @param annoTree annotations written before a variable/method declaration; null if this type\n      *     is not from such a location\n      * @param typeTree the type whose annotations to return\n      * @return the annotations explicitly written on the given type.\n      */\n     public static List<? extends AnnotationTree> getExplicitAnnotationTrees(\n-            List<? extends AnnotationTree> declAnnos, Tree typeTree) {\n+            List<? extends AnnotationTree> annoTree, Tree typeTree) {\n         while (true) {\n             switch (typeTree.getKind()) {\n                 case IDENTIFIER:\n                 case PRIMITIVE_TYPE:\n-                    if (declAnnos == null) {\n+                    if (annoTree == null) {\n                         return Collections.emptyList();\n                     }\n-                    return declAnnos;\n+                    return annoTree;\n                 case ANNOTATED_TYPE:\n                     return ((AnnotatedTypeTree) typeTree).getAnnotations();\n                 case ARRAY_TYPE:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODEyOA==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503408128", "bodyText": "Checks an annotated type.\n\nIs it all annotated types, or could we still be missing some?  It's fine if you aren't confident, I'm just curious.", "author": "smillst", "createdAt": "2020-10-12T16:31:26Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2264,33 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * Rather than overriding this method, clients should often override {@link\n+     * #visitAnnotatedType(List,Tree)}. That method also handles the case of annotations at the\n+     * beginning of a variable or method declaration. javac parses all those annotations as being on\n+     * the variable or method declaration, even though the ones that are type annotations logically\n+     * belong to the variable type or method return type.\n+     */\n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and", "originalCommit": "c43a51ea8a0000d5fd266f70749970cf1b5f8363", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1OTIzOA==", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503459238", "bodyText": "I'm pretty sure it is invoked for all annotated types.", "author": "mernst", "createdAt": "2020-10-12T18:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "36d796065c0f36674671b16a824c635788fbae16", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\nindex 13411a79e0..2af4821050 100644\n--- a/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java\n\n@@ -2284,12 +2284,12 @@ public class BaseTypeVisitor<Factory extends GenericAnnotatedTypeFactory<?, ?, ?\n      * AnnotatedTypeTree within a variable declaration or for a method return type -- all the\n      * annotations are attached to the VariableTree or MethodTree, respectively.\n      *\n-     * @param declAnnos annotations written before a variable/method declaration, if this type is\n+     * @param annoTree annotations written before a variable/method declaration, if this type is\n      *     from one; null otherwise\n-     * @param typeTree the type that any type annotations in declAnnos apply to\n+     * @param typeTree the type that any type annotations in annoTree apply to\n      */\n     public void visitAnnotatedType(\n-            @Nullable List<? extends AnnotationTree> declAnnos, Tree typeTree) {}\n+            @Nullable List<? extends AnnotationTree> annoTree, Tree typeTree) {}\n \n     // **********************************************************************\n     // Helper methods to provide a single overriding point\n"}}, {"oid": "36d796065c0f36674671b16a824c635788fbae16", "url": "https://github.com/typetools/checker-framework/commit/36d796065c0f36674671b16a824c635788fbae16", "message": "Rename `declAnnos` to `annoTree`", "committedDate": "2020-10-12T17:41:14Z", "type": "commit"}, {"oid": "aa644217446ffbcca282c5abf02e71067377b7be", "url": "https://github.com/typetools/checker-framework/commit/aa644217446ffbcca282c5abf02e71067377b7be", "message": "Merge ../checker-framework-branch-master into scoping-construct", "committedDate": "2020-10-12T17:41:34Z", "type": "commit"}, {"oid": "39f32455720812cfec32d3e0a5dcfcc1c93d9ab8", "url": "https://github.com/typetools/checker-framework/commit/39f32455720812cfec32d3e0a5dcfcc1c93d9ab8", "message": "Use `annoTrees` instead of `annoTree`", "committedDate": "2020-10-12T17:48:02Z", "type": "commit"}, {"oid": "f971a9aa0d45f6a9936f88b0043e830045e7b4de", "url": "https://github.com/typetools/checker-framework/commit/f971a9aa0d45f6a9936f88b0043e830045e7b4de", "message": "Test more locations", "committedDate": "2020-10-12T18:12:46Z", "type": "commit"}, {"oid": "fb85405c7025591576fced9dc1b862d44d7c7e26", "url": "https://github.com/typetools/checker-framework/commit/fb85405c7025591576fced9dc1b862d44d7c7e26", "message": "Add changelog entry", "committedDate": "2020-10-12T18:15:57Z", "type": "commit"}]}