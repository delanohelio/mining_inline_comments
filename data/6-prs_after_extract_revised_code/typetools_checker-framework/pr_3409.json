{"pr_number": 3409, "pr_title": "Add `isPolymorphicQualifier` method to QualifierHierarchy class.", "pr_createdAt": "2020-06-29T19:32:49Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3409", "timeline": [{"oid": "2d6db08f3c599cc9d75541851aca916e79f5bc95", "url": "https://github.com/typetools/checker-framework/commit/2d6db08f3c599cc9d75541851aca916e79f5bc95", "message": "Use Annotation.class as default value for PolymorphicQualifier.", "committedDate": "2020-06-29T19:28:14Z", "type": "commit"}, {"oid": "9736be0d9226e26811976d5ed88602b5e623e88d", "url": "https://github.com/typetools/checker-framework/commit/9736be0d9226e26811976d5ed88602b5e623e88d", "message": "Fix Javadoc.", "committedDate": "2020-06-29T19:35:02Z", "type": "commit"}, {"oid": "69c2e8d0158e7a8e77fcb78c3440bb4344ac3f0e", "url": "https://github.com/typetools/checker-framework/commit/69c2e8d0158e7a8e77fcb78c3440bb4344ac3f0e", "message": "Fix.", "committedDate": "2020-06-30T16:35:08Z", "type": "commit"}, {"oid": "ef85e01a77f8bf297bf07ac6b31858fbc7229859", "url": "https://github.com/typetools/checker-framework/commit/ef85e01a77f8bf297bf07ac6b31858fbc7229859", "message": "Merge remote-tracking branch 'origin/master' into polyQual", "committedDate": "2020-06-30T16:35:14Z", "type": "commit"}, {"oid": "4057c0e995a13d2facf19df465a8c17ae4fa6d26", "url": "https://github.com/typetools/checker-framework/commit/4057c0e995a13d2facf19df465a8c17ae4fa6d26", "message": "Fix reformat.", "committedDate": "2020-06-30T16:38:20Z", "type": "commit"}, {"oid": "0ccdb4e15e924e305df3e10a0a5d43c880bc853f", "url": "https://github.com/typetools/checker-framework/commit/0ccdb4e15e924e305df3e10a0a5d43c880bc853f", "message": "Merge remote-tracking branch 'origin/master' into polyQual", "committedDate": "2020-06-30T17:31:14Z", "type": "commit"}, {"oid": "9a553fdde5297d1482025ba759e15f55c7aba54f", "url": "https://github.com/typetools/checker-framework/commit/9a553fdde5297d1482025ba759e15f55c7aba54f", "message": "Fix Javadoc.", "committedDate": "2020-06-30T17:33:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMDk1OA==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448410958", "bodyText": "First is should be if.", "author": "wmdietl", "createdAt": "2020-07-01T14:39:50Z", "path": "framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java", "diffHunk": "@@ -73,6 +73,16 @@ public int getWidth() {\n      */\n     public abstract AnnotationMirror getPolymorphicAnnotation(AnnotationMirror start);\n \n+    /**\n+     * Returns {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code\n+     * false}.\n+     *\n+     * @param qualifier qualifier\n+     * @return {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code", "originalCommit": "9a553fdde5297d1482025ba759e15f55c7aba54f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java b/framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java\nindex 91316c9063..4fcd89f778 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/QualifierHierarchy.java\n\n@@ -74,11 +74,11 @@ public abstract class QualifierHierarchy {\n     public abstract AnnotationMirror getPolymorphicAnnotation(AnnotationMirror start);\n \n     /**\n-     * Returns {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code\n+     * Returns {@code true} if the qualifier is a polymorphic qualifier; otherwise, returns {@code\n      * false}.\n      *\n      * @param qualifier qualifier\n-     * @return {@code true} is the qualifier is a polymorphic qualifier; otherwise, returns {@code\n+     * @return {@code true} if the qualifier is a polymorphic qualifier; otherwise, returns {@code\n      *     false}.\n      */\n     public abstract boolean isPolymorphicQualifier(AnnotationMirror qualifier);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMzU0Nw==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448413547", "bodyText": "The This changed isn't clear. Maybe It will be changed to...? Or something else?", "author": "wmdietl", "createdAt": "2020-07-01T14:43:34Z", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -91,16 +92,71 @@ public void addQualifier(AnnotationMirror qual) {\n                 return;\n             }\n \n-            Name pqtopclass = QualifierPolymorphism.getPolymorphicQualifierElement(qual);\n+            Name pqtopclass = getPolymorphicQualifierElement(qual);\n             if (pqtopclass != null) {\n-                AnnotationMirror pqtop =\n-                        AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n-                // use given top (which might be PolymorphicQualifier) as key\n+                AnnotationMirror pqtop;\n+                if (pqtopclass.contentEquals(Annotation.class.getName())) {\n+                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // That means there is only one top in the hierarchy. The top qualifier\n+                    // may not be known at this point, so use the qualifier itself.\n+                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations", "originalCommit": "9a553fdde5297d1482025ba759e15f55c7aba54f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\nindex 09c979a91e..bd0bd2581d 100644\n--- a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n+++ b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n\n@@ -96,10 +96,10 @@ public class MultiGraphQualifierHierarchy extends QualifierHierarchy {\n             if (pqtopclass != null) {\n                 AnnotationMirror pqtop;\n                 if (pqtopclass.contentEquals(Annotation.class.getName())) {\n-                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // A @PolymorphicQualifier with no value defaults to Annotation.class.\n                     // That means there is only one top in the hierarchy. The top qualifier\n                     // may not be known at this point, so use the qualifier itself.\n-                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n+                    // This is changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n                     pqtop = qual;\n                 } else {\n                     pqtop = AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMzgxNA==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448413814", "bodyText": "Spacing.", "author": "wmdietl", "createdAt": "2020-07-01T14:43:57Z", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -91,16 +92,71 @@ public void addQualifier(AnnotationMirror qual) {\n                 return;\n             }\n \n-            Name pqtopclass = QualifierPolymorphism.getPolymorphicQualifierElement(qual);\n+            Name pqtopclass = getPolymorphicQualifierElement(qual);\n             if (pqtopclass != null) {\n-                AnnotationMirror pqtop =\n-                        AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n-                // use given top (which might be PolymorphicQualifier) as key\n+                AnnotationMirror pqtop;\n+                if (pqtopclass.contentEquals(Annotation.class.getName())) {\n+                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // That means there is only one top in the hierarchy. The top qualifier\n+                    // may not be known at this point, so use the qualifier itself.\n+                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n+                    pqtop = qual;\n+                } else {\n+                    pqtop = AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n+                }\n+                // use given top (which might be Annotation) as key\n                 this.polyQualifiers.put(pqtop, qual);\n             } else {\n                 supertypesDirect.put(qual, AnnotationUtils.createAnnotationSet());\n             }\n         }\n+        /**", "originalCommit": "9a553fdde5297d1482025ba759e15f55c7aba54f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\nindex 09c979a91e..bd0bd2581d 100644\n--- a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n+++ b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n\n@@ -96,10 +96,10 @@ public class MultiGraphQualifierHierarchy extends QualifierHierarchy {\n             if (pqtopclass != null) {\n                 AnnotationMirror pqtop;\n                 if (pqtopclass.contentEquals(Annotation.class.getName())) {\n-                    // @PolymorphicQualifier with no value defaults to Annotation.class.\n+                    // A @PolymorphicQualifier with no value defaults to Annotation.class.\n                     // That means there is only one top in the hierarchy. The top qualifier\n                     // may not be known at this point, so use the qualifier itself.\n-                    // This changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n+                    // This is changed to top in MultiGraphQualifierHierarchy.addPolyRelations\n                     pqtop = qual;\n                 } else {\n                     pqtop = AnnotationBuilder.fromName(atypeFactory.getElementUtils(), pqtopclass);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxNTYxMw==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448415613", "bodyText": "I would probably use entrySet and then use the key for poly and the value for maybeTop.", "author": "wmdietl", "createdAt": "2020-07-01T14:46:25Z", "path": "framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java", "diffHunk": "@@ -564,77 +608,78 @@ protected void addPolyRelations(\n             return;\n         }\n \n+        // Handle the case where @PolymorphicQualifier uses the default value Annotation.class.\n+        if (polyQualifiers.size() == 1 && tops.size() == 1) {\n+            AnnotationMirror poly = polyQualifiers.keySet().iterator().next();", "originalCommit": "9a553fdde5297d1482025ba759e15f55c7aba54f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\nindex 09c979a91e..bd0bd2581d 100644\n--- a/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n+++ b/framework/src/main/java/org/checkerframework/framework/util/MultiGraphQualifierHierarchy.java\n\n@@ -610,8 +611,10 @@ public class MultiGraphQualifierHierarchy extends QualifierHierarchy {\n \n         // Handle the case where @PolymorphicQualifier uses the default value Annotation.class.\n         if (polyQualifiers.size() == 1 && tops.size() == 1) {\n-            AnnotationMirror poly = polyQualifiers.keySet().iterator().next();\n-            AnnotationMirror maybeTop = polyQualifiers.get(poly);\n+            Map.Entry<AnnotationMirror, AnnotationMirror> entry =\n+                    polyQualifiers.entrySet().iterator().next();\n+            AnnotationMirror poly = entry.getKey();\n+            AnnotationMirror maybeTop = entry.getValue();\n             if (AnnotationUtils.areSameByName(poly, maybeTop)) {\n                 // If the value of @PolymorphicQualifier is the default value, Annotation.class,\n                 // then map is set to polyQual -> polyQual in\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODc2Mg==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r448418762", "bodyText": "Can you explain why using Annotation.class makes this clearer? Using PolymorphicQualifier.class makes it a bit clearer to me that this is about polymorphism... using just Annotation.class doesn't give any hint. Checking for either one shouldn't make a difference, does it? If it does, can you improve the comment?", "author": "wmdietl", "createdAt": "2020-07-01T14:50:53Z", "path": "framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java", "diffHunk": "@@ -25,8 +25,10 @@\n      * When multiple type hierarchies are supported by a single type system, then each polymorphic\n      * qualifier needs to indicate which sub-hierarchy it belongs to. Do so by passing a qualifier\n      * from the given hierarchy, by convention the top qualifier.\n+     *\n+     * @return the top qualifier in the hierarchy of this qualifier\n      */\n-    // We use the meaningless PolymorphicQualifier.class as default value and\n+    // We use the meaningless Annotation.class as default value and", "originalCommit": "9a553fdde5297d1482025ba759e15f55c7aba54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MjA5NQ==", "url": "https://github.com/typetools/checker-framework/pull/3409#discussion_r449242095", "bodyText": "It doesn't matter what the default value is to the user.  The implementation is confusing because it is expecting the value of PolymorphicQualifier to be a top qualifier, but PolymorphicQualifier is a meta-annotation.  It's also confusing to get the PolymorphicQualifier meta-annotation and then look for PolymorphicQualifier again.", "author": "smillst", "createdAt": "2020-07-02T20:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "500c23131467a56abe1712a84743b627e7a07b2c", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java b/framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java\nindex a763dba032..e3c2573dc2 100644\n--- a/framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java\n+++ b/framework/src/main/java/org/checkerframework/framework/qual/PolymorphicQualifier.java\n\n@@ -23,8 +23,8 @@ public @interface PolymorphicQualifier {\n     /**\n      * Indicates which type system this annotation refers to (optional, and usually unnecessary).\n      * When multiple type hierarchies are supported by a single type system, then each polymorphic\n-     * qualifier needs to indicate which sub-hierarchy it belongs to. Do so by passing a qualifier\n-     * from the given hierarchy, by convention the top qualifier.\n+     * qualifier needs to indicate which sub-hierarchy it belongs to. Do so by passing the top\n+     * qualifier from the given hierarchy.\n      *\n      * @return the top qualifier in the hierarchy of this qualifier\n      */\n"}}, {"oid": "9033699718c59386350a09aa95c7bb0506ab2b13", "url": "https://github.com/typetools/checker-framework/commit/9033699718c59386350a09aa95c7bb0506ab2b13", "message": "Merge branch 'master' into polyQual", "committedDate": "2020-07-02T20:09:04Z", "type": "commit"}, {"oid": "c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "url": "https://github.com/typetools/checker-framework/commit/c796222efaee9827c1e9b44b87d2fd0f0ccb7fbb", "message": "Address code review.", "committedDate": "2020-07-02T20:13:54Z", "type": "commit"}, {"oid": "500c23131467a56abe1712a84743b627e7a07b2c", "url": "https://github.com/typetools/checker-framework/commit/500c23131467a56abe1712a84743b627e7a07b2c", "message": "Clarify contract.", "committedDate": "2020-07-06T20:03:34Z", "type": "commit"}, {"oid": "c353b4b5871cb88defa7fc6e4d4c324929fba9c1", "url": "https://github.com/typetools/checker-framework/commit/c353b4b5871cb88defa7fc6e4d4c324929fba9c1", "message": "Merge remote-tracking branch 'origin/master' into polyQual", "committedDate": "2020-07-06T20:03:55Z", "type": "commit"}]}