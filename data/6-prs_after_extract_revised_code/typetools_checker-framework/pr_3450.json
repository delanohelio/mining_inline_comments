{"pr_number": 3450, "pr_title": "Do not do inference on temporary variables in whole-program inference", "pr_createdAt": "2020-07-09T00:43:32Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3450", "timeline": [{"oid": "91c3872df60d436c479487030c885388cffcee70", "url": "https://github.com/typetools/checker-framework/commit/91c3872df60d436c479487030c885388cffcee70", "message": "do not do inference on temporary variables", "committedDate": "2020-07-09T00:42:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzODMwOA==", "url": "https://github.com/typetools/checker-framework/pull/3450#discussion_r451938308", "bodyText": "It's unclear how this comment applies to the check being performed. Maybe something like \"Do not attempt to infer types for variables with invalid names, which can be generated by temporary variables. See ...\".", "author": "jwaataja", "createdAt": "2020-07-09T03:07:53Z", "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java", "diffHunk": "@@ -283,6 +284,12 @@ public void updateFromFieldAssignment(\n                             + lhs.getClass());\n         }\n \n+        // Do not attempt to infer types for temporary variables.", "originalCommit": "91c3872df60d436c479487030c885388cffcee70", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c566f15b2ac1eee2647eb0994af7df69c43d560e", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\nindex 751d9693c..9cd29c88f 100644\n--- a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n+++ b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n\n@@ -284,7 +284,11 @@ public class WholeProgramInferenceScenes implements WholeProgramInference {\n                             + lhs.getClass());\n         }\n \n-        // Do not attempt to infer types for temporary variables.\n+        // Do not attempt to infer types for fields that do not have valid\n+        // names. For example, compiler-generated temporary variables will\n+        // have invalid names. Recording facts about fields with\n+        // invalid names causes jaif-based WPI to crash when reading the .jaif\n+        // file, and stub-based WPI to generate unparseable stub files.\n         // See https://github.com/typetools/checker-framework/issues/3442\n         if (!SourceVersion.isIdentifier(fieldName)) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0MTkzOQ==", "url": "https://github.com/typetools/checker-framework/pull/3450#discussion_r451941939", "bodyText": "Two questions.\n\n\nIs it having a valid identifier equivalent equivalent to being a temporary variable? If not, then this fix might work for the issue in question, but still do inference on other temporary nodes. I noticed near this line from the code that creates the variable that setInSource(false) is called on the generated nodes. Would something like that work here instead?\n\n\nWhy is the temporary variable considered a field in the first place? I feel like we would want to do inference on temporary variables in an expression like int n = i++ because the temporary variable would hold the inferred type of the expression i++. It seems to me like the root of the problem is that in static blocks in particular, the temporary variable is somehow \"attached\" to the class as a field.", "author": "jwaataja", "createdAt": "2020-07-09T03:22:59Z", "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java", "diffHunk": "@@ -283,6 +284,12 @@ public void updateFromFieldAssignment(\n                             + lhs.getClass());\n         }\n \n+        // Do not attempt to infer types for temporary variables.\n+        // See https://github.com/typetools/checker-framework/issues/3442\n+        if (!SourceVersion.isIdentifier(fieldName)) {", "originalCommit": "91c3872df60d436c479487030c885388cffcee70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNTI2OA==", "url": "https://github.com/typetools/checker-framework/pull/3450#discussion_r452315268", "bodyText": "Is it having a valid identifier equivalent equivalent to being a temporary variable\n\nI decided to check the identifier because I think it's broader than checking whether the tree was actually generated by the compiler (i.e. setInSource being set to false). My reasoning is that because we're going to write the results of inference out to a jaif/stub file (neither of which can include fields with invalid names), we should handle ANY invalid names that we encounter, regardless of where they came from.\n\nWhy is the temporary variable considered a field in the first place\n\nI think it's just a quirk of how the CFG is constructed.\n\nI feel like we would want to do inference on temporary variables in an expression like int n = i++\n\nWe'll still do WPI on n in this example, and we'll compute the correct results because local inference will still run on the i++ node - but only n's inferred type will be written to the jaif/stub file.\n\nIt seems to me like the root of the problem is that in static blocks in particular, the temporary variable is somehow \"attached\" to the class as a field\n\nYes. I presume there's a reason that was done. If there isn't (and it's just an implementation detail that could be changed), I would still prefer this fix, because it has a much smaller blast radius (only WPI is impacted). Changing CFG construction could result in bugs elsewhere.", "author": "kelloggm", "createdAt": "2020-07-09T15:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0MTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c566f15b2ac1eee2647eb0994af7df69c43d560e", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\nindex 751d9693c..9cd29c88f 100644\n--- a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n+++ b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n\n@@ -284,7 +284,11 @@ public class WholeProgramInferenceScenes implements WholeProgramInference {\n                             + lhs.getClass());\n         }\n \n-        // Do not attempt to infer types for temporary variables.\n+        // Do not attempt to infer types for fields that do not have valid\n+        // names. For example, compiler-generated temporary variables will\n+        // have invalid names. Recording facts about fields with\n+        // invalid names causes jaif-based WPI to crash when reading the .jaif\n+        // file, and stub-based WPI to generate unparseable stub files.\n         // See https://github.com/typetools/checker-framework/issues/3442\n         if (!SourceVersion.isIdentifier(fieldName)) {\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MzY5OA==", "url": "https://github.com/typetools/checker-framework/pull/3450#discussion_r451953698", "bodyText": "Can you define the term \"temporary variable\"?  Do you mean \"compiler-generated\"?", "author": "mernst", "createdAt": "2020-07-09T04:14:46Z", "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java", "diffHunk": "@@ -283,6 +284,12 @@ public void updateFromFieldAssignment(\n                             + lhs.getClass());\n         }\n \n+        // Do not attempt to infer types for temporary variables.", "originalCommit": "91c3872df60d436c479487030c885388cffcee70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxODU2NQ==", "url": "https://github.com/typetools/checker-framework/pull/3450#discussion_r452318565", "bodyText": "Yes, that's what I was referring to. I will change this documentation to refer to variables with invalid names, and give compiler-generated temporary variables as an example.", "author": "kelloggm", "createdAt": "2020-07-09T15:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MzY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c566f15b2ac1eee2647eb0994af7df69c43d560e", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\nindex 751d9693c..9cd29c88f 100644\n--- a/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n+++ b/framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java\n\n@@ -284,7 +284,11 @@ public class WholeProgramInferenceScenes implements WholeProgramInference {\n                             + lhs.getClass());\n         }\n \n-        // Do not attempt to infer types for temporary variables.\n+        // Do not attempt to infer types for fields that do not have valid\n+        // names. For example, compiler-generated temporary variables will\n+        // have invalid names. Recording facts about fields with\n+        // invalid names causes jaif-based WPI to crash when reading the .jaif\n+        // file, and stub-based WPI to generate unparseable stub files.\n         // See https://github.com/typetools/checker-framework/issues/3442\n         if (!SourceVersion.isIdentifier(fieldName)) {\n             return;\n"}}, {"oid": "c566f15b2ac1eee2647eb0994af7df69c43d560e", "url": "https://github.com/typetools/checker-framework/commit/c566f15b2ac1eee2647eb0994af7df69c43d560e", "message": "improve documentation", "committedDate": "2020-07-09T16:00:16Z", "type": "commit"}]}