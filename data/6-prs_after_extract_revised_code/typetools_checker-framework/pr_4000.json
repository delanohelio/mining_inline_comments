{"pr_number": 4000, "pr_title": "Deprecate `addAliasedAnnotation`; use `addAliasedTypeAnnotation`", "pr_createdAt": "2020-12-13T03:02:18Z", "pr_url": "https://github.com/typetools/checker-framework/pull/4000", "timeline": [{"oid": "94c527636d763cdd9aed4a905e74fdbb917a6f4b", "url": "https://github.com/typetools/checker-framework/commit/94c527636d763cdd9aed4a905e74fdbb917a6f4b", "message": "Deprecated `addAliasedAnnotation`; use `addAliasedTypeAnnotation`", "committedDate": "2020-12-12T17:57:58Z", "type": "commit"}, {"oid": "6d91f3663086e2329018be65c5e16362f4b7ff95", "url": "https://github.com/typetools/checker-framework/commit/6d91f3663086e2329018be65c5e16362f4b7ff95", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation", "committedDate": "2020-12-13T06:31:28Z", "type": "commit"}, {"oid": "3f929392e9981ff18c17834bb4781948df174f2d", "url": "https://github.com/typetools/checker-framework/commit/3f929392e9981ff18c17834bb4781948df174f2d", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation", "committedDate": "2020-12-13T15:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0ODU0NA==", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542548544", "bodyText": "type isn't a parameter name, so I'm not sure what it is referring to.", "author": "smillst", "createdAt": "2020-12-14T17:02:00Z", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}", "originalCommit": "3f929392e9981ff18c17834bb4781948df174f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf0727da40f62347afcbe5a80222f74589191a12", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\nindex 07e2510c94..037713cac3 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n\n@@ -2894,19 +2894,19 @@ public class AnnotatedTypeFactory implements AnnotationProvider {\n     }\n \n     /**\n-     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n-     * that will be used by the Checker Framework in the alias's place.\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code\n+     * canonicalClass} that will be used by the Checker Framework in the alias's place.\n      *\n      * <p>You may specify the copyElements flag to indicate whether you want the elements of the\n      * alias to be copied over when the canonical annotation is constructed as a copy of {@code\n-     * type}. Be careful that the framework will try to copy the elements by name matching, so make\n-     * sure that names and types of the elements to be copied over are exactly the same as the ones\n-     * in the canonical annotation. Otherwise, an 'Couldn't find element in annotation' error is\n-     * raised.\n-     *\n-     * <p>To facilitate the cases where some of the elements is ignored on purpose when constructing\n-     * the canonical annotation, this method also provides a varargs {@code ignorableElements} for\n-     * you to explicitly specify the ignoring rules. For example, {@code\n+     * canonicalClass}. Be careful that the framework will try to copy the elements by name\n+     * matching, so make sure that names and types of the elements to be copied over are exactly the\n+     * same as the ones in the canonical annotation. Otherwise, an 'Couldn't find element in\n+     * annotation' error is raised.\n+     *\n+     * <p>To facilitate the cases where some of the elements are ignored on purpose when\n+     * constructing the canonical annotation, this method also provides a varargs {@code\n+     * ignorableElements} for you to explicitly specify the ignoring rules. For example, {@code\n      * org.checkerframework.checker.index.qual.IndexFor} is an alias of {@code\n      * org.checkerframework.checker.index.qual.NonNegative}, but the element \"value\" of\n      * {@code @IndexFor} should be ignored when constructing {@code @NonNegative}. In the cases\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MTYyMQ==", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542551621", "bodyText": "It's strange to name a variable which is an AnnotationMirror type. I would rename type to annotation or maybe canonicalAnno.", "author": "smillst", "createdAt": "2020-12-14T17:06:03Z", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2782,19 +2782,37 @@ public boolean isSupportedQualifier(String className) {\n      *\n      * <p>By specifying the alias/canonical relationship using this method, the elements of the\n      * alias are not preserved when the canonical annotation to use is constructed from the alias.\n-     * If you want the elements to be copied over as well, use {@link #addAliasedAnnotation(Class,\n-     * Class, boolean, String...)}.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n      *\n      * @param aliasClass the class of the aliased annotation\n      * @param type the canonical annotation\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(Class<?> aliasClass, AnnotationMirror type) {\n+        addAliasedTypeAnnotation(aliasClass, type);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>By specifying the alias/canonical relationship using this method, the elements of the\n+     * alias are not preserved when the canonical annotation to use is constructed from the alias.\n+     * If you want the elements to be copied over as well, use {@link\n+     * #addAliasedTypeAnnotation(Class, Class, boolean, String...)}.\n+     *\n+     * @param aliasClass the class of the aliased annotation\n+     * @param type the canonical annotation\n+     */\n+    protected void addAliasedTypeAnnotation(Class<?> aliasClass, AnnotationMirror type) {", "originalCommit": "3f929392e9981ff18c17834bb4781948df174f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf0727da40f62347afcbe5a80222f74589191a12", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\nindex 07e2510c94..037713cac3 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n\n@@ -2795,8 +2795,8 @@ public class AnnotatedTypeFactory implements AnnotationProvider {\n     }\n \n     /**\n-     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n-     * that will be used by the Checker Framework in the alias's place.\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code\n+     * canonicalAnno} that will be used by the Checker Framework in the alias's place.\n      *\n      * <p>By specifying the alias/canonical relationship using this method, the elements of the\n      * alias are not preserved when the canonical annotation to use is constructed from the alias.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1Mzk1Ng==", "url": "https://github.com/typetools/checker-framework/pull/4000#discussion_r542553956", "bodyText": "the elements is ignored =>  the elements are ignored", "author": "smillst", "createdAt": "2020-12-14T17:09:02Z", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2842,18 +2882,55 @@ protected void addAliasedAnnotation(\n      *     getting the alias from the canonical annotation\n      * @param ignorableElements a list of elements that can be safely dropped when the elements are\n      *     being copied over\n+     * @deprecated use {@code addAliasedTypeAnnotation}\n      */\n+    @Deprecated // use addAliasedTypeAnnotation\n     protected void addAliasedAnnotation(\n             Class<?> aliasClass,\n             Class<?> canonical,\n             boolean copyElements,\n             String... ignorableElements) {\n+        addAliasedTypeAnnotation(aliasClass, canonical, copyElements, ignorableElements);\n+    }\n+\n+    /**\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n+     * that will be used by the Checker Framework in the alias's place.\n+     *\n+     * <p>You may specify the copyElements flag to indicate whether you want the elements of the\n+     * alias to be copied over when the canonical annotation is constructed as a copy of {@code\n+     * type}. Be careful that the framework will try to copy the elements by name matching, so make\n+     * sure that names and types of the elements to be copied over are exactly the same as the ones\n+     * in the canonical annotation. Otherwise, an 'Couldn't find element in annotation' error is\n+     * raised.\n+     *\n+     * <p>To facilitate the cases where some of the elements is ignored on purpose when constructing", "originalCommit": "3f929392e9981ff18c17834bb4781948df174f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf0727da40f62347afcbe5a80222f74589191a12", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\nindex 07e2510c94..037713cac3 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n\n@@ -2894,19 +2894,19 @@ public class AnnotatedTypeFactory implements AnnotationProvider {\n     }\n \n     /**\n-     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code type}\n-     * that will be used by the Checker Framework in the alias's place.\n+     * Adds the annotation {@code aliasClass} as an alias for the canonical annotation {@code\n+     * canonicalClass} that will be used by the Checker Framework in the alias's place.\n      *\n      * <p>You may specify the copyElements flag to indicate whether you want the elements of the\n      * alias to be copied over when the canonical annotation is constructed as a copy of {@code\n-     * type}. Be careful that the framework will try to copy the elements by name matching, so make\n-     * sure that names and types of the elements to be copied over are exactly the same as the ones\n-     * in the canonical annotation. Otherwise, an 'Couldn't find element in annotation' error is\n-     * raised.\n-     *\n-     * <p>To facilitate the cases where some of the elements is ignored on purpose when constructing\n-     * the canonical annotation, this method also provides a varargs {@code ignorableElements} for\n-     * you to explicitly specify the ignoring rules. For example, {@code\n+     * canonicalClass}. Be careful that the framework will try to copy the elements by name\n+     * matching, so make sure that names and types of the elements to be copied over are exactly the\n+     * same as the ones in the canonical annotation. Otherwise, an 'Couldn't find element in\n+     * annotation' error is raised.\n+     *\n+     * <p>To facilitate the cases where some of the elements are ignored on purpose when\n+     * constructing the canonical annotation, this method also provides a varargs {@code\n+     * ignorableElements} for you to explicitly specify the ignoring rules. For example, {@code\n      * org.checkerframework.checker.index.qual.IndexFor} is an alias of {@code\n      * org.checkerframework.checker.index.qual.NonNegative}, but the element \"value\" of\n      * {@code @IndexFor} should be ignored when constructing {@code @NonNegative}. In the cases\n"}}, {"oid": "7cb296d793ae6b4c3218037c5c615884f999f095", "url": "https://github.com/typetools/checker-framework/commit/7cb296d793ae6b4c3218037c5c615884f999f095", "message": "Merge ../checker-framework-branch-master into addAliasedTypeAnnotation", "committedDate": "2020-12-14T17:16:01Z", "type": "commit"}, {"oid": "cf0727da40f62347afcbe5a80222f74589191a12", "url": "https://github.com/typetools/checker-framework/commit/cf0727da40f62347afcbe5a80222f74589191a12", "message": "Improve formal parameter names", "committedDate": "2020-12-14T17:20:30Z", "type": "commit"}]}