{"pr_number": 3823, "pr_title": "Enrich treatment of `@PolyNull`; fixes #3614", "pr_createdAt": "2020-10-22T20:01:59Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3823", "timeline": [{"oid": "37f546de3d679dfc11e393bbd8bdf1353d545f1f", "url": "https://github.com/typetools/checker-framework/commit/37f546de3d679dfc11e393bbd8bdf1353d545f1f", "message": "Checkpoint", "committedDate": "2020-10-22T17:38:10Z", "type": "commit"}, {"oid": "539f56855ac95a1d033796b25b8c3c8239f36877", "url": "https://github.com/typetools/checker-framework/commit/539f56855ac95a1d033796b25b8c3c8239f36877", "message": "Merge ../checker-framework-branch-master into issue3614", "committedDate": "2020-10-22T17:39:28Z", "type": "commit"}, {"oid": "bb0baf0fa81d47166211c6aa06ab34cd407a5ec9", "url": "https://github.com/typetools/checker-framework/commit/bb0baf0fa81d47166211c6aa06ab34cd407a5ec9", "message": "Merge ../checker-framework-branch-master into issue3614", "committedDate": "2020-10-22T17:39:59Z", "type": "commit"}, {"oid": "79314d55d72e030a4d1df684c40c4ba12b7416ad", "url": "https://github.com/typetools/checker-framework/commit/79314d55d72e030a4d1df684c40c4ba12b7416ad", "message": "Override both versions of finishValue", "committedDate": "2020-10-22T17:52:43Z", "type": "commit"}, {"oid": "e23b3d964f4219766dfaba5288d7f0d5877db919", "url": "https://github.com/typetools/checker-framework/commit/e23b3d964f4219766dfaba5288d7f0d5877db919", "message": "Add new method Annotationutils.toStringSimple", "committedDate": "2020-10-22T17:59:21Z", "type": "commit"}, {"oid": "4ad8426b3a9138c418c91eeb249190021d91068e", "url": "https://github.com/typetools/checker-framework/commit/4ad8426b3a9138c418c91eeb249190021d91068e", "message": "Add Javadoc", "committedDate": "2020-10-22T18:12:56Z", "type": "commit"}, {"oid": "848e96f3cabaf838e035ae5547d369824ae62701", "url": "https://github.com/typetools/checker-framework/commit/848e96f3cabaf838e035ae5547d369824ae62701", "message": "Remove diagnostic output", "committedDate": "2020-10-22T18:13:49Z", "type": "commit"}, {"oid": "a6784fa9d95e583a4e541fab4190564ee0c64502", "url": "https://github.com/typetools/checker-framework/commit/a6784fa9d95e583a4e541fab4190564ee0c64502", "message": "Avoid NPE", "committedDate": "2020-10-22T18:59:38Z", "type": "commit"}, {"oid": "01d33420d2070b9ca737f6760b0ba0bc981c5ae7", "url": "https://github.com/typetools/checker-framework/commit/01d33420d2070b9ca737f6760b0ba0bc981c5ae7", "message": "Update a test", "committedDate": "2020-10-22T19:01:35Z", "type": "commit"}, {"oid": "32de936c83830ebf07810ea67359dacfd4fb2eb9", "url": "https://github.com/typetools/checker-framework/commit/32de936c83830ebf07810ea67359dacfd4fb2eb9", "message": "Merge ../checker-framework-fork-mernst-branch-nullnesstransfer-finishvalue into issue3614-precursors", "committedDate": "2020-10-22T19:10:23Z", "type": "commit"}, {"oid": "2594596331066a5c653c823469c4f7881fe1ac11", "url": "https://github.com/typetools/checker-framework/commit/2594596331066a5c653c823469c4f7881fe1ac11", "message": "Merge ../checker-framework-fork-mernst-branch-issue3614-precursors into issue3614", "committedDate": "2020-10-22T19:12:04Z", "type": "commit"}, {"oid": "d510fb26f9a5f7a0fd9f6cc6f72d5c09ca104772", "url": "https://github.com/typetools/checker-framework/commit/d510fb26f9a5f7a0fd9f6cc6f72d5c09ca104772", "message": "Enable test", "committedDate": "2020-10-22T19:13:45Z", "type": "commit"}, {"oid": "d73d8d5ca27e3e80d41fb704f99155e05b0f0c32", "url": "https://github.com/typetools/checker-framework/commit/d73d8d5ca27e3e80d41fb704f99155e05b0f0c32", "message": "Update tests", "committedDate": "2020-10-22T19:59:15Z", "type": "commit"}, {"oid": "b1941ee6ffce8c78997e2d5ec9d4cda6f265cb7f", "url": "https://github.com/typetools/checker-framework/commit/b1941ee6ffce8c78997e2d5ec9d4cda6f265cb7f", "message": "Merge remote-tracking branch 'remotes/origin/master' into issue3614\n\n# Conflicts:\n#\tchecker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java", "committedDate": "2020-10-22T20:14:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzMTQ4Mw==", "url": "https://github.com/typetools/checker-framework/pull/3823#discussion_r510431483", "bodyText": "This needs to be updated.", "author": "smillst", "createdAt": "2020-10-22T20:17:37Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessValue.java", "diffHunk": "@@ -3,18 +3,26 @@\n import java.util.Set;\n import javax.lang.model.element.AnnotationMirror;\n import javax.lang.model.type.TypeMirror;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n import org.checkerframework.checker.nullness.qual.Nullable;\n import org.checkerframework.checker.nullness.qual.PolyNull;\n+import org.checkerframework.dataflow.qual.Pure;\n+import org.checkerframework.dataflow.qual.SideEffectFree;\n import org.checkerframework.framework.flow.CFAbstractAnalysis;\n import org.checkerframework.framework.flow.CFAbstractValue;\n import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TypesUtils;\n \n /**\n  * Behaves just like {@link CFValue}, but additionally tracks whether at this point {@link PolyNull}\n  * is known to be {@link Nullable}.", "originalCommit": "b1941ee6ffce8c78997e2d5ec9d4cda6f265cb7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64ccae9e0090403bd9c99747f0129ed94ced2645", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessValue.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessValue.java\nindex 3bdaa4cd7..ef13e92ad 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessValue.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessValue.java\n\n@@ -16,7 +16,7 @@ import org.checkerframework.javacutil.TypesUtils;\n \n /**\n  * Behaves just like {@link CFValue}, but additionally tracks whether at this point {@link PolyNull}\n- * is known to be {@link Nullable}.\n+ * is known to be {@link NonNull} or {@link Nullable} (or not known to be either)\n  */\n public class NullnessValue extends CFAbstractValue<NullnessValue> {\n \n"}}, {"oid": "64ccae9e0090403bd9c99747f0129ed94ced2645", "url": "https://github.com/typetools/checker-framework/commit/64ccae9e0090403bd9c99747f0129ed94ced2645", "message": "Update documentation", "committedDate": "2020-10-22T20:26:17Z", "type": "commit"}, {"oid": "e1b0b85ec1176c73e99f3c5d43fc54d22cb6f4ce", "url": "https://github.com/typetools/checker-framework/commit/e1b0b85ec1176c73e99f3c5d43fc54d22cb6f4ce", "message": "Merge ../checker-framework-branch-master into issue3614", "committedDate": "2020-10-22T20:43:24Z", "type": "commit"}, {"oid": "7b1f6d10e951d2131f16c2191a9ac4f05e807189", "url": "https://github.com/typetools/checker-framework/commit/7b1f6d10e951d2131f16c2191a9ac4f05e807189", "message": "Merge ../checker-framework-branch-master into issue3614", "committedDate": "2020-10-23T15:03:27Z", "type": "commit"}, {"oid": "132025055bfa573e3841b328903c3d8dfb3d1835", "url": "https://github.com/typetools/checker-framework/commit/132025055bfa573e3841b328903c3d8dfb3d1835", "message": "Abstract out method ForwardAnalysisImpl.getParameters()", "committedDate": "2020-10-24T13:01:05Z", "type": "commit"}, {"oid": "97794ddff0e131e87179a4ed657df143c6313b18", "url": "https://github.com/typetools/checker-framework/commit/97794ddff0e131e87179a4ed657df143c6313b18", "message": "Checkpoint", "committedDate": "2020-10-24T13:49:19Z", "type": "commit"}, {"oid": "d9388345fb254506709f5e3ae29f08a30e9acd90", "url": "https://github.com/typetools/checker-framework/commit/d9388345fb254506709f5e3ae29f08a30e9acd90", "message": "Merge ../checker-framework-branch-master into issue3614", "committedDate": "2020-10-27T17:37:59Z", "type": "commit"}, {"oid": "55539a40bbee7c74f3fd7250112b91c157d562bd", "url": "https://github.com/typetools/checker-framework/commit/55539a40bbee7c74f3fd7250112b91c157d562bd", "message": "Complete polyNullIsNonNull, remove debugging output", "committedDate": "2020-10-27T18:41:09Z", "type": "commit"}, {"oid": "7e3067dccfa6a5f482bbc436532c844ce0140a34", "url": "https://github.com/typetools/checker-framework/commit/7e3067dccfa6a5f482bbc436532c844ce0140a34", "message": "Can't determine if component `@PolyNull` tyes are actually `@NonNull`", "committedDate": "2020-10-27T20:40:46Z", "type": "commit"}, {"oid": "84837e0ffc8b2ba4a042ebfb83ce5e22fd6aa115", "url": "https://github.com/typetools/checker-framework/commit/84837e0ffc8b2ba4a042ebfb83ce5e22fd6aa115", "message": "Javadoc fix", "committedDate": "2020-10-27T21:29:36Z", "type": "commit"}, {"oid": "28d33cc35c447bdc068d6484071cfcef5c20b3a7", "url": "https://github.com/typetools/checker-framework/commit/28d33cc35c447bdc068d6484071cfcef5c20b3a7", "message": "Handle type variables and wildcards conservatively", "committedDate": "2020-10-27T21:37:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1OTM2MQ==", "url": "https://github.com/typetools/checker-framework/pull/3823#discussion_r513659361", "bodyText": "te -> to", "author": "smillst", "createdAt": "2020-10-28T18:08:47Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessStore.java", "diffHunk": "@@ -44,22 +48,26 @@ public NullnessStore(\n             CFAbstractAnalysis<NullnessValue, NullnessStore, ?> analysis,\n             boolean sequentialSemantics) {\n         super(analysis, sequentialSemantics);\n+        isPolyNullNonNull = false;\n         isPolyNullNull = false;\n     }\n \n+    /**\n+     * Create a NullnessStore (copy constructor).\n+     *\n+     * @param s a store te copy", "originalCommit": "28d33cc35c447bdc068d6484071cfcef5c20b3a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62ffa7a61f7dec63a8bbbbe2d3f83b30fc64815a", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessStore.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessStore.java\nindex f945195f7..ab3b85279 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessStore.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessStore.java\n\n@@ -55,7 +55,7 @@ public class NullnessStore extends InitializationStore<NullnessValue, NullnessSt\n     /**\n      * Create a NullnessStore (copy constructor).\n      *\n-     * @param s a store te copy\n+     * @param s a store to copy\n      */\n     public NullnessStore(NullnessStore s) {\n         super(s);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2MjcyMA==", "url": "https://github.com/typetools/checker-framework/pull/3823#discussion_r513662720", "bodyText": "You can do this by using a SimpleAnnotatedTypeScanner:\nnew SimpleAnnotatedTypeScanner<>(\n                    (type, p) ->\n                            type.hasAnnotation(POLYNULL),\n                    Boolean::logicalOr,\n                    false);", "author": "smillst", "createdAt": "2020-10-28T18:14:15Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java", "diffHunk": "@@ -205,6 +225,78 @@ protected NullnessValue finishValue(\n         return res;\n     }\n \n+    /**\n+     * Returns true if every formal parameter that is declared as @PolyNull is currently known to be\n+     * non-null.\n+     *\n+     * @param method a method\n+     * @param s a store\n+     * @return true if every formal parameter declared as @PolyNull is non-null\n+     */\n+    private boolean polyNullIsNonNull(ExecutableElement method, NullnessStore s) {\n+        // No need to check the receiver, which is always non-null.\n+        for (VariableElement var : method.getParameters()) {\n+            AnnotatedTypeMirror varType = atypeFactory.fromElement(var);\n+\n+            if (containsPolyNullNotAtTopLevel(varType)) {\n+                return false;\n+            }\n+\n+            if (varType.hasAnnotation(POLYNULL)) {\n+                NullnessValue v = s.getValue(new LocalVariable(var));\n+                if (!AnnotationUtils.containsSameByName(v.getAnnotations(), NONNULL)) {\n+                    return false;\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if there is an occurrence of @PolyNull that is not at the top level.\n+     *\n+     * @param t a type\n+     * @return true if there is an occurrence of @PolyNull that is not at the top level\n+     */\n+    private boolean containsPolyNullNotAtTopLevel(AnnotatedTypeMirror t) {", "originalCommit": "28d33cc35c447bdc068d6484071cfcef5c20b3a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3424ef411d1ec22a47220ee014c90311c10c0548", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java\nindex bd47e1b00..6d0cfb571 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/NullnessTransfer.java\n\n@@ -252,6 +252,34 @@ public class NullnessTransfer\n         return true;\n     }\n \n+    /**\n+     * A scanner that returns true if there is an occurrence of @PolyNull that is not at the top\n+     * level.\n+     */\n+    private class ContainsPolyNullNotAtTopLevelScanner\n+            extends SimpleAnnotatedTypeScanner<Boolean, Void> {\n+        /**\n+         * True if the top-level type has not yet been processed (by the first call to\n+         * defaultAction).\n+         */\n+        private boolean isTopLevel = true;\n+\n+        /** Create a ContainsPolyNullNotAtTopLevelScanner. */\n+        ContainsPolyNullNotAtTopLevelScanner() {\n+            super(Boolean::logicalOr, false);\n+        }\n+\n+        @Override\n+        protected Boolean defaultAction(AnnotatedTypeMirror type, Void p) {\n+            if (isTopLevel) {\n+                isTopLevel = false;\n+                return false;\n+            } else {\n+                return type.hasAnnotation(POLYNULL);\n+            }\n+        }\n+    }\n+\n     /**\n      * Returns true if there is an occurrence of @PolyNull that is not at the top level.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2Nzk5OA==", "url": "https://github.com/typetools/checker-framework/pull/3823#discussion_r513667998", "bodyText": "Should this change be reverted?  You can call getTypeFactory() to access this field.", "author": "smillst", "createdAt": "2020-10-28T18:22:37Z", "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractAnalysis.java", "diffHunk": "@@ -51,7 +51,7 @@\n     protected final DependentTypesHelper dependentTypesHelper;\n \n     /** A type factory that can provide static type annotations for AST Trees. */\n-    protected final GenericAnnotatedTypeFactory<V, S, T, ? extends CFAbstractAnalysis<V, S, T>>\n+    public final GenericAnnotatedTypeFactory<V, S, T, ? extends CFAbstractAnalysis<V, S, T>>", "originalCommit": "28d33cc35c447bdc068d6484071cfcef5c20b3a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13cd08a970d7ea42ff0b3e1c40918bde59919967", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractAnalysis.java b/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractAnalysis.java\nindex 329a9f055..999545467 100644\n--- a/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractAnalysis.java\n+++ b/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractAnalysis.java\n\n@@ -51,7 +51,7 @@ public abstract class CFAbstractAnalysis<\n     protected final DependentTypesHelper dependentTypesHelper;\n \n     /** A type factory that can provide static type annotations for AST Trees. */\n-    public final GenericAnnotatedTypeFactory<V, S, T, ? extends CFAbstractAnalysis<V, S, T>>\n+    protected final GenericAnnotatedTypeFactory<V, S, T, ? extends CFAbstractAnalysis<V, S, T>>\n             atypeFactory;\n \n     /** A checker that contains command-line arguments and other information. */\n"}}, {"oid": "62ffa7a61f7dec63a8bbbbe2d3f83b30fc64815a", "url": "https://github.com/typetools/checker-framework/commit/62ffa7a61f7dec63a8bbbbe2d3f83b30fc64815a", "message": "Fix typo", "committedDate": "2020-10-28T22:02:49Z", "type": "commit"}, {"oid": "13cd08a970d7ea42ff0b3e1c40918bde59919967", "url": "https://github.com/typetools/checker-framework/commit/13cd08a970d7ea42ff0b3e1c40918bde59919967", "message": "Use getter, not field", "committedDate": "2020-10-28T22:10:52Z", "type": "commit"}, {"oid": "3424ef411d1ec22a47220ee014c90311c10c0548", "url": "https://github.com/typetools/checker-framework/commit/3424ef411d1ec22a47220ee014c90311c10c0548", "message": "Use a Scanner", "committedDate": "2020-10-29T18:37:55Z", "type": "commit"}]}