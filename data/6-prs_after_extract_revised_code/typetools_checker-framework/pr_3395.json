{"pr_number": 3395, "pr_title": "Improve CFGVisualizer.", "pr_createdAt": "2020-06-21T03:53:25Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3395", "timeline": [{"oid": "23e6ccf3a5bd7c8cb2a009967e3ffe36e09f8589", "url": "https://github.com/typetools/checker-framework/commit/23e6ccf3a5bd7c8cb2a009967e3ffe36e09f8589", "message": "Extract common logic of visualizeBlockNode() into a helper method.", "committedDate": "2020-06-21T02:38:14Z", "type": "commit"}, {"oid": "4cc25a38ecb0ed34f30487eb26f3209f9c174819", "url": "https://github.com/typetools/checker-framework/commit/4cc25a38ecb0ed34f30487eb26f3209f9c174819", "message": "Update StringCFGVisualizer.java", "committedDate": "2020-06-24T15:38:46Z", "type": "commit"}, {"oid": "3b7397a63dabbed8f6b36fc74c8bfefdebd12747", "url": "https://github.com/typetools/checker-framework/commit/3b7397a63dabbed8f6b36fc74c8bfefdebd12747", "message": "Update DOTCFGVisualizer.java", "committedDate": "2020-06-24T15:39:37Z", "type": "commit"}, {"oid": "737b6c4307bfaa56b87558d7c37bf0bdb200e33a", "url": "https://github.com/typetools/checker-framework/commit/737b6c4307bfaa56b87558d7c37bf0bdb200e33a", "message": "Merge remote-tracking branch 'typetools/master' into typetools-improve-visualizer", "committedDate": "2020-06-24T18:50:34Z", "type": "commit"}, {"oid": "04d724da1b184d115b1e8591c27bbeecee1b7657", "url": "https://github.com/typetools/checker-framework/commit/04d724da1b184d115b1e8591c27bbeecee1b7657", "message": "Merge remote-tracking branch 'origin/typetools-improve-visualizer' into typetools-improve-visualizer", "committedDate": "2020-06-24T19:01:15Z", "type": "commit"}, {"oid": "0f6c1a64f241e25d809b70c22eee0a2baf986c8e", "url": "https://github.com/typetools/checker-framework/commit/0f6c1a64f241e25d809b70c22eee0a2baf986c8e", "message": "Resolve comments.", "committedDate": "2020-06-24T19:53:02Z", "type": "commit"}, {"oid": "83d1fb23367b18ab3c652df442d67dfeefa2def3", "url": "https://github.com/typetools/checker-framework/commit/83d1fb23367b18ab3c652df442d67dfeefa2def3", "message": "Merge remote-tracking branch 'typetools/master' into typetools-improve-visualizer", "committedDate": "2020-06-25T06:23:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNTc1Nw==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445535757", "bodyText": "The two escape methods can stay private, right?", "author": "wmdietl", "createdAt": "2020-06-25T12:55:34Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -284,7 +277,7 @@ public String visualizeStoreKeyVal(String keyName, Object value) {\n      * @param str the string to be escaped\n      * @return the escaped version of the string\n      */\n-    private String escapeDoubleQuotes(final String str) {\n+    protected String escapeDoubleQuotes(final String str) {", "originalCommit": "0f6c1a64f241e25d809b70c22eee0a2baf986c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "082878c0e568a01bd2f5b72fdb48c2a7efec711e", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\nindex 8605d5f64..62f88488b 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\n\n@@ -277,7 +277,7 @@ public class DOTCFGVisualizer<\n      * @param str the string to be escaped\n      * @return the escaped version of the string\n      */\n-    protected String escapeDoubleQuotes(final String str) {\n+    private String escapeDoubleQuotes(final String str) {\n         return str.replace(\"\\\"\", \"\\\\\\\"\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNzkyOA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445537928", "bodyText": "How about Format the given object as a String suitable for the output format, i.e. with format-specific characters escaped.", "author": "wmdietl", "createdAt": "2020-06-25T12:59:15Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "diffHunk": "@@ -261,6 +261,33 @@ protected String loopOverBlockContents(\n         }\n     }\n \n+    /**\n+     * Format the given object into a String.", "originalCommit": "0f6c1a64f241e25d809b70c22eee0a2baf986c8e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "082878c0e568a01bd2f5b72fdb48c2a7efec711e", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\nindex 96d9848f2..27e76c07d 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\n\n@@ -262,7 +262,8 @@ public abstract class AbstractCFGVisualizer<\n     }\n \n     /**\n-     * Format the given object into a String.\n+     * Format the given object as a String suitable for the output format, i.e. with format-specific\n+     * characters escaped.\n      *\n      * @param obj an object\n      * @return the formatted String from the given object\n"}}, {"oid": "082878c0e568a01bd2f5b72fdb48c2a7efec711e", "url": "https://github.com/typetools/checker-framework/commit/082878c0e568a01bd2f5b72fdb48c2a7efec711e", "message": "Pull the latest code. Resolve comments.", "committedDate": "2020-06-25T20:42:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDk2MA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445830960", "bodyText": "Now that the two visualizeBlockNode methods are exactly the same, should we just remove them and make the Helper the real implementation in AbstractCFGVisualizer?", "author": "wmdietl", "createdAt": "2020-06-25T20:51:41Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -206,21 +206,14 @@ protected String dotOutputFileName(UnderlyingAST ast) {\n         return outFileName;\n     }\n \n+    @Override\n+    protected String format(Object obj) {\n+        return escapeDoubleQuotes(obj);\n+    }\n+\n     @Override\n     public String visualizeBlockNode(Node t, @Nullable Analysis<V, S, T> analysis) {", "originalCommit": "082878c0e568a01bd2f5b72fdb48c2a7efec711e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e0ee51b71aa12aca81a2b16b2e04ddbf2f5eecf", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\nindex 62f88488b..b760c1765 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java\n\n@@ -211,11 +210,6 @@ public class DOTCFGVisualizer<\n         return escapeDoubleQuotes(obj);\n     }\n \n-    @Override\n-    public String visualizeBlockNode(Node t, @Nullable Analysis<V, S, T> analysis) {\n-        return visualizeBlockNodeHelper(t, analysis);\n-    }\n-\n     @Override\n     public String visualizeStoreThisVal(V value) {\n         return storeEntryIndent + \"this > \" + value + leftJustifiedTerminator;\n"}}, {"oid": "4e0ee51b71aa12aca81a2b16b2e04ddbf2f5eecf", "url": "https://github.com/typetools/checker-framework/commit/4e0ee51b71aa12aca81a2b16b2e04ddbf2f5eecf", "message": "Resolve comments.", "committedDate": "2020-06-26T01:15:26Z", "type": "commit"}, {"oid": "f614780715da9ab08deba3aa4c2a78f830841be5", "url": "https://github.com/typetools/checker-framework/commit/f614780715da9ab08deba3aa4c2a78f830841be5", "message": "Improve visualizer.", "committedDate": "2020-06-26T18:00:57Z", "type": "commit"}, {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5", "url": "https://github.com/typetools/checker-framework/commit/8b336186edc370098ad2a92c7d2ca50a42b071b5", "message": "Improve code.", "committedDate": "2020-06-26T22:40:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjI4Ng==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466286", "bodyText": "What happens if analysis is null? Before, it looks like an escapeString is appended when it is a SPECIAL_BLOCK.\nIs that missing now? Is that a problem or intended?", "author": "wmdietl", "createdAt": "2020-06-27T01:15:40Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "diffHunk": "@@ -204,20 +201,17 @@ protected String visualizeBlockHelper(\n                     @SuppressWarnings(\"nullness:contracts.precondition.not.satisfied\")\n                     S store = analysis.getResult().getStoreAfter(lastNode);\n                     StringBuilder sbStore = new StringBuilder();\n-                    sbStore.append(escapeString).append(\"~~~~~~~~~\").append(escapeString);\n+                    sbStore.append(\"~~~~~~~~~\").append(escapeString);\n                     sbStore.append(\"After: \");\n                     if (store != null) {\n                         sbStore.append(visualizeStore(store));\n                     } else {\n-                        sbStore.append(\"null store\");\n+                        sbStore.append(\"null store\").append(escapeString);\n                     }\n                     sbBlock.append(sbStore);\n                 }\n             }\n         }\n-        if (!centered) {", "originalCommit": "8b336186edc370098ad2a92c7d2ca50a42b071b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MTE3MA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446471170", "bodyText": "It is intended, this logic is no longer needed.\nvisualizeSpecialBlockHelper should be responsible for making special blocks centered. DOTCFGVisualizer now passes a separator to visualizeSpecialBlockHelper: https://github.com/typetools/checker-framework/pull/3395/files#diff-f708a265ff3b24e68538c35aef4dfb7eR136\nNow in this situation, when the analysis is null, a special block in DOT will be like: [shape=oval label=\"<entry>\\n\"] (already centered).", "author": "xingweitian", "createdAt": "2020-06-27T02:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b8363a9328de7041d536ea7d1d9a0f5cdd4c3a35", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\nindex c598305b6..0517a3f65 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java\n\n@@ -193,22 +195,11 @@ public abstract class AbstractCFGVisualizer<\n \n         // Visualize transfer input if necessary.\n         if (analysis != null) {\n-            // The transfer input before this block is added before the block content.\n-            sbBlock.insert(0, visualizeBlockTransferInput(bb, analysis));\n+            sbBlock.insert(0, visualizeBlockTransferInputBefore(bb, analysis));\n             if (verbose) {\n                 Node lastNode = getLastNode(bb);\n                 if (lastNode != null) {\n-                    @SuppressWarnings(\"nullness:contracts.precondition.not.satisfied\")\n-                    S store = analysis.getResult().getStoreAfter(lastNode);\n-                    StringBuilder sbStore = new StringBuilder();\n-                    sbStore.append(\"~~~~~~~~~\").append(escapeString);\n-                    sbStore.append(\"After: \");\n-                    if (store != null) {\n-                        sbStore.append(visualizeStore(store));\n-                    } else {\n-                        sbStore.append(\"null store\").append(escapeString);\n-                    }\n-                    sbBlock.append(sbStore);\n+                    sbBlock.append(visualizeBlockTransferInputAfter(bb, analysis));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjY0NQ==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466645", "bodyText": "Let's not use wildcard imports.", "author": "wmdietl", "createdAt": "2020-06-27T01:19:35Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -1,10 +1,6 @@\n package org.checkerframework.dataflow.cfg;\n \n-import java.util.HashMap;\n-import java.util.IdentityHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "8b336186edc370098ad2a92c7d2ca50a42b071b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MTMyMA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446471320", "bodyText": "Thanks for catching it! Fixed.", "author": "xingweitian", "createdAt": "2020-06-27T02:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "35de3da62ca2b620ff875cdb490670355852f96f", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\nindex 33a7f3cb8..2a9dd5b03 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n\n@@ -1,6 +1,11 @@\n package org.checkerframework.dataflow.cfg;\n \n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n import org.checkerframework.checker.nullness.qual.KeyFor;\n import org.checkerframework.checker.nullness.qual.Nullable;\n import org.checkerframework.dataflow.analysis.AbstractValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Njc3OQ==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466779", "bodyText": "Would it be hard to track down where the trailing spaces are coming from and make the output proper by construction?", "author": "wmdietl", "createdAt": "2020-06-27T01:20:36Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -25,7 +20,7 @@\n     @Override\n     public Map<String, Object> visualize(\n             ControlFlowGraph cfg, Block entry, @Nullable Analysis<V, S, T> analysis) {\n-        String stringGraph = visualizeGraph(cfg, entry, analysis);\n+        String stringGraph = visualizeGraph(cfg, entry, analysis).trim();", "originalCommit": "8b336186edc370098ad2a92c7d2ca50a42b071b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NTY0Ng==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446475646", "bodyText": "I just came up with another way to avoid trailing spaces. Thanks for the remind!", "author": "xingweitian", "createdAt": "2020-06-27T02:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Njc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "126bc36a6ba68e0cc1b48128f953d79863844519", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\nindex 33a7f3cb8..bbeccdcfc 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n\n@@ -20,7 +26,7 @@ public class StringCFGVisualizer<\n     @Override\n     public Map<String, Object> visualize(\n             ControlFlowGraph cfg, Block entry, @Nullable Analysis<V, S, T> analysis) {\n-        String stringGraph = visualizeGraph(cfg, entry, analysis).trim();\n+        String stringGraph = visualizeGraph(cfg, entry, analysis);\n         Map<String, Object> res = new HashMap<>();\n         res.put(\"stringGraph\", stringGraph);\n         return res;\n"}}, {"oid": "35de3da62ca2b620ff875cdb490670355852f96f", "url": "https://github.com/typetools/checker-framework/commit/35de3da62ca2b620ff875cdb490670355852f96f", "message": "Resolve comments.", "committedDate": "2020-06-27T02:05:36Z", "type": "commit"}, {"oid": "126bc36a6ba68e0cc1b48128f953d79863844519", "url": "https://github.com/typetools/checker-framework/commit/126bc36a6ba68e0cc1b48128f953d79863844519", "message": "Resolve comments.", "committedDate": "2020-06-27T02:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDA2OA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446910068", "bodyText": "Can you add a comment why the lineSeparator is only needed in this case?\nWasn't it nicer before with the Helper method that reduced duplication?", "author": "wmdietl", "createdAt": "2020-06-29T11:50:32Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -73,15 +65,25 @@ public String visualizeBlock(Block bb, @Nullable Analysis<V, S, T> analysis) {\n \n     @Override\n     public String visualizeSpecialBlock(SpecialBlock sbb) {\n-        return super.visualizeSpecialBlockHelper(sbb, lineSeparator);\n+        switch (sbb.getSpecialType()) {\n+            case ENTRY:\n+                return \"<entry>\" + lineSeparator;", "originalCommit": "126bc36a6ba68e0cc1b48128f953d79863844519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1MzkyNA==", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r447353924", "bodyText": "I have pushed a better solution... The previous change has been reverted.", "author": "xingweitian", "createdAt": "2020-06-30T01:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "a58a7aa7ffd74e6d49f2d8a82d5a406d9f954edc", "chunk": "diff --git a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\nindex bbeccdcfc..2a9dd5b03 100644\n--- a/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n+++ b/dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java\n\n@@ -65,16 +64,7 @@ public class StringCFGVisualizer<\n \n     @Override\n     public String visualizeSpecialBlock(SpecialBlock sbb) {\n-        switch (sbb.getSpecialType()) {\n-            case ENTRY:\n-                return \"<entry>\" + lineSeparator;\n-            case EXIT:\n-                return \"<exit>\";\n-            case EXCEPTIONAL_EXIT:\n-                return \"<exceptional-exit>\";\n-            default:\n-                throw new BugInCF(\"Unrecognized special block type: \" + sbb.getType());\n-        }\n+        return super.visualizeSpecialBlockHelper(sbb, lineSeparator);\n     }\n \n     @Override\n"}}, {"oid": "a58a7aa7ffd74e6d49f2d8a82d5a406d9f954edc", "url": "https://github.com/typetools/checker-framework/commit/a58a7aa7ffd74e6d49f2d8a82d5a406d9f954edc", "message": "Revert \"Resolve comments.\"\n\nThis reverts commit 126bc36a", "committedDate": "2020-06-30T01:01:04Z", "type": "commit"}, {"oid": "c1b06c3e44846318f643d84b98c8d390257f11fd", "url": "https://github.com/typetools/checker-framework/commit/c1b06c3e44846318f643d84b98c8d390257f11fd", "message": "A better solution.", "committedDate": "2020-06-30T01:26:44Z", "type": "commit"}, {"oid": "5a85e0fb44b0e93aa484d2953c8f6cbfd9f7e6a3", "url": "https://github.com/typetools/checker-framework/commit/5a85e0fb44b0e93aa484d2953c8f6cbfd9f7e6a3", "message": "Merge remote-tracking branch 'typetools/master' into typetools-improve-visualizer", "committedDate": "2020-06-30T01:27:16Z", "type": "commit"}, {"oid": "d4a985050e4b1d6505654cd9a1aaefc9f43b7b82", "url": "https://github.com/typetools/checker-framework/commit/d4a985050e4b1d6505654cd9a1aaefc9f43b7b82", "message": "Remove trim().", "committedDate": "2020-06-30T01:32:46Z", "type": "commit"}, {"oid": "b8363a9328de7041d536ea7d1d9a0f5cdd4c3a35", "url": "https://github.com/typetools/checker-framework/commit/b8363a9328de7041d536ea7d1d9a0f5cdd4c3a35", "message": "Pull the lasted code.", "committedDate": "2020-06-30T19:28:02Z", "type": "commit"}]}