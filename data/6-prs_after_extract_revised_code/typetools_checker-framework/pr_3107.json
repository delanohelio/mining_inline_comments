{"pr_number": 3107, "pr_title": "Handle uninferred type parameter in array accesses (Fixes #3020)", "pr_createdAt": "2020-02-25T14:26:59Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3107", "timeline": [{"oid": "259ac1dcaff0b244d88f957d40e7e7a4450325de", "url": "https://github.com/typetools/checker-framework/commit/259ac1dcaff0b244d88f957d40e7e7a4450325de", "message": "Handle uninferred type parameter in array accesses.", "committedDate": "2020-02-25T14:25:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MDExNA==", "url": "https://github.com/typetools/checker-framework/pull/3107#discussion_r384140114", "bodyText": "Should this is TypeKinds instead of instanceof?", "author": "smillst", "createdAt": "2020-02-25T21:35:41Z", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "diffHunk": "@@ -224,8 +225,17 @@ public AnnotatedTypeMirror visitArrayAccess(ArrayAccessTree node, AnnotatedTypeF\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            assert type instanceof AnnotatedArrayType;\n-            return ((AnnotatedArrayType) type).getComponentType();\n+            if (type instanceof AnnotatedArrayType) {", "originalCommit": "259ac1dcaff0b244d88f957d40e7e7a4450325de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25cab2f0c85c19caa0e8032329e50639602eb432", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java b/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\nindex 3dea8c5f33..681b15b7d4 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\n\n@@ -225,12 +225,12 @@ class TypeFromExpressionVisitor extends TypeFromTreeVisitor {\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            if (type instanceof AnnotatedArrayType) {\n+            if (type.getKind() == TypeKind.ARRAY) {\n                 return ((AnnotatedArrayType) type).getComponentType();\n-            } else if (type instanceof AnnotatedWildcardType) {\n+            } else if (type.getKind() == TypeKind.WILDCARD\n+                    && ((AnnotatedWildcardType) type).isUninferredTypeArgument()) {\n                 // Clean-up after Issue #979.\n-                AnnotatedWildcardType wc = (AnnotatedWildcardType) type;\n-                AnnotatedTypeMirror wcbound = wc.getExtendsBound();\n+                AnnotatedTypeMirror wcbound = ((AnnotatedWildcardType) type).getExtendsBound();\n                 if (wcbound instanceof AnnotatedArrayType) {\n                     return ((AnnotatedArrayType) wcbound).getComponentType();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MDgwMA==", "url": "https://github.com/typetools/checker-framework/pull/3107#discussion_r384140800", "bodyText": "Do you expect this to be an uninferred type argument? If so should we check that it is?", "author": "smillst", "createdAt": "2020-02-25T21:37:07Z", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java", "diffHunk": "@@ -224,8 +225,17 @@ public AnnotatedTypeMirror visitArrayAccess(ArrayAccessTree node, AnnotatedTypeF\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            assert type instanceof AnnotatedArrayType;\n-            return ((AnnotatedArrayType) type).getComponentType();\n+            if (type instanceof AnnotatedArrayType) {\n+                return ((AnnotatedArrayType) type).getComponentType();\n+            } else if (type instanceof AnnotatedWildcardType) {\n+                // Clean-up after Issue #979.\n+                AnnotatedWildcardType wc = (AnnotatedWildcardType) type;", "originalCommit": "259ac1dcaff0b244d88f957d40e7e7a4450325de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25cab2f0c85c19caa0e8032329e50639602eb432", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java b/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\nindex 3dea8c5f33..681b15b7d4 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/TypeFromExpressionVisitor.java\n\n@@ -225,12 +225,12 @@ class TypeFromExpressionVisitor extends TypeFromTreeVisitor {\n             f.visitorState.setAssignmentContext(null);\n \n             AnnotatedTypeMirror type = f.getAnnotatedType(node.getExpression());\n-            if (type instanceof AnnotatedArrayType) {\n+            if (type.getKind() == TypeKind.ARRAY) {\n                 return ((AnnotatedArrayType) type).getComponentType();\n-            } else if (type instanceof AnnotatedWildcardType) {\n+            } else if (type.getKind() == TypeKind.WILDCARD\n+                    && ((AnnotatedWildcardType) type).isUninferredTypeArgument()) {\n                 // Clean-up after Issue #979.\n-                AnnotatedWildcardType wc = (AnnotatedWildcardType) type;\n-                AnnotatedTypeMirror wcbound = wc.getExtendsBound();\n+                AnnotatedTypeMirror wcbound = ((AnnotatedWildcardType) type).getExtendsBound();\n                 if (wcbound instanceof AnnotatedArrayType) {\n                     return ((AnnotatedArrayType) wcbound).getComponentType();\n                 }\n"}}, {"oid": "82275791d85ad84fdc7015b0a55c86700d5ee2d5", "url": "https://github.com/typetools/checker-framework/commit/82275791d85ad84fdc7015b0a55c86700d5ee2d5", "message": "Merge branch 'master' of github.com:typetools/checker-framework into issue3020", "committedDate": "2020-02-27T19:31:28Z", "type": "commit"}, {"oid": "25cab2f0c85c19caa0e8032329e50639602eb432", "url": "https://github.com/typetools/checker-framework/commit/25cab2f0c85c19caa0e8032329e50639602eb432", "message": "Improvements.", "committedDate": "2020-02-27T19:37:38Z", "type": "commit"}]}