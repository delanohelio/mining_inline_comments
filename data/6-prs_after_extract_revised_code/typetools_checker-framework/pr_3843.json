{"pr_number": 3843, "pr_title": "sideEffectsUnrefineAliases feature", "pr_createdAt": "2020-10-29T15:37:59Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3843", "timeline": [{"oid": "0740add202f0acbae73ce8ed1ea472fd65dc0e91", "url": "https://github.com/typetools/checker-framework/commit/0740add202f0acbae73ce8ed1ea472fd65dc0e91", "message": "Tweak comments", "committedDate": "2020-10-29T04:34:58Z", "type": "commit"}, {"oid": "904b559180ecdabab1fc363e2dab70291658be32", "url": "https://github.com/typetools/checker-framework/commit/904b559180ecdabab1fc363e2dab70291658be32", "message": "sideEffectsUnrefineAliases feature", "committedDate": "2020-10-29T04:42:56Z", "type": "commit"}, {"oid": "75ad1dc40a1904c64357c2df771ef2a72b7d29ef", "url": "https://github.com/typetools/checker-framework/commit/75ad1dc40a1904c64357c2df771ef2a72b7d29ef", "message": "Merge ../checker-framework-branch-master into sideEffectsUnrefineAliases", "committedDate": "2020-10-29T04:44:30Z", "type": "commit"}, {"oid": "093eb9a3e54570796666345675824ebb0c426eb4", "url": "https://github.com/typetools/checker-framework/commit/093eb9a3e54570796666345675824ebb0c426eb4", "message": "Merge ../checker-framework-branch-master into sideEffectsUnrefineAliases", "committedDate": "2020-10-29T04:50:50Z", "type": "commit"}, {"oid": "33b3951249d1db502bd3051a898b613ae6bd95e1", "url": "https://github.com/typetools/checker-framework/commit/33b3951249d1db502bd3051a898b613ae6bd95e1", "message": "Add comment", "committedDate": "2020-10-29T05:03:01Z", "type": "commit"}, {"oid": "d28bdb20774758afef9519331815142a489f2912", "url": "https://github.com/typetools/checker-framework/commit/d28bdb20774758afef9519331815142a489f2912", "message": "Set field for KeyForSubchecker", "committedDate": "2020-10-29T05:11:27Z", "type": "commit"}, {"oid": "120e06b0ce2dee4dcb56a98c75f27d8fae92c7c4", "url": "https://github.com/typetools/checker-framework/commit/120e06b0ce2dee4dcb56a98c75f27d8fae92c7c4", "message": "Add TODO and test that ought to issue a warning", "committedDate": "2020-10-29T05:23:08Z", "type": "commit"}, {"oid": "552e6eea0e4d2cff9670ae7c6c13dc2475d522e3", "url": "https://github.com/typetools/checker-framework/commit/552e6eea0e4d2cff9670ae7c6c13dc2475d522e3", "message": "Disable sideEffectsUnrefineAliases for KeyFor Checker", "committedDate": "2020-10-29T14:35:19Z", "type": "commit"}, {"oid": "f02f02255fa609bb1cc9ddff4cd178ac4e400c81", "url": "https://github.com/typetools/checker-framework/commit/f02f02255fa609bb1cc9ddff4cd178ac4e400c81", "message": "Add Javadoc", "committedDate": "2020-10-29T14:54:05Z", "type": "commit"}, {"oid": "4d804271bbe0b99de649a45b1a9bb29f4cd9986f", "url": "https://github.com/typetools/checker-framework/commit/4d804271bbe0b99de649a45b1a9bb29f4cd9986f", "message": "Transfer function doesn't need field sideEffectsUnrefineAliases", "committedDate": "2020-10-29T15:25:58Z", "type": "commit"}, {"oid": "54830fcc0e397a97b86a6ab2cbe693edcf702bc6", "url": "https://github.com/typetools/checker-framework/commit/54830fcc0e397a97b86a6ab2cbe693edcf702bc6", "message": "Tweak comments", "committedDate": "2020-10-29T15:29:32Z", "type": "commit"}, {"oid": "2e98954b4cdf52016c445d9d581133d098dc0373", "url": "https://github.com/typetools/checker-framework/commit/2e98954b4cdf52016c445d9d581133d098dc0373", "message": "Merge ../checker-framework-branch-master into sideEffectsUnrefineAliases", "committedDate": "2020-10-29T15:33:09Z", "type": "commit"}, {"oid": "be77e06f7c7f31fbb2e5cfa67a3508ac66db5ed9", "url": "https://github.com/typetools/checker-framework/commit/be77e06f7c7f31fbb2e5cfa67a3508ac66db5ed9", "message": "Move comment", "committedDate": "2020-10-29T16:00:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NTc2Mw==", "url": "https://github.com/typetools/checker-framework/pull/3843#discussion_r514555763", "bodyText": "Nit: I would probably move move this if/else to a helper method to reduce the indentation.", "author": "smillst", "createdAt": "2020-10-29T20:45:51Z", "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractStore.java", "diffHunk": "@@ -199,54 +199,73 @@ public void updateForMethodCall(\n         if (!(analysis.checker.hasOption(\"assumeSideEffectFree\")\n                 || analysis.checker.hasOption(\"assumePure\")\n                 || isSideEffectFree(atypeFactory, method))) {\n-            // update field values\n-            Map<FieldAccess, V> newFieldValues = new HashMap<>();\n-            for (Map.Entry<FieldAccess, V> e : fieldValues.entrySet()) {\n-                FieldAccess fieldAccess = e.getKey();\n-                V otherVal = e.getValue();\n \n-                // case 3: the field has a monotonic annotation\n-                if (!((GenericAnnotatedTypeFactory<?, ?, ?, ?>) atypeFactory)\n-                        .getSupportedMonotonicTypeQualifiers()\n-                        .isEmpty()) {\n-                    List<Pair<AnnotationMirror, AnnotationMirror>> fieldAnnotations =\n-                            atypeFactory.getAnnotationWithMetaAnnotation(\n-                                    fieldAccess.getField(), MonotonicQualifier.class);\n-                    V newOtherVal = null;\n-                    for (Pair<AnnotationMirror, AnnotationMirror> fieldAnnotation :\n-                            fieldAnnotations) {\n-                        AnnotationMirror monotonicAnnotation = fieldAnnotation.second;\n-                        Name annotation =\n-                                AnnotationUtils.getElementValueClassName(\n-                                        monotonicAnnotation, \"value\", false);\n-                        AnnotationMirror target =\n-                                AnnotationBuilder.fromName(\n-                                        atypeFactory.getElementUtils(), annotation);\n-                        // Make sure the 'target' annotation is present.\n-                        if (AnnotationUtils.containsSame(otherVal.getAnnotations(), target)) {\n-                            newOtherVal =\n-                                    analysis.createSingleAnnotationValue(\n-                                                    target, otherVal.getUnderlyingType())\n-                                            .mostSpecific(newOtherVal, null);\n+            // update local variables\n+            // TODO: Also remove if any element/argument to the annotation is not\n+            // isUnmodifiableByOtherCode.  Example: @KeyFor(\"valueThatCanBeMutated\").\n+            if (analysis.checker.sideEffectsUnrefineAliases) {\n+                localVariableValues\n+                        .entrySet()\n+                        .removeIf(e -> !e.getKey().isUnmodifiableByOtherCode());\n+            }\n+\n+            // update this value\n+            if (analysis.checker.sideEffectsUnrefineAliases) {\n+                thisValue = null;\n+            }\n+\n+            // update field values\n+            if (analysis.checker.sideEffectsUnrefineAliases) {", "originalCommit": "be77e06f7c7f31fbb2e5cfa67a3508ac66db5ed9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4Nzk1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3843#discussion_r514587952", "bodyText": "Let's put this off for now, and revisit the indentation issue later.", "author": "mernst", "createdAt": "2020-10-29T21:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NTc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c68b73e10450a207ee271d48aaf5e727acd44271", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractStore.java b/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractStore.java\nindex 0fbb4316e..4f106dcf6 100644\n--- a/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractStore.java\n+++ b/framework/src/main/java/org/checkerframework/framework/flow/CFAbstractStore.java\n\n@@ -200,22 +200,25 @@ public abstract class CFAbstractStore<V extends CFAbstractValue<V>, S extends CF\n                 || analysis.checker.hasOption(\"assumePure\")\n                 || isSideEffectFree(atypeFactory, method))) {\n \n+            boolean sideEffectsUnrefineAliases =\n+                    ((GenericAnnotatedTypeFactory) atypeFactory).sideEffectsUnrefineAliases;\n+\n             // update local variables\n             // TODO: Also remove if any element/argument to the annotation is not\n             // isUnmodifiableByOtherCode.  Example: @KeyFor(\"valueThatCanBeMutated\").\n-            if (analysis.checker.sideEffectsUnrefineAliases) {\n+            if (sideEffectsUnrefineAliases) {\n                 localVariableValues\n                         .entrySet()\n                         .removeIf(e -> !e.getKey().isUnmodifiableByOtherCode());\n             }\n \n             // update this value\n-            if (analysis.checker.sideEffectsUnrefineAliases) {\n+            if (sideEffectsUnrefineAliases) {\n                 thisValue = null;\n             }\n \n             // update field values\n-            if (analysis.checker.sideEffectsUnrefineAliases) {\n+            if (sideEffectsUnrefineAliases) {\n                 fieldValues.entrySet().removeIf(e -> !e.getKey().isUnmodifiableByOtherCode());\n             } else {\n                 Map<FieldAccess, V> newFieldValues = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1Nzc4MA==", "url": "https://github.com/typetools/checker-framework/pull/3843#discussion_r514557780", "bodyText": "Since this field is only used by checkers that use dataflow, it should be in GenericAnnotatedTypeFactory.", "author": "smillst", "createdAt": "2020-10-29T20:49:43Z", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -479,6 +479,17 @@\n      */\n     private Map<String, String> activeOptions;\n \n+    /**\n+     * Should the analysis assume that side effects to a value can change the type of aliased\n+     * references?\n+     *\n+     * <p>For many type systems, once a local variable's type is refined, side effects to the\n+     * variable's value do not change the variable's type annotations. For some type systems, a side\n+     * effect to the value could change them; set this field to true.\n+     */\n+    // Not final so that subclasses can set it.\n+    public boolean sideEffectsUnrefineAliases = false;", "originalCommit": "be77e06f7c7f31fbb2e5cfa67a3508ac66db5ed9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c68b73e10450a207ee271d48aaf5e727acd44271", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\nindex 9bb656371..1d32abe64 100644\n--- a/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n+++ b/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n\n@@ -479,17 +479,6 @@ public abstract class SourceChecker extends AbstractTypeProcessor\n      */\n     private Map<String, String> activeOptions;\n \n-    /**\n-     * Should the analysis assume that side effects to a value can change the type of aliased\n-     * references?\n-     *\n-     * <p>For many type systems, once a local variable's type is refined, side effects to the\n-     * variable's value do not change the variable's type annotations. For some type systems, a side\n-     * effect to the value could change them; set this field to true.\n-     */\n-    // Not final so that subclasses can set it.\n-    public boolean sideEffectsUnrefineAliases = false;\n-\n     /**\n      * The string that separates the checker name from the option name in a \"-A\" command-line\n      * argument. This string may only consist of valid Java identifier part characters, because it\n"}}, {"oid": "c68b73e10450a207ee271d48aaf5e727acd44271", "url": "https://github.com/typetools/checker-framework/commit/c68b73e10450a207ee271d48aaf5e727acd44271", "message": "Move field from SourceChecker to GenericAnnotatedTypeFactory", "committedDate": "2020-10-29T21:21:20Z", "type": "commit"}, {"oid": "7e79a9d9abf2449a2cb6a0fdcd8bb29eb716416d", "url": "https://github.com/typetools/checker-framework/commit/7e79a9d9abf2449a2cb6a0fdcd8bb29eb716416d", "message": "Merge ../checker-framework-branch-master into sideEffectsUnrefineAliases", "committedDate": "2020-10-29T21:22:03Z", "type": "commit"}, {"oid": "534747c54a3128e0ba19e5a59c7f580c8bae6f2e", "url": "https://github.com/typetools/checker-framework/commit/534747c54a3128e0ba19e5a59c7f580c8bae6f2e", "message": "Document why nested class is not static", "committedDate": "2020-10-29T21:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMjYwMg==", "url": "https://github.com/typetools/checker-framework/pull/3843#discussion_r514602602", "bodyText": "This needs to move, too.", "author": "smillst", "createdAt": "2020-10-29T22:25:29Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/KeyForSubchecker.java", "diffHunk": "@@ -9,4 +9,11 @@\n  * @checker_framework.manual #map-key-checker Map Key Checker\n  * @checker_framework.manual #nullness-checker Nullness Checker\n  */\n-public class KeyForSubchecker extends BaseTypeChecker {}\n+public class KeyForSubchecker extends BaseTypeChecker {\n+    {\n+        // While strictly required for soundness, this leads to too many false positives.  Printing\n+        // a key or putting it in a map erases all knowledge of what maps it was a key for.\n+        // TODO: Revisit when side effect annotations are more precise.\n+        // this.sideEffectsUnrefineAliases = true;", "originalCommit": "7e79a9d9abf2449a2cb6a0fdcd8bb29eb716416d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNjA1OQ==", "url": "https://github.com/typetools/checker-framework/pull/3843#discussion_r514606059", "bodyText": "Thanks for catching that.  I found one other reference that needed to be changed, too.", "author": "mernst", "createdAt": "2020-10-29T22:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMjYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "6282116472bc0ca963249296a56707140137c6fd", "chunk": "diff --git a/checker/src/main/java/org/checkerframework/checker/nullness/KeyForSubchecker.java b/checker/src/main/java/org/checkerframework/checker/nullness/KeyForSubchecker.java\nindex ed918fcc6..3ab7b9c2c 100644\n--- a/checker/src/main/java/org/checkerframework/checker/nullness/KeyForSubchecker.java\n+++ b/checker/src/main/java/org/checkerframework/checker/nullness/KeyForSubchecker.java\n\n@@ -9,11 +9,4 @@ import org.checkerframework.common.basetype.BaseTypeChecker;\n  * @checker_framework.manual #map-key-checker Map Key Checker\n  * @checker_framework.manual #nullness-checker Nullness Checker\n  */\n-public class KeyForSubchecker extends BaseTypeChecker {\n-    {\n-        // While strictly required for soundness, this leads to too many false positives.  Printing\n-        // a key or putting it in a map erases all knowledge of what maps it was a key for.\n-        // TODO: Revisit when side effect annotations are more precise.\n-        // this.sideEffectsUnrefineAliases = true;\n-    }\n-}\n+public class KeyForSubchecker extends BaseTypeChecker {}\n"}}, {"oid": "6282116472bc0ca963249296a56707140137c6fd", "url": "https://github.com/typetools/checker-framework/commit/6282116472bc0ca963249296a56707140137c6fd", "message": "Adapt to moved field", "committedDate": "2020-10-29T22:31:19Z", "type": "commit"}, {"oid": "b715d94f1872be5f3f57c36f43f88070ac087c9e", "url": "https://github.com/typetools/checker-framework/commit/b715d94f1872be5f3f57c36f43f88070ac087c9e", "message": "Update another comment", "committedDate": "2020-10-29T22:32:37Z", "type": "commit"}, {"oid": "7024e2be26fb863ddb57d6a57416ae84eedf2053", "url": "https://github.com/typetools/checker-framework/commit/7024e2be26fb863ddb57d6a57416ae84eedf2053", "message": "Merge ../checker-framework-branch-master into sideEffectsUnrefineAliases", "committedDate": "2020-10-29T22:32:53Z", "type": "commit"}]}