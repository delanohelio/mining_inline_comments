{"pr_number": 3995, "pr_title": "Add support for AnnotatedFor in stub files.", "pr_createdAt": "2020-12-11T23:48:03Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3995", "timeline": [{"oid": "ca9edc1106beecb7087d8af72fdb305da81a15bd", "url": "https://github.com/typetools/checker-framework/commit/ca9edc1106beecb7087d8af72fdb305da81a15bd", "message": "Delete jaifs before testing stubs.", "committedDate": "2020-12-11T19:49:26Z", "type": "commit"}, {"oid": "803977dc98e9ec8b329c5078d9d2d9e33db95408", "url": "https://github.com/typetools/checker-framework/commit/803977dc98e9ec8b329c5078d9d2d9e33db95408", "message": "Add support for AnnotatedFor in stub files.", "committedDate": "2020-12-11T23:30:26Z", "type": "commit"}, {"oid": "3a19732b11750a0cccf7318822df8d84d3b4efda", "url": "https://github.com/typetools/checker-framework/commit/3a19732b11750a0cccf7318822df8d84d3b4efda", "message": "Revert \"Delete jaifs before testing stubs.\"\n\nThis reverts commit ca9edc1106beecb7087d8af72fdb305da81a15bd.", "committedDate": "2020-12-11T23:35:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyMjk4Ng==", "url": "https://github.com/typetools/checker-framework/pull/3995#discussion_r544422986", "bodyText": "I had to read this sentence a couple of times.  Can you remove \"that {@link ...}\", or change it to \"Does an {@link ...} apply to this checker?\"?", "author": "mernst", "createdAt": "2020-12-16T16:06:54Z", "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -4528,4 +4529,23 @@ public boolean containsSameByClass(\n     protected WholeProgramInference createWholeProgramInference() {\n         return new WholeProgramInferenceScenes(this);\n     }\n+\n+    /**\n+     * Does that {@link org.checkerframework.framework.qual.AnnotatedFor}, {@code anno} annotation", "originalCommit": "3a19732b11750a0cccf7318822df8d84d3b4efda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "615438d9560479b1bdcf1e37d356db73d55a26d4", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\nindex 5f2e8752ba..a7c21acf97 100644\n--- a/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n+++ b/framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java\n\n@@ -4531,8 +4608,8 @@ public class AnnotatedTypeFactory implements AnnotationProvider {\n     }\n \n     /**\n-     * Does that {@link org.checkerframework.framework.qual.AnnotatedFor}, {@code anno} annotation\n-     * apply to this checker?\n+     * Does {@code anno}, which is an {@link org.checkerframework.framework.qual.AnnotatedFor}\n+     * annotation, apply to this checker?\n      *\n      * @param anno an {@link org.checkerframework.framework.qual.AnnotatedFor} annotation\n      * @return whether {@code anno} applies to this checker\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyMzAyMA==", "url": "https://github.com/typetools/checker-framework/pull/3995#discussion_r544423020", "bodyText": "I find this name a bit confusing.  The name implies that the method returns true whenever there is no @AnnotatedFor(\"ThisChecker\") annotation.  The name doesAnnotatedForApplyToThisChecker that this method uses is also clearer.  Could you choose a more descriptive name for this method?  Maybe hasAnnotatedForWithoutThisChecker, though you may be able to come up with a better name.\nAlso, please improve the Javadoc overview.   Add a first sentence that says this method returns true if the element is definitely not annotated for this checker, and returns false if it might or might not be annotated for this checker.  That explains the semantics of the operation and would have helped me understand the method.  (The current comment is useful, but it just recapitulates the definition.)  With this change, maybe the name change could be smaller, or maybe the current name could be retained.", "author": "mernst", "createdAt": "2020-12-16T16:06:56Z", "path": "framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java", "diffHunk": "@@ -1745,6 +1750,33 @@ private PackageElement findPackage(String packageName) {\n         return packageElement;\n     }\n \n+    /**\n+     * Returns true if one of the annotations is {@link AnnotatedFor} and its list of checkers does\n+     * not contain this checker.\n+     *\n+     * @param annotations a list of JavaParser annotations\n+     * @return true if one of the annotations is {@link AnnotatedFor} and its list of checkers does\n+     *     not contain this checker\n+     */\n+    private boolean notAnnotatedForThisChecker(List<AnnotationExpr> annotations) {", "originalCommit": "3a19732b11750a0cccf7318822df8d84d3b4efda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a06b2f73ca8e0c029b4f00cc0821f060519c0b65", "chunk": "diff --git a/framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java b/framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java\nindex 7f5ae4bd5b..b8d374e307 100644\n--- a/framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java\n+++ b/framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java\n\n@@ -1728,24 +1794,29 @@ public class AnnotationFileParser {\n      * @param typeName a type name\n      * @param msg a warning message to issue if the type element for {@code typeName} cannot be\n      *     found\n+     * @param astNode where to report errors\n      * @return the type element for the given fully-qualified type name, or null\n      */\n-    private TypeElement getTypeElement(@FullyQualifiedName String typeName, String... msg) {\n+    private TypeElement getTypeElement(\n+            @FullyQualifiedName String typeName, String msg, NodeWithRange<?> astNode) {\n         TypeElement classElement = elements.getTypeElement(typeName);\n         if (classElement == null) {\n-            if (msg.length == 0) {\n-                stubWarnNotFound(\"Type not found: \" + typeName);\n-            } else {\n-                stubWarnNotFound(msg[0] + \": \" + typeName);\n-            }\n+            stubWarnNotFound(astNode, msg + \": \" + typeName);\n         }\n         return classElement;\n     }\n \n-    private PackageElement findPackage(String packageName) {\n+    /**\n+     * Returns the element for the given package.\n+     *\n+     * @param packageName the package's name\n+     * @param astNode where to report errors\n+     * @return the element for the given package\n+     */\n+    private PackageElement findPackage(String packageName, NodeWithRange<?> astNode) {\n         PackageElement packageElement = elements.getPackageElement(packageName);\n         if (packageElement == null) {\n-            stubWarnNotFound(\"Imported package not found: \" + packageName);\n+            stubWarnNotFound(astNode, \"Imported package not found: \" + packageName);\n         }\n         return packageElement;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNjQxMA==", "url": "https://github.com/typetools/checker-framework/pull/3995#discussion_r544426410", "bodyText": "Does \"produce output\" refer to warning messages or something related to code generation?  Maybe you can change \"produce output\" to \"warn\".", "author": "mernst", "createdAt": "2020-12-16T16:10:58Z", "path": "framework/src/main/java/org/checkerframework/framework/stub/AnnotationFileParser.java", "diffHunk": "@@ -1002,27 +1013,21 @@ private void processParameters(\n      */\n     @SuppressWarnings(\"unused\") // for disabled warning message\n     private void clearAnnotations(AnnotatedTypeMirror atype, Type typeDef) {\n-        Set<AnnotationMirror> annos = atype.getAnnotations();\n-        // TODO: This should check whether the annotation file is @AnnotatedFor the current type\n-        // system.\n-        // @AnnotatedFor isn't integrated in stub files yet.\n-        if (annos != null && !annos.isEmpty()) {\n-            // TODO: only produce output if the removed annotation isn't the top and default\n-            // annotation in the type hierarchy.  See https://tinyurl.com/cfissue/2759 .\n-            /*\n-            if (false) {\n-                stubWarnOverwritesBytecode(\n-                        String.format(\n-                                \"in file %s at line %s removed existing annotations on type: %s\",\n-                                filename.substring(filename.lastIndexOf('/') + 1),\n-                                typeDef.getBegin().get().line,\n-                                atype.toString(true)));\n-            }\n-            */\n-            // Clear existing annotations, which only makes a difference for\n-            // type variables, but doesn't hurt in other cases.\n-            atype.clearAnnotations();\n+        // TODO: only produce output if the removed annotation isn't the top or default", "originalCommit": "3a19732b11750a0cccf7318822df8d84d3b4efda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a06b2f73ca8e0c029b4f00cc0821f060519c0b65", "url": "https://github.com/typetools/checker-framework/commit/a06b2f73ca8e0c029b4f00cc0821f060519c0b65", "message": "Merge remote-tracking branch 'origin/master' into annotatedForStubs", "committedDate": "2020-12-16T17:59:49Z", "type": "commit"}, {"oid": "615438d9560479b1bdcf1e37d356db73d55a26d4", "url": "https://github.com/typetools/checker-framework/commit/615438d9560479b1bdcf1e37d356db73d55a26d4", "message": "Address code review.", "committedDate": "2020-12-16T18:21:43Z", "type": "commit"}, {"oid": "3ec5682a7eded0077a458f777a4780c6e7a74c57", "url": "https://github.com/typetools/checker-framework/commit/3ec5682a7eded0077a458f777a4780c6e7a74c57", "message": "Make AnnotatedFor work for fully qualified class names.", "committedDate": "2020-12-16T18:49:34Z", "type": "commit"}]}