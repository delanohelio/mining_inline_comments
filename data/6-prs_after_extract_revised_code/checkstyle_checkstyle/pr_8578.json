{"pr_number": 8578, "pr_title": "Issue #8577: Records Support check update for ClassMemberImpliedModifier", "pr_createdAt": "2020-07-29T19:59:03Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8578", "timeline": [{"oid": "bd2cb931e4d05bffa242b791713e289a42ea426d", "url": "https://github.com/checkstyle/checkstyle/commit/bd2cb931e4d05bffa242b791713e289a42ea426d", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-06T16:37:40Z", "type": "forcePushed"}, {"oid": "1a70d213e737f48c5c8d4167560efa54b93afa6b", "url": "https://github.com/checkstyle/checkstyle/commit/1a70d213e737f48c5c8d4167560efa54b93afa6b", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-07T13:53:57Z", "type": "forcePushed"}, {"oid": "7af9ce235f44764adb355840f9b5f0d7208267fe", "url": "https://github.com/checkstyle/checkstyle/commit/7af9ce235f44764adb355840f9b5f0d7208267fe", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-07T15:15:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r467635193", "bodyText": "isInTypeBlock ?\nor isInEnumOrClassOrRecordBlock", "author": "romani", "createdAt": "2020-08-09T22:17:19Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -171,12 +203,13 @@ public void setViolateImpliedStaticOnNestedInterface(boolean violateImplied) {\n         return new int[] {\n             TokenTypes.INTERFACE_DEF,\n             TokenTypes.ENUM_DEF,\n+            TokenTypes.RECORD_DEF,\n         };\n     }\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n+        if (isInEnumClassOrRecordBlock(ast)) {", "originalCommit": "7af9ce235f44764adb355840f9b5f0d7208267fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MTk4NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r467671985", "bodyText": "@nmancus1, please do this renaming", "author": "romani", "createdAt": "2020-08-10T03:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0MTQ4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r468741481", "bodyText": "Done.", "author": "nmancus1", "createdAt": "2020-08-11T17:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzNTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "776580553b7c439d7fa1916cfd242d2141542194", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java\nindex 36500cca7..e4562af18 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java\n\n@@ -209,7 +209,7 @@ public class ClassMemberImpliedModifierCheck\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (isInEnumClassOrRecordBlock(ast)) {\n+        if (isInTypeBlock(ast)) {\n             final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);\n             switch (ast.getType()) {\n                 case TokenTypes.ENUM_DEF:\n"}}, {"oid": "776580553b7c439d7fa1916cfd242d2141542194", "url": "https://github.com/checkstyle/checkstyle/commit/776580553b7c439d7fa1916cfd242d2141542194", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-11T17:16:17Z", "type": "forcePushed"}, {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1", "url": "https://github.com/checkstyle/checkstyle/commit/8aa1deea853b4e1f333d07d33308afc757f105f1", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-15T18:56:01Z", "type": "commit"}, {"oid": "8aa1deea853b4e1f333d07d33308afc757f105f1", "url": "https://github.com/checkstyle/checkstyle/commit/8aa1deea853b4e1f333d07d33308afc757f105f1", "message": "Issue #8577: Records Support check update for ClassMemberImpliedModifierCheck", "committedDate": "2020-08-15T18:56:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjI2Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472282263", "bodyText": "if we treated enums and \"nested type\" I think we can treat record as \"nested type\" also.", "author": "romani", "createdAt": "2020-08-18T15:25:06Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTYwMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235600", "bodyText": "#8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjI2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjQ5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472282493", "bodyText": "same as above.", "author": "romani", "createdAt": "2020-08-18T15:25:25Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -27,18 +27,18 @@\n \n /**\n  * <p>\n- * Checks for implicit modifiers on nested types in classes.\n+ * Checks for implicit modifiers on nested types in classes and records.\n  * </p>\n  * <p>\n  * This check is effectively the opposite of\n  * <a href=\"https://checkstyle.org/config_modifier.html#RedundantModifier\">RedundantModifier</a>.\n- * It checks the modifiers on nested types in classes, ensuring that certain modifiers are\n- * explicitly specified even though they are actually redundant.\n+ * It checks the modifiers on nested types in classes and records, ensuring that certain modifiers\n+ * are explicitly specified even though they are actually redundant.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTUzOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235539", "bodyText": "#8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjQ5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MzUwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283509", "bodyText": "why \"records\" are affecting violateImpliedStaticOnNestedEnum ?", "author": "romani", "createdAt": "2020-08-18T15:26:44Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from\n+ * nested classes as they are only allowed to be {@code static}. Developers should not need to\n+ * remember this rule, and this check provides the means to enforce that the modifier is coded\n+ * explicitly.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedEnum} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested enums in classes.\n+ * {@code static} is explicitly coded on nested enums in classes and records.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTIzNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235235", "bodyText": "#8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MzUwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4Mzc1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283758", "bodyText": "this is good extension, we should keep it.", "author": "romani", "createdAt": "2020-08-18T15:27:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4Mzk0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472283948", "bodyText": "this is good extension, we should keep it.", "author": "romani", "createdAt": "2020-08-18T15:27:21Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -48,28 +48,34 @@\n  * }\n  * </pre>\n  * <p>\n- * Rationale for this check: Nested enums and interfaces are treated differently from nested\n- * classes as they are only allowed to be {@code static}. Developers should not need to remember\n- * this rule, and this check provides the means to enforce that the modifier is coded explicitly.\n+ * Rationale for this check: Nested enums, interfaces, and records are treated differently from\n+ * nested classes as they are only allowed to be {@code static}. Developers should not need to\n+ * remember this rule, and this check provides the means to enforce that the modifier is coded\n+ * explicitly.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedEnum} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested enums in classes.\n+ * {@code static} is explicitly coded on nested enums in classes and records.\n  * Type is {@code boolean}.\n  * Default value is {@code true}.\n  * </li>\n  * <li>\n  * Property {@code violateImpliedStaticOnNestedInterface} - Control whether to enforce that\n- * {@code static} is explicitly coded on nested interfaces in classes.\n+ * {@code static} is explicitly coded on nested interfaces in classes and records.\n+ * Type is {@code boolean}.\n+ * Default value is {@code true}.\n+ * </li>\n+ * <li>\n+ * Property {@code violateImpliedStaticOnNestedRecord} - Control whether to enforce that\n+ * {@code static} is explicitly coded on nested records in classes and records.\n  * Type is {@code boolean}.\n  * Default value is {@code true}.\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it checks that all implicit modifiers on nested\n- * interfaces and enums are\n- * explicitly specified in classes.\n+ * To configure the check so that it checks that all implicit modifiers on nested interfaces, enums,\n+ * and records are explicitly specified in classes and records.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NDc5MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472284791", "bodyText": "why \"record\" affect this ?", "author": "romani", "createdAt": "2020-08-18T15:28:16Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNTA3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473235079", "bodyText": "#8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NDc5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTA1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472285050", "bodyText": "why \"record\" affect this ?", "author": "romani", "createdAt": "2020-08-18T15:28:35Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -125,19 +139,25 @@\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested enums in classes.\n+     * on nested enums in classes and records.\n      */\n     private boolean violateImpliedStaticOnNestedEnum = true;\n \n     /**\n      * Control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDkwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473234902", "bodyText": "explained at #8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTA1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTQ2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472285465", "bodyText": "why \"record\" affect this ?", "author": "romani", "createdAt": "2020-08-18T15:29:09Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java", "diffHunk": "@@ -148,7 +168,7 @@ public void setViolateImpliedStaticOnNestedEnum(boolean violateImplied) {\n \n     /**\n      * Setter to control whether to enforce that {@code static} is explicitly coded\n-     * on nested interfaces in classes.\n+     * on nested interfaces in classes and records.", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDk4MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r473234980", "bodyText": "#8578 (comment)", "author": "romani", "createdAt": "2020-08-19T18:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTQ2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4ODkyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8578#discussion_r472288927", "bodyText": "@romani we are checking for implied modifiers inside of records, as well; this is why I changed the documentation to say \"classes and records\". In this case, I didn't think that the addition of records support warranted an entirely new check.\nThis check is more about the missing implied modifiers than whether we are in a class or a record.", "author": "nmancus1", "createdAt": "2020-08-18T15:33:58Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/modifier/classmemberimpliedmodifier/InputClassMemberImpliedModifierRecords.java", "diffHunk": "@@ -0,0 +1,34 @@\n+//non-compiled with javac: Compilable with Java14\n+package com.puppycrawl.tools.checkstyle.checks.modifier.classmemberimpliedmodifier;\n+/* Config:\n+ * violateImpliedStaticOnNestedEnum = true\n+ * violateImpliedStaticOnNestedInterface = true\n+ * violateImpliedStaticOnNestedRecord = true\n+ */\n+public class InputClassMemberImpliedModifierRecords {\n+    public static interface GoodInterface {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public interface BadInterface {}\n+\n+    public static enum GoodEnum {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public enum BadEnum {}\n+\n+    public static record GoodRecord() {} // OK\n+    // Implied modifier 'static' should be explicit. [ClassMemberImpliedModifier]\n+    public record BadRecord() {}\n+\n+    public static record OuterRecord() {", "originalCommit": "8aa1deea853b4e1f333d07d33308afc757f105f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}