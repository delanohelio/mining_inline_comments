{"pr_number": 7457, "pr_title": "Issue #6480: Add AvoidDoubleBraceInitializationCheck", "pr_createdAt": "2020-01-10T13:44:26Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7457", "timeline": [{"oid": "598686b1fcb77e3f597777eeb3736d468de01da5", "url": "https://github.com/checkstyle/checkstyle/commit/598686b1fcb77e3f597777eeb3736d468de01da5", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length", "committedDate": "2020-01-10T18:03:13Z", "type": "forcePushed"}, {"oid": "d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "url": "https://github.com/checkstyle/checkstyle/commit/d0dd87c9b2cfbb4491cfaaa1bf83cfdebcd703e2", "message": "minor: refactor PackageObjectFactory#fillChecksFromCodingPackage to decrease method length", "committedDate": "2020-01-13T07:30:27Z", "type": "forcePushed"}, {"oid": "034dbae4fff7bfb718cb1cd67c3e741232c41457", "url": "https://github.com/checkstyle/checkstyle/commit/034dbae4fff7bfb718cb1cd67c3e741232c41457", "message": "minor: refactor PackageObjectFactory to decrease methods length", "committedDate": "2020-01-13T09:26:47Z", "type": "forcePushed"}, {"oid": "1bdab032f70f7e1d2506869ec8a45b46f36739fb", "url": "https://github.com/checkstyle/checkstyle/commit/1bdab032f70f7e1d2506869ec8a45b46f36739fb", "message": "minor: refactor PackageObjectFactory to decrease methods length", "committedDate": "2020-01-13T10:50:44Z", "type": "forcePushed"}, {"oid": "ce4122fed8e7f7315f6660837d35c044b9825b5c", "url": "https://github.com/checkstyle/checkstyle/commit/ce4122fed8e7f7315f6660837d35c044b9825b5c", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-13T12:26:18Z", "type": "forcePushed"}, {"oid": "2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "url": "https://github.com/checkstyle/checkstyle/commit/2c3fd7ad7a819d3344a43e1c2a473947e544e4bf", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-20T10:48:31Z", "type": "forcePushed"}, {"oid": "1afe729ee5cde017684a5f0bef12905ec17d0638", "url": "https://github.com/checkstyle/checkstyle/commit/1afe729ee5cde017684a5f0bef12905ec17d0638", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-20T12:10:01Z", "type": "forcePushed"}, {"oid": "7afd97975b61981b8bed93ac12a574fb1119af58", "url": "https://github.com/checkstyle/checkstyle/commit/7afd97975b61981b8bed93ac12a574fb1119af58", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-20T13:30:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjAyMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886021", "bodyText": "please add one case like this - https://stackoverflow.com/a/1958961/1015848\nand like https://strkkk.github.io/checkstyle/6480/apache-ant/index.html#A1", "author": "romani", "createdAt": "2020-01-24T23:31:32Z", "path": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.puppycrawl.tools.checkstyle.checks.coding.avoiddoublebraceinitialization;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/*\n+ * Config = default\n+ */\n+public class InputAvoidDoubleBraceInitialization {\n+    void m() {\n+        ArrayList<?> list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            // some comment\n+            {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            // some comment\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            /* comment */ {\n+                add(null);\n+            }\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            }\n+            /* comment */\n+        };\n+        list = new ArrayList<Object>() { // violation\n+            {\n+                add(null);\n+            } /* comment */\n+        };\n+        list = new ArrayList<Object>() {\n+            ;\n+            ;\n+            {}\n+            ;\n+            ;\n+            ;\n+        };\n+        Object obj = new Serializable() {  // violation\n+            {}", "originalCommit": "7afd97975b61981b8bed93ac12a574fb1119af58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTcxOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371155719", "bodyText": "done", "author": "strkkk", "createdAt": "2020-01-27T10:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "chunk": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java\nindex a3228d471..f89ec4dcc 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/avoiddoublebraceinitialization/InputAvoidDoubleBraceInitialization.java\n\n@@ -66,6 +66,11 @@ public class InputAvoidDoubleBraceInitialization {\n         Object obj = new Serializable() {  // violation\n             {}\n         };\n+        new ArrayList<Object>() {{ // violation\n+                add(\"1\");\n+                add(\"2\");\n+        }};\n+        new ArrayList<Object>() {{ add(\"1\");}}; // violation\n         list = new ArrayList<Object>() {\n             {\n                 add(null);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r370886477", "bodyText": "please add this link also  https://www.baeldung.com/java-double-brace-initialization\nit has a bit more items as reason.", "author": "romani", "createdAt": "2020-01-24T23:33:45Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See a\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">", "originalCommit": "7afd97975b61981b8bed93ac12a574fb1119af58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzMzMzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371033331", "bodyText": "@romani you mean replace current one or add one more?", "author": "strkkk", "createdAt": "2020-01-26T22:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzNjIwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371036205", "bodyText": "Add one more link, your link has more details on some points", "author": "romani", "createdAt": "2020-01-26T23:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTc3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371155779", "bodyText": "done", "author": "strkkk", "createdAt": "2020-01-27T10:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NjQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex 5808ce937..658100a34 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -38,9 +38,11 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  * as anti-pattern and should be avoided.\n  * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n  * is not static, it holds an implicit reference to the outer class instance.\n- * See a\n+ * See this\n  * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n- * link</a> for more details.\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n  * </p>\n  * <p>\n  * To configure the check:\n"}}, {"oid": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "url": "https://github.com/checkstyle/checkstyle/commit/0c77be5fe9812ccf7e24d8139aa5716674db10fb", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-27T10:14:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MTYyMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371351621", "bodyText": "does it make sense to move this lambda to field or make it as method to use method reference ?\nwe do not have that much methods in class, so it will looks good to be not lambda, .... no need to instantiate it each time.", "author": "romani", "createdAt": "2020-01-27T16:40:47Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ *\n+ * @since 8.30\n+ */\n+@StatelessCheck\n+public class AvoidDoubleBraceInitializationCheck extends AbstractCheck {\n+\n+    /**\n+     * A key is pointing to the warning message text in \"messages.properties\"\n+     * file.\n+     */\n+    public static final String MSG_KEY = \"avoid.double.brace.init\";\n+\n+    /**\n+     * List of token types that are used in {@link #hasOnlyInitialization(DetailAST)}.\n+     */\n+    private static final List<Integer> IGNORED_TYPES = Arrays.asList(\n+        TokenTypes.INSTANCE_INIT,\n+        TokenTypes.SEMI,\n+        TokenTypes.LCURLY,\n+        TokenTypes.RCURLY\n+    );\n+\n+    @Override\n+    public int[] getDefaultTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getAcceptableTokens() {\n+        return getRequiredTokens();\n+    }\n+\n+    @Override\n+    public int[] getRequiredTokens() {\n+        return new int[] {TokenTypes.OBJBLOCK};\n+    }\n+\n+    @Override\n+    public void visitToken(DetailAST ast) {\n+        if (ast.getParent().getType() == TokenTypes.LITERAL_NEW\n+            && hasOnlyInitialization(ast)) {\n+            log(ast, MSG_KEY);\n+        }\n+    }\n+\n+    /**\n+     * Checks that block has at least one instance init block and no other class members.\n+     *\n+     * @param objBlock token to check\n+     * @return true if there is least one instance init block and no other class members,\n+     *     false otherwise\n+     */\n+    private static boolean hasOnlyInitialization(DetailAST objBlock) {\n+        final boolean hasInitBlock = objBlock.findFirstToken(TokenTypes.INSTANCE_INIT) != null;\n+        final Predicate<DetailAST> hasMembers = token -> !IGNORED_TYPES.contains(token.getType());", "originalCommit": "0c77be5fe9812ccf7e24d8139aa5716674db10fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzExNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371547115", "bodyText": "I extracted lambda.\nI couldn't find a readable way to extract method reference", "author": "strkkk", "createdAt": "2020-01-27T23:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex 658100a34..e0d30feb5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -88,7 +88,7 @@ public class AvoidDoubleBraceInitializationCheck extends AbstractCheck {\n     public static final String MSG_KEY = \"avoid.double.brace.init\";\n \n     /**\n-     * List of token types that are used in {@link #hasOnlyInitialization(DetailAST)}.\n+     * List of token types that are used in {@link #HAS_MEMBERS} predicate.\n      */\n     private static final List<Integer> IGNORED_TYPES = Arrays.asList(\n         TokenTypes.INSTANCE_INIT,\n"}}, {"oid": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "url": "https://github.com/checkstyle/checkstyle/commit/f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-27T23:50:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551448", "bodyText": "Why does the field matter? Isn't there still a concern for a memory leak?", "author": "rnveach", "createdAt": "2020-01-28T00:07:52Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list3 = new ArrayList&lt;Object&gt; { // OK, there is an additional field\n+ *     private int field;\n+ *     {", "originalCommit": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc3MDc5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371770798", "bodyText": "It is, but other class members can produce side effects, which can cause false positives.\nSo this check is focused only on \"pure\" double-brace init.", "author": "strkkk", "createdAt": "2020-01-28T12:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDQxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371780417", "bodyText": "Then shouldn't we add some warning or message saying so? All it says it is \"ok\", no mention that check will not look for these type of areas and why.", "author": "rnveach", "createdAt": "2020-01-28T12:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MjQ5OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371782499", "bodyText": "Can you give an example of the message? I am not really understand your point.\nDouble brace initialization means anon class when its body contains only init blocks. In this case this anon instance has not only initialization, but something else.", "author": "strkkk", "createdAt": "2020-01-28T12:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4OTg1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371789854", "bodyText": "Maybe something like in the description or with the examples.\nThis check strictly only looks for double brace initialization and therefore will ignore certain cases where the anonymous class can have fields or methods. (Insert Example) Though these will create the same memory issues as double brace, the extra fields/methods can produce side effects (Insert some reason/example if possible) if changed incorrectly.", "author": "rnveach", "createdAt": "2020-01-28T13:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMjAwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372112005", "bodyText": "changed", "author": "strkkk", "createdAt": "2020-01-28T23:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExOTgzOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372119839", "bodyText": "the extra class members can produce side effects if changed incorrectly.\n\nI do not understand this phrase. @rnveach, can you explain what you mean by if changed incorrectly ?\nProbably simply the extra class members can produce side effects and might be by design. Check is detecting only simple cases.", "author": "romani", "createdAt": "2020-01-28T23:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyOTU3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372129576", "bodyText": "Check is detecting only simple cases.\nAs for me, this is a duplication of the first sentence.\nCheck only looks for double brace initialization and it ignores cases where the anonymous class has fields or methods.", "author": "strkkk", "createdAt": "2020-01-29T00:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzE3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372133173", "bodyText": "sounds good to me.\n@rnveach , please review.", "author": "romani", "createdAt": "2020-01-29T00:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MTY0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372641649", "bodyText": "the extra class members can produce side effects if changed incorrectly.\n\nThis part of my sentence was in relation to #7457 (comment) where you said\n\nIt is, but other class members can produce side effects, which can cause false positives.\n\nI took false positives to mean they could be changed but had to be done carefully. Feel free to add your own verbage mine was just an example as I wasn't sure what you were referring to as false positives.\nI am mostly just looking for something that says \"We check this type. This other type still has the same issue, but we can't flag it for XYZ. Here is an example of this other type.\"\nFrom what we just wrote, I wasn't sure why we had to ignore these with fields/methods. I was just thinking in advance of people coming and saying they wanted these other types to be flasgged too.", "author": "rnveach", "createdAt": "2020-01-29T21:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY3NDUzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372674531", "bodyText": "@strkkk , please show cases of real code where fields/methods are used, you probably found them during regression. Please share them.\nhttps://rules.sonarsource.com/java/RSPEC-3599 , there is no mentioning of field/method. It does not mean that such spec is right, but it is a point.\nhttps://pmd.github.io/latest/pmd_rules_java_bestpractices.html#doublebraceinitialization - here too.\nWhat about summary:\nDetects anonymous class which only has a class cody as single instance initializer.\nAfter Rationale (but before examples) we can make note: This Check ignores any comments and semicolons in class body.\nDoublebrace is human term because it usually looks like {{ but it is not a special a part of language.\nInstance Initializers - https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\nclass body keep initializers - https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.1.6\nSo name of Check can be in human friendly as how usually users know this, but lets be JDK terminology specific in documentation to be exact.\nTo my mind any field/method presence is NOT a DoubleBrace pattern, it is some thing else, and probably by design, but this Check is targeting cases of lazy engineers that tried to cut corners to init object in statement where it is created..\nBy the way .... we need tests for few initializers in class body.", "author": "romani", "createdAt": "2020-01-29T22:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3ODM2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r372878361", "bodyText": "@romani I don't understand your point.\n\nI do not have real code with fields/methods (where can I take them from?)\nThere can be several initializers and there is a test case for it (for 2 init blocks).\nDo you mean to change implementation to detect only one init block? In my mind, several blocks or one - doesn't matter, it is same issue.\n\n\n\nbut lets be JDK terminology specific in documentation to be exact\n\nWhat do you mean? I think it is make sense to use common \"doublebrace\"", "author": "strkkk", "createdAt": "2020-01-30T10:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjYyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r373202626", "bodyText": "I do not have real code with fields/methods (where can I take them from?)\n\nin such cases the most easy approach is to modify Check to report only cases with fields and methods and run regression.\nBut looks like we do not need this as we now almost agree that such case is not boublebrace pattern at all, it is just fancy annonymous class with methods/fields and initializer.\n\nThere can be several initializers and there is a test case for it (for 2 init blocks)\n\nok, I see them now, my bad.\nIt would be good to add case new ArrayList<Object>() {{ add(\"1\");}{ add(\"2\");}};.\nas it is most used form. You have cases where { are on different lines, event is same, better to have case in form that is widely used (braces close to each other - {{).\n\nDo you mean to change implementation to detect only one init block? In my mind, several blocks or one - doesn't matter, it is same issue.\n\nNo problem, to report on several too, we just need to adjust description to be clear on what we detect - Detects anonymous class which only has a class cody as set of instance initializers.\n\nWhat do you mean?\n\nI meant to extend description ..... Rationale: Double brace initialization (set of <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\"> Instance Initializers</a> in class body) may look cool ...", "author": "romani", "createdAt": "2020-01-30T21:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTAxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r373211015", "bodyText": "I think // OK, there is an additional field\nshould be changed to \"// OK as it is not pure double brace pattern\"", "author": "romani", "createdAt": "2020-01-30T21:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1Njg4MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r375056880", "bodyText": "I am satisfied.\n@rnveach , please finalize review.", "author": "romani", "createdAt": "2020-02-05T04:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex e0d30feb5..787a78480 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -60,7 +60,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  *       add(new Object());\n  *     }\n  *   };\n- *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n  *     ;\n  *     // my comment\n  *     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTkxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371551916", "bodyText": "comments are alone commas are ignored\n\nI'm not sure I understand this phrase, also I don't see a comma. Was this suppose to be semicolon?", "author": "rnveach", "createdAt": "2020-01-28T00:09:36Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,141 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization may look cool, but it is considered\n+ * as anti-pattern and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored", "originalCommit": "f2f22a3822dc3ef36986f76bcfce7cb985c9691a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MDU1Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r371780553", "bodyText": "corrected", "author": "strkkk", "createdAt": "2020-01-28T12:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex e0d30feb5..787a78480 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -60,7 +60,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  *       add(new Object());\n  *     }\n  *   };\n- *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments are alone commas are ignored\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n  *     ;\n  *     // my comment\n  *     {\n"}}, {"oid": "3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "url": "https://github.com/checkstyle/checkstyle/commit/3e97d965753bcfba19b5b317ac2cbe07c45ed2fe", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-28T12:46:10Z", "type": "forcePushed"}, {"oid": "6a1563f2b60dffe2d7b977e9d214118b22c91f37", "url": "https://github.com/checkstyle/checkstyle/commit/6a1563f2b60dffe2d7b977e9d214118b22c91f37", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-01-28T23:09:31Z", "type": "forcePushed"}, {"oid": "eb6ed327fbe78294f03f1751fe116c8208adfd44", "url": "https://github.com/checkstyle/checkstyle/commit/eb6ed327fbe78294f03f1751fe116c8208adfd44", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-02-04T02:06:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDc3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374510779", "bodyText": "Though these might create the same ...", "author": "romani", "createdAt": "2020-02-04T07:32:29Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n+ * is not static, it holds an implicit reference to the outer class instance.\n+ * See this\n+ * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n+ * blog post</a> and\n+ * <a href=\"https://www.baeldung.com/java-double-brace-initialization\">\n+ * article</a> for more details.\n+ * Check ignores any comments and semicolons in class body.\n+ * </p>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;AvoidDoubleBraceInitialization&quot;/&gt;\n+ * </pre>\n+ * <p>\n+ * Which results in the following violations:\n+ * </p>\n+ * <pre>\n+ * class MyClass {\n+ *   List list1 = new ArrayList&lt;Object&gt; { // violation\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ *   List list2 = new ArrayList&lt;Object&gt; { // violation, comments and semicolons are ignored\n+ *     ;\n+ *     // my comment\n+ *     {\n+ *       add(new Object());\n+ *     }\n+ *   };\n+ * }\n+ * </pre>\n+ * <p>\n+ * Check only looks for double brace initialization and it ignores cases\n+ * where the anonymous class has fields or methods.\n+ * Though these will create the same memory issues as double brace,", "originalCommit": "eb6ed327fbe78294f03f1751fe116c8208adfd44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Njk5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374996994", "bodyText": "done", "author": "strkkk", "createdAt": "2020-02-05T00:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex c771ccbe5..a64f588e2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -38,8 +38,10 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n  * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n  * and should be avoided.\n- * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n- * is not static, it holds an implicit reference to the outer class instance.\n+ * This is also can lead to a hard-to-detect memory leak, if the anonymous class instance is\n+ * returned outside and other object(s) hold reference to it.\n+ * Created anonymous class is not static, it holds an implicit reference to the outer class\n+ * instance.\n  * See this\n  * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n  * blog post</a> and\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMTI5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374511290", "bodyText": "... memory leak, if the anonymous class is returned outside and held by other object(s). Created .....\nas if collection is used internally ... it does not make any problem.", "author": "romani", "createdAt": "2020-02-04T07:34:04Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java", "diffHunk": "@@ -0,0 +1,154 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.coding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n+\n+/**\n+ * <p>\n+ * Detects double brace initialization.\n+ * </p>\n+ * <p>\n+ * Rationale: Double brace initialization (set of\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n+ * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n+ * and should be avoided.\n+ * This is also can lead to a hard-to-detect memory leaks, since created anonymous class", "originalCommit": "eb6ed327fbe78294f03f1751fe116c8208adfd44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Njk3OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7457#discussion_r374996978", "bodyText": "done", "author": "strkkk", "createdAt": "2020-02-05T00:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\nindex c771ccbe5..a64f588e2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidDoubleBraceInitializationCheck.java\n\n@@ -38,8 +38,10 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  * <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-8.html#jls-8.6\">\n  * Instance Initializers</a> in class body) may look cool, but it is considered as anti-pattern\n  * and should be avoided.\n- * This is also can lead to a hard-to-detect memory leaks, since created anonymous class\n- * is not static, it holds an implicit reference to the outer class instance.\n+ * This is also can lead to a hard-to-detect memory leak, if the anonymous class instance is\n+ * returned outside and other object(s) hold reference to it.\n+ * Created anonymous class is not static, it holds an implicit reference to the outer class\n+ * instance.\n  * See this\n  * <a href=\"https://blog.jooq.org/2014/12/08/dont-be-clever-the-double-curly-braces-anti-pattern/\">\n  * blog post</a> and\n"}}, {"oid": "eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "url": "https://github.com/checkstyle/checkstyle/commit/eaf187ee34965344cf1fe5f6da9afae9e31e81ff", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-02-05T00:15:53Z", "type": "forcePushed"}, {"oid": "2413523250a46b64b1855269cebd1a702a157549", "url": "https://github.com/checkstyle/checkstyle/commit/2413523250a46b64b1855269cebd1a702a157549", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-02-05T01:55:30Z", "type": "commit"}, {"oid": "2413523250a46b64b1855269cebd1a702a157549", "url": "https://github.com/checkstyle/checkstyle/commit/2413523250a46b64b1855269cebd1a702a157549", "message": "Issue #6480: add AvoidDoubleBraceInitializationCheck", "committedDate": "2020-02-05T01:55:30Z", "type": "forcePushed"}]}