{"pr_number": 8696, "pr_title": "Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax", "pr_createdAt": "2020-08-15T14:03:31Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8696", "timeline": [{"oid": "a5aec537228b464ae9c8753a5cd24fdaef8f097a", "url": "https://github.com/checkstyle/checkstyle/commit/a5aec537228b464ae9c8753a5cd24fdaef8f097a", "message": "Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax", "committedDate": "2020-08-15T15:52:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjAxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471086010", "bodyText": "Extra space before .", "author": "pbludov", "createdAt": "2020-08-16T08:55:56Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "diffHunk": "@@ -476,26 +492,115 @@ private static DetailAST getLastLambdaToken(DetailAST lambda) {\n     }\n \n     /**\n-     * Checks if switch member (case or default statement) is single-line statement, e.g.:\n+     * Checks if current lambda belongs to a switch rule, e.g.:\n      * <p>\n      * {@code\n-     * case 1: doSomeStuff(); break;\n-     * case 2: doSomeStuff(); break;\n+     * case 1 ->  monthString = \"January\";\n+     * }\n+     * </p>\n+     *\n+     * @param lambda {@link TokenTypes#LAMBDA}.\n+     * @return true if current lambda belongs to a switch rule.\n+     */\n+    private static boolean isSwitchRuleLambda(DetailAST lambda) {\n+        return lambda.getParent().getType() == TokenTypes.SWITCH_RULE;\n+    }\n+\n+    /**\n+     * Checks if current expression is a switch labeled expression . If so,", "originalCommit": "a5aec537228b464ae9c8753a5cd24fdaef8f097a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwMDk1Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471100953", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-16T11:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\nindex 1a5d61dc8..e6bd1190e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n\n@@ -492,22 +491,22 @@ public class NeedBracesCheck extends AbstractCheck {\n     }\n \n     /**\n-     * Checks if current lambda belongs to a switch rule, e.g.:\n+     * Checks if current ast's parent is a switch rule, e.g.:\n      * <p>\n      * {@code\n      * case 1 ->  monthString = \"January\";\n      * }\n      * </p>\n      *\n-     * @param lambda {@link TokenTypes#LAMBDA}.\n-     * @return true if current lambda belongs to a switch rule.\n+     * @param ast the ast to check.\n+     * @return true if current ast belongs to a switch rule.\n      */\n-    private static boolean isSwitchRuleLambda(DetailAST lambda) {\n-        return lambda.getParent().getType() == TokenTypes.SWITCH_RULE;\n+    private static boolean isInSwitchRule(DetailAST ast) {\n+        return ast.getParent().getType() == TokenTypes.SWITCH_RULE;\n     }\n \n     /**\n-     * Checks if current expression is a switch labeled expression . If so,\n+     * Checks if current expression is a switch labeled expression. If so,\n      * braces are not allowed e.g.:\n      * <p>\n      * {@code\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjUwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471086502", "bodyText": "This code duplicates method isSwitchRuleLambda. Should this method be used here?", "author": "pbludov", "createdAt": "2020-08-16T09:00:38Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "diffHunk": "@@ -476,26 +492,115 @@ private static DetailAST getLastLambdaToken(DetailAST lambda) {\n     }\n \n     /**\n-     * Checks if switch member (case or default statement) is single-line statement, e.g.:\n+     * Checks if current lambda belongs to a switch rule, e.g.:\n      * <p>\n      * {@code\n-     * case 1: doSomeStuff(); break;\n-     * case 2: doSomeStuff(); break;\n+     * case 1 ->  monthString = \"January\";\n+     * }\n+     * </p>\n+     *\n+     * @param lambda {@link TokenTypes#LAMBDA}.\n+     * @return true if current lambda belongs to a switch rule.\n+     */\n+    private static boolean isSwitchRuleLambda(DetailAST lambda) {\n+        return lambda.getParent().getType() == TokenTypes.SWITCH_RULE;\n+    }\n+\n+    /**\n+     * Checks if current expression is a switch labeled expression . If so,\n+     * braces are not allowed e.g.:\n+     * <p>\n+     * {@code\n+     * case 1 -> 4;\n+     * }\n+     * </p>\n+     *\n+     * @param ast the ast to check\n+     * @return true if current expression is a switch labeled expression.\n+     */\n+    private static boolean isSwitchLabeledExpression(DetailAST ast) {\n+        final DetailAST parent = ast.getParent();\n+        return switchRuleHasSingleExpression(parent);\n+    }\n+\n+    /**\n+     * Checks if current switch labeled expression contains only a single expression.\n+     *\n+     * @param switchRule {@link TokenTypes#SWITCH_RULE}.\n+     * @return true if current switch rule has a single expression.\n+     */\n+    private static boolean switchRuleHasSingleExpression(DetailAST switchRule) {\n+        final DetailAST possibleExpression = switchRule.findFirstToken(TokenTypes.EXPR);\n+        return possibleExpression != null\n+                && possibleExpression.getFirstChild().getFirstChild() == null;\n+    }\n+\n+    /**\n+     * Checks if switch member (case or default statement) in a switch rule or\n+     * case group is on a single line.\n+     *\n+     * @param statement {@link TokenTypes#LITERAL_CASE case statement} or\n+     * {@link TokenTypes#LITERAL_DEFAULT default statement}.\n+     * @return true if current switch member is single-line statement.\n+     */\n+    private static boolean isSingleLineSwitchMember(DetailAST statement) {\n+        final boolean isInSwitchRule =\n+            statement.getParent().getType() == TokenTypes.SWITCH_RULE;", "originalCommit": "a5aec537228b464ae9c8753a5cd24fdaef8f097a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwMDkzOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471100938", "bodyText": "I've changed the method's name to  isInSwitchRule(), and I've used it in three more places.  Thanks for the recommendation.", "author": "nmancus1", "createdAt": "2020-08-16T11:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\nindex 1a5d61dc8..e6bd1190e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n\n@@ -492,22 +491,22 @@ public class NeedBracesCheck extends AbstractCheck {\n     }\n \n     /**\n-     * Checks if current lambda belongs to a switch rule, e.g.:\n+     * Checks if current ast's parent is a switch rule, e.g.:\n      * <p>\n      * {@code\n      * case 1 ->  monthString = \"January\";\n      * }\n      * </p>\n      *\n-     * @param lambda {@link TokenTypes#LAMBDA}.\n-     * @return true if current lambda belongs to a switch rule.\n+     * @param ast the ast to check.\n+     * @return true if current ast belongs to a switch rule.\n      */\n-    private static boolean isSwitchRuleLambda(DetailAST lambda) {\n-        return lambda.getParent().getType() == TokenTypes.SWITCH_RULE;\n+    private static boolean isInSwitchRule(DetailAST ast) {\n+        return ast.getParent().getType() == TokenTypes.SWITCH_RULE;\n     }\n \n     /**\n-     * Checks if current expression is a switch labeled expression . If so,\n+     * Checks if current expression is a switch labeled expression. If so,\n      * braces are not allowed e.g.:\n      * <p>\n      * {@code\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzAwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471087005", "bodyText": "getLastSibling == parent.getLastChild(), no reason for new method here.", "author": "pbludov", "createdAt": "2020-08-16T09:05:30Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "diffHunk": "@@ -293,9 +298,19 @@ private boolean isEmptyLoopBodyAllowed(DetailAST ast) {\n      */\n     private static boolean hasUnbracedStatements(DetailAST ast) {\n         final DetailAST nextSibling = ast.getNextSibling();\n-        return nextSibling != null\n+        final DetailAST parent = ast.getParent();\n+        boolean result = false;\n+\n+        if (parent.getType() == TokenTypes.SWITCH_RULE) {\n+            final DetailAST lastSibling = getLastSibling(ast);", "originalCommit": "a5aec537228b464ae9c8753a5cd24fdaef8f097a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEwMDk1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8696#discussion_r471100958", "bodyText": "Done.", "author": "nmancus1", "createdAt": "2020-08-16T11:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\nindex 1a5d61dc8..e6bd1190e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n\n@@ -298,12 +298,11 @@ public class NeedBracesCheck extends AbstractCheck {\n      */\n     private static boolean hasUnbracedStatements(DetailAST ast) {\n         final DetailAST nextSibling = ast.getNextSibling();\n-        final DetailAST parent = ast.getParent();\n         boolean result = false;\n \n-        if (parent.getType() == TokenTypes.SWITCH_RULE) {\n-            final DetailAST lastSibling = getLastSibling(ast);\n-            result = lastSibling.getType() != TokenTypes.SLIST;\n+        if (isInSwitchRule(ast)) {\n+            final DetailAST parent = ast.getParent();\n+            result = parent.getLastChild().getType() != TokenTypes.SLIST;\n         }\n         else if (nextSibling != null\n             && nextSibling.getType() == TokenTypes.SLIST\n"}}, {"oid": "d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "url": "https://github.com/checkstyle/checkstyle/commit/d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "message": "Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax", "committedDate": "2020-08-16T11:20:42Z", "type": "commit"}, {"oid": "d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "url": "https://github.com/checkstyle/checkstyle/commit/d0a857deeefddb3bb897c07c3ca4fed134bdeea9", "message": "Issue #8664: NeedBraces throws a NPE when parsing switch expression syntax", "committedDate": "2020-08-16T11:20:42Z", "type": "forcePushed"}]}