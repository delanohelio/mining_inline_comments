{"pr_number": 8175, "pr_title": "Issue #8048: Extract logic for token type checking to separate method", "pr_createdAt": "2020-04-23T18:49:38Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8175", "timeline": [{"oid": "377f97973d95e7c7cd92fafa7facfc4b8807fee5", "url": "https://github.com/checkstyle/checkstyle/commit/377f97973d95e7c7cd92fafa7facfc4b8807fee5", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-04-24T16:45:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r414975231", "bodyText": "From #8048 (comment): I still think that a declarative programming approach with streams is a much more elegant implementation than this.", "author": "wltan", "createdAt": "2020-04-25T04:26:14Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,23 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        boolean result = false;\n+        for (int t : types) {", "originalCommit": "377f97973d95e7c7cd92fafa7facfc4b8807fee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3ODg5Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r415078896", "bodyText": "I think you're right. That's a better implementation.\n@romani @rnveach ping", "author": "shashwatj07", "createdAt": "2020-04-25T14:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTgzOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418519838", "bodyText": "totally agree with @wltan", "author": "timurt", "createdAt": "2020-05-01T12:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NzM1MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418567351", "bodyText": "Done!", "author": "shashwatj07", "createdAt": "2020-05-01T14:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3NTIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "05a194aeea1dbada28409ac41329f5d66aa2be03", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\nindex 844a66bdb..3185d4bbc 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n\n@@ -270,7 +270,7 @@ public final class TokenUtil {\n     }\n \n     /**\n-     * Determines if the AST belongs to the given types.\n+     * Determines if the token type belongs to the given types.\n      *\n      * @param type the Token Type to check\n      * @param types the acceptable types\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTI1Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418519253", "bodyText": "it is better to create two separate tests with corresponding names", "author": "timurt", "createdAt": "2020-05-01T12:20:32Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java", "diffHunk": "@@ -277,4 +278,18 @@ public void testForEachChild() {\n         assertEquals(secondSibling, firstChild, \"Mismatched child node\");\n     }\n \n+    @Test\n+    public void testIsOfTypeTrue() {", "originalCommit": "377f97973d95e7c7cd92fafa7facfc4b8807fee5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NzQxMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418567413", "bodyText": "Done!", "author": "shashwatj07", "createdAt": "2020-05-01T14:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "05a194aeea1dbada28409ac41329f5d66aa2be03", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java\nindex 8677aa24d..e86176a3d 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilTest.java\n\n@@ -281,15 +281,33 @@ public class TokenUtilTest {\n     @Test\n     public void testIsOfTypeTrue() {\n         final int type = TokenTypes.LITERAL_CATCH;\n-        final boolean resultOne = TokenUtil.isOfType(type, TokenTypes.LITERAL_FOR,\n+        final DetailAstImpl astForTest = new DetailAstImpl();\n+        astForTest.setType(type);\n+        final boolean result1 = TokenUtil.isOfType(type, TokenTypes.LITERAL_FOR,\n+                                TokenTypes.LITERAL_IF, TokenTypes.LITERAL_CATCH);\n+        final boolean result2 = TokenUtil.isOfType(astForTest, TokenTypes.LITERAL_FOR,\n                                 TokenTypes.LITERAL_IF, TokenTypes.LITERAL_CATCH);\n \n-        assertTrue(resultOne, \"Token type did not match\");\n+        assertTrue(result1, \"Token type did not match\");\n+        assertTrue(result2, \"Token type did not match\");\n+    }\n \n-        final boolean resultTwo = TokenUtil.isOfType(type, TokenTypes.LITERAL_FOR,\n+    @Test\n+    public void testIsOfTypeFalse() {\n+        final int type = TokenTypes.LITERAL_CATCH;\n+        final DetailAstImpl astForTest1 = new DetailAstImpl();\n+        final DetailAstImpl astForTest2 = null;\n+        astForTest1.setType(type);\n+        final boolean result1 = TokenUtil.isOfType(type, TokenTypes.LITERAL_FOR,\n+                                TokenTypes.LITERAL_IF, TokenTypes.LITERAL_ELSE);\n+        final boolean result2 = TokenUtil.isOfType(astForTest1, TokenTypes.LITERAL_FOR,\n+                                TokenTypes.LITERAL_IF, TokenTypes.LITERAL_ELSE);\n+        final boolean result3 = TokenUtil.isOfType(astForTest2, TokenTypes.LITERAL_FOR,\n                                 TokenTypes.LITERAL_IF, TokenTypes.LITERAL_ELSE);\n \n-        assertFalse(resultTwo, \"Token type should not match\");\n+        assertFalse(result1, \"Token type should not match\");\n+        assertFalse(result2, \"Token type should not match\");\n+        assertFalse(result3, \"Token type should not match\");\n     }\n \n }\n"}}, {"oid": "05a194aeea1dbada28409ac41329f5d66aa2be03", "url": "https://github.com/checkstyle/checkstyle/commit/05a194aeea1dbada28409ac41329f5d66aa2be03", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-05-01T14:28:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTgzMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418625833", "bodyText": "please reuse function you wrote above", "author": "timurt", "createdAt": "2020-05-01T16:43:32Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -269,4 +269,29 @@ public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n+    /**\n+     * Determines if the token type belongs to the given types.\n+     *\n+     * @param type the Token Type to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(int type, int... types) {\n+        return Arrays.stream(types).anyMatch(tokenType -> tokenType == type);\n+    }\n+\n+    /**\n+     * Determines if the AST belongs to the given types.\n+     *\n+     * @param ast the AST node to check\n+     * @param types the acceptable types\n+     *\n+     * @return true if type matches one of the given types.\n+     */\n+    public static boolean isOfType(DetailAST ast, int... types) {\n+        return ast != null\n+                && Arrays.stream(types).anyMatch(tokenType -> tokenType == ast.getType());", "originalCommit": "05a194aeea1dbada28409ac41329f5d66aa2be03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYzMDg2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r418630864", "bodyText": "Done! @timurt", "author": "shashwatj07", "createdAt": "2020-05-01T16:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYyNTgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "201c32df85248139b21b38b7d6e53e994cf853d9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\nindex 3185d4bbc..d6955a2b9 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n\n@@ -290,8 +290,7 @@ public final class TokenUtil {\n      * @return true if type matches one of the given types.\n      */\n     public static boolean isOfType(DetailAST ast, int... types) {\n-        return ast != null\n-                && Arrays.stream(types).anyMatch(tokenType -> tokenType == ast.getType());\n+        return ast != null && isOfType(ast.getType(), types);\n     }\n \n }\n"}}, {"oid": "201c32df85248139b21b38b7d6e53e994cf853d9", "url": "https://github.com/checkstyle/checkstyle/commit/201c32df85248139b21b38b7d6e53e994cf853d9", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-05-01T16:52:49Z", "type": "forcePushed"}, {"oid": "f3a3f43a225e8498b58c7f732090766f959833bd", "url": "https://github.com/checkstyle/checkstyle/commit/f3a3f43a225e8498b58c7f732090766f959833bd", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-05-11T09:51:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTU3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r429959576", "bodyText": "please restore single node verification to use ==, it is more concise and shorter and performance is better.", "author": "romani", "createdAt": "2020-05-25T14:19:18Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -253,20 +243,18 @@ public static boolean isOuterMostType(DetailAST node) {\n     public static boolean isLocalVariableDef(DetailAST node) {\n         boolean localVariableDef = false;\n         // variable declaration?\n-        if (node.getType() == TokenTypes.VARIABLE_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.VARIABLE_DEF)) {\n             final DetailAST parent = node.getParent();\n-            final int type = parent.getType();\n-            localVariableDef = type == TokenTypes.SLIST\n-                    || type == TokenTypes.FOR_INIT\n-                    || type == TokenTypes.FOR_EACH_CLAUSE;\n+            localVariableDef = TokenUtil.isOfType(parent, TokenTypes.SLIST,\n+                                TokenTypes.FOR_INIT, TokenTypes.FOR_EACH_CLAUSE);\n         }\n         // catch parameter?\n-        if (node.getType() == TokenTypes.PARAMETER_DEF) {\n+        if (TokenUtil.isOfType(node, TokenTypes.PARAMETER_DEF)) {\n             final DetailAST parent = node.getParent();\n-            localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;\n+            localVariableDef = TokenUtil.isOfType(parent.getType(), TokenTypes.LITERAL_CATCH);\n         }\n \n-        if (node.getType() == TokenTypes.RESOURCE) {\n+        if (TokenUtil.isOfType(node, TokenTypes.RESOURCE)) {", "originalCommit": "f3a3f43a225e8498b58c7f732090766f959833bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzODY4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446538682", "bodyText": "done", "author": "shashwatj07", "createdAt": "2020-06-27T15:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1OTU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a41d1fac8355cdba55a3e705a5536aeec572e63a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\nindex 31cac5cd9..7a99d4b9e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\n\n@@ -243,18 +243,18 @@ public final class ScopeUtil {\n     public static boolean isLocalVariableDef(DetailAST node) {\n         boolean localVariableDef = false;\n         // variable declaration?\n-        if (TokenUtil.isOfType(node, TokenTypes.VARIABLE_DEF)) {\n+        if (node.getType() == TokenTypes.VARIABLE_DEF) {\n             final DetailAST parent = node.getParent();\n             localVariableDef = TokenUtil.isOfType(parent, TokenTypes.SLIST,\n                                 TokenTypes.FOR_INIT, TokenTypes.FOR_EACH_CLAUSE);\n         }\n         // catch parameter?\n-        if (TokenUtil.isOfType(node, TokenTypes.PARAMETER_DEF)) {\n+        if (node.getType() == TokenTypes.PARAMETER_DEF) {\n             final DetailAST parent = node.getParent();\n-            localVariableDef = TokenUtil.isOfType(parent.getType(), TokenTypes.LITERAL_CATCH);\n+            localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;\n         }\n \n-        if (TokenUtil.isOfType(node, TokenTypes.RESOURCE)) {\n+        if (node.getType() == TokenTypes.RESOURCE) {\n             localVariableDef = true;\n         }\n         return localVariableDef;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r433051123", "bodyText": "I'd like to have a dedicated method for Class/Interface/Enum/Annotation checking.\nSomething like TokenUtil.isTypeDeclaration(tokenType)", "author": "pbludov", "createdAt": "2020-06-01T05:44:11Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java", "diffHunk": "@@ -70,18 +70,17 @@ public static Scope getSurroundingScope(DetailAST node) {\n              token != null;\n              token = token.getParent()) {\n             final int type = token.getType();\n-            if (type == TokenTypes.CLASS_DEF\n-                || type == TokenTypes.INTERFACE_DEF\n-                || type == TokenTypes.ANNOTATION_DEF\n-                || type == TokenTypes.ENUM_DEF) {\n+            if (TokenUtil.isOfType(type, TokenTypes.CLASS_DEF,", "originalCommit": "f3a3f43a225e8498b58c7f732090766f959833bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzODcyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446538729", "bodyText": "can we do it in a separate PR?", "author": "shashwatj07", "createdAt": "2020-06-27T15:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MjM3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446542373", "bodyText": "Sure.", "author": "pbludov", "createdAt": "2020-06-27T16:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzEzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8175#discussion_r446543132", "bodyText": "please open a new issue for it. i'll work on it as soon as it get approved.", "author": "shashwatj07", "createdAt": "2020-06-27T16:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MTEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a41d1fac8355cdba55a3e705a5536aeec572e63a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\nindex 31cac5cd9..7a99d4b9e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java\n\n@@ -80,7 +80,7 @@ public final class ScopeUtil {\n                     returnValue = modScope;\n                 }\n             }\n-            else if (TokenUtil.isOfType(type, TokenTypes.LITERAL_NEW)) {\n+            else if (type == TokenTypes.LITERAL_NEW) {\n                 returnValue = Scope.ANONINNER;\n                 // because Scope.ANONINNER is not in any other Scope\n                 break;\n"}}, {"oid": "a41d1fac8355cdba55a3e705a5536aeec572e63a", "url": "https://github.com/checkstyle/checkstyle/commit/a41d1fac8355cdba55a3e705a5536aeec572e63a", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-06-27T15:39:20Z", "type": "forcePushed"}, {"oid": "72a0a6bb1ea6597faa396ba17b144dc49bf339c9", "url": "https://github.com/checkstyle/checkstyle/commit/72a0a6bb1ea6597faa396ba17b144dc49bf339c9", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-08-10T12:46:32Z", "type": "forcePushed"}, {"oid": "689d886b0dc4d5379c188033f593e5795a485e1b", "url": "https://github.com/checkstyle/checkstyle/commit/689d886b0dc4d5379c188033f593e5795a485e1b", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-08-10T13:31:04Z", "type": "commit"}, {"oid": "689d886b0dc4d5379c188033f593e5795a485e1b", "url": "https://github.com/checkstyle/checkstyle/commit/689d886b0dc4d5379c188033f593e5795a485e1b", "message": "Issue #8048: Extract logic for token type checking to separate method", "committedDate": "2020-08-10T13:31:04Z", "type": "forcePushed"}]}