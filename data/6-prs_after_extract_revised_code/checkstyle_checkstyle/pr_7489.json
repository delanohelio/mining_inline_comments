{"pr_number": 7489, "pr_title": "Issue 7487 add method hasChildren() to DetailAST", "pr_createdAt": "2020-01-17T19:25:32Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7489", "timeline": [{"oid": "57eb1d9f475a6de4ca7fa560a32022a2987addb9", "url": "https://github.com/checkstyle/checkstyle/commit/57eb1d9f475a6de4ca7fa560a32022a2987addb9", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-17T19:26:37Z", "type": "forcePushed"}, {"oid": "4c2f86e5775c29a6e037631f4969e080f0b15168", "url": "https://github.com/checkstyle/checkstyle/commit/4c2f86e5775c29a6e037631f4969e080f0b15168", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-17T19:40:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDc3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r368104773", "bodyText": "@romani Does it make sense we add similar method with this parameter in addition to the other?", "author": "rnveach", "createdAt": "2020-01-17T19:41:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "diffHunk": "@@ -388,10 +388,15 @@ private static boolean isExprSurrounded(DetailAST ast) {\n      */\n     private static boolean isLambdaSingleParameterSurrounded(DetailAST ast) {\n         final DetailAST firstChild = ast.getFirstChild();\n-        return firstChild.getType() == TokenTypes.LPAREN\n-                && firstChild.getNextSibling().getChildCount(TokenTypes.PARAMETER_DEF) == 1\n-                && firstChild.getNextSibling().getFirstChild().findFirstToken(TokenTypes.TYPE)\n-                        .getChildCount() == 0;\n+        boolean result = false;\n+        if (firstChild.getType() == TokenTypes.LPAREN) {\n+            final DetailAST parameters = firstChild.getNextSibling();\n+            if (parameters.getChildCount(TokenTypes.PARAMETER_DEF) == 1", "originalCommit": "57eb1d9f475a6de4ca7fa560a32022a2987addb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzUzMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370907530", "bodyText": "please rephase question, I do not understand question.", "author": "romani", "createdAt": "2020-01-25T02:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMDA1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370910054", "bodyText": "Should we add method hasChildren(TokenType)? We have a getChildCount(TokenType) just like we have a getChildCount().", "author": "rnveach", "createdAt": "2020-01-25T03:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMTYyMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370911620", "bodyText": "I would rather not extend API that much, this is good candidate for utilities. We can move this to separate issue to analyze amount or usage first.", "author": "romani", "createdAt": "2020-01-25T03:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNzczMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370937731", "bodyText": "@rnveach , please resolve this item if you are ok with my reply, if not, lets move it to separate issue", "author": "romani", "createdAt": "2020-01-25T14:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "41651b88c8b430864d04fa8b4cc2401fd2889494", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java\nindex 145400fee..3f7153682 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java\n\n@@ -388,15 +388,10 @@ public class UnnecessaryParenthesesCheck extends AbstractCheck {\n      */\n     private static boolean isLambdaSingleParameterSurrounded(DetailAST ast) {\n         final DetailAST firstChild = ast.getFirstChild();\n-        boolean result = false;\n-        if (firstChild.getType() == TokenTypes.LPAREN) {\n-            final DetailAST parameters = firstChild.getNextSibling();\n-            if (parameters.getChildCount(TokenTypes.PARAMETER_DEF) == 1\n-                    && !parameters.getFirstChild().findFirstToken(TokenTypes.TYPE).hasChildren()) {\n-                result = true;\n-            }\n-        }\n-        return result;\n+        return firstChild.getType() == TokenTypes.LPAREN\n+                && firstChild.getNextSibling().getChildCount(TokenTypes.PARAMETER_DEF) == 1\n+                && firstChild.getNextSibling().getFirstChild().findFirstToken(TokenTypes.TYPE)\n+                        .getChildCount() == 0;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDYwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r368164607", "bodyText": "Pitest issue should be fixed.", "author": "pbludov", "createdAt": "2020-01-17T22:36:37Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "diffHunk": "@@ -136,7 +136,7 @@ private boolean isSuperCallInOverridingMethod(DetailAST ast) {\n      */\n     private static boolean hasArguments(DetailAST methodCallDotAst) {\n         final DetailAST argumentsList = methodCallDotAst.getNextSibling();\n-        return argumentsList.getChildCount() > 0;", "originalCommit": "4c2f86e5775c29a6e037631f4969e080f0b15168", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41651b88c8b430864d04fa8b4cc2401fd2889494", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\nindex 665f608e3..8dffb5d88 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java\n\n@@ -136,7 +136,7 @@ public abstract class AbstractSuperCheck\n      */\n     private static boolean hasArguments(DetailAST methodCallDotAst) {\n         final DetailAST argumentsList = methodCallDotAst.getNextSibling();\n-        return argumentsList.hasChildren();\n+        return argumentsList.getChildCount() > 0;\n     }\n \n     /**\n"}}, {"oid": "ac3b962a7a286ad7e201dc1be5ce9954b0717cc6", "url": "https://github.com/checkstyle/checkstyle/commit/ac3b962a7a286ad7e201dc1be5ce9954b0717cc6", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-20T21:44:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370907858", "bodyText": "unfortunately I am not confident in this refactoring.\nPlease provide regression report for affected Checks that use this function.", "author": "romani", "createdAt": "2020-01-25T02:23:29Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPosition.java", "diffHunk": "@@ -169,15 +169,21 @@ public static boolean isOnConstructor(DetailAST blockComment) {\n      * @return true if node is before enum constant\n      */\n     public static boolean isOnEnumConstant(DetailAST blockComment) {\n-        final boolean isOnPlainConst = blockComment.getParent() != null\n-                && blockComment.getParent().getType() == TokenTypes.ENUM_CONSTANT_DEF\n-                && getPrevSiblingSkipComments(blockComment).getType() == TokenTypes.ANNOTATIONS\n-                && getPrevSiblingSkipComments(blockComment).getChildCount() == 0;\n-        final boolean isOnConstWithAnnotation = !isOnPlainConst && blockComment.getParent() != null\n-                && blockComment.getParent().getType() == TokenTypes.ANNOTATION\n-                && blockComment.getParent().getParent().getParent().getType()\n-                    == TokenTypes.ENUM_CONSTANT_DEF;\n-        return isOnPlainConst || isOnConstWithAnnotation;\n+        final DetailAST parent = blockComment.getParent();\n+        boolean result = false;", "originalCommit": "ac3b962a7a286ad7e201dc1be5ce9954b0717cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMTQwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370921401", "bodyText": "Regression for InvalidJavadocPositionCheck, DesignForExtensionCheck, JavadocContentLocationCheck, MissingJavadocPackageCheck (no difference):\nhttps://pbludov.github.io/issue-7487-has-children-1/", "author": "pbludov", "createdAt": "2020-01-25T08:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyNDA5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370924098", "bodyText": "Regression for\nAtclauseOrder, JavadocBlockTagLocation, JavadocParagraph, JavadocTagContinuationIndentation, MissingDeprecated, NonEmptyAtclauseDescription, SingleLineJavadoc, SummaryJavadoc (no real difference):\nhttps://pbludov.github.io/issue-7487-has-children-2/", "author": "pbludov", "createdAt": "2020-01-25T09:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyNzk0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370927943", "bodyText": "Regression for SummaryJavadoc only (no difference):\nhttps://pbludov.github.io/issue-7487-has-children-3/", "author": "pbludov", "createdAt": "2020-01-25T11:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzAxMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370933011", "bodyText": "Please pull latest contribution repo, reports are not mobile friendly, latest report generator do better reports.", "author": "romani", "createdAt": "2020-01-25T13:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzU2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370933561", "bodyText": "https://pbludov.github.io/issue-7487-has-children-2/\n\nis full of differences, please use filter to suppress parse violations.", "author": "romani", "createdAt": "2020-01-25T13:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNDgzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370934831", "bodyText": "Please pull latest contribution repo, reports are not mobile friendly, latest report generator do better reports.\n\n$ git pull\nAlready up to date.\n\nI'l try to reset the repo completely.", "author": "pbludov", "createdAt": "2020-01-25T13:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTQ1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370935458", "bodyText": "after generation of report, try to make browser window small ... it should render without horizontal scrolling.", "author": "romani", "createdAt": "2020-01-25T14:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNTY3Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370935676", "bodyText": "@pbludov You may have to regenerate difference jar if it doesn't do it itself as it is what creates the report.", "author": "rnveach", "createdAt": "2020-01-25T14:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjkxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370956910", "bodyText": "Regression for SummaryJavadoc only (no difference):\nhttps://pbludov.github.io/issue-7487-has-children-4/", "author": "pbludov", "createdAt": "2020-01-25T21:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1OTE0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370959147", "bodyText": "Regression for Javadoc checks (no difference):\nhttps://pbludov.github.io/issue-7487-has-children-5/", "author": "pbludov", "createdAt": "2020-01-25T22:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDc5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370960794", "bodyText": "Regression for non-Javadoc checks (no difference):\nhttps://pbludov.github.io/issue-7487-has-children-6/", "author": "pbludov", "createdAt": "2020-01-25T22:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDgzMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370960830", "bodyText": "@romani all regression reports are rebuilt.", "author": "pbludov", "createdAt": "2020-01-25T22:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "41651b88c8b430864d04fa8b4cc2401fd2889494", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPosition.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPosition.java\nindex 0899c32ad..1023f9f98 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPosition.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPosition.java\n\n@@ -169,21 +169,15 @@ public final class BlockCommentPosition {\n      * @return true if node is before enum constant\n      */\n     public static boolean isOnEnumConstant(DetailAST blockComment) {\n-        final DetailAST parent = blockComment.getParent();\n-        boolean result = false;\n-        if (parent != null) {\n-            if (parent.getType() == TokenTypes.ENUM_CONSTANT_DEF) {\n-                final DetailAST prevSibling = getPrevSiblingSkipComments(blockComment);\n-                if (prevSibling.getType() == TokenTypes.ANNOTATIONS && !prevSibling.hasChildren()) {\n-                    result = true;\n-                }\n-            }\n-            else if (parent.getType() == TokenTypes.ANNOTATION\n-                    && parent.getParent().getParent().getType() == TokenTypes.ENUM_CONSTANT_DEF) {\n-                result = true;\n-            }\n-        }\n-        return result;\n+        final boolean isOnPlainConst = blockComment.getParent() != null\n+                && blockComment.getParent().getType() == TokenTypes.ENUM_CONSTANT_DEF\n+                && getPrevSiblingSkipComments(blockComment).getType() == TokenTypes.ANNOTATIONS\n+                && getPrevSiblingSkipComments(blockComment).getChildCount() == 0;\n+        final boolean isOnConstWithAnnotation = !isOnPlainConst && blockComment.getParent() != null\n+                && blockComment.getParent().getType() == TokenTypes.ANNOTATION\n+                && blockComment.getParent().getParent().getParent().getType()\n+                    == TokenTypes.ENUM_CONSTANT_DEF;\n+        return isOnPlainConst || isOnConstWithAnnotation;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370907918", "bodyText": "Do we need this test ?\nWe try to avoid pure UTs as much as possible.", "author": "romani", "createdAt": "2020-01-25T02:24:34Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/DetailAstImplTest.java", "diffHunk": "@@ -134,6 +135,22 @@ public void testGetChildCount() throws Exception {\n         assertEquals(firstLevelA, firstLevelB.getPreviousSibling(), \"Invalid previous sibling\");\n     }\n \n+    @Test\n+    public void testHasChildren() throws Exception {", "originalCommit": "ac3b962a7a286ad7e201dc1be5ce9954b0717cc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMTQyNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370921425", "bodyText": "done", "author": "pbludov", "createdAt": "2020-01-25T08:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMzUwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370923504", "bodyText": "now ./.ci/pitest.sh pitest-common-2 fails", "author": "pbludov", "createdAt": "2020-01-25T09:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMzkyOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370923929", "bodyText": "We need this test. I think we should keep all test for API. For an utility class a pure UT test is redundant, but this is the part of our API.", "author": "pbludov", "createdAt": "2020-01-25T09:32:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMjg2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370932861", "bodyText": "As this test is for technical coverage, we need to add comment over it to explain reason.\nIt is ok to have to pure UT for API only if do not use it. In other case it is good question why our tests can not cover such mutation", "author": "romani", "createdAt": "2020-01-25T13:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzk3MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370933971", "bodyText": "The whole class DetailAstImplTest is for technical coverage. As many other tests. It's good to add this description to all of them, but it should be a separate issue.", "author": "pbludov", "createdAt": "2020-01-25T13:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzk5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370933990", "bodyText": "@romani We had a discussion about this when we created DetailASTImpl (I believe). Some random Check covered a line in the AST. It was some completely random test and it didn't make sense how it was proof the AST API method was shown to be working correctly. Thats when we said we would force API to have their own UTs.", "author": "rnveach", "createdAt": "2020-01-25T13:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNDA0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370934049", "bodyText": "this happens because of very limited test execution scope .... we did this for performance reason.\nhttps://github.com/checkstyle/checkstyle/blob/master/pom.xml#L2722\nfrom pitest report:\nreturn getFirstChild() != null;\n1. replaced boolean return with true for com/puppycrawl/tools/checkstyle\n/DetailAstImpl::hasChildren \u2192 NO_COVERAGE\n2. negated conditional \u2192 NO_COVERAGE\n3. removed conditional - replaced equality check with false \u2192 NO_COVERAGE\n4. removed conditional - replaced equality check with true \u2192 NO_COVERAGE\n5. replaced return of integer sized value with (x == 0 ? 1 : 0) \u2192 NO_COVERAGE", "author": "romani", "createdAt": "2020-01-25T13:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNDIxNA==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370934214", "bodyText": "This test method is using reflection ... it must have comment to explain it (we agreed on this a long time ago). Please also add some sentence that it is required only because to satisfy certain pitest profile .\none day it will change so we will have details on why it is required.", "author": "romani", "createdAt": "2020-01-25T13:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNDY4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7489#discussion_r370934681", "bodyText": "This test should not use any reflection. Fixed.", "author": "pbludov", "createdAt": "2020-01-25T13:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "c1be1f7f0e4c9d7e28d1e8624d4bf3f169cdb2b9", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DetailAstImplTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/DetailAstImplTest.java\nindex b5aa0d90a..7d9ed7e0f 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/DetailAstImplTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DetailAstImplTest.java\n\n@@ -135,22 +134,6 @@ public class DetailAstImplTest extends AbstractModuleTestSupport {\n         assertEquals(firstLevelA, firstLevelB.getPreviousSibling(), \"Invalid previous sibling\");\n     }\n \n-    @Test\n-    public void testHasChildren() throws Exception {\n-        final DetailAstImpl root = new DetailAstImpl();\n-        final DetailAstImpl child = new DetailAstImpl();\n-\n-        root.setFirstChild(child);\n-        getSetParentMethod().invoke(child, root);\n-\n-        assertWithMessage(\"Root node should have children\")\n-                .that(root.hasChildren())\n-                .isTrue();\n-        assertWithMessage(\"Child node should have no children\")\n-                .that(child.hasChildren())\n-                .isFalse();\n-    }\n-\n     @Test\n     public void testGetChildCountType() throws Exception {\n         final DetailAstImpl root = new DetailAstImpl();\n"}}, {"oid": "41651b88c8b430864d04fa8b4cc2401fd2889494", "url": "https://github.com/checkstyle/checkstyle/commit/41651b88c8b430864d04fa8b4cc2401fd2889494", "message": "Issue #7487: add method hasChildren() to DetailAST", "committedDate": "2020-01-25T07:18:39Z", "type": "commit"}, {"oid": "c1be1f7f0e4c9d7e28d1e8624d4bf3f169cdb2b9", "url": "https://github.com/checkstyle/checkstyle/commit/c1be1f7f0e4c9d7e28d1e8624d4bf3f169cdb2b9", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-25T07:18:39Z", "type": "forcePushed"}, {"oid": "394c6967e1787bd6f51c157a588845259541bc25", "url": "https://github.com/checkstyle/checkstyle/commit/394c6967e1787bd6f51c157a588845259541bc25", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-25T09:29:38Z", "type": "forcePushed"}, {"oid": "9ea61df42604db4ea6447c9dbc2582138386b287", "url": "https://github.com/checkstyle/checkstyle/commit/9ea61df42604db4ea6447c9dbc2582138386b287", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-25T13:52:03Z", "type": "forcePushed"}, {"oid": "885af2af382b5830c2ec03591d4a64920fbdd28f", "url": "https://github.com/checkstyle/checkstyle/commit/885af2af382b5830c2ec03591d4a64920fbdd28f", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-25T13:52:34Z", "type": "commit"}, {"oid": "885af2af382b5830c2ec03591d4a64920fbdd28f", "url": "https://github.com/checkstyle/checkstyle/commit/885af2af382b5830c2ec03591d4a64920fbdd28f", "message": "Issue #7487: refactor code to use DetailAST.hasChildren()", "committedDate": "2020-01-25T13:52:34Z", "type": "forcePushed"}]}