{"pr_number": 8008, "pr_title": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "pr_createdAt": "2020-04-01T11:46:37Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8008", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5OTYzNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8008#discussion_r401599635", "bodyText": "Concern at #7980 (comment)", "author": "rnveach", "createdAt": "2020-04-01T13:06:40Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "diffHunk": "@@ -581,4 +584,32 @@ public void testWithoutLogErrors() throws Exception {\n                 CommonUtil.EMPTY_STRING_ARRAY);\n     }\n \n+    @Test\n+    public void testClassAliasResolving() throws Exception {\n+        final File file = new File(getPath(\"InputJavadocMethodClassAliasTest.java\"));\n+        final DetailAST rootAst = JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n+        final DetailAST classAst = rootAst.getNextSibling().getNextSibling();\n+\n+        final JavadocMethodCheck obj = new JavadocMethodCheck();\n+        obj.beginTree(rootAst);\n+        obj.visitToken(classAst);\n+\n+        final Class<?> clazz = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n+                + \"JavadocMethodCheck\");\n+        final Class<?> tokenClazz = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n+                + \"JavadocMethodCheck$Token\");\n+        final Constructor<?> tokenConstructor = tokenClazz.getDeclaredConstructor(String.class,\n+                int.class, int.class);\n+        final Object token = tokenConstructor.newInstance(\"B1\", 21, 22);\n+\n+        final Method createClassInfo = clazz.getDeclaredMethod(\"createClassInfo\", tokenClazz,\n+                String.class);\n+        createClassInfo.setAccessible(true);\n+        final Object instanceResult = createClassInfo.invoke(obj, token,\n+                \"InputJavadocMethodClassAliasTest\");", "originalCommit": "afef3994531309b4e61fbc4f68df352b8aa66eec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2NTI1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8008#discussion_r401665255", "bodyText": "@rnveach Replied in the issue comment thread.", "author": "gaurabdg", "createdAt": "2020-04-01T14:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5OTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "82c4abaac6973d276edb15d32002411824555df1", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 4b4a7e274..7f1901715 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n\n@@ -500,83 +508,6 @@ public class JavadocMethodCheckTest extends AbstractModuleTestSupport {\n         assertEquals(\"Token[blablabla(1x1)]\", result, \"Invalid toString result\");\n     }\n \n-    @Test\n-    public void testClassRegularClass() throws Exception {\n-        final Class<?> tokenType = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                + \"JavadocMethodCheck$Token\");\n-\n-        final Class<?> regularClassType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$RegularClass\");\n-        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(\n-                tokenType, String.class, JavadocMethodCheck.class);\n-        regularClassConstructor.setAccessible(true);\n-\n-        try {\n-            regularClassConstructor.newInstance(null, \"\", new JavadocMethodCheck());\n-            fail(\"Exception is expected\");\n-        }\n-        catch (InvocationTargetException ex) {\n-            assertTrue(ex.getCause() instanceof IllegalArgumentException,\n-                    \"Invalid exception class, expected: IllegalArgumentException.class\");\n-            assertEquals(\"ClassInfo's name should be non-null\", ex.getCause().getMessage(),\n-                    \"Invalid exception message\");\n-        }\n-\n-        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,\n-                int.class, int.class);\n-        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);\n-\n-        final JavadocMethodCheck methodCheck = new JavadocMethodCheck();\n-        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",\n-                methodCheck);\n-\n-        final Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");\n-        toString.setAccessible(true);\n-        final String result = (String) toString.invoke(regularClass);\n-        final String expected = \"RegularClass[name=Token[blablabla(1x1)], in class='sur', check=\"\n-                + methodCheck.hashCode() + \"]\";\n-\n-        assertEquals(expected, result, \"Invalid toString result\");\n-    }\n-\n-    @Test\n-    public void testClassAliasToString() throws Exception {\n-        final Class<?> tokenType = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                + \"JavadocMethodCheck$Token\");\n-\n-        final Class<?> regularClassType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$RegularClass\");\n-        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(\n-                tokenType, String.class, JavadocMethodCheck.class);\n-        regularClassConstructor.setAccessible(true);\n-\n-        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,\n-                int.class, int.class);\n-        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);\n-\n-        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",\n-                new JavadocMethodCheck());\n-\n-        final Class<?> classAliasType = Class.forName(\n-                \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ClassAlias\");\n-        final Class<?> abstractTypeInfoType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$ClassInfo\");\n-\n-        final Constructor<?> classAliasConstructor = classAliasType\n-                .getDeclaredConstructor(tokenType, abstractTypeInfoType);\n-        classAliasConstructor.setAccessible(true);\n-\n-        final Object classAlias = classAliasConstructor.newInstance(token, regularClass);\n-        final Method toString = classAlias.getClass().getDeclaredMethod(\"toString\");\n-        toString.setAccessible(true);\n-        final String result = (String) toString.invoke(classAlias);\n-        assertEquals(\"ClassAlias[alias Token[blablabla(1x1)] for Token[blablabla(1x1)]]\", result,\n-                \"Invalid toString result\");\n-    }\n-\n     @Test\n     public void testWithoutLogErrors() throws Exception {\n         final DefaultConfiguration config = createModuleConfig(JavadocMethodCheck.class);\n"}}, {"oid": "70b6fcc7bfb7f8efa67fb22467831664f9be148c", "url": "https://github.com/checkstyle/checkstyle/commit/70b6fcc7bfb7f8efa67fb22467831664f9be148c", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-04-01T13:40:05Z", "type": "forcePushed"}, {"oid": "c36bfafb2c1e7a273354bca887d3ac9667768799", "url": "https://github.com/checkstyle/checkstyle/commit/c36bfafb2c1e7a273354bca887d3ac9667768799", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-04-01T14:43:54Z", "type": "forcePushed"}, {"oid": "27134634cd935bd2c0ab2f60ca2ce2628445ede6", "url": "https://github.com/checkstyle/checkstyle/commit/27134634cd935bd2c0ab2f60ca2ce2628445ede6", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-05-12T18:28:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDQyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8008#discussion_r424670428", "bodyText": "I am still looking over all discussions but I wanted to point to #7980 (comment) . If reflection stays, we need javadoc on why reflection is needed.\nThis can wait until a decision is made.", "author": "rnveach", "createdAt": "2020-05-13T19:11:25Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "diffHunk": "@@ -595,4 +598,32 @@ public void testWithoutLogErrors() throws Exception {\n                 CommonUtil.EMPTY_STRING_ARRAY);\n     }\n \n+    @Test\n+    public void testClassAliasResolving() throws Exception {", "originalCommit": "27134634cd935bd2c0ab2f60ca2ce2628445ede6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82c4abaac6973d276edb15d32002411824555df1", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 642a0be6f..7f1901715 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n\n@@ -514,83 +508,6 @@ public class JavadocMethodCheckTest extends AbstractModuleTestSupport {\n         assertEquals(\"Token[blablabla(1x1)]\", result, \"Invalid toString result\");\n     }\n \n-    @Test\n-    public void testClassRegularClass() throws Exception {\n-        final Class<?> tokenType = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                + \"JavadocMethodCheck$Token\");\n-\n-        final Class<?> regularClassType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$RegularClass\");\n-        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(\n-                tokenType, String.class, JavadocMethodCheck.class);\n-        regularClassConstructor.setAccessible(true);\n-\n-        try {\n-            regularClassConstructor.newInstance(null, \"\", new JavadocMethodCheck());\n-            fail(\"Exception is expected\");\n-        }\n-        catch (InvocationTargetException ex) {\n-            assertTrue(ex.getCause() instanceof IllegalArgumentException,\n-                    \"Invalid exception class, expected: IllegalArgumentException.class\");\n-            assertEquals(\"ClassInfo's name should be non-null\", ex.getCause().getMessage(),\n-                    \"Invalid exception message\");\n-        }\n-\n-        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,\n-                int.class, int.class);\n-        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);\n-\n-        final JavadocMethodCheck methodCheck = new JavadocMethodCheck();\n-        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",\n-                methodCheck);\n-\n-        final Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");\n-        toString.setAccessible(true);\n-        final String result = (String) toString.invoke(regularClass);\n-        final String expected = \"RegularClass[name=Token[blablabla(1x1)], in class='sur', check=\"\n-                + methodCheck.hashCode() + \"]\";\n-\n-        assertEquals(expected, result, \"Invalid toString result\");\n-    }\n-\n-    @Test\n-    public void testClassAliasToString() throws Exception {\n-        final Class<?> tokenType = Class.forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                + \"JavadocMethodCheck$Token\");\n-\n-        final Class<?> regularClassType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$RegularClass\");\n-        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(\n-                tokenType, String.class, JavadocMethodCheck.class);\n-        regularClassConstructor.setAccessible(true);\n-\n-        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,\n-                int.class, int.class);\n-        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);\n-\n-        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",\n-                new JavadocMethodCheck());\n-\n-        final Class<?> classAliasType = Class.forName(\n-                \"com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck$ClassAlias\");\n-        final Class<?> abstractTypeInfoType = Class\n-                .forName(\"com.puppycrawl.tools.checkstyle.checks.javadoc.\"\n-                        + \"JavadocMethodCheck$ClassInfo\");\n-\n-        final Constructor<?> classAliasConstructor = classAliasType\n-                .getDeclaredConstructor(tokenType, abstractTypeInfoType);\n-        classAliasConstructor.setAccessible(true);\n-\n-        final Object classAlias = classAliasConstructor.newInstance(token, regularClass);\n-        final Method toString = classAlias.getClass().getDeclaredMethod(\"toString\");\n-        toString.setAccessible(true);\n-        final String result = (String) toString.invoke(classAlias);\n-        assertEquals(\"ClassAlias[alias Token[blablabla(1x1)] for Token[blablabla(1x1)]]\", result,\n-                \"Invalid toString result\");\n-    }\n-\n     @Test\n     public void testWithoutLogErrors() throws Exception {\n         final DefaultConfiguration config = createModuleConfig(JavadocMethodCheck.class);\n"}}, {"oid": "82c4abaac6973d276edb15d32002411824555df1", "url": "https://github.com/checkstyle/checkstyle/commit/82c4abaac6973d276edb15d32002411824555df1", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-05-17T11:30:09Z", "type": "forcePushed"}, {"oid": "041b42e3b4f6085b6cb4c39c3300cad13e6d2ce3", "url": "https://github.com/checkstyle/checkstyle/commit/041b42e3b4f6085b6cb4c39c3300cad13e6d2ce3", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-05-18T17:11:33Z", "type": "commit"}, {"oid": "041b42e3b4f6085b6cb4c39c3300cad13e6d2ce3", "url": "https://github.com/checkstyle/checkstyle/commit/041b42e3b4f6085b6cb4c39c3300cad13e6d2ce3", "message": "Issue #7980: Resolve Pitest Issues - JavadocMethodCheck (8)", "committedDate": "2020-05-18T17:11:33Z", "type": "forcePushed"}]}