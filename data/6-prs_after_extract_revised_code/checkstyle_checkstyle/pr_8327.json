{"pr_number": 8327, "pr_title": " Issue #7103: Add support for Java 14 text block syntax", "pr_createdAt": "2020-06-19T17:27:51Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8327", "timeline": [{"oid": "6f38a732a67ede948ad87145c19234c699b76615", "url": "https://github.com/checkstyle/checkstyle/commit/6f38a732a67ede948ad87145c19234c699b76615", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-19T17:58:21Z", "type": "forcePushed"}, {"oid": "1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "url": "https://github.com/checkstyle/checkstyle/commit/1ddcc02892b9737d02a2dcfd8ef01afecddb6f6b", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-19T19:44:15Z", "type": "forcePushed"}, {"oid": "58b3feea7c9906085e7e7de6ce24954da308c136", "url": "https://github.com/checkstyle/checkstyle/commit/58b3feea7c9906085e7e7de6ce24954da308c136", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T12:22:29Z", "type": "forcePushed"}, {"oid": "fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "url": "https://github.com/checkstyle/checkstyle/commit/fe8979298d8cfd7a82c700fc08ecc8cbd4f18226", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T13:40:06Z", "type": "forcePushed"}, {"oid": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "url": "https://github.com/checkstyle/checkstyle/commit/fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-25T21:16:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjYzMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446176631", "bodyText": "I am getting complaints from both IDEA and TeamCity about this:  JUnit test method testImpossibleExceptionsJava14TextBlockLexer() contains no assertions which I understand, but why don't the existing tests (see here) cause this warning?", "author": "nmancus1", "createdAt": "2020-06-26T13:15:45Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -246,6 +262,30 @@ public void testImpossibleValid() throws Exception {\n                 '4', '4', '.', '4', 'P', '4', 'D', ';');\n     }\n \n+    @Test\n+    public void testImpossibleExceptionsJava14TextBlockLexer() throws Exception {\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mSTD_ESC\", '\\\\', '*', (char) 0xFFFF);\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mONE_DOUBLE_QUOTE\", '\"', '\"');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mNEWLINE\", '*');\n+        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mTEXT_BLOCK_CONTENT\", (char) 0xFFFF);\n+    }\n+\n+    @Test\n+    public void testImpossibleValidJava14TextBlockLexer() throws Exception {", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTI5MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446509290", "bodyText": "This means either there is a suppression in the config, or somewhere it is specified that AssertGeneratedJavaLexer.verifyFail is an assertion method.\nA quick search finds these rules:\nhttps://github.com/checkstyle/checkstyle/blob/master/config/pmd-test.xml#L182\nhttps://github.com/checkstyle/checkstyle/blob/master/config/intellij-idea-inspections.xml#L4618\n(the list may be incomplete)", "author": "pbludov", "createdAt": "2020-06-27T10:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3NjYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\nindex a72d29d30..be1d54aed 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n\n@@ -264,25 +264,25 @@ public class AstRegressionTest extends AbstractTreeTestSupport {\n \n     @Test\n     public void testImpossibleExceptionsJava14TextBlockLexer() throws Exception {\n-        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mSTD_ESC\", '\\\\', '*', (char) 0xFFFF);\n-        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mONE_DOUBLE_QUOTE\", '\"', '\"');\n-        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mNEWLINE\", '*');\n-        AssertGeneratedJava14TextBlockLexer.verifyFail(\"mTEXT_BLOCK_CONTENT\", (char) 0xFFFF);\n+        AssertGeneratedTextBlockLexer.verifyFail(\"mSTD_ESC\", '\\\\', '*', (char) 0xFFFF);\n+        AssertGeneratedTextBlockLexer.verifyFail(\"mONE_DOUBLE_QUOTE\", '\"', '\"');\n+        AssertGeneratedTextBlockLexer.verifyFail(\"mNEWLINE\", '*');\n+        AssertGeneratedTextBlockLexer.verifyFail(\"mTEXT_BLOCK_CONTENT\", (char) 0xFFFF);\n     }\n \n     @Test\n     public void testImpossibleValidJava14TextBlockLexer() throws Exception {\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mSTD_ESC\", '\\\\', '\\\\', 'n');\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mNEWLINE\", '\\r', '\\n');\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mNEWLINE\", '\\r', '1');\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mTEXT_BLOCK_CONTENT\", '\\\\', (char) 0xFFFF);\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mTEXT_BLOCK_CONTENT\", '\\r', (char) 0xFFFF);\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mONE_DOUBLE_QUOTE\", '\"', 'a');\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mTWO_DOUBLE_QUOTES\", '\"', '\"', 'a');\n-        AssertGeneratedJava14TextBlockLexer.verifyPass(\"mONE_DOUBLE_QUOTE\", '\"', '\\r', '\\r');\n-        AssertGeneratedJava14TextBlockLexer\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mSTD_ESC\", '\\\\', '\\\\', 'n');\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mNEWLINE\", '\\r', '\\n');\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mNEWLINE\", '\\r', '1');\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mTEXT_BLOCK_CONTENT\", '\\\\', (char) 0xFFFF);\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mTEXT_BLOCK_CONTENT\", '\\r', (char) 0xFFFF);\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mONE_DOUBLE_QUOTE\", '\"', 'a');\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mTWO_DOUBLE_QUOTES\", '\"', '\"', 'a');\n+        AssertGeneratedTextBlockLexer.verifyPass(\"mONE_DOUBLE_QUOTE\", '\"', '\\r', '\\r');\n+        AssertGeneratedTextBlockLexer\n                 .verifyPass(\"mTWO_DOUBLE_QUOTES\", '\"', '\"', '\\r', '\\r');\n-        AssertGeneratedJava14TextBlockLexer\n+        AssertGeneratedTextBlockLexer\n                 .verifyPass(\"mTEXT_BLOCK_LITERAL_END\", '\"', '\"', '\"', (char) 0xFFFF);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446178150", "bodyText": "I would like to know a better way to reuse the existing code (see here) .  Should I make AssertGeneratedJavaLexer.java not final, then extend it, or should I refactor AssertGeneratedJavaLexer.java to work with the new lexer, too?", "author": "nmancus1", "createdAt": "2020-06-26T13:18:41Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -267,6 +307,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedJava14TextBlockLexer", "originalCommit": "fdc1f45b73f7ae2bbf5e0601df6abdd9fa85cd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTQ4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r446511489", "bodyText": "This class is final simply because there was no reason not to make it final before. If you need to re-factor this to support the grammar for text blocks, then go ahead.", "author": "pbludov", "createdAt": "2020-06-27T10:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1MzM1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r449653355", "bodyText": "After re-examining this, since each class must be a descendant of it's respective lexer, and an interface for these seems like overkill, I am going to leave this as it is.", "author": "nmancus1", "createdAt": "2020-07-03T16:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\nindex a72d29d30..be1d54aed 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n\n@@ -307,13 +307,13 @@ public class AstRegressionTest extends AbstractTreeTestSupport {\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n-    private static final class AssertGeneratedJava14TextBlockLexer\n-            extends GeneratedJava14TextBlockLexer {\n+    private static final class AssertGeneratedTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n \n         private int laPosition;\n         private char[] laResults;\n \n-        private AssertGeneratedJava14TextBlockLexer() {\n+        private AssertGeneratedTextBlockLexer() {\n             super((InputStream) null);\n         }\n \n"}}, {"oid": "5d567766023f7701bd33b3d71e5284f8ddb7b63f", "url": "https://github.com/checkstyle/checkstyle/commit/5d567766023f7701bd33b3d71e5284f8ddb7b63f", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-06-26T13:37:33Z", "type": "forcePushed"}, {"oid": "f3a26fa7627d5e1739b042aba9de2a7275136f1f", "url": "https://github.com/checkstyle/checkstyle/commit/f3a26fa7627d5e1739b042aba9de2a7275136f1f", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-02T17:32:28Z", "type": "forcePushed"}, {"oid": "42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "url": "https://github.com/checkstyle/checkstyle/commit/42d1cb11eb4d4ad328ff8246e7030c31b9ab4393", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T04:31:34Z", "type": "forcePushed"}, {"oid": "9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "url": "https://github.com/checkstyle/checkstyle/commit/9f2c2bc45861bb94569bfdd72410b5a8ae29ec3c", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T13:46:00Z", "type": "forcePushed"}, {"oid": "4f1d2821a2406448bff3590d9beb7af826b96143", "url": "https://github.com/checkstyle/checkstyle/commit/4f1d2821a2406448bff3590d9beb7af826b96143", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T14:24:43Z", "type": "forcePushed"}, {"oid": "463d86026a0241f07b4218fe029c0269baa40afe", "url": "https://github.com/checkstyle/checkstyle/commit/463d86026a0241f07b4218fe029c0269baa40afe", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-03T15:31:40Z", "type": "forcePushed"}, {"oid": "69a99159cfdaeec3777d8874f5ec551555f4af82", "url": "https://github.com/checkstyle/checkstyle/commit/69a99159cfdaeec3777d8874f5ec551555f4af82", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-15T00:57:01Z", "type": "forcePushed"}, {"oid": "f1123ee94c17133cc1768fb77f9a570d20850f23", "url": "https://github.com/checkstyle/checkstyle/commit/f1123ee94c17133cc1768fb77f9a570d20850f23", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-15T11:13:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODM1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r460858354", "bodyText": "Should @since tag be here? We agreed to tag new tokens.", "author": "pbludov", "createdAt": "2020-07-27T12:37:01Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3595,6 +3595,93 @@\n     public static final int RECORD_DEF =\n             GeneratedJavaTokenTypes.RECORD_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     */", "originalCommit": "f1123ee94c17133cc1768fb77f9a570d20850f23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg3MTkzNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r460871934", "bodyText": "Updated.", "author": "nmancus1", "createdAt": "2020-07-27T13:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e27e59547c184a54feb938bd3b51e9070d251e52", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex c3200eef6..06ff8d4ac 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3620,6 +3621,7 @@ public final class TokenTypes {\n      * |   `--SEMI (;)\n      * </pre>\n      *\n+     * @since 8.36\n      */\n     public static final int TEXT_BLOCK_LITERAL_BEGIN =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_BEGIN;\n"}}, {"oid": "e27e59547c184a54feb938bd3b51e9070d251e52", "url": "https://github.com/checkstyle/checkstyle/commit/e27e59547c184a54feb938bd3b51e9070d251e52", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-27T12:55:56Z", "type": "forcePushed"}, {"oid": "66a26bf641b0704374b188710187b6b5dcdce494", "url": "https://github.com/checkstyle/checkstyle/commit/66a26bf641b0704374b188710187b6b5dcdce494", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-28T11:54:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NTU1NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461645554", "bodyText": "I would rather do no coverage for such hard to catch code and and bump percentage in config.\nwe keep percentage in coverage for generated code only to see diff of coverage on new grammar update and probably discuss what could be covered by real inputs.\nWe do not need to have test on generated code of ANTLR, it is by definition the most trusty code in our code base.\nin addition  we always work on javac compiled sources, so we do not care how code works on incomplete/non-compilable java code", "author": "romani", "createdAt": "2020-07-28T14:52:52Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGeneratedTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGeneratedTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGeneratedTextBlockLexer instance =\n+                    new AssertGeneratedTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,", "originalCommit": "66a26bf641b0704374b188710187b6b5dcdce494", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzE3MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r461657171", "bodyText": "ok, looks like @rnveach  was a person who introduced such asserts - 5123ab3 .\nok, lets keep it.", "author": "romani", "createdAt": "2020-07-28T15:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0NTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "279498c02b67ff95a42a68befe4606c2052d4bd6", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\nindex 84f0241f0..cef27b8e9 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n\n@@ -325,13 +325,13 @@ public class AstRegressionTest extends AbstractTreeTestSupport {\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n-    private static final class AssertGeneratedTextBlockLexer\n+    private static final class AssertGenTextBlockLexer\n             extends GeneratedTextBlockLexer {\n \n         private int laPosition;\n         private char[] laResults;\n \n-        private AssertGeneratedTextBlockLexer() {\n+        private AssertGenTextBlockLexer() {\n             super((InputStream) null);\n         }\n \n"}}, {"oid": "279498c02b67ff95a42a68befe4606c2052d4bd6", "url": "https://github.com/checkstyle/checkstyle/commit/279498c02b67ff95a42a68befe4606c2052d4bd6", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-28T16:42:31Z", "type": "forcePushed"}, {"oid": "e98190ab57157814ea4838697df1759d9a1542cf", "url": "https://github.com/checkstyle/checkstyle/commit/e98190ab57157814ea4838697df1759d9a1542cf", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-29T14:58:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462676317", "bodyText": "Shouldn't we specify what is the escape character, which is \\?", "author": "rnveach", "createdAt": "2020-07-30T01:12:11Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3724,6 +3724,96 @@\n     public static final int COMPACT_CTOR_DEF =\n             GeneratedJavaTokenTypes.COMPACT_CTOR_DEF;\n \n+    /**\n+     * Beginning of a Java 14 Text Block literal,\n+     * delimited by three double quotes.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     *         String hello = \"\"\"\n+     *                 Hello, world!\n+     *                 \"\"\";\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--IDENT (String)\n+     * |   |--IDENT (hello)\n+     * |   |--ASSIGN (=)\n+     * |   |   `--EXPR\n+     * |   |       `--TEXT_BLOCK_LITERAL_BEGIN (\"\"\")\n+     * |   |           |--TEXT_BLOCK_CONTENT (\\n                Hello, world!\\n                    )\n+     * |   |           `--TEXT_BLOCK_LITERAL_END (\"\"\")\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     * @since 8.36\n+     */\n+    public static final int TEXT_BLOCK_LITERAL_BEGIN =\n+            GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_BEGIN;\n+\n+    /**\n+     * Content (text) of a Java 14 text block. This is a\n+     * sequence of (possibly escaped) characters.", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzM3Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753377", "bodyText": "Good point. Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NjI5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463176292", "bodyText": "Note this escape goes directly to my other review item remaining. Maybe the error is in possibly escaped and should always be escaped.", "author": "rnveach", "createdAt": "2020-07-30T18:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxMTE0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463611149", "bodyText": "From JLS: The use of the escape sequences \\\" and \\n is permitted in a text block, but not necessary or recommended.", "author": "nmancus1", "createdAt": "2020-07-31T13:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzOTc1OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463639758", "bodyText": "We should mention that we substitude invisible '\\n' (in linux single char symbol) with \\n (2 chars).\nBy means of this we increase length of String object.\n.... stop ...\nCan we put in actual String symbol as is ? (single char)\nis it a nuance of you AST printer that we need show content in single line and Printer is doing escapes ?\nIf this is a problems of AST printer - IT IS NOT a problem at all. Nobody care about our AST printer, nobody use it except for us in some cases.", "author": "romani", "createdAt": "2020-07-31T14:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0NDY5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463644693", "bodyText": "Can we put in actual String symbol as is\n\nDo you mean in the AST? Or in the content of a text block?", "author": "nmancus1", "createdAt": "2020-07-31T14:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0ODUyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463648527", "bodyText": "Also: \n  \n    \n      checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinter.java\n    \n    \n        Lines 225 to 235\n      in\n      8e82c6c\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Replace all control chars with escaped symbols. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @param text the String to process. \n        \n\n        \n          \n                * @return the processed String with all control chars escaped. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               private static String escapeAllControlChars(String text) { \n        \n\n        \n          \n                   final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll(\"\\\\\\\\n\"); \n        \n\n        \n          \n                   final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll(\"\\\\\\\\r\"); \n        \n\n        \n          \n                   return TAB.matcher(textWithoutReturns).replaceAll(\"\\\\\\\\t\"); \n        \n\n        \n          \n               }", "author": "nmancus1", "createdAt": "2020-07-31T14:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1NDk3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463654979", "bodyText": "Please prove that size of String object in AST that contains all values from text block is not bigger than in java runtime.", "author": "romani", "createdAt": "2020-07-31T14:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY2OTAyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463669028", "bodyText": "The compiler removes all of the preceding whitespace, and we do not:\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\u279c  text-blocks-grammar cat TestClass.java                             \npublic class TestClass {\n\n\tpublic static void main(String... args) {\n\n\t\tString s1 = \"\"\"\n                \\\\n\"\"\";\n\t\tString s2 = \"\"\"\n                \\n\"\"\";\n\t\tString s3 = \"\"\"\n                \\\\\"\"\";\n\n\t\tString s4 = \"\"\"\n                \\u000D\"\"\";\n\t\tString s5 = \"\"\"\n                \\n\"\"\";\n\t\tString s6 = \"\"\"\n                \\n\n                  \"\"\";\n\t\tSystem.out.println(\"Length of s1: \" + s1.length());\n\t\tSystem.out.println(\"Length of s2: \" + s2.length());\n\t\tSystem.out.println(\"Length of s3: \" + s3.length());\n\t\tSystem.out.println(\"Length of s4: \" + s4.length());\n\t\tSystem.out.println(\"Length of s5: \" + s5.length());\n\t\tSystem.out.println(\"Length of s6: \" + s6.length());\n\n\t}\n}\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/java --enable-preview TestClass\nLength of s1: 2\nLength of s2: 1\nLength of s3: 1\nLength of s4: 1\nLength of s5: 1\nLength of s6: 2\n\n\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--METHOD_DEF -> METHOD_DEF [3:1]\n    |   |--MODIFIERS -> MODIFIERS [3:1]\n    |   |   |--LITERAL_PUBLIC -> public [3:1]\n    |   |   `--LITERAL_STATIC -> static [3:8]\n    |   |--TYPE -> TYPE [3:15]\n    |   |   `--LITERAL_VOID -> void [3:15]\n    |   |--IDENT -> main [3:20]\n    |   |--LPAREN -> ( [3:24]\n    |   |--PARAMETERS -> PARAMETERS [3:25]\n    |   |   `--PARAMETER_DEF -> PARAMETER_DEF [3:25]\n    |   |       |--MODIFIERS -> MODIFIERS [3:25]\n    |   |       |--TYPE -> TYPE [3:25]\n    |   |       |   `--IDENT -> String [3:25]\n    |   |       |--ELLIPSIS -> ... [3:31]\n    |   |       `--IDENT -> args [3:35]\n    |   |--RPAREN -> ) [3:39]\n    |   `--SLIST -> { [3:41]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [5:2]\n    |       |   |--MODIFIERS -> MODIFIERS [5:2]\n    |       |   |--TYPE -> TYPE [5:2]\n    |       |   |   `--IDENT -> String [5:2]\n    |       |   |--IDENT -> s1 [5:9]\n    |       |   `--ASSIGN -> = [5:12]\n    |       |       `--EXPR -> EXPR [5:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [5:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\\\n [5:17]\nresult of node.getText().length: 20\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [6:19]\n    |       |--SEMI -> ; [6:22]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [7:2]\n    |       |   |--MODIFIERS -> MODIFIERS [7:2]\n    |       |   |--TYPE -> TYPE [7:2]\n    |       |   |   `--IDENT -> String [7:2]\n    |       |   |--IDENT -> s2 [7:9]\n    |       |   `--ASSIGN -> = [7:12]\n    |       |       `--EXPR -> EXPR [7:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n [7:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [8:18]\n    |       |--SEMI -> ; [8:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [9:2]\n    |       |   |--MODIFIERS -> MODIFIERS [9:2]\n    |       |   |--TYPE -> TYPE [9:2]\n    |       |   |   `--IDENT -> String [9:2]\n    |       |   |--IDENT -> s3 [9:9]\n    |       |   `--ASSIGN -> = [9:12]\n    |       |       `--EXPR -> EXPR [9:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [9:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\\\ [9:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:18]\n    |       |--SEMI -> ; [10:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [12:2]\n    |       |   |--MODIFIERS -> MODIFIERS [12:2]\n    |       |   |--TYPE -> TYPE [12:2]\n    |       |   |   `--IDENT -> String [12:2]\n    |       |   |--IDENT -> s4 [12:9]\n    |       |   `--ASSIGN -> = [12:12]\n    |       |       `--EXPR -> EXPR [12:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [12:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\u000D [12:17]\nresult of node.getText().length: 23\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:22]\n    |       |--SEMI -> ; [13:25]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [14:2]\n    |       |   |--MODIFIERS -> MODIFIERS [14:2]\n    |       |   |--TYPE -> TYPE [14:2]\n    |       |   |   `--IDENT -> String [14:2]\n    |       |   |--IDENT -> s5 [14:9]\n    |       |   `--ASSIGN -> = [14:12]\n    |       |       `--EXPR -> EXPR [14:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [14:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n [14:17]\nresult of node.getText().length: 19\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [15:18]\n    |       |--SEMI -> ; [15:21]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [16:2]\n    |       |   |--MODIFIERS -> MODIFIERS [16:2]\n    |       |   |--TYPE -> TYPE [16:2]\n    |       |   |   `--IDENT -> String [16:2]\n    |       |   |--IDENT -> s6 [16:9]\n    |       |   `--ASSIGN -> = [16:12]\n    |       |       `--EXPR -> EXPR [16:14]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [16:14]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n                \\n\\n                   [16:17]\nresult of node.getText().length: 38\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [18:18]\n......", "author": "nmancus1", "createdAt": "2020-07-31T15:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3Mjc4MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463672781", "bodyText": "Consider this too:\n  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/javac --enable-preview --source 14 TestClass.java\nNote: TestClass.java uses preview language features.\nNote: Recompile with -Xlint:preview for details.\n\u279c  text-blocks-grammar cat TestClass.java\npublic class TestClass {\n\n\tpublic static void main(String... args) {\n\nString s1 = \"\"\"\n\\\\n\"\"\";\nString s2 = \"\"\"\n\\n\"\"\";\nString s3 = \"\"\"\n\\\\\"\"\";\n\nString s4 = \"\"\"\n\\u000D\"\"\";\nString s5 = \"\"\"\n\\n\"\"\";\nString s6 = \"\"\"\n\\n\n\"\"\";\n\tSystem.out.println(\"Length of s1: \" + s1.length());\n\tSystem.out.println(\"Length of s2: \" + s2.length());\n\tSystem.out.println(\"Length of s3: \" + s3.length());\n\tSystem.out.println(\"Length of s4: \" + s4.length());\n\tSystem.out.println(\"Length of s5: \" + s5.length());\n\tSystem.out.println(\"Length of s6: \" + s6.length());\n\n\t}\n}\n\u279c  text-blocks-grammar /usr/lib/jvm/java-14-openjdk/bin/java --enable-preview TestClass\nLength of s1: 2\nLength of s2: 1\nLength of s3: 1\nLength of s4: 1\nLength of s5: 1\nLength of s6: 2\n\n\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|   `--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--METHOD_DEF -> METHOD_DEF [3:1]\n    |   |--MODIFIERS -> MODIFIERS [3:1]\n    |   |   |--LITERAL_PUBLIC -> public [3:1]\n    |   |   `--LITERAL_STATIC -> static [3:8]\n    |   |--TYPE -> TYPE [3:15]\n    |   |   `--LITERAL_VOID -> void [3:15]\n    |   |--IDENT -> main [3:20]\n    |   |--LPAREN -> ( [3:24]\n    |   |--PARAMETERS -> PARAMETERS [3:25]\n    |   |   `--PARAMETER_DEF -> PARAMETER_DEF [3:25]\n    |   |       |--MODIFIERS -> MODIFIERS [3:25]\n    |   |       |--TYPE -> TYPE [3:25]\n    |   |       |   `--IDENT -> String [3:25]\n    |   |       |--ELLIPSIS -> ... [3:31]\n    |   |       `--IDENT -> args [3:35]\n    |   |--RPAREN -> ) [3:39]\n    |   `--SLIST -> { [3:41]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [5:0]\n    |       |   |--MODIFIERS -> MODIFIERS [5:0]\n    |       |   |--TYPE -> TYPE [5:0]\n    |       |   |   `--IDENT -> String [5:0]\n    |       |   |--IDENT -> s1 [5:7]\n    |       |   `--ASSIGN -> = [5:10]\n    |       |       `--EXPR -> EXPR [5:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [5:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\\\n [5:15]\nresult of node.getText().length: 4\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [6:3]\n    |       |--SEMI -> ; [6:6]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [7:0]\n    |       |   |--MODIFIERS -> MODIFIERS [7:0]\n    |       |   |--TYPE -> TYPE [7:0]\n    |       |   |   `--IDENT -> String [7:0]\n    |       |   |--IDENT -> s2 [7:7]\n    |       |   `--ASSIGN -> = [7:10]\n    |       |       `--EXPR -> EXPR [7:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [7:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n [7:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [8:2]\n    |       |--SEMI -> ; [8:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [9:0]\n    |       |   |--MODIFIERS -> MODIFIERS [9:0]\n    |       |   |--TYPE -> TYPE [9:0]\n    |       |   |   `--IDENT -> String [9:0]\n    |       |   |--IDENT -> s3 [9:7]\n    |       |   `--ASSIGN -> = [9:10]\n    |       |       `--EXPR -> EXPR [9:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [9:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\\\ [9:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [10:2]\n    |       |--SEMI -> ; [10:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [12:0]\n    |       |   |--MODIFIERS -> MODIFIERS [12:0]\n    |       |   |--TYPE -> TYPE [12:0]\n    |       |   |   `--IDENT -> String [12:0]\n    |       |   |--IDENT -> s4 [12:7]\n    |       |   `--ASSIGN -> = [12:10]\n    |       |       `--EXPR -> EXPR [12:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [12:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\u000D [12:15]\nresult of node.getText().length: 7\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [13:6]\n    |       |--SEMI -> ; [13:9]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [14:0]\n    |       |   |--MODIFIERS -> MODIFIERS [14:0]\n    |       |   |--TYPE -> TYPE [14:0]\n    |       |   |   `--IDENT -> String [14:0]\n    |       |   |--IDENT -> s5 [14:7]\n    |       |   `--ASSIGN -> = [14:10]\n    |       |       `--EXPR -> EXPR [14:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [14:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n [14:15]\nresult of node.getText().length: 3\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [15:2]\n    |       |--SEMI -> ; [15:5]\n    |       |--VARIABLE_DEF -> VARIABLE_DEF [16:0]\n    |       |   |--MODIFIERS -> MODIFIERS [16:0]\n    |       |   |--TYPE -> TYPE [16:0]\n    |       |   |   `--IDENT -> String [16:0]\n    |       |   |--IDENT -> s6 [16:7]\n    |       |   `--ASSIGN -> = [16:10]\n    |       |       `--EXPR -> EXPR [16:12]\n    |       |           `--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [16:12]\n    |       |               |--TEXT_BLOCK_CONTENT -> \\n\\n\\n [16:15]\nresult of node.getText().length: 4\n    |       |               `--TEXT_BLOCK_LITERAL_END -> \"\"\" [18:0]\n......", "author": "nmancus1", "createdAt": "2020-07-31T15:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MzcwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463673703", "bodyText": "So, we aren't miscounting the actual line terminators, but our length is not accurate due to counting the whitespace preceding the text.", "author": "nmancus1", "createdAt": "2020-07-31T15:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MjUwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463682504", "bodyText": "It is good that keep spaces !!!!\nWe care about source file as text , not in what it result after compilation ( compiler remove a lot of stuff from source code, it is grey area). We might change this in future if there be bug demand.", "author": "romani", "createdAt": "2020-07-31T15:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex dbb36926b..c7a5f7305 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3755,8 +3755,8 @@ public final class TokenTypes {\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_BEGIN;\n \n     /**\n-     * Content (text) of a Java 14 text block. This is a\n-     * sequence of (possibly escaped) characters.\n+     * Content of a Java 14 text block. This is a\n+     * sequence of characters, possibly escaped with '/'.\n      *\n      * <p>For example:</p>\n      * <pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679166", "bodyText": "Class name is GeneratedTextBlockLexer", "author": "rnveach", "createdAt": "2020-07-30T01:23:12Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzMwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753309", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\nindex cef27b8e9..74ea3fa13 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n\n@@ -373,11 +373,11 @@ public class AstRegressionTest extends AbstractTreeTestSupport {\n             }\n \n             if (expectPass) {\n-                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                assertFalse(exception, \"Call to GeneratedTextBlockLexer.\" + methodName\n                         + \" resulted in an exception\");\n             }\n             else {\n-                assertTrue(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                assertTrue(exception, \"Call to GeneratedTextBlockLexer.\" + methodName\n                         + \" did not result in an exception\");\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462679192", "bodyText": "same.", "author": "rnveach", "createdAt": "2020-07-30T01:23:19Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java", "diffHunk": "@@ -285,6 +325,80 @@ private static void verifyAstRaw(String expectedTextPrintFileName, String actual\n                 \"Generated AST from Java code should match pre-defined AST\");\n     }\n \n+    private static final class AssertGenTextBlockLexer\n+            extends GeneratedTextBlockLexer {\n+\n+        private int laPosition;\n+        private char[] laResults;\n+\n+        private AssertGenTextBlockLexer() {\n+            super((InputStream) null);\n+        }\n+\n+        public static void verifyPass(String methodName, char... laResults) throws Exception {\n+            verify(methodName, true, 1, laResults);\n+        }\n+\n+        public static void verifyFail(String methodName, char... laResults) throws Exception {\n+            verify(methodName, false, 1, laResults);\n+        }\n+\n+        private static void verify(String methodName, boolean expectPass, int guessing,\n+                                   char... laResults) throws Exception {\n+            final AssertGenTextBlockLexer instance =\n+                    new AssertGenTextBlockLexer();\n+            instance.laPosition = 0;\n+            instance.laResults = laResults.clone();\n+            instance.inputState.guessing = guessing;\n+\n+            final Method method = GeneratedTextBlockLexer.class.getDeclaredMethod(methodName,\n+                    boolean.class);\n+            boolean exception;\n+\n+            try {\n+                method.invoke(instance, true);\n+                exception = false;\n+            }\n+            catch (InvocationTargetException ex) {\n+                if (expectPass) {\n+                    throw ex;\n+                }\n+\n+                final Class<?> clss = ex.getTargetException().getClass();\n+                if (clss != NoViableAltForCharException.class\n+                        && clss != SemanticException.class) {\n+                    throw ex;\n+                }\n+                exception = true;\n+            }\n+\n+            if (expectPass) {\n+                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                        + \" resulted in an exception\");\n+            }\n+            else {\n+                assertTrue(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName", "originalCommit": "e98190ab57157814ea4838697df1759d9a1542cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1MzI4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r462753282", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-07-30T06:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\nindex cef27b8e9..74ea3fa13 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammar/AstRegressionTest.java\n\n@@ -373,11 +373,11 @@ public class AstRegressionTest extends AbstractTreeTestSupport {\n             }\n \n             if (expectPass) {\n-                assertFalse(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                assertFalse(exception, \"Call to GeneratedTextBlockLexer.\" + methodName\n                         + \" resulted in an exception\");\n             }\n             else {\n-                assertTrue(exception, \"Call to GeneratedJava14TextBlockLexer.\" + methodName\n+                assertTrue(exception, \"Call to GeneratedTextBlockLexer.\" + methodName\n                         + \" did not result in an exception\");\n             }\n         }\n"}}, {"oid": "2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "url": "https://github.com/checkstyle/checkstyle/commit/2c1b66616bcc7fb54ab67236b04e5f4284cd377e", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-30T05:59:48Z", "type": "forcePushed"}, {"oid": "5dde91171e358c940e8dc2542dead994f65df420", "url": "https://github.com/checkstyle/checkstyle/commit/5dde91171e358c940e8dc2542dead994f65df420", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T14:30:55Z", "type": "forcePushed"}, {"oid": "471e597f36396fa77447c31ef60cff70e3b430cf", "url": "https://github.com/checkstyle/checkstyle/commit/471e597f36396fa77447c31ef60cff70e3b430cf", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T14:43:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY1OTY5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463659698", "bodyText": "looks good, I really hope visualization of \"\\n\" if issue (by design) of our AST printer, and I agree it is confusing, but it is ok.\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [161:19]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\u000D [161:22]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [162:22]\n\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [163:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n [163:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [164:18]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [165:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\n\\n                 [165:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [167:16]\n\n`--TEXT_BLOCK_LITERAL_BEGIN -> \"\"\" [168:20]\n    |--TEXT_BLOCK_CONTENT -> \\n                \\\\n                 [168:23]\n    `--TEXT_BLOCK_LITERAL_END -> \"\"\" [170:16]", "author": "romani", "createdAt": "2020-07-31T14:54:44Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14TextBlocks.java", "diffHunk": "@@ -84,4 +156,17 @@ public String getEscapedSpaces() {\n             line 2\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\\s\n             \"\"\";\n     }\n+\n+    void lineTerminators() {\n+        String s = \"\"\"\n+                \\u000D\"\"\";\n+        String s1 = \"\"\"\n+                \\n\"\"\";\n+        String s2 = \"\"\"\n+                \\n\n+                \"\"\";\n+        String s3 = \"\"\"\n+                \\\n+                \"\"\";", "originalCommit": "471e597f36396fa77447c31ef60cff70e3b430cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T17:15:00Z", "type": "commit"}, {"oid": "893151e903514ca017ea26eca008253ec1fe1f69", "url": "https://github.com/checkstyle/checkstyle/commit/893151e903514ca017ea26eca008253ec1fe1f69", "message": "Issue #7103: Add support for Java 14 text block syntax", "committedDate": "2020-07-31T17:15:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzExMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463733113", "bodyText": "@romani @rnveach is there anything else I can show here?\nInput file: https://github.com/checkstyle/checkstyle/pull/8327/files#diff-8d67fe819d47f9a4758b17f98b092100", "author": "nmancus1", "createdAt": "2020-07-31T17:18:34Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/AstTreeStringPrinterTest.java", "diffHunk": "@@ -154,4 +155,28 @@ public void testAstTreeSingleLineComments() throws Exception {\n                 JavaParser.Options.WITH_COMMENTS);\n     }\n \n+    @Test\n+    public void testTextBlocksEscapesAreOneChar() throws Exception {\n+        final String inputFilename = \"InputAstTreeStringPrinterTextBlocksEscapesAreOneChar.java\";\n+        final DetailAST ast = JavaParser.parseFile(\n+                new File(getNonCompilablePath(inputFilename)), JavaParser.Options.WITHOUT_COMMENTS);\n+\n+        final DetailAST objectBlockNode = ast.findFirstToken(TokenTypes.OBJBLOCK);\n+        final DetailAST variableDefNode = objectBlockNode.findFirstToken(TokenTypes.VARIABLE_DEF);\n+        final DetailAST textBlockContentNode =\n+                variableDefNode.findFirstToken(TokenTypes.ASSIGN)\n+                        .findFirstToken(TokenTypes.EXPR)\n+                        .getFirstChild()\n+                        .findFirstToken(TokenTypes.TEXT_BLOCK_CONTENT);\n+\n+        final String textBlockContent = textBlockContentNode.getText();\n+\n+        assertThat(\"Text block content contains \\\"\\\\n\\\" as substring\",\n+                textBlockContent.contains(\"\\\\n\"), is(false));\n+        assertThat(\"Text block content line terminator is counted as one character\",\n+                textBlockContent.length(), is(1));\n+        assertThat(\"Text block content contains only a line terminator\",\n+                textBlockContent.matches(\"\\n\"), is(true));\n+    }", "originalCommit": "893151e903514ca017ea26eca008253ec1fe1f69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjU4Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8327#discussion_r463806587", "bodyText": "I am satisfied.\n\\n is escaping of AST printer.", "author": "romani", "createdAt": "2020-07-31T20:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzExMw=="}], "type": "inlineReview", "revised_code": null}]}