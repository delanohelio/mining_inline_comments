{"pr_number": 8583, "pr_title": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "pr_createdAt": "2020-07-31T12:35:08Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8583", "timeline": [{"oid": "3a4ae3f7fa4351357adbb12d6d5bdbefc1af53ea", "url": "https://github.com/checkstyle/checkstyle/commit/3a4ae3f7fa4351357adbb12d6d5bdbefc1af53ea", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-07-31T12:40:33Z", "type": "forcePushed"}, {"oid": "d49ca718888abc158a5f6c18972377d8bcca2717", "url": "https://github.com/checkstyle/checkstyle/commit/d49ca718888abc158a5f6c18972377d8bcca2717", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-07-31T15:03:27Z", "type": "forcePushed"}, {"oid": "14cc2ec51d8fb536d16dbd141e2626d3663dc183", "url": "https://github.com/checkstyle/checkstyle/commit/14cc2ec51d8fb536d16dbd141e2626d3663dc183", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-08-13T15:10:37Z", "type": "forcePushed"}, {"oid": "e4a0270edc84d4983a914461cc567d081066cd50", "url": "https://github.com/checkstyle/checkstyle/commit/e4a0270edc84d4983a914461cc567d081066cd50", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-08-20T08:55:57Z", "type": "forcePushed"}, {"oid": "c6a68fc8a13d7c28c4d2671d8bba13467dbf40d6", "url": "https://github.com/checkstyle/checkstyle/commit/c6a68fc8a13d7c28c4d2671d8bba13467dbf40d6", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-17T10:22:03Z", "type": "forcePushed"}, {"oid": "41ca7201f92e02362bf799a9bdade24c97621bf5", "url": "https://github.com/checkstyle/checkstyle/commit/41ca7201f92e02362bf799a9bdade24c97621bf5", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-17T11:12:35Z", "type": "forcePushed"}, {"oid": "583da0963ac2bfd988e5393843bee9ea48072a0e", "url": "https://github.com/checkstyle/checkstyle/commit/583da0963ac2bfd988e5393843bee9ea48072a0e", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-20T17:29:25Z", "type": "forcePushed"}, {"oid": "5a2935e697c415fe4040b465ca182a41b67b33fb", "url": "https://github.com/checkstyle/checkstyle/commit/5a2935e697c415fe4040b465ca182a41b67b33fb", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-24T14:18:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MzAxNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494363016", "bodyText": "methods? this check is only about fields.", "author": "romani", "createdAt": "2020-09-24T14:25:13Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private", "originalCommit": "5a2935e697c415fe4040b465ca182a41b67b33fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NTI0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494375243", "bodyText": "This method is common for several checks, including MethodNameCheck. I added test case, report and PR title shows that this one is also fixed.", "author": "strkkk", "createdAt": "2020-09-24T14:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MzAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a42b77f1087ddd2912411930773d5a9779476389", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\nindex 27f023c26..c8b57f161 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n\n@@ -105,11 +105,11 @@ public abstract class AbstractAccessControlNameCheck\n      * @return true if public\n      */\n     private static boolean isPublic(DetailAST modifiers) {\n-        return ScopeUtil.isInInterfaceBlock(modifiers)\n+        return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n+                || ScopeUtil.isInAnnotationBlock(modifiers)\n+                || ScopeUtil.isInInterfaceBlock(modifiers)\n                 // interface methods can be private\n-                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n-                    || ScopeUtil.isInAnnotationBlock(modifiers)\n-                    || modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTMxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494365318", "bodyText": "please make it like\n                    modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;\n                     || ScopeUtil.isInAnnotationBlock(modifiers)\n                     || ScopeUtil.isInInterfaceBlock(modifiers)\n                       // interface methods can be private\n                     && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n\nit will be easier to read.", "author": "romani", "createdAt": "2020-09-24T14:28:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n+                    || ScopeUtil.isInAnnotationBlock(modifiers)\n+                    || modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;", "originalCommit": "5a2935e697c415fe4040b465ca182a41b67b33fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxOTA0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494419047", "bodyText": "done", "author": "strkkk", "createdAt": "2020-09-24T15:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NTMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "a42b77f1087ddd2912411930773d5a9779476389", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\nindex 27f023c26..c8b57f161 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n\n@@ -105,11 +105,11 @@ public abstract class AbstractAccessControlNameCheck\n      * @return true if public\n      */\n     private static boolean isPublic(DetailAST modifiers) {\n-        return ScopeUtil.isInInterfaceBlock(modifiers)\n+        return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n+                || ScopeUtil.isInAnnotationBlock(modifiers)\n+                || ScopeUtil.isInInterfaceBlock(modifiers)\n                 // interface methods can be private\n-                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null\n-                    || ScopeUtil.isInAnnotationBlock(modifiers)\n-                    || modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2Nzg0MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494367840", "bodyText": "final boolean isStaticFinal = \n            modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n                && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n            || ScopeUtil.isInAnnotationBlock(ast)\n            || ScopeUtil.isInInterfaceBlock(ast);\n\nto make it more visual priority of calculation", "author": "romani", "createdAt": "2020-09-24T14:31:16Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "diffHunk": "@@ -153,12 +153,11 @@ protected final boolean mustCheckName(DetailAST ast) {\n \n         final DetailAST modifiersAST =\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null;\n-        final boolean isFinal = modifiersAST.findFirstToken(TokenTypes.FINAL) != null;\n-\n-        if (isStatic && isFinal && shouldCheckInScope(modifiersAST)\n-                || ScopeUtil.isInAnnotationBlock(ast)\n-                || ScopeUtil.isInInterfaceBlock(ast)\n+        final boolean isStaticFinal = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n+            && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n+            || ScopeUtil.isInAnnotationBlock(ast)\n+            || ScopeUtil.isInInterfaceBlock(ast);", "originalCommit": "5a2935e697c415fe4040b465ca182a41b67b33fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxODk1OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494418959", "bodyText": "done", "author": "strkkk", "createdAt": "2020-09-24T15:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2Nzg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "a42b77f1087ddd2912411930773d5a9779476389", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java\nindex 2fcdb7344..2e35fa996 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java\n\n@@ -153,8 +153,9 @@ public class ConstantNameCheck\n \n         final DetailAST modifiersAST =\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStaticFinal = modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n-            && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n+        final boolean isStaticFinal =\n+            modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null\n+                && modifiersAST.findFirstToken(TokenTypes.FINAL) != null\n             || ScopeUtil.isInAnnotationBlock(ast)\n             || ScopeUtil.isInInterfaceBlock(ast);\n         if (isStaticFinal && shouldCheckInScope(modifiersAST)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494368847", "bodyText": "?\nAm I miss somethig ?\nhttps://checkstyle.sourceforge.io/config_naming.html#ConstantName\nit is about fields only.", "author": "romani", "createdAt": "2020-09-24T14:32:32Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/naming/methodname/InputMethodNamePrivateMethodsInInterfaces.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//non-compiled with javac: Compilable with Java9\n+package com.puppycrawl.tools.checkstyle.checks.naming.methodname;\n+\n+/*\n+ * Config:\n+ * applyToPrivate = false\n+ */\n+public interface InputMethodNamePrivateMethodsInInterfaces {\n+\n+    private void PrivateMethod() {} // ok\n+\n+    private static void PrivateMethod2() {} // ok\n+\n+    default void DefaultMethod() { // violation", "originalCommit": "5a2935e697c415fe4040b465ca182a41b67b33fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjQ3MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494376471", "bodyText": "MethodNameCheck giving false-positives as well on same thing, since they have common way to detect visibility. I fixed both checks.", "author": "strkkk", "createdAt": "2020-09-24T14:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMjE0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494412143", "bodyText": "Ok, my bad. Issue case focused me on one Check", "author": "romani", "createdAt": "2020-09-24T15:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2ODg0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a42b77f1087ddd2912411930773d5a9779476389", "url": "https://github.com/checkstyle/checkstyle/commit/a42b77f1087ddd2912411930773d5a9779476389", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-24T15:37:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5Mzk3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r494993973", "bodyText": "+2 in indentation, as it is not on same level of execution as ||", "author": "romani", "createdAt": "2020-09-25T13:39:16Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "diffHunk": "@@ -95,6 +96,22 @@ protected boolean shouldCheckInScope(DetailAST modifiers) {\n                 || applyToPrivate && isPrivate;\n     }\n \n+    /**\n+     * Checks if given modifiers has public access.\n+     * There are 2 cases - it is either has explicit modifier, or it is\n+     * in annotation or interface.\n+     *\n+     * @param modifiers - modifiers to check\n+     * @return true if public\n+     */\n+    private static boolean isPublic(DetailAST modifiers) {\n+        return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n+                || ScopeUtil.isInAnnotationBlock(modifiers)\n+                || ScopeUtil.isInInterfaceBlock(modifiers)\n+                // interface methods can be private\n+                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;", "originalCommit": "a42b77f1087ddd2912411930773d5a9779476389", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAyOTc2MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8583#discussion_r495029761", "bodyText": "done", "author": "strkkk", "createdAt": "2020-09-25T14:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5Mzk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8c9abb09364bb6c9a4e79a7efc5848ecd1b742ef", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\nindex c8b57f161..31704cfed 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java\n\n@@ -108,8 +108,8 @@ public abstract class AbstractAccessControlNameCheck\n         return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null\n                 || ScopeUtil.isInAnnotationBlock(modifiers)\n                 || ScopeUtil.isInInterfaceBlock(modifiers)\n-                // interface methods can be private\n-                && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;\n+                    // interface methods can be private\n+                    && modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) == null;\n     }\n \n     /**\n"}}, {"oid": "8c9abb09364bb6c9a4e79a7efc5848ecd1b742ef", "url": "https://github.com/checkstyle/checkstyle/commit/8c9abb09364bb6c9a4e79a7efc5848ecd1b742ef", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-25T14:30:51Z", "type": "commit"}, {"oid": "8c9abb09364bb6c9a4e79a7efc5848ecd1b742ef", "url": "https://github.com/checkstyle/checkstyle/commit/8c9abb09364bb6c9a4e79a7efc5848ecd1b742ef", "message": "Issue #8569: fix ConstantNameCheck and MethodNameCheck for interfaces", "committedDate": "2020-09-25T14:30:51Z", "type": "forcePushed"}]}