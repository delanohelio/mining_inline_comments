{"pr_number": 8033, "pr_title": "Issue #7647: Update doc for IllegalType", "pr_createdAt": "2020-04-04T18:34:27Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8033", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzM1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r403513356", "bodyText": "please add more examples of default class names", "author": "strkkk", "createdAt": "2020-04-04T20:28:42Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "originalCommit": "95b112a075457f52a3793dc1d57f1935e664fc70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzQ2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r405713465", "bodyText": "done", "author": "DXTkastb", "createdAt": "2020-04-08T18:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c4eedd4b01ac7012685fdf9f57309f568afef6b2", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex ef5a40c2e..c7923571e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n\n@@ -136,14 +136,49 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  * &lt;module name=&quot;IllegalType&quot;/&gt;\n  * </pre>\n  * <pre>\n- * public class Test {\n- *   public void function() {\n- *     HashMap&lt;String, String&gt; var; // violation\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer> intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n  *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n  * }\n  * </pre>\n  * <p>\n- * To configure the check so that it ignores function() methods:\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzQyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r403513428", "bodyText": "please do not use var as variable name, it can be a bit confusing after java 10", "author": "strkkk", "createdAt": "2020-04-04T20:29:12Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,37 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public void function() {\n+ *     HashMap&lt;String, String&gt; var; // violation", "originalCommit": "95b112a075457f52a3793dc1d57f1935e664fc70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzUxOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r405713519", "bodyText": "done", "author": "DXTkastb", "createdAt": "2020-04-08T18:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUxMzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c4eedd4b01ac7012685fdf9f57309f568afef6b2", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex ef5a40c2e..c7923571e 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n\n@@ -136,14 +136,49 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  * &lt;module name=&quot;IllegalType&quot;/&gt;\n  * </pre>\n  * <pre>\n- * public class Test {\n- *   public void function() {\n- *     HashMap&lt;String, String&gt; var; // violation\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer> intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n  *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n  * }\n  * </pre>\n  * <p>\n- * To configure the check so that it ignores function() methods:\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n"}}, {"oid": "c4eedd4b01ac7012685fdf9f57309f568afef6b2", "url": "https://github.com/checkstyle/checkstyle/commit/c4eedd4b01ac7012685fdf9f57309f568afef6b2", "message": "Issue #7647: Update doc for IllegalType", "committedDate": "2020-04-08T17:37:24Z", "type": "forcePushed"}, {"oid": "a27f3d57485eb4565785455f27e555123ee2fff5", "url": "https://github.com/checkstyle/checkstyle/commit/a27f3d57485eb4565785455f27e555123ee2fff5", "message": "Issue #7647: Update doc for IllegalType", "committedDate": "2020-04-08T18:42:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDAyNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040027", "bodyText": "typeParam(T) invalid syntax", "author": "strkkk", "createdAt": "2020-04-09T08:27:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation", "originalCommit": "a27f3d57485eb4565785455f27e555123ee2fff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDc2NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164764", "bodyText": "done.", "author": "DXTkastb", "createdAt": "2020-04-09T12:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "0871a24d5ef376bab29a9cfc40ea49dcda97cb56", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex d8ccd987f..8f824a353 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n\n@@ -171,7 +171,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  *     java.util.TreeSet treeset; // Ok\n  *   }\n  *\n- *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T t) {} // violation\n  *\n  *   public void fullName(TreeSet a) {} // OK\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDM3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040373", "bodyText": "please change ignored method name to function as description says", "author": "strkkk", "createdAt": "2020-04-09T08:27:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;", "originalCommit": "a27f3d57485eb4565785455f27e555123ee2fff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDg1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164855", "bodyText": "done.", "author": "DXTkastb", "createdAt": "2020-04-09T12:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0871a24d5ef376bab29a9cfc40ea49dcda97cb56", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex d8ccd987f..8f824a353 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n\n@@ -171,7 +171,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  *     java.util.TreeSet treeset; // Ok\n  *   }\n  *\n- *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T t) {} // violation\n  *\n  *   public void fullName(TreeSet a) {} // OK\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDQyMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406040423", "bodyText": "here too", "author": "strkkk", "createdAt": "2020-04-09T08:27:49Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "diffHunk": "@@ -130,13 +130,88 @@\n  * </li>\n  * </ul>\n  * <p>\n- * To configure the check so that it ignores getInstance() methods:\n+ * Default Configuration:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=&quot;IllegalType&quot;/&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // violation\n+ *     TreeMap&lt;Integer, String&gt; treemap =\n+ *     new TreeMap&lt;Integer, String&gt;(); // violation\n+ *     Test t; // OK\n+ *     HashMap&lt;String, String&gt; hmap; // violation\n+ *     Queue&lt;Integer&gt; intqueue; // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // violation\n+ *   }\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that particular tokens are checked:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"IllegalType\"&gt;\n+ *   &lt;property name=\"tokens\" value=\"METHOD_DEF\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <pre>\n+ * public class Test extends TreeSet { // OK\n+ *   public &lt;T extends java.util.HashSet&gt; void method() { // violation\n+ *     LinkedHashMap&lt;Integer, String&gt; lhmap =\n+ *     new LinkedHashMap&lt;Integer, String&gt;(); // OK\n+ *\n+ *     java.lang.IllegalArgumentException illegalex; // OK\n+ *     java.util.TreeSet treeset; // Ok\n+ *   }\n+ *\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *\n+ *   public void fullName(TreeSet a) {} // OK\n+ *\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the Check so that it ignores function() methods:\n  * </p>\n  * <pre>\n  * &lt;module name=&quot;IllegalType&quot;&gt;\n- *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;getInstance&quot;/&gt;\n+ *   &lt;property name=&quot;ignoredMethodNames&quot; value=&quot;function1&quot;/&gt;\n  * &lt;/module&gt;\n  * </pre>\n+ * <pre>\n+ * public class Test {\n+ *   public HashMap&lt;String, String&gt; function1() { // OK", "originalCommit": "a27f3d57485eb4565785455f27e555123ee2fff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDk0NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8033#discussion_r406164945", "bodyText": "done.", "author": "DXTkastb", "createdAt": "2020-04-09T12:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MDQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0871a24d5ef376bab29a9cfc40ea49dcda97cb56", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\nindex d8ccd987f..8f824a353 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java\n\n@@ -171,7 +171,7 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n  *     java.util.TreeSet treeset; // Ok\n  *   }\n  *\n- *   public &lt;T extends java.util.HashSet&gt; void typeParam(T) {} // violation\n+ *   public &lt;T extends java.util.HashSet&gt; void typeParam(T t) {} // violation\n  *\n  *   public void fullName(TreeSet a) {} // OK\n  *\n"}}, {"oid": "0871a24d5ef376bab29a9cfc40ea49dcda97cb56", "url": "https://github.com/checkstyle/checkstyle/commit/0871a24d5ef376bab29a9cfc40ea49dcda97cb56", "message": "Issue #7647: Update doc for IllegalType", "committedDate": "2020-04-09T12:17:22Z", "type": "forcePushed"}, {"oid": "fb17286c0276b3c9482de57caad62ad4a9f5e411", "url": "https://github.com/checkstyle/checkstyle/commit/fb17286c0276b3c9482de57caad62ad4a9f5e411", "message": "Issue #7647: Update doc for IllegalType", "committedDate": "2020-04-10T08:54:50Z", "type": "commit"}, {"oid": "fb17286c0276b3c9482de57caad62ad4a9f5e411", "url": "https://github.com/checkstyle/checkstyle/commit/fb17286c0276b3c9482de57caad62ad4a9f5e411", "message": "Issue #7647: Update doc for IllegalType", "committedDate": "2020-04-10T08:54:50Z", "type": "forcePushed"}]}