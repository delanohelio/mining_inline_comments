{"pr_number": 8057, "pr_title": "Issue #7692: Update doc for CyclomaticComplexity", "pr_createdAt": "2020-04-09T13:10:20Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8057", "timeline": [{"oid": "4641b7155a6458d271a6d13580b587949c505e18", "url": "https://github.com/checkstyle/checkstyle/commit/4641b7155a6458d271a6d13580b587949c505e18", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-09T13:13:14Z", "type": "forcePushed"}, {"oid": "265fe119b5aa322f1f124344a39d5d7c59c4ca3e", "url": "https://github.com/checkstyle/checkstyle/commit/265fe119b5aa322f1f124344a39d5d7c59c4ca3e", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-09T14:37:36Z", "type": "forcePushed"}, {"oid": "029ffebf76590c0f73af2e315365b66639b8d765", "url": "https://github.com/checkstyle/checkstyle/commit/029ffebf76590c0f73af2e315365b66639b8d765", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-09T17:12:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407071945", "bodyText": "this example looks redundant", "author": "strkkk", "createdAt": "2020-04-11T14:44:20Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n  * Explanation on how complexity is calculated (switchBlockAsSingleDecisionPoint is set to false):", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDA4Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407074082", "bodyText": "so should i remove the redundant cases?", "author": "sulkykookie", "createdAt": "2020-04-11T15:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NTcwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407075704", "bodyText": "I think yes, because other examples are pretty good at explaining how complexity is calculated", "author": "strkkk", "createdAt": "2020-04-11T15:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Mjk0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407082943", "bodyText": "should i remove both of the examples below this?", "author": "sulkykookie", "createdAt": "2020-04-11T16:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MTk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjIwNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072204", "bodyText": "please add \"operator\" to just operator signs, I mean to make it like \"|| operator\"", "author": "strkkk", "createdAt": "2020-04-11T14:46:47Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjM3MA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072370", "bodyText": "switch is not considered when switchBlockAsSingleDecisionPoint is false\nThis is confusing. Why it is not considered when below you show that every case statement adds +1 to complexity?", "author": "strkkk", "createdAt": "2020-04-11T14:48:20Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072533", "bodyText": "please change one of else ifs to ternar operator example.", "author": "strkkk", "createdAt": "2020-04-11T14:49:56Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDE5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407074194", "bodyText": "so u mean to add ternary operator example in one of the bodies?", "author": "sulkykookie", "createdAt": "2020-04-11T15:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NTc5NA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407075794", "bodyText": "No, just remove one else if and add ternary operator after last else, like it is in other example", "author": "strkkk", "createdAt": "2020-04-11T15:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjU2OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072569", "bodyText": "please add necessary fields to make it compilable.\nAlso, there is no need to compare variables, it can be int variables compared with literals, like a == 1", "author": "strkkk", "createdAt": "2020-04-11T14:50:30Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3MjczNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072734", "bodyText": "no need for double if", "author": "strkkk", "createdAt": "2020-04-11T14:51:58Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3Mjg1Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8057#discussion_r407072852", "bodyText": "? -> ternary  operator", "author": "strkkk", "createdAt": "2020-04-11T14:53:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "diffHunk": "@@ -99,50 +99,166 @@\n  * &lt;module name=\"CyclomaticComplexity\"/&gt;\n  * </pre>\n  * <p>\n- * To configure the check with a threshold of 15:\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 12\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n+ *         case 1: // 10, case\n+ *           fun1();\n+ *           break;\n+ *         case 2: // 11, case\n+ *           fun2();\n+ *           break;\n+ *         case 3: // 12, case\n+ *           fun3();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check with a threshold of 4 and check only for while and do-while loops:\n+ * </p>\n+ * <pre>\n+ * &lt;module name=\"CyclomaticComplexity\"&gt;\n+ *   &lt;property name=\"max\" value=\"4\"/&gt;\n+ *   &lt;property name=\"tokens\" value=\"LITERAL_WHILE, LITERAL_DO\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 5\n+ *   public void foo() { // 1, function declaration\n+ *     while (a &lt; b // 2, while\n+ *       &amp;&amp; a &gt; c) {\n+ *       fun();\n+ *     }\n+ *     if (a == b) {\n+ *       if (a &lt; c) {\n+ *       } else {\n+ *         do { // 3, do\n+ *           fun();\n+ *         } while (d);\n+ *       }\n+ *     } else if (c == d) {\n+ *       while (c &gt; 0) { // 4, while\n+ *         fun();\n+ *       }\n+ *       do { // 5, do-while\n+ *         fun();\n+ *       } while (e);\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to consider switch-case block as one decision point.\n  * </p>\n  * <pre>\n  * &lt;module name=\"CyclomaticComplexity\"&gt;\n- *   &lt;property name=\"max\" value=\"15\"/&gt;\n+ *   &lt;property name=\"switchBlockAsSingleDecisionPoint\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * class CyclomaticComplexity {\n+ *   // Cyclomatic Complexity = 11\n+ *   public void foo() { // 1, function declaration\n+ *     if (a == b) { // 2, if\n+ *       fun1();\n+ *     } else if (a == c // 3, if\n+ *       &amp;&amp; a == d) { // 4, &amp;&amp;\n+ *       if (c == e) { // 5, if\n+ *         fun2();\n+ *       }\n+ *     } else if (a == c // 6, if\n+ *       || a == g) { // 7, ||\n+ *       fun3();\n+ *     } else if (g == h) { // 8, if\n+ *       try {\n+ *         fun4();\n+ *       } catch (Exception e) { // 9, catch\n+ *       }\n+ *     } else {\n+ *       switch(n) { // 10, switch\n+ *         case 1:\n+ *           fun1();\n+ *           break;\n+ *         case 2:\n+ *           fun2();\n+ *           break;\n+ *         default:\n+ *           break;\n+ *       }\n+ *     }\n+ *     j = a &gt; k ? b : c; // 11, ?", "originalCommit": "029ffebf76590c0f73af2e315365b66639b8d765", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a797bc5348679d2b475c3c4ec631317601c8f08", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\nindex 4e03f11de..62e2b1645 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java\n\n@@ -103,38 +103,37 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * </p>\n  * <pre>\n  * class CyclomaticComplexity {\n- *   // Cyclomatic Complexity = 12\n+ *   // Cyclomatic Complexity = 11\n+ *   int a, b, c, d, n;\n  *   public void foo() { // 1, function declaration\n- *     if (a == b) { // 2, if\n+ *     if (a == 1) { // 2, if\n  *       fun1();\n- *     } else if (a == c // 3, if\n- *       &amp;&amp; a == d) { // 4, &amp;&amp;\n- *       if (c == e) { // 5, if\n+ *     } else if (a == b // 3, if\n+ *       &amp;&amp; a == c) { // 4, &amp;&amp; operator\n+ *       if (c == 2) { // 5, if\n  *         fun2();\n  *       }\n- *     } else if (a == c // 6, if\n- *       || a == g) { // 7, ||\n- *       fun3();\n- *     } else if (g == h) { // 8, if\n+ *     } else if (a == d) { // 6, if\n  *       try {\n  *         fun4();\n- *       } catch (Exception e) { // 9, catch\n+ *       } catch (Exception e) { // 7, catch\n  *       }\n  *     } else {\n- *       switch(n) { // switch is not considered when switchBlockAsSingleDecisionPoint is false\n- *         case 1: // 10, case\n+ *       switch(n) {\n+ *         case 1: // 8, case\n  *           fun1();\n  *           break;\n- *         case 2: // 11, case\n+ *         case 2: // 9, case\n  *           fun2();\n  *           break;\n- *         case 3: // 12, case\n+ *         case 3: // 10, case\n  *           fun3();\n  *           break;\n  *         default:\n  *           break;\n  *       }\n  *     }\n+ *     d = a &lt; 0 ? -1 : 1; // 11, ternary operator\n  *   }\n  * }\n  * </pre>\n"}}, {"oid": "4a797bc5348679d2b475c3c4ec631317601c8f08", "url": "https://github.com/checkstyle/checkstyle/commit/4a797bc5348679d2b475c3c4ec631317601c8f08", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-11T17:02:05Z", "type": "forcePushed"}, {"oid": "6f99ad1b673b5427c16b2bbeb46d226b882f21de", "url": "https://github.com/checkstyle/checkstyle/commit/6f99ad1b673b5427c16b2bbeb46d226b882f21de", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-12T04:43:34Z", "type": "forcePushed"}, {"oid": "95628180f7068eff7d5f704fbc094d751df69071", "url": "https://github.com/checkstyle/checkstyle/commit/95628180f7068eff7d5f704fbc094d751df69071", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-12T04:45:24Z", "type": "forcePushed"}, {"oid": "0128453e9731ec878f7217e4403227b8c73f871e", "url": "https://github.com/checkstyle/checkstyle/commit/0128453e9731ec878f7217e4403227b8c73f871e", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-12T08:12:17Z", "type": "commit"}, {"oid": "0128453e9731ec878f7217e4403227b8c73f871e", "url": "https://github.com/checkstyle/checkstyle/commit/0128453e9731ec878f7217e4403227b8c73f871e", "message": "Issue #7692: Update doc for CyclomaticComplexity", "committedDate": "2020-04-12T08:12:17Z", "type": "forcePushed"}]}