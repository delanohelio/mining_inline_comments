{"pr_number": 8449, "pr_title": "Issue #6615: Add support for Java 14 switch and yield", "pr_createdAt": "2020-07-14T16:24:09Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8449", "timeline": [{"oid": "78c7001c46640f9ae51d87de9f44a213ba195e72", "url": "https://github.com/checkstyle/checkstyle/commit/78c7001c46640f9ae51d87de9f44a213ba195e72", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-14T19:54:16Z", "type": "forcePushed"}, {"oid": "ad4a24e3c0e563e4f53e00c4e8e43c1b552e5610", "url": "https://github.com/checkstyle/checkstyle/commit/ad4a24e3c0e563e4f53e00c4e8e43c1b552e5610", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-16T21:52:14Z", "type": "forcePushed"}, {"oid": "f4440a0eeb03d979bce5a2310f66d62deab56d55", "url": "https://github.com/checkstyle/checkstyle/commit/f4440a0eeb03d979bce5a2310f66d62deab56d55", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T00:16:05Z", "type": "forcePushed"}, {"oid": "78da64cc6951c2b615e9d995d20cdccfe519dd36", "url": "https://github.com/checkstyle/checkstyle/commit/78da64cc6951c2b615e9d995d20cdccfe519dd36", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T00:29:29Z", "type": "forcePushed"}, {"oid": "20a6016687b37ad53ce0fa8aca891293b1b786f6", "url": "https://github.com/checkstyle/checkstyle/commit/20a6016687b37ad53ce0fa8aca891293b1b786f6", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T02:57:42Z", "type": "forcePushed"}, {"oid": "96c9237375e0338cf62c09eea9955b1b07a2ec7c", "url": "https://github.com/checkstyle/checkstyle/commit/96c9237375e0338cf62c09eea9955b1b07a2ec7c", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T03:07:49Z", "type": "forcePushed"}, {"oid": "1257317baf2c7041609e6331db3e4d6acc8d8dec", "url": "https://github.com/checkstyle/checkstyle/commit/1257317baf2c7041609e6331db3e4d6acc8d8dec", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T05:57:15Z", "type": "forcePushed"}, {"oid": "ff0eec24145d655ea414691b12ccf0d8d0291243", "url": "https://github.com/checkstyle/checkstyle/commit/ff0eec24145d655ea414691b12ccf0d8d0291243", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T11:26:15Z", "type": "forcePushed"}, {"oid": "0a2b26cfc20040745b2d221a5b801e5f210d47fc", "url": "https://github.com/checkstyle/checkstyle/commit/0a2b26cfc20040745b2d221a5b801e5f210d47fc", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T13:53:41Z", "type": "forcePushed"}, {"oid": "08f32ec600614f547bd18386cb37b74f9c8976eb", "url": "https://github.com/checkstyle/checkstyle/commit/08f32ec600614f547bd18386cb37b74f9c8976eb", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-17T19:58:57Z", "type": "forcePushed"}, {"oid": "0f0f626bc8c515cc23ef32b01b9fa614d9a06665", "url": "https://github.com/checkstyle/checkstyle/commit/0f0f626bc8c515cc23ef32b01b9fa614d9a06665", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-18T03:12:22Z", "type": "forcePushed"}, {"oid": "0f07d12491d3dc321109f1f199a64a330abfc668", "url": "https://github.com/checkstyle/checkstyle/commit/0f07d12491d3dc321109f1f199a64a330abfc668", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-25T17:27:13Z", "type": "forcePushed"}, {"oid": "5e4d6b5a1be4cdf06b7d5b61f3dad42c05312f2f", "url": "https://github.com/checkstyle/checkstyle/commit/5e4d6b5a1be4cdf06b7d5b61f3dad42c05312f2f", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-25T20:45:55Z", "type": "forcePushed"}, {"oid": "8ccdf557954dff85f0a106d91e00069f099ef6c1", "url": "https://github.com/checkstyle/checkstyle/commit/8ccdf557954dff85f0a106d91e00069f099ef6c1", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-26T01:17:43Z", "type": "forcePushed"}, {"oid": "030137a6f17d49c9d8bfa7e7c6dcfdafdca292c1", "url": "https://github.com/checkstyle/checkstyle/commit/030137a6f17d49c9d8bfa7e7c6dcfdafdca292c1", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-26T12:48:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyNTc0NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r460525745", "bodyText": "Not directly related  to this line, but what should we do in the way of updating the switch statement TokenTypes.java documentation?  Have two different examples (one with case group, one with switch rules), then include a yield in each?", "author": "nmancus1", "createdAt": "2020-07-26T13:07:17Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3596,6 +3597,20 @@\n     public static final int RECORD_DEF =\n             GeneratedJavaTokenTypes.RECORD_DEF;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears", "originalCommit": "030137a6f17d49c9d8bfa7e7c6dcfdafdca292c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bbd01f2511188088a860f9620185835d09e7a09", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 7be47c8b9..fabef6eb7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3607,6 +3607,8 @@ public final class TokenTypes {\n      *\n      * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n      * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n      **/\n     public static final int LITERAL_YIELD =\n             GeneratedJavaTokenTypes.LITERAL_yield;\n"}}, {"oid": "6bbd01f2511188088a860f9620185835d09e7a09", "url": "https://github.com/checkstyle/checkstyle/commit/6bbd01f2511188088a860f9620185835d09e7a09", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-27T13:02:26Z", "type": "forcePushed"}, {"oid": "f9850b0e2356c7b3cf6947acd406422c74a75a59", "url": "https://github.com/checkstyle/checkstyle/commit/f9850b0e2356c7b3cf6947acd406422c74a75a59", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-07-28T12:25:25Z", "type": "forcePushed"}, {"oid": "167ae0134db45a55a5beeec5d005e7af988b0a03", "url": "https://github.com/checkstyle/checkstyle/commit/167ae0134db45a55a5beeec5d005e7af988b0a03", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-04T05:02:18Z", "type": "forcePushed"}, {"oid": "37b308042576b610f9c674dde9668e66b46a548e", "url": "https://github.com/checkstyle/checkstyle/commit/37b308042576b610f9c674dde9668e66b46a548e", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-04T12:40:23Z", "type": "forcePushed"}, {"oid": "913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "url": "https://github.com/checkstyle/checkstyle/commit/913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-04T12:48:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNjU5Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r465536596", "bodyText": "extra space after {", "author": "pbludov", "createdAt": "2020-08-05T07:45:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,77 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * switch (day) {\n+     *     case SAT, SUN -> \"Weekend\";\n+     *     default -> \"Working day\";\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * LITERAL_SWITCH (switch)\n+     * |--LPAREN (()\n+     * |--EXPR\n+     * |   `--IDENT (day)\n+     * |--RPAREN ())\n+     * |--LCURLY ({ )", "originalCommit": "913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "700f7119f3d844ff7791e7b54c5d7cc3036b935a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 907970213..8a03c1cd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3855,7 +3855,7 @@ public final class TokenTypes {\n      * |--EXPR\n      * |   `--IDENT (day)\n      * |--RPAREN ())\n-     * |--LCURLY ({ )\n+     * |--LCURLY ({)\n      * |--SWITCH_RULE\n      * |   |--LITERAL_CASE (case)\n      * |   |   |--EXPR\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzOTQ2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r465539466", "bodyText": "RCURLY ->(})  should be just RCURLY (})", "author": "pbludov", "createdAt": "2020-08-05T07:50:13Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,77 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * switch (day) {\n+     *     case SAT, SUN -> \"Weekend\";\n+     *     default -> \"Working day\";\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * LITERAL_SWITCH (switch)\n+     * |--LPAREN (()\n+     * |--EXPR\n+     * |   `--IDENT (day)\n+     * |--RPAREN ())\n+     * |--LCURLY ({ )\n+     * |--SWITCH_RULE\n+     * |   |--LITERAL_CASE (case)\n+     * |   |   |--EXPR\n+     * |   |   |   `--IDENT (SAT)\n+     * |   |   |--COMMA (,)\n+     * |   |   `--EXPR\n+     * |   |       `--IDENT (SUN)\n+     * |   |--LAMBDA ({@code ->})\n+     * |   |--EXPR\n+     * |   |   `--STRING_LITERAL (\"Weekend\" )\n+     * |   `--SEMI (;)\n+     * |--SWITCH_RULE\n+     * |   |--LITERAL_DEFAULT (default)\n+     * |   |--LAMBDA {@code ->})\n+     * |   |--EXPR\n+     * |   |   `--STRING_LITERAL (\"Working day\")\n+     * |   `--SEMI (;)\n+     * `--RCURLY ->(})", "originalCommit": "913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "700f7119f3d844ff7791e7b54c5d7cc3036b935a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 907970213..8a03c1cd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3855,7 +3855,7 @@ public final class TokenTypes {\n      * |--EXPR\n      * |   `--IDENT (day)\n      * |--RPAREN ())\n-     * |--LCURLY ({ )\n+     * |--LCURLY ({)\n      * |--SWITCH_RULE\n      * |   |--LITERAL_CASE (case)\n      * |   |   |--EXPR\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDE5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r465540198", "bodyText": "extra space after \"Weekend\"", "author": "pbludov", "createdAt": "2020-08-05T07:51:34Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,77 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * switch (day) {\n+     *     case SAT, SUN -> \"Weekend\";\n+     *     default -> \"Working day\";\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * LITERAL_SWITCH (switch)\n+     * |--LPAREN (()\n+     * |--EXPR\n+     * |   `--IDENT (day)\n+     * |--RPAREN ())\n+     * |--LCURLY ({ )\n+     * |--SWITCH_RULE\n+     * |   |--LITERAL_CASE (case)\n+     * |   |   |--EXPR\n+     * |   |   |   `--IDENT (SAT)\n+     * |   |   |--COMMA (,)\n+     * |   |   `--EXPR\n+     * |   |       `--IDENT (SUN)\n+     * |   |--LAMBDA ({@code ->})\n+     * |   |--EXPR\n+     * |   |   `--STRING_LITERAL (\"Weekend\" )", "originalCommit": "913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "700f7119f3d844ff7791e7b54c5d7cc3036b935a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 907970213..8a03c1cd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3855,7 +3855,7 @@ public final class TokenTypes {\n      * |--EXPR\n      * |   `--IDENT (day)\n      * |--RPAREN ())\n-     * |--LCURLY ({ )\n+     * |--LCURLY ({)\n      * |--SWITCH_RULE\n      * |   |--LITERAL_CASE (case)\n      * |   |   |--EXPR\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0NjQzMw==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r465546433", "bodyText": "missing (", "author": "pbludov", "createdAt": "2020-08-05T08:02:24Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,77 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * switch (day) {\n+     *     case SAT, SUN -> \"Weekend\";\n+     *     default -> \"Working day\";\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * LITERAL_SWITCH (switch)\n+     * |--LPAREN (()\n+     * |--EXPR\n+     * |   `--IDENT (day)\n+     * |--RPAREN ())\n+     * |--LCURLY ({ )\n+     * |--SWITCH_RULE\n+     * |   |--LITERAL_CASE (case)\n+     * |   |   |--EXPR\n+     * |   |   |   `--IDENT (SAT)\n+     * |   |   |--COMMA (,)\n+     * |   |   `--EXPR\n+     * |   |       `--IDENT (SUN)\n+     * |   |--LAMBDA ({@code ->})\n+     * |   |--EXPR\n+     * |   |   `--STRING_LITERAL (\"Weekend\" )\n+     * |   `--SEMI (;)\n+     * |--SWITCH_RULE\n+     * |   |--LITERAL_DEFAULT (default)\n+     * |   |--LAMBDA {@code ->})", "originalCommit": "913b06da7f4a93d4e81d322ac6ca644a4b7ff76d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "700f7119f3d844ff7791e7b54c5d7cc3036b935a", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 907970213..8a03c1cd5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3855,7 +3855,7 @@ public final class TokenTypes {\n      * |--EXPR\n      * |   `--IDENT (day)\n      * |--RPAREN ())\n-     * |--LCURLY ({ )\n+     * |--LCURLY ({)\n      * |--SWITCH_RULE\n      * |   |--LITERAL_CASE (case)\n      * |   |   |--EXPR\n"}}, {"oid": "700f7119f3d844ff7791e7b54c5d7cc3036b935a", "url": "https://github.com/checkstyle/checkstyle/commit/700f7119f3d844ff7791e7b54c5d7cc3036b935a", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-05T10:54:23Z", "type": "forcePushed"}, {"oid": "b63e17aa726cf310c890c5a95ecf47e9bbe95077", "url": "https://github.com/checkstyle/checkstyle/commit/b63e17aa726cf310c890c5a95ecf47e9bbe95077", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-06T16:38:57Z", "type": "forcePushed"}, {"oid": "b2fc09c17d95d73fe89c6e04759de00b67c61e37", "url": "https://github.com/checkstyle/checkstyle/commit/b2fc09c17d95d73fe89c6e04759de00b67c61e37", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-06T16:40:23Z", "type": "forcePushed"}, {"oid": "0743a683653640eb7c9dc30b813f40f0aef15814", "url": "https://github.com/checkstyle/checkstyle/commit/0743a683653640eb7c9dc30b813f40f0aef15814", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-07T02:07:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MTYxMA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467071610", "bodyText": "how this method code is related to switch ?", "author": "romani", "createdAt": "2020-08-07T14:21:00Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java", "diffHunk": "@@ -1,12 +1,45 @@\n //non-compiled with javac: Compilable with Java14\n-package com.puppycrawl.tools.checkstyle.grammar;\n+package com.puppycrawl.tools.checkstyle.grammar.java14;\n \n+import static java.time.Instant.*;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n import java.util.EnumSet;\n import java.util.Set;\n+import java.util.function.IntConsumer;\n import java.util.function.Supplier;\n \n public class InputJava14SwitchExpression {\n \n+    static class HardToParse {\n+        void foo() {\n+            Instant Ascii;\n+            byte[] decodabet = new byte[1];", "originalCommit": "0743a683653640eb7c9dc30b813f40f0aef15814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NzQ4Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467087486", "bodyText": "I found this code (from guava) during regression testing, line 19 and 25 caused exceptions during parsing when I was still struggling with castExpression  (along with the code on line 25). I put all code that gave problems in this static class to make sure that we can keep parsing it.", "author": "nmancus1", "createdAt": "2020-08-07T14:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MTYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "62541965d7439361c8896676b7a57ab1059553bc", "chunk": "diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\nindex 3db8c3f2c..6aaa5a6bc 100644\n--- a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n\n@@ -1,45 +1,12 @@\n //non-compiled with javac: Compilable with Java14\n-package com.puppycrawl.tools.checkstyle.grammar.java14;\n+package com.puppycrawl.tools.checkstyle.grammar;\n \n-import static java.time.Instant.*;\n-\n-import java.time.Instant;\n-import java.util.Arrays;\n import java.util.EnumSet;\n import java.util.Set;\n-import java.util.function.IntConsumer;\n import java.util.function.Supplier;\n \n public class InputJava14SwitchExpression {\n \n-    static class HardToParse {\n-        void foo() {\n-            Instant Ascii;\n-            byte[] decodabet = new byte[1];\n-            Arrays.fill(decodabet, (byte) -1);\n-            char[] chars = {'c','h','a','r','s'};\n-            for (\n-                    int i = 0;\n-                    i < chars.length; i++) {\n-                char c = chars[i];\n-                decodabet[c] = (byte) i;\n-            }\n-        }\n-        IntConsumer consumer = (IntConsumer) i -> {\n-        };\n-\n-        static String yield = \"yield\";\n-\n-        class yieldClass{\n-            int yield = 6;\n-\n-            public void yield(){\n-\n-            }\n-        }\n-\n-    }\n-\n     enum Day {\n         MON,\n         TUE,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MjY0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467072649", "bodyText": "place them both to new line.\nIt make sense to put .collect( to new line probably to reduce diff next time.", "author": "romani", "createdAt": "2020-08-07T14:22:47Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java", "diffHunk": "@@ -133,7 +133,7 @@\n                         \"PATTERN_VARIABLE_DEF\", \"RECORD_DEF\", \"LITERAL_RECORD\",\n                         \"RECORD_COMPONENTS\", \"RECORD_COMPONENT_DEF\", \"COMPACT_CTOR_DEF\",\n                         \"TEXT_BLOCK_LITERAL_BEGIN\", \"TEXT_BLOCK_CONTENT\",\n-                        \"TEXT_BLOCK_LITERAL_END\").collect(\n+                        \"TEXT_BLOCK_LITERAL_END\", \"LITERAL_YIELD\", \"SWITCH_RULE\").collect(", "originalCommit": "0743a683653640eb7c9dc30b813f40f0aef15814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzA5OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467093098", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-07T14:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MjY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "64c3164ddad1992076694af5bf271d8a37471b79", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\nindex c2b89ef1e..e6a3d2a0a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n\n@@ -132,9 +132,9 @@ public class AllChecksTest extends AbstractModuleTestSupport {\n                         \"STRING_LITERAL\", \"ARRAY_DECLARATOR\", \"LITERAL_CASE\",\n                         \"PATTERN_VARIABLE_DEF\", \"RECORD_DEF\", \"LITERAL_RECORD\",\n                         \"RECORD_COMPONENTS\", \"RECORD_COMPONENT_DEF\", \"COMPACT_CTOR_DEF\",\n-                        \"TEXT_BLOCK_LITERAL_BEGIN\", \"TEXT_BLOCK_CONTENT\",\n-                        \"TEXT_BLOCK_LITERAL_END\", \"LITERAL_YIELD\", \"SWITCH_RULE\").collect(\n-                        Collectors.toSet()));\n+                        \"TEXT_BLOCK_LITERAL_BEGIN\", \"TEXT_BLOCK_CONTENT\", \"TEXT_BLOCK_LITERAL_END\",\n+                        \"LITERAL_YIELD\", \"SWITCH_RULE\")\n+                        .collect(Collectors.toSet()));\n         // we have no need to block specific token text\n         CHECKSTYLE_TOKENS_IN_CONFIG_TO_IGNORE.put(\"IllegalTokenText\",\n                 Stream.of(\"NUM_DOUBLE\", \"NUM_FLOAT\", \"NUM_INT\", \"NUM_LONG\", \"IDENT\",\n"}}, {"oid": "64c3164ddad1992076694af5bf271d8a37471b79", "url": "https://github.com/checkstyle/checkstyle/commit/64c3164ddad1992076694af5bf271d8a37471b79", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-07T14:49:14Z", "type": "forcePushed"}, {"oid": "de6be1b5ac35c7d8e49c0b80c66c107aa90f1828", "url": "https://github.com/checkstyle/checkstyle/commit/de6be1b5ac35c7d8e49c0b80c66c107aa90f1828", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-08T11:22:31Z", "type": "forcePushed"}, {"oid": "4c12c0d3d76ba4da26312a46051669f1e93c20f4", "url": "https://github.com/checkstyle/checkstyle/commit/4c12c0d3d76ba4da26312a46051669f1e93c20f4", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-08T14:34:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MTE4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467471189", "bodyText": "return switch (day) {\nto make it clear that it is expression like switch, not a regular switch.", "author": "romani", "createdAt": "2020-08-08T14:40:12Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,77 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * switch (day) {", "originalCommit": "de6be1b5ac35c7d8e49c0b80c66c107aa90f1828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzE3Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467473172", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-08T15:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MTE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "47a459c79ec3db8c7307a99caaf8def933e92928", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 9be28508b..080e03cf5 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3843,37 +3843,40 @@ public final class TokenTypes {\n      *\n      * <p>For example:</p>\n      * <pre>\n-     * switch (day) {\n+     * return switch (day) {\n      *     case SAT, SUN {@code ->} \"Weekend\";\n      *     default {@code ->} \"Working day\";\n      * };\n      * </pre>\n      * <p>parses as:</p>\n      * <pre>\n-     * LITERAL_SWITCH (switch)\n-     * |--LPAREN (()\n-     * |--EXPR\n-     * |   `--IDENT (day)\n-     * |--RPAREN ())\n-     * |--LCURLY ({ )\n-     * |--SWITCH_RULE\n-     * |   |--LITERAL_CASE (case)\n-     * |   |   |--EXPR\n-     * |   |   |   `--IDENT (SAT)\n-     * |   |   |--COMMA (,)\n-     * |   |   `--EXPR\n-     * |   |       `--IDENT (SUN)\n-     * |   |--LAMBDA ({@code ->})\n-     * |   |--EXPR\n-     * |   |   `--STRING_LITERAL (\"Weekend\" )\n-     * |   `--SEMI (;)\n-     * |--SWITCH_RULE\n-     * |   |--LITERAL_DEFAULT (default)\n-     * |   |--LAMBDA {@code ->})\n-     * |   |--EXPR\n-     * |   |   `--STRING_LITERAL (\"Working day\")\n-     * |   `--SEMI (;)\n-     * `--RCURLY (})\n+     *  LITERAL_RETURN (return)\n+     *   |--EXPR\n+     *   |   `--LITERAL_SWITCH (switch)\n+     *   |       |--LPAREN (()\n+     *   |       |--EXPR\n+     *   |       |   `--IDENT (day)\n+     *   |       |--RPAREN ())\n+     *   |       |--LCURLY ({)\n+     *   |       |--SWITCH_RULE\n+     *   |       |   |--LITERAL_CASE (case)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--IDENT (SAT)\n+     *   |       |   |   |--COMMA (,)\n+     *   |       |   |   `--EXPR\n+     *   |       |   |       `--IDENT (SUN)\n+     *   |       |   |--LAMBDA {@code ->}\n+     *   |       |   |--EXPR\n+     *   |       |   |   `--STRING_LITERAL (\"Weekend\")\n+     *   |       |   `--SEMI (;)\n+     *   |       |--SWITCH_RULE\n+     *   |       |   |--LITERAL_DEFAULT (default)\n+     *   |       |   |--LAMBDA {@code ->}\n+     *   |       |   |--EXPR\n+     *   |       |   |   `--STRING_LITERAL (\"Working day\")\n+     *   |       |   `--SEMI (;)\n+     *   |       `--RCURLY (})\n+     *   `--SEMI (;)\n      * </pre>\n      *\n      * @see #LITERAL_CASE\n"}}, {"oid": "47a459c79ec3db8c7307a99caaf8def933e92928", "url": "https://github.com/checkstyle/checkstyle/commit/47a459c79ec3db8c7307a99caaf8def933e92928", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-08T14:54:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NTE2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467475166", "bodyText": "we need AST example to show context of usage.\nas yield is very specific \"keyword\" that is activated in switch only, in comparison to other keywords that do not allow to create any identifier with same name.", "author": "romani", "createdAt": "2020-08-08T15:25:05Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,80 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.", "originalCommit": "47a459c79ec3db8c7307a99caaf8def933e92928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NTYyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467485622", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-08T17:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NTE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NTY4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467485689", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-08T17:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5cf655aee255d5a7d4885dee1616e2c3b6d8c3b9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 080e03cf5..9c1ce8dbd 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3822,6 +3822,52 @@ public final class TokenTypes {\n      * The {@code yield} keyword.  This element appears\n      * as part of a yield statement.\n      *\n+     * <p>For example:</p>\n+     * <pre>\n+     * return switch (mode) {\n+     *    case \"a\", \"b\":\n+     *        yield 1;\n+     *    default:\n+     *        yield - 1;\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     *  LITERAL_RETURN (return)\n+     *   |--EXPR\n+     *   |   `--LITERAL_SWITCH (switch)\n+     *   |       |--LPAREN (()\n+     *   |       |--EXPR\n+     *   |       |   `--IDENT (mode)\n+     *   |       |--RPAREN ())\n+     *   |       |--LCURLY ({)\n+     *   |       |--CASE_GROUP\n+     *   |       |   |--LITERAL_CASE (case)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--STRING_LITERAL (\"a\")\n+     *   |       |   |   |--COMMA (,)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--STRING_LITERAL (\"b\")\n+     *   |       |   |   `--COLON (:)\n+     *   |       |   `--SLIST\n+     *   |       |       `--LITERAL_YIELD (yield)\n+     *   |       |           |--EXPR\n+     *   |       |           |   `--NUM_INT 1\n+     *   |       |           `--SEMI (;)\n+     *   |       |--CASE_GROUP\n+     *   |       |   |--LITERAL_DEFAULT (default)\n+     *   |       |   |   `--COLON (:)\n+     *   |       |   `--SLIST\n+     *   |       |       `--LITERAL_YIELD (yield)\n+     *   |       |           |--EXPR\n+     *   |       |           |   `--UNARY_MINUS (-)\n+     *   |       |           |       `--NUM_INT (1)\n+     *   |       |           `--SEMI (;)\n+     *   |       `--RCURLY (})\n+     *   `--SEMI (;)\n+     * </pre>\n+     *\n+     *\n      * @see #LITERAL_SWITCH\n      * @see #CASE_GROUP\n      * @see #SLIST\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NzQxOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467477419", "bodyText": "wording is very strange.\nIt looks like brief of grammar. I doubt user need it, we never did this for other tokens.\nCan we simply do ?\nSwitch Expressions as content.\nall details on what is possible should be read in java specification(that might change in future), this file is not good place for this.", "author": "romani", "createdAt": "2020-08-08T15:48:19Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,80 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * A switch labeled rule has a switch label and either an expression,\n+     * block, or throw statement. A switch labeled statement group has one\n+     * or more switch labels and zero or more block statements. A switch label\n+     * is either a case or default label.", "originalCommit": "47a459c79ec3db8c7307a99caaf8def933e92928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4NTM4OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467485388", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-08T17:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5cf655aee255d5a7d4885dee1616e2c3b6d8c3b9", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 080e03cf5..9c1ce8dbd 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3822,6 +3822,52 @@ public final class TokenTypes {\n      * The {@code yield} keyword.  This element appears\n      * as part of a yield statement.\n      *\n+     * <p>For example:</p>\n+     * <pre>\n+     * return switch (mode) {\n+     *    case \"a\", \"b\":\n+     *        yield 1;\n+     *    default:\n+     *        yield - 1;\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     *  LITERAL_RETURN (return)\n+     *   |--EXPR\n+     *   |   `--LITERAL_SWITCH (switch)\n+     *   |       |--LPAREN (()\n+     *   |       |--EXPR\n+     *   |       |   `--IDENT (mode)\n+     *   |       |--RPAREN ())\n+     *   |       |--LCURLY ({)\n+     *   |       |--CASE_GROUP\n+     *   |       |   |--LITERAL_CASE (case)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--STRING_LITERAL (\"a\")\n+     *   |       |   |   |--COMMA (,)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--STRING_LITERAL (\"b\")\n+     *   |       |   |   `--COLON (:)\n+     *   |       |   `--SLIST\n+     *   |       |       `--LITERAL_YIELD (yield)\n+     *   |       |           |--EXPR\n+     *   |       |           |   `--NUM_INT 1\n+     *   |       |           `--SEMI (;)\n+     *   |       |--CASE_GROUP\n+     *   |       |   |--LITERAL_DEFAULT (default)\n+     *   |       |   |   `--COLON (:)\n+     *   |       |   `--SLIST\n+     *   |       |       `--LITERAL_YIELD (yield)\n+     *   |       |           |--EXPR\n+     *   |       |           |   `--UNARY_MINUS (-)\n+     *   |       |           |       `--NUM_INT (1)\n+     *   |       |           `--SEMI (;)\n+     *   |       `--RCURLY (})\n+     *   `--SEMI (;)\n+     * </pre>\n+     *\n+     *\n      * @see #LITERAL_SWITCH\n      * @see #CASE_GROUP\n      * @see #SLIST\n"}}, {"oid": "5cf655aee255d5a7d4885dee1616e2c3b6d8c3b9", "url": "https://github.com/checkstyle/checkstyle/commit/5cf655aee255d5a7d4885dee1616e2c3b6d8c3b9", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-08T17:12:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwODIyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467508226", "bodyText": "int yield = 0;\nreturn switch (mode) {\n\nto show that yield is not literal/keyword out of switch.", "author": "romani", "createdAt": "2020-08-08T21:58:30Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,123 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * return switch (mode) {", "originalCommit": "5cf655aee255d5a7d4885dee1616e2c3b6d8c3b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUyOTA1OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467529059", "bodyText": "Fixed.", "author": "nmancus1", "createdAt": "2020-08-09T03:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwODIyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5541fc10fb6257b000c48f7e926b7973feeddbfc", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex 9c1ce8dbd..f077d7d4a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3824,6 +3824,7 @@ public final class TokenTypes {\n      *\n      * <p>For example:</p>\n      * <pre>\n+     * int yield = 0; // not a keyword here\n      * return switch (mode) {\n      *    case \"a\", \"b\":\n      *        yield 1;\n"}}, {"oid": "5541fc10fb6257b000c48f7e926b7973feeddbfc", "url": "https://github.com/checkstyle/checkstyle/commit/5541fc10fb6257b000c48f7e926b7973feeddbfc", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-09T02:59:37Z", "type": "forcePushed"}, {"oid": "9f0f94963f2a18a1ed14934f9ff8b1a737390163", "url": "https://github.com/checkstyle/checkstyle/commit/9f0f94963f2a18a1ed14934f9ff8b1a737390163", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-09T15:21:27Z", "type": "forcePushed"}, {"oid": "cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "url": "https://github.com/checkstyle/checkstyle/commit/cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-09T16:21:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2Mjg4NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467662885", "bodyText": "Ending javadoc usually only has 1 *.", "author": "rnveach", "createdAt": "2020-08-10T02:24:03Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,133 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * int yield = 0; // not a keyword here\n+     * return switch (mode) {\n+     *    case \"a\", \"b\":\n+     *        yield 1;\n+     *    default:\n+     *        yield - 1;\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--LITERAL_INT (int)\n+     * |   |--IDENT (yield)\n+     * |   `--ASSIGN (=)\n+     * |       `--EXPR\n+     * |           `--NUM_INT (0)\n+     * |--SEMI (;)\n+     * |--LITERAL_RETURN (return)\n+     * |   |--EXPR\n+     * |   |   `--LITERAL_SWITCH (switch)\n+     * |   |       |--LPAREN (()\n+     * |   |       |--EXPR\n+     * |   |       |   `--IDENT (mode)\n+     * |   |       |--RPAREN ())\n+     * |   |       |--LCURLY ({)\n+     * |   |       |--CASE_GROUP\n+     * |   |       |   |--LITERAL_CASE (case)\n+     * |   |       |   |   |--EXPR\n+     * |   |       |   |   |   `--STRING_LITERAL (\"a\")\n+     * |   |       |   |   |--COMMA (,)\n+     * |   |       |   |   |--EXPR\n+     * |   |       |   |   |   `--STRING_LITERAL (\"b\")\n+     * |   |       |   |   `--COLON (:)\n+     * |   |       |   `--SLIST\n+     * |   |       |       `--LITERAL_YIELD (yield)\n+     * |   |       |           |--EXPR\n+     * |   |       |           |   `--NUM_INT (1)\n+     * |   |       |           `--SEMI (;)\n+     * |   |       |--CASE_GROUP\n+     * |   |       |   |--LITERAL_DEFAULT (default)\n+     * |   |       |   |   `--COLON (:)\n+     * |   |       |   `--SLIST\n+     * |   |       |       `--LITERAL_YIELD (yield)\n+     * |   |       |           |--EXPR\n+     * |   |       |           |   `--UNARY_MINUS (-)\n+     * |   |       |           |       `--NUM_INT (1)\n+     * |   |       |           `--SEMI (;)\n+     * |   |       `--RCURLY (})\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/", "originalCommit": "cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62541965d7439361c8896676b7a57ab1059553bc", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex f077d7d4a..70826dbd6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3818,133 +3815,6 @@ public final class TokenTypes {\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n-    /**\n-     * The {@code yield} keyword.  This element appears\n-     * as part of a yield statement.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * int yield = 0; // not a keyword here\n-     * return switch (mode) {\n-     *    case \"a\", \"b\":\n-     *        yield 1;\n-     *    default:\n-     *        yield - 1;\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     * |--VARIABLE_DEF\n-     * |   |--MODIFIERS\n-     * |   |--TYPE\n-     * |   |   `--LITERAL_INT (int)\n-     * |   |--IDENT (yield)\n-     * |   `--ASSIGN (=)\n-     * |       `--EXPR\n-     * |           `--NUM_INT (0)\n-     * |--SEMI (;)\n-     * |--LITERAL_RETURN (return)\n-     * |   |--EXPR\n-     * |   |   `--LITERAL_SWITCH (switch)\n-     * |   |       |--LPAREN (()\n-     * |   |       |--EXPR\n-     * |   |       |   `--IDENT (mode)\n-     * |   |       |--RPAREN ())\n-     * |   |       |--LCURLY ({)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_CASE (case)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"a\")\n-     * |   |       |   |   |--COMMA (,)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"b\")\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_DEFAULT (default)\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--UNARY_MINUS (-)\n-     * |   |       |           |       `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       `--RCURLY (})\n-     * |   `--SEMI (;)\n-     * </pre>\n-     *\n-     *\n-     * @see #LITERAL_SWITCH\n-     * @see #CASE_GROUP\n-     * @see #SLIST\n-     * @see #SWITCH_RULE\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int LITERAL_YIELD =\n-            GeneratedJavaTokenTypes.LITERAL_yield;\n-\n-    /**\n-     * Switch Expressions.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * return switch (day) {\n-     *     case SAT, SUN {@code ->} \"Weekend\";\n-     *     default {@code ->} \"Working day\";\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     *  LITERAL_RETURN (return)\n-     *   |--EXPR\n-     *   |   `--LITERAL_SWITCH (switch)\n-     *   |       |--LPAREN (()\n-     *   |       |--EXPR\n-     *   |       |   `--IDENT (day)\n-     *   |       |--RPAREN ())\n-     *   |       |--LCURLY ({)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_CASE (case)\n-     *   |       |   |   |--EXPR\n-     *   |       |   |   |   `--IDENT (SAT)\n-     *   |       |   |   |--COMMA (,)\n-     *   |       |   |   `--EXPR\n-     *   |       |   |       `--IDENT (SUN)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Weekend\")\n-     *   |       |   `--SEMI (;)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_DEFAULT (default)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Working day\")\n-     *   |       |   `--SEMI (;)\n-     *   |       `--RCURLY (})\n-     *   `--SEMI (;)\n-     * </pre>\n-     *\n-     * @see #LITERAL_CASE\n-     * @see #LITERAL_DEFAULT\n-     * @see #LITERAL_SWITCH\n-     * @see #LITERAL_YIELD\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int SWITCH_RULE =\n-            GeneratedJavaTokenTypes.SWITCH_RULE;\n-\n     /** Prevent instantiation. */\n     private TokenTypes() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjkzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467662937", "bodyText": "same.", "author": "rnveach", "createdAt": "2020-08-10T02:24:20Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,133 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * int yield = 0; // not a keyword here\n+     * return switch (mode) {\n+     *    case \"a\", \"b\":\n+     *        yield 1;\n+     *    default:\n+     *        yield - 1;\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     * |--VARIABLE_DEF\n+     * |   |--MODIFIERS\n+     * |   |--TYPE\n+     * |   |   `--LITERAL_INT (int)\n+     * |   |--IDENT (yield)\n+     * |   `--ASSIGN (=)\n+     * |       `--EXPR\n+     * |           `--NUM_INT (0)\n+     * |--SEMI (;)\n+     * |--LITERAL_RETURN (return)\n+     * |   |--EXPR\n+     * |   |   `--LITERAL_SWITCH (switch)\n+     * |   |       |--LPAREN (()\n+     * |   |       |--EXPR\n+     * |   |       |   `--IDENT (mode)\n+     * |   |       |--RPAREN ())\n+     * |   |       |--LCURLY ({)\n+     * |   |       |--CASE_GROUP\n+     * |   |       |   |--LITERAL_CASE (case)\n+     * |   |       |   |   |--EXPR\n+     * |   |       |   |   |   `--STRING_LITERAL (\"a\")\n+     * |   |       |   |   |--COMMA (,)\n+     * |   |       |   |   |--EXPR\n+     * |   |       |   |   |   `--STRING_LITERAL (\"b\")\n+     * |   |       |   |   `--COLON (:)\n+     * |   |       |   `--SLIST\n+     * |   |       |       `--LITERAL_YIELD (yield)\n+     * |   |       |           |--EXPR\n+     * |   |       |           |   `--NUM_INT (1)\n+     * |   |       |           `--SEMI (;)\n+     * |   |       |--CASE_GROUP\n+     * |   |       |   |--LITERAL_DEFAULT (default)\n+     * |   |       |   |   `--COLON (:)\n+     * |   |       |   `--SLIST\n+     * |   |       |       `--LITERAL_YIELD (yield)\n+     * |   |       |           |--EXPR\n+     * |   |       |           |   `--UNARY_MINUS (-)\n+     * |   |       |           |       `--NUM_INT (1)\n+     * |   |       |           `--SEMI (;)\n+     * |   |       `--RCURLY (})\n+     * |   `--SEMI (;)\n+     * </pre>\n+     *\n+     *\n+     * @see #LITERAL_SWITCH\n+     * @see #CASE_GROUP\n+     * @see #SLIST\n+     * @see #SWITCH_RULE\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/\n+    public static final int LITERAL_YIELD =\n+            GeneratedJavaTokenTypes.LITERAL_yield;\n+\n+    /**\n+     * Switch Expressions.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * return switch (day) {\n+     *     case SAT, SUN {@code ->} \"Weekend\";\n+     *     default {@code ->} \"Working day\";\n+     * };\n+     * </pre>\n+     * <p>parses as:</p>\n+     * <pre>\n+     *  LITERAL_RETURN (return)\n+     *   |--EXPR\n+     *   |   `--LITERAL_SWITCH (switch)\n+     *   |       |--LPAREN (()\n+     *   |       |--EXPR\n+     *   |       |   `--IDENT (day)\n+     *   |       |--RPAREN ())\n+     *   |       |--LCURLY ({)\n+     *   |       |--SWITCH_RULE\n+     *   |       |   |--LITERAL_CASE (case)\n+     *   |       |   |   |--EXPR\n+     *   |       |   |   |   `--IDENT (SAT)\n+     *   |       |   |   |--COMMA (,)\n+     *   |       |   |   `--EXPR\n+     *   |       |   |       `--IDENT (SUN)\n+     *   |       |   |--LAMBDA {@code ->}\n+     *   |       |   |--EXPR\n+     *   |       |   |   `--STRING_LITERAL (\"Weekend\")\n+     *   |       |   `--SEMI (;)\n+     *   |       |--SWITCH_RULE\n+     *   |       |   |--LITERAL_DEFAULT (default)\n+     *   |       |   |--LAMBDA {@code ->}\n+     *   |       |   |--EXPR\n+     *   |       |   |   `--STRING_LITERAL (\"Working day\")\n+     *   |       |   `--SEMI (;)\n+     *   |       `--RCURLY (})\n+     *   `--SEMI (;)\n+     * </pre>\n+     *\n+     * @see #LITERAL_CASE\n+     * @see #LITERAL_DEFAULT\n+     * @see #LITERAL_SWITCH\n+     * @see #LITERAL_YIELD\n+     *\n+     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n+     * Java Language Specification, &sect;14.21</a>\n+     *\n+     * @since 8.36\n+     **/", "originalCommit": "cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62541965d7439361c8896676b7a57ab1059553bc", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex f077d7d4a..70826dbd6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3818,133 +3815,6 @@ public final class TokenTypes {\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n-    /**\n-     * The {@code yield} keyword.  This element appears\n-     * as part of a yield statement.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * int yield = 0; // not a keyword here\n-     * return switch (mode) {\n-     *    case \"a\", \"b\":\n-     *        yield 1;\n-     *    default:\n-     *        yield - 1;\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     * |--VARIABLE_DEF\n-     * |   |--MODIFIERS\n-     * |   |--TYPE\n-     * |   |   `--LITERAL_INT (int)\n-     * |   |--IDENT (yield)\n-     * |   `--ASSIGN (=)\n-     * |       `--EXPR\n-     * |           `--NUM_INT (0)\n-     * |--SEMI (;)\n-     * |--LITERAL_RETURN (return)\n-     * |   |--EXPR\n-     * |   |   `--LITERAL_SWITCH (switch)\n-     * |   |       |--LPAREN (()\n-     * |   |       |--EXPR\n-     * |   |       |   `--IDENT (mode)\n-     * |   |       |--RPAREN ())\n-     * |   |       |--LCURLY ({)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_CASE (case)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"a\")\n-     * |   |       |   |   |--COMMA (,)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"b\")\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_DEFAULT (default)\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--UNARY_MINUS (-)\n-     * |   |       |           |       `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       `--RCURLY (})\n-     * |   `--SEMI (;)\n-     * </pre>\n-     *\n-     *\n-     * @see #LITERAL_SWITCH\n-     * @see #CASE_GROUP\n-     * @see #SLIST\n-     * @see #SWITCH_RULE\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int LITERAL_YIELD =\n-            GeneratedJavaTokenTypes.LITERAL_yield;\n-\n-    /**\n-     * Switch Expressions.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * return switch (day) {\n-     *     case SAT, SUN {@code ->} \"Weekend\";\n-     *     default {@code ->} \"Working day\";\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     *  LITERAL_RETURN (return)\n-     *   |--EXPR\n-     *   |   `--LITERAL_SWITCH (switch)\n-     *   |       |--LPAREN (()\n-     *   |       |--EXPR\n-     *   |       |   `--IDENT (day)\n-     *   |       |--RPAREN ())\n-     *   |       |--LCURLY ({)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_CASE (case)\n-     *   |       |   |   |--EXPR\n-     *   |       |   |   |   `--IDENT (SAT)\n-     *   |       |   |   |--COMMA (,)\n-     *   |       |   |   `--EXPR\n-     *   |       |   |       `--IDENT (SUN)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Weekend\")\n-     *   |       |   `--SEMI (;)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_DEFAULT (default)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Working day\")\n-     *   |       |   `--SEMI (;)\n-     *   |       `--RCURLY (})\n-     *   `--SEMI (;)\n-     * </pre>\n-     *\n-     * @see #LITERAL_CASE\n-     * @see #LITERAL_DEFAULT\n-     * @see #LITERAL_SWITCH\n-     * @see #LITERAL_YIELD\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int SWITCH_RULE =\n-            GeneratedJavaTokenTypes.SWITCH_RULE;\n-\n     /** Prevent instantiation. */\n     private TokenTypes() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MzQ4OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467663488", "bodyText": "Do you have any inputs similar to this where we have a switch use a variable with the name yield to show your changes don't break existing parser with yield variables?", "author": "rnveach", "createdAt": "2020-08-10T02:27:54Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "diffHunk": "@@ -3815,6 +3818,133 @@\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n+    /**\n+     * The {@code yield} keyword.  This element appears\n+     * as part of a yield statement.\n+     *\n+     * <p>For example:</p>\n+     * <pre>\n+     * int yield = 0; // not a keyword here\n+     * return switch (mode) {", "originalCommit": "cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2ODkyNA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467668924", "bodyText": "See #8449 (comment)", "author": "nmancus1", "createdAt": "2020-08-10T03:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MzQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "62541965d7439361c8896676b7a57ab1059553bc", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\nindex f077d7d4a..70826dbd6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java\n\n@@ -3818,133 +3815,6 @@ public final class TokenTypes {\n     public static final int TEXT_BLOCK_LITERAL_END =\n             GeneratedJavaTokenTypes.TEXT_BLOCK_LITERAL_END;\n \n-    /**\n-     * The {@code yield} keyword.  This element appears\n-     * as part of a yield statement.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * int yield = 0; // not a keyword here\n-     * return switch (mode) {\n-     *    case \"a\", \"b\":\n-     *        yield 1;\n-     *    default:\n-     *        yield - 1;\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     * |--VARIABLE_DEF\n-     * |   |--MODIFIERS\n-     * |   |--TYPE\n-     * |   |   `--LITERAL_INT (int)\n-     * |   |--IDENT (yield)\n-     * |   `--ASSIGN (=)\n-     * |       `--EXPR\n-     * |           `--NUM_INT (0)\n-     * |--SEMI (;)\n-     * |--LITERAL_RETURN (return)\n-     * |   |--EXPR\n-     * |   |   `--LITERAL_SWITCH (switch)\n-     * |   |       |--LPAREN (()\n-     * |   |       |--EXPR\n-     * |   |       |   `--IDENT (mode)\n-     * |   |       |--RPAREN ())\n-     * |   |       |--LCURLY ({)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_CASE (case)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"a\")\n-     * |   |       |   |   |--COMMA (,)\n-     * |   |       |   |   |--EXPR\n-     * |   |       |   |   |   `--STRING_LITERAL (\"b\")\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       |--CASE_GROUP\n-     * |   |       |   |--LITERAL_DEFAULT (default)\n-     * |   |       |   |   `--COLON (:)\n-     * |   |       |   `--SLIST\n-     * |   |       |       `--LITERAL_YIELD (yield)\n-     * |   |       |           |--EXPR\n-     * |   |       |           |   `--UNARY_MINUS (-)\n-     * |   |       |           |       `--NUM_INT (1)\n-     * |   |       |           `--SEMI (;)\n-     * |   |       `--RCURLY (})\n-     * |   `--SEMI (;)\n-     * </pre>\n-     *\n-     *\n-     * @see #LITERAL_SWITCH\n-     * @see #CASE_GROUP\n-     * @see #SLIST\n-     * @see #SWITCH_RULE\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int LITERAL_YIELD =\n-            GeneratedJavaTokenTypes.LITERAL_yield;\n-\n-    /**\n-     * Switch Expressions.\n-     *\n-     * <p>For example:</p>\n-     * <pre>\n-     * return switch (day) {\n-     *     case SAT, SUN {@code ->} \"Weekend\";\n-     *     default {@code ->} \"Working day\";\n-     * };\n-     * </pre>\n-     * <p>parses as:</p>\n-     * <pre>\n-     *  LITERAL_RETURN (return)\n-     *   |--EXPR\n-     *   |   `--LITERAL_SWITCH (switch)\n-     *   |       |--LPAREN (()\n-     *   |       |--EXPR\n-     *   |       |   `--IDENT (day)\n-     *   |       |--RPAREN ())\n-     *   |       |--LCURLY ({)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_CASE (case)\n-     *   |       |   |   |--EXPR\n-     *   |       |   |   |   `--IDENT (SAT)\n-     *   |       |   |   |--COMMA (,)\n-     *   |       |   |   `--EXPR\n-     *   |       |   |       `--IDENT (SUN)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Weekend\")\n-     *   |       |   `--SEMI (;)\n-     *   |       |--SWITCH_RULE\n-     *   |       |   |--LITERAL_DEFAULT (default)\n-     *   |       |   |--LAMBDA {@code ->}\n-     *   |       |   |--EXPR\n-     *   |       |   |   `--STRING_LITERAL (\"Working day\")\n-     *   |       |   `--SEMI (;)\n-     *   |       `--RCURLY (})\n-     *   `--SEMI (;)\n-     * </pre>\n-     *\n-     * @see #LITERAL_CASE\n-     * @see #LITERAL_DEFAULT\n-     * @see #LITERAL_SWITCH\n-     * @see #LITERAL_YIELD\n-     *\n-     * @see <a href=\"https://docs.oracle.com/javase/specs/jls/se13/preview/switch-expressions.html\">\n-     * Java Language Specification, &sect;14.21</a>\n-     *\n-     * @since 8.36\n-     **/\n-    public static final int SWITCH_RULE =\n-            GeneratedJavaTokenTypes.SWITCH_RULE;\n-\n     /** Prevent instantiation. */\n     private TokenTypes() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NTgwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r467665802", "bodyText": "@rnveach Here are some challenging inputs, but there is quite a bit of \"yield\" as a method/ identifier in guava too.  That's where some of this code came from.", "author": "nmancus1", "createdAt": "2020-08-10T02:41:54Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java", "diffHunk": "@@ -1,12 +1,45 @@\n //non-compiled with javac: Compilable with Java14\n-package com.puppycrawl.tools.checkstyle.grammar;\n+package com.puppycrawl.tools.checkstyle.grammar.java14;\n \n+import static java.time.Instant.*;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n import java.util.EnumSet;\n import java.util.Set;\n+import java.util.function.IntConsumer;\n import java.util.function.Supplier;\n \n public class InputJava14SwitchExpression {\n \n+    static class HardToParse {\n+        void foo() {\n+            Instant Ascii;\n+            byte[] decodabet = new byte[1];\n+            Arrays.fill(decodabet, (byte) -1);\n+            char[] chars = {'c','h','a','r','s'};\n+            for (\n+                    int i = 0;\n+                    i < chars.length; i++) {\n+                char c = chars[i];\n+                decodabet[c] = (byte) i;\n+            }\n+        }\n+        IntConsumer consumer = (IntConsumer) i -> {\n+        };\n+\n+        static String yield = \"yield\";\n+\n+        class yieldClass{\n+            int yield = 6;\n+\n+            public void yield(){\n+\n+            }\n+        }\n+\n+    }\n+", "originalCommit": "cf3f66513dcfd96f5fc200e128dbec1ef38d67a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4MzExOA==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r468583118", "bodyText": "Based on the grammar changes, you would need the yield usage in the switch and not just in random places, imo.", "author": "rnveach", "createdAt": "2020-08-11T13:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxMDAyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r468610022", "bodyText": "https://github.com/checkstyle/checkstyle/pull/8449/files#r468609715", "author": "nmancus1", "createdAt": "2020-08-11T14:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNjUxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r468616515", "bodyText": "And here: https://github.com/checkstyle/checkstyle/pull/8449/files#r468615917", "author": "nmancus1", "createdAt": "2020-08-11T14:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NTgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "62541965d7439361c8896676b7a57ab1059553bc", "chunk": "diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\nindex 6c0414bcc..6aaa5a6bc 100644\n--- a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n\n@@ -1,45 +1,12 @@\n //non-compiled with javac: Compilable with Java14\n-package com.puppycrawl.tools.checkstyle.grammar.java14;\n+package com.puppycrawl.tools.checkstyle.grammar;\n \n-import static java.time.Instant.*;\n-\n-import java.time.Instant;\n-import java.util.Arrays;\n import java.util.EnumSet;\n import java.util.Set;\n-import java.util.function.IntConsumer;\n import java.util.function.Supplier;\n \n public class InputJava14SwitchExpression {\n \n-    static class HardToParse {\n-        void foo() {\n-            Instant Ascii;\n-            byte[] decodabet = new byte[1];\n-            Arrays.fill(decodabet, (byte) -1);\n-            char[] chars = {'c','h','a','r','s'};\n-            for (\n-                    int i = 0;\n-                    i < chars.length; i++) {\n-                char c = chars[i];\n-                decodabet[c] = (byte) i;\n-            }\n-        }\n-        IntConsumer consumer = (IntConsumer) i -> {\n-        };\n-\n-        static String yield = \"yield\";\n-\n-        class yieldClass{\n-            int yield = 6;\n-\n-            public void yield(){\n-\n-            }\n-        }\n-\n-    }\n-\n     enum Day {\n         MON,\n         TUE,\n"}}, {"oid": "62541965d7439361c8896676b7a57ab1059553bc", "url": "https://github.com/checkstyle/checkstyle/commit/62541965d7439361c8896676b7a57ab1059553bc", "message": "minor: reformatting of grammar related to (#6615)", "committedDate": "2020-08-10T17:19:01Z", "type": "commit"}, {"oid": "770b59adab75114b3fd931498e6efdb6466bfcd5", "url": "https://github.com/checkstyle/checkstyle/commit/770b59adab75114b3fd931498e6efdb6466bfcd5", "message": "minor: refactor traditionalStatement rule grammar related to (#6615)", "committedDate": "2020-08-10T17:19:01Z", "type": "commit"}, {"oid": "8893bb824dc4a83a2c4f5df3e16c042e3f61032c", "url": "https://github.com/checkstyle/checkstyle/commit/8893bb824dc4a83a2c4f5df3e16c042e3f61032c", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-10T17:19:01Z", "type": "forcePushed"}, {"oid": "448217379777d109937aafc2c2b165fc0f424d8a", "url": "https://github.com/checkstyle/checkstyle/commit/448217379777d109937aafc2c2b165fc0f424d8a", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-11T14:02:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwOTcxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r468609715", "bodyText": "@rnveach Please see https://github.com/checkstyle/checkstyle/pull/8449/files#r468609366", "author": "nmancus1", "createdAt": "2020-08-11T14:10:43Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java", "diffHunk": "@@ -449,4 +482,15 @@ private String expression2(T t) {\n             throw new IllegalStateException(\"Side effects missing.\");\n         }\n     }\n+\n+    private static int getValueViaYield(String mode) {\n+        int yield = 0;\n+        return switch (mode) {\n+            case \"a\", \"b\":\n+                int x = yield + 2;\n+                yield x;\n+            default:\n+                yield - 1;\n+        };\n+    }", "originalCommit": "448217379777d109937aafc2c2b165fc0f424d8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea441e3d355c5bbe328bbb98fc138b31456ccc18", "chunk": "diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\nindex bcd567fcb..d6f773eec 100644\n--- a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java\n\n@@ -493,4 +493,14 @@ public class InputJava14SwitchExpression {\n                 yield - 1;\n         };\n     }\n+\n+    private static int getValueViaYield2(String mode) {\n+        return switch (mode) {\n+            case \"a\", \"b\":\n+                int yield = 42;\n+                yield yield;\n+            default:\n+                yield - 1;\n+        };\n+    }\n }\n"}}, {"oid": "ea441e3d355c5bbe328bbb98fc138b31456ccc18", "url": "https://github.com/checkstyle/checkstyle/commit/ea441e3d355c5bbe328bbb98fc138b31456ccc18", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-11T14:14:28Z", "type": "commit"}, {"oid": "ea441e3d355c5bbe328bbb98fc138b31456ccc18", "url": "https://github.com/checkstyle/checkstyle/commit/ea441e3d355c5bbe328bbb98fc138b31456ccc18", "message": "Issue #6615: Add support for Java 14 switch and yield", "committedDate": "2020-08-11T14:14:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNTkxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8449#discussion_r468615917", "bodyText": "@rnveach here also: https://github.com/checkstyle/checkstyle/pull/8449/files#r468615659", "author": "nmancus1", "createdAt": "2020-08-11T14:16:42Z", "path": "src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammar/java14/InputJava14SwitchExpression.java", "diffHunk": "@@ -449,4 +482,25 @@ private String expression2(T t) {\n             throw new IllegalStateException(\"Side effects missing.\");\n         }\n     }\n+\n+    private static int getValueViaYield(String mode) {\n+        int yield = 0;\n+        return switch (mode) {\n+            case \"a\", \"b\":\n+                int x = yield + 2;\n+                yield x;\n+            default:\n+                yield - 1;\n+        };\n+    }\n+\n+    private static int getValueViaYield2(String mode) {\n+        return switch (mode) {\n+            case \"a\", \"b\":\n+                int yield = 42;\n+                yield yield;\n+            default:\n+                yield - 1;\n+        };\n+    }", "originalCommit": "ea441e3d355c5bbe328bbb98fc138b31456ccc18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}