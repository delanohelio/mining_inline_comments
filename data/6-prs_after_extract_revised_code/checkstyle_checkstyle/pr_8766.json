{"pr_number": 8766, "pr_title": "Issue #8764: Create new check IllegalIdentifierName", "pr_createdAt": "2020-08-27T11:54:11Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/8766", "timeline": [{"oid": "a44391718af16b4218804dad5034bf4461efa0d3", "url": "https://github.com/checkstyle/checkstyle/commit/a44391718af16b4218804dad5034bf4461efa0d3", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T14:03:17Z", "type": "forcePushed"}, {"oid": "4028cc2be83a8b3769a1c17452a1852181e5afff", "url": "https://github.com/checkstyle/checkstyle/commit/4028cc2be83a8b3769a1c17452a1852181e5afff", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T19:19:51Z", "type": "forcePushed"}, {"oid": "2f13ceacbe2cda9836b8398e7aa9b59272c6c42d", "url": "https://github.com/checkstyle/checkstyle/commit/2f13ceacbe2cda9836b8398e7aa9b59272c6c42d", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T19:30:27Z", "type": "forcePushed"}, {"oid": "4e3d03d4ae17f5b47d5e02acc646071e1d8d7ce6", "url": "https://github.com/checkstyle/checkstyle/commit/4e3d03d4ae17f5b47d5e02acc646071e1d8d7ce6", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T20:22:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NzI4OA==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r478677288", "bodyText": "This line will not compile past Java 8, so this example is non-compilable (pre-Java 9 restrcited keyword usage, with Java 14 features). I didn't think it was reasonable to create another example just for this, but I don't like to have an example that won't compile either.  Thoughts? Should I just remove it, since I mentioned _ usage in the description?", "author": "nmancus1", "createdAt": "2020-08-27T20:29:21Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java", "diffHunk": "@@ -0,0 +1,179 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.naming;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks identifiers for a set of illegal names, such as those that are restricted or contextual\n+ * keywords. Examples include \"yield\", \"record\", \"_\", and \"var\". Please read more at\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se14/html/jls-3.html#jls-3.9\">\n+ * Java Language Specification</a> to get to know more about restricted keywords.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code format} - Specifies valid identifiers.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \"(?i)^(?!(record|yield|var|_)$).+$\"}.\n+ * </li>\n+ * <li>\n+ * Property {@code tokens} - tokens to check\n+ * Type is {@code java.lang.String[]}.\n+ * Validation type is {@code tokenSet}.\n+ * Default value is:\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF\">\n+ * CLASS_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF\">\n+ * INTERFACE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF\">\n+ * ENUM_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF\">\n+ * ANNOTATION_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF\">\n+ * ANNOTATION_FIELD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PARAMETER_DEF\">\n+ * PARAMETER_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#VARIABLE_DEF\">\n+ * VARIABLE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">\n+ * METHOD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF\">\n+ * ENUM_CONSTANT_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PATTERN_VARIABLE_DEF\">\n+ * PATTERN_VARIABLE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF\">\n+ * RECORD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_COMPONENT_DEF\">\n+ * RECORD_COMPONENT_DEF</a>.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"IllegalIdentifierName\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class TestClass {\n+ *     public static void main(String... args) {\n+ *         var var = 4; // violation, \"var\" should not be used as an identifier.\n+ *         int record = 15; // violation, \"record\" should not be used as an identifier.\n+ *         String yield = \"yield\"; // violation, \"yield\" should not be used as an identifier.\n+ *\n+ *         record Record // violation, \"Record\" should not be used as an idenitifier.\n+ *             (Record record) { // violation, \"record\" should not be used as an identifier.\n+ *         }\n+ *\n+ *         String yieldString = \"yieldString\"; // ok, part of another word\n+ *         record MyRecord(){} // ok, part of another word\n+ *         var variable = 2; // ok, part of another word\n+ *         String _; // violation, underscore should not be used as an identifier.", "originalCommit": "db5bd3d1e0a0cdd5f8c930f09ec4550e92d5d71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1ODYwMg==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r478858602", "bodyText": "We can move this test input to the non-compilable path when we start migrating to Java11.", "author": "pbludov", "createdAt": "2020-08-28T06:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NzI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "cb1e15236bb19ec313d5f00c6a99b17a23d000bb", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\nindex 1da95bc11..959452ce7 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n\n@@ -85,7 +85,7 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n  *         int record = 15; // violation, \"record\" should not be used as an identifier.\n  *         String yield = \"yield\"; // violation, \"yield\" should not be used as an identifier.\n  *\n- *         record Record // violation, \"Record\" should not be used as an idenitifier.\n+ *         record Record // violation, \"Record\" should not be used as an identifier.\n  *             (Record record) { // violation, \"record\" should not be used as an identifier.\n  *         }\n  *\n"}}, {"oid": "2cdbb560ed3ee3db91bd69ff07857765e0e343ca", "url": "https://github.com/checkstyle/checkstyle/commit/2cdbb560ed3ee3db91bd69ff07857765e0e343ca", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T21:08:17Z", "type": "forcePushed"}, {"oid": "cb1e15236bb19ec313d5f00c6a99b17a23d000bb", "url": "https://github.com/checkstyle/checkstyle/commit/cb1e15236bb19ec313d5f00c6a99b17a23d000bb", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-27T23:53:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTI2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r478891265", "bodyText": "actually, this check can be much more. For example, prohibit the \"$\" character in identifiers. Or any non-ascii character.\nThis is a generic version of *Name check. By default, it does what you said, but please expand the description.", "author": "pbludov", "createdAt": "2020-08-28T07:37:08Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java", "diffHunk": "@@ -0,0 +1,179 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.naming;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks identifiers for a set of illegal names, such as those that are restricted or contextual", "originalCommit": "cb1e15236bb19ec313d5f00c6a99b17a23d000bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI3MzQzNw==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r479273437", "bodyText": "Expanded.", "author": "nmancus1", "createdAt": "2020-08-28T13:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c6f983a7dbe30d686ab6141b83a7b7cc371b585", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\nindex 959452ce7..632921df2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n\n@@ -26,16 +26,19 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n \n /**\n  * <p>\n- * Checks identifiers for a set of illegal names, such as those that are restricted or contextual\n- * keywords. Examples include \"yield\", \"record\", \"_\", and \"var\". Please read more at\n+ * Checks identifiers with a regular expression for a set of illegal names, such as those\n+ * that are restricted or contextual keywords. Examples include \"yield\", \"record\", \"_\", and\n+ * \"var\". Please read more at\n  * <a href=\"https://docs.oracle.com/javase/specs/jls/se14/html/jls-3.html#jls-3.9\">\n- * Java Language Specification</a> to get to know more about restricted keywords.\n+ * Java Language Specification</a> to get to know more about restricted keywords. Since this\n+ * check uses a regular expression to specify valid identifiers, users can also prohibit the usage\n+ * of certain symbols, such as \"$\", or any non-ascii character.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code format} - Specifies valid identifiers.\n  * Type is {@code java.util.regex.Pattern}.\n- * Default value is {@code \"(?i)^(?!(record|yield|var|_)$).+$\"}.\n+ * Default value is {@code \"(?i)^(?!(record|yield|var|permits|sealed|_)$).+$\"}.\n  * </li>\n  * <li>\n  * Property {@code tokens} - tokens to check\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MzE0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r478893146", "bodyText": "After JEP 360 there will be more keywords in Java: permits, sealed, non-sealed.\nThe last one, non-sealed is not a valid identifier anyway, but permits, sealed should be in the list.", "author": "pbludov", "createdAt": "2020-08-28T07:39:31Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java", "diffHunk": "@@ -0,0 +1,179 @@\n+////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code for adherence to a set of rules.\n+// Copyright (C) 2001-2020 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+////////////////////////////////////////////////////////////////////////////////\n+\n+package com.puppycrawl.tools.checkstyle.checks.naming;\n+\n+import com.puppycrawl.tools.checkstyle.StatelessCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks identifiers for a set of illegal names, such as those that are restricted or contextual\n+ * keywords. Examples include \"yield\", \"record\", \"_\", and \"var\". Please read more at\n+ * <a href=\"https://docs.oracle.com/javase/specs/jls/se14/html/jls-3.html#jls-3.9\">\n+ * Java Language Specification</a> to get to know more about restricted keywords.\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * Property {@code format} - Specifies valid identifiers.\n+ * Type is {@code java.util.regex.Pattern}.\n+ * Default value is {@code \"(?i)^(?!(record|yield|var|_)$).+$\"}.\n+ * </li>\n+ * <li>\n+ * Property {@code tokens} - tokens to check\n+ * Type is {@code java.lang.String[]}.\n+ * Validation type is {@code tokenSet}.\n+ * Default value is:\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF\">\n+ * CLASS_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF\">\n+ * INTERFACE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF\">\n+ * ENUM_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF\">\n+ * ANNOTATION_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF\">\n+ * ANNOTATION_FIELD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PARAMETER_DEF\">\n+ * PARAMETER_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#VARIABLE_DEF\">\n+ * VARIABLE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">\n+ * METHOD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF\">\n+ * ENUM_CONSTANT_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PATTERN_VARIABLE_DEF\">\n+ * PATTERN_VARIABLE_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF\">\n+ * RECORD_DEF</a>,\n+ * <a href=\"https://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_COMPONENT_DEF\">\n+ * RECORD_COMPONENT_DEF</a>.\n+ * </li>\n+ * </ul>\n+ * <p>\n+ * To configure the check:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"IllegalIdentifierName\"/&gt;\n+ * </pre>\n+ * <p>\n+ * Example:\n+ * </p>\n+ * <pre>\n+ * public class TestClass {\n+ *     public static void main(String... args) {\n+ *         var var = 4; // violation, \"var\" should not be used as an identifier.\n+ *         int record = 15; // violation, \"record\" should not be used as an identifier.\n+ *         String yield = \"yield\"; // violation, \"yield\" should not be used as an identifier.\n+ *\n+ *         record Record // violation, \"Record\" should not be used as an identifier.\n+ *             (Record record) { // violation, \"record\" should not be used as an identifier.\n+ *         }\n+ *\n+ *         String yieldString = \"yieldString\"; // ok, part of another word\n+ *         record MyRecord(){} // ok, part of another word\n+ *         var variable = 2; // ok, part of another word\n+ *         String _; // violation, underscore should not be used as an identifier.\n+ *     }\n+ * }\n+ * </pre>\n+ * <p>\n+ * To configure the check to include \"open\" and \"transitive\" in the set of illegal identifiers:\n+ * </p>\n+ * <p>Configuration:</p>\n+ * <pre>\n+ * &lt;module name=\"IllegalIdentifierName\"&gt;\n+ *     &lt;property name=\"format\" value=\"(?i)^(?!(record|yield|var|open|transitive|_)$).+$\"/&gt;\n+ * &lt;/module&gt;\n+ * </pre>\n+ * <p>Example:</p>\n+ * <pre>\n+ * public class TestClass {\n+ *     public static void main(String... args) {\n+ *\n+ *         int open = 4; // violation, \"open\" should not be used as an identifier\n+ *         Object transitive = \"transitive\"; // violation, \"transitive\" should not\n+ *                                                // be used as an identifier\n+ *\n+ *         int openInt = 4; // ok, \"open\" is part of another word\n+ *         Object transitiveObject = \"transitiveObject\"; // ok, \"transitive\" is part of another word\n+ *     }\n+ * }\n+ * </pre>\n+ * <p>\n+ * Parent is {@code com.puppycrawl.tools.checkstyle.TreeWalker}\n+ * </p>\n+ * <p>\n+ * Violation Message Keys:\n+ * </p>\n+ * <ul>\n+ * <li>\n+ * {@code name.invalidPattern}\n+ * </li>\n+ * </ul>\n+ *\n+ * @since 8.36\n+ */\n+@StatelessCheck\n+public class IllegalIdentifierNameCheck extends AbstractNameCheck {\n+\n+    /**\n+     * Creates a new {@code IllegalIdentifierNameCheck} instance.\n+     */\n+    public IllegalIdentifierNameCheck() {\n+        super(\"(?i)^(?!(record|yield|var|_)$).+$\");", "originalCommit": "cb1e15236bb19ec313d5f00c6a99b17a23d000bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI3MDUxMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/8766#discussion_r479270511", "bodyText": "Added.", "author": "nmancus1", "createdAt": "2020-08-28T13:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MzE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2c6f983a7dbe30d686ab6141b83a7b7cc371b585", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\nindex 959452ce7..632921df2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/IllegalIdentifierNameCheck.java\n\n@@ -26,16 +26,19 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n \n /**\n  * <p>\n- * Checks identifiers for a set of illegal names, such as those that are restricted or contextual\n- * keywords. Examples include \"yield\", \"record\", \"_\", and \"var\". Please read more at\n+ * Checks identifiers with a regular expression for a set of illegal names, such as those\n+ * that are restricted or contextual keywords. Examples include \"yield\", \"record\", \"_\", and\n+ * \"var\". Please read more at\n  * <a href=\"https://docs.oracle.com/javase/specs/jls/se14/html/jls-3.html#jls-3.9\">\n- * Java Language Specification</a> to get to know more about restricted keywords.\n+ * Java Language Specification</a> to get to know more about restricted keywords. Since this\n+ * check uses a regular expression to specify valid identifiers, users can also prohibit the usage\n+ * of certain symbols, such as \"$\", or any non-ascii character.\n  * </p>\n  * <ul>\n  * <li>\n  * Property {@code format} - Specifies valid identifiers.\n  * Type is {@code java.util.regex.Pattern}.\n- * Default value is {@code \"(?i)^(?!(record|yield|var|_)$).+$\"}.\n+ * Default value is {@code \"(?i)^(?!(record|yield|var|permits|sealed|_)$).+$\"}.\n  * </li>\n  * <li>\n  * Property {@code tokens} - tokens to check\n"}}, {"oid": "2c6f983a7dbe30d686ab6141b83a7b7cc371b585", "url": "https://github.com/checkstyle/checkstyle/commit/2c6f983a7dbe30d686ab6141b83a7b7cc371b585", "message": "Issue #8764: Create new check IllegalIdentifierName", "committedDate": "2020-08-28T13:07:37Z", "type": "commit"}, {"oid": "0a02fb609b5317c1bfe2a67944d8117d9f8a97a3", "url": "https://github.com/checkstyle/checkstyle/commit/0a02fb609b5317c1bfe2a67944d8117d9f8a97a3", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-28T13:07:37Z", "type": "commit"}, {"oid": "0a02fb609b5317c1bfe2a67944d8117d9f8a97a3", "url": "https://github.com/checkstyle/checkstyle/commit/0a02fb609b5317c1bfe2a67944d8117d9f8a97a3", "message": "minor: practice what you preach(#8764)", "committedDate": "2020-08-28T13:07:37Z", "type": "forcePushed"}]}