{"pr_number": 9102, "pr_title": "Issue #5820: fix stack overflow error in ElementNode ctor", "pr_createdAt": "2020-12-13T15:11:29Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/9102", "timeline": [{"oid": "2441d02bbcb3d4da85c2ee0f5f72d7a62cf383cc", "url": "https://github.com/checkstyle/checkstyle/commit/2441d02bbcb3d4da85c2ee0f5f72d7a62cf383cc", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-14T21:14:29Z", "type": "forcePushed"}, {"oid": "6986eb31a06a33d94e842c82134df07be646e7b0", "url": "https://github.com/checkstyle/checkstyle/commit/6986eb31a06a33d94e842c82134df07be646e7b0", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-14T21:20:33Z", "type": "forcePushed"}, {"oid": "2d486fc9b613339d8c18d09afafc8950301fba36", "url": "https://github.com/checkstyle/checkstyle/commit/2d486fc9b613339d8c18d09afafc8950301fba36", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-14T21:41:49Z", "type": "forcePushed"}, {"oid": "ff4ad6883d2dd49bf694319c69890b67562d48b7", "url": "https://github.com/checkstyle/checkstyle/commit/ff4ad6883d2dd49bf694319c69890b67562d48b7", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-15T04:35:58Z", "type": "forcePushed"}, {"oid": "a8cae3823ab7f9fd47628b074224402011c1a425", "url": "https://github.com/checkstyle/checkstyle/commit/a8cae3823ab7f9fd47628b074224402011c1a425", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-15T05:29:24Z", "type": "forcePushed"}, {"oid": "532e46923d7a6f455770cfc6f93ccd92e7cc66bb", "url": "https://github.com/checkstyle/checkstyle/commit/532e46923d7a6f455770cfc6f93ccd92e7cc66bb", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-15T05:57:43Z", "type": "forcePushed"}, {"oid": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "url": "https://github.com/checkstyle/checkstyle/commit/f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-17T07:03:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547450849", "bodyText": "can we move this update out of this commit ?\nlooks like not related.", "author": "romani", "createdAt": "2020-12-22T18:59:47Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java", "diffHunk": "@@ -98,9 +99,10 @@\n      * Only these tokens support text attribute because they make our xpath queries more accurate.\n      * These token types are listed below.\n      * */\n-    private static final List<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Arrays.asList(\n+    private static final Set<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Stream.of(", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDE2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434165", "bodyText": "It's just a matter of style. I prefer to use Set if the only use is contains. Moved to \"nano optimizations\" commit.", "author": "pbludov", "createdAt": "2020-12-24T07:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MzQzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549053432", "bodyText": "sure, but I do not like to bind such updates to functional changes of specific issue", "author": "romani", "createdAt": "2020-12-27T02:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java\nindex 970947981..78c713552 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/XpathUtil.java\n\n@@ -99,10 +100,9 @@ public final class XpathUtil {\n      * Only these tokens support text attribute because they make our xpath queries more accurate.\n      * These token types are listed below.\n      * */\n-    private static final Set<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Stream.of(\n+    private static final List<Integer> TOKEN_TYPES_WITH_TEXT_ATTRIBUTE = Arrays.asList(\n             TokenTypes.IDENT, TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL,\n-            TokenTypes.NUM_LONG, TokenTypes.NUM_INT, TokenTypes.NUM_DOUBLE, TokenTypes.NUM_FLOAT)\n-            .collect(Collectors.toSet());\n+            TokenTypes.NUM_LONG, TokenTypes.NUM_INT, TokenTypes.NUM_DOUBLE, TokenTypes.NUM_FLOAT);\n \n     /** Delimiter to separate xpath results. */\n     private static final String DELIMITER = \"---------\" + System.lineSeparator();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTAyMg==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547451022", "bodyText": "in separate commit please", "author": "romani", "createdAt": "2020-12-22T19:00:13Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -40,18 +39,14 @@\n \n /**\n  * Represents general class for {@code ElementNode}, {@code RootNode} and {@code AttributeNode}.\n- *", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDI4OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434289", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-24T07:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MTAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\nindex 51ee38ba9..561e77d39 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\n\n@@ -39,6 +39,7 @@ import net.sf.saxon.type.SchemaType;\n \n /**\n  * Represents general class for {@code ElementNode}, {@code RootNode} and {@code AttributeNode}.\n+ *\n  */\n public abstract class AbstractNode implements NodeInfo {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjA2Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547452067", "bodyText": "getChildren() always create a collection now.\nis it reasonable to avoid this creation in internal implementations ?", "author": "romani", "createdAt": "2020-12-22T19:02:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java", "diffHunk": "@@ -150,7 +128,7 @@ public String getURI() {\n      */\n     @Override\n     public boolean hasChildNodes() {\n-        return !children.isEmpty();\n+        return !getChildren().isEmpty();", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDM0Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434346", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-24T07:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\nindex 51ee38ba9..561e77d39 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AbstractNode.java\n\n@@ -121,16 +137,6 @@ public abstract class AbstractNode implements NodeInfo {\n         return \"\";\n     }\n \n-    /**\n-     * Returns if current node has children.\n-     *\n-     * @return if current node has children\n-     */\n-    @Override\n-    public boolean hasChildNodes() {\n-        return !getChildren().isEmpty();\n-    }\n-\n     /**\n      * Determines axis iteration algorithm.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547452484", "bodyText": "probably better to say \"throws unsupported exception\"", "author": "romani", "createdAt": "2020-12-22T19:03:43Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java", "diffHunk": "@@ -182,6 +184,27 @@ public DetailAST getUnderlyingNode() {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Creates nodes for children. Attribute node has no children, so\n+     * this method throws {@code UnsupportedOperationException}.\n+     *\n+     * @return never", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDM3OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434379", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-24T07:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MjYwMQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549052601", "bodyText": "not done.", "author": "romani", "createdAt": "2020-12-27T01:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MjkwMA==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549082900", "bodyText": "Sorry for mistype. Fixed.", "author": "pbludov", "createdAt": "2020-12-27T08:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MjQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java\nindex 77861105d..0a4a60c22 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNode.java\n\n@@ -184,9 +184,20 @@ public class AttributeNode extends AbstractNode {\n         throw throwUnsupportedOperationException();\n     }\n \n+    /**\n+     * Getter method for node depth. This method is not applicable to attribute nodes,\n+     * this method throw unsupported exception.\n+     *\n+     * @return never\n+     */\n+    @Override\n+    public int getDepth() {\n+        throw throwUnsupportedOperationException();\n+    }\n+\n     /**\n      * Creates nodes for children. Attribute node has no children, so\n-     * this method throws {@code UnsupportedOperationException}.\n+     * this method throw unsupported exception.\n      *\n      * @return never\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547453509", "bodyText": "can we cache text value ? we can do getTokenName ones.", "author": "romani", "createdAt": "2020-12-22T19:05:57Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -163,7 +175,7 @@ public String getAttributeValue(String namespace, String localPart) {\n      */\n     @Override\n     public String getLocalPart() {\n-        return text;\n+        return TokenUtil.getTokenName(detailAst.getType());", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY3MDA1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547670056", "bodyText": "No. This code\nif (text == null) {\n  text = TokenUtil.getTokenName(detailAst.getType());\n}\nreturn text;\ndoes not pass the Pitest regression. It says \"hey, I replaced if (text == null) with false and nothing fails.\nThis is common to all nano-optimizations. The method TokenUtil.getTokenName is O(1), so there is no effect for such cache.", "author": "pbludov", "createdAt": "2020-12-23T05:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDY5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549050692", "bodyText": "there is nothing quicker then just return reference to String.\nbut ok, this optimization is ok to skip for now.", "author": "romani", "createdAt": "2020-12-27T01:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1MzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "90c9d40765e56573e572ec5708d9afe59ce45e33", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\nindex 4fb3a689c..8a1757830 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\n\n@@ -175,7 +163,7 @@ public class ElementNode extends AbstractNode {\n      */\n     @Override\n     public String getLocalPart() {\n-        return TokenUtil.getTokenName(detailAst.getType());\n+        return text;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NzU1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547457555", "bodyText": "is this update required to fix stackoverflow ? if this is not related better to move to separate commit of the same PR.", "author": "romani", "createdAt": "2020-12-22T19:15:03Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java", "diffHunk": "@@ -91,44 +96,54 @@ public ElementNode(AbstractNode root, AbstractNode parent, DetailAST detailAst)\n     @Override\n     public int compareOrder(NodeInfo other) {\n         int result = 0;\n-        if (other instanceof AbstractNode) {\n-            result = getDepth() - ((AbstractNode) other).getDepth();\n+        if (other instanceof ElementNode) {\n+            result = Integer.compare(depth, ((ElementNode) other).depth);\n             if (result == 0) {\n-                final ElementNode[] children = getCommonAncestorChildren(other);\n-                result = children[0].indexAmongSiblings - children[1].indexAmongSiblings;\n+                result = compareCommonAncestorChildrenOrder(this, other);", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDYwNg==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434606", "bodyText": "done. I'll push \"optimizations\" commit once the CI passed.", "author": "pbludov", "createdAt": "2020-12-24T07:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ1NzU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\nindex 4fb3a689c..39d31703a 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java\n\n@@ -96,35 +95,41 @@ public class ElementNode extends AbstractNode {\n     @Override\n     public int compareOrder(NodeInfo other) {\n         int result = 0;\n-        if (other instanceof ElementNode) {\n-            result = Integer.compare(depth, ((ElementNode) other).depth);\n+        if (other instanceof AbstractNode) {\n+            result = getDepth() - ((AbstractNode) other).getDepth();\n             if (result == 0) {\n-                result = compareCommonAncestorChildrenOrder(this, other);\n+                final ElementNode[] children = getCommonAncestorChildren(other);\n+                result = children[0].indexAmongSiblings - children[1].indexAmongSiblings;\n             }\n         }\n         return result;\n     }\n \n     /**\n-     * Walks up the hierarchy until a common ancestor is found.\n-     * Then compares topmost sibling nodes.\n+     * Finds the ancestors of the children whose parent is their common ancestor.\n      *\n-     * @param first {@code NodeInfo} to compare\n-     * @param second {@code NodeInfo} to compare\n-     * @return the value {@code 0} if {@code first == second};\n-     *         a value less than {@code 0} if {@code first} should be first;\n-     *         a value greater than {@code 0} if {@code second} should be first.\n+     * @param other another {@code NodeInfo} object\n+     * @return {@code ElementNode} immediate children(also ancestors of the given children) of the\n+     *         common ancestor\n      */\n-    private static int compareCommonAncestorChildrenOrder(NodeInfo first, NodeInfo second) {\n-        NodeInfo child1 = first;\n-        NodeInfo child2 = second;\n+    private ElementNode[] getCommonAncestorChildren(NodeInfo other) {\n+        NodeInfo child1 = this;\n+        NodeInfo child2 = other;\n         while (!child1.getParent().equals(child2.getParent())) {\n             child1 = child1.getParent();\n             child2 = child2.getParent();\n         }\n-        final int index1 = ((ElementNode) child1).indexAmongSiblings;\n-        final int index2 = ((ElementNode) child2).indexAmongSiblings;\n-        return Integer.compare(index1, index2);\n+        return new ElementNode[] {(ElementNode) child1, (ElementNode) child2};\n+    }\n+\n+    /**\n+     * Getter method for node depth.\n+     *\n+     * @return depth\n+     */\n+    @Override\n+    public int getDepth() {\n+        return depth;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MDE2OA==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r547460168", "bodyText": "I saw this code twice in this xpath group of classes, is it reasonable to move it to util ?", "author": "romani", "createdAt": "2020-12-22T19:19:49Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java", "diffHunk": "@@ -74,14 +75,20 @@ public int compareOrder(NodeInfo nodeInfo) {\n     /**\n      * Iterates siblings of the current node and\n      * recursively creates new Xpath-nodes.\n+     *\n+     * @return children list\n      */\n-    private void createChildren() {\n+    @Override\n+    protected List<AbstractNode> createChildren() {\n         DetailAST currentChild = detailAst;\n+        final List<AbstractNode> result = new ArrayList<>();\n         while (currentChild != null) {\n-            final ElementNode child = new ElementNode(this, this, currentChild);\n-            addChild(child);\n+            final int index = result.size();\n+            final ElementNode child = new ElementNode(this, this, currentChild, 0, index);\n+            result.add(child);", "originalCommit": "f7c5cb9d27ef23b9598d9961e29158dcfbacfb5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzNDY0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r548434647", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-24T07:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MDE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java\nindex e6243b0a4..ccbb14029 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java\n\n@@ -80,15 +80,17 @@ public class RootNode extends AbstractNode {\n      */\n     @Override\n     protected List<AbstractNode> createChildren() {\n-        DetailAST currentChild = detailAst;\n-        final List<AbstractNode> result = new ArrayList<>();\n-        while (currentChild != null) {\n-            final int index = result.size();\n-            final ElementNode child = new ElementNode(this, this, currentChild, 0, index);\n-            result.add(child);\n-            currentChild = currentChild.getNextSibling();\n-        }\n-        return result;\n+        return XpathUtil.createChildren(this, this, detailAst);\n+    }\n+\n+    /**\n+     * Determine whether the node has any children.\n+     *\n+     * @return {@code true} is the node has any children.\n+     */\n+    @Override\n+    public boolean hasChildNodes() {\n+        return detailAst != null;\n     }\n \n     /**\n"}}, {"oid": "fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "url": "https://github.com/checkstyle/checkstyle/commit/fbadc40c8a5fc030bbef0b44cec1d18f6e7799d1", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-23T05:56:37Z", "type": "forcePushed"}, {"oid": "b8add8d8cd4926c41678facbf248802dd47fd500", "url": "https://github.com/checkstyle/checkstyle/commit/b8add8d8cd4926c41678facbf248802dd47fd500", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-23T07:03:48Z", "type": "forcePushed"}, {"oid": "34f9f003ab67aaac1910905f20ccefc61ef76d35", "url": "https://github.com/checkstyle/checkstyle/commit/34f9f003ab67aaac1910905f20ccefc61ef76d35", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-24T05:06:49Z", "type": "forcePushed"}, {"oid": "5be78283f247591f8fcc52690dd9e72922a9f0d6", "url": "https://github.com/checkstyle/checkstyle/commit/5be78283f247591f8fcc52690dd9e72922a9f0d6", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-24T05:38:44Z", "type": "forcePushed"}, {"oid": "0515435d7d04c69a12e1fd11a15c2fb5e998f07b", "url": "https://github.com/checkstyle/checkstyle/commit/0515435d7d04c69a12e1fd11a15c2fb5e998f07b", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-24T07:05:53Z", "type": "forcePushed"}, {"oid": "168371541c41e766d37c6d117997d369169c4496", "url": "https://github.com/checkstyle/checkstyle/commit/168371541c41e766d37c6d117997d369169c4496", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-24T07:43:09Z", "type": "forcePushed"}, {"oid": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff", "url": "https://github.com/checkstyle/checkstyle/commit/0c2e7a5b59203f133955ef82c47e7dce73cf30ff", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-24T07:51:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549051055", "bodyText": "we need to think on what approach for exception validation is better for us\nhttps://www.baeldung.com/junit-assert-exception\nusage is Rule is good, junit5 approach also looks interesting but still creates nesting blocks.\n@strkkk , @rnveach , @nmancus1 , what is more preferable way of exception validation for you.", "author": "romani", "createdAt": "2020-12-27T01:33:39Z", "path": "src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java", "diffHunk": "@@ -49,6 +50,27 @@ public void testCompareOrder() {\n         }\n     }\n \n+    @Test\n+    public void testGetDepth() {\n+        try {\n+            attributeNode.getDepth();\n+            fail(\"Exception is excepted\");\n+        }\n+        catch (UnsupportedOperationException ex) {", "originalCommit": "0c2e7a5b59203f133955ef82c47e7dce73cf30ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA3NzUwOQ==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549077509", "bodyText": "Sounds good. I'll try to use assertThrows + Truth.", "author": "pbludov", "createdAt": "2020-12-27T07:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MDA1MA==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549080050", "bodyText": "done", "author": "pbludov", "createdAt": "2020-12-27T08:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4MTYxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549081612", "bodyText": "assertThrows looks like a better way to me", "author": "strkkk", "createdAt": "2020-12-27T08:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTExNTE5Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/9102#discussion_r549115197", "bodyText": "I would prefer https://assertj.github.io/doc/ over either JUnit4 or JUnit5 exception validation (read more at https://www.baeldung.com/introduction-to-assertj), but I am not sure if this is an option that we could use. In my opinion, it is the most readable(by far) of the three.\nOut of the two options given above @Rule (JUnit4) and assertThrows (JUnit5), I think that @Rule is more readable. However, JUnit5 is overall a better UT framework, since we can import only the modules we need, and can run tests in parallel.\nI would rank the three options as follows:\n\nassertJ\nJUnit5 assertThrows\nJUnit4 @Rule", "author": "nmancus1", "createdAt": "2020-12-27T13:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MTA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "90c9d40765e56573e572ec5708d9afe59ce45e33", "chunk": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java\nindex 8e57bd3cf..cdb6ef5d4 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/xpath/AttributeNodeTest.java\n\n@@ -50,27 +49,6 @@ public class AttributeNodeTest {\n         }\n     }\n \n-    @Test\n-    public void testGetDepth() {\n-        try {\n-            attributeNode.getDepth();\n-            fail(\"Exception is excepted\");\n-        }\n-        catch (UnsupportedOperationException ex) {\n-            assertWithMessage(\"Invalid exception message\")\n-                .that(ex)\n-                .hasMessageThat()\n-                    .isEqualTo(\"Operation is not supported\");\n-        }\n-    }\n-\n-    @Test\n-    public void testHasChildNodes() {\n-        assertWithMessage(\"Attribute node shouldn't have children\")\n-            .that(attributeNode.hasChildNodes())\n-            .isFalse();\n-    }\n-\n     @Test\n     public void testGetAttributeValue() {\n         try {\n"}}, {"oid": "90c9d40765e56573e572ec5708d9afe59ce45e33", "url": "https://github.com/checkstyle/checkstyle/commit/90c9d40765e56573e572ec5708d9afe59ce45e33", "message": "Issue #5820: fix stack overflow in ParenPad", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "f4088284d0f22ac261d8767f872c04915dfe6129", "url": "https://github.com/checkstyle/checkstyle/commit/f4088284d0f22ac261d8767f872c04915dfe6129", "message": "Issue #5820: fix stack overflow in SingleSpaceSeparator", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "83167ed7e8b4769bc25cd2e01c67403bb1b3a2f7", "url": "https://github.com/checkstyle/checkstyle/commit/83167ed7e8b4769bc25cd2e01c67403bb1b3a2f7", "message": "Issue #5820: fix stack overflow error in ElementNode ctor", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "48c4fdcf63733567efe7f5f8ddcac4aff5847969", "url": "https://github.com/checkstyle/checkstyle/commit/48c4fdcf63733567efe7f5f8ddcac4aff5847969", "message": "minor: use Set in XpathUtil.TOKEN_TYPES_WITH_TEXT_ATTRIBUTE", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "c96adc8c0b96abee464543db6b6caf647e4bf99c", "url": "https://github.com/checkstyle/checkstyle/commit/c96adc8c0b96abee464543db6b6caf647e4bf99c", "message": "minor: removal of empty line from AbstractNode javadoc", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "6ca557ce847d1758ba07d43c2007f6bcb11c2e3a", "url": "https://github.com/checkstyle/checkstyle/commit/6ca557ce847d1758ba07d43c2007f6bcb11c2e3a", "message": "minor: refactoring in compareOrder method of ElementNode", "committedDate": "2020-12-27T08:00:28Z", "type": "commit"}, {"oid": "6ca557ce847d1758ba07d43c2007f6bcb11c2e3a", "url": "https://github.com/checkstyle/checkstyle/commit/6ca557ce847d1758ba07d43c2007f6bcb11c2e3a", "message": "minor: refactoring in compareOrder method of ElementNode", "committedDate": "2020-12-27T08:00:28Z", "type": "forcePushed"}]}