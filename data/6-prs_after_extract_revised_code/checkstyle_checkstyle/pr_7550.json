{"pr_number": 7550, "pr_title": "Issue #5832: add javadoc and xdoc example for LambdaParameterName", "pr_createdAt": "2020-02-16T10:44:39Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7550", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDA3OA==", "url": "https://github.com/checkstyle/checkstyle/pull/7550#discussion_r379934078", "bodyText": "name of the parameter in error message is incorrect, looks like it was copypastedfrom previous example.", "author": "strkkk", "createdAt": "2020-02-16T21:17:49Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java", "diffHunk": "@@ -48,21 +54,20 @@\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * Example of checking with this config:\n+ * Code Example:\n  * </p>\n  * <pre>\n- * public class TestClass {\n- *\n- *     Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim();\n- *\n- *     Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase(); // violation\n- *\n- *     public boolean testMethod(String sentence) {\n- *         return Stream.of(sentence.split(\" \"))\n- *             .map(word -&gt; word.trim())\n- *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation\n- *     }\n+ * class MyClass {\n+ *   Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim(); // OK\n+ *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase();\n+ *           // violation, name '_s' must match pattern '^[a-z]([a-zA-Z]+)*$'\n  *\n+ *   public boolean myMethod(String sentence) {\n+ *     return Stream.of(sentence.split(\" \"))\n+ *             .map(word -&gt; word.trim()) // OK\n+ *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation, name '_s'", "originalCommit": "54eb32273eadb42c75fea173432d9ccd81c35ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjg2MA==", "url": "https://github.com/checkstyle/checkstyle/pull/7550#discussion_r380222860", "bodyText": "done", "author": "0blivious", "createdAt": "2020-02-17T14:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDA3OA=="}], "type": "inlineReview", "revised_code": {"commit": "f5a333b392ac52f8547f693dc2cbb513c60d82ad", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\nindex 5917ee53a..9115abf73 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n\n@@ -59,13 +59,13 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * <pre>\n  * class MyClass {\n  *   Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim(); // OK\n- *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase();\n- *           // violation, name '_s' must match pattern '^[a-z]([a-zA-Z]+)*$'\n+ *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim(); // violation, name '_s'\n+ *                                              // must match pattern '^[a-z]([a-zA-Z]+)*$'\n  *\n  *   public boolean myMethod(String sentence) {\n  *     return Stream.of(sentence.split(\" \"))\n  *             .map(word -&gt; word.trim()) // OK\n- *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation, name '_s'\n+ *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation, name 'Word'\n  *                                                      // must match pattern '^[a-z]([a-zA-Z]+)*$'\n  *   }\n  * }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDEyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7550#discussion_r379934126", "bodyText": "It is better to put comment on the line where violation is, now it looks weird", "author": "strkkk", "createdAt": "2020-02-16T21:18:40Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java", "diffHunk": "@@ -38,6 +38,12 @@\n  * <pre>\n  * &lt;module name=\"LambdaParameterName\"/&gt;\n  * </pre>\n+ * <p>Code Example:</p>\n+ * <pre>\n+ * Function&lt;String, String&gt; function1 = s -&gt; s.toLowerCase(); // OK\n+ * Function&lt;String, String&gt; function2 = S -&gt; S.toLowerCase();\n+ *         // violation, name 'S' must match pattern '^[a-z][a-zA-Z0-9]*$'", "originalCommit": "54eb32273eadb42c75fea173432d9ccd81c35ac1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjg5Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7550#discussion_r380222896", "bodyText": "done", "author": "0blivious", "createdAt": "2020-02-17T14:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "a5381149a66dcec98630d3399fcf3a7e5ea54e47", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\nindex 5917ee53a..ece0c9953 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n\n@@ -41,8 +41,8 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * <p>Code Example:</p>\n  * <pre>\n  * Function&lt;String, String&gt; function1 = s -&gt; s.toLowerCase(); // OK\n- * Function&lt;String, String&gt; function2 = S -&gt; S.toLowerCase();\n- *         // violation, name 'S' must match pattern '^[a-z][a-zA-Z0-9]*$'\n+ * Function&lt;String, String&gt; function2 = S -&gt; S.toLowerCase(); // violation, name 'S'\n+ *                                                // must match pattern '^[a-z][a-zA-Z0-9]*$'\n  * </pre>\n  * <p>\n  * An example of how to configure the check for names that begin\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNDE0OQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7550#discussion_r379934149", "bodyText": "Same here, violation on empty line", "author": "strkkk", "createdAt": "2020-02-16T21:19:01Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java", "diffHunk": "@@ -48,21 +54,20 @@\n  * &lt;/module&gt;\n  * </pre>\n  * <p>\n- * Example of checking with this config:\n+ * Code Example:\n  * </p>\n  * <pre>\n- * public class TestClass {\n- *\n- *     Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim();\n- *\n- *     Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase(); // violation\n- *\n- *     public boolean testMethod(String sentence) {\n- *         return Stream.of(sentence.split(\" \"))\n- *             .map(word -&gt; word.trim())\n- *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation\n- *     }\n+ * class MyClass {\n+ *   Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim(); // OK\n+ *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase();\n+ *           // violation, name '_s' must match pattern '^[a-z]([a-zA-Z]+)*$'", "originalCommit": "54eb32273eadb42c75fea173432d9ccd81c35ac1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5a333b392ac52f8547f693dc2cbb513c60d82ad", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\nindex 5917ee53a..9115abf73 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java\n\n@@ -59,13 +59,13 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n  * <pre>\n  * class MyClass {\n  *   Function&lt;String, String&gt; function1 = str -&gt; str.toUpperCase().trim(); // OK\n- *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim().toUpperCase();\n- *           // violation, name '_s' must match pattern '^[a-z]([a-zA-Z]+)*$'\n+ *   Function&lt;String, String&gt; function2 = _s -&gt; _s.trim(); // violation, name '_s'\n+ *                                              // must match pattern '^[a-z]([a-zA-Z]+)*$'\n  *\n  *   public boolean myMethod(String sentence) {\n  *     return Stream.of(sentence.split(\" \"))\n  *             .map(word -&gt; word.trim()) // OK\n- *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation, name '_s'\n+ *             .anyMatch(Word -&gt; \"in\".equals(Word)); // violation, name 'Word'\n  *                                                      // must match pattern '^[a-z]([a-zA-Z]+)*$'\n  *   }\n  * }\n"}}, {"oid": "f5a333b392ac52f8547f693dc2cbb513c60d82ad", "url": "https://github.com/checkstyle/checkstyle/commit/f5a333b392ac52f8547f693dc2cbb513c60d82ad", "message": "Issue #5832: add javadoc and xdoc example for LambdaParameterName", "committedDate": "2020-02-17T14:37:42Z", "type": "forcePushed"}, {"oid": "a5381149a66dcec98630d3399fcf3a7e5ea54e47", "url": "https://github.com/checkstyle/checkstyle/commit/a5381149a66dcec98630d3399fcf3a7e5ea54e47", "message": "Issue #5832: add javadoc and xdoc example for LambdaParameterName", "committedDate": "2020-02-17T14:47:14Z", "type": "commit"}, {"oid": "a5381149a66dcec98630d3399fcf3a7e5ea54e47", "url": "https://github.com/checkstyle/checkstyle/commit/a5381149a66dcec98630d3399fcf3a7e5ea54e47", "message": "Issue #5832: add javadoc and xdoc example for LambdaParameterName", "committedDate": "2020-02-17T14:47:14Z", "type": "forcePushed"}]}