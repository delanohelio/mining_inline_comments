{"pr_number": 7529, "pr_title": "Issue #7518: refactor line comparison", "pr_createdAt": "2020-02-03T03:26:56Z", "pr_url": "https://github.com/checkstyle/checkstyle/pull/7529", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r374504056", "bodyText": "Does it make sense to make method areOnDifferentLines ? in addition ...\n(If yes, coul)\nReason:\nx != y is reading easily  but !TokenUtil.someSomeSomeOnSome is not as ! is far from actual context.", "author": "romani", "createdAt": "2020-02-04T07:09:38Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java", "diffHunk": "@@ -117,7 +118,7 @@\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (ast.getLineNo() != ast.getLastChild().getLineNo()) {\n+        if (!TokenUtil.areOnSameLine(ast, ast.getLastChild())) {", "originalCommit": "aa5d550ab6c01dcd223ffb33e46e9f5e79e5e79f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDcyNg==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r374550726", "bodyText": "Maintaining two methods (even single-line ones) will be twice as hard.", "author": "pbludov", "createdAt": "2020-02-04T09:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4MDg5Mg==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r374680892", "bodyText": "It is not so common to add \"negation\" methods like notBlaBla in java, but in scala people do that, as far as I know.\nI like this approach (use negate methods), as for me method like notOnSameLine would be more readable than negation.", "author": "strkkk", "createdAt": "2020-02-04T13:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MjI3NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r374782275", "bodyText": "I didn't propose negation, I used word with opposite meaning.\nUsage of \"not\" is not very good if there is a way to use opposite word, it is ok especially if there is sibling method with positive name. In our case we do have such sibling method, so we will not force to use double negation.\nI do not think there will be any maintenance costs for extra method, especially if we place them close to each other.\nWe spoke a lot about methods that starts with \"no\", I think we are ready to make Check on this in sevntu project, in config user need to be able to provide map of method sibling to skip violation on method that starts with negation.\nIf team agree, I can start issue, to keep this idea written.", "author": "romani", "createdAt": "2020-02-04T16:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTYwNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375611607", "bodyText": "@rnveach , @pbludov , what are your thoughts on this", "author": "romani", "createdAt": "2020-02-06T02:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcxMzI0Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375713243", "bodyText": "We will need to use this rule in all similar cases. This can be difficult.", "author": "pbludov", "createdAt": "2020-02-06T09:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2NTE2Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375865167", "bodyText": "@rnveach , @pbludov ,\nDoes it make sense to make method areOnDifferentLines ?", "author": "romani", "createdAt": "2020-02-06T14:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NzgyOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r376047828", "bodyText": "Does it make sense to make method areOnDifferentLines ?\n\nI vote against adding the method areOnDifferentLines.", "author": "pbludov", "createdAt": "2020-02-06T19:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNTQ3Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r376105473", "bodyText": "Truthfully, I don't see the point of this type of method. Its just a single condition so it seems like more work than to just compare the values, especially when the condition looks as simple as the possible new method.", "author": "rnveach", "createdAt": "2020-02-06T21:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5MjUzMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r376192532", "bodyText": "Ok, I will come back to this in next PR, as I do not like negation a lot", "author": "romani", "createdAt": "2020-02-07T02:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5MjkyMA==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r376192920", "bodyText": "sevntu-checkstyle/sevntu.checkstyle#802", "author": "romani", "createdAt": "2020-02-07T02:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNDA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java\nindex 29af294e3..a105db170 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java\n\n@@ -118,7 +118,7 @@ public class NoLineWrapCheck extends AbstractCheck {\n \n     @Override\n     public void visitToken(DetailAST ast) {\n-        if (!TokenUtil.areOnSameLine(ast, ast.getLastChild())) {\n+        if (!TokenUtil.isOnSameLine(ast, ast.getLastChild())) {\n             log(ast.getLineNo(), MSG_KEY, ast.getText());\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTU5Mw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375061593", "bodyText": "Are these expressions or asts?", "author": "rnveach", "createdAt": "2020-02-05T05:09:34Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -245,4 +245,16 @@ public static void forEachChild(DetailAST root, int type, Consumer<DetailAST> ac\n         }\n     }\n \n+    /**\n+     * Determines if two ASTs are on the same line.\n+     *\n+     * @param ast1   the first expression\n+     * @param ast2   the second expression", "originalCommit": "aa5d550ab6c01dcd223ffb33e46e9f5e79e5e79f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2OTcxNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375269715", "bodyText": "changed", "author": "strkkk", "createdAt": "2020-02-05T13:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\nindex 672f4063c..16f7f6445 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n\n@@ -248,12 +248,12 @@ public final class TokenUtil {\n     /**\n      * Determines if two ASTs are on the same line.\n      *\n-     * @param ast1   the first expression\n-     * @param ast2   the second expression\n+     * @param ast1   the first AST\n+     * @param ast2   the second AST\n      *\n-     * @return true if they are, false otherwise\n+     * @return true if they are on the same line.\n      */\n-    public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n+    public static boolean isOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTg2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375061865", "bodyText": "https://docs.oracle.com/javase/7/docs/api/java/util/List.html#isEmpty()\nThe return javadoc should be a complete sentence imo.", "author": "rnveach", "createdAt": "2020-02-05T05:10:51Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -245,4 +245,16 @@ public static void forEachChild(DetailAST root, int type, Consumer<DetailAST> ac\n         }\n     }\n \n+    /**\n+     * Determines if two ASTs are on the same line.\n+     *\n+     * @param ast1   the first expression\n+     * @param ast2   the second expression\n+     *\n+     * @return true if they are, false otherwise", "originalCommit": "aa5d550ab6c01dcd223ffb33e46e9f5e79e5e79f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2OTgxMg==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375269812", "bodyText": "changed", "author": "strkkk", "createdAt": "2020-02-05T13:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\nindex 672f4063c..16f7f6445 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n\n@@ -248,12 +248,12 @@ public final class TokenUtil {\n     /**\n      * Determines if two ASTs are on the same line.\n      *\n-     * @param ast1   the first expression\n-     * @param ast2   the second expression\n+     * @param ast1   the first AST\n+     * @param ast2   the second AST\n      *\n-     * @return true if they are, false otherwise\n+     * @return true if they are on the same line.\n      */\n-    public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n+    public static boolean isOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375061947", "bodyText": "Since it is a boolean result, shouldn't the method be named isOnSameLine?", "author": "rnveach", "createdAt": "2020-02-05T05:11:14Z", "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java", "diffHunk": "@@ -245,4 +245,16 @@ public static void forEachChild(DetailAST root, int type, Consumer<DetailAST> ac\n         }\n     }\n \n+    /**\n+     * Determines if two ASTs are on the same line.\n+     *\n+     * @param ast1   the first expression\n+     * @param ast2   the second expression\n+     *\n+     * @return true if they are, false otherwise\n+     */\n+    public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {", "originalCommit": "aa5d550ab6c01dcd223ffb33e46e9f5e79e5e79f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2OTg2Ng==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375269866", "bodyText": "changed", "author": "strkkk", "createdAt": "2020-02-05T13:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI4NTIwMw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375285203", "bodyText": "@rnveach , can you explain why is should be used ? I thought as we have two arguments, so plural from are should be used.\nis might good if we had code like ast.isOnSameLine(ast1)", "author": "romani", "createdAt": "2020-02-05T14:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1NzQxNw==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375557417", "bodyText": "@romani Truthfully I never really paid attention to the number of parameters. I always try to name methods \"is\" (present or past) based on what they are doing.\nI fine we keeping it as are.", "author": "rnveach", "createdAt": "2020-02-05T23:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTI2NQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375611265", "bodyText": "I always try to name all to way to make code read as English text.\nTo honor almost all rules. In this context we use context less function  (static method). So as we have two arguments, so there plural form should be used, and looks good, so we have to use it.\nI am voting to use are.\nLet's keep this PR hanging till we agree on naming convention for such cases.\nPlease vote.", "author": "romani", "createdAt": "2020-02-06T02:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMzA1MQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375613051", "bodyText": "I am fine with both options, but are looks slightly better for me.", "author": "strkkk", "createdAt": "2020-02-06T02:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNjIwNQ==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375616205", "bodyText": "Please make the change back then.", "author": "rnveach", "createdAt": "2020-02-06T02:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNzAxOA==", "url": "https://github.com/checkstyle/checkstyle/pull/7529#discussion_r375617018", "bodyText": "ok done", "author": "strkkk", "createdAt": "2020-02-06T02:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "chunk": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\nindex 672f4063c..16f7f6445 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java\n\n@@ -248,12 +248,12 @@ public final class TokenUtil {\n     /**\n      * Determines if two ASTs are on the same line.\n      *\n-     * @param ast1   the first expression\n-     * @param ast2   the second expression\n+     * @param ast1   the first AST\n+     * @param ast2   the second AST\n      *\n-     * @return true if they are, false otherwise\n+     * @return true if they are on the same line.\n      */\n-    public static boolean areOnSameLine(DetailAST ast1, DetailAST ast2) {\n+    public static boolean isOnSameLine(DetailAST ast1, DetailAST ast2) {\n         return ast1.getLineNo() == ast2.getLineNo();\n     }\n \n"}}, {"oid": "415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "url": "https://github.com/checkstyle/checkstyle/commit/415e4537bbf3bbb0c120c9f1d71aa87f4bf97364", "message": "Issue #7518: refactor line comparison", "committedDate": "2020-02-05T13:55:01Z", "type": "forcePushed"}, {"oid": "c0ac9d548495caa48f7cf26e94ca047bf0af212a", "url": "https://github.com/checkstyle/checkstyle/commit/c0ac9d548495caa48f7cf26e94ca047bf0af212a", "message": "Issue #7518: refactor line comparison", "committedDate": "2020-02-05T17:46:15Z", "type": "forcePushed"}, {"oid": "6a1feea76b7097701841985a62b6c58d5ce134ec", "url": "https://github.com/checkstyle/checkstyle/commit/6a1feea76b7097701841985a62b6c58d5ce134ec", "message": "Issue #7518: refactor line comparison", "committedDate": "2020-02-06T02:48:31Z", "type": "commit"}, {"oid": "6a1feea76b7097701841985a62b6c58d5ce134ec", "url": "https://github.com/checkstyle/checkstyle/commit/6a1feea76b7097701841985a62b6c58d5ce134ec", "message": "Issue #7518: refactor line comparison", "committedDate": "2020-02-06T02:48:31Z", "type": "forcePushed"}]}