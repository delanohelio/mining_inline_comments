{"pr_number": 546, "pr_title": "SO-3998: Code system API changes", "pr_createdAt": "2020-04-27T18:25:01Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/546", "timeline": [{"oid": "39d54cab4bc83d9cee62336e9bfb9527b75cd994", "url": "https://github.com/b2ihealthcare/snow-owl/commit/39d54cab4bc83d9cee62336e9bfb9527b75cd994", "message": "SO-3998: Change extensionOf property type to CodeSystemURI", "committedDate": "2020-04-07T09:41:16Z", "type": "commit"}, {"oid": "eb213e13f6231763cebef3503535375199ca1d88", "url": "https://github.com/b2ihealthcare/snow-owl/commit/eb213e13f6231763cebef3503535375199ca1d88", "message": "SO-3998: Decrease visibility of FHIR CodeSystem constructor", "committedDate": "2020-04-07T11:33:32Z", "type": "commit"}, {"oid": "c86d68237fa614275479b53731f59c9e25adec6f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/c86d68237fa614275479b53731f59c9e25adec6f", "message": "SO-3998: Add \"additionalProperties\" property to code systems", "committedDate": "2020-04-07T15:39:48Z", "type": "commit"}, {"oid": "f804798d14abd245db7116f2b63e3e001d8b4070", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f804798d14abd245db7116f2b63e3e001d8b4070", "message": "SO-3998: Add \"locales\" property to code systems", "committedDate": "2020-04-14T13:15:27Z", "type": "commit"}, {"oid": "303b950d342bc2d33cbebb042013521272244bd7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/303b950d342bc2d33cbebb042013521272244bd7", "message": "SO-3998: Update locale list on code system in SnomedRf2ImportRequest", "committedDate": "2020-04-14T14:47:31Z", "type": "commit"}, {"oid": "ee41c1d4f4b6f24237450004f9a7b9c138301474", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ee41c1d4f4b6f24237450004f9a7b9c138301474", "message": "SO-3998: Add support for determining code system path from...\n\n...the short name (and extensionOf attribute, if set)", "committedDate": "2020-04-15T17:30:11Z", "type": "commit"}, {"oid": "08ece9415f9a566f882d4fdd0ec1a84e66ac35b9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/08ece9415f9a566f882d4fdd0ec1a84e66ac35b9", "message": "SO-3998: Fix extension working branch in API test constants", "committedDate": "2020-04-15T18:34:31Z", "type": "commit"}, {"oid": "9b641d282d6f9b9614cba76731376220c221caad", "url": "https://github.com/b2ihealthcare/snow-owl/commit/9b641d282d6f9b9614cba76731376220c221caad", "message": "SO-3998: Use CodeSystem instead of CodeSystemEntry in requests", "committedDate": "2020-04-20T16:23:21Z", "type": "commit"}, {"oid": "741285dc20234acaaba71320dc356860eaacc042", "url": "https://github.com/b2ihealthcare/snow-owl/commit/741285dc20234acaaba71320dc356860eaacc042", "message": "SO-3998: Implement \"available upgrades\" property expansion", "committedDate": "2020-04-23T15:40:39Z", "type": "commit"}, {"oid": "e1e8e7f32c330d7b19781d5f95bb189d7488eb87", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e1e8e7f32c330d7b19781d5f95bb189d7488eb87", "message": "SO-3998: Implement \"available upgrades\" expansion in REST service", "committedDate": "2020-04-27T14:50:32Z", "type": "commit"}, {"oid": "eaa624d502b0484fb44014eb1b5eaa83d9105263", "url": "https://github.com/b2ihealthcare/snow-owl/commit/eaa624d502b0484fb44014eb1b5eaa83d9105263", "message": "SO-3998: Remove STORAGE_KEY constant from CodeSystemEntry.Fields", "committedDate": "2020-04-27T14:50:58Z", "type": "commit"}, {"oid": "ca304d7f73ef71568ebc817c069f149609961b25", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ca304d7f73ef71568ebc817c069f149609961b25", "message": "SO-3998: Add support for \"extensionOf\" updates in CS update request", "committedDate": "2020-04-27T14:51:51Z", "type": "commit"}, {"oid": "3b7187fc3904a6832dc4fe28200ae40591cb6d77", "url": "https://github.com/b2ihealthcare/snow-owl/commit/3b7187fc3904a6832dc4fe28200ae40591cb6d77", "message": "SO-3998: Add happy-path test case for \"extensionOf\" code system update", "committedDate": "2020-04-27T17:13:03Z", "type": "commit"}, {"oid": "eccaa6e2e1d2abc1f984ea387934609e4ad258c4", "url": "https://github.com/b2ihealthcare/snow-owl/commit/eccaa6e2e1d2abc1f984ea387934609e4ad258c4", "message": "SO-3998: Update core-e2e-tests launch configuration format", "committedDate": "2020-04-27T17:14:22Z", "type": "commit"}, {"oid": "f9a5909d106259f6930c69b007540222368a1ac3", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f9a5909d106259f6930c69b007540222368a1ac3", "message": "Merge remote-tracking branch 'origin/7.x' into\nfeature/SO-3998_code_system_api_changes\n\nConflicts:\n\tsnomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java", "committedDate": "2020-04-27T17:21:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyODkwOQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417128909", "bodyText": "The responsebody annotation can be removed, because the class is annotated with RestController.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n          \n          \n            \n            \tpublic Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {", "author": "cmark", "createdAt": "2020-04-29T07:51:17Z", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java", "diffHunk": "@@ -58,14 +70,88 @@\n \tprivate CodeSystemService codeSystemService;\n \t\n \t@ApiOperation(\n-\t\t\tvalue=\"Retrieve all code systems\",\n-\t\t\tnotes=\"Returns a list containing generic information about registered code systems.\")\n+\t\tvalue=\"Retrieve Code Systems\", \n+\t\tnotes=\"Returns a collection resource containing all/filtered registered Code Systems.\"\n+\t\t\t+ \"<p>Results are always sorted by repositoryUuid first, sort keys only apply per repository.\"\n+\t\t\t+ \"<p>The following properties can be expanded:\"\n+\t\t\t+ \"<p>\"\n+\t\t\t+ \"&bull; availableUpgrades() &ndash; a list of possible code system URIs that can be used as an 'extensionOf' property\"\n+\t)\n \t@ApiResponses({\n-\t\t@ApiResponse(code = 200, message = \"OK\")\n+\t\t@ApiResponse(code = 200, message = \"OK\", response = CodeSystems.class),\n+\t\t@ApiResponse(code = 400, message = \"Invalid search config\", response = RestApiError.class),\n+\t\t@ApiResponse(code = 404, message = \"Branch not found\", response = RestApiError.class)\n \t})\n \t@GetMapping(produces = { AbstractRestService.JSON_MEDIA_TYPE })\n-\tpublic CollectionResource<CodeSystem> getCodeSystems() {\n-\t\treturn CollectionResource.of(codeSystemService.getCodeSystems());\n+\tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTk1MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417131951", "bodyText": "The same applies to the other methods.", "author": "cmark", "createdAt": "2020-04-29T07:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyODkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "72e70a59d694d86fb161b6227f43b0e6cc93448d", "chunk": "diff --git a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\nindex ab82ec508c..283ca28427 100644\n--- a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n+++ b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n\n@@ -83,7 +82,7 @@ public class CodeSystemRestService extends AbstractRestService {\n \t\t@ApiResponse(code = 404, message = \"Branch not found\", response = RestApiError.class)\n \t})\n \t@GetMapping(produces = { AbstractRestService.JSON_MEDIA_TYPE })\n-\tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n+\tpublic Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n \t\tfinal IEventBus bus = getBus();\n \t\t\n \t\treturn RepositoryRequests.prepareSearch()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMDgyNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417130825", "bodyText": "Rename the repositoryUuid field to repositoryId in the domain class (we can keep it repositoryUuid in the index or replace it with a repositoryId, your call).", "author": "cmark", "createdAt": "2020-04-29T07:54:54Z", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java", "diffHunk": "@@ -58,14 +70,88 @@\n \tprivate CodeSystemService codeSystemService;\n \t\n \t@ApiOperation(\n-\t\t\tvalue=\"Retrieve all code systems\",\n-\t\t\tnotes=\"Returns a list containing generic information about registered code systems.\")\n+\t\tvalue=\"Retrieve Code Systems\", \n+\t\tnotes=\"Returns a collection resource containing all/filtered registered Code Systems.\"\n+\t\t\t+ \"<p>Results are always sorted by repositoryUuid first, sort keys only apply per repository.\"", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e70a59d694d86fb161b6227f43b0e6cc93448d", "chunk": "diff --git a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\nindex ab82ec508c..283ca28427 100644\n--- a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n+++ b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n\n@@ -83,7 +82,7 @@ public class CodeSystemRestService extends AbstractRestService {\n \t\t@ApiResponse(code = 404, message = \"Branch not found\", response = RestApiError.class)\n \t})\n \t@GetMapping(produces = { AbstractRestService.JSON_MEDIA_TYPE })\n-\tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n+\tpublic Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n \t\tfinal IEventBus bus = getBus();\n \t\t\n \t\treturn RepositoryRequests.prepareSearch()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTUzNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417131537", "bodyText": "I suggest throwing a BadRequestException if a client sends a value in the searchAfter property of the CodeSystemRestSearch params.", "author": "cmark", "createdAt": "2020-04-29T07:56:18Z", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java", "diffHunk": "@@ -58,14 +70,88 @@\n \tprivate CodeSystemService codeSystemService;\n \t\n \t@ApiOperation(\n-\t\t\tvalue=\"Retrieve all code systems\",\n-\t\t\tnotes=\"Returns a list containing generic information about registered code systems.\")\n+\t\tvalue=\"Retrieve Code Systems\", \n+\t\tnotes=\"Returns a collection resource containing all/filtered registered Code Systems.\"\n+\t\t\t+ \"<p>Results are always sorted by repositoryUuid first, sort keys only apply per repository.\"\n+\t\t\t+ \"<p>The following properties can be expanded:\"\n+\t\t\t+ \"<p>\"\n+\t\t\t+ \"&bull; availableUpgrades() &ndash; a list of possible code system URIs that can be used as an 'extensionOf' property\"\n+\t)\n \t@ApiResponses({\n-\t\t@ApiResponse(code = 200, message = \"OK\")\n+\t\t@ApiResponse(code = 200, message = \"OK\", response = CodeSystems.class),\n+\t\t@ApiResponse(code = 400, message = \"Invalid search config\", response = RestApiError.class),\n+\t\t@ApiResponse(code = 404, message = \"Branch not found\", response = RestApiError.class)\n \t})\n \t@GetMapping(produces = { AbstractRestService.JSON_MEDIA_TYPE })\n-\tpublic CollectionResource<CodeSystem> getCodeSystems() {\n-\t\treturn CollectionResource.of(codeSystemService.getCodeSystems());\n+\tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n+\t\tfinal IEventBus bus = getBus();\n+\t\t\n+\t\treturn RepositoryRequests.prepareSearch()\n+\t\t\t.all()\n+\t\t\t.buildAsync()\n+\t\t\t.execute(bus)\n+\t\t\t.thenWith(repos -> searchByGet(params, repos, bus));\n+\t}\n+\t\n+\tprivate Promise<CodeSystems> searchByGet(CodeSystemRestSearch params, Repositories repos, IEventBus bus) {\n+\t\tfinal List<Promise<CodeSystems>> codeSystemsByRepository = repos.stream()\n+\t\t\t.map(RepositoryInfo::id)\n+\t\t\t.map(id -> searchByGet(params, id, bus))\n+\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\tif (codeSystemsByRepository.isEmpty()) {\n+\t\t\treturn Promise.immediate(new CodeSystems(List.of(), null, params.getLimit(), 0));\n+\t\t}\n+\t\t\n+\t\treturn Promise.all(codeSystemsByRepository)\n+\t\t\t.then(results -> {\n+\t\t\t\tfinal List<CodeSystem> allCodeSystems = results.stream()\n+\t\t\t\t\t.flatMap(r -> ((CodeSystems) r).stream())\n+\t\t\t\t\t// XXX: search-time sort order within a repository should be preserved by the sorter below\n+\t\t\t\t\t.sorted(Comparator.comparing(CodeSystem::getRepositoryUuid))\n+\t\t\t\t\t.limit(params.getLimit())\n+\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\t\n+\t\t\t\tfinal int total = results.stream()\n+\t\t\t\t\t.mapToInt(r -> ((CodeSystems) r).getTotal())\n+\t\t\t\t\t.sum();\n+\t\t\t\t\n+\t\t\t\treturn new CodeSystems(allCodeSystems, null, params.getLimit(), total);\n+\t\t\t});\n+\t}\n+\t\n+\tprivate Promise<CodeSystems> searchByGet(CodeSystemRestSearch params, String repositoryId, IEventBus bus) {\n+\t\tList<Sort> sortBy = extractSortFields(params.getSort());\n+\t\tif (sortBy.isEmpty()) {\n+\t\t\tsortBy = List.of(SortField.ascending(CodeSystemEntry.Fields.SHORT_NAME));\n+\t\t}\n+\n+\t\treturn CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterByIds(params.getId())\n+\t\t\t\t.setLimit(params.getLimit())\n+\t\t\t\t.setExpand(params.getExpand())\n+\t\t\t\t.sortBy(sortBy)\n+\t\t\t\t// .setSearchAfter(...) is not applied; we are searching in multiple repositories", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e70a59d694d86fb161b6227f43b0e6cc93448d", "chunk": "diff --git a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\nindex ab82ec508c..283ca28427 100644\n--- a/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n+++ b/core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemRestService.java\n\n@@ -83,7 +82,7 @@ public class CodeSystemRestService extends AbstractRestService {\n \t\t@ApiResponse(code = 404, message = \"Branch not found\", response = RestApiError.class)\n \t})\n \t@GetMapping(produces = { AbstractRestService.JSON_MEDIA_TYPE })\n-\tpublic @ResponseBody Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n+\tpublic Promise<CodeSystems> searchByGet(final CodeSystemRestSearch params) {\n \t\tfinal IEventBus bus = getBus();\n \t\t\n \t\treturn RepositoryRequests.prepareSearch()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjY4MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417132681", "bodyText": "Do we still need this class? Would it be possible to merge it into the core module?", "author": "cmark", "createdAt": "2020-04-29T07:58:18Z", "path": "core/com.b2international.snowowl.core.rest/src/com/b2international/snowowl/core/rest/codesystem/CodeSystemService.java", "diffHunk": "@@ -45,32 +43,9 @@\n @Component\n public final class CodeSystemService {", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2ODAzOA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417968038", "bodyText": "CodeSystemRestService and CodeSystemVersionRestService are still sharing the remaining service method. I didn't want to touch this part to avoid expanding the PR's scope.", "author": "apeteri", "createdAt": "2020-04-30T12:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjY4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjk5OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417132998", "bodyText": "Since we are modifying this model anyway, I suggest renaming this property to repositoryId.", "author": "cmark", "createdAt": "2020-04-29T07:58:56Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java", "diffHunk": "@@ -60,8 +84,10 @@ public static Builder builder(final CodeSystemEntry input) {\n \t\tprivate String iconPath;\n \t\tprivate String terminologyId;\n \t\tprivate String repositoryUuid;", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "994bf56de1d23f88f0cca85c71e221339d7cbfc4", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\nindex 18b7fb9727..e64e6c1c7e 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\n\n@@ -83,7 +83,7 @@ public class CodeSystem {\n \t\tprivate String branchPath;\n \t\tprivate String iconPath;\n \t\tprivate String terminologyId;\n-\t\tprivate String repositoryUuid;\n+\t\tprivate String repositoryId;\n \t\tprivate CodeSystemURI extensionOf;\n \t\tprivate List<ExtendedLocale> locales;\n \t\tprivate Map<String, Object> additionalProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMzIyNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417133225", "bodyText": "\u26a0\ufe0f Missing since tag.", "author": "cmark", "createdAt": "2020-04-29T07:59:14Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemConverter.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.codesystem;\n+\n+import static com.google.common.collect.Lists.newArrayList;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.stream.Collectors;\n+\n+import com.b2international.commons.http.ExtendedLocale;\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.domain.RepositoryContext;\n+import com.b2international.snowowl.core.request.BaseResourceConverter;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n+import com.google.common.collect.Multimaps;\n+import com.google.common.collect.TreeMultimap;\n+\n+public final class CodeSystemConverter extends BaseResourceConverter<CodeSystemEntry, CodeSystem, CodeSystems> {", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2cd5a65194f8536b0c83d692627a6f0cddae7f2", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemConverter.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemConverter.java\nindex 93be01fe84..2342ef9892 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemConverter.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemConverter.java\n\n@@ -33,6 +33,9 @@ import com.b2international.snowowl.core.uri.CodeSystemURI;\n import com.google.common.collect.Multimaps;\n import com.google.common.collect.TreeMultimap;\n \n+/**\n+ * @since 7.6\n+ */\n public final class CodeSystemConverter extends BaseResourceConverter<CodeSystemEntry, CodeSystem, CodeSystems> {\n \n \tpublic CodeSystemConverter(RepositoryContext context, Options expand, List<ExtendedLocale> locales) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTQxMA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417139410", "bodyText": "How about a few enforcing checks in the CodeSystem create API? Prevent creating new CodeSystem entries that use the same oid (or shortName) as another CodeSystem.\nOr remove the possibility to get a CodeSystems by its supposed to be unique oid. See the GET endpoint.", "author": "cmark", "createdAt": "2020-04-29T08:10:59Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemEntry.java", "diffHunk": "@@ -203,153 +245,150 @@ private CodeSystemEntry(final String oid, final String name, final String shortN\n \t\tthis.repositoryUuid = repositoryUuid;\n \t\tthis.branchPath = branchPath;\n \t\tthis.extensionOf = extensionOf;\n+\t\tthis.locales = locales;\n+\t\tthis.additionalProperties = additionalProperties;\n \t}\n \n \t/**\n-\t * Returns the code system OID. Can be {@code null}.\n-\t * @return the OID.\n+\t * @return the assigned object identifier (OID) of this code system, eg.\n+\t *         \"{@code 3.4.5.6.10000}\" (can be {@code null})\n \t */\n \tpublic String getOid() {\n \t\treturn oid;\n \t}\n \n \t/**\n-\t * Returns with the name of the code system.\n-\t * @return the name of the code system.\n+\t * @return the name of this code system, eg. \"{@code SNOMED Clinical Terms}\"\n \t */\n \tpublic String getName() {\n \t\treturn name;\n \t}\n \n \t/**\n-\t * Returns with the code system short name.\n-\t * @return the code system short name.\n+\t * @return the short name of this code system, usually an abbreviation of the\n+\t *         name; eg. \"{@code SNOMEDCT}\"\n \t */\n \tpublic String getShortName() {\n \t\treturn shortName;\n \t}\n \n \t/**\n-\t * Returns with the maintaining organization link. Can be {@code null}.\n-\t * @return the link for the maintaining organization. \n+\t * @return the URL of the maintaining organization, eg.\n+\t *         \"{@code http://example.com/}\" (can be {@code null})\n \t */\n \tpublic String getOrgLink() {\n \t\treturn orgLink;\n \t}\n \n \t/**\n-\t * Returns with the language of the code system.\n-\t * @return the language.\n+\t * @return the primary language tag, eg. \"en_US\"\n+\t * \n+\t * @deprecated Clients should access language information via {@link #getLocales()} instead. \n \t */\n+\t@Deprecated\n \tpublic String getLanguage() {\n \t\treturn language;\n \t}\n \n \t/**\n-\t * Returns with the citation of the code system.\n-\t * @return the citation of the code system.\n+\t * @return a short paragraph describing the origins and purpose of this code\n+\t *         system (can be {@code null})\n \t */\n \tpublic String getCitation() {\n \t\treturn citation;\n \t}\n \n \t/**\n-\t * Returns with the application specific icon path of the code system. \n-\t * @return the application specific icon path.\n+\t * @return the application specific icon path for the code system\n \t */\n \tpublic String getIconPath() {\n \t\treturn iconPath;\n \t}\n \n \t/**\n-\t * Returns with the application specific ID to associate the code \n-\t * system with any application specific\n-\t *  feature or container repository.\n-\t * @return the application specific ID.\n+\t * @return the terminology (tooling) ID, used to associate the code system with\n+\t *         specific application features\n \t */\n \tpublic String getTerminologyComponentId() {\n \t\treturn terminologyComponentId;\n \t}\n \n \t/**\n-\t * Returns with the unique ID of the repository where the current code system belongs to. \n-\t * @return the repository UUID for the code system.\n+\t * @return the unique ID of the repository where code system content is stored\n \t */\n \tpublic String getRepositoryUuid() {\n \t\treturn repositoryUuid;\n \t}\n \t\n \t/**\n-\t * Returns the branch path of the code system.\n-\t * @return the path for the code system.\n+\t * @return the working branch path for the code system, eg.\n+\t *         \"{@code MAIN/2018-07-31/SNOMEDCT-EXT}\"\n \t */\n \tpublic String getBranchPath() {\n \t\treturn branchPath;\n \t}\n \n \t/**\n-\t * Returns the unique ID of the base Code System.\n+\t * @return the URI of the code system version this code system is based upon\n+\t *         (can be {@code null} if this is a stand-alone code system).\n \t */\n-\tpublic String getExtensionOf() {\n+\tpublic CodeSystemURI getExtensionOf() {\n \t\treturn extensionOf;\n \t}\n+\t\n+\t/**\n+\t * @return the list of {@link ExtendedLocale} instances representing the language\n+\t *         content this code system carries (can be {@code null})\n+\t */\n+\tpublic List<ExtendedLocale> getLocales() {\n+\t\treturn locales;\n+\t}\n+\n+\t/**\n+\t * @return a map storing metadata key-value pairs specific to this code system.\n+\t *         Interpretation of values is implementation-dependent.\n+\t */\n+\tpublic Map<String, Object> getAdditionalProperties() {\n+\t\treturn additionalProperties;\n+\t}\n \n \t@Override\n \tpublic int hashCode() {\n-\t\tfinal int prime = 31;\n-\t\tint result = 1;\n-\t\tresult = prime * result + ((oid == null) ? 0 : oid.hashCode());\n-\t\tresult = prime * result + ((shortName == null) ? 0 : shortName.hashCode());\n-\t\treturn result;\n+\t\treturn Objects.hash(oid, shortName);\n \t}\n \n \t@Override\n \tpublic boolean equals(final Object obj) {\n-\t\tif (this == obj)\n-\t\t\treturn true;\n-\t\tif (obj == null)\n-\t\t\treturn false;\n-\t\tif (!(obj instanceof CodeSystemEntry))\n-\t\t\treturn false;\n+\t\tif (this == obj) { return true; }\n+\t\tif (obj == null) { return false; }\n+\t\tif (!(obj instanceof CodeSystemEntry)) { return false; }\n+\t\t\n \t\tfinal CodeSystemEntry other = (CodeSystemEntry) obj;\n-\t\tif (oid == null) {\n-\t\t\tif (other.oid != null)\n-\t\t\t\treturn false;\n-\t\t} else if (!oid.equals(other.oid))\n-\t\t\treturn false;\n-\t\tif (shortName == null) {\n-\t\t\tif (other.shortName != null)\n-\t\t\t\treturn false;\n-\t\t} else if (!shortName.equals(other.shortName))\n-\t\t\treturn false;\n-\t\treturn true;\n-\t}\n-\t\n-\t/**\n-\t * Returns all code system short name dependencies and itself.\n-\t */\n-\t@JsonIgnore\n-\tpublic SortedSet<String> getDependenciesAndSelf() {\n-\t\tImmutableSortedSet.Builder<String> affectedCodeSystems = ImmutableSortedSet.naturalOrder();\n-\t\taffectedCodeSystems.addAll(getDependencies());\n-\t\taffectedCodeSystems.add(shortName);\n-\t\treturn affectedCodeSystems.build();\n-\t}\n-\t\n-\t/**\n-\t * Returns the short names of all affected code systems\n-\t */\n-\t@JsonIgnore\n-\tpublic SortedSet<String> getDependencies() {\n-\t\treturn TerminologyRegistry.INSTANCE.getTerminology(terminologyComponentId).getDependencies();\n-\t}\n-\t\n-\t/**\n-\t * Returns a new branch path that originates from the code system's branch path\n-\t */\n-\t@JsonIgnore\n-\tpublic String getRelativeBranchPath(String relativeTo) {\n-\t\treturn String.format(\"%s%s%s\", branchPath, Branch.SEPARATOR, relativeTo);\n+\n+\t\t/*\n+\t\t * FIXME: The original intention was to allow eg. local code systems to co-exist\n+\t\t * in case of a short name collision, if they come from different sources (and\n+\t\t * so their OID would be different), however:\n+\t\t *\n+\t\t * - The current implementation does not treat code systems with the same OID \n+\t\t *   as equal unless their short name also matches; \n+\t\t * \n+\t\t * - We can't change the implementation that returns true if _either_ the \n+\t\t *   short name _or_ the OID matches, as it goes against the transitive requirement \n+\t\t *   of the equivalence relation described in the javadoc of equals():\n+\t\t * \n+\t\t *   code system | cs1       cs2       cs3\n+\t\t *   short name  | ABC       CDE       CDE\n+\t\t *   OID         | 1.2.3.4   1.2.3.4   5.6.7.8\n+\t\t * \n+\t\t *   In this alternative world, cs1 = cs2 and cs2 = cs3, and so cs1 should be \n+\t\t *   equal to cs3, but it isn't!\n+\t\t * \n+\t\t * - While some requests take care to look up both short name and OID for a code system,\n+\t\t *   other parts (client and UI) practically treat short names as unique\n+\t\t * \n+\t\t * Consider removing \"oid\" from the equality check.", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3ODE3OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417978178", "bodyText": "Code system creation will fail if either of the identifiers is non-unique: \n  \n    \n      snow-owl/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemCreateRequest.java\n    \n    \n        Lines 158 to 165\n      in\n      3708060\n    \n    \n    \n    \n\n        \n          \n           private Optional<CodeSystemVersionEntry> checkCodeSystem(final TransactionContext context) { \n        \n\n        \n          \n           \tif (codeSystemExists(oid, context)) { \n        \n\n        \n          \n           \t\tthrow new AlreadyExistsException(\"Code system\", oid); \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n           \t \n        \n\n        \n          \n           \tif (codeSystemExists(shortName, context)) { \n        \n\n        \n          \n           \t\tthrow new AlreadyExistsException(\"Code system\", shortName); \n        \n\n        \n          \n           \t} \n        \n    \n  \n\n\nThe search request looks for the given identifier(s) in an either-or fashion, however: \n  \n    \n      snow-owl/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemSearchRequest.java\n    \n    \n        Lines 46 to 49\n      in\n      3708060\n    \n    \n    \n    \n\n        \n          \n           addIdFilter(queryBuilder, ids -> Expressions.builder() \n        \n\n        \n          \n           \t\t.should(CodeSystemEntry.Expressions.shortNames(ids)) \n        \n\n        \n          \n           \t\t.should(CodeSystemEntry.Expressions.oids(ids)) \n        \n\n        \n          \n           \t\t.build());", "author": "apeteri", "createdAt": "2020-04-30T12:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "2af67a14d9e6fc719159289208cc57416ef35f0b", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemEntry.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemEntry.java\nindex 4b9e83c761..3b0fe7df93 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemEntry.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemEntry.java\n\n@@ -242,7 +242,7 @@ public final class CodeSystemEntry implements Serializable {\n \t\tthis.citation = Strings.nullToEmpty(citation);\n \t\tthis.iconPath = Strings.nullToEmpty(iconPath);\n \t\tthis.terminologyComponentId = terminologyComponentId;\n-\t\tthis.repositoryUuid = repositoryUuid;\n+\t\tthis.repositoryId = repositoryId;\n \t\tthis.branchPath = branchPath;\n \t\tthis.extensionOf = extensionOf;\n \t\tthis.locales = locales;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTk1NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417139954", "bodyText": "Since we are using this now in the Java API, this class should implement Serializable.", "author": "cmark", "createdAt": "2020-04-29T08:11:56Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java", "diffHunk": "@@ -15,19 +15,41 @@\n  */\n package com.b2international.snowowl.core.codesystem;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+\n import org.hibernate.validator.constraints.NotEmpty;\n \n+import com.b2international.commons.http.ExtendedLocale;\n+import com.b2international.snowowl.core.branch.Branch;\n+import com.b2international.snowowl.core.terminology.TerminologyRegistry;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import com.google.common.collect.ImmutableSortedSet;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n \n /**\n- * Captures metadata about a code system, which holds a set of real-world concepts of medical significance (optionally\n- * along with different components forming a description of said concepts) and their corresponding unique code.\n+ * Captures metadata about a code system, which holds a set of concepts of\n+ * medical significance (optionally with other, supporting components that\n+ * together make up the definition of concepts) and their corresponding unique\n+ * code.\n  */\n @JsonDeserialize(builder=CodeSystem.Builder.class)\n public class CodeSystem {", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1679648860ee874805765e945d8b729cc5cd17", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\nindex 18b7fb9727..3920011e8a 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystem.java\n\n@@ -15,6 +15,7 @@\n  */\n package com.b2international.snowowl.core.codesystem;\n \n+import java.io.Serializable;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MjA1NQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417142055", "bodyText": "Just a sidenote: we were thinking about removing the repository initializer functionality completely to support full customization of the default Code Systems in a given tooling (for example to create SNOMEDCT-UK-EDITION instead of SNOMEDCT on the MAIN branch).", "author": "cmark", "createdAt": "2020-04-29T08:16:16Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryInitializer.java", "diffHunk": "@@ -43,7 +43,7 @@\n \t */\n \t@Override\n \tpublic final Void execute(RepositoryContext context) {\n-\t\tCodeSystemEntry primaryCodeSystem = createPrimaryCodeSystem();\n+\t\tCodeSystem primaryCodeSystem = createPrimaryCodeSystem();", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MjcwNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/546#discussion_r417142706", "bodyText": "Revert this change, please.", "author": "cmark", "createdAt": "2020-04-29T08:17:30Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java", "diffHunk": "@@ -27,8 +27,18 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.time.Instant;\n-import java.util.*;", "originalCommit": "f9a5909d106259f6930c69b007540222368a1ac3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e388b9f372c043af27983818d3f415e4b79cfcc7", "chunk": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java\nindex a46e8927ed..adefe6c3a0 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/rf2/SnomedRf2ExportRequest.java\n\n@@ -27,18 +27,8 @@ import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.time.Instant;\n-import java.util.Calendar;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.util.*;\n import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.TimeZone;\n-import java.util.TreeSet;\n-import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n"}}, {"oid": "72e70a59d694d86fb161b6227f43b0e6cc93448d", "url": "https://github.com/b2ihealthcare/snow-owl/commit/72e70a59d694d86fb161b6227f43b0e6cc93448d", "message": "SO-3998: Remove ResponseBody annotation from REST controller methods", "committedDate": "2020-04-30T09:39:42Z", "type": "commit"}, {"oid": "994bf56de1d23f88f0cca85c71e221339d7cbfc4", "url": "https://github.com/b2ihealthcare/snow-owl/commit/994bf56de1d23f88f0cca85c71e221339d7cbfc4", "message": "SO-3998: Change repositoryUuid to repositoryId on CodeSystem", "committedDate": "2020-04-30T10:36:14Z", "type": "commit"}, {"oid": "2af67a14d9e6fc719159289208cc57416ef35f0b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2af67a14d9e6fc719159289208cc57416ef35f0b", "message": "SO-3998: Change repositoryUuid to repositoryId on CodeSystemEntry...\n\n...and CodeSystemCreateRequest", "committedDate": "2020-04-30T12:11:47Z", "type": "commit"}, {"oid": "80fe435c034f7d52b54cd321f60c8247ff7e45d0", "url": "https://github.com/b2ihealthcare/snow-owl/commit/80fe435c034f7d52b54cd321f60c8247ff7e45d0", "message": "SO-3998: Add precondition check to CodeSystemRestService#searchByGet", "committedDate": "2020-04-30T12:18:23Z", "type": "commit"}, {"oid": "d2cd5a65194f8536b0c83d692627a6f0cddae7f2", "url": "https://github.com/b2ihealthcare/snow-owl/commit/d2cd5a65194f8536b0c83d692627a6f0cddae7f2", "message": "SO-3998: Add missing since tag to CodeSystemConverter", "committedDate": "2020-04-30T12:22:05Z", "type": "commit"}, {"oid": "8f1679648860ee874805765e945d8b729cc5cd17", "url": "https://github.com/b2ihealthcare/snow-owl/commit/8f1679648860ee874805765e945d8b729cc5cd17", "message": "SO-3998: Implement Serializable in CodeSystem", "committedDate": "2020-04-30T12:27:58Z", "type": "commit"}, {"oid": "e388b9f372c043af27983818d3f415e4b79cfcc7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e388b9f372c043af27983818d3f415e4b79cfcc7", "message": "SO-3998: Revert import statement changes in SnomedRf2ExportRequest", "committedDate": "2020-04-30T12:30:38Z", "type": "commit"}, {"oid": "37080602ee0c753cf419a761e78ff54af90fd77e", "url": "https://github.com/b2ihealthcare/snow-owl/commit/37080602ee0c753cf419a761e78ff54af90fd77e", "message": "SO-3998: Update request body parameters in core.rest.tests", "committedDate": "2020-04-30T12:32:59Z", "type": "commit"}, {"oid": "c8f69c1c80bb1fb84f682a735611769ed97b4634", "url": "https://github.com/b2ihealthcare/snow-owl/commit/c8f69c1c80bb1fb84f682a735611769ed97b4634", "message": "SO-3998: Update request body parameters in snomed.core.rest.tests", "committedDate": "2020-04-30T13:02:06Z", "type": "commit"}]}