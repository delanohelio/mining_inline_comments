{"pr_number": 532, "pr_title": "SO-4007 Restore effectiveTime during RF2 Delta imports", "pr_createdAt": "2020-04-14T06:27:01Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/532", "timeline": [{"oid": "2443757fe934a66a4563c1edfc4aaa705a769d95", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2443757fe934a66a4563c1edfc4aaa705a769d95", "message": "SO-4007: support additional predicate when checking for running jobs", "committedDate": "2020-04-14T06:11:54Z", "type": "commit"}, {"oid": "cdfe761650917ec7003368b7fbad2061accff742", "url": "https://github.com/b2ihealthcare/snow-owl/commit/cdfe761650917ec7003368b7fbad2061accff742", "message": "SO-4007: rename RF2ReleaseType field `type` due to collision with...\n\n...`Request.getType()` method.", "committedDate": "2020-04-14T06:12:42Z", "type": "commit"}, {"oid": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/8cc0200df0c97f6c9ce859b1a9d28f4028f080c7", "message": "SO-4007 #resolve\n\nRun effectiveTime restore process during RF2 Delta imports.", "committedDate": "2020-04-14T06:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjM3Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r407906373", "bodyText": "The predicate is not applied to the current job.", "author": "apeteri", "createdAt": "2020-04-14T06:56:15Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +83,33 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param predicate - the predicate filter to further customize the search process\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<RemoteJobEntry> predicate) {\n+\t\tcheckNotNull(predicate, \"Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n \t\t\treturn true;", "originalCommit": "8cc0200df0c97f6c9ce859b1a9d28f4028f080c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNDE5Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r407924192", "bodyText": "Right, thanks! \ud83d\ude05", "author": "cmark", "createdAt": "2020-04-14T07:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwNjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\nindex 626c208616..3d13f16030 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\n@@ -87,18 +89,18 @@ public interface ServiceProvider {\n \t}\n \t\n \t/**\n-\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given predicate, <code>false</code> otherwise.\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n \t * \n \t * @param jobKey - the logical key assigned to the job\n-\t * @param predicate - the predicate filter to further customize the search process\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n \t * @return\n \t */\n-\tdefault boolean isJobRunning(String jobKey, Predicate<RemoteJobEntry> predicate) {\n-\t\tcheckNotNull(predicate, \"Predicate should not be null\");\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n \t\t}\n \n \t\t// if not inside a job context or running in non-job context check the jobs index\n"}}, {"oid": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "message": "SO-4007: use parametersPredicate instead of jobPredicate in...\n\n...ServiceProvider.isJobRunning() method", "committedDate": "2020-04-14T10:27:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDU2Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param parametersPredice - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n          \n          \n            \n            \t * @param parametersPredicate - the predicate to filter the job by its parameters\n          \n          \n            \n            \t * @return\n          \n          \n            \n            \t */\n          \n          \n            \n            \tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n          \n          \n            \n            \t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");", "author": "apeteri", "createdAt": "2020-04-14T11:29:35Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");", "originalCommit": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38b2f5a706b8740d29848c9bfc639d52672d5da", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\nindex 3d13f16030..1a3d31e2d9 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\n@@ -92,11 +92,11 @@ public interface ServiceProvider {\n \t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n \t * \n \t * @param jobKey - the logical key assigned to the job\n-\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @param parametersPredicate - the predicate to filter the job by its parameters\n \t * @return\n \t */\n-\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n-\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n+\t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDcxNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064716", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n          \n          \n            \n            \t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredicate.test(job.get().getParameters(service(ObjectMapper.class)));", "author": "apeteri", "createdAt": "2020-04-14T11:29:50Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));", "originalCommit": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38b2f5a706b8740d29848c9bfc639d52672d5da", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\nindex 3d13f16030..1a3d31e2d9 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\n@@ -92,11 +92,11 @@ public interface ServiceProvider {\n \t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n \t * \n \t * @param jobKey - the logical key assigned to the job\n-\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @param parametersPredicate - the predicate to filter the job by its parameters\n \t * @return\n \t */\n-\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n-\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n+\t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDgzNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/532#discussion_r408064836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.filter(parametersPredice)\n          \n          \n            \n            \t\t\t\t.filter(parametersPredicate)", "author": "apeteri", "createdAt": "2020-04-14T11:30:04Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java", "diffHunk": "@@ -80,14 +85,34 @@\n \t * @return\n \t */\n \tdefault boolean isJobRunning(String jobKey) {\n+\t\treturn isJobRunning(jobKey, (job) -> true); \n+\t}\n+\t\n+\t/**\n+\t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n+\t * \n+\t * @param jobKey - the logical key assigned to the job\n+\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @return\n+\t */\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n+\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n-\t\tif (job.isPresent() && Objects.equals(jobKey, job.get().getKey())) {\n-\t\t\treturn true;\n+\t\tif (job.isPresent()) {\n+\t\t\treturn Objects.equals(jobKey, job.get().getKey()) && parametersPredice.test(job.get().getParameters(service(ObjectMapper.class)));\n \t\t}\n \n \t\t// if not inside a job context or running in non-job context check the jobs index\n-\t\treturn JobRequests.prepareSearch().one().filterByKey(jobKey).build().execute(this).first().map(RemoteJobEntry::isRunning).orElse(false);\n+\t\treturn JobRequests.prepareSearch().one()\n+\t\t\t\t.filterByKey(jobKey)\n+\t\t\t\t.build()\n+\t\t\t\t.execute(this)\n+\t\t\t\t.first()\n+\t\t\t\t.filter(RemoteJobEntry::isRunning)\n+\t\t\t\t.map(j -> j.getParameters(service(ObjectMapper.class)))\n+\t\t\t\t.filter(parametersPredice)", "originalCommit": "e6c3bcbdad7e50e43b04acc68c081a0c6be8d869", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38b2f5a706b8740d29848c9bfc639d52672d5da", "chunk": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\nindex 3d13f16030..1a3d31e2d9 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\n@@ -92,11 +92,11 @@ public interface ServiceProvider {\n \t * Returns <code>true</code> if any job present with the given jobKey in {@link RemoteJobEntry#isRunning()} state and matches the given parameters predicate, <code>false</code> otherwise.\n \t * \n \t * @param jobKey - the logical key assigned to the job\n-\t * @param parametersPredice - the predicate to filter the job by its parameters\n+\t * @param parametersPredicate - the predicate to filter the job by its parameters\n \t * @return\n \t */\n-\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredice) {\n-\t\tcheckNotNull(parametersPredice, \"Parameters Predicate should not be null\");\n+\tdefault boolean isJobRunning(String jobKey, Predicate<Map<String, Object>> parametersPredicate) {\n+\t\tcheckNotNull(parametersPredicate, \"Parameters predicate should not be null\");\n \t\t// check first if this context is running inside a job with the given jobKey\n \t\tOptional<RemoteJob> job = optionalService(RemoteJob.class);\n \t\tif (job.isPresent()) {\n"}}, {"oid": "f38b2f5a706b8740d29848c9bfc639d52672d5da", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f38b2f5a706b8740d29848c9bfc639d52672d5da", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-14T12:32:13Z", "type": "commit"}, {"oid": "bdced8215af673e46c67fbf5043c5574863009d2", "url": "https://github.com/b2ihealthcare/snow-owl/commit/bdced8215af673e46c67fbf5043c5574863009d2", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-14T12:32:19Z", "type": "commit"}, {"oid": "20965b239a010ccafc5e94484e80be5f915e4892", "url": "https://github.com/b2ihealthcare/snow-owl/commit/20965b239a010ccafc5e94484e80be5f915e4892", "message": "Update core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/ServiceProvider.java\n\nCo-Authored-By: Andr\u00e1s P\u00e9teri <apeteri@b2international.com>", "committedDate": "2020-04-14T12:32:25Z", "type": "commit"}]}