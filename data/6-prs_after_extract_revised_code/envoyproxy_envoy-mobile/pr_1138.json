{"pr_number": 1138, "pr_title": "java: create native resource management system", "pr_createdAt": "2020-10-20T10:58:57Z", "pr_url": "https://github.com/envoyproxy/envoy-mobile/pull/1138", "timeline": [{"oid": "a9717a13e2c71eb556f94c26f0333bcf7d8ac941", "url": "https://github.com/envoyproxy/envoy-mobile/commit/a9717a13e2c71eb556f94c26f0333bcf7d8ac941", "message": "java: create native resource management system\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T10:56:24Z", "type": "commit"}, {"oid": "9c6ce88fab35852ade638b24060b818953f97c6f", "url": "https://github.com/envoyproxy/envoy-mobile/commit/9c6ce88fab35852ade638b24060b818953f97c6f", "message": "fix typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T12:09:28Z", "type": "commit"}, {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf", "url": "https://github.com/envoyproxy/envoy-mobile/commit/54a1530db533470a24db502e112d2756d9cbeaaf", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T18:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1ODA5Mg==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508758092", "bodyText": "Do we need to add these to the proguard rules?", "author": "buildbreaker", "createdAt": "2020-10-20T18:43:18Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyHTTPFilterCallbacksImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+final class EnvoyHTTPFilterCallbacksImpl\n+    implements EnvoyHTTPFilterCallbacks, EnvoyNativeResourceWrapper {\n+\n+  private static final EnvoyNativeResourceReleaser releaseCallbacks = (long handle) -> {\n+    callReleaseCallbacks(handle);\n+  };\n+\n+  private final long callbackHandle;\n+\n+  /**\n+   * @param callbackHandle, native handle for callback execution. This must be eventually passed to\n+                            `callReleaseCallbacks` to release underlying memory.\n+   */\n+  EnvoyHTTPFilterCallbacksImpl(long callbackHandle) { this.callbackHandle = callbackHandle; }\n+\n+  static EnvoyHTTPFilterCallbacksImpl create(long callbackHandle) {\n+    final EnvoyHTTPFilterCallbacksImpl object = new EnvoyHTTPFilterCallbacksImpl(callbackHandle);\n+    EnvoyNativeResourceRegistry.globalRegister(object, callbackHandle, releaseCallbacks);\n+    return object;\n+  }\n+\n+  public void resumeIteration() { callResumeIteration(callbackHandle, this); }\n+\n+  /**\n+   * @param callbackHandle, native handle for callback execution.\n+   * @param object, pass this object so that the JNI retains it, preventing it from potentially\n+   *                being concurrently garbage-collected while the native call is executing.\n+   */\n+  private native void callResumeIteration(long callbackHandle, EnvoyHTTPFilterCallbacksImpl object);\n+\n+  private static native void callReleaseCallbacks(long callbackHandle);", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwODE1Ng==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508808156", "bodyText": "Yes, good callout. Strictly-speaking not required in this PR, but might as well add them now to avoid missing it later.", "author": "goaway", "createdAt": "2020-10-20T20:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1ODA5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1OTc0NA==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508759744", "bodyText": "I think this reads more easily:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ReferenceQueue\n          \n          \n            \n                  refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private Collection refMaintainer; // Maintains references in the object graph while we wait for\n          \n          \n            \n                                                // them to be enqueued.\n          \n          \n            \n              // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private ReferenceQueue refQueue; \n          \n          \n            \n              // Maintains references in the object graph while we wait for\n          \n          \n            \n              // them to be enqueued.\n          \n          \n            \n              private Collection refMaintainer;", "author": "buildbreaker", "createdAt": "2020-10-20T18:44:55Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeMemoryRegistry.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Collection refMaintainer; // Maintains references in the object graph while we wait for\n+                                    // them to be enqueued.", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788165", "bodyText": "Could we add a blurb on the responsibilities of this wrapper?", "author": "buildbreaker", "createdAt": "2020-10-20T19:35:27Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java", "diffHunk": "@@ -0,0 +1,3 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+interface EnvoyNativeResourceWrapper {}", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85aace3482ea74d7247816f1448c9ad68caf6926", "chunk": "diff --git a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java\nindex eb97d0c2..8f86f3f4 100644\n--- a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java\n+++ b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java\n\n@@ -1,3 +1,8 @@\n package io.envoyproxy.envoymobile.engine;\n \n+/**\n+ * This interface exists solely to scope the types accepted by EnvoyNativeResourceRegistry.\n+ *\n+ * Implemented by objects that require a native resource to be tied to their lifecycle.\n+ */\n interface EnvoyNativeResourceWrapper {}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODQxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788413", "bodyText": "docs for params", "author": "buildbreaker", "createdAt": "2020-10-20T19:35:57Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+\n+  private class RefQueueThread extends Thread {\n+    public void run() {\n+      EnvoyPhantomRef ref;\n+      while (true) {\n+        try {\n+          ref = (EnvoyPhantomRef)refQueue.remove();\n+        } catch (InterruptedException e) {\n+          continue;\n+        }\n+\n+        ref.releaseResource();\n+        refMaintainer.remove(ref);\n+      }\n+    }\n+  }\n+\n+  private class EnvoyPhantomRef extends PhantomReference<EnvoyNativeResourceWrapper> {\n+    private final EnvoyNativeResourceReleaser releaser;\n+    private final long nativeHandle;\n+\n+    EnvoyPhantomRef(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                    EnvoyNativeResourceReleaser releaser) {\n+      super(owner, refQueue);\n+      this.nativeHandle = nativeHandle;\n+      this.releaser = releaser;\n+      refQueueThread = new RefQueueThread();\n+      refMaintainer = new ConcurrentHashMap().newKeySet();\n+      refQueueThread.start();\n+    }\n+\n+    void releaseResource() { releaser.release(nativeHandle); }\n+  }\n+\n+  /**\n+   * Register an EnvoyNativeResourceWrapper to schedule cleanup of its native resources when the\n+   * Java object is flagged for collection by the garbage collector.\n+   */\n+  public void register(EnvoyNativeResourceWrapper owner, long nativeHandle,", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85aace3482ea74d7247816f1448c9ad68caf6926", "chunk": "diff --git a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\nindex 27248dd0..af4307c1 100644\n--- a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n+++ b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n\n@@ -15,12 +15,12 @@ import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n public enum EnvoyNativeResourceRegistry {\n   SINGLETON;\n \n-  private ReferenceQueue\n-      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n-  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n-                             // be enqueued.\n-  private RefQueueThread\n-      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+  // References are automatically enqueued when the gc flags them as unreachable.\n+  private ReferenceQueue refQueue;\n+  // Maintains references in the object graph while we wait for them to be enqueued.\n+  private Set refMaintainer;\n+  // Blocks on the reference queue and calls the releaser of queued references.\n+  private RefQueueThread refQueueThread;\n \n   private class RefQueueThread extends Thread {\n     public void run() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODQ4OQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788489", "bodyText": "Docs for params", "author": "buildbreaker", "createdAt": "2020-10-20T19:36:05Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+\n+  private class RefQueueThread extends Thread {\n+    public void run() {\n+      EnvoyPhantomRef ref;\n+      while (true) {\n+        try {\n+          ref = (EnvoyPhantomRef)refQueue.remove();\n+        } catch (InterruptedException e) {\n+          continue;\n+        }\n+\n+        ref.releaseResource();\n+        refMaintainer.remove(ref);\n+      }\n+    }\n+  }\n+\n+  private class EnvoyPhantomRef extends PhantomReference<EnvoyNativeResourceWrapper> {\n+    private final EnvoyNativeResourceReleaser releaser;\n+    private final long nativeHandle;\n+\n+    EnvoyPhantomRef(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                    EnvoyNativeResourceReleaser releaser) {\n+      super(owner, refQueue);\n+      this.nativeHandle = nativeHandle;\n+      this.releaser = releaser;\n+      refQueueThread = new RefQueueThread();\n+      refMaintainer = new ConcurrentHashMap().newKeySet();\n+      refQueueThread.start();\n+    }\n+\n+    void releaseResource() { releaser.release(nativeHandle); }\n+  }\n+\n+  /**\n+   * Register an EnvoyNativeResourceWrapper to schedule cleanup of its native resources when the\n+   * Java object is flagged for collection by the garbage collector.\n+   */\n+  public void register(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                       EnvoyNativeResourceReleaser releaser) {\n+    EnvoyPhantomRef ref = new EnvoyPhantomRef(owner, nativeHandle, releaser);\n+    refMaintainer.add(ref);\n+  }\n+\n+  public static void globalRegister(EnvoyNativeResourceWrapper owner, long nativeHandle,", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "85aace3482ea74d7247816f1448c9ad68caf6926", "chunk": "diff --git a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\nindex 27248dd0..af4307c1 100644\n--- a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n+++ b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n\n@@ -15,12 +15,12 @@ import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n public enum EnvoyNativeResourceRegistry {\n   SINGLETON;\n \n-  private ReferenceQueue\n-      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n-  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n-                             // be enqueued.\n-  private RefQueueThread\n-      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+  // References are automatically enqueued when the gc flags them as unreachable.\n+  private ReferenceQueue refQueue;\n+  // Maintains references in the object graph while we wait for them to be enqueued.\n+  private Set refMaintainer;\n+  // Blocks on the reference queue and calls the releaser of queued references.\n+  private RefQueueThread refQueueThread;\n \n   private class RefQueueThread extends Thread {\n     public void run() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4OTY5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508789697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ReferenceQueue\n          \n          \n            \n                  refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n          \n          \n            \n                                         // be enqueued.\n          \n          \n            \n              private RefQueueThread\n          \n          \n            \n                  refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n          \n          \n            \n              // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private ReferenceQueue refQueue;\n          \n          \n            \n            \n          \n          \n            \n              // Maintains references in the object graph while we wait for them to\n          \n          \n            \n              // be enqueued.\n          \n          \n            \n              private Set refMaintainer;\n          \n          \n            \n            \n          \n          \n            \n              // Blocks on the reference queue and calls the releaser of queued references.\n          \n          \n            \n              private RefQueueThread refQueueThread;", "author": "buildbreaker", "createdAt": "2020-10-20T19:38:05Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNDg5Nw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508804897", "bodyText": "The formatter did this; I didn't even notice. :p", "author": "goaway", "createdAt": "2020-10-20T20:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4OTY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "85aace3482ea74d7247816f1448c9ad68caf6926", "chunk": "diff --git a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\nindex 27248dd0..af4307c1 100644\n--- a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n+++ b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n\n@@ -15,12 +15,12 @@ import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n public enum EnvoyNativeResourceRegistry {\n   SINGLETON;\n \n-  private ReferenceQueue\n-      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n-  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n-                             // be enqueued.\n-  private RefQueueThread\n-      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+  // References are automatically enqueued when the gc flags them as unreachable.\n+  private ReferenceQueue refQueue;\n+  // Maintains references in the object graph while we wait for them to be enqueued.\n+  private Set refMaintainer;\n+  // Blocks on the reference queue and calls the releaser of queued references.\n+  private RefQueueThread refQueueThread;\n \n   private class RefQueueThread extends Thread {\n     public void run() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDAyNw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508790027", "bodyText": "Is there a reason for this to be an enum?", "author": "buildbreaker", "createdAt": "2020-10-20T19:38:45Z", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {", "originalCommit": "54a1530db533470a24db502e112d2756d9cbeaaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNjYxMw==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508806613", "bodyText": "Just a trivial way to make this a singleton for now.", "author": "goaway", "createdAt": "2020-10-20T20:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5NDIyOQ==", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508894229", "bodyText": "Alright", "author": "buildbreaker", "createdAt": "2020-10-20T23:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "85aace3482ea74d7247816f1448c9ad68caf6926", "chunk": "diff --git a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\nindex 27248dd0..af4307c1 100644\n--- a/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n+++ b/library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java\n\n@@ -15,12 +15,12 @@ import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n public enum EnvoyNativeResourceRegistry {\n   SINGLETON;\n \n-  private ReferenceQueue\n-      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n-  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n-                             // be enqueued.\n-  private RefQueueThread\n-      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+  // References are automatically enqueued when the gc flags them as unreachable.\n+  private ReferenceQueue refQueue;\n+  // Maintains references in the object graph while we wait for them to be enqueued.\n+  private Set refMaintainer;\n+  // Blocks on the reference queue and calls the releaser of queued references.\n+  private RefQueueThread refQueueThread;\n \n   private class RefQueueThread extends Thread {\n     public void run() {\n"}}, {"oid": "85aace3482ea74d7247816f1448c9ad68caf6926", "url": "https://github.com/envoyproxy/envoy-mobile/commit/85aace3482ea74d7247816f1448c9ad68caf6926", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T20:14:04Z", "type": "commit"}, {"oid": "cce3471164bdaae2b49d5c6906e58d34906768aa", "url": "https://github.com/envoyproxy/envoy-mobile/commit/cce3471164bdaae2b49d5c6906e58d34906768aa", "message": "typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>", "committedDate": "2020-10-20T20:17:04Z", "type": "commit"}]}