{"pr_number": 465, "pr_title": "Add PassTicket implementation (WIP)", "pr_createdAt": "2020-01-06T15:03:21Z", "pr_url": "https://github.com/zowe/api-layer/pull/465", "timeline": [{"oid": "97a85950d2b98aa19d6fccc3c822e45b899da700", "url": "https://github.com/zowe/api-layer/commit/97a85950d2b98aa19d6fccc3c822e45b899da700", "message": "Programs to research PassTickets\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-10T08:08:13Z", "type": "commit"}, {"oid": "361acd56eeee1c95ebdea8d3aed24187fdc48f80", "url": "https://github.com/zowe/api-layer/commit/361acd56eeee1c95ebdea8d3aed24187fdc48f80", "message": "Download test artificats\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T09:27:46Z", "type": "commit"}, {"oid": "81edbb8c5509f3b239015a163e8884a5fcaa6991", "url": "https://github.com/zowe/api-layer/commit/81edbb8c5509f3b239015a163e8884a5fcaa6991", "message": "TopSecret job\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T09:28:11Z", "type": "commit"}, {"oid": "a7fe02da6daf3c4f334894772be85d803aa1302d", "url": "https://github.com/zowe/api-layer/commit/a7fe02da6daf3c4f334894772be85d803aa1302d", "message": "Draft documentation\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T09:30:14Z", "type": "commit"}, {"oid": "877810043ea698b9e42cdee42f73fd9f45b824af", "url": "https://github.com/zowe/api-layer/commit/877810043ea698b9e42cdee42f73fd9f45b824af", "message": "Updated PassTicket documentation\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T14:29:43Z", "type": "commit"}, {"oid": "526e6dafe54af490d224465f65b90351fe3189fe", "url": "https://github.com/zowe/api-layer/commit/526e6dafe54af490d224465f65b90351fe3189fe", "message": "US634092 - Support new authentication metadata in the static API definitions\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T14:31:43Z", "type": "commit"}, {"oid": "9d42d819884d2e46cfb01705bd5bedddd14b0795", "url": "https://github.com/zowe/api-layer/commit/9d42d819884d2e46cfb01705bd5bedddd14b0795", "message": "Test for invalid authentication scheme values\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-11T15:07:21Z", "type": "commit"}, {"oid": "c711de256308a3739a9056478d5d0b28bd3b62ec", "url": "https://github.com/zowe/api-layer/commit/c711de256308a3739a9056478d5d0b28bd3b62ec", "message": "Sample static service with PassTickets\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2019-12-13T12:28:33Z", "type": "commit"}, {"oid": "4ea25933a3718a24d5d0cc29ea4ed6e84a28ead5", "url": "https://github.com/zowe/api-layer/commit/4ea25933a3718a24d5d0cc29ea4ed6e84a28ead5", "message": "Dynamic proxy and using IRRPassTicket service, static additional data and update on service register, refactor of creating static services", "committedDate": "2019-12-17T09:50:39Z", "type": "commit"}, {"oid": "195a1e9e95d482fc714969591fa99981d2cff276", "url": "https://github.com/zowe/api-layer/commit/195a1e9e95d482fc714969591fa99981d2cff276", "message": "Concept of authentication commands (ByPass, Zosmf and Passticket implemented, contains also ZoweJwt draft), support logout method,", "committedDate": "2020-01-02T12:45:48Z", "type": "commit"}, {"oid": "d7d8aae910497200799725b599528611f6a8a077", "url": "https://github.com/zowe/api-layer/commit/d7d8aae910497200799725b599528611f6a8a077", "message": "fix unused import (checkstyle)", "committedDate": "2020-01-02T13:16:47Z", "type": "commit"}, {"oid": "547c8e3e5f19dd23abe61ea223eacb09b066bcfe", "url": "https://github.com/zowe/api-layer/commit/547c8e3e5f19dd23abe61ea223eacb09b066bcfe", "message": "fix gateway startup", "committedDate": "2020-01-02T13:33:06Z", "type": "commit"}, {"oid": "75015861c93c0c28ae1335de4d0eae99eb9f768b", "url": "https://github.com/zowe/api-layer/commit/75015861c93c0c28ae1335de4d0eae99eb9f768b", "message": "fix passticket proxy (make as public class to allow call methods)", "committedDate": "2020-01-02T15:44:05Z", "type": "commit"}, {"oid": "f51af44145ab9004825192bda8c861474aacbb32", "url": "https://github.com/zowe/api-layer/commit/f51af44145ab9004825192bda8c861474aacbb32", "message": "notification of gateways about services from discovery service that they were changed to evict caches in there", "committedDate": "2020-01-06T08:51:00Z", "type": "commit"}, {"oid": "305831a3a5a96a7d3c54f97346c2523e9f95c3b0", "url": "https://github.com/zowe/api-layer/commit/305831a3a5a96a7d3c54f97346c2523e9f95c3b0", "message": "Add missing setup step for new users\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-06T11:30:00Z", "type": "commit"}, {"oid": "273e1c8d68742651dfab7ef28b3c174db7ba9414", "url": "https://github.com/zowe/api-layer/commit/273e1c8d68742651dfab7ef28b3c174db7ba9414", "message": "Add /ticket endpoint to generate PassTickets", "committedDate": "2020-01-06T13:03:27Z", "type": "commit"}, {"oid": "87c20ba884215967e18f107926f6636832dca35f", "url": "https://github.com/zowe/api-layer/commit/87c20ba884215967e18f107926f6636832dca35f", "message": "PassTicket integration test\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-06T13:14:03Z", "type": "commit"}, {"oid": "a4d015739fe675eca95ded8faa6ccf4578ebcbbf", "url": "https://github.com/zowe/api-layer/commit/a4d015739fe675eca95ded8faa6ccf4578ebcbbf", "message": "wip! Making the integration test work\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-06T14:57:18Z", "type": "commit"}, {"oid": "f2396b426f1c8a5080b71ee21834e1c51ba100b1", "url": "https://github.com/zowe/api-layer/commit/f2396b426f1c8a5080b71ee21834e1c51ba100b1", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-06T15:04:01Z", "type": "commit"}, {"oid": "7bc174d4d89bb928f217377c3e13e87f8f59df2b", "url": "https://github.com/zowe/api-layer/commit/7bc174d4d89bb928f217377c3e13e87f8f59df2b", "message": "Import the right HttpServletRequest class\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T08:21:20Z", "type": "commit"}, {"oid": "3cc69ed0f0a086637e46249382d33a4438646ee7", "url": "https://github.com/zowe/api-layer/commit/3cc69ed0f0a086637e46249382d33a4438646ee7", "message": "Disable default Spring Security Configuration for discoverable-client\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T09:59:13Z", "type": "commit"}, {"oid": "58a190956ce222e0970b96cdfe3b33221a514c2f", "url": "https://github.com/zowe/api-layer/commit/58a190956ce222e0970b96cdfe3b33221a514c2f", "message": "Remove extra passTicketService bean creation\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T09:59:54Z", "type": "commit"}, {"oid": "5948bb7a0b09e6e2dd1d3c9a1f86380b8ee55788", "url": "https://github.com/zowe/api-layer/commit/5948bb7a0b09e6e2dd1d3c9a1f86380b8ee55788", "message": "wip - Ignore broken tests\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T10:00:56Z", "type": "commit"}, {"oid": "ccd203dcfdd4e55df05f0757dcad579558c642e5", "url": "https://github.com/zowe/api-layer/commit/ccd203dcfdd4e55df05f0757dcad579558c642e5", "message": "Refactor PassTicket tests\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T10:01:08Z", "type": "commit"}, {"oid": "bd04e95fbae4d2790ebb86053f2581aae683a059", "url": "https://github.com/zowe/api-layer/commit/bd04e95fbae4d2790ebb86053f2581aae683a059", "message": "Removing documentation that has been migrated to docs-site\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T10:51:43Z", "type": "commit"}, {"oid": "bc640436bbc5fda3140e7d5becab63c34df83e78", "url": "https://github.com/zowe/api-layer/commit/bc640436bbc5fda3140e7d5becab63c34df83e78", "message": "mapping exception on Proxy (+ using in PassTickerService)\n\nSigned-off-by: Pavel Jare\u0161 <pavel.jares@broadcom.com>", "committedDate": "2020-01-07T11:23:35Z", "type": "commit"}, {"oid": "78c07ea999714e596ce0fcc88cfbe291764599a4", "url": "https://github.com/zowe/api-layer/commit/78c07ea999714e596ce0fcc88cfbe291764599a4", "message": "Merge remote-tracking branch 'origin/protectors/passticket' into protectors/passticket\n\n# Conflicts:\n#\tgateway-service/src/main/java/com/ca/mfaas/gateway/filters/pre/ServiceAuthenticationFilter.java\n#\tgateway-service/src/main/java/com/ca/mfaas/gateway/security/service/ServiceAuthenticationServiceImpl.java\n#\tgateway-service/src/test/java/com/ca/mfaas/gateway/filters/pre/ServiceAuthenticationFilterTest.java\n#\tgateway-service/src/test/java/com/ca/mfaas/gateway/security/service/ServiceAuthenticationServiceImplTest.java", "committedDate": "2020-01-07T11:55:28Z", "type": "commit"}, {"oid": "e08b82e686a8cabcfa9d548aee3b4512e4625028", "url": "https://github.com/zowe/api-layer/commit/e08b82e686a8cabcfa9d548aee3b4512e4625028", "message": "fix build and test on security (without fixes in discoverable client)\n\nSigned-off-by: Pavel Jare\u0161 <pavel.jares@broadcom.com>", "committedDate": "2020-01-07T13:16:39Z", "type": "commit"}, {"oid": "87af4be71d1768027a23284e43eb11d390d9c834", "url": "https://github.com/zowe/api-layer/commit/87af4be71d1768027a23284e43eb11d390d9c834", "message": "Fix broken PassTicketTestController initialization\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T13:53:33Z", "type": "commit"}, {"oid": "aabe4aaacd24d72bc8a8dd56d1293043a62ded12", "url": "https://github.com/zowe/api-layer/commit/aabe4aaacd24d72bc8a8dd56d1293043a62ded12", "message": "Fix broken integration tests\n\nSigned-off-by: JirkaAichler <jiri.aichler@broadcom.com>", "committedDate": "2020-01-07T13:56:05Z", "type": "commit"}, {"oid": "0a1efe245df13c98edf1d6b0207042137cda7941", "url": "https://github.com/zowe/api-layer/commit/0a1efe245df13c98edf1d6b0207042137cda7941", "message": "Deprecate old ZosmfFilter\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T14:44:28Z", "type": "commit"}, {"oid": "14d357c9165bad7e9459632c3f786b655aa8a767", "url": "https://github.com/zowe/api-layer/commit/14d357c9165bad7e9459632c3f786b655aa8a767", "message": "PassTicketTestController MockMvc tests\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T15:38:29Z", "type": "commit"}, {"oid": "f7f4fef91517b1d672fe04d546cd3c46591430f0", "url": "https://github.com/zowe/api-layer/commit/f7f4fef91517b1d672fe04d546cd3c46591430f0", "message": "improve dummy passticket service to serve similar result to real one\n\nSigned-off-by: Pavel Jare\u0161 <pavel.jares@broadcom.com>", "committedDate": "2020-01-07T15:50:26Z", "type": "commit"}, {"oid": "d547f40f2f02bea2420638f13d16ec32de57e883", "url": "https://github.com/zowe/api-layer/commit/d547f40f2f02bea2420638f13d16ec32de57e883", "message": "Support predefined passticket in dummy PassTicketService\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-07T16:06:26Z", "type": "commit"}, {"oid": "1ef7fefc5a0cfce2be7fc10c37d4755229079355", "url": "https://github.com/zowe/api-layer/commit/1ef7fefc5a0cfce2be7fc10c37d4755229079355", "message": "Fix message when token is invalid + add integration test\n\nSigned-off-by: JirkaAichler <jiri.aichler@broadcom.com>", "committedDate": "2020-01-07T16:35:07Z", "type": "commit"}, {"oid": "350ff913c8238d6e2593184167365e2e4203dc15", "url": "https://github.com/zowe/api-layer/commit/350ff913c8238d6e2593184167365e2e4203dc15", "message": "Use user.dir for EHCache since the /tmp is not good\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T07:35:08Z", "type": "commit"}, {"oid": "8bd1c157798955cfa028c8852193ef9a7f02ca80", "url": "https://github.com/zowe/api-layer/commit/8bd1c157798955cfa028c8852193ef9a7f02ca80", "message": "refactor cleaning cache by parameter into CacheUtils\n\nSigned-off-by: Pavel Jare\u0161 <pavel.jares@broadcom.com>", "committedDate": "2020-01-08T09:18:32Z", "type": "commit"}, {"oid": "d0ac20cd60836b5c544abec30bedbb561671c952", "url": "https://github.com/zowe/api-layer/commit/d0ac20cd60836b5c544abec30bedbb561671c952", "message": "Ignore EHCache working files\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T11:33:03Z", "type": "commit"}, {"oid": "e346ce66ef6b13a463179be203729f41ea91589a", "url": "https://github.com/zowe/api-layer/commit/e346ce66ef6b13a463179be203729f41ea91589a", "message": "Disable banner\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T13:45:50Z", "type": "commit"}, {"oid": "1db1d359f415855731158a12bd61786b576dc9de", "url": "https://github.com/zowe/api-layer/commit/1db1d359f415855731158a12bd61786b576dc9de", "message": "Ignore EHCache lock\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T13:46:14Z", "type": "commit"}, {"oid": "b97dffac9e4c219ce8f4e938e9e401743bbccf5c", "url": "https://github.com/zowe/api-layer/commit/b97dffac9e4c219ce8f4e938e9e401743bbccf5c", "message": "Add PassTicket integration test with bad APPLID\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T13:48:56Z", "type": "commit"}, {"oid": "a3b2d5b64b0cb7738a07a9e993189811c38e412e", "url": "https://github.com/zowe/api-layer/commit/a3b2d5b64b0cb7738a07a9e993189811c38e412e", "message": "Revert \"Disable banner\"\n\nThis reverts commit e346ce66ef6b13a463179be203729f41ea91589a.", "committedDate": "2020-01-08T13:55:52Z", "type": "commit"}, {"oid": "266c963fb987db8a97ce63c2eb7b003935a54331", "url": "https://github.com/zowe/api-layer/commit/266c963fb987db8a97ce63c2eb7b003935a54331", "message": "Dummy implementation for invalid applid in evaluation\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T14:22:57Z", "type": "commit"}, {"oid": "b10dd8c4dd7fdce78050420a856bbf911202f3dc", "url": "https://github.com/zowe/api-layer/commit/b10dd8c4dd7fdce78050420a856bbf911202f3dc", "message": "Fix the error text that is expected\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-08T14:30:43Z", "type": "commit"}, {"oid": "5a0c50f61fb3a8ac58c1d0dcbcc2b4ee27f41c30", "url": "https://github.com/zowe/api-layer/commit/5a0c50f61fb3a8ac58c1d0dcbcc2b4ee27f41c30", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-08T16:46:19Z", "type": "commit"}, {"oid": "57f015dd4e3a30b13cd0cabf9581338dda7ce767", "url": "https://github.com/zowe/api-layer/commit/57f015dd4e3a30b13cd0cabf9581338dda7ce767", "message": "Make HttpBasicPassTicketSchemeTest more stable\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-09T07:58:45Z", "type": "commit"}, {"oid": "d989da5b7d9d2189722bfef768459bf3b0b8729b", "url": "https://github.com/zowe/api-layer/commit/d989da5b7d9d2189722bfef768459bf3b0b8729b", "message": "Fix OpenApi 3 parser\nUpdate Gateway swagger to contain /ticket endpoint\n\nSigned-off-by: JirkaAichler <jiri.aichler@broadcom.com>", "committedDate": "2020-01-09T09:19:28Z", "type": "commit"}, {"oid": "6c8f6972d6d46f0cdeef5ae974038a34f3859735", "url": "https://github.com/zowe/api-layer/commit/6c8f6972d6d46f0cdeef5ae974038a34f3859735", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-09T15:45:21Z", "type": "commit"}, {"oid": "6f30e3d73ab020820c51a27a23f04b06d6261354", "url": "https://github.com/zowe/api-layer/commit/6f30e3d73ab020820c51a27a23f04b06d6261354", "message": "Suppress GatewayNotifier error message during startup\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-09T16:14:14Z", "type": "commit"}, {"oid": "6ddbb9840771d0799aa1c4913fcd315f11117d7a", "url": "https://github.com/zowe/api-layer/commit/6ddbb9840771d0799aa1c4913fcd315f11117d7a", "message": "Only warnings and errors for EHCache\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-09T16:17:34Z", "type": "commit"}, {"oid": "7b729cdf002cb4316d117a50e6b98a9272aeb46d", "url": "https://github.com/zowe/api-layer/commit/7b729cdf002cb4316d117a50e6b98a9272aeb46d", "message": "Merge branch 'protectors/passticket' of https://github.com/zowe/api-layer into protectors/passticket", "committedDate": "2020-01-09T16:17:41Z", "type": "commit"}, {"oid": "511f53032fb4fc7c40d9cfc1133889347c9a0f73", "url": "https://github.com/zowe/api-layer/commit/511f53032fb4fc7c40d9cfc1133889347c9a0f73", "message": "fixup!\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-09T16:40:18Z", "type": "commit"}, {"oid": "6a5b8c480486138a4f7b475d7875846c2516d025", "url": "https://github.com/zowe/api-layer/commit/6a5b8c480486138a4f7b475d7875846c2516d025", "message": "Numberred error message for GatewayNotifier\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-09T17:18:14Z", "type": "commit"}, {"oid": "eb9c65be734a8c629b9c7c5deea0ce8512c883f1", "url": "https://github.com/zowe/api-layer/commit/eb9c65be734a8c629b9c7c5deea0ce8512c883f1", "message": "Use @depracated tag as SonarQube recommends\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T06:38:47Z", "type": "commit"}, {"oid": "d4d10c23d85fe9eaa2e64d41bffef467dbd3fa30", "url": "https://github.com/zowe/api-layer/commit/d4d10c23d85fe9eaa2e64d41bffef467dbd3fa30", "message": "User a dedicated exception for exception mapping errors\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T07:38:14Z", "type": "commit"}, {"oid": "a010935454c17c25045950863e95328863d76d3c", "url": "https://github.com/zowe/api-layer/commit/a010935454c17c25045950863e95328863d76d3c", "message": "Use dedicated exception for authentication problems in PassTicket service\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T07:49:45Z", "type": "commit"}, {"oid": "d5ea878da70fba0411275015c9f230267ea148f6", "url": "https://github.com/zowe/api-layer/commit/d5ea878da70fba0411275015c9f230267ea148f6", "message": "Delete temporary files\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T08:26:05Z", "type": "commit"}, {"oid": "62ca288fb2d4bdb2d19f624c76c8cfa89427b4ba", "url": "https://github.com/zowe/api-layer/commit/62ca288fb2d4bdb2d19f624c76c8cfa89427b4ba", "message": "Correct order of expected and actual in the test\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T08:31:40Z", "type": "commit"}, {"oid": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4", "url": "https://github.com/zowe/api-layer/commit/0c6883c17be7a82ec50ff64f351a9ae4f284b9d4", "message": "Use dedicated authentication exception\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-10T08:33:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365286075", "bodyText": "It looks like this method is not used anywhere", "author": "taban03", "createdAt": "2020-01-10T15:24:33Z", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {", "originalCommit": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwNzkzMA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365707930", "bodyText": "Hi Andreas, thanks for a thorough review. You are right that this method is not used. We think that it is useful to have it here since it provides a way how to check if a real implementation is used.", "author": "plavjanik", "createdAt": "2020-01-13T09:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxODA4NQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365718085", "bodyText": "Hi Petr! That's fine, I was not sure if it was intentional. Thanks for the clarification!", "author": "taban03", "createdAt": "2020-01-13T09:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "chunk": "diff --git a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\nindex 62569d06c..2d8f7084b 100644\n--- a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\n+++ b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\n\n@@ -32,13 +32,13 @@ public class PassTicketService {\n     @PostConstruct\n     public void init() {\n         this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n-                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n-                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n-                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n-                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n-                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n-                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n-                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+            \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\n+                \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRc\", \"getRacfRsn\"),\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\n+                \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRc\", \"getRacfRsn\"));\n     }\n \n     public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365288760", "bodyText": "int delayFactor is never used even tho is passed", "author": "taban03", "createdAt": "2020-01-10T15:29:21Z", "path": "apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java", "diffHunk": "@@ -20,19 +20,21 @@\n \n public class ServiceStartupEventHandler {\n     public static final int DEFAULT_DELAY_FACTOR = 5;\n-    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class, YamlMessageServiceInstance.getInstance());\n+    private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class,\n+            YamlMessageServiceInstance.getInstance());\n \n     @SuppressWarnings(\"squid:S1172\")\n     public void onServiceStartup(String serviceName, int delayFactor) {", "originalCommit": "0c6883c17be7a82ec50ff64f351a9ae4f284b9d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MjUzMQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365662531", "bodyText": "Hello Andrea @taban03, thank you for noticing it. It is in the code that we have not to change but only formatted. But it is good to notice these things and we will improve the code as the boy-scout rule says: always leave the code behind in a better state than you found it. (https://martinfowler.com/bliki/OpportunisticRefactoring.html)", "author": "plavjanik", "createdAt": "2020-01-13T06:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2NDA0Mg==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r365664042", "bodyText": "The delayFactor is now used. Thank you, Andrea, for noticing it!", "author": "plavjanik", "createdAt": "2020-01-13T07:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4ODc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e6c66dba50e02cdaf0682c30414b300183e4ea16", "chunk": "diff --git a/apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java b/apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java\nindex 9327f73ce..ee337e3ed 100644\n--- a/apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java\n+++ b/apiml-common/src/main/java/com/ca/mfaas/product/service/ServiceStartupEventHandler.java\n\n@@ -20,6 +20,7 @@ import java.lang.management.ManagementFactory;\n \n public class ServiceStartupEventHandler {\n     public static final int DEFAULT_DELAY_FACTOR = 5;\n+\n     private final ApimlLogger apimlLog = ApimlLogger.of(ServiceStartupEventHandler.class,\n             YamlMessageServiceInstance.getInstance());\n \n"}}, {"oid": "eae34dff913fc3e443a45a32695a1f0498536bae", "url": "https://github.com/zowe/api-layer/commit/eae34dff913fc3e443a45a32695a1f0498536bae", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-10T22:01:08Z", "type": "commit"}, {"oid": "e6c66dba50e02cdaf0682c30414b300183e4ea16", "url": "https://github.com/zowe/api-layer/commit/e6c66dba50e02cdaf0682c30414b300183e4ea16", "message": "Make ServiceStartupEventHandler use the delayFactor parameter\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-13T06:58:54Z", "type": "commit"}, {"oid": "d54e3dcfd4f11158f9c98d462ed8539f1e7e83d2", "url": "https://github.com/zowe/api-layer/commit/d54e3dcfd4f11158f9c98d462ed8539f1e7e83d2", "message": "Merge branch 'protectors/passticket' of https://github.com/zowe/api-layer into protectors/passticket", "committedDate": "2020-01-13T06:59:09Z", "type": "commit"}, {"oid": "bc6a6269972d8739369ea0485e6f2c5c1871a7ae", "url": "https://github.com/zowe/api-layer/commit/bc6a6269972d8739369ea0485e6f2c5c1871a7ae", "message": "Remove proposal word from finalized metadata\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-14T07:00:20Z", "type": "commit"}, {"oid": "b2f9f9246e577469d83614d3ec9b131ba953cba8", "url": "https://github.com/zowe/api-layer/commit/b2f9f9246e577469d83614d3ec9b131ba953cba8", "message": "Remove non-robust test with hardcoded version\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-14T08:31:00Z", "type": "commit"}, {"oid": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "url": "https://github.com/zowe/api-layer/commit/8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "message": "Typo fix\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-14T08:31:10Z", "type": "commit"}, {"oid": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "url": "https://github.com/zowe/api-layer/commit/3db9bb555857f5847cf2b61639ed1862fa723cb8", "message": "PassTicket diagram with API ML\n\nSigned-off-by: Petr Plavjanik <plavjanik@gmail.com>", "committedDate": "2020-01-14T15:22:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDQzMA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r364750430", "bodyText": "Do u think it is good idea to be dependent from library outcome? My point is that these tests would be failed, if vendor changed message.\nhttps://github.com/swagger-api/swagger-parser/blob/master/modules/swagger-parser-v3/src/main/java/io/swagger/v3/parser/OpenAPIV3Parser.java line:219", "author": "ilkinabdullayev", "createdAt": "2020-01-09T13:56:12Z", "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "diffHunk": "@@ -108,13 +109,24 @@ public void givenOpenApiValidJson_whenApiDocTransform_thenCheckUpdatedValues() {\n     }\n \n     @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n+    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n+        exceptionRule.expectMessage(\"No swagger supplied\");", "originalCommit": "d989da5b7d9d2189722bfef768459bf3b0b8729b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f30e3d73ab020820c51a27a23f04b06d6261354", "chunk": "diff --git a/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java b/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\nindex eaf6754fc..a86cb4528 100644\n--- a/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\n+++ b/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\n\n@@ -109,24 +108,13 @@ public class ApiDocV3ServiceTest {\n     }\n \n     @Test\n-    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n+    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"No swagger supplied\");\n-        apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n-    }\n-\n-    @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowException() {\n-        String invalidJson = \"nonsense\";\n-        ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n-        ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n-\n-        exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"attribute openapi is not of type `object`\");\n+        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n         apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDc2Mg==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r364750762", "bodyText": "Same case like a givenEmptyJson_whenApiDocTransform_thenThrowException", "author": "ilkinabdullayev", "createdAt": "2020-01-09T13:56:51Z", "path": "api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java", "diffHunk": "@@ -108,13 +109,24 @@ public void givenOpenApiValidJson_whenApiDocTransform_thenCheckUpdatedValues() {\n     }\n \n     @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n+    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n+        exceptionRule.expectMessage(\"No swagger supplied\");\n+        apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n+    }\n+\n+    @Test\n+    public void givenInvalidJson_whenApiDocTransform_thenThrowException() {\n+        String invalidJson = \"nonsense\";\n+        ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n+        ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n+\n+        exceptionRule.expect(UnexpectedTypeException.class);\n+        exceptionRule.expectMessage(\"attribute openapi is not of type `object`\");", "originalCommit": "d989da5b7d9d2189722bfef768459bf3b0b8729b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f30e3d73ab020820c51a27a23f04b06d6261354", "chunk": "diff --git a/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java b/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\nindex eaf6754fc..a86cb4528 100644\n--- a/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\n+++ b/api-catalog-services/src/test/java/com/ca/mfaas/apicatalog/swagger/api/ApiDocV3ServiceTest.java\n\n@@ -109,24 +108,13 @@ public class ApiDocV3ServiceTest {\n     }\n \n     @Test\n-    public void givenEmptyJson_whenApiDocTransform_thenThrowException() {\n+    public void givenInvalidJson_whenApiDocTransform_thenThrowExeption() throws IOException {\n         String invalidJson = \"\";\n         ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n         ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n \n         exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"No swagger supplied\");\n-        apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n-    }\n-\n-    @Test\n-    public void givenInvalidJson_whenApiDocTransform_thenThrowException() {\n-        String invalidJson = \"nonsense\";\n-        ApiInfo apiInfo = new ApiInfo(\"org.zowe.apicatalog\", \"api/v1\", \"3.0.0\", \"https://localhost:10014/apicatalog/api-doc\", \"https://www.zowe.org\");\n-        ApiDocInfo apiDocInfo = new ApiDocInfo(apiInfo, invalidJson, null);\n-\n-        exceptionRule.expect(UnexpectedTypeException.class);\n-        exceptionRule.expectMessage(\"attribute openapi is not of type `object`\");\n+        exceptionRule.expectMessage(\"Response is not an OpenAPI type object.\");\n         apiDocV3Service.transformApiDoc(SERVICE_ID, apiDocInfo);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxMTQyNA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366311424", "bodyText": "Unused", "author": "ilkinabdullayev", "createdAt": "2020-01-14T12:31:00Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.security.ticket;\n+\n+/**\n+ * Exception thrown when applicationName parameter was not provided\n+ */\n+public class ApplicationNameNotFoundException extends Exception {\n+\n+    public ApplicationNameNotFoundException(String message) {\n+        super(message);\n+    }\n+\n+    public ApplicationNameNotFoundException(String message, Throwable cause) {", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "chunk": "diff --git a/gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java b/gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java\nindex f49fd4ef0..44353c0ca 100644\n--- a/gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java\n+++ b/gateway-service/src/main/java/com/ca/mfaas/gateway/security/ticket/ApplicationNameNotFoundException.java\n\n@@ -17,8 +17,4 @@ public class ApplicationNameNotFoundException extends Exception {\n     public ApplicationNameNotFoundException(String message) {\n         super(message);\n     }\n-\n-    public ApplicationNameNotFoundException(String message, Throwable cause) {\n-        super(message, cause);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3MDQ5OA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366370498", "bodyText": "Response true or false? Please consider about api design... Can be 204 if everything is ok, otherwise you can say what is a problem with api response.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T14:32:08Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Controller offer method to control security. It can contains method for user and also method for calling services\n+ * by gateway to distribute state of authentication between nodes.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/auth\")\n+public class AuthController {\n+\n+    private final AuthenticationService authenticationService;\n+\n+    @DeleteMapping(path = \"/invalidate/**\")\n+    public Boolean invalidateJwtToken(HttpServletRequest request) {\n+        final String path = \"/auth/invalidate/\";\n+        final String uri = request.getRequestURI();\n+        final int index = uri.indexOf(path);\n+\n+        final String jwtToken = (index >= 0) ? uri.substring(index + path.length()) : \"\";\n+        return authenticationService.invalidateJwtToken(jwtToken, false);", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3MTUwNw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366371507", "bodyText": "Why all of gateway urls start with /api/v1/gateway/* except this.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T14:33:46Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/AuthController.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Controller offer method to control security. It can contains method for user and also method for calling services\n+ * by gateway to distribute state of authentication between nodes.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/auth\")\n+public class AuthController {\n+\n+    private final AuthenticationService authenticationService;\n+\n+    @DeleteMapping(path = \"/invalidate/**\")", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3NDEyOA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366374128", "bodyText": "There is a comment \"gateway have to exists\". Can you explain a little why we need to check ?", "author": "ilkinabdullayev", "createdAt": "2020-01-14T14:38:30Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -69,6 +92,53 @@ public String createJwtToken(String username, String domain, String ltpaToken) {\n             .compact();\n     }\n \n+    /**\n+     * Method will invalidate jwtToken. It could be called from two reasons:\n+     * - on logout phase (distribute = true)\n+     * - from another gateway instance to notify about change (distribute = false)\n+     *\n+     * @param jwtToken   token to invalidated\n+     * @param distribute distribute invalidation to another instances?\n+     * @return state of invalidate (true - token was invalidated)\n+     */\n+    @CacheEvict(value = \"validationJwtToken\", key = \"#jwtToken\")\n+    @Cacheable(value = \"invalidatedJwtTokens\", key = \"#jwtToken\", condition = \"#jwtToken != null\")\n+    public Boolean invalidateJwtToken(String jwtToken, boolean distribute) {\n+        /*\n+         * until ehCache is not distributed, send to other instances invalidation request\n+         */\n+        if (distribute) {\n+            final Application application = discoveryClient.getApplication(\"gateway\");\n+            // wrong state, gateway have to exists (at least this current instance), return false like unsuccessful", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3NzQwMQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366377401", "bodyText": "Method doesn't give to any message to consumer. I meant it used by api controller. So i requested api /invalidate and it returns false. What does it mean?\nDo we need return boolean? Can we be more specific?", "author": "ilkinabdullayev", "createdAt": "2020-01-14T14:44:13Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -69,6 +92,53 @@ public String createJwtToken(String username, String domain, String ltpaToken) {\n             .compact();\n     }\n \n+    /**\n+     * Method will invalidate jwtToken. It could be called from two reasons:\n+     * - on logout phase (distribute = true)\n+     * - from another gateway instance to notify about change (distribute = false)\n+     *\n+     * @param jwtToken   token to invalidated\n+     * @param distribute distribute invalidation to another instances?\n+     * @return state of invalidate (true - token was invalidated)\n+     */\n+    @CacheEvict(value = \"validationJwtToken\", key = \"#jwtToken\")\n+    @Cacheable(value = \"invalidatedJwtTokens\", key = \"#jwtToken\", condition = \"#jwtToken != null\")\n+    public Boolean invalidateJwtToken(String jwtToken, boolean distribute) {\n+        /*\n+         * until ehCache is not distributed, send to other instances invalidation request\n+         */\n+        if (distribute) {\n+            final Application application = discoveryClient.getApplication(\"gateway\");\n+            // wrong state, gateway have to exists (at least this current instance), return false like unsuccessful\n+            if (application == null) return Boolean.FALSE;", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjgxMg==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366386812", "bodyText": "path=\"\" is redundant", "author": "ilkinabdullayev", "createdAt": "2020-01-14T14:59:39Z", "path": "gateway-service/src/main/java/com/ca/mfaas/gateway/controllers/CacheServiceController.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.mfaas.gateway.controllers;\n+\n+import com.ca.mfaas.gateway.security.service.ServiceCacheEvict;\n+import lombok.AllArgsConstructor;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * This controller allows control the caches about services. The main purpose is to evict cached data\n+ * about services when a update happened in discovery service. Discovery service notifies about any\n+ * change to be sure that cache on gateway is still valid.\n+ */\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/cache/services\")\n+public class CacheServiceController {\n+\n+    private final List<ServiceCacheEvict> toEvict;\n+\n+    @DeleteMapping(path = \"\")", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MTc0OA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366391748", "bodyText": "Please check it, it is not fully covered.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:08:08Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/controllers/AuthControllerTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.ca.mfaas.gateway.controllers;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+public class AuthControllerTest {\n+\n+    private MockMvc mockMvc;\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    private AuthController authController;\n+\n+    @Before\n+    public void setUp() {\n+        authController = new AuthController(authenticationService);\n+        mockMvc = MockMvcBuilders.standaloneSetup(authController).build();\n+    }\n+\n+    @Test\n+    public void invalidateJwtToken() throws Exception {", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NTc2MQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366395761", "bodyText": "Please split unit test to small ones. It is too big. And name test methods regarding to what you test.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:14:59Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.apiml.security.common.token.TokenNotValidException;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import io.jsonwebtoken.JwtException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+import java.util.Optional;\n+\n+import static com.ca.mfaas.gateway.security.service.schema.ZosmfScheme.ZosmfCommand.COOKIE_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZosmfSchemeTest {\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    @InjectMocks\n+    private ZosmfScheme zosmfScheme;\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjM0OA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366396348", "bodyText": "And it is not fully covered.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:16:01Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/ZosmfSchemeTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.apiml.security.common.token.TokenNotValidException;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import io.jsonwebtoken.JwtException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+import java.util.Optional;\n+\n+import static com.ca.mfaas.gateway.security.service.schema.ZosmfScheme.ZosmfCommand.COOKIE_HEADER;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ZosmfSchemeTest {\n+\n+    @Mock\n+    private AuthenticationService authenticationService;\n+\n+    @InjectMocks\n+    private ZosmfScheme zosmfScheme;\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {\n+        Calendar calendar = Calendar.getInstance();\n+        Authentication authentication = new Authentication(AuthenticationScheme.ZOSMF, null);", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzYyMw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366397623", "bodyText": "Please split unit test to small ones. It is too big. And name test methods regarding to what you test.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:18:12Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.service.PassTicketService;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HttpBasicPassTicketSchemeTest {\n+\n+    private final int PASSTICKET_DURATION = 300;\n+\n+    @Mock\n+    private PassTicketService passTicketService;\n+\n+    @InjectMocks\n+    private HttpBasicPassTicketScheme httpBasicPassTicketScheme;\n+\n+    @Before\n+    public void init() {\n+        ReflectionTestUtils.setField(httpBasicPassTicketScheme, \"timeout\", PASSTICKET_DURATION);\n+    }\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NzgxNQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366397815", "bodyText": "And it is not fully covered.", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:18:31Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/HttpBasicPassTicketSchemeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.service.PassTicketService;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Calendar;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HttpBasicPassTicketSchemeTest {\n+\n+    private final int PASSTICKET_DURATION = 300;\n+\n+    @Mock\n+    private PassTicketService passTicketService;\n+\n+    @InjectMocks\n+    private HttpBasicPassTicketScheme httpBasicPassTicketScheme;\n+\n+    @Before\n+    public void init() {\n+        ReflectionTestUtils.setField(httpBasicPassTicketScheme, \"timeout\", PASSTICKET_DURATION);\n+    }\n+\n+    @Test\n+    public void testCreateCommand() throws Exception {\n+        Calendar calendar = Calendar.getInstance();\n+        Authentication authentication = new Authentication(AuthenticationScheme.HTTP_BASIC_PASSTICKET, \"applid\");", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQwNjY0Mw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366406643", "bodyText": "Test is too big", "author": "ilkinabdullayev", "createdAt": "2020-01-14T15:33:29Z", "path": "gateway-service/src/test/java/com/ca/mfaas/gateway/security/service/schema/AuthenticationSchemeFactoryTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package com.ca.mfaas.gateway.security.service.schema;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import com.ca.apiml.security.common.auth.Authentication;\n+import com.ca.apiml.security.common.auth.AuthenticationScheme;\n+import com.ca.apiml.security.common.token.QueryResponse;\n+import com.ca.mfaas.gateway.security.service.AuthenticationService;\n+import com.netflix.zuul.context.RequestContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+@RunWith(JUnit4.class)\n+public class AuthenticationSchemeFactoryTest {\n+\n+    private static final AuthenticationCommand COMMAND = mock(AuthenticationCommand.class);\n+\n+    private AbstractAuthenticationScheme createScheme(final AuthenticationScheme scheme, final boolean isDefault) {\n+        return new AbstractAuthenticationScheme() {\n+            @Override\n+            public AuthenticationScheme getScheme() {\n+                return scheme;\n+            }\n+\n+            @Override\n+            public boolean isDefault() {\n+                return isDefault;\n+            }\n+\n+            @Override\n+            public AuthenticationCommand createCommand(Authentication authentication, QueryResponse token) {\n+                return COMMAND;\n+            }\n+        };\n+    }\n+\n+    @Before\n+    public void init() {\n+        RequestContext.testSetCurrentContext(null);\n+    }\n+\n+    @Test\n+    public void testInit() {\n+        // happy day\n+        new AuthenticationSchemeFactory(\n+            mock(AuthenticationService.class),\n+            Arrays.asList(\n+                createScheme(AuthenticationScheme.BYPASS, true),\n+                createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+            )\n+        );\n+\n+        // no default\n+        try {\n+            new AuthenticationSchemeFactory(\n+                mock(AuthenticationService.class),\n+                Arrays.asList(\n+                    createScheme(AuthenticationScheme.BYPASS, false),\n+                    createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                    createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+                )\n+            );\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(e.getMessage().contains(\"No scheme\"));\n+        }\n+\n+        // multiple default\n+        try {\n+            new AuthenticationSchemeFactory(\n+                mock(AuthenticationService.class),\n+                Arrays.asList(\n+                    createScheme(AuthenticationScheme.BYPASS, true),\n+                    createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, true),\n+                    createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+                )\n+            );\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(e.getMessage().contains(\"Multiple scheme\"));\n+            assertTrue(e.getMessage().contains(\"as default\"));\n+            assertTrue(e.getMessage().contains(AuthenticationScheme.BYPASS.getScheme()));\n+            assertTrue(e.getMessage().contains(AuthenticationScheme.HTTP_BASIC_PASSTICKET.getScheme()));\n+        }\n+    }\n+\n+    @Test\n+    public void testGetSchema() {\n+        AuthenticationSchemeFactory asf = new AuthenticationSchemeFactory(\n+            mock(AuthenticationService.class),\n+            Arrays.asList(\n+                createScheme(AuthenticationScheme.BYPASS, true),\n+                createScheme(AuthenticationScheme.HTTP_BASIC_PASSTICKET, false),\n+                createScheme(AuthenticationScheme.ZOWE_JWT, false)\n+            )\n+        );\n+\n+        assertEquals(AuthenticationScheme.BYPASS, asf.getSchema(AuthenticationScheme.BYPASS).getScheme());\n+        assertEquals(AuthenticationScheme.HTTP_BASIC_PASSTICKET, asf.getSchema(AuthenticationScheme.HTTP_BASIC_PASSTICKET).getScheme());\n+        assertEquals(AuthenticationScheme.ZOWE_JWT, asf.getSchema(AuthenticationScheme.ZOWE_JWT).getScheme());\n+        // default one\n+        assertEquals(AuthenticationScheme.BYPASS, asf.getSchema(null).getScheme());\n+    }\n+\n+    @Test\n+    public void testGetAuthenticationCommand() throws Exception {", "originalCommit": "8ad2b7609dfb04e3c2f42e748390d2be4ebced80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc1NDE3OA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366754178", "bodyText": "That line is not covered fully by tests.", "author": "ilkinabdullayev", "createdAt": "2020-01-15T08:52:21Z", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/auth/Authentication.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.auth;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Information about expected authentication scheme and APPLID for PassTickets generation.\n+ */\n+@Data\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class Authentication {\n+\n+    private AuthenticationScheme scheme;\n+    private String applid;\n+\n+    public boolean isEmpty() {\n+        return (scheme == null) && (applid == null);", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NTUzMQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366765531", "bodyText": "What is this class for? I understand it is designed to have apiml.security.auth.passTicket.timeout property. But it is totally unused.\nI checked apiml.security.auth.passTicket.timeout param is being used with @Value(\"${apiml.security.auth.passTicket.timeout:540}\"). So this param is called by spring feature, not by AuthConfigurationProperties.\nAnother point is that default value of apiml.security.auth.passTicket.timeout is mentioned as two value:\n   @Data\n    public static class PassTicket {\n        private Integer timeout = 360;\n    }\n@Value(\"${apiml.security.auth.passTicket.timeout:540}\")", "author": "ilkinabdullayev", "createdAt": "2020-01-15T09:17:35Z", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/config/AuthConfigurationProperties.java", "diffHunk": "@@ -62,9 +65,15 @@\n         private Integer cookieMaxAge = -1;\n     }\n \n+    @Data\n+    public static class PassTicket {", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NjMzMQ==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366766331", "bodyText": "Not fully covered", "author": "ilkinabdullayev", "createdAt": "2020-01-15T09:19:22Z", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/auth/AuthenticationSchemeTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.ca.apiml.security.common.auth;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static org.junit.Assert.*;\n+@RunWith(JUnit4.class)\n+public class AuthenticationSchemeTest {\n+\n+    @Test\n+    public void testFromScheme() {", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NTczMw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366785733", "bodyText": "What is intended with @Order?", "author": "ilkinabdullayev", "createdAt": "2020-01-15T09:58:45Z", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration\n+public class PassTicketServiceTest {\n+\n+    private static final String TEST_USERID = \"userId\";\n+\n+    @Autowired\n+    private PassTicketService passTicketService;\n+\n+    private static String evaluated;\n+\n+    @Test\n+    @Order(1)", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "chunk": "diff --git a/apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java b/apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java\nindex 78b1a43c4..a29e9e6e7 100644\n--- a/apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java\n+++ b/apiml-security-common/src/test/java/com/ca/apiml/security/common/service/PassTicketServiceTest.java\n\n@@ -91,8 +91,8 @@ public class PassTicketServiceTest {\n             fail();\n         } catch (IRRPassTicketEvaluationException e) {\n             assertEquals(8, e.getSafRc());\n-            assertEquals(16, e.getRacfRsn());\n-            assertEquals(32, e.getRacfRc());\n+            assertEquals(16, e.getRacfRc());\n+            assertEquals(32, e.getRacfRsn());\n         }\n \n         String passTicket1 = dpti.generate(TEST_USERID, \"applId\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg1OTA1Mw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366859053", "bodyText": "ObjectUtil.requireNotNull(userId, \"Parameter userId is empty\");\n  ObjectUtil.requireNotNull(applId, \"Parameter applId is empty\");\n  ObjectUtil.requireNotNull(passTicket, \"Parameter passTicket is empty\");", "author": "ilkinabdullayev", "createdAt": "2020-01-15T12:53:41Z", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import com.ca.mfaas.util.ClassOrDefaultProxyUtils;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+import org.apache.commons.lang.StringUtils;\n+import org.springframework.stereotype.Service;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This method allow to get a PassTicket from SAF.\n+ */\n+@Service\n+public class PassTicketService {\n+\n+    private IRRPassTicket irrPassTicket;\n+\n+    @PostConstruct\n+    public void init() {\n+        this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n+                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n+                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n+                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+    }\n+\n+    public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+        irrPassTicket.evaluate(userId, applId, passTicket);\n+    }\n+\n+    public String generate(String userId, String applId) throws IRRPassTicketGenerationException {\n+        return irrPassTicket.generate(userId, applId);\n+    }\n+\n+    public boolean isUsingSafImplementation() {\n+        ClassOrDefaultProxyUtils.ClassOrDefaultProxyState stateInterface = (ClassOrDefaultProxyUtils.ClassOrDefaultProxyState) irrPassTicket;\n+        return stateInterface.isUsingBaseImplementation();\n+    }\n+\n+    public static class DefaultPassTicketImpl implements IRRPassTicket {\n+\n+        private static int id = 0;\n+\n+        public static final String ZOWE_DUMMY_USERID = \"user\";\n+        public static final String ZOWE_DUMMY_PASS_TICKET_PREFIX = \"ZoweDummyPassTicket\";\n+\n+        public static final String UNKWNOWN_USER = \"unknownUser\";\n+        public static final String UNKWNOWN_APPLID = \"XBADAPPL\";\n+\n+        private Map<UserApp, Set<String>> userAppToPasstickets = new HashMap<>();\n+\n+        @Override\n+        public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n+            if (userId == null)", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "chunk": "diff --git a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\nindex 62569d06c..2d8f7084b 100644\n--- a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\n+++ b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/PassTicketService.java\n\n@@ -32,13 +32,13 @@ public class PassTicketService {\n     @PostConstruct\n     public void init() {\n         this.irrPassTicket = ClassOrDefaultProxyUtils.createProxy(IRRPassTicket.class,\n-                \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n-                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketEvaluationException>(\n-                        \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n-                        IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"),\n-                new ClassOrDefaultProxyUtils.ByMethodName<IRRPassTicketGenerationException>(\n-                        \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n-                        IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRsn\", \"getRacfRc\"));\n+            \"com.ibm.eserver.zos.racf.IRRPassTicket\", DefaultPassTicketImpl::new,\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\n+                \"com.ibm.eserver.zos.racf.IRRPassTicketEvaluationException\",\n+                IRRPassTicketEvaluationException.class, \"getSafRc\", \"getRacfRc\", \"getRacfRsn\"),\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\n+                \"com.ibm.eserver.zos.racf.IRRPassTicketGenerationException\",\n+                IRRPassTicketGenerationException.class, \"getSafRc\", \"getRacfRc\", \"getRacfRsn\"));\n     }\n \n     public void evaluate(String userId, String applId, String passTicket) throws IRRPassTicketEvaluationException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkzMzk0Mg==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r366933942", "bodyText": "throw new IRRPassTicketEvaluationException(8, 16, 28); //easy to make mistake\n  throw new IRRPassTicketEvaluationException(ErrorCode.ERR_8_8_16);", "author": "ilkinabdullayev", "createdAt": "2020-01-15T15:19:56Z", "path": "apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package com.ca.apiml.security.common.service;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Abstact exception from IRR passticket service. It collect common values about exception\n+ */\n+@AllArgsConstructor\n+@Getter\n+public abstract class AbstractIRRPassTicketException extends Exception {\n+\n+    private static final long serialVersionUID = -6233392272992529775L;\n+\n+    protected final int safRc;\n+    protected final int racfRsn;\n+    protected final int racfRc;", "originalCommit": "3db9bb555857f5847cf2b61639ed1862fa723cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "chunk": "diff --git a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java\nindex 5c2693873..e191b8823 100644\n--- a/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java\n+++ b/apiml-security-common/src/main/java/com/ca/apiml/security/common/service/AbstractIRRPassTicketException.java\n\n@@ -11,12 +11,10 @@ package com.ca.apiml.security.common.service;\n \n import lombok.AllArgsConstructor;\n import lombok.Getter;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n+import org.springframework.http.HttpStatus;\n \n /**\n- * Abstact exception from IRR passticket service. It collect common values about exception\n+ * Abstract exception from IRR passticket service. It collect common values about exception\n  */\n @AllArgsConstructor\n @Getter\n"}}, {"oid": "6325a6eb156ffa24810268809074ffd9840328c9", "url": "https://github.com/zowe/api-layer/commit/6325a6eb156ffa24810268809074ffd9840328c9", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-16T09:08:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTU3Nw==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367325577", "bodyText": "Redundant", "author": "ilkinabdullayev", "createdAt": "2020-01-16T09:56:15Z", "path": "apiml-security-common/src/test/java/com/ca/apiml/security/common/token/QueryResponseTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.ca.apiml.security.common.token;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)", "originalCommit": "6325a6eb156ffa24810268809074ffd9840328c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5OTA3OA==", "url": "https://github.com/zowe/api-layer/pull/465#discussion_r367399078", "bodyText": "Not fully covered.", "author": "ilkinabdullayev", "createdAt": "2020-01-16T12:49:30Z", "path": "common-service-core/src/test/java/com/ca/mfaas/cache/CompositeKeyGeneratorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.ca.mfaas.cache;/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(JUnit4.class)\n+public class CompositeKeyGeneratorTest {", "originalCommit": "6325a6eb156ffa24810268809074ffd9840328c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "065d35ce80aa1c7468cb13b36cc4c137fe9badef", "url": "https://github.com/zowe/api-layer/commit/065d35ce80aa1c7468cb13b36cc4c137fe9badef", "message": "Add certificate protection for /ticket endpoint\nAdd integration tests for /ticket endpoint\nFix error handling\n\nSigned-off-by: JirkaAichler <jiri.aichler@broadcom.com>", "committedDate": "2020-01-16T13:28:14Z", "type": "commit"}, {"oid": "7b5deb8f55c0cb94b2049ccbb84e07811dd36965", "url": "https://github.com/zowe/api-layer/commit/7b5deb8f55c0cb94b2049ccbb84e07811dd36965", "message": "Merge branch 'master' into protectors/passticket", "committedDate": "2020-01-16T14:12:40Z", "type": "commit"}]}