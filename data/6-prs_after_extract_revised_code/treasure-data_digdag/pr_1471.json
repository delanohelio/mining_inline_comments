{"pr_number": 1471, "pr_title": "Enhance command executor logging", "pr_createdAt": "2020-10-27T03:52:11Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1471", "timeline": [{"oid": "b619d2f1ce13a6c63869c45b914c893ae36ae4a1", "url": "https://github.com/treasure-data/digdag/commit/b619d2f1ce13a6c63869c45b914c893ae36ae4a1", "message": "Modify getErrorReason(), add tests.", "committedDate": "2020-10-30T03:08:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514887776", "bodyText": "ECS task always uses only 1 container?", "author": "komamitsu", "createdAt": "2020-10-30T06:02:36Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());", "originalCommit": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwODM4NQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514908385", "bodyText": "Good point!  IIUC, currently only 1 container is used in my understand.\nBut it might be better to support multiple containers for the future modification.\nI will change it later.", "author": "yoyama", "createdAt": "2020-10-30T07:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTYzOQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514925639", "bodyText": "I fixed as getting reasons from multiple containers and concatenate them.", "author": "yoyama", "createdAt": "2020-10-30T08:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Nzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "da3ad72b8ed5c23d71e67df5bc2abe219f61d18d", "chunk": "diff --git a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\nindex 8e5b196c51..9c5066e695 100644\n--- a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n+++ b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n\n@@ -394,20 +394,18 @@ public class EcsCommandExecutor\n         Optional<String> errorMessage;\n         try {\n             final Task task = client.getTask(cluster, taskArn);\n-            if (task.getContainers().size() > 0) {\n-                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).collect(Collectors.toList());\n+            if (reasons.size() > 0) {\n+                errorMessage = Optional.of(String.join(\",\", reasons));\n             }\n             else {\n                 errorMessage = Optional.of(\"No container information\");\n             }\n         }\n         catch (TaskSetNotFoundException e) {\n-            errorMessage = Optional.of(e.getErrorMessage());\n+            errorMessage = Optional.fromNullable(e.getErrorMessage());\n \n         }\n-        catch (RuntimeException re) {\n-            errorMessage = Optional.of(re.getMessage());\n-        }\n         return errorMessage;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514889233", "bodyText": "Maybe this RuntimeException doesn't contain the root cause of the task failure. We need to catch RuntimeException here?", "author": "komamitsu", "createdAt": "2020-10-30T06:08:26Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +388,29 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage;\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            if (task.getContainers().size() > 0) {\n+                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            }\n+            else {\n+                errorMessage = Optional.of(\"No container information\");\n+            }\n+        }\n+        catch (TaskSetNotFoundException e) {\n+            errorMessage = Optional.of(e.getErrorMessage());\n+\n+        }\n+        catch (RuntimeException re) {", "originalCommit": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNDU3MQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514914571", "bodyText": "Ah good point. I am wondering this process.\nWhen this method is called, the task already finished and the cause of RuntimeException is\nfinal Task task = client.getTask(cluster, taskArn);\n\nIf we don't catch the RuntimeException, task will fail because of only getting information from AWS even though task have already finished.\nBut I re-considered and your pointing out may be better.\nI will change it.\nThanks for your pointing out.", "author": "yoyama", "createdAt": "2020-10-30T07:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNTk2MQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514925961", "bodyText": "I removed catch (RuntimeException..) and fixed the related test.", "author": "yoyama", "createdAt": "2020-10-30T08:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4OTIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "da3ad72b8ed5c23d71e67df5bc2abe219f61d18d", "chunk": "diff --git a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\nindex 8e5b196c51..9c5066e695 100644\n--- a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n+++ b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n\n@@ -394,20 +394,18 @@ public class EcsCommandExecutor\n         Optional<String> errorMessage;\n         try {\n             final Task task = client.getTask(cluster, taskArn);\n-            if (task.getContainers().size() > 0) {\n-                errorMessage = Optional.of(task.getContainers().get(0).getReason());\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).collect(Collectors.toList());\n+            if (reasons.size() > 0) {\n+                errorMessage = Optional.of(String.join(\",\", reasons));\n             }\n             else {\n                 errorMessage = Optional.of(\"No container information\");\n             }\n         }\n         catch (TaskSetNotFoundException e) {\n-            errorMessage = Optional.of(e.getErrorMessage());\n+            errorMessage = Optional.fromNullable(e.getErrorMessage());\n \n         }\n-        catch (RuntimeException re) {\n-            errorMessage = Optional.of(re.getMessage());\n-        }\n         return errorMessage;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514892230", "bodyText": "Is it okay if RuntimeException is finally handled as an unexpected exception?\nhttps://github.com/treasure-data/digdag/blob/v0_10/digdag-core/src/main/java/io/digdag/core/agent/OperatorManager.java#L174-L176\nMaybe TaskExecutionException is better?", "author": "komamitsu", "createdAt": "2020-10-30T06:19:14Z", "path": "digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java", "diffHunk": "@@ -149,38 +149,19 @@ private Config runCode(final Config state)\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-\n-                    StringBuilder reason = new StringBuilder();\n-                    reason.append(\"Python command failed with code \").append(statusCode);\n-                    // If the error message and stacktrace are available in outFile,\n-                    // throw RuntimeException with them.\n+                    String reason = getErrorReason(status, commandContext);\n+                    throw new RuntimeException(reason);", "originalCommit": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwOTkyMA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514909920", "bodyText": "The current implementation is as follows:\nhttps://github.com/treasure-data/digdag/blob/v0_10/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java#L148-L179\n                if (statusCode != 0) {\n...\n                    throw new RuntimeException(reason.toString());\n                }\n\nIf status code is not 0, it always throw RuntimeException().\nI would like to keep behavior as much as possible.\nHow about your thought ?", "author": "yoyama", "createdAt": "2020-10-30T07:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMjE5MA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517932190", "bodyText": "I see. Throwing the same exception sounds reasonable.\n@muga Just out of curiosity, was there any specific reason to use RuntimeException not TaskExecutionException? https://github.com/treasure-data/digdag/blame/85fd6bdcec06a362f1b16d8de2284168c4e35619/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java#L149", "author": "komamitsu", "createdAt": "2020-11-05T10:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2NTE1NA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518465154", "bodyText": "I added ToDo comments on it for future improvements.", "author": "yoyama", "createdAt": "2020-11-06T01:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MjIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "6fb313a7729ff94ef44494b142f4dca76676f2e3", "chunk": "diff --git a/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java b/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java\nindex 02a2a5a7cc..165f0753bd 100644\n--- a/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java\n+++ b/digdag-standards/src/main/java/io/digdag/standards/operator/PyOperatorFactory.java\n\n@@ -149,19 +149,38 @@ public class PyOperatorFactory\n                     // Remove the polling state after fetching the result so that the result fetch can be retried\n                     // without resubmitting the code.\n                     state.remove(\"commandStatus\");\n-                    String reason = getErrorReason(status, commandContext);\n-                    throw new RuntimeException(reason);\n-                }\n-                else {\n+\n+                    StringBuilder reason = new StringBuilder();\n+                    reason.append(\"Python command failed with code \").append(statusCode);\n+                    // If the error message and stacktrace are available in outFile,\n+                    // throw RuntimeException with them.\n                     final Path outputPath = commandContext.getLocalProjectPath().resolve(status.getIoDirectory()).resolve(OUTPUT_FILE);\n-                    if (Files.exists(outputPath)) {\n-                        try (final InputStream in = Files.newInputStream(outputPath)) {\n-                            return mapper.readValue(in, Config.class);\n+                    try (final InputStream in = Files.newInputStream(outputPath)) {\n+                        Config out = mapper.readValue(in, Config.class);\n+                        Config err = out.getNestedOrGetEmpty(\"error\");\n+                        Optional<String> errClass = err.getOptional(\"class\", String.class);\n+                        Optional<String> errMessage = err.getOptional(\"message\", String.class);\n+                        List<String> errBacktrace = err.getListOrEmpty(\"backtrace\", String.class);\n+                        if (errMessage.isPresent()) {\n+                            reason.append(\": \").append(errMessage.get());\n+                        }\n+                        if (errClass.isPresent()) {\n+                            reason.append(\" (\").append(errClass.get()).append(\")\");\n+                        }\n+                        if (!errBacktrace.isEmpty()) {\n+                            reason.append(\"\\n\\tfrom \");\n+                            reason.append(String.join(\"\\n\\tfrom \", errBacktrace));\n                         }\n                     }\n-                    else { // No existence of output.json is unexpected. Should be failure.\n-                        throw new RuntimeException(\"output.json does not exist. Something unexpected error happened. Please check logs.\");\n+                    catch (JsonMappingException ex) {\n+                        // comes here if runner.rb fails before writing outFile.\n                     }\n+                    throw new RuntimeException(reason.toString());\n+                }\n+\n+                final Path outputPath = commandContext.getLocalProjectPath().resolve(status.getIoDirectory()).resolve(OUTPUT_FILE);\n+                try (final InputStream in = Files.newInputStream(outputPath)) {\n+                    return mapper.readValue(in, Config.class);\n                 }\n             }\n             else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514910319", "bodyText": "This {  should be put in next line", "author": "komamitsu", "createdAt": "2020-10-30T07:20:38Z", "path": "digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.digdag.standards.operator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Optional;\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandExecutor;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.OperatorContext;\n+import io.digdag.spi.TaskRequest;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import io.digdag.standards.operator.PyOperatorFactory.PyOperator;\n+\n+public class PyOperatorFactoryTest\n+{\n+\t@Rule\n+\tpublic TemporaryFolder folder = new TemporaryFolder();\n+\n+\tprivate Path tempPath;\n+\tprivate PyOperatorFactory factory;\n+\tprivate Config config;\n+\tprivate ObjectMapper objectMapper = DigdagClient.objectMapper();\n+\tprivate CommandExecutor exec;\n+\tprivate OperatorContext operatorContext;\n+\tprivate TaskRequest taskRequest;\n+\n+\t@Before\n+\tpublic void setUp()\n+\t{\n+\t\ttempPath = folder.getRoot().toPath();\n+\n+\t\texec = mock(CommandExecutor.class);\n+\t\tfactory = new PyOperatorFactory(exec, objectMapper);\n+\t\tconfig = new ConfigFactory(objectMapper).create();\n+\t\toperatorContext = mock(OperatorContext.class);\n+\t\ttaskRequest = mock(TaskRequest.class);\n+\t\tdoReturn(tempPath).when(operatorContext).getProjectPath();\n+\t\tdoReturn(taskRequest).when(operatorContext).getTaskRequest();\n+\t\tdoReturn(config).when(taskRequest).getConfig();\n+\t}\n+\n+\t@Test\n+\tpublic void testGetErrorReason() throws IOException {", "originalCommit": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNDk0MQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514914941", "bodyText": "Oh! Thanks. will fix it.", "author": "yoyama", "createdAt": "2020-10-30T07:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyNjI4Nw==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514926287", "bodyText": "Fixed it.", "author": "yoyama", "createdAt": "2020-10-30T08:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "da3ad72b8ed5c23d71e67df5bc2abe219f61d18d", "chunk": "diff --git a/digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java b/digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java\nindex b461f15ff1..8c07dc0d80 100644\n--- a/digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java\n+++ b/digdag-standards/src/test/java/io/digdag/standards/operator/PyOperatorFactoryTest.java\n\n@@ -22,7 +22,6 @@ import java.nio.file.Path;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxNTE2MA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r514915160", "bodyText": "This is because the CI sometimes failed in this test.", "author": "yoyama", "createdAt": "2020-10-30T07:34:08Z", "path": "digdag-tests/src/test/java/acceptance/DockerIT.java", "diffHunk": "@@ -184,7 +184,7 @@ public void verifyPyOnDocker()\n         // Wait for the attempt to complete\n         {\n             RestSessionAttempt attempt = null;\n-            for (int i = 0; i < 30; i++) {\n+            for (int i = 0; i < 60; i++) {", "originalCommit": "cb17e61dea5da93a9bd21b3ffd8f91be971a3ec5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fb313a7729ff94ef44494b142f4dca76676f2e3", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/DockerIT.java b/digdag-tests/src/test/java/acceptance/DockerIT.java\nindex c86cd6d706..1cc7d702d1 100644\n--- a/digdag-tests/src/test/java/acceptance/DockerIT.java\n+++ b/digdag-tests/src/test/java/acceptance/DockerIT.java\n\n@@ -184,7 +184,7 @@ public class DockerIT\n         // Wait for the attempt to complete\n         {\n             RestSessionAttempt attempt = null;\n-            for (int i = 0; i < 60; i++) {\n+            for (int i = 0; i < 30; i++) {\n                 attempt = client.getSessionAttempt(attemptId);\n                 if (attempt.getDone()) {\n                     break;\n"}}, {"oid": "da3ad72b8ed5c23d71e67df5bc2abe219f61d18d", "url": "https://github.com/treasure-data/digdag/commit/da3ad72b8ed5c23d71e67df5bc2abe219f61d18d", "message": "Fix NPE when getting errorMessage in TaskSetNotFoundException", "committedDate": "2020-11-04T02:46:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517923881", "bodyText": "Maybe this line should be separated into multiple lines?", "author": "komamitsu", "createdAt": "2020-11-05T09:54:51Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java", "diffHunk": "@@ -386,6 +389,27 @@ else if (defaultCommandTaskTTL.isPresent() && isRunningLongerThanTTL(previousSta\n         return EcsCommandStatus.of(false, nextStatus);\n     }\n \n+    @VisibleForTesting\n+    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    {\n+        Optional<String> errorMessage = Optional.absent();\n+        try {\n+            final Task task = client.getTask(cluster, taskArn);\n+            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).filter(r -> !Strings.isNullOrEmpty(r)).collect(Collectors.toList());", "originalCommit": "774764bb33c265eb4676fb066fa9db032b7aee7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MTY5MA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518451690", "bodyText": "Good point. Thanks, will fix it.", "author": "yoyama", "createdAt": "2020-11-06T00:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ2Mjk4MA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518462980", "bodyText": "Fixed it.", "author": "yoyama", "createdAt": "2020-11-06T01:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyMzg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6fb313a7729ff94ef44494b142f4dca76676f2e3", "chunk": "diff --git a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\nindex 44705696f2..49e4fb33ee 100644\n--- a/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n+++ b/digdag-standards/src/main/java/io/digdag/standards/command/EcsCommandExecutor.java\n\n@@ -390,23 +391,25 @@ public class EcsCommandExecutor\n     }\n \n     @VisibleForTesting\n-    static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n+    private static Optional<String> getErrorMessageFromTask(String cluster, String taskArn, EcsClient client)\n     {\n         Optional<String> errorMessage = Optional.absent();\n         try {\n             final Task task = client.getTask(cluster, taskArn);\n-            final List<String> reasons = task.getContainers().stream().map(c -> c.getReason()).filter(r -> !Strings.isNullOrEmpty(r)).collect(Collectors.toList());\n-            if (reasons.size() > 0) {\n-                errorMessage = Optional.of(String.join(\",\", reasons));\n+            if (task.getContainers().size() > 0) {\n+                task.getContainers().get(0).getReason();\n             }\n             else {\n                 errorMessage = Optional.of(\"No container information\");\n             }\n         }\n         catch (TaskSetNotFoundException e) {\n-            errorMessage = Optional.fromNullable(e.getErrorMessage());\n+            errorMessage = Optional.of(e.getErrorMessage());\n \n         }\n+        catch (RuntimeException re) {\n+            errorMessage = Optional.of(re.getMessage());\n+        }\n         return errorMessage;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMzQyNA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517933424", "bodyText": "\ud83d\udcaf", "author": "komamitsu", "createdAt": "2020-11-05T10:09:42Z", "path": "digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package io.digdag.standards.command;\n+\n+import com.amazonaws.services.ecs.model.Container;\n+import com.amazonaws.services.ecs.model.Task;\n+import com.amazonaws.services.ecs.model.TaskSetNotFoundException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.base.Optional;\n+import io.digdag.client.config.Config;\n+import io.digdag.client.config.ConfigFactory;\n+import io.digdag.core.archive.ProjectArchiveLoader;\n+import io.digdag.core.storage.StorageManager;\n+import io.digdag.spi.CommandContext;\n+import io.digdag.spi.CommandLogger;\n+import io.digdag.spi.CommandRequest;\n+import io.digdag.spi.CommandStatus;\n+import io.digdag.spi.TaskRequest;\n+import io.digdag.standards.command.ecs.EcsClient;\n+import io.digdag.standards.command.ecs.EcsClientConfig;\n+import io.digdag.standards.command.ecs.EcsClientFactory;\n+import io.digdag.standards.command.EcsCommandExecutor.EcsCommandStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Arrays;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EcsCommandExecutorTest", "originalCommit": "774764bb33c265eb4676fb066fa9db032b7aee7b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6fb313a7729ff94ef44494b142f4dca76676f2e3", "chunk": "diff --git a/digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java b/digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java\ndeleted file mode 100644\nindex 71a708634f..0000000000\n--- a/digdag-standards/src/test/java/io/digdag/standards/command/EcsCommandExecutorTest.java\n+++ /dev/null\n\n@@ -1,154 +0,0 @@\n-package io.digdag.standards.command;\n-\n-import com.amazonaws.services.ecs.model.Container;\n-import com.amazonaws.services.ecs.model.Task;\n-import com.amazonaws.services.ecs.model.TaskSetNotFoundException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.google.common.base.Optional;\n-import io.digdag.client.config.Config;\n-import io.digdag.client.config.ConfigFactory;\n-import io.digdag.core.archive.ProjectArchiveLoader;\n-import io.digdag.core.storage.StorageManager;\n-import io.digdag.spi.CommandContext;\n-import io.digdag.spi.CommandLogger;\n-import io.digdag.spi.CommandRequest;\n-import io.digdag.spi.CommandStatus;\n-import io.digdag.spi.TaskRequest;\n-import io.digdag.standards.command.ecs.EcsClient;\n-import io.digdag.standards.command.ecs.EcsClientConfig;\n-import io.digdag.standards.command.ecs.EcsClientFactory;\n-import io.digdag.standards.command.EcsCommandExecutor.EcsCommandStatus;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import java.util.Arrays;\n-\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n-import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.doThrow;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.when;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class EcsCommandExecutorTest\n-{\n-    private final ObjectMapper om = new ObjectMapper();\n-    private final ConfigFactory configFactory = new ConfigFactory(om);\n-\n-    private Config systemConfig;\n-    @Mock private EcsClientFactory ecsClientFactory;\n-    @Mock private DockerCommandExecutor dockerCommandExecutor;\n-    @Mock private StorageManager storageManager;\n-    @Mock private ProjectArchiveLoader projectArchiveLoader;\n-    @Mock private CommandLogger commandLogger;\n-\n-    @Before\n-    public void setUp()\n-            throws Exception\n-    {\n-        this.systemConfig = configFactory.create();\n-    }\n-\n-    @Test\n-    public void testRun()\n-            throws Exception\n-    {\n-        final EcsCommandExecutor executor = spy(new EcsCommandExecutor(\n-                systemConfig, ecsClientFactory, dockerCommandExecutor,\n-                storageManager, projectArchiveLoader, commandLogger));\n-\n-        final EcsCommandExecutor.EcsCommandStatus commandStatus = EcsCommandStatus.of(false, om.createObjectNode().put(\"foo\", \"bar\"));\n-        doReturn(mock(EcsClientConfig.class)).when(executor).createEcsClientConfig(any(Optional.class), any(Config.class), any(Config.class));\n-        doReturn(commandStatus).when(executor).run(any(CommandContext.class), any(CommandRequest.class));\n-        when(ecsClientFactory.createClient(any(EcsClientConfig.class))).thenReturn(mock(EcsClient.class));\n-\n-        CommandContext commandContext = mock(CommandContext.class);\n-        CommandRequest commandRequest = mock(CommandRequest.class);\n-        doReturn(mock(TaskRequest.class)).when(commandContext).getTaskRequest();\n-\n-        CommandStatus actual = executor.run(commandContext, commandRequest);\n-        assertThat(actual.isFinished(), is(commandStatus.isFinished()));\n-        assertThat(actual.toJson(), is(commandStatus.toJson()));\n-    }\n-\n-    @Test\n-    public void testPoll()\n-            throws Exception\n-    {\n-        final EcsClient ecsClient = mock(EcsClient.class);\n-        final CommandContext commandContext = mock(CommandContext.class);\n-        final EcsCommandExecutor executor = spy(new EcsCommandExecutor(\n-                systemConfig, ecsClientFactory, dockerCommandExecutor,\n-                storageManager, projectArchiveLoader, commandLogger));\n-        final EcsCommandStatus commandStatus = EcsCommandStatus.of(false, om.createObjectNode().put(\"foo\", \"bar\"));\n-\n-        doReturn(mock(EcsClientConfig.class)).when(executor).createEcsClientConfig(any(Optional.class), any(Config.class), any(Config.class));\n-        doReturn(ecsClient).when(ecsClientFactory).createClient(any(EcsClientConfig.class));\n-        doReturn(mock(TaskRequest.class)).when(commandContext).getTaskRequest();\n-        doReturn(commandStatus).when(executor).createNextCommandStatus(any(CommandContext.class), any(EcsClient.class), any(ObjectNode.class));\n-\n-        ObjectNode previousStatusJson = om.createObjectNode()\n-                .put(\"cluster_name\", \"my_cluster\")\n-                .put(\"task_arn\", \"my_task_arn\");\n-\n-        CommandStatus actual = executor.poll(commandContext, previousStatusJson);\n-\n-        assertThat(actual.isFinished(), is(commandStatus.isFinished()));\n-        assertThat(actual.toJson(), is(commandStatus.toJson()));\n-    }\n-\n-    @Test\n-    public void testGetErrorMessageFromTask()\n-    {\n-        final EcsClient ecsClient = mock(EcsClient.class);\n-        final Task task = mock(Task.class);\n-        doReturn(task).when(ecsClient).getTask(any(String.class), any(String.class));\n-\n-        {\n-            Optional<String> msg1 = EcsCommandExecutor.getErrorMessageFromTask(\"my_cluster\", \"my_task_arn\", ecsClient);\n-            assertThat(msg1.or(\"test failed\"), is(\"No container information\"));\n-        }\n-        {\n-            Container container = mock(Container.class);\n-            doReturn(Arrays.asList(container)).when(task).getContainers();\n-            doReturn(\"test test test\").when(container).getReason();\n-            Optional<String> msg1 = EcsCommandExecutor.getErrorMessageFromTask(\"my_cluster\", \"my_task_arn\", ecsClient);\n-            assertThat(msg1.or(\"test failed\"), is(\"test test test\"));\n-        }\n-        {  // null or \"\" in getReason() is ignored.\n-            Container container1 = mock(Container.class);\n-            Container container2 = mock(Container.class);\n-            doReturn(Arrays.asList(container1, container2)).when(task).getContainers();\n-            doReturn(null).when(container1).getReason();\n-            doReturn(\"\").when(container2).getReason();\n-            Optional<String> msg1 = EcsCommandExecutor.getErrorMessageFromTask(\"my_cluster\", \"my_task_arn\", ecsClient);\n-            assertThat(msg1.or(\"test failed\"), is(\"No container information\"));\n-        }\n-        {\n-            doThrow(new TaskSetNotFoundException(\"No task set found\")).when(ecsClient).getTask(any(String.class), any(String.class));\n-            Optional<String> msg1 = EcsCommandExecutor.getErrorMessageFromTask(\"my_cluster\", \"my_task_arn\", ecsClient);\n-            assertThat(msg1.or(\"test failed\"), is(\"No task set found\"));\n-        }\n-        {\n-            doThrow(new RuntimeException(\"Task aborted\")).when(ecsClient).getTask(any(String.class), any(String.class));\n-            try {\n-                Optional<String> msg1 = EcsCommandExecutor.getErrorMessageFromTask(\"my_cluster\", \"my_task_arn\", ecsClient);\n-                fail(\"Test failed without RuntimeException\");\n-            }\n-            catch (RuntimeException re) {\n-                assertThat(re.getMessage(), is(\"Task aborted\"));\n-            }\n-            catch (Exception e) {\n-                fail(\"Unexpected Exception happened. \" + e.toString());\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNzg4NA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r517937884", "bodyText": "[just an idea] Maybe we'd better merge isFinished and statusCode into an Optional<Integer> in the future so that we can avoid unexpectedly using status code when not finished.", "author": "komamitsu", "createdAt": "2020-11-05T10:16:45Z", "path": "digdag-spi/src/main/java/io/digdag/spi/CommandStatus.java", "diffHunk": "@@ -13,11 +14,20 @@\n     boolean isFinished();\n \n     /**\n-     * Return exit code of command finished. It7s valid only when isFiished returns true.\n+     * Return exit code of command finished. It is valid only when isFinished returns true.", "originalCommit": "774764bb33c265eb4676fb066fa9db032b7aee7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MjAzOA==", "url": "https://github.com/treasure-data/digdag/pull/1471#discussion_r518452038", "bodyText": "Make sense for me. I will add ToDo about it.", "author": "yoyama", "createdAt": "2020-11-06T00:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNzg4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6fb313a7729ff94ef44494b142f4dca76676f2e3", "url": "https://github.com/treasure-data/digdag/commit/6fb313a7729ff94ef44494b142f4dca76676f2e3", "message": "Add error message in CommandStatus and implement it in EcsCommandExecutor.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "4b9018bfef1f7757b2cc8408bb6bc9f7cdf6ea2f", "url": "https://github.com/treasure-data/digdag/commit/4b9018bfef1f7757b2cc8408bb6bc9f7cdf6ea2f", "message": "Add error handling and refactoring.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "82818c3f7159057d0fc528bb2b4d4a658da89104", "url": "https://github.com/treasure-data/digdag/commit/82818c3f7159057d0fc528bb2b4d4a658da89104", "message": "Fix getErrorMessageFromTask()", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "80ea67cba35355c6fc38337f593f44d2eb6e789b", "url": "https://github.com/treasure-data/digdag/commit/80ea67cba35355c6fc38337f593f44d2eb6e789b", "message": "Add test cases.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "05dc847fb55ee5d08acda05695119ad5863ce3e6", "url": "https://github.com/treasure-data/digdag/commit/05dc847fb55ee5d08acda05695119ad5863ce3e6", "message": "Increase wait to mitigate CI error.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "a3d5640315faa88a6e05aecdef5f5a3129a8139a", "url": "https://github.com/treasure-data/digdag/commit/a3d5640315faa88a6e05aecdef5f5a3129a8139a", "message": "Modify getErrorReason(), add tests.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "662a1850ad7838828a9b1a2971f57f6e31cf2104", "url": "https://github.com/treasure-data/digdag/commit/662a1850ad7838828a9b1a2971f57f6e31cf2104", "message": "Fix a test error in PyIT", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "b30e7b23799c5c76fa23f767b300934706c5ac51", "url": "https://github.com/treasure-data/digdag/commit/b30e7b23799c5c76fa23f767b300934706c5ac51", "message": "Refactoring", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "8e46bb23f7d65c7db687d5d58642eee44bf53f53", "url": "https://github.com/treasure-data/digdag/commit/8e46bb23f7d65c7db687d5d58642eee44bf53f53", "message": "Fix some issues based on the PR reviews.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "31ddf1639a293771b1e9fd87dae738db53d89401", "url": "https://github.com/treasure-data/digdag/commit/31ddf1639a293771b1e9fd87dae738db53d89401", "message": "Fix an issue on coding style.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "60a1b29821e195e3a0e4930e0f851874cc268fd4", "url": "https://github.com/treasure-data/digdag/commit/60a1b29821e195e3a0e4930e0f851874cc268fd4", "message": "Fix NPE when getting errorMessage in TaskSetNotFoundException", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "31c55a17e47632bc8ff64f450f795760f5e377a3", "url": "https://github.com/treasure-data/digdag/commit/31c55a17e47632bc8ff64f450f795760f5e377a3", "message": "Fix null porcessing issue in getErrorMessageFromTask().", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "8dac754282d3785c210c0adf8d86a2bea5769b9f", "url": "https://github.com/treasure-data/digdag/commit/8dac754282d3785c210c0adf8d86a2bea5769b9f", "message": "Minor refactoring add ToDo comment for future enhancements.", "committedDate": "2020-11-06T05:30:17Z", "type": "commit"}, {"oid": "8dac754282d3785c210c0adf8d86a2bea5769b9f", "url": "https://github.com/treasure-data/digdag/commit/8dac754282d3785c210c0adf8d86a2bea5769b9f", "message": "Minor refactoring add ToDo comment for future enhancements.", "committedDate": "2020-11-06T05:30:17Z", "type": "forcePushed"}]}