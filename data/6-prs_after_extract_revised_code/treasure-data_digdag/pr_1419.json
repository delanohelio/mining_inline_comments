{"pr_number": 1419, "pr_title": "Fix resume mode to work correctly when group retry happened", "pr_createdAt": "2020-06-18T05:52:16Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1419", "timeline": [{"oid": "51c07dcdda24c7327d94428baa047dcd4a7b3d1a", "url": "https://github.com/treasure-data/digdag/commit/51c07dcdda24c7327d94428baa047dcd4a7b3d1a", "message": "Fix resume mode to work correctly when group retry happened", "committedDate": "2020-06-18T05:09:37Z", "type": "commit"}, {"oid": "d3750b060c3f48e6f3ed0bcb228827525399b173", "url": "https://github.com/treasure-data/digdag/commit/d3750b060c3f48e6f3ed0bcb228827525399b173", "message": "Add test cases for group retry", "committedDate": "2020-06-18T05:09:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTY1Ng==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464209656", "bodyText": "Project name and workflow name and command are all same name \"retry\" ?\nIt ma be a bit confused for me.", "author": "yoyama", "createdAt": "2020-08-03T06:03:54Z", "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"retry\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"retry\", \"retry\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"retry\");", "originalCommit": "d3750b060c3f48e6f3ed0bcb228827525399b173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNTM1OQ==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464235359", "bodyText": "I agree with you.. sorry for confusing, let me update project and workflow name.", "author": "szyn", "createdAt": "2020-08-03T07:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "097748699e2f79fe5a2f029ed70b10fcfb8f2ec8", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\nindex ab26a9c5c1..e12996ba1b 100644\n--- a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n+++ b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n\n@@ -54,7 +54,7 @@ public class GroupRetryIT\n                 .build();\n \n         // Push the project\n-        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"retry\");\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n \n         // Start the workflow\n         Id originalAttemptId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTk3OA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464209978", "bodyText": "May I ask you the purpose to check \"retry_count\" ?", "author": "yoyama", "createdAt": "2020-08-03T06:05:00Z", "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,16 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        List<Long> groupRetryErrorTaskIds = tasks.stream()\n+                .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))", "originalCommit": "d3750b060c3f48e6f3ed0bcb228827525399b173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNDM4OA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464234388", "bodyText": "Yes, it's to determine if a group retry has occurred or not.\nWhenever a group retry occurs, there is a retry_count in stateParams.", "author": "szyn", "createdAt": "2020-08-03T07:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTc0MQ==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464769741", "bodyText": "Got it. Thanks for your explanation.", "author": "yoyama", "createdAt": "2020-08-04T02:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyNjQ0Ng==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r469026446", "bodyText": "Using retry_count as the switch of group retry seems a bit weird to me (Sorry if we've already discussed it. I may have had a wrong idea) since I thought retry_count is a just retry count for unexpected failures not like affecting the graph of tasks.", "author": "komamitsu", "createdAt": "2020-08-12T06:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwOTk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "chunk": "diff --git a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\nindex 2965f8113b..d9276d7e42 100644\n--- a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n+++ b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n\n@@ -302,6 +302,8 @@ public class AttemptResource\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        // Collect tasksIds in which a group retry occurred.\n+        // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n         List<Long> groupRetryErrorTaskIds = tasks.stream()\n                 .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))\n                 .map(task -> task.getId())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDU5Nw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464210597", "bodyText": "May I ask you the reason you choose first one ?", "author": "yoyama", "createdAt": "2020-08-03T06:07:01Z", "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -344,7 +353,11 @@ private ArchivedTask matchTaskPattern(String pattern, List<ArchivedTask> tasks)\n                     tasks\n                             .stream()\n                             .collect(\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t)\n+                                    // Avoid 500 error due to duplicate key ArchivedTask\n+                                    // if a group retry happened, IllegalStateException will be thrown\n+                                    // because there are multiple tasks of the same name.\n+                                    // Take the first one to make sure it is appropriately resumed.\n+                                    Collectors.toMap(t -> t.getFullName(), t -> t, (a, b) -> a)", "originalCommit": "d3750b060c3f48e6f3ed0bcb228827525399b173", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNTExMQ==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464235111", "bodyText": "There is no specific reason. Either is fine because of the same name.", "author": "szyn", "createdAt": "2020-08-03T07:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTk4Nw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r464769987", "bodyText": "Ah you need only the name. Got it. Thanks!", "author": "yoyama", "createdAt": "2020-08-04T02:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "chunk": "diff --git a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\nindex 2965f8113b..d9276d7e42 100644\n--- a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n+++ b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n\n@@ -357,7 +359,7 @@ public class AttemptResource\n                                     // if a group retry happened, IllegalStateException will be thrown\n                                     // because there are multiple tasks of the same name.\n                                     // Take the first one to make sure it is appropriately resumed.\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t, (a, b) -> a)\n+                                    Collectors.toMap(t -> t.getFullName(), t -> t, (a, b) -> b)\n                             ));\n         }\n         catch (TaskMatchPattern.MultipleTaskMatchException | TaskMatchPattern.NoMatchException ex) {\n"}}, {"oid": "097748699e2f79fe5a2f029ed70b10fcfb8f2ec8", "url": "https://github.com/treasure-data/digdag/commit/097748699e2f79fe5a2f029ed70b10fcfb8f2ec8", "message": "Update project and workflow names", "committedDate": "2020-08-03T06:21:37Z", "type": "commit"}, {"oid": "e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "url": "https://github.com/treasure-data/digdag/commit/e1fd9ea9c45ae368f75fbe55b3e989898bb01770", "message": "Add a comment", "committedDate": "2020-08-03T07:09:57Z", "type": "commit"}, {"oid": "2bac46730d99d25fd18daa10c1077eb1adec75f1", "url": "https://github.com/treasure-data/digdag/commit/2bac46730d99d25fd18daa10c1077eb1adec75f1", "message": "Add some test cases for group retry", "committedDate": "2020-08-05T07:03:57Z", "type": "commit"}, {"oid": "1242674f2bc34dde75cbacfc42572c006be4084d", "url": "https://github.com/treasure-data/digdag/commit/1242674f2bc34dde75cbacfc42572c006be4084d", "message": "Add filter to exclude dynamically generated tasks from successTasks", "committedDate": "2020-08-05T07:07:18Z", "type": "commit"}, {"oid": "4ce47a9f6244c277506da513e425d7d25b79f16e", "url": "https://github.com/treasure-data/digdag/commit/4ce47a9f6244c277506da513e425d7d25b79f16e", "message": "Add a new line", "committedDate": "2020-08-05T07:14:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MjUyNg==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466852526", "bodyText": "resume failed ?", "author": "yoyama", "createdAt": "2020-08-07T06:45:29Z", "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3NTczMw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466875733", "bodyText": "resume failed actually means retry failed tasks. My understanding that it comes from here: \n  \n    \n      digdag/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n    \n    \n        Lines 220 to 224\n      in\n      1f277a0\n    \n    \n    \n    \n\n        \n          \n           switch (resume.getMode()) { \n        \n\n        \n          \n               case FAILED: \n        \n\n        \n          \n                   return collectResumingTasksForResumeFailedMode( \n        \n\n        \n          \n                           RestModels.parseAttemptId( \n        \n\n        \n          \n                                   ((RestSessionAttemptRequest.ResumeFailed) resume).getAttemptId()));", "author": "szyn", "createdAt": "2020-08-07T07:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MjUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNzgwNA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r469037804", "bodyText": "So resume failed tasks or something is clearer?", "author": "komamitsu", "createdAt": "2020-08-12T06:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MjUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\nindex 10d821350d..30a59fc24a 100644\n--- a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n+++ b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n\n@@ -101,7 +101,7 @@ public class GroupRetryIT\n         assertOutputExists(retry1 + \"1-2b\", true);\n         assertOutputExists(retry1 + \"1-2c\", false);\n \n-        // Retry with the latest fixed revision & resume failed\n+        // Retry with the latest fixed revision & resume failed tasks\n         Id retry2;\n         {\n             CommandStatus retryStatus = main(\"retry\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzI2MA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466853260", "bodyText": "ditto. it seems you may expect to succeed.", "author": "yoyama", "createdAt": "2020-08-07T06:47:32Z", "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\nindex 10d821350d..30a59fc24a 100644\n--- a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n+++ b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n\n@@ -101,7 +101,7 @@ public class GroupRetryIT\n         assertOutputExists(retry1 + \"1-2b\", true);\n         assertOutputExists(retry1 + \"1-2c\", false);\n \n-        // Retry with the latest fixed revision & resume failed\n+        // Retry with the latest fixed revision & resume failed tasks\n         Id retry2;\n         {\n             CommandStatus retryStatus = main(\"retry\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1NzUzNw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466857537", "bodyText": "I am not sure that this is really expected behavior or not.", "author": "yoyama", "createdAt": "2020-08-07T06:58:44Z", "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", true);   // no-skipped, +group1 has _retry", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\nindex 10d821350d..30a59fc24a 100644\n--- a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n+++ b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n\n@@ -101,7 +101,7 @@ public class GroupRetryIT\n         assertOutputExists(retry1 + \"1-2b\", true);\n         assertOutputExists(retry1 + \"1-2c\", false);\n \n-        // Retry with the latest fixed revision & resume failed\n+        // Retry with the latest fixed revision & resume failed tasks\n         Id retry2;\n         {\n             CommandStatus retryStatus = main(\"retry\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTUyMg==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r466859522", "bodyText": "ditto ?", "author": "yoyama", "createdAt": "2020-08-07T07:03:26Z", "path": "digdag-tests/src/test/java/acceptance/GroupRetryIT.java", "diffHunk": "@@ -0,0 +1,583 @@\n+package acceptance;\n+\n+import com.google.common.io.Resources;\n+import io.digdag.client.DigdagClient;\n+import io.digdag.client.api.Id;\n+import io.digdag.client.api.RestSessionAttempt;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import utils.CommandStatus;\n+import utils.TemporaryDigdagServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static utils.TestUtils.addWorkflow;\n+import static utils.TestUtils.getAttemptId;\n+import static utils.TestUtils.main;\n+\n+public class GroupRetryIT\n+{\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Rule\n+    public TemporaryDigdagServer server = TemporaryDigdagServer.of();\n+\n+    private Path config;\n+    private Path projectDir;\n+\n+    @Before\n+    public void setUp()\n+            throws Exception\n+    {\n+        config = folder.newFile().toPath();\n+\n+        projectDir = folder.getRoot().toPath().resolve(\"group_retry\");\n+        Files.createDirectory(projectDir);\n+    }\n+\n+    @Test\n+    public void testGroupRetry()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push a new revision\n+        pushRevision(\"acceptance/group_retry/retry-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithLoop()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"0-1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"0-1-2a\", true);\n+        assertOutputExists(retry1 + \"0-1-2b\", true);\n+        assertOutputExists(retry1 + \"0-1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", false);  // skipped\n+        assertOutputExists(retry2 + \"0-2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"0-2-2c\", true);\n+        assertOutputExists(retry2 + \"2-2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"0-2-2a\", true);\n+        assertOutputExists(retry3 + \"0-2-2b\", true);\n+        assertOutputExists(retry3 + \"0-2-2c\", true);\n+        assertOutputExists(retry3 + \"2-2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-loop-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+step2\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"0-3-2a\", true);\n+        assertOutputExists(retry4 + \"0-3-2b\", true);\n+        assertOutputExists(retry4 + \"0-3-2c\", true);\n+        assertOutputExists(retry4 + \"2-3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithNestedGroup()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+        // Retry with the latest fixed revision & resume failed\n+        Id retry2;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry2 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry2).getSuccess(), is(true));\n+\n+        assertOutputExists(retry2 + \"2-1\", true);   // no-skipped, +group1 has _retry\n+        assertOutputExists(retry2 + \"2-2a\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2b\", true);  // no-skipped\n+        assertOutputExists(retry2 + \"2-2c\", true);\n+\n+        // Retry with the latest fixed revision & resume all\n+        Id retry3;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.code(), is(0));\n+            retry3 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry3).getSuccess(), is(true));\n+\n+        assertOutputExists(retry3 + \"2-1\", true);\n+        assertOutputExists(retry3 + \"2-2a\", true);\n+        assertOutputExists(retry3 + \"2-2b\", true);\n+        assertOutputExists(retry3 + \"2-2c\", true);\n+\n+        // Push another new revision\n+        pushRevision(\"acceptance/group_retry/retry-with-nested-group-3.dig\", \"test\");\n+\n+        // Retry with the latest fixed revision & resume from\n+        Id retry4;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--latest-revision\",\n+                    \"--resume-from\", \"+group1+step2+a\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry4 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to success\n+        assertThat(joinAttempt(client, retry4).getSuccess(), is(true));\n+\n+        assertOutputExists(retry4 + \"3-1\", false); // skipped\n+        assertOutputExists(retry4 + \"3-2a\", true);\n+        assertOutputExists(retry4 + \"3-2b\", true);\n+        assertOutputExists(retry4 + \"3-2c\", true);\n+    }\n+\n+    @Test\n+    public void testGroupRetryWithCall()\n+            throws Exception\n+    {\n+        DigdagClient client = DigdagClient.builder()\n+                .host(server.host())\n+                .port(server.port())\n+                .build();\n+\n+        // Push the project\n+        addWorkflow(projectDir, \"acceptance/group_retry/child.dig\");\n+        pushRevision(\"acceptance/group_retry/retry-with-call-1.dig\", \"test\");\n+\n+        // Start the workflow\n+        Id originalAttemptId;\n+        {\n+            CommandStatus startStatus = main(\"start\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"group_retry\", \"test\",\n+                    \"--session\", \"now\");\n+            assertThat(startStatus.errUtf8(), startStatus.code(), is(0));\n+            originalAttemptId = getAttemptId(startStatus);\n+        }\n+\n+        // Wait for the attempt to fail\n+        assertThat(joinAttempt(client, originalAttemptId).getSuccess(), is(false));\n+\n+        assertOutputExists(originalAttemptId + \"1-1\", true);\n+        assertOutputExists(originalAttemptId + \"1-2a\", true);\n+        assertOutputExists(originalAttemptId + \"1-2b\", true);\n+        assertOutputExists(originalAttemptId + \"1-2c\", false);\n+\n+        // Push the project\n+        pushRevision(\"acceptance/group_retry/retry-with-call-2.dig\", \"test\");\n+\n+        // Retry without updating the revision: --keep-revision\n+        Id retry1;\n+        {\n+            CommandStatus retryStatus = main(\"retry\",\n+                    \"-c\", config.toString(),\n+                    \"-e\", server.endpoint(),\n+                    \"--keep-revision\",\n+                    \"--all\",\n+                    String.valueOf(originalAttemptId));\n+            assertThat(retryStatus.errUtf8(), retryStatus.code(), is(0));\n+            retry1 = getAttemptId(retryStatus);\n+        }\n+\n+        // Wait for the attempt to fail again\n+        assertThat(joinAttempt(client, retry1).getSuccess(), is(false));\n+\n+        assertOutputExists(retry1 + \"1-1\", true);\n+        assertOutputExists(retry1 + \"1-2a\", true);\n+        assertOutputExists(retry1 + \"1-2b\", true);\n+        assertOutputExists(retry1 + \"1-2c\", false);\n+\n+\n+        // Retry with the latest fixed revision & resume failed", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "chunk": "diff --git a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\nindex 10d821350d..30a59fc24a 100644\n--- a/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n+++ b/digdag-tests/src/test/java/acceptance/GroupRetryIT.java\n\n@@ -101,7 +101,7 @@ public class GroupRetryIT\n         assertOutputExists(retry1 + \"1-2b\", true);\n         assertOutputExists(retry1 + \"1-2c\", false);\n \n-        // Retry with the latest fixed revision & resume failed\n+        // Retry with the latest fixed revision & resume failed tasks\n         Id retry2;\n         {\n             CommandStatus retryStatus = main(\"retry\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3OTAxNA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468379014", "bodyText": "// Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n\n\nThis might be a silly question... but what does it mean if the group error task has no retry_count?", "author": "komamitsu", "createdAt": "2020-08-11T07:25:47Z", "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,19 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        // Collect tasksIds in which a group retry occurred.\n+        // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ0MDI4Mw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468440283", "bodyText": "It means that group error has occurred, but no group retry has occurred. I added the same description to the codebase :)", "author": "szyn", "createdAt": "2020-08-11T09:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3OTAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "4fdbdb12e3e1f80482eec6821379c6d22d8c01e8", "chunk": "diff --git a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\nindex b56bb718da..654addc6a9 100644\n--- a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n+++ b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n\n@@ -304,6 +304,7 @@ public class AttemptResource\n \n         // Collect tasksIds in which a group retry occurred.\n         // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n+        // group_error task has no retry_count means that group error has occurred, but no group retry has occurred.\n         List<Long> groupRetryErrorTaskIds = tasks.stream()\n                 .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))\n                 .map(task -> task.getId())\n"}}, {"oid": "0d2b12ae63f8b8d8a492ba22af61be95b854b87e", "url": "https://github.com/treasure-data/digdag/commit/0d2b12ae63f8b8d8a492ba22af61be95b854b87e", "message": "Update val", "committedDate": "2020-08-11T08:32:43Z", "type": "commit"}, {"oid": "4fdbdb12e3e1f80482eec6821379c6d22d8c01e8", "url": "https://github.com/treasure-data/digdag/commit/4fdbdb12e3e1f80482eec6821379c6d22d8c01e8", "message": "Add comments about group_error task has no retry_count", "committedDate": "2020-08-11T08:47:40Z", "type": "commit"}, {"oid": "eab177bee6bcd53496eb3210a362d6a6454d40e7", "url": "https://github.com/treasure-data/digdag/commit/eab177bee6bcd53496eb3210a362d6a6454d40e7", "message": "Update description of the resume options", "committedDate": "2020-08-11T09:09:06Z", "type": "commit"}, {"oid": "16c1d4c520afa406ab270ce8e0e532ff5d040d76", "url": "https://github.com/treasure-data/digdag/commit/16c1d4c520afa406ab270ce8e0e532ff5d040d76", "message": "Add a note in case a group-level retry is set up when resuming", "committedDate": "2020-08-11T09:11:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNjkzNQ==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468426935", "bodyText": "This validation should be removed since the above new code already filters tasks with the same condition?", "author": "komamitsu", "createdAt": "2020-08-11T08:51:44Z", "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -302,7 +302,19 @@ public Response startAttempt(RestSessionAttemptRequest request)\n                 .getSessionStore(getSiteId())\n                 .getTasksOfAttempt(attemptId);\n \n+        // Collect tasksIds in which a group retry occurred.\n+        // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n+        List<Long> groupRetryErrorTaskIds = tasks.stream()\n+                .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))\n+                .map(task -> task.getId())\n+                .collect(Collectors.toList());\n+\n         List<Long> successTasks = tasks.stream()\n+                // If a group error has occurred,\n+                // exclude the group's child/dynamically generated tasks from successTasks\n+                // even if they are in SUCCESS state\n+                .filter(task -> task.getParentId().isPresent() && !groupRetryErrorTaskIds.contains(task.getParentId().get()))\n+                .filter(task -> !task.getFullName().contains(\"^sub\"))\n                 .filter(task -> task.getState() == TaskStateCode.SUCCESS)\n                 .map(task -> {\n                     if (!task.getParentId().isPresent()) {", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MTc4Mw==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r469691783", "bodyText": "The above filter will only exclude child tasks with a group error at the parent, I suspect this validation cannot be removed.", "author": "szyn", "createdAt": "2020-08-13T04:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNjkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eab177bee6bcd53496eb3210a362d6a6454d40e7", "chunk": "diff --git a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\nindex b56bb718da..654addc6a9 100644\n--- a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n+++ b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n\n@@ -304,6 +304,7 @@ public class AttemptResource\n \n         // Collect tasksIds in which a group retry occurred.\n         // Need to filter the status of the task with \"group_error\" and \"retry_count\" in stateParams.\n+        // group_error task has no retry_count means that group error has occurred, but no group retry has occurred.\n         List<Long> groupRetryErrorTaskIds = tasks.stream()\n                 .filter(task -> task.getState() == TaskStateCode.GROUP_ERROR && task.getStateParams().has(\"retry_count\"))\n                 .map(task -> task.getId())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNTIyMg==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468435222", "bodyText": "duplicated key of ArchivedTask is a bit better?", "author": "komamitsu", "createdAt": "2020-08-11T09:05:40Z", "path": "digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java", "diffHunk": "@@ -344,7 +356,11 @@ private ArchivedTask matchTaskPattern(String pattern, List<ArchivedTask> tasks)\n                     tasks\n                             .stream()\n                             .collect(\n-                                    Collectors.toMap(t -> t.getFullName(), t -> t)\n+                                    // Avoid 500 error due to duplicate key ArchivedTask", "originalCommit": "4ce47a9f6244c277506da513e425d7d25b79f16e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ0MDM2MA==", "url": "https://github.com/treasure-data/digdag/pull/1419#discussion_r468440360", "bodyText": "When are duplicated key tasks generated?", "author": "komamitsu", "createdAt": "2020-08-11T09:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzNTIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "698ebcfe87c991c4b91fccd73686a6b540043d1b", "chunk": "diff --git a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\nindex b56bb718da..9ec37caf60 100644\n--- a/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n+++ b/digdag-server/src/main/java/io/digdag/server/rs/AttemptResource.java\n\n@@ -356,7 +358,7 @@ public class AttemptResource\n                     tasks\n                             .stream()\n                             .collect(\n-                                    // Avoid 500 error due to duplicate key ArchivedTask\n+                                    // Avoid 500 errors due to duplicated keys of ArchivedTask\n                                     // if a group retry happened, IllegalStateException will be thrown\n                                     // because there are multiple tasks of the same name.\n                                     // Take the first one to make sure it is appropriately resumed.\n"}}, {"oid": "0f7db996097aa40c51cfd46e3f953ed194005ee2", "url": "https://github.com/treasure-data/digdag/commit/0f7db996097aa40c51cfd46e3f953ed194005ee2", "message": "Update comments on GroupRetryIT", "committedDate": "2020-08-13T02:17:59Z", "type": "commit"}, {"oid": "698ebcfe87c991c4b91fccd73686a6b540043d1b", "url": "https://github.com/treasure-data/digdag/commit/698ebcfe87c991c4b91fccd73686a6b540043d1b", "message": "Update comments on AttemptResource", "committedDate": "2020-08-13T04:21:20Z", "type": "commit"}, {"oid": "25c1458049e213f25a02df601903a11a8388254a", "url": "https://github.com/treasure-data/digdag/commit/25c1458049e213f25a02df601903a11a8388254a", "message": "Add test cases that do not contain _retry on group", "committedDate": "2020-08-13T04:24:21Z", "type": "commit"}, {"oid": "e8a310d88ea76ba40b984b87b7eaeea16da848ea", "url": "https://github.com/treasure-data/digdag/commit/e8a310d88ea76ba40b984b87b7eaeea16da848ea", "message": "Update description of the resume options for nested groups", "committedDate": "2020-08-17T00:14:04Z", "type": "commit"}]}