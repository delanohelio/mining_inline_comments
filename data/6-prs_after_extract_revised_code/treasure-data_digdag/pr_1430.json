{"pr_number": 1430, "pr_title": "Configurable Limits.", "pr_createdAt": "2020-07-03T09:37:35Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1430", "timeline": [{"oid": "c15b7380ca06b8e9c10c1382a7ff382f79da8104", "url": "https://github.com/treasure-data/digdag/commit/c15b7380ca06b8e9c10c1382a7ff382f79da8104", "message": "Configurable Limits.\n\nexecutor.task_max_run\nexecutor.attempt_max_run", "committedDate": "2020-07-06T02:19:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450078068", "bodyText": "[minor] How about memoization of this value in terms of performance? Do you think we need to memoize this value in terms of performance?", "author": "komamitsu", "createdAt": "2020-07-06T08:53:31Z", "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,21 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final Config systemConfig;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.systemConfig = systemConfig;\n+    }\n \n-    public static long maxWorkflowTasks()\n+    public long maxWorkflowTasks()\n     {\n-        return MAX_WORKFLOW_TASKS;\n+        return systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "originalCommit": "65a4d80334b1827f122bd277ae5e12c940107cc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Mjk5NQ==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450092995", "bodyText": "Good point. I am not sure how much it contribute to performance but valuable.", "author": "yoyama", "createdAt": "2020-07-06T09:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTcyNA==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450099724", "bodyText": "Done.", "author": "yoyama", "createdAt": "2020-07-06T09:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "5d9ef89d1b96e42a4bd5aafd374d5ed5a36342c9", "chunk": "diff --git a/digdag-core/src/main/java/io/digdag/core/Limits.java b/digdag-core/src/main/java/io/digdag/core/Limits.java\nindex ef4c39d76b..a5ea95359f 100644\n--- a/digdag-core/src/main/java/io/digdag/core/Limits.java\n+++ b/digdag-core/src/main/java/io/digdag/core/Limits.java\n\n@@ -12,21 +12,23 @@ public class Limits\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    private final Config systemConfig;\n+    private final long numOfMaxWorkflowTasks;\n+    private final long numOfMaxAttempts;\n \n     @Inject\n     public Limits(Config systemConfig)\n     {\n-        this.systemConfig = systemConfig;\n+        this.numOfMaxWorkflowTasks =  systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);\n+        this.numOfMaxAttempts = systemConfig.get(\"executor.attempt_max_run\", long.class, MAX_ATTEMPTS);\n     }\n \n     public long maxWorkflowTasks()\n     {\n-        return systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);\n+        return numOfMaxWorkflowTasks;\n     }\n \n     public long maxAttempts()\n     {\n-        return systemConfig.get(\"executor.attempt_max_run\", long.class, MAX_ATTEMPTS);\n+        return numOfMaxAttempts;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450086641", "bodyText": "Is it possible to extend OperatorContext to have limits field instead?", "author": "komamitsu", "createdAt": "2020-07-06T09:07:59Z", "path": "digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java", "diffHunk": "@@ -41,17 +45,19 @@ public String getType()\n     @Override\n     public ForEachOperator newOperator(OperatorContext context)\n     {\n-        return new ForEachOperator(context);\n+        return new ForEachOperator(context, limits);\n     }\n \n     static class ForEachOperator\n             implements Operator\n     {\n         private final TaskRequest request;\n+        private final Limits limits;\n \n-        public ForEachOperator(OperatorContext context)\n+        public ForEachOperator(OperatorContext context, Limits limits)", "originalCommit": "65a4d80334b1827f122bd277ae5e12c940107cc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MjI4Mg==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450092282", "bodyText": "Good point. But OperatorContext is defined in digdag-spi and Limits is defined in digdag-core. So we cannot directly reference Limits from OperatorContext.\nWe may need to find good way to fix it.", "author": "yoyama", "createdAt": "2020-07-06T09:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMjU3NA==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450602574", "bodyText": "I added a method getMaxWorkflowTasks() in OperatorContext and set from Limits instance.", "author": "yoyama", "createdAt": "2020-07-07T04:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4NjY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "41379120a8463ab967796cd96bb49e5f6404571a", "chunk": "diff --git a/digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java b/digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java\nindex 82ba2e9dd9..68a32562f1 100644\n--- a/digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java\n+++ b/digdag-core/src/test/java/io/digdag/core/workflow/ForEachOperatorFactory.java\n\n@@ -45,19 +40,19 @@ public class ForEachOperatorFactory\n     @Override\n     public ForEachOperator newOperator(OperatorContext context)\n     {\n-        return new ForEachOperator(context, limits);\n+        return new ForEachOperator(context);\n     }\n \n     static class ForEachOperator\n             implements Operator\n     {\n         private final TaskRequest request;\n-        private final Limits limits;\n+        private final OperatorContext context;\n \n-        public ForEachOperator(OperatorContext context, Limits limits)\n+        public ForEachOperator(OperatorContext context)\n         {\n             this.request = context.getTaskRequest();\n-            this.limits = limits;\n+            this.context = context;\n         }\n \n         @Override\n"}}, {"oid": "0a0658e31de6ef2dcd72a08b34dfcc3e74753fc8", "url": "https://github.com/treasure-data/digdag/commit/0a0658e31de6ef2dcd72a08b34dfcc3e74753fc8", "message": "Configurable Limits.\n\nexecutor.task_max_run\nexecutor.attempt_max_run", "committedDate": "2020-07-07T04:04:53Z", "type": "commit"}, {"oid": "5ab6c39f8dd4ebbeb3f97131064152fc7b2d618c", "url": "https://github.com/treasure-data/digdag/commit/5ab6c39f8dd4ebbeb3f97131064152fc7b2d618c", "message": "Add document", "committedDate": "2020-07-07T04:04:53Z", "type": "commit"}, {"oid": "eb3761cb931a857b748b81be7b70b00b12f85c9a", "url": "https://github.com/treasure-data/digdag/commit/eb3761cb931a857b748b81be7b70b00b12f85c9a", "message": "Add tests in AttemptLimitIT", "committedDate": "2020-07-07T04:04:53Z", "type": "commit"}, {"oid": "7a2a9c3d7b4e04aca1f026c604586a6c6c267b0d", "url": "https://github.com/treasure-data/digdag/commit/7a2a9c3d7b4e04aca1f026c604586a6c6c267b0d", "message": "Add tests for task limit.", "committedDate": "2020-07-07T04:04:53Z", "type": "commit"}, {"oid": "5d9ef89d1b96e42a4bd5aafd374d5ed5a36342c9", "url": "https://github.com/treasure-data/digdag/commit/5d9ef89d1b96e42a4bd5aafd374d5ed5a36342c9", "message": "Fix some issues based on the review.", "committedDate": "2020-07-07T04:04:53Z", "type": "commit"}, {"oid": "41379120a8463ab967796cd96bb49e5f6404571a", "url": "https://github.com/treasure-data/digdag/commit/41379120a8463ab967796cd96bb49e5f6404571a", "message": "Change support Limits based on the review.", "committedDate": "2020-07-07T04:14:05Z", "type": "commit"}, {"oid": "41379120a8463ab967796cd96bb49e5f6404571a", "url": "https://github.com/treasure-data/digdag/commit/41379120a8463ab967796cd96bb49e5f6404571a", "message": "Change support Limits based on the review.", "committedDate": "2020-07-07T04:14:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNTA3Nw==", "url": "https://github.com/treasure-data/digdag/pull/1430#discussion_r450605077", "bodyText": "\ud83d\udc4d", "author": "komamitsu", "createdAt": "2020-07-07T04:32:39Z", "path": "digdag-core/src/main/java/io/digdag/core/Limits.java", "diffHunk": "@@ -8,15 +12,23 @@\n     private static final long MAX_ATTEMPTS = Long.valueOf(\n             System.getProperty(\"io.digdag.limits.maxAttempts\", \"100\"));\n \n-    // TODO (dano): this should be configurable by config file etc and not just system property\n+    private final long numOfMaxWorkflowTasks;\n+    private final long numOfMaxAttempts;\n+\n+    @Inject\n+    public Limits(Config systemConfig)\n+    {\n+        this.numOfMaxWorkflowTasks =  systemConfig.get(\"executor.task_max_run\", long.class, MAX_WORKFLOW_TASKS);", "originalCommit": "41379120a8463ab967796cd96bb49e5f6404571a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "aff256d05fba108889154806873f897467dc1bb2", "url": "https://github.com/treasure-data/digdag/commit/aff256d05fba108889154806873f897467dc1bb2", "message": "Change getMaxWorkflowTasks() in OperatorContext to default to fix tests.", "committedDate": "2020-07-07T05:56:53Z", "type": "commit"}]}