{"pr_number": 2341, "pr_title": "For config generation use create and move of temp file", "pr_createdAt": "2020-03-18T20:18:34Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2341", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjY4NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394656684", "bodyText": "temp --> tempConfigFile", "author": "chanseokoh", "createdAt": "2020-03-18T21:43:17Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -123,11 +127,24 @@ void setDisableUpdateCheck(boolean disableUpdateCheck) {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");", "originalCommit": "439d9e9dc78a5fe0ed3b3f9f392617ce3e345e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\nindex 0da5424df..43fc426e4 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n\n@@ -127,25 +127,33 @@ public class UpdateChecker {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n-        try (OutputStream outputStream = Files.newOutputStream(temp)) {\n+        Path tempConfigFile = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n+        try (OutputStream outputStream = Files.newOutputStream(tempConfigFile)) {\n           JsonTemplateMapper.writeTo(config, outputStream);\n           // Attempts an atomic move first, and falls back to non-atomic if the file system does not\n           // support atomic moves.\n           try {\n             Files.move(\n-                temp,\n+                tempConfigFile,\n                 configFile,\n                 StandardCopyOption.ATOMIC_MOVE,\n                 StandardCopyOption.REPLACE_EXISTING);\n           } catch (AtomicMoveNotSupportedException ignored) {\n-            Files.move(temp, configFile, StandardCopyOption.REPLACE_EXISTING);\n+            Files.move(tempConfigFile, configFile, StandardCopyOption.REPLACE_EXISTING);\n           }\n         } catch (IOException ex) {\n           // If attempt to generate new config file failed, delete so we can try again next time\n           log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n-          Files.deleteIfExists(temp);\n-          Files.deleteIfExists(configFile);\n+          try {\n+            Files.deleteIfExists(tempConfigFile);\n+          } catch (IOException cleanupEx) {\n+            log.accept(\n+                LogEvent.debug(\n+                    \"Failed to cleanup \"\n+                        + tempConfigFile.toString()\n+                        + \" -- \"\n+                        + cleanupEx.getMessage()));\n+          }\n         }\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394657174", "bodyText": "I think we don't need to do this manually. I believe Files.move will do this fallback.", "author": "chanseokoh", "createdAt": "2020-03-18T21:44:22Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -123,11 +127,24 @@ void setDisableUpdateCheck(boolean disableUpdateCheck) {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n+        try (OutputStream outputStream = Files.newOutputStream(temp)) {\n           JsonTemplateMapper.writeTo(config, outputStream);\n+          // Attempts an atomic move first, and falls back to non-atomic if the file system does not\n+          // support atomic moves.\n+          try {\n+            Files.move(\n+                temp,\n+                configFile,\n+                StandardCopyOption.ATOMIC_MOVE,\n+                StandardCopyOption.REPLACE_EXISTING);\n+          } catch (AtomicMoveNotSupportedException ignored) {\n+            Files.move(temp, configFile, StandardCopyOption.REPLACE_EXISTING);", "originalCommit": "439d9e9dc78a5fe0ed3b3f9f392617ce3e345e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjQ0OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394662449", "bodyText": "We do this in a few places..? CacheStorageWriter mostly? but that could be an artifact from before we knew what was happening? https://github.com/GoogleContainerTools/jib/blob/master/jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java#L140", "author": "loosebazooka", "createdAt": "2020-03-18T21:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzAzMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394667030", "bodyText": "Ah, sorry. Now you said it. I think this makes sense. AtomicMoveNotSupportedException is expected because we use the ATOMIC_MOVE option.\nSo perhaps doing Files.move without ATOMIC_MOVE is sufficient. But honestly I don't have confidence.", "author": "chanseokoh", "createdAt": "2020-03-18T22:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NDcwMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394974703", "bodyText": "Let's keep the current code? At least it seems safe.", "author": "chanseokoh", "createdAt": "2020-03-19T12:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2NjE1NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r395166154", "bodyText": "Which current code? This or the code before this PR?", "author": "loosebazooka", "createdAt": "2020-03-19T16:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3ODc0Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r395178746", "bodyText": "Sorry, the PR with two Files.move() that we also do in other places.", "author": "chanseokoh", "createdAt": "2020-03-19T16:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NzE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\nindex 0da5424df..43fc426e4 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n\n@@ -127,25 +127,33 @@ public class UpdateChecker {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n-        try (OutputStream outputStream = Files.newOutputStream(temp)) {\n+        Path tempConfigFile = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n+        try (OutputStream outputStream = Files.newOutputStream(tempConfigFile)) {\n           JsonTemplateMapper.writeTo(config, outputStream);\n           // Attempts an atomic move first, and falls back to non-atomic if the file system does not\n           // support atomic moves.\n           try {\n             Files.move(\n-                temp,\n+                tempConfigFile,\n                 configFile,\n                 StandardCopyOption.ATOMIC_MOVE,\n                 StandardCopyOption.REPLACE_EXISTING);\n           } catch (AtomicMoveNotSupportedException ignored) {\n-            Files.move(temp, configFile, StandardCopyOption.REPLACE_EXISTING);\n+            Files.move(tempConfigFile, configFile, StandardCopyOption.REPLACE_EXISTING);\n           }\n         } catch (IOException ex) {\n           // If attempt to generate new config file failed, delete so we can try again next time\n           log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n-          Files.deleteIfExists(temp);\n-          Files.deleteIfExists(configFile);\n+          try {\n+            Files.deleteIfExists(tempConfigFile);\n+          } catch (IOException cleanupEx) {\n+            log.accept(\n+                LogEvent.debug(\n+                    \"Failed to cleanup \"\n+                        + tempConfigFile.toString()\n+                        + \" -- \"\n+                        + cleanupEx.getMessage()));\n+          }\n         }\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTA2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r394661069", "bodyText": "There's one problem with this. If Files.move fails, the existing and working config file will be deleted. I think we can just remove Files.deleteIfExists() if we are moving the temp file rather than directly replacing the original file. No need to touch the existing one ever. And it's not a big deal not to delete the temp file. It will be extremely rare that moving will fail, and if that happens, the presence of a .tmp file may give more clues, I guess?", "author": "chanseokoh", "createdAt": "2020-03-18T21:53:13Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java", "diffHunk": "@@ -123,11 +127,24 @@ void setDisableUpdateCheck(boolean disableUpdateCheck) {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        try (OutputStream outputStream = Files.newOutputStream(configFile)) {\n+        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n+        try (OutputStream outputStream = Files.newOutputStream(temp)) {\n           JsonTemplateMapper.writeTo(config, outputStream);\n+          // Attempts an atomic move first, and falls back to non-atomic if the file system does not\n+          // support atomic moves.\n+          try {\n+            Files.move(\n+                temp,\n+                configFile,\n+                StandardCopyOption.ATOMIC_MOVE,\n+                StandardCopyOption.REPLACE_EXISTING);\n+          } catch (AtomicMoveNotSupportedException ignored) {\n+            Files.move(temp, configFile, StandardCopyOption.REPLACE_EXISTING);\n+          }\n         } catch (IOException ex) {\n           // If attempt to generate new config file failed, delete so we can try again next time\n           log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n+          Files.deleteIfExists(temp);\n           Files.deleteIfExists(configFile);", "originalCommit": "439d9e9dc78a5fe0ed3b3f9f392617ce3e345e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyNDQwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2341#discussion_r395324408", "bodyText": "hrmm.. so I removed this for the regular config file, but I left in the temp file removal, maybe I should leave that in?", "author": "loosebazooka", "createdAt": "2020-03-19T21:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\nindex 0da5424df..43fc426e4 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/UpdateChecker.java\n\n@@ -127,25 +127,33 @@ public class UpdateChecker {\n         // Generate config file if it doesn't exist\n         ConfigJsonTemplate config = new ConfigJsonTemplate();\n         Files.createDirectories(configDir);\n-        Path temp = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n-        try (OutputStream outputStream = Files.newOutputStream(temp)) {\n+        Path tempConfigFile = configDir.resolve(CONFIG_FILENAME + \".tmp\");\n+        try (OutputStream outputStream = Files.newOutputStream(tempConfigFile)) {\n           JsonTemplateMapper.writeTo(config, outputStream);\n           // Attempts an atomic move first, and falls back to non-atomic if the file system does not\n           // support atomic moves.\n           try {\n             Files.move(\n-                temp,\n+                tempConfigFile,\n                 configFile,\n                 StandardCopyOption.ATOMIC_MOVE,\n                 StandardCopyOption.REPLACE_EXISTING);\n           } catch (AtomicMoveNotSupportedException ignored) {\n-            Files.move(temp, configFile, StandardCopyOption.REPLACE_EXISTING);\n+            Files.move(tempConfigFile, configFile, StandardCopyOption.REPLACE_EXISTING);\n           }\n         } catch (IOException ex) {\n           // If attempt to generate new config file failed, delete so we can try again next time\n           log.accept(LogEvent.debug(\"Failed to generate global Jib config; \" + ex.getMessage()));\n-          Files.deleteIfExists(temp);\n-          Files.deleteIfExists(configFile);\n+          try {\n+            Files.deleteIfExists(tempConfigFile);\n+          } catch (IOException cleanupEx) {\n+            log.accept(\n+                LogEvent.debug(\n+                    \"Failed to cleanup \"\n+                        + tempConfigFile.toString()\n+                        + \" -- \"\n+                        + cleanupEx.getMessage()));\n+          }\n         }\n       }\n \n"}}, {"oid": "e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "url": "https://github.com/GoogleContainerTools/jib/commit/e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "message": "For config generation use create and move of temp file", "committedDate": "2020-03-19T19:08:36Z", "type": "commit"}, {"oid": "e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "url": "https://github.com/GoogleContainerTools/jib/commit/e3bdc1dd03ca40aea5468facfc8de4e8a443d655", "message": "For config generation use create and move of temp file", "committedDate": "2020-03-19T19:08:36Z", "type": "forcePushed"}]}