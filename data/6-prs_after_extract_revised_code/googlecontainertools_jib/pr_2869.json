{"pr_number": 2869, "pr_title": "Implement class to generate JibContainerBuilder from contents of jar file", "pr_createdAt": "2020-10-28T19:52:23Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2869", "timeline": [{"oid": "56dc2c97a8aa26d4159c67571144f179845e0b2b", "url": "https://github.com/GoogleContainerTools/jib/commit/56dc2c97a8aa26d4159c67571144f179845e0b2b", "message": "implement class to convert a jar to a JibContainerBuilder", "committedDate": "2020-10-28T19:38:52Z", "type": "commit"}, {"oid": "35556ef2c1524c58cbca267c2dbf1187e1632eee", "url": "https://github.com/GoogleContainerTools/jib/commit/35556ef2c1524c58cbca267c2dbf1187e1632eee", "message": "update javadoc", "committedDate": "2020-10-28T19:49:11Z", "type": "commit"}, {"oid": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "url": "https://github.com/GoogleContainerTools/jib/commit/5e98ee2aef44188f98248fbb20b169ed5e00ba26", "message": "use distroless as base image", "committedDate": "2020-10-28T21:51:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjU1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514326553", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @throws InvalidImageReferenceException if the base image used is invalid\n          \n          \n            \n               * @throws InvalidImageReferenceException if the base image reference is invalid", "author": "chanseokoh", "createdAt": "2020-10-29T14:58:58Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -35,10 +36,14 @@\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid", "originalCommit": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "657dd676633931407a38824ff8056e1d8f90a5a0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\nindex e71cca51..35b24d39 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n\n@@ -36,7 +36,7 @@ public class JarToJibContainerBuilderConverter {\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n-   * @throws InvalidImageReferenceException if the base image used is invalid\n+   * @throws InvalidImageReferenceException if the base image reference is invalid\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n       throws IOException, InvalidImageReferenceException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNTM2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514335367", "bodyText": "Can you file an issue to use gcr.io/distroless/java:11 when the application is Java 11+?", "author": "chanseokoh", "createdAt": "2020-10-29T15:10:05Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/** Class to build a container representation from the contents of a jar file. */\n+public class JarToJibContainerBuilderConverter {\n+\n+  /**\n+   * Generates a {@link JibContainerBuilder} from contents of a jar file.\n+   *\n+   * @param jarPath path to the jar file\n+   * @param tempDirPath path to a temporary directory which will be used store the exploded jar's\n+   *     contents\n+   * @return JibContainerBuilder\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n+      throws IOException, InvalidImageReferenceException {\n+\n+    // Use distroless as the base image.\n+    JibContainerBuilder containerBuilder = Jib.from(\"gcr.io/distroless/java\");", "originalCommit": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NjQ3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514546478", "bodyText": "Good call. Created #2871.", "author": "mpeddada1", "createdAt": "2020-10-29T20:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNTM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "657dd676633931407a38824ff8056e1d8f90a5a0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\nindex e71cca51..35b24d39 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n\n@@ -36,7 +36,7 @@ public class JarToJibContainerBuilderConverter {\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n-   * @throws InvalidImageReferenceException if the base image used is invalid\n+   * @throws InvalidImageReferenceException if the base image reference is invalid\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n       throws IOException, InvalidImageReferenceException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514340896", "bodyText": "Not always, to<AnotherClass>() is conventional for an instance of a class to transform to or provide an instance of another class. And in this case, the method name can be made more clear. Or, maybe, this is a very short code block, and creating a converter class is an overkill? But honestly, I don't grasp the overall design honestly, I am not sure.\nAnd, perhaps this can be package-private? Let's start with limited scope. It's easy to make it public, but it's difficult to find methods with unnecessarily larger access.", "author": "chanseokoh", "createdAt": "2020-10-29T15:17:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+/** Class to build a container representation from the contents of a jar file. */\n+public class JarToJibContainerBuilderConverter {\n+\n+  /**\n+   * Generates a {@link JibContainerBuilder} from contents of a jar file.\n+   *\n+   * @param jarPath path to the jar file\n+   * @param tempDirPath path to a temporary directory which will be used store the exploded jar's\n+   *     contents\n+   * @return JibContainerBuilder\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   * @throws InvalidImageReferenceException if the base image used is invalid\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)", "originalCommit": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxODkxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514518919", "bodyText": "I agree, the naming was a little unclear. I modified the class name to be a bit more consistent with BuildFiles so that the method will be called in this format -> JarFiles.toJibContainerBuilder. But let me know if this looks okay? The method is very small now, but the plan is to eventually pass in JibCli options as another parameter, which will be used to set those extra image parameters (such as environment, etc.).\nAh since this method is going to be accessed in the com...jib.cli.cli2 package when we are containerizing the application after the jar subcommand is called, I decided to make it public. Do you think this change is a little premature? Or in other words, is it better to increase the scope only when we actually use it elsewhere.", "author": "mpeddada1", "createdAt": "2020-10-29T19:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2NDI2Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514564266", "bodyText": "Hmm... what if this methods goes into JarProcessor? Do you have a specific design principle in mind where you wanted to separate it out?\nAnd if it is certain that this will be called from a different package, we can leave it as public. I just wasn't sure and thought the possibility this may be called in the same package.", "author": "chanseokoh", "createdAt": "2020-10-29T21:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NTc1MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514585750", "bodyText": "That is an interesting idea. I could be thinking about this too early but I was slightly reluctant to make JarProcessor do too many things at once. Additionally, since we're also planning on adding more modes in the future, this would result in the class become pretty long - so I decided to have one class that does just the processing of the jar and another one that does the generating of JibContainerBuilder (and incorporating cli params in the future)\nI totally understand that the class may seem a little small right now but once we have more modes + jar types, this class would probably need to do the following:\n\nGet the mode from JibCli options (default would be exploded mode).\nCall JarProcessor.determineJarType to determine the jar type.\nHave some logic as to which JarProcessor processing method to call (either explodeJar or packageJar) based on the mode and the type of jar.\n[In the future] Incorporate optional cli parameters.", "author": "mpeddada1", "createdAt": "2020-10-29T21:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjcxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514592719", "bodyText": "That makes sense. I just felt that the name JarFiles is too generic and easily misunderstood as a general JAR file utility, where this is really specific to instantiate and configure JibContainerBuilder. I really wanted to avoid JarFiles and tried to think of a better name, and then got to the idea of putting it into JarProcessor. However, even after thinking about the name for a long time, I can't really suggest something good. Otherwise, LGTM.", "author": "chanseokoh", "createdAt": "2020-10-29T22:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MzE3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514593175", "bodyText": "And I guess the name will really depend on what this class will do going forward and what methods it will have at the end.", "author": "chanseokoh", "createdAt": "2020-10-29T22:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzOTk1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r515139951", "bodyText": "That is true, JarFiles is not the best name. How does JarToJibContainerBuilderPopulator sound?", "author": "mpeddada1", "createdAt": "2020-10-30T14:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1Nzg1OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r515157858", "bodyText": "If the class is for configuring JibContainerBuilder (and only for it), I think JarProcessor.computeEntrypointForExplodedStandard() should be in this class. I'm a bit confused with the boundary between this class and JarProcessor. Maybe after moving computeEntrypointForExplodedStandard(), rename JarProcessor to LayerPopulator (the class seems only specific to create layers for different modes) and rename this class to JarProcessor? This class seems to be more general than \"LayerPopulator\", where the latter is at a more lower level specific to creating layers used by this class.", "author": "chanseokoh", "createdAt": "2020-10-30T14:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMzE0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r515223145", "bodyText": "As discussed offline, since the methods to compute the entrypoint also depend on the modes of processing the jar, will keep these methods as they are and rename JarProcessor to JarModeProcessor (since this class focuses on processing the jar based on particular modes).\nHopefully we'll be able to come up with a better name for JarFiles once more methods are added.", "author": "mpeddada1", "createdAt": "2020-10-30T16:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MDg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "657dd676633931407a38824ff8056e1d8f90a5a0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\nindex e71cca51..35b24d39 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverter.java\n\n@@ -36,7 +36,7 @@ public class JarToJibContainerBuilderConverter {\n    * @return JibContainerBuilder\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n-   * @throws InvalidImageReferenceException if the base image used is invalid\n+   * @throws InvalidImageReferenceException if the base image reference is invalid\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempDirPath)\n       throws IOException, InvalidImageReferenceException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MTMyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514341328", "bodyText": "super nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Path destDir = temporaryFolder.newFolder().toPath();\n          \n          \n            \n                Path destDir = temporaryFolder.getRoot().toPath();", "author": "chanseokoh", "createdAt": "2020-10-29T15:17:36Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarToJibContainerBuilderConverterTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();", "originalCommit": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "657dd676633931407a38824ff8056e1d8f90a5a0", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\nindex 12728128..63cbe561 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\n\n@@ -23,7 +23,6 @@ import com.google.cloud.tools.jib.api.JibContainerBuilder;\n import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n-import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n import com.google.cloud.tools.jib.api.buildplan.Platform;\n import com.google.common.collect.ImmutableList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MzAyMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514343022", "bodyText": "Why is the assertion for .get(0) looks different than other layers below?", "author": "chanseokoh", "createdAt": "2020-10-29T15:19:45Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarToJibContainerBuilderConverterTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarToJibContainerBuilderConverter.toJibContainerBuilder(standardJar, destDir);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app/explodedJar:/app/dependencies/*\", \"HelloWorld\"));\n+    assertThat(\n+            ((FileEntriesLayer) buildPlan.getLayers().get(0))", "originalCommit": "5e98ee2aef44188f98248fbb20b169ed5e00ba26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxOTA5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514519095", "bodyText": "oops, my bad", "author": "mpeddada1", "createdAt": "2020-10-29T19:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MzAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "657dd676633931407a38824ff8056e1d8f90a5a0", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\nindex 12728128..63cbe561 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarToJibContainerBuilderConverterTest.java\n\n@@ -23,7 +23,6 @@ import com.google.cloud.tools.jib.api.JibContainerBuilder;\n import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n-import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n import com.google.cloud.tools.jib.api.buildplan.Platform;\n import com.google.common.collect.ImmutableList;\n"}}, {"oid": "657dd676633931407a38824ff8056e1d8f90a5a0", "url": "https://github.com/GoogleContainerTools/jib/commit/657dd676633931407a38824ff8056e1d8f90a5a0", "message": "fix tests and javadoc", "committedDate": "2020-10-29T18:56:40Z", "type": "commit"}, {"oid": "96a9bcb61913dcc4bb04d71ef3c81d1e963ea93d", "url": "https://github.com/GoogleContainerTools/jib/commit/96a9bcb61913dcc4bb04d71ef3c81d1e963ea93d", "message": "renaming class and method", "committedDate": "2020-10-29T19:37:57Z", "type": "commit"}, {"oid": "2fc774e95d169f0deee3f18642d93b25d1cdcc8b", "url": "https://github.com/GoogleContainerTools/jib/commit/2fc774e95d169f0deee3f18642d93b25d1cdcc8b", "message": "delete unrelated file", "committedDate": "2020-10-29T19:53:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5ODExNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514598115", "bodyText": "Food for thought: these are certainly interesting things, and I guess the user should be allowed to configure them. Then we get back to the same question we had for the usual Jib build command. Originally, everything was through command-line options and we didn't have a \"build file.\" This makes me think, maybe, the jib jar subcommand should also support a \"build file.\" Then the layers field should probably be interpreted in a different way. I don't know.", "author": "chanseokoh", "createdAt": "2020-10-29T22:13:40Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.jar;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class JarFilesTest {\n+  private static final String SIMPLE_STANDARD_JAR = \"jar/standard/basicStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path standardJar = Paths.get(Resources.getResource(SIMPLE_STANDARD_JAR).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder = JarFiles.toJibContainerBuilder(standardJar, destDir);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();", "originalCommit": "2fc774e95d169f0deee3f18642d93b25d1cdcc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMDUxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r514620515", "bodyText": "Yeah, that's definitely an interesting option to consider. The advantage of this would be that the user would be allowed to configure these params without having write a really long command. On the other hand (maybe it is too early to tell) could this potentially blur the line between the jib build command and the jib jar command or cause some confusion? For example, if I need the build file anyways, I might be better off using the jib build command instead? --> I could be missing some viable use cases here.\nThis also makes me think: Since our general idea for the jar command is to require minimal user input, is it worth picking some optimal defaults (like workingDirectory or user,  for example)?", "author": "mpeddada1", "createdAt": "2020-10-29T23:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5ODExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzA4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2869#discussion_r515113080", "bodyText": "if I need the build file anyways, I might be better off using the jib build command instead?\n\njib jar still does way more things, like optimally creating multi layers (especially having a more tailored logic for Spring Boot), setting an entrypoint with right classpath, etc. And I envision that it will provide a nice getting-started experience and cover simple use cases without having to write a build file. At the same time, it can also support a build file, so that people who need advanced and complex configurations can consider that as an option for convenience.\nAnd definitely jib jar is designed to be Java and JAR-specific, so it makes sense to set optimal defaults for many configurations. I actually think we aim for that. We can be highly opinionated on that. Actually, we are already so by creating layers as we think is better.", "author": "chanseokoh", "createdAt": "2020-10-30T13:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5ODExNQ=="}], "type": "inlineReview", "revised_code": null}]}