{"pr_number": 2813, "pr_title": "Implement explode mode for regular jar.", "pr_createdAt": "2020-10-09T19:01:01Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2813", "timeline": [{"oid": "1d400182ef804b323dd1117bdfe9799ec46fda40", "url": "https://github.com/GoogleContainerTools/jib/commit/1d400182ef804b323dd1117bdfe9799ec46fda40", "message": "Implement explodedMode for regular jar", "committedDate": "2020-10-09T00:16:25Z", "type": "commit"}, {"oid": "dc70872f5e1c6f0e619777ffd3ef2aa0103e6487", "url": "https://github.com/GoogleContainerTools/jib/commit/dc70872f5e1c6f0e619777ffd3ef2aa0103e6487", "message": "fix explodeMode to maintain original project structure", "committedDate": "2020-10-09T18:50:53Z", "type": "commit"}, {"oid": "ebf91a14fd8caf8a061bec98c5de922500c922fd", "url": "https://github.com/GoogleContainerTools/jib/commit/ebf91a14fd8caf8a061bec98c5de922500c922fd", "message": "minor javadoc changes", "committedDate": "2020-10-09T18:55:21Z", "type": "commit"}, {"oid": "9a4f4e36251fd4fb8306b5c2e21a6c7fec13cd05", "url": "https://github.com/GoogleContainerTools/jib/commit/9a4f4e36251fd4fb8306b5c2e21a6c7fec13cd05", "message": "small comment change", "committedDate": "2020-10-09T18:56:32Z", "type": "commit"}, {"oid": "6e0b6dd862db2703518ee2c9d6e5ec669717e521", "url": "https://github.com/GoogleContainerTools/jib/commit/6e0b6dd862db2703518ee2c9d6e5ec669717e521", "message": "change variable name", "committedDate": "2020-10-09T18:58:26Z", "type": "commit"}, {"oid": "26b6478acc9dbda08db223c7337d4e32b14cf20e", "url": "https://github.com/GoogleContainerTools/jib/commit/26b6478acc9dbda08db223c7337d4e32b14cf20e", "message": "fix tests", "committedDate": "2020-10-09T20:09:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NDE3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502664173", "bodyText": "This should remain an instance variable (non-static), scoped and limited only to each individual instance. static means a global variable shared by every instance of JavaContainerBuilder.", "author": "chanseokoh", "createdAt": "2020-10-09T20:47:56Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -204,7 +204,7 @@ public static JavaContainerBuilder from(TarImage tarImage) {\n   private RelativeUnixPath dependenciesDestination = RelativeUnixPath.get(\"libs\");\n   private RelativeUnixPath othersDestination = RelativeUnixPath.get(\"classpath\");\n   @Nullable private String mainClass;\n-  private ModificationTimeProvider modificationTimeProvider =\n+  private static ModificationTimeProvider modificationTimeProvider =", "originalCommit": "26b6478acc9dbda08db223c7337d4e32b14cf20e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d78affc24d2005e86cb5a814a901705a26b128f", "chunk": "diff --git a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\nindex 358b2711..be8bcff4 100644\n--- a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n+++ b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n\n@@ -204,7 +204,7 @@ public class JavaContainerBuilder {\n   private RelativeUnixPath dependenciesDestination = RelativeUnixPath.get(\"libs\");\n   private RelativeUnixPath othersDestination = RelativeUnixPath.get(\"classpath\");\n   @Nullable private String mainClass;\n-  private static ModificationTimeProvider modificationTimeProvider =\n+  private ModificationTimeProvider modificationTimeProvider =\n       FileEntriesLayer.DEFAULT_MODIFICATION_TIME_PROVIDER;\n \n   private JavaContainerBuilder(JibContainerBuilder jibContainerBuilder) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NTI2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502665262", "bodyText": "Should remain an instance method.\nAnd note JavaContainerBuilder is a public API. Probably we don't want to expose this internal helper method.\nJust asking: did we decide to use JavaContainerBuilder instead of JibContainerBuilder for some reason? It's fine if JavaContainerBuilder works, but just saying I believe it's a bit curated and limiting.", "author": "chanseokoh", "createdAt": "2020-10-09T20:50:43Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -691,7 +700,18 @@ private void addFileToLayer(\n     layerBuilders.get(layerType).addEntry(sourceFile, pathInContainer, modificationTime);\n   }\n \n-  private void addDirectoryContentsToLayer(\n+  /**\n+   * Adds the contents of a directory to a {@link FileEntriesLayer.Builder}.\n+   *\n+   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n+   *     value being a {@link FileEntriesLayer.Builder}.\n+   * @param layerType the layer type.\n+   * @param sourceRoot path to root directory.\n+   * @param pathFilter predicate to filter the files by.\n+   * @param basePathInContainer base path in container.\n+   * @throws IOException if I/O error occurs when opening the directory.\n+   */\n+  public static void addDirectoryContentsToLayer(", "originalCommit": "26b6478acc9dbda08db223c7337d4e32b14cf20e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzgyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r503967827", "bodyText": "Thanks for pointing this out! No longer using JavaContainerBuilder in JarProcessor.", "author": "mpeddada1", "createdAt": "2020-10-13T13:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5d78affc24d2005e86cb5a814a901705a26b128f", "chunk": "diff --git a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\nindex 358b2711..be8bcff4 100644\n--- a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n+++ b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n\n@@ -700,18 +691,7 @@ public class JavaContainerBuilder {\n     layerBuilders.get(layerType).addEntry(sourceFile, pathInContainer, modificationTime);\n   }\n \n-  /**\n-   * Adds the contents of a directory to a {@link FileEntriesLayer.Builder}.\n-   *\n-   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n-   *     value being a {@link FileEntriesLayer.Builder}.\n-   * @param layerType the layer type.\n-   * @param sourceRoot path to root directory.\n-   * @param pathFilter predicate to filter the files by.\n-   * @param basePathInContainer base path in container.\n-   * @throws IOException if I/O error occurs when opening the directory.\n-   */\n-  public static void addDirectoryContentsToLayer(\n+  private void addDirectoryContentsToLayer(\n       Map<LayerType, FileEntriesLayer.Builder> layerBuilders,\n       LayerType layerType,\n       Path sourceRoot,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2Njg5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r502666895", "bodyText": "Ditto.\nWe need to think twice before making this part of the public API surface.", "author": "chanseokoh", "createdAt": "2020-10-09T20:54:59Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java", "diffHunk": "@@ -679,7 +679,16 @@ private JavaContainerBuilder addDirectory(\n     return this;\n   }\n \n-  private void addFileToLayer(\n+  /**\n+   * Adds a file to a {@link FileEntriesLayer.Builder}.\n+   *\n+   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n+   *     value being a {@link FileEntriesLayer.Builder}.\n+   * @param layerType the layer type.\n+   * @param sourceFile the source file path.\n+   * @param pathInContainer path in container.\n+   */\n+  public static void addFileToLayer(", "originalCommit": "26b6478acc9dbda08db223c7337d4e32b14cf20e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d78affc24d2005e86cb5a814a901705a26b128f", "chunk": "diff --git a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\nindex 358b2711..be8bcff4 100644\n--- a/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n+++ b/jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java\n\n@@ -679,16 +679,7 @@ public class JavaContainerBuilder {\n     return this;\n   }\n \n-  /**\n-   * Adds a file to a {@link FileEntriesLayer.Builder}.\n-   *\n-   * @param layerBuilders map that keeps track of all layers, with the key being the layer type and\n-   *     value being a {@link FileEntriesLayer.Builder}.\n-   * @param layerType the layer type.\n-   * @param sourceFile the source file path.\n-   * @param pathInContainer path in container.\n-   */\n-  public static void addFileToLayer(\n+  private void addFileToLayer(\n       Map<LayerType, FileEntriesLayer.Builder> layerBuilders,\n       LayerType layerType,\n       Path sourceFile,\n"}}, {"oid": "526b425f6440727a3240e7adf3f8eb0a6eab1a7a", "url": "https://github.com/GoogleContainerTools/jib/commit/526b425f6440727a3240e7adf3f8eb0a6eab1a7a", "message": "revert previous change to tests", "committedDate": "2020-10-12T15:18:16Z", "type": "commit"}, {"oid": "5d78affc24d2005e86cb5a814a901705a26b128f", "url": "https://github.com/GoogleContainerTools/jib/commit/5d78affc24d2005e86cb5a814a901705a26b128f", "message": "add helper to JarProcessor to filter out files and revert changes to JavaContainerBuilder", "committedDate": "2020-10-12T20:50:58Z", "type": "commit"}, {"oid": "23468559fb5788cc90dbddc258d9a2bd067ef5f0", "url": "https://github.com/GoogleContainerTools/jib/commit/23468559fb5788cc90dbddc258d9a2bd067ef5f0", "message": "fix comment", "committedDate": "2020-10-12T20:54:01Z", "type": "commit"}, {"oid": "c91beab0fd63c7d3b892d9d0f80b806adc46b3b3", "url": "https://github.com/GoogleContainerTools/jib/commit/c91beab0fd63c7d3b892d9d0f80b806adc46b3b3", "message": "remove plugins-commons from build.gradle", "committedDate": "2020-10-12T20:55:24Z", "type": "commit"}, {"oid": "7bf52426136503a4d8d3ee78d89dd941047869ec", "url": "https://github.com/GoogleContainerTools/jib/commit/7bf52426136503a4d8d3ee78d89dd941047869ec", "message": "fixes", "committedDate": "2020-10-12T22:02:02Z", "type": "commit"}, {"oid": "7d71cef391d7938e266f965ea8eea4f1e0ac097d", "url": "https://github.com/GoogleContainerTools/jib/commit/7d71cef391d7938e266f965ea8eea4f1e0ac097d", "message": "use Files.walk instead of DirectoryWalker", "committedDate": "2020-10-12T23:01:36Z", "type": "commit"}, {"oid": "66a3a8971f8af614e8a801f3cf4c1649067d8bd9", "url": "https://github.com/GoogleContainerTools/jib/commit/66a3a8971f8af614e8a801f3cf4c1649067d8bd9", "message": "sort by natural order", "committedDate": "2020-10-12T23:35:08Z", "type": "commit"}, {"oid": "4573240eac41dbff95c2ec9b3cba2c0f368c94a3", "url": "https://github.com/GoogleContainerTools/jib/commit/4573240eac41dbff95c2ec9b3cba2c0f368c94a3", "message": "testing without sorting", "committedDate": "2020-10-12T23:50:20Z", "type": "commit"}, {"oid": "b63b03ebc914dab9c6ab03bd72b5ea28d5e5ab2d", "url": "https://github.com/GoogleContainerTools/jib/commit/b63b03ebc914dab9c6ab03bd72b5ea28d5e5ab2d", "message": "assert on path.toString()", "committedDate": "2020-10-13T02:36:54Z", "type": "commit"}, {"oid": "1cd59871045df47e63f87520b7fd1c1c37906c6a", "url": "https://github.com/GoogleContainerTools/jib/commit/1cd59871045df47e63f87520b7fd1c1c37906c6a", "message": "order file paths by string values and test on order", "committedDate": "2020-10-13T03:04:17Z", "type": "commit"}, {"oid": "743b6294feb5e925ee1f5239d84f4463865a632d", "url": "https://github.com/GoogleContainerTools/jib/commit/743b6294feb5e925ee1f5239d84f4463865a632d", "message": "clean up tests", "committedDate": "2020-10-13T03:19:06Z", "type": "commit"}, {"oid": "a93c515fd498cb4fdca3e3386148645fe9188cb1", "url": "https://github.com/GoogleContainerTools/jib/commit/a93c515fd498cb4fdca3e3386148645fe9188cb1", "message": "formatting", "committedDate": "2020-10-13T03:20:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504109359", "bodyText": "I think this should be configurable and if not then use a temporary directory.\nPotentially we could have a jib local build directory that we can pass in.", "author": "loosebazooka", "createdAt": "2020-10-13T16:48:38Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();", "originalCommit": "a93c515fd498cb4fdca3e3386148645fe9188cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MjgzNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504242836", "bodyText": "Also FYI: generally speaking, we should close Closeable classes like TempDirectoryProvider, e.g., using a try-resource block.", "author": "chanseokoh", "createdAt": "2020-10-13T20:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMzUwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504733508", "bodyText": "Thanks for pointing this out.", "author": "mpeddada1", "createdAt": "2020-10-14T14:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "228b09bab5e51d4372521e57558ad2ecce3e06b4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1397cd71..fb37a5ed 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -141,7 +140,7 @@ public class JarProcessor {\n           fileStream\n               .filter(path -> !path.equals(sourceRoot))\n               .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n-              .sorted(Comparator.comparing(path -> path.toString()))\n+              .sorted()\n               .collect(ImmutableList.toImmutableList());\n       for (Path path : directoryPaths) {\n         AbsoluteUnixPath pathOnContainer = basePathInContainer.resolve(sourceRoot.relativize(path));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMTY1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504111657", "bodyText": "\"Class-Path\" -> Attributes.Name.CLASS_PATH", "author": "loosebazooka", "createdAt": "2020-10-13T16:52:19Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");", "originalCommit": "a93c515fd498cb4fdca3e3386148645fe9188cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODMzMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504728330", "bodyText": "Done:)", "author": "mpeddada1", "createdAt": "2020-10-14T14:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "228b09bab5e51d4372521e57558ad2ecce3e06b4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1397cd71..fb37a5ed 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -141,7 +140,7 @@ public class JarProcessor {\n           fileStream\n               .filter(path -> !path.equals(sourceRoot))\n               .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n-              .sorted(Comparator.comparing(path -> path.toString()))\n+              .sorted()\n               .collect(ImmutableList.toImmutableList());\n       for (Path path : directoryPaths) {\n         AbsoluteUnixPath pathOnContainer = basePathInContainer.resolve(sourceRoot.relativize(path));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504112131", "bodyText": "\" \" -> \"//s+\" for handling any kind of white space\nI might also do classPath.trim() ?", "author": "loosebazooka", "createdAt": "2020-10-13T16:53:10Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {", "originalCommit": "a93c515fd498cb4fdca3e3386148645fe9188cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NjM4Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504256382", "bodyText": "May be a good idea. For example, here, I see people saying like\n\ntwo spaces immediately following Class-Path:, a space at the end of [each] line, and one before each line, and finally an extra new-line at the end did the trick.\n\nalthough I'm not sure if the Java API handles all these whitespaces correctly. Worth checking anyway.", "author": "chanseokoh", "createdAt": "2020-10-13T21:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMTcyOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504731728", "bodyText": "Oh great point, added handling for any kind of white space and added extra spaces in the class-path field in the sample jar file  to make sure this is working.", "author": "mpeddada1", "createdAt": "2020-10-14T14:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "228b09bab5e51d4372521e57558ad2ecce3e06b4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1397cd71..fb37a5ed 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -141,7 +140,7 @@ public class JarProcessor {\n           fileStream\n               .filter(path -> !path.equals(sourceRoot))\n               .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n-              .sorted(Comparator.comparing(path -> path.toString()))\n+              .sorted()\n               .collect(ImmutableList.toImmutableList());\n       for (Path path : directoryPaths) {\n         AbsoluteUnixPath pathOnContainer = basePathInContainer.resolve(sourceRoot.relativize(path));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504112581", "bodyText": "Do we have to fail here? Would this code path also handle the shaded jar style jars (which may not have Class-Path entries)?", "author": "loosebazooka", "createdAt": "2020-10-13T16:53:58Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +66,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");", "originalCommit": "a93c515fd498cb4fdca3e3386148645fe9188cb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5MTY5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504691690", "bodyText": "That's a good question. I didn't intend for this code path to handle shaded jars. It mainly focuses on regular jars, which require the class-path to be fully specified in order for it to work. We could try to intelligently determine what the dependencies are in the future implementations, but for now I decided to first check that the Class-Path was present before proceeding to the next steps. What do you think?", "author": "mpeddada1", "createdAt": "2020-10-14T13:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNTk5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504725990", "bodyText": "Regular jars include one that doesn't have Class-Path. It's possible that many people will try a hello-world app (i.e, no dependencies), so I think we shouldn't fail.", "author": "chanseokoh", "createdAt": "2020-10-14T14:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczNjk3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504736973", "bodyText": "Oh that's a very valid point! Okay I will remove this exception.", "author": "mpeddada1", "createdAt": "2020-10-14T14:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExMjU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "228b09bab5e51d4372521e57558ad2ecce3e06b4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1397cd71..fb37a5ed 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -141,7 +140,7 @@ public class JarProcessor {\n           fileStream\n               .filter(path -> !path.equals(sourceRoot))\n               .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n-              .sorted(Comparator.comparing(path -> path.toString()))\n+              .sorted()\n               .collect(ImmutableList.toImmutableList());\n       for (Path path : directoryPaths) {\n         AbsoluteUnixPath pathOnContainer = basePathInContainer.resolve(sourceRoot.relativize(path));\n"}}, {"oid": "228b09bab5e51d4372521e57558ad2ecce3e06b4", "url": "https://github.com/GoogleContainerTools/jib/commit/228b09bab5e51d4372521e57558ad2ecce3e06b4", "message": "try with just sorted()", "committedDate": "2020-10-13T19:52:40Z", "type": "commit"}, {"oid": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "url": "https://github.com/GoogleContainerTools/jib/commit/0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "message": "use DirectoryWalker and don't check ordering", "committedDate": "2020-10-13T20:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MzYyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504243625", "bodyText": "Another option is ... isResrouceFile = isClassFile.negate(), which I think works better in this case.", "author": "chanseokoh", "createdAt": "2020-10-13T20:37:19Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxODU4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504318580", "bodyText": "Oh this is cool.", "author": "loosebazooka", "createdAt": "2020-10-13T23:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MzYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6425911f..4b4edb18 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -69,17 +72,26 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the file.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n-    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n-    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n-    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n \n     List<FileEntriesLayer> layers = new ArrayList<>();\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n \n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDk5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504244994", "bodyText": "How about \"explodedJarRoot\" or \"localExplodedJarRoot\"? tempDirectoryPath gives the impression that it's a directory for a callee to use as a temp storage.", "author": "chanseokoh", "createdAt": "2020-10-13T20:39:56Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDM2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504714362", "bodyText": "Done:)", "author": "mpeddada1", "createdAt": "2020-10-14T14:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NDk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6425911f..4b4edb18 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -69,17 +72,26 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the file.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n-    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n-    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n-    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n \n     List<FileEntriesLayer> layers = new ArrayList<>();\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n \n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NzQwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504257400", "bodyText": "super nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.add(depPath);\n          \n          \n            \n                    dependencies.add(Paths.get(dependency));\n          \n      \n    \n    \n  \n\nJust FYI, another way is\n.splitToList().stream().map(Paths::get).collect(Collectors.toList());", "author": "chanseokoh", "createdAt": "2020-10-13T21:04:18Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNDE0OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504714149", "bodyText": "Pretty neat.", "author": "mpeddada1", "createdAt": "2020-10-14T14:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NzQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6425911f..4b4edb18 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -69,17 +72,26 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the file.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n-    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n-    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n-    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n \n     List<FileEntriesLayer> layers = new ArrayList<>();\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n \n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDExNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504260116", "bodyText": "I believe we customarily put the most frequently changing layers at the bottom (needs to double-check). So perhaps\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                layers.add(classesLayer);\n          \n          \n            \n                layers.add(resourcesLayer);\n          \n          \n            \n                layers.add(dependenciesLayerBuilder.build());\n          \n          \n            \n                layers.add(dependenciesLayerBuilder.build());\n          \n          \n            \n                layers.add(resourcesLayer);\n          \n          \n            \n                layers.add(classesLayer);", "author": "chanseokoh", "createdAt": "2020-10-13T21:09:53Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +64,85 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the file.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n+    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n+    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n+    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                tempDirectoryPath,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies = new ArrayList<>();\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath = jarFile.getManifest().getMainAttributes().getValue(\"Class-Path\");\n+    if (classPath != null) {\n+      for (String dependency : Splitter.on(\" \").split(classPath)) {\n+        Path depPath = Paths.get(dependency);\n+        dependencies.add(depPath);\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Class path is not specified.\");\n+    }\n+    FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n+    dependencies.forEach(\n+        path ->\n+            dependenciesLayerBuilder.addEntry(\n+                path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+    dependenciesLayerBuilder.setName(\"Dependencies\");\n+\n+    layers.add(classesLayer);\n+    layers.add(resourcesLayer);\n+    layers.add(dependenciesLayerBuilder.build());", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6425911f..4b4edb18 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -69,17 +72,26 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the file.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath) throws IOException {\n-    TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider();\n-    Path tempDirectoryPath = tempDirectoryProvider.newDirectory();\n-    ZipUtil.unzip(jarPath, tempDirectoryPath);\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n \n     List<FileEntriesLayer> layers = new ArrayList<>();\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = path -> !path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n \n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MDg1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504260853", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String STANDARD_RESOURCE_DIR_WITH_CP = \"jar/standard/standardJarWithCp.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST = \"jar/standard/standardJarWithCp.jar\";\n          \n      \n    \n    \n  \n\nAlso applies to other constants.", "author": "chanseokoh", "createdAt": "2020-10-13T21:11:13Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,17 +18,24 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_RESOURCE_DIR_WITH_CP = \"jar/standard/standardJarWithCp.jar\";", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 3de8bf38..77771ec8 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -35,7 +35,8 @@ import org.junit.Test;\n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR_WITH_CP = \"jar/standard/standardJarWithCp.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n   private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTU5Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504261596", "bodyText": "Assert before attempting layers.get(2). Otherwise, for example, if the code base accidentally changes to produce only two layer, we'll hit an index-out-of-bound error when attempting .get(2).", "author": "chanseokoh", "createdAt": "2020-10-13T21:12:53Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxMzE3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504713179", "bodyText": "That's a good idea!", "author": "mpeddada1", "createdAt": "2020-10-14T14:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 3de8bf38..77771ec8 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -54,42 +55,33 @@ public class JarProcessorTest {\n \n   @Test\n   public void testExplodeMode_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n-    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n-    FileEntriesLayer classesLayer = layers.get(0);\n-    FileEntriesLayer resourcesLayer = layers.get(1);\n-    FileEntriesLayer dependenciesLayer = layers.get(2);\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, null);\n \n     assertThat(layers.size()).isEqualTo(3);\n \n-    // Validate classes layer.\n-    // TODO: Validate order of file paths once\n-    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n-    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n-    List<AbsoluteUnixPath> actualClassesPaths =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPaths)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+    FileEntriesLayer dependenciesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer classesLayer = layers.get(2);\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getName()).isEqualTo(\"Dependencies\");\n+    assertThat(\n+            dependenciesLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .isEqualTo(\n+            ImmutableList.of(\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/directory/dependency3\")));\n \n     // Validate resources layer.\n     // TODO: Validate order of file paths once\n     // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n     assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n     List<AbsoluteUnixPath> actualResourcesPaths =\n         resourcesLayer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MTkwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504261905", "bodyText": "I guess no need to assert the size when using .containsExactly?", "author": "chanseokoh", "createdAt": "2020-10-13T21:13:31Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 3de8bf38..77771ec8 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -54,42 +55,33 @@ public class JarProcessorTest {\n \n   @Test\n   public void testExplodeMode_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n-    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n-    FileEntriesLayer classesLayer = layers.get(0);\n-    FileEntriesLayer resourcesLayer = layers.get(1);\n-    FileEntriesLayer dependenciesLayer = layers.get(2);\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, null);\n \n     assertThat(layers.size()).isEqualTo(3);\n \n-    // Validate classes layer.\n-    // TODO: Validate order of file paths once\n-    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n-    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n-    List<AbsoluteUnixPath> actualClassesPaths =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPaths)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+    FileEntriesLayer dependenciesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer classesLayer = layers.get(2);\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getName()).isEqualTo(\"Dependencies\");\n+    assertThat(\n+            dependenciesLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .isEqualTo(\n+            ImmutableList.of(\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/directory/dependency3\")));\n \n     // Validate resources layer.\n     // TODO: Validate order of file paths once\n     // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n     assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n     List<AbsoluteUnixPath> actualResourcesPaths =\n         resourcesLayer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjAwOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504262009", "bodyText": "Ditto?", "author": "chanseokoh", "createdAt": "2020-10-13T21:13:45Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n+    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n+    List<AbsoluteUnixPath> actualClassesPaths =\n+        classesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualClassesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+\n+    // Validate resources layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 3de8bf38..77771ec8 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -54,42 +55,33 @@ public class JarProcessorTest {\n \n   @Test\n   public void testExplodeMode_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n-    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n-    FileEntriesLayer classesLayer = layers.get(0);\n-    FileEntriesLayer resourcesLayer = layers.get(1);\n-    FileEntriesLayer dependenciesLayer = layers.get(2);\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, null);\n \n     assertThat(layers.size()).isEqualTo(3);\n \n-    // Validate classes layer.\n-    // TODO: Validate order of file paths once\n-    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n-    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n-    List<AbsoluteUnixPath> actualClassesPaths =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPaths)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+    FileEntriesLayer dependenciesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer classesLayer = layers.get(2);\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getName()).isEqualTo(\"Dependencies\");\n+    assertThat(\n+            dependenciesLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .isEqualTo(\n+            ImmutableList.of(\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/directory/dependency3\")));\n \n     // Validate resources layer.\n     // TODO: Validate order of file paths once\n     // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n     assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n     List<AbsoluteUnixPath> actualResourcesPaths =\n         resourcesLayer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2MjA3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504262079", "bodyText": "Ditto?", "author": "chanseokoh", "createdAt": "2020-10-13T21:13:52Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -44,4 +51,77 @@ public void testDetermineJarType_standard() throws IOException, URISyntaxExcepti\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n+    FileEntriesLayer classesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer dependenciesLayer = layers.get(2);\n+\n+    assertThat(layers.size()).isEqualTo(3);\n+\n+    // Validate classes layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n+    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n+    List<AbsoluteUnixPath> actualClassesPaths =\n+        classesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualClassesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+\n+    // Validate resources layer.\n+    // TODO: Validate order of file paths once\n+    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n+    assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n+    List<AbsoluteUnixPath> actualResourcesPaths =\n+        resourcesLayer\n+            .getEntries()\n+            .stream()\n+            .map(FileEntry::getExtractionPath)\n+            .collect(Collectors.toList());\n+    assertThat(actualResourcesPaths)\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/resource1.txt\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/resource2.sql\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"),\n+            AbsoluteUnixPath.get(\"/app/explodedJar/directory4/resource3.txt\"));\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getEntries().size()).isEqualTo(3);", "originalCommit": "0fb8d571fd7f4dd5d1bca72ef0c2479e96590415", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 3de8bf38..77771ec8 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -54,42 +55,33 @@ public class JarProcessorTest {\n \n   @Test\n   public void testExplodeMode_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR_WITH_CP).toURI());\n-    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar);\n-    FileEntriesLayer classesLayer = layers.get(0);\n-    FileEntriesLayer resourcesLayer = layers.get(1);\n-    FileEntriesLayer dependenciesLayer = layers.get(2);\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, null);\n \n     assertThat(layers.size()).isEqualTo(3);\n \n-    // Validate classes layer.\n-    // TODO: Validate order of file paths once\n-    // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(classesLayer.getEntries().size()).isEqualTo(10);\n-    assertThat(classesLayer.getName()).isEqualTo(\"Classes\");\n-    List<AbsoluteUnixPath> actualClassesPaths =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPaths)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/class5.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class1.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory1/class2.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/class4.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory2/directory3/class3.class\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/directory4\"));\n+    FileEntriesLayer dependenciesLayer = layers.get(0);\n+    FileEntriesLayer resourcesLayer = layers.get(1);\n+    FileEntriesLayer classesLayer = layers.get(2);\n+\n+    // Validate dependencies layer.\n+    assertThat(dependenciesLayer.getName()).isEqualTo(\"Dependencies\");\n+    assertThat(\n+            dependenciesLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .isEqualTo(\n+            ImmutableList.of(\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency1\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n+                AbsoluteUnixPath.get(\"/app/dependencies/directory/dependency3\")));\n \n     // Validate resources layer.\n     // TODO: Validate order of file paths once\n     // https://github.com/GoogleContainerTools/jib/issues/2821 is fixed.\n-    assertThat(resourcesLayer.getEntries().size()).isEqualTo(9);\n     assertThat(resourcesLayer.getName()).isEqualTo(\"Resources\");\n     List<AbsoluteUnixPath> actualResourcesPaths =\n         resourcesLayer\n"}}, {"oid": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "url": "https://github.com/GoogleContainerTools/jib/commit/72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "message": "addressing comment suggestions. Code style fixes, custom temp directory path, add jar file with classpath being more spaced out", "committedDate": "2020-10-14T14:13:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczODg1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504738853", "bodyText": "Once a Closeable class is closed, it's permanently shutdown and not usable. So you should put the entire code that needs to use localExplodedJarRoot into the try-resource block.", "author": "chanseokoh", "createdAt": "2020-10-14T14:46:43Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }", "originalCommit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 4b4edb18..66544e48 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -127,7 +127,7 @@ public class JarProcessor {\n               .map(Paths::get)\n               .collect(Collectors.toList());\n     } else {\n-      throw new IllegalStateException(\"Class path is not specified.\");\n+      dependencies = new ArrayList<>();\n     }\n     FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n     dependencies.forEach(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDA2NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504740065", "bodyText": "Minor point, but Jib build plugins use non-capitalized name \"classes\" (as defined in JavaContainerBuilder.LayerType).", "author": "chanseokoh", "createdAt": "2020-10-14T14:48:20Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")", "originalCommit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1OTgwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504859805", "bodyText": "I added an enum for layer types, similar to what's being done in JavaContainerBuilder.", "author": "mpeddada1", "createdAt": "2020-10-14T17:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 4b4edb18..66544e48 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -127,7 +127,7 @@ public class JarProcessor {\n               .map(Paths::get)\n               .collect(Collectors.toList());\n     } else {\n-      throw new IllegalStateException(\"Class path is not specified.\");\n+      dependencies = new ArrayList<>();\n     }\n     FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n     dependencies.forEach(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0MDE0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504740140", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-10-14T14:48:26Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")", "originalCommit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 4b4edb18..66544e48 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -127,7 +127,7 @@ public class JarProcessor {\n               .map(Paths::get)\n               .collect(Collectors.toList());\n     } else {\n-      throw new IllegalStateException(\"Class path is not specified.\");\n+      dependencies = new ArrayList<>();\n     }\n     FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n     dependencies.forEach(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0Mzk0Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504743942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n          \n          \n            \n                  \"jar/standard/standardJarWithClassPath.jar\";\n          \n          \n            \n              private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n          \n          \n            \n              private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n          \n          \n            \n                  \"jar/standard/standardJarWithClassPath.jar\";\n          \n          \n            \n              private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";", "author": "chanseokoh", "createdAt": "2020-10-14T14:53:10Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,17 +18,25 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n   private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";", "originalCommit": "72e7d8ea5e49280fb07df2dd15d8d51fe1ca65bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 77771ec8..33f17843 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -37,6 +37,8 @@ public class JarProcessorTest {\n   private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n   private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n       \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n   private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n \n   @Test\n"}}, {"oid": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "url": "https://github.com/GoogleContainerTools/jib/commit/8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "message": "remove exception for when no class-path is present and add tests to check for empty dep layer", "committedDate": "2020-10-14T15:17:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3ODkzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504778938", "bodyText": "You can remove this else branch if you initialize the variable on line 118 like List<Path> dependencies = new ArrayList<>();.\nHow about skipping adding the dependencies layer if it's empty? To be fair, it shouldn't matter, because I believe jib-core will drop any empty layers. But we can be conservative at this level too.", "author": "chanseokoh", "createdAt": "2020-10-14T15:38:11Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +67,97 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided, doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot;\n+    if (tempDirPath == null) {\n+      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+    } else {\n+      localExplodedJarRoot = tempDirPath;\n+    }\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"Resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n+    // with these dependencies as entries.\n+    List<Path> dependencies;\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+    } else {\n+      dependencies = new ArrayList<>();", "originalCommit": "8ffc0b2bf21e99f27431f2ccff7ccfda6c55b39a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1OTE0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504859141", "bodyText": "That's good to know. Modified this to not add a dependency layer if there are no dependencies specified in Class-Path.", "author": "mpeddada1", "createdAt": "2020-10-14T17:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3ODkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "cf08ae3f4fad3abac160e2c71e48b482a361f54e", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 66544e48..cb065982 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -79,68 +79,63 @@ public class JarProcessor {\n    */\n   public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n       throws IOException {\n-    Path localExplodedJarRoot;\n-    if (tempDirPath == null) {\n-      try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+    Path localExplodedJarRoot = tempDirPath;\n+    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+      if (localExplodedJarRoot == null) {\n         localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n       }\n-    } else {\n-      localExplodedJarRoot = tempDirPath;\n-    }\n-    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n-\n-    List<FileEntriesLayer> layers = new ArrayList<>();\n-    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n \n-    // Determine class and resource files in the directory containing jar contents and create\n-    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n-    // file's original project structure.\n-    FileEntriesLayer classesLayer =\n-        addDirectoryContentsToLayer(\n-                FileEntriesLayer.builder(),\n-                localExplodedJarRoot,\n-                isClassFile,\n-                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-            .setName(\"Classes\")\n-            .build();\n-    FileEntriesLayer resourcesLayer =\n-        addDirectoryContentsToLayer(\n-                FileEntriesLayer.builder(),\n-                localExplodedJarRoot,\n-                isResourceFile,\n-                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-            .setName(\"Resources\")\n-            .build();\n+      List<FileEntriesLayer> layers = new ArrayList<>();\n+      Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isResourceFile = isClassFile.negate();\n \n-    // Get dependencies from Class-Path in the jar's manifest and create a FileEntriesLayer.Builder\n-    // with these dependencies as entries.\n-    List<Path> dependencies;\n-    JarFile jarFile = new JarFile(jarPath.toFile());\n-    String classPath =\n-        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n-    if (classPath != null) {\n-      dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n-              .stream()\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n-    } else {\n-      dependencies = new ArrayList<>();\n-    }\n-    FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n-    dependencies.forEach(\n-        path ->\n-            dependenciesLayerBuilder.addEntry(\n-                path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-    dependenciesLayerBuilder.setName(\"Dependencies\");\n+      // Determine class and resource files in the directory containing jar contents and create\n+      // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+      // file's original project structure.\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isClassFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(\"classes\")\n+              .build();\n+      FileEntriesLayer resourcesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isResourceFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(\"resources\")\n+              .build();\n \n-    layers.add(dependenciesLayerBuilder.build());\n-    layers.add(resourcesLayer);\n-    layers.add(classesLayer);\n+      // Get dependencies from Class-Path in the jar's manifest and create a\n+      // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n+      // manifest is not present then skip adding a dependencies layer.\n+      JarFile jarFile = new JarFile(jarPath.toFile());\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {\n+        List<Path> dependencies =\n+            Splitter.onPattern(\"\\\\s+\")\n+                .splitToList(classPath.trim())\n+                .stream()\n+                .map(Paths::get)\n+                .collect(Collectors.toList());\n+        FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n+        dependencies.forEach(\n+            path ->\n+                dependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+        dependenciesLayerBuilder.setName(\"dependencies\");\n+        layers.add(dependenciesLayerBuilder.build());\n+      }\n \n-    return layers;\n+      layers.add(resourcesLayer);\n+      layers.add(classesLayer);\n+      return layers;\n+    }\n   }\n \n   private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n"}}, {"oid": "cf08ae3f4fad3abac160e2c71e48b482a361f54e", "url": "https://github.com/GoogleContainerTools/jib/commit/cf08ae3f4fad3abac160e2c71e48b482a361f54e", "message": "modify variable names, fix try-resource block, don't add dep layer if class-pathnot provided", "committedDate": "2020-10-14T17:29:31Z", "type": "commit"}, {"oid": "a1982be77724b1762c1260688789b9d034c31102", "url": "https://github.com/GoogleContainerTools/jib/commit/a1982be77724b1762c1260688789b9d034c31102", "message": "refactoring", "committedDate": "2020-10-14T17:39:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1ODI3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504858279", "bodyText": "I think an enum is unnecessary if this is only to define layer names. It looks okay to me to use the string literals in the code as before.", "author": "chanseokoh", "createdAt": "2020-10-14T17:41:57Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -35,6 +54,29 @@\n     SPRING_BOOT;\n   }\n \n+  /** Represents the different types of layers. */\n+  @VisibleForTesting\n+  public enum ExplodedModeLayerType {", "originalCommit": "a1982be77724b1762c1260688789b9d034c31102", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9cbf0963da6b09eac263444c59d0e603aed295e", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 77da3c8e..1e14c02a 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -54,29 +51,6 @@ public class JarProcessor {\n     SPRING_BOOT;\n   }\n \n-  /** Represents the different types of layers. */\n-  @VisibleForTesting\n-  public enum ExplodedModeLayerType {\n-    DEPENDENCIES(\"dependencies\"),\n-    RESOURCES(\"resources\"),\n-    CLASSES(\"classes\");\n-\n-    private final String name;\n-\n-    /**\n-     * Initializes with a name for the layer.\n-     *\n-     * @param name name to set for the layer; does not affect the contents of the layer\n-     */\n-    ExplodedModeLayerType(String name) {\n-      this.name = name;\n-    }\n-\n-    public String getName() {\n-      return name;\n-    }\n-  }\n-\n   /**\n    * Determines whether the jar is a spring boot or regular jar, given a path to the jar.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NjQzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504866432", "bodyText": "Oh! I realized there's a problem. When TempDirectoryProvider is closed, all the contents (i.e., exploded jar) will be cleaned up. That is, nothing left when exiting the method. However, tar creating happens far later in jib-core. I guess this method should just use tempDirPath (should not be @Nullable), unless the method opts to use a system temp directory. Since the method can accept tempDirPath, maybe we should just use it.\nAnd how about tempDirPath --> tempDirectory?", "author": "chanseokoh", "createdAt": "2020-10-14T17:55:24Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +91,92 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {", "originalCommit": "a1982be77724b1762c1260688789b9d034c31102", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9cbf0963da6b09eac263444c59d0e603aed295e", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 77da3c8e..1e14c02a 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -101,65 +75,61 @@ public class JarProcessor {\n    * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n    *     temporary directory path provided doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n-    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n-      if (localExplodedJarRoot == null) {\n-        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n-      }\n-      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n-\n-      List<FileEntriesLayer> layers = new ArrayList<>();\n-      Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-      Predicate<Path> isResourceFile = isClassFile.negate();\n-\n-      // Determine class and resource files in the directory containing jar contents and create\n-      // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n-      // file's original project structure.\n-      FileEntriesLayer classesLayer =\n-          addDirectoryContentsToLayer(\n-                  FileEntriesLayer.builder(),\n-                  localExplodedJarRoot,\n-                  isClassFile,\n-                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-              .setName(ExplodedModeLayerType.CLASSES.getName())\n-              .build();\n-      FileEntriesLayer resourcesLayer =\n-          addDirectoryContentsToLayer(\n-                  FileEntriesLayer.builder(),\n-                  localExplodedJarRoot,\n-                  isResourceFile,\n-                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-              .setName(ExplodedModeLayerType.RESOURCES.getName())\n-              .build();\n \n-      // Get dependencies from Class-Path in the jar's manifest and create a\n-      // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n-      // manifest is not present then skip adding a dependencies layer.\n-      JarFile jarFile = new JarFile(jarPath.toFile());\n-      String classPath =\n-          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n-      if (classPath != null) {\n-        List<Path> dependencies =\n-            Splitter.onPattern(\"\\\\s+\")\n-                .splitToList(classPath.trim())\n-                .stream()\n-                .map(Paths::get)\n-                .collect(Collectors.toList());\n-        FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n-        dependencies.forEach(\n-            path ->\n-                dependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-        dependenciesLayerBuilder.setName(ExplodedModeLayerType.DEPENDENCIES.getName());\n-        layers.add(dependenciesLayerBuilder.build());\n-      }\n-\n-      layers.add(resourcesLayer);\n-      layers.add(classesLayer);\n-      return layers;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a\n+    // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n+    // manifest is not present then skip adding a dependencies layer.\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      List<Path> dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      FileEntriesLayer.Builder dependenciesLayerBuilder =\n+          FileEntriesLayer.builder().setName(\"dependencies\");\n+      dependencies.forEach(\n+          path ->\n+              dependenciesLayerBuilder.addEntry(\n+                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+      layers.add(dependenciesLayerBuilder.build());\n     }\n+\n+    layers.add(resourcesLayer);\n+    layers.add(classesLayer);\n+    return layers;\n   }\n \n   private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NzA5OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r504867099", "bodyText": "Nit: can chain ...builder().setName(\"dependencies\").", "author": "chanseokoh", "createdAt": "2020-10-14T17:56:33Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +91,92 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n+      if (localExplodedJarRoot == null) {\n+        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n+      }\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+      List<FileEntriesLayer> layers = new ArrayList<>();\n+      Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+      // Determine class and resource files in the directory containing jar contents and create\n+      // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+      // file's original project structure.\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isClassFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(ExplodedModeLayerType.CLASSES.getName())\n+              .build();\n+      FileEntriesLayer resourcesLayer =\n+          addDirectoryContentsToLayer(\n+                  FileEntriesLayer.builder(),\n+                  localExplodedJarRoot,\n+                  isResourceFile,\n+                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+              .setName(ExplodedModeLayerType.RESOURCES.getName())\n+              .build();\n+\n+      // Get dependencies from Class-Path in the jar's manifest and create a\n+      // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n+      // manifest is not present then skip adding a dependencies layer.\n+      JarFile jarFile = new JarFile(jarPath.toFile());\n+      String classPath =\n+          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+      if (classPath != null) {\n+        List<Path> dependencies =\n+            Splitter.onPattern(\"\\\\s+\")\n+                .splitToList(classPath.trim())\n+                .stream()\n+                .map(Paths::get)\n+                .collect(Collectors.toList());\n+        FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();", "originalCommit": "a1982be77724b1762c1260688789b9d034c31102", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9cbf0963da6b09eac263444c59d0e603aed295e", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 77da3c8e..1e14c02a 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -101,65 +75,61 @@ public class JarProcessor {\n    * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n    *     temporary directory path provided doesn't exist.\n    */\n-  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, @Nullable Path tempDirPath)\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n-    try (TempDirectoryProvider tempDirectoryProvider = new TempDirectoryProvider()) {\n-      if (localExplodedJarRoot == null) {\n-        localExplodedJarRoot = tempDirectoryProvider.newDirectory();\n-      }\n-      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n-\n-      List<FileEntriesLayer> layers = new ArrayList<>();\n-      Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-      Predicate<Path> isResourceFile = isClassFile.negate();\n-\n-      // Determine class and resource files in the directory containing jar contents and create\n-      // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n-      // file's original project structure.\n-      FileEntriesLayer classesLayer =\n-          addDirectoryContentsToLayer(\n-                  FileEntriesLayer.builder(),\n-                  localExplodedJarRoot,\n-                  isClassFile,\n-                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-              .setName(ExplodedModeLayerType.CLASSES.getName())\n-              .build();\n-      FileEntriesLayer resourcesLayer =\n-          addDirectoryContentsToLayer(\n-                  FileEntriesLayer.builder(),\n-                  localExplodedJarRoot,\n-                  isResourceFile,\n-                  APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n-              .setName(ExplodedModeLayerType.RESOURCES.getName())\n-              .build();\n \n-      // Get dependencies from Class-Path in the jar's manifest and create a\n-      // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n-      // manifest is not present then skip adding a dependencies layer.\n-      JarFile jarFile = new JarFile(jarPath.toFile());\n-      String classPath =\n-          jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n-      if (classPath != null) {\n-        List<Path> dependencies =\n-            Splitter.onPattern(\"\\\\s+\")\n-                .splitToList(classPath.trim())\n-                .stream()\n-                .map(Paths::get)\n-                .collect(Collectors.toList());\n-        FileEntriesLayer.Builder dependenciesLayerBuilder = FileEntriesLayer.builder();\n-        dependencies.forEach(\n-            path ->\n-                dependenciesLayerBuilder.addEntry(\n-                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-        dependenciesLayerBuilder.setName(ExplodedModeLayerType.DEPENDENCIES.getName());\n-        layers.add(dependenciesLayerBuilder.build());\n-      }\n-\n-      layers.add(resourcesLayer);\n-      layers.add(classesLayer);\n-      return layers;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and create a\n+    // FileEntriesLayer.Builder with these dependencies as entries. If Class-Path in the jar's\n+    // manifest is not present then skip adding a dependencies layer.\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      List<Path> dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      FileEntriesLayer.Builder dependenciesLayerBuilder =\n+          FileEntriesLayer.builder().setName(\"dependencies\");\n+      dependencies.forEach(\n+          path ->\n+              dependenciesLayerBuilder.addEntry(\n+                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+      layers.add(dependenciesLayerBuilder.build());\n     }\n+\n+    layers.add(resourcesLayer);\n+    layers.add(classesLayer);\n+    return layers;\n   }\n \n   private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n"}}, {"oid": "b9cbf0963da6b09eac263444c59d0e603aed295e", "url": "https://github.com/GoogleContainerTools/jib/commit/b9cbf0963da6b09eac263444c59d0e603aed295e", "message": "use provided directory in explodeStandardJar", "committedDate": "2020-10-14T21:02:37Z", "type": "commit"}, {"oid": "bde748299f75ee27f87905093bc26a6b8e845faf", "url": "https://github.com/GoogleContainerTools/jib/commit/bde748299f75ee27f87905093bc26a6b8e845faf", "message": "empty commit to trigger builds", "committedDate": "2020-10-14T22:51:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNDE4NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505004184", "bodyText": "what about a jar that contains no resources?", "author": "loosebazooka", "createdAt": "2020-10-14T22:03:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (class or resource), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =", "originalCommit": "b9cbf0963da6b09eac263444c59d0e603aed295e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwODA0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506608048", "bodyText": "Great question. For a jar that doesn't contain resources, the resources layer will only contain the manifest.", "author": "mpeddada1", "createdAt": "2020-10-16T17:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNDE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8e28f2bb53663ba30c5ec1f2840ec4a29c57ef50", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1e14c02a..6ecec913 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -70,10 +70,10 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n-   * @param tempDirPath path to temporary jib local directory to use.\n+   * @param tempDirPath path to temporary jib local directory.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n-   *     temporary directory path provided doesn't exist.\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist.\n    */\n   public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505005427", "bodyText": "Perhaps I should've brought this up before, I'm also curious if we should persist the MANIFEST.MF after exploding the jar. That manifest only applies when using a Jar. Does it make sense to filter it out when building container layers?", "author": "loosebazooka", "createdAt": "2020-10-14T22:04:42Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,88 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory to use.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n+   *     temporary directory path provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();", "originalCommit": "b9cbf0963da6b09eac263444c59d0e603aed295e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTY2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505779662", "bodyText": "That's an interesting question. If you remember, at least the Spring Boot launcher requires it. I think it reads the file from classpath. Maybe it's not a great harm to include it ATM and see if someone complains?", "author": "chanseokoh", "createdAt": "2020-10-15T19:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNDk2NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506614965", "bodyText": "Along those lines- I decided to keep it, going off of what we've seen with Spring Boot. I couldn't find a particular reason to intentionally remove it so I left in for the time being? Although, the main cost I see is that we will be creating a resources layer just for the manifest if we have a jar with only classes.", "author": "mpeddada1", "createdAt": "2020-10-16T17:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwNTQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "8e28f2bb53663ba30c5ec1f2840ec4a29c57ef50", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 1e14c02a..6ecec913 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -70,10 +70,10 @@ public class JarProcessor {\n    * Explode jar and create three layers for classes, resources and dependencies on container.\n    *\n    * @param jarPath path to jar file.\n-   * @param tempDirPath path to temporary jib local directory to use.\n+   * @param tempDirPath path to temporary jib local directory.\n    * @return list of {@link FileEntriesLayer}.\n-   * @throws IOException if I/O error occurs when opening the jar file or if the directory for the\n-   *     temporary directory path provided doesn't exist.\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist.\n    */\n   public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MDcwNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r505780706", "bodyText": "Any reason not using @Rule public final TemporaryFolder as we do in other tests?", "author": "chanseokoh", "createdAt": "2020-10-15T19:15:18Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,30 +18,181 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.Files;\n import com.google.common.io.Resources;\n+import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.junit.Test;\n \n public class JarProcessorTest {\n \n-  private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n+  private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n+  private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n-    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_RESOURCE_DIR).toURI());\n+    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(springBootJar);\n     assertThat(jarType).isEqualTo(JarType.SPRING_BOOT);\n   }\n \n   @Test\n   public void testDetermineJarType_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR).toURI());\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_withClassPathInManifest()\n+      throws IOException, URISyntaxException {\n+    Path standardJar =\n+        Paths.get(Resources.getResource(STANDARD_JAR_WITH_CLASS_PATH_MANIFEST).toURI());\n+    File tempDirectory = Files.createTempDir();", "originalCommit": "bde748299f75ee27f87905093bc26a6b8e845faf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120f058707c739fa3ae6b52f568223cfd6b4614", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex 5371298c..e524f771 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -23,25 +23,29 @@ import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.io.Files;\n import com.google.common.io.Resources;\n-import java.io.File;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n public class JarProcessorTest {\n \n   private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";\n   private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n       \"jar/standard/standardJarWithClassPath.jar\";\n   private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n       \"jar/standard/standardJarWithoutClassPath.jar\";\n-  private static final String STANDARD_JAR = \"jar/standard/standardJar.jar\";\n+  private static final String STANDARD_JAR_WITH_ONLY_CLASSES =\n+      \"jar/standard/standardJarWithOnlyClasses.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n"}}, {"oid": "1120f058707c739fa3ae6b52f568223cfd6b4614", "url": "https://github.com/GoogleContainerTools/jib/commit/1120f058707c739fa3ae6b52f568223cfd6b4614", "message": "Use TemporaryFolder and add test for jar with only .class files", "committedDate": "2020-10-16T17:04:50Z", "type": "commit"}, {"oid": "636726a3d6e829d34c9267ec3558180e56cbce7d", "url": "https://github.com/GoogleContainerTools/jib/commit/636726a3d6e829d34c9267ec3558180e56cbce7d", "message": "add test for empty jar", "committedDate": "2020-10-16T18:05:54Z", "type": "commit"}, {"oid": "33e1f3a10a809c1d4a92935ee9d4455bb26391bc", "url": "https://github.com/GoogleContainerTools/jib/commit/33e1f3a10a809c1d4a92935ee9d4455bb26391bc", "message": "formatting", "committedDate": "2020-10-16T18:52:49Z", "type": "commit"}, {"oid": "8e28f2bb53663ba30c5ec1f2840ec4a29c57ef50", "url": "https://github.com/GoogleContainerTools/jib/commit/8e28f2bb53663ba30c5ec1f2840ec4a29c57ef50", "message": "cleaning up", "committedDate": "2020-10-16T19:48:17Z", "type": "commit"}, {"oid": "7adbee46cd82b4589229ffbfcae731665b452a4b", "url": "https://github.com/GoogleContainerTools/jib/commit/7adbee46cd82b4589229ffbfcae731665b452a4b", "message": "remove unnecessary spacing", "committedDate": "2020-10-16T19:51:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNjMzNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506716336", "bodyText": "Sorry, looking at this again, maybe this doesn't need to accept a builder. It can create it locally. That said, it can accept a layer name instead? For example,\nprivate static FileEntriesLayer createLayerFromDirectoryContents(String layerName, ...) {\n  FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n  new DirectoryWalker(...)...;\n  return builder.build();\n}\nWDYT?", "author": "chanseokoh", "createdAt": "2020-10-16T20:53:49Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,86 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   *\n+   * @param jarPath path to jar file.\n+   * @param tempDirPath path to temporary jib local directory.\n+   * @return list of {@link FileEntriesLayer}.\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist.\n+   */\n+  public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n+      throws IOException {\n+    Path localExplodedJarRoot = tempDirPath;\n+    ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+    List<FileEntriesLayer> layers = new ArrayList<>();\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n+\n+    // Determine class and resource files in the directory containing jar contents and create\n+    // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n+    // file's original project structure.\n+    FileEntriesLayer classesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isClassFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"classes\")\n+            .build();\n+    FileEntriesLayer resourcesLayer =\n+        addDirectoryContentsToLayer(\n+                FileEntriesLayer.builder(),\n+                localExplodedJarRoot,\n+                isResourceFile,\n+                APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")))\n+            .setName(\"resources\")\n+            .build();\n+\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n+    // dependencies as entries. If Class-Path in the jar's manifest is not present then skip adding\n+    // a dependencies layer.\n+    JarFile jarFile = new JarFile(jarPath.toFile());\n+    String classPath =\n+        jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n+    if (classPath != null) {\n+      List<Path> dependencies =\n+          Splitter.onPattern(\"\\\\s+\")\n+              .splitToList(classPath.trim())\n+              .stream()\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      FileEntriesLayer.Builder dependenciesLayerBuilder =\n+          FileEntriesLayer.builder().setName(\"dependencies\");\n+      dependencies.forEach(\n+          path ->\n+              dependenciesLayerBuilder.addEntry(\n+                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+      layers.add(dependenciesLayerBuilder.build());\n+    }\n+\n+    layers.add(resourcesLayer);\n+    layers.add(classesLayer);\n+    return layers;\n+  }\n+\n+  private static FileEntriesLayer.Builder addDirectoryContentsToLayer(\n+      FileEntriesLayer.Builder builder,", "originalCommit": "7adbee46cd82b4589229ffbfcae731665b452a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3OTMxMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r507779311", "bodyText": "Yeah I think that's a good idea.", "author": "mpeddada1", "createdAt": "2020-10-19T14:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNjMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "79de6abf149de89cdcfedde93d15584913799986", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 82b2a8d3..2894398a 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -67,13 +67,13 @@ public class JarProcessor {\n   }\n \n   /**\n-   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   * Explodes jar and create three layers for classes, resources and dependencies on container.\n    *\n-   * @param jarPath path to jar file.\n-   * @param tempDirPath path to temporary jib local directory.\n-   * @return list of {@link FileEntriesLayer}.\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n-   *     provided doesn't exist.\n+   *     provided doesn't exist\n    */\n   public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNzc3Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506717776", "bodyText": "super nit: I think this comment is obvious enough to be removed.", "author": "chanseokoh", "createdAt": "2020-10-16T20:57:23Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java", "diffHunk": "@@ -18,30 +18,260 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntry;\n import com.google.cloud.tools.jib.cli.jar.JarProcessor.JarType;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n public class JarProcessorTest {\n \n-  private static final String SPRING_BOOT_RESOURCE_DIR = \"jar/springboot/springboot_sample.jar\";\n-  private static final String STANDARD_RESOURCE_DIR = \"jar/standard/standardJar.jar\";\n+  private static final String SPRING_BOOT_JAR = \"jar/springboot/springboot_sample.jar\";\n+  private static final String STANDARD_JAR_WITH_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithClassPath.jar\";\n+  private static final String STANDARD_JAR_WITHOUT_CLASS_PATH_MANIFEST =\n+      \"jar/standard/standardJarWithoutClassPath.jar\";\n+  private static final String STANDARD_JAR_WITH_ONLY_CLASSES =\n+      \"jar/standard/standardJarWithOnlyClasses.jar\";\n+  private static final String STANDARD_JAR_EMPTY = \"jar/standard/emptyStandardJar.jar\";\n+\n+  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n   public void testDetermineJarType_springBoot() throws IOException, URISyntaxException {\n-    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_RESOURCE_DIR).toURI());\n+    Path springBootJar = Paths.get(Resources.getResource(SPRING_BOOT_JAR).toURI());\n     JarType jarType = JarProcessor.determineJarType(springBootJar);\n     assertThat(jarType).isEqualTo(JarType.SPRING_BOOT);\n   }\n \n   @Test\n   public void testDetermineJarType_standard() throws IOException, URISyntaxException {\n-    Path standardJar = Paths.get(Resources.getResource(STANDARD_RESOURCE_DIR).toURI());\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n     JarType jarType = JarProcessor.determineJarType(standardJar);\n     assertThat(jarType).isEqualTo(JarType.STANDARD);\n   }\n+\n+  @Test\n+  public void testExplodeMode_standard_emptyJar() throws IOException, URISyntaxException {\n+    Path standardJar = Paths.get(Resources.getResource(STANDARD_JAR_EMPTY).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, destDir);\n+\n+    // Validate that only two layers are created.", "originalCommit": "7adbee46cd82b4589229ffbfcae731665b452a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MDg1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r507780859", "bodyText": "True, done.", "author": "mpeddada1", "createdAt": "2020-10-19T14:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxNzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "79de6abf149de89cdcfedde93d15584913799986", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\nindex a3ae6cb8..df9186fe 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorTest.java\n\n@@ -67,7 +67,6 @@ public class JarProcessorTest {\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(standardJar, destDir);\n \n-    // Validate that only two layers are created.\n     assertThat(layers.size()).isEqualTo(2);\n \n     FileEntriesLayer resourcesLayer = layers.get(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxODI5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2813#discussion_r506718294", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Explode jar and create three layers for classes, resources and dependencies on container.\n          \n          \n            \n               * Explodes jar and create three layers for classes, resources and dependencies on container.\n          \n      \n    \n    \n  \n\nand we don't put a period for @param, @return and such, but honestly, I didn't care.", "author": "chanseokoh", "createdAt": "2020-10-16T20:58:40Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -49,4 +65,86 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     }\n     return JarType.STANDARD;\n   }\n+\n+  /**\n+   * Explode jar and create three layers for classes, resources and dependencies on container.", "originalCommit": "7adbee46cd82b4589229ffbfcae731665b452a4b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79de6abf149de89cdcfedde93d15584913799986", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 82b2a8d3..2894398a 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -67,13 +67,13 @@ public class JarProcessor {\n   }\n \n   /**\n-   * Explode jar and create three layers for classes, resources and dependencies on container.\n+   * Explodes jar and create three layers for classes, resources and dependencies on container.\n    *\n-   * @param jarPath path to jar file.\n-   * @param tempDirPath path to temporary jib local directory.\n-   * @return list of {@link FileEntriesLayer}.\n+   * @param jarPath path to jar file\n+   * @param tempDirPath path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n-   *     provided doesn't exist.\n+   *     provided doesn't exist\n    */\n   public static List<FileEntriesLayer> explodeStandardJar(Path jarPath, Path tempDirPath)\n       throws IOException {\n"}}, {"oid": "79de6abf149de89cdcfedde93d15584913799986", "url": "https://github.com/GoogleContainerTools/jib/commit/79de6abf149de89cdcfedde93d15584913799986", "message": "refactor helper and modify javadoc", "committedDate": "2020-10-19T14:04:26Z", "type": "commit"}, {"oid": "6fbca0c89941108aa6a5c0e9f27a6d02b701af69", "url": "https://github.com/GoogleContainerTools/jib/commit/6fbca0c89941108aa6a5c0e9f27a6d02b701af69", "message": "moving code for initializing classes and resources layers down", "committedDate": "2020-10-19T14:16:45Z", "type": "commit"}, {"oid": "a5631b788e18e5df00f4714b965261f670cbeff6", "url": "https://github.com/GoogleContainerTools/jib/commit/a5631b788e18e5df00f4714b965261f670cbeff6", "message": "empty commit to trigger builds", "committedDate": "2020-10-19T14:33:11Z", "type": "commit"}, {"oid": "3af8340ef97325590ecee494231704250a6eed27", "url": "https://github.com/GoogleContainerTools/jib/commit/3af8340ef97325590ecee494231704250a6eed27", "message": "minor comment change", "committedDate": "2020-10-19T14:52:20Z", "type": "commit"}, {"oid": "f7758e1b53b58c0076416bb853ed869302728501", "url": "https://github.com/GoogleContainerTools/jib/commit/f7758e1b53b58c0076416bb853ed869302728501", "message": "empty commit to trigger builds", "committedDate": "2020-10-19T14:56:42Z", "type": "commit"}, {"oid": "7312285eaa25643e050ce06a260b46905a4f706c", "url": "https://github.com/GoogleContainerTools/jib/commit/7312285eaa25643e050ce06a260b46905a4f706c", "message": "empty commit to trigger builds", "committedDate": "2020-10-19T15:14:45Z", "type": "commit"}]}