{"pr_number": 2580, "pr_title": "Add LayerSpec, ArchiveLayerSpec, FileLayerSpec for buildfile", "pr_createdAt": "2020-07-10T20:15:24Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2580", "timeline": [{"oid": "540600f26292909f4a47a87ad8b38a897414ad50", "url": "https://github.com/GoogleContainerTools/jib/commit/540600f26292909f4a47a87ad8b38a897414ad50", "message": "Add LayerSpec, ArchiveLayerSpec, FileLayerSpec for buildfile", "committedDate": "2020-07-10T20:14:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDczOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453850739", "bodyText": "I do remember the checkstyle complained if having a Javadoc not ending with a period. \ud83e\udd37\u200d\u2642\ufe0f\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A yaml block for specifying archive layers\n          \n          \n            \n             * A yaml block for specifying archive layers.", "author": "chanseokoh", "createdAt": "2020-07-13T18:34:35Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying archive layers", "originalCommit": "540600f26292909f4a47a87ad8b38a897414ad50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTYyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453885627", "bodyText": "Weird that it didn't catch these?", "author": "loosebazooka", "createdAt": "2020-07-13T19:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java\nindex 0df8774b..180c3634 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java\n\n@@ -26,7 +26,7 @@ import java.util.Optional;\n import javax.annotation.Nullable;\n \n /**\n- * A yaml block for specifying archive layers\n+ * A yaml block for specifying archive layers.\n  *\n  * <p>Example use of this yaml snippet.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MjgzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453852831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A yaml block for specifying files layers\n          \n          \n            \n             * A yaml block for specifying files layers.", "author": "chanseokoh", "createdAt": "2020-07-13T18:38:11Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers", "originalCommit": "540600f26292909f4a47a87ad8b38a897414ad50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\nindex 65de51ca..ba0a0789 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n\n@@ -25,7 +25,7 @@ import java.util.Optional;\n import javax.annotation.Nullable;\n \n /**\n- * A yaml block for specifying files layers\n+ * A yaml block for specifying files layers.\n  *\n  * <p>Example use of this yaml snippet.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzE0NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453853144", "bodyText": "Should we make a copy?", "author": "chanseokoh", "createdAt": "2020-07-13T18:38:41Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers\n+ *\n+ * <p>Example use of this yaml snippet.\n+ *\n+ * <pre>{@code\n+ * name: \"my classes layer\"\n+ * files:\n+ *   - {@link CopySpec}\n+ *   - {@link CopySpec}\n+ * // optional properties\n+ * properties: see {@link FilePropertiesSpec}\n+ * }</pre>\n+ */\n+@JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this\n+public class FileLayerSpec implements LayerSpec {\n+  private String name;\n+  private List<CopySpec> files;\n+  @Nullable private FilePropertiesSpec properties;\n+\n+  /**\n+   * Constructor for use by jackson to populate this object.\n+   *\n+   * @param name a unique name for this layer\n+   * @param files a path to an archive file\n+   * @param properties a {@link FilePropertiesSpec} that applies to all files in this layer\n+   */\n+  @JsonCreator\n+  public FileLayerSpec(\n+      @JsonProperty(value = \"name\", required = true) String name,\n+      @JsonProperty(value = \"files\", required = true) List<CopySpec> files,", "originalCommit": "540600f26292909f4a47a87ad8b38a897414ad50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NzYyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453887625", "bodyText": "So I thought about that. This is not a public api, and we will be converting it directly into a build plan. No one will really be processing it in the meantime, so I think it's fine to leave like that.", "author": "loosebazooka", "createdAt": "2020-07-13T19:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\nindex 65de51ca..ba0a0789 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n\n@@ -25,7 +25,7 @@ import java.util.Optional;\n import javax.annotation.Nullable;\n \n /**\n- * A yaml block for specifying files layers\n+ * A yaml block for specifying files layers.\n  *\n  * <p>Example use of this yaml snippet.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDU1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453854551", "bodyText": "Probably LayerSpec.Deserializer is publicly accessible, but I guess it doesn't matter because all the buildfile classes are internal and not public API, right?", "author": "chanseokoh", "createdAt": "2020-07-13T18:41:06Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {", "originalCommit": "540600f26292909f4a47a87ad8b38a897414ad50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NzU4Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453887583", "bodyText": "That's a good point, but since interfaces don't allow the private modifier, I think this is fine. Otherwise we would have to add another class to do this?", "author": "loosebazooka", "createdAt": "2020-07-13T19:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\nindex f6351016..cb9556c8 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n\n@@ -40,13 +40,14 @@ public interface LayerSpec {\n      * {@link ArchiveLayerSpec}, else a {@link FileLayerSpec}.\n      */\n     @Override\n-    public LayerSpec deserialize(JsonParser jp, DeserializationContext txt) throws IOException {\n-      JsonNode n = (JsonNode) jp.getCodec().readTree(jp);\n-      if (n.has(\"archive\")) {\n-        return jp.getCodec().treeToValue(n, ArchiveLayerSpec.class);\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {\n+      JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n+      if (node.has(\"archive\")) {\n+        return jsonParser.getCodec().treeToValue(node, ArchiveLayerSpec.class);\n       }\n-      if (n.has(\"files\")) {\n-        return jp.getCodec().treeToValue(n, FileLayerSpec.class);\n+      if (node.has(\"files\")) {\n+        return jsonParser.getCodec().treeToValue(node, FileLayerSpec.class);\n       }\n       throw new IOException(\"Could not parse entry into ArchiveLayer or FileLayer\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NTI4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453855280", "bodyText": "And how about\njp --> parser\ntxt --> context\nn --> node\n?", "author": "chanseokoh", "createdAt": "2020-07-13T18:42:30Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type\n+     * {@link ArchiveLayerSpec}, else a {@link FileLayerSpec}.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jp, DeserializationContext txt) throws IOException {", "originalCommit": "540600f26292909f4a47a87ad8b38a897414ad50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\nindex f6351016..cb9556c8 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n\n@@ -40,13 +40,14 @@ public interface LayerSpec {\n      * {@link ArchiveLayerSpec}, else a {@link FileLayerSpec}.\n      */\n     @Override\n-    public LayerSpec deserialize(JsonParser jp, DeserializationContext txt) throws IOException {\n-      JsonNode n = (JsonNode) jp.getCodec().readTree(jp);\n-      if (n.has(\"archive\")) {\n-        return jp.getCodec().treeToValue(n, ArchiveLayerSpec.class);\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {\n+      JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n+      if (node.has(\"archive\")) {\n+        return jsonParser.getCodec().treeToValue(node, ArchiveLayerSpec.class);\n       }\n-      if (n.has(\"files\")) {\n-        return jp.getCodec().treeToValue(n, FileLayerSpec.class);\n+      if (node.has(\"files\")) {\n+        return jsonParser.getCodec().treeToValue(node, FileLayerSpec.class);\n       }\n       throw new IOException(\"Could not parse entry into ArchiveLayer or FileLayer\");\n     }\n"}}, {"oid": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "url": "https://github.com/GoogleContainerTools/jib/commit/7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "message": "fix comments, deserialize method style", "committedDate": "2020-07-13T19:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDcxOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453910718", "bodyText": "nit: I suggest this as code comment rather than a Javadoc.", "author": "chanseokoh", "createdAt": "2020-07-13T20:25:07Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.nio.file.Paths;\n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/** Tests for {@link ArchiveLayerSpec}. */\n+public class ArchiveLayerSpecTest {\n+\n+  private static final ObjectMapper archiveLayerSpecMapper = new ObjectMapper(new YAMLFactory());\n+\n+  @Test\n+  public void testArchiveLayerSpec_full() throws JsonProcessingException {\n+    String data =\n+        \"name: layer name\\n\" + \"archive: out/archive.tgz\\n\" + \"mediaType: test.media.type\";\n+\n+    ArchiveLayerSpec parsed = archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+    Assert.assertEquals(\"layer name\", parsed.getName());\n+    Assert.assertEquals(Paths.get(\"out/archive.tgz\"), parsed.getArchive());\n+    Assert.assertEquals(\"test.media.type\", parsed.getMediaType().get());\n+  }\n+\n+  @Test\n+  public void testArchiveLayerSpec_nameRequired() {\n+    String data = \"archive: out/archive\";\n+\n+    try {\n+      archiveLayerSpecMapper.readValue(data, ArchiveLayerSpec.class);\n+      Assert.fail();\n+    } catch (JsonProcessingException jpe) {\n+      MatcherAssert.assertThat(\n+          jpe.getMessage(), CoreMatchers.startsWith(\"Missing required creator property 'name'\"));\n+    }\n+  }\n+\n+  /**\n+   * With {@link LayerSpec.Deserializer#deserialize} this test seems pointless, but it still helps\n+   * define the behavior of this class.\n+   */", "originalCommit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58ad8d93084153973241b5cc54763bdd01dc2808", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java\nindex 49ad3c25..5a4ed396 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpecTest.java\n\n@@ -54,10 +54,8 @@ public class ArchiveLayerSpecTest {\n     }\n   }\n \n-  /**\n-   * With {@link LayerSpec.Deserializer#deserialize} this test seems pointless, but it still helps\n-   * define the behavior of this class.\n-   */\n+  // With {@link LayerSpec.Deserializer#deserialize} this test seems pointless, but it still helps\n+  // define the behavior of this class.\n   @Test\n   public void testArchiveLayerSpec_archiveRequired() {\n     String data = \"name: layer name\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTM0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453911348", "bodyText": "incorrect doc?", "author": "chanseokoh", "createdAt": "2020-07-13T20:26:10Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A yaml block for specifying files layers.\n+ *\n+ * <p>Example use of this yaml snippet.\n+ *\n+ * <pre>{@code\n+ * name: \"my classes layer\"\n+ * files:\n+ *   - {@link CopySpec}\n+ *   - {@link CopySpec}\n+ * // optional properties\n+ * properties: see {@link FilePropertiesSpec}\n+ * }</pre>\n+ */\n+@JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this\n+public class FileLayerSpec implements LayerSpec {\n+  private String name;\n+  private List<CopySpec> files;\n+  @Nullable private FilePropertiesSpec properties;\n+\n+  /**\n+   * Constructor for use by jackson to populate this object.\n+   *\n+   * @param name a unique name for this layer\n+   * @param files a path to an archive file", "originalCommit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58ad8d93084153973241b5cc54763bdd01dc2808", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\nindex ba0a0789..e5c0d277 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java\n\n@@ -48,7 +48,7 @@ public class FileLayerSpec implements LayerSpec {\n    * Constructor for use by jackson to populate this object.\n    *\n    * @param name a unique name for this layer\n-   * @param files a path to an archive file\n+   * @param files a list of {@link CopySpec} describing files to add to the layer\n    * @param properties a {@link FilePropertiesSpec} that applies to all files in this layer\n    */\n   @JsonCreator\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjQyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r453912427", "bodyText": "I remember this has to start with \"Deserializes ...\". And the comment reads a bit weird to me.", "author": "chanseokoh", "createdAt": "2020-07-13T20:28:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type", "originalCommit": "7f7a3d822a0f64b7b05a40716dc9ec93379b78b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODAzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454018031", "bodyText": "updated this comment", "author": "loosebazooka", "createdAt": "2020-07-14T00:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMjQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "58ad8d93084153973241b5cc54763bdd01dc2808", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\nindex cb9556c8..2ba5319d 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java\n\n@@ -36,13 +36,17 @@ public interface LayerSpec {\n     }\n \n     /**\n-     * Deserialize based on the presence of \"archive\", if present, consider the layer to be of type\n-     * {@link ArchiveLayerSpec}, else a {@link FileLayerSpec}.\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n      */\n     @Override\n     public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n         throws IOException {\n       JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n+      if (!node.has(\"name\")) {\n+        throw new IOException(\"Could not parse layer entry, missing required property 'name'\");\n+      }\n       if (node.has(\"archive\")) {\n         return jsonParser.getCodec().treeToValue(node, ArchiveLayerSpec.class);\n       }\n"}}, {"oid": "58ad8d93084153973241b5cc54763bdd01dc2808", "url": "https://github.com/GoogleContainerTools/jib/commit/58ad8d93084153973241b5cc54763bdd01dc2808", "message": "fix comments, add name check to layerspec", "committedDate": "2020-07-14T00:03:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454392024", "bodyText": "Sorry, one final comment, then LGTM. I just noticed that the abstract super method throws IOException and JsonProcessingException. Isn't throwing JsonProcessingException more suitable for the errors you are checking?", "author": "chanseokoh", "createdAt": "2020-07-14T14:20:19Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayerSpec.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+\n+/**\n+ * Polymorphic yaml LayerSpec interface with custom deserializer, can parse both {@link\n+ * ArchiveLayerSpec} and {@link FileLayerSpec}.\n+ */\n+@JsonDeserialize(using = LayerSpec.Deserializer.class)\n+public interface LayerSpec {\n+  class Deserializer extends StdDeserializer<LayerSpec> {\n+\n+    public Deserializer() {\n+      super(LayerSpec.class);\n+    }\n+\n+    /**\n+     * Deserializes to {@link ArchiveLayerSpec} if yaml contains \"archive\" field, to {@link\n+     * FileLayerSpec} if yaml contains \"files\" field or throws {@link IOException} if neither is\n+     * found or no \"name\" was specified for the layer entry.\n+     */\n+    @Override\n+    public LayerSpec deserialize(JsonParser jsonParser, DeserializationContext context)\n+        throws IOException {", "originalCommit": "58ad8d93084153973241b5cc54763bdd01dc2808", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0OTIxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454449210", "bodyText": "JsonProcessingException has no public constructor unfortunately \ud83d\ude22 .", "author": "loosebazooka", "createdAt": "2020-07-14T15:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ0OTgzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454449832", "bodyText": "maybe there's some other subclass that I can use. I added it to the list of things to check on the tracking bug.", "author": "loosebazooka", "createdAt": "2020-07-14T15:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NDA3Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2580#discussion_r454454077", "bodyText": "Huh, interesting. I am fine going with IOException then.", "author": "chanseokoh", "createdAt": "2020-07-14T15:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjAyNA=="}], "type": "inlineReview", "revised_code": null}]}