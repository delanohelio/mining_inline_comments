{"pr_number": 2929, "pr_title": "Add new Utility to determine cache location", "pr_createdAt": "2020-12-08T03:19:25Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2929", "timeline": [{"oid": "8b56f664bc717203d228161d02ff619f1ac395b5", "url": "https://github.com/GoogleContainerTools/jib/commit/8b56f664bc717203d228161d02ff619f1ac395b5", "message": "Add new Caches utility to determine cache location", "committedDate": "2020-12-08T03:20:36Z", "type": "forcePushed"}, {"oid": "dacfdb3172b6a34445bddfac99fc8d611edf2c6c", "url": "https://github.com/GoogleContainerTools/jib/commit/dacfdb3172b6a34445bddfac99fc8d611edf2c6c", "message": "Add new Caches utility to determine cache location", "committedDate": "2020-12-08T18:53:23Z", "type": "commit"}, {"oid": "db286ca13c41014c2cb7bdd35167540182219029", "url": "https://github.com/GoogleContainerTools/jib/commit/db286ca13c41014c2cb7bdd35167540182219029", "message": "use hex representation", "committedDate": "2020-12-08T18:53:35Z", "type": "commit"}, {"oid": "db286ca13c41014c2cb7bdd35167540182219029", "url": "https://github.com/GoogleContainerTools/jib/commit/db286ca13c41014c2cb7bdd35167540182219029", "message": "use hex representation", "committedDate": "2020-12-08T18:53:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3ODQxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538878419", "bodyText": "Perhaps, CacheLocation?", "author": "mpeddada1", "createdAt": "2020-12-08T23:11:56Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {", "originalCommit": "db286ca13c41014c2cb7bdd35167540182219029", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nsimilarity index 91%\nrename from jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java\nrename to jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nindex bb19913f..4cd531d6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n\n@@ -26,7 +26,7 @@ import java.util.Optional;\n import javax.annotation.Nullable;\n \n /** A class to determine cache locations for any cli commands. */\n-public class Caches {\n+public class CacheDirectories {\n \n   @Nullable private final Path baseImageCache;\n   private final Path projectCache;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Njk2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538886969", "bodyText": "very nit: don't need the Truth8 at the beginning. Same below.", "author": "mpeddada1", "createdAt": "2020-12-08T23:26:43Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.truth.Truth;\n+import com.google.common.truth.Truth8;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+public class CachesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCaches_defaults() {\n+    CommonCliOptions commonCliOptions = new CommonCliOptions();\n+    Path buildContext = Paths.get(\"some-context\");\n+    Caches caches = Caches.from(commonCliOptions, buildContext);\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n+    Truth8.assertThat(caches.getProjectCache())", "originalCommit": "db286ca13c41014c2cb7bdd35167540182219029", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java\ndeleted file mode 100644\nindex 26af8860..00000000\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package com.google.cloud.tools.jib.cli.cli2;\n-\n-import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n-import com.google.common.truth.Truth;\n-import com.google.common.truth.Truth8;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Optional;\n-import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.mockito.Mockito;\n-\n-public class CachesTest {\n-\n-  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n-\n-  @Test\n-  public void testCaches_defaults() {\n-    CommonCliOptions commonCliOptions = new CommonCliOptions();\n-    Path buildContext = Paths.get(\"some-context\");\n-    Caches caches = Caches.from(commonCliOptions, buildContext);\n-\n-    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n-    Truth8.assertThat(caches.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(Caches.hashPath(Paths.get(\"some-context\"))));\n-  }\n-\n-  @Test\n-  public void testCaches_configuredValuesIgnoresBuildContext() {\n-    CommonCliOptions commonCliOptions = Mockito.mock(CommonCliOptions.class);\n-    Path userBaseImageCache = Paths.get(\"test-base-image-cache\");\n-    Path userProjectCache = Paths.get(\"test-project-cache\");\n-    Mockito.when(commonCliOptions.getBaseImageCache()).thenReturn(Optional.of(userBaseImageCache));\n-    Mockito.when(commonCliOptions.getProjectCache()).thenReturn(Optional.of(userProjectCache));\n-    Caches caches = Caches.from(commonCliOptions, Paths.get(\"ignored\"));\n-\n-    Truth8.assertThat(caches.getBaseImageCache()).hasValue(userBaseImageCache);\n-    Truth8.assertThat(caches.getProjectCache()).isEqualTo(userProjectCache);\n-  }\n-\n-  @Test\n-  public void testHashPath_sameFileDifferentPaths() throws IOException {\n-    temporaryFolder.newFolder(\"ignored\");\n-    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n-    Path path2 = temporaryFolder.getRoot().toPath();\n-\n-    Assert.assertNotEquals(path1, path2); // the general equality should not hold true\n-    Assert.assertTrue(Files.isSameFile(path1, path2)); // path equality holds\n-    Truth.assertThat(Caches.hashPath(path1))\n-        .isEqualTo(Caches.hashPath(path2)); // our hash should hold\n-  }\n-\n-  @Test\n-  public void testHashPath_different() {\n-    Truth.assertThat(Caches.hashPath(Paths.get(\"1\"))).isNotEqualTo(Caches.hashPath(Paths.get(\"2\")));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4ODQzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538888438", "bodyText": "assertThat(path2).isNotEqualTo(path1)\nassertThat(Files.isSameFine(path1, path2)).isTrue()", "author": "mpeddada1", "createdAt": "2020-12-08T23:30:02Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.truth.Truth;\n+import com.google.common.truth.Truth8;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+public class CachesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCaches_defaults() {\n+    CommonCliOptions commonCliOptions = new CommonCliOptions();\n+    Path buildContext = Paths.get(\"some-context\");\n+    Caches caches = Caches.from(commonCliOptions, buildContext);\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n+    Truth8.assertThat(caches.getProjectCache())\n+        .isEqualTo(\n+            XdgDirectories.getCacheHome()\n+                .resolve(\"cli\")\n+                .resolve(\"projects\")\n+                .resolve(Caches.hashPath(Paths.get(\"some-context\"))));\n+  }\n+\n+  @Test\n+  public void testCaches_configuredValuesIgnoresBuildContext() {\n+    CommonCliOptions commonCliOptions = Mockito.mock(CommonCliOptions.class);\n+    Path userBaseImageCache = Paths.get(\"test-base-image-cache\");\n+    Path userProjectCache = Paths.get(\"test-project-cache\");\n+    Mockito.when(commonCliOptions.getBaseImageCache()).thenReturn(Optional.of(userBaseImageCache));\n+    Mockito.when(commonCliOptions.getProjectCache()).thenReturn(Optional.of(userProjectCache));\n+    Caches caches = Caches.from(commonCliOptions, Paths.get(\"ignored\"));\n+\n+    Truth8.assertThat(caches.getBaseImageCache()).hasValue(userBaseImageCache);\n+    Truth8.assertThat(caches.getProjectCache()).isEqualTo(userProjectCache);\n+  }\n+\n+  @Test\n+  public void testHashPath_sameFileDifferentPaths() throws IOException {\n+    temporaryFolder.newFolder(\"ignored\");\n+    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n+    Path path2 = temporaryFolder.getRoot().toPath();\n+\n+    Assert.assertNotEquals(path1, path2); // the general equality should not hold true\n+    Assert.assertTrue(Files.isSameFile(path1, path2)); // path equality holds", "originalCommit": "db286ca13c41014c2cb7bdd35167540182219029", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java\ndeleted file mode 100644\nindex 26af8860..00000000\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CachesTest.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package com.google.cloud.tools.jib.cli.cli2;\n-\n-import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n-import com.google.common.truth.Truth;\n-import com.google.common.truth.Truth8;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Optional;\n-import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.mockito.Mockito;\n-\n-public class CachesTest {\n-\n-  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n-\n-  @Test\n-  public void testCaches_defaults() {\n-    CommonCliOptions commonCliOptions = new CommonCliOptions();\n-    Path buildContext = Paths.get(\"some-context\");\n-    Caches caches = Caches.from(commonCliOptions, buildContext);\n-\n-    Truth8.assertThat(caches.getBaseImageCache()).isEmpty();\n-    Truth8.assertThat(caches.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(Caches.hashPath(Paths.get(\"some-context\"))));\n-  }\n-\n-  @Test\n-  public void testCaches_configuredValuesIgnoresBuildContext() {\n-    CommonCliOptions commonCliOptions = Mockito.mock(CommonCliOptions.class);\n-    Path userBaseImageCache = Paths.get(\"test-base-image-cache\");\n-    Path userProjectCache = Paths.get(\"test-project-cache\");\n-    Mockito.when(commonCliOptions.getBaseImageCache()).thenReturn(Optional.of(userBaseImageCache));\n-    Mockito.when(commonCliOptions.getProjectCache()).thenReturn(Optional.of(userProjectCache));\n-    Caches caches = Caches.from(commonCliOptions, Paths.get(\"ignored\"));\n-\n-    Truth8.assertThat(caches.getBaseImageCache()).hasValue(userBaseImageCache);\n-    Truth8.assertThat(caches.getProjectCache()).isEqualTo(userProjectCache);\n-  }\n-\n-  @Test\n-  public void testHashPath_sameFileDifferentPaths() throws IOException {\n-    temporaryFolder.newFolder(\"ignored\");\n-    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n-    Path path2 = temporaryFolder.getRoot().toPath();\n-\n-    Assert.assertNotEquals(path1, path2); // the general equality should not hold true\n-    Assert.assertTrue(Files.isSameFile(path1, path2)); // path equality holds\n-    Truth.assertThat(Caches.hashPath(path1))\n-        .isEqualTo(Caches.hashPath(path2)); // our hash should hold\n-  }\n-\n-  @Test\n-  public void testHashPath_different() {\n-    Truth.assertThat(Caches.hashPath(Paths.get(\"1\"))).isNotEqualTo(Caches.hashPath(Paths.get(\"2\")));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r538892279", "bodyText": "For my understanding, why is .normalize() needed here?", "author": "mpeddada1", "createdAt": "2020-12-08T23:39:20Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class Caches {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory\n+   * @return an instance of Caches with cli specific cache locations\n+   */\n+  public static Caches from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Path defaultProjectCache =\n+        XdgDirectories.getCacheHome()\n+            .resolve(\"cli\")\n+            .resolve(\"projects\")\n+            .resolve(hashPath(contextRoot));\n+    return new Caches(\n+        commonCliOptions.getBaseImageCache().orElse(null),\n+        commonCliOptions.getProjectCache().orElse(defaultProjectCache));\n+  }\n+\n+  @VisibleForTesting\n+  static String hashPath(Path path) {\n+    try {\n+      byte[] hashedBytes =\n+          MessageDigest.getInstance(\"SHA-256\")\n+              .digest(path.toAbsolutePath().normalize().toString().getBytes(Charsets.UTF_8));", "originalCommit": "db286ca13c41014c2cb7bdd35167540182219029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3MjMxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539472310", "bodyText": "it's to remove any . and .. from the path", "author": "loosebazooka", "createdAt": "2020-12-09T16:49:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5OTA5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539499097", "bodyText": "since the hashing occurs on the string representation of the path, we want /home/./potato/../tomato == /home/tomato, since they are in essence the same path.", "author": "loosebazooka", "createdAt": "2020-12-09T17:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxMjAzNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539512037", "bodyText": "AFAIK, I remember toAboslutePath() simply adds / at the front. Can we somehow guarantee that path is a real absolute path? Maybe we should use File.getCanonicalPath() (e.g., as in ZipUtil)? Path is purely conceptual, while File.getCanonicalPath() does actual computation against a filesystem.", "author": "chanseokoh", "createdAt": "2020-12-09T17:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMjA5Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539532093", "bodyText": "Yeah initially I didn't want the file system to process anything, but you're probably right. Changed to canonical, but we can revisit later, if problem occur?", "author": "loosebazooka", "createdAt": "2020-12-09T18:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nsimilarity index 91%\nrename from jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java\nrename to jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nindex bb19913f..4cd531d6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Caches.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n\n@@ -26,7 +26,7 @@ import java.util.Optional;\n import javax.annotation.Nullable;\n \n /** A class to determine cache locations for any cli commands. */\n-public class Caches {\n+public class CacheDirectories {\n \n   @Nullable private final Path baseImageCache;\n   private final Path projectCache;\n"}}, {"oid": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "url": "https://github.com/GoogleContainerTools/jib/commit/d6e57c7a81113e601e5eda7d6b81002d011f990a", "message": "rename and adjust tests", "committedDate": "2020-12-09T17:48:17Z", "type": "commit"}, {"oid": "253666273b835770cd2fabf35651e22bc90e023e", "url": "https://github.com/GoogleContainerTools/jib/commit/253666273b835770cd2fabf35651e22bc90e023e", "message": "use canonical path", "committedDate": "2020-12-09T18:07:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MDI2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r539550267", "bodyText": "Sorry missed this last time, we could make the naming a little more specific for these two variables?", "author": "mpeddada1", "createdAt": "2020-12-09T18:35:33Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import picocli.CommandLine;\n+\n+public class CacheDirectoriesTest {\n+\n+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testCacheDirectories_defaults() {\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+    Path buildContext = Paths.get(\"some-context\");\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n+\n+    assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n+    assertThat(cacheDirectories.getProjectCache())\n+        .isEqualTo(\n+            XdgDirectories.getCacheHome()\n+                .resolve(\"cli\")\n+                .resolve(\"projects\")\n+                .resolve(CacheDirectories.hashPath(Paths.get(\"some-context\"))));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(\n+            new CommonCliOptions(),\n+            \"-t=ignored\",\n+            \"--base-image-cache=test-base-image-cache\",\n+            \"--project-cache=test-project-cache\");\n+    CacheDirectories cacheDirectories =\n+        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+\n+    assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+  }\n+\n+  @Test\n+  public void testHashPath_sameFileDifferentPaths() throws IOException {\n+    temporaryFolder.newFolder(\"ignored\");\n+    Path path1 = temporaryFolder.getRoot().toPath().resolve(\"ignored\").resolve(\"..\");\n+    Path path2 = temporaryFolder.getRoot().toPath();", "originalCommit": "d6e57c7a81113e601e5eda7d6b81002d011f990a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65124777113368385864803e97d7d9b387b7d26b", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\nindex f80dc9ed..f054c078 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n\n@@ -46,7 +46,9 @@ public class CacheDirectoriesTest {\n             XdgDirectories.getCacheHome()\n                 .resolve(\"cli\")\n                 .resolve(\"projects\")\n-                .resolve(CacheDirectories.hashPath(Paths.get(\"some-context\"))));\n+                .resolve(\n+                    CacheDirectories.getProjectCacheDirectoryFromProject(\n+                        Paths.get(\"some-context\"))));\n   }\n \n   @Test\n"}}, {"oid": "65124777113368385864803e97d7d9b387b7d26b", "url": "https://github.com/GoogleContainerTools/jib/commit/65124777113368385864803e97d7d9b387b7d26b", "message": "naming", "committedDate": "2020-12-09T20:38:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NTU1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2929#discussion_r540355559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return an instance of Caches with cli specific cache locations\n          \n          \n            \n               * @return an instance of CacheDirectories with cli specific cache locations", "author": "mpeddada1", "createdAt": "2020-12-10T17:24:12Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.XdgDirectories;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+/** A class to determine cache locations for any cli commands. */\n+public class CacheDirectories {\n+\n+  @Nullable private final Path baseImageCache;\n+  private final Path projectCache;\n+\n+  /**\n+   * Create a caches helper for cli cache locations.\n+   *\n+   * @param commonCliOptions cli options\n+   * @param contextRoot the context root, if a single file, use the parent directory, this context\n+   *     root must exist\n+   * @return an instance of Caches with cli specific cache locations", "originalCommit": "65124777113368385864803e97d7d9b387b7d26b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43dfbf3e3f29e6da62328196a4b991cbbbf0ccc7", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nindex 5ccd27ae..edea43ee 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n\n@@ -38,7 +38,7 @@ public class CacheDirectories {\n    * @param commonCliOptions cli options\n    * @param contextRoot the context root, if a single file, use the parent directory, this context\n    *     root must exist\n-   * @return an instance of Caches with cli specific cache locations\n+   * @return an instance of CacheDirectories with cli specific cache locations\n    */\n   public static CacheDirectories from(CommonCliOptions commonCliOptions, Path contextRoot) {\n     return new CacheDirectories(\n"}}, {"oid": "43dfbf3e3f29e6da62328196a4b991cbbbf0ccc7", "url": "https://github.com/GoogleContainerTools/jib/commit/43dfbf3e3f29e6da62328196a4b991cbbbf0ccc7", "message": "Update jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n\nCo-authored-by: Mridula <66699525+mpeddada1@users.noreply.github.com>", "committedDate": "2020-12-11T04:41:02Z", "type": "commit"}]}