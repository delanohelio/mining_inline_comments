{"pr_number": 2926, "pr_title": "Add integration tests for explode mode of spring boot jar", "pr_createdAt": "2020-12-07T17:32:54Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2926", "timeline": [{"oid": "6758dee990958b4027d4e22545a4f9384daa26f3", "url": "https://github.com/GoogleContainerTools/jib/commit/6758dee990958b4027d4e22545a4f9384daa26f3", "message": "wip", "committedDate": "2020-11-24T01:46:04Z", "type": "commit"}, {"oid": "0547910bc469f07f4f10f1948a9500161436976b", "url": "https://github.com/GoogleContainerTools/jib/commit/0547910bc469f07f4f10f1948a9500161436976b", "message": "wip", "committedDate": "2020-12-02T21:43:54Z", "type": "commit"}, {"oid": "5ce9619fdc8943324e87bc5daa6d746945bf9dec", "url": "https://github.com/GoogleContainerTools/jib/commit/5ce9619fdc8943324e87bc5daa6d746945bf9dec", "message": "exploded mode for spring boot fat jar", "committedDate": "2020-12-03T23:45:17Z", "type": "commit"}, {"oid": "dc2556a5ab323396838ba1405f5fd376605b8d06", "url": "https://github.com/GoogleContainerTools/jib/commit/dc2556a5ab323396838ba1405f5fd376605b8d06", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into cli-spring-boot-expl", "committedDate": "2020-12-03T23:45:23Z", "type": "commit"}, {"oid": "8cf2adc8a73cbee6644106a783d707b2d3253db4", "url": "https://github.com/GoogleContainerTools/jib/commit/8cf2adc8a73cbee6644106a783d707b2d3253db4", "message": "remove test jar", "committedDate": "2020-12-04T01:01:04Z", "type": "commit"}, {"oid": "0864cfb8e8e582980e2a7840260eb5365d696444", "url": "https://github.com/GoogleContainerTools/jib/commit/0864cfb8e8e582980e2a7840260eb5365d696444", "message": "clean up", "committedDate": "2020-12-04T02:36:36Z", "type": "commit"}, {"oid": "9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "url": "https://github.com/GoogleContainerTools/jib/commit/9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "message": "fix NoSuchElementException when layers.idx includes a layer with no files listed", "committedDate": "2020-12-04T23:10:49Z", "type": "commit"}, {"oid": "5745da8c438bc56ca8257ce745a29ef5d44189b8", "url": "https://github.com/GoogleContainerTools/jib/commit/5745da8c438bc56ca8257ce745a29ef5d44189b8", "message": "rename test jar", "committedDate": "2020-12-04T23:15:56Z", "type": "commit"}, {"oid": "8d4558cff67efb4e25d01a745663c8475df69e1f", "url": "https://github.com/GoogleContainerTools/jib/commit/8d4558cff67efb4e25d01a745663c8475df69e1f", "message": "formatting", "committedDate": "2020-12-04T23:22:47Z", "type": "commit"}, {"oid": "a56f4389cde1eb70adb9cb79602dd2a474c069dc", "url": "https://github.com/GoogleContainerTools/jib/commit/a56f4389cde1eb70adb9cb79602dd2a474c069dc", "message": "Add integration testing for layered and non-layered springboot jars", "committedDate": "2020-12-07T17:27:03Z", "type": "commit"}, {"oid": "4c6bfba31af3571094279d787d28ce9834760fdd", "url": "https://github.com/GoogleContainerTools/jib/commit/4c6bfba31af3571094279d787d28ce9834760fdd", "message": "cleanup", "committedDate": "2020-12-07T18:36:10Z", "type": "commit"}, {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "url": "https://github.com/GoogleContainerTools/jib/commit/4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "message": "cleanup", "committedDate": "2020-12-07T18:48:45Z", "type": "commit"}, {"oid": "4497b17559e2cee42dbe4b0118f1f6fabc79f021", "url": "https://github.com/GoogleContainerTools/jib/commit/4497b17559e2cee42dbe4b0118f1f6fabc79f021", "message": "Merge branch 'cli-spring-boot-expl' of github.com:GoogleContainerTools/jib into spring-boot-integration-tests", "committedDate": "2020-12-08T18:50:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r538782498", "bodyText": "How are these spring boot jars constructed? They don't seem like an actual jar built from a Spring Boot project. (Usually it runs a server listening on port 8080).", "author": "chanseokoh", "createdAt": "2020-12-08T20:26:50Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -142,6 +142,39 @@ public void testNoDependencyJar_packagedMode_toDocker()\n     }\n   }\n \n+  @Test\n+  public void testSpringbootLayeredJar_explodedMode_toDocker()\n+      throws IOException, InterruptedException, URISyntaxException {\n+    Path jarPath =\n+        Paths.get(Resources.getResource(\"jarTest/springboot/springboot_layered.jar\").toURI());", "originalCommit": "a56f4389cde1eb70adb9cb79602dd2a474c069dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NDEwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r538874100", "bodyText": "Great question! To create the jars, I downloaded the demo project from https://start.spring.io/ and ran ./mvnw package. Although, I just realized that I'm currently asserting on System.out instead of actually testing if the desired output shows up on localhost:8080 after having run SpringApplication.run() -- which is probably not a sign of a good test for a spring boot application. I'll correct this.", "author": "mpeddada1", "createdAt": "2020-12-08T23:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNTcxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r539415710", "bodyText": "Hmm... yeah. It looked weird that a Spring Boot app prints Hello World and quits. Do the tests actually pass?\nWe have similar Spring Boot integration tests, For example, take a look at\nhttps://github.com/GoogleContainerTools/jib/blob/master/jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SpringBootProjectIntegrationTest.java", "author": "chanseokoh", "createdAt": "2020-12-09T15:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MjQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2a548fdefafe6dead1914bd55c0c2db4b483f768", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\nindex fac5a928..7ee59e07 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n\n@@ -143,6 +170,7 @@ public class JarCommandTest {\n   }\n \n   @Test\n+  @Ignore\n   public void testSpringbootLayeredJar_explodedMode_toDocker()\n       throws IOException, InterruptedException, URISyntaxException {\n     Path jarPath =\n"}}, {"oid": "2a548fdefafe6dead1914bd55c0c2db4b483f768", "url": "https://github.com/GoogleContainerTools/jib/commit/2a548fdefafe6dead1914bd55c0c2db4b483f768", "message": "wip", "committedDate": "2020-12-14T16:21:06Z", "type": "commit"}, {"oid": "7ae86312cad5b92046d038f34182663d3edc8486", "url": "https://github.com/GoogleContainerTools/jib/commit/7ae86312cad5b92046d038f34182663d3edc8486", "message": "use test projects for spring-boot tests", "committedDate": "2020-12-15T01:03:57Z", "type": "commit"}, {"oid": "15ade55ec434d2938514900cbd40e8e7d5b390d8", "url": "https://github.com/GoogleContainerTools/jib/commit/15ade55ec434d2938514900cbd40e8e7d5b390d8", "message": "cleanup", "committedDate": "2020-12-15T01:26:43Z", "type": "commit"}, {"oid": "ec0c6cab9741ac6ea8bc73d9a770af0890fecdde", "url": "https://github.com/GoogleContainerTools/jib/commit/ec0c6cab9741ac6ea8bc73d9a770af0890fecdde", "message": "Resolve merge conflicts", "committedDate": "2020-12-15T23:07:02Z", "type": "commit"}, {"oid": "68e953c7e234d96e7bcc37cc7689e3f659d6f85d", "url": "https://github.com/GoogleContainerTools/jib/commit/68e953c7e234d96e7bcc37cc7689e3f659d6f85d", "message": "resolve more conflicts", "committedDate": "2020-12-15T23:10:14Z", "type": "commit"}, {"oid": "51be0357904c313b59ee06b2d9d23cfea9a62997", "url": "https://github.com/GoogleContainerTools/jib/commit/51be0357904c313b59ee06b2d9d23cfea9a62997", "message": "fix naming", "committedDate": "2020-12-15T23:19:20Z", "type": "commit"}, {"oid": "864bfcb2a3900c97d0e65c86db4fcd47e845fd9f", "url": "https://github.com/GoogleContainerTools/jib/commit/864bfcb2a3900c97d0e65c86db4fcd47e845fd9f", "message": "modify target image name in test", "committedDate": "2020-12-15T23:21:55Z", "type": "commit"}, {"oid": "11f22fc9c73fa01fc9b1d8c917c39426998d603f", "url": "https://github.com/GoogleContainerTools/jib/commit/11f22fc9c73fa01fc9b1d8c917c39426998d603f", "message": "final cleanups", "committedDate": "2020-12-15T23:35:15Z", "type": "commit"}, {"oid": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "url": "https://github.com/GoogleContainerTools/jib/commit/ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "message": "apply java formatter", "committedDate": "2020-12-15T23:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTI5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544399295", "bodyText": "Hmm... I'm curious. Does it not work without toAbsolutePath()?", "author": "chanseokoh", "createdAt": "2020-12-16T15:38:23Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ4MzUzOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544483539", "bodyText": "Ah good catch. toAbsolutePath() doesn't make a difference", "author": "mpeddada1", "createdAt": "2020-12-16T17:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\nindex 3de16e4f..85d8e770 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n\n@@ -171,23 +181,22 @@ public class JarCommandTest {\n   @Test\n   public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n     springBootProjectLayered.build(\"clean\", \"bootJar\");\n-    Path jarParentPath =\n-        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarParentPath = springBootProjectLayered.getProjectRoot().resolve(\"build\").resolve(\"libs\");\n     Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n \n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    assertThat(exitCode).isEqualTo(0);\n+\n     String output =\n         new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n             .run();\n-\n+    containerName = output.trim();\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+\n       assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n       assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n-      assertThat(exitCode).isEqualTo(0);\n-\n-      new Command(\"docker\", \"stop\", output.trim()).run();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMTE4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544401187", "bodyText": "This will not run if one of the assertions above fail or some code throws an exception. Put it in finally, or @After public tearDown() as done in other tests.", "author": "chanseokoh", "createdAt": "2020-12-16T15:40:42Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\nindex 3de16e4f..85d8e770 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n\n@@ -171,23 +181,22 @@ public class JarCommandTest {\n   @Test\n   public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n     springBootProjectLayered.build(\"clean\", \"bootJar\");\n-    Path jarParentPath =\n-        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarParentPath = springBootProjectLayered.getProjectRoot().resolve(\"build\").resolve(\"libs\");\n     Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n \n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    assertThat(exitCode).isEqualTo(0);\n+\n     String output =\n         new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n             .run();\n-\n+    containerName = output.trim();\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+\n       assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n       assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n-      assertThat(exitCode).isEqualTo(0);\n-\n-      new Command(\"docker\", \"stop\", output.trim()).run();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMjY1Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544402656", "bodyText": "Nit: I'd put this before docker run so that you don't run docker run if jib jar fails for some reason.", "author": "chanseokoh", "createdAt": "2020-12-16T15:42:22Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\nindex 3de16e4f..85d8e770 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n\n@@ -171,23 +181,22 @@ public class JarCommandTest {\n   @Test\n   public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n     springBootProjectLayered.build(\"clean\", \"bootJar\");\n-    Path jarParentPath =\n-        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarParentPath = springBootProjectLayered.getProjectRoot().resolve(\"build\").resolve(\"libs\");\n     Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n \n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    assertThat(exitCode).isEqualTo(0);\n+\n     String output =\n         new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n             .run();\n-\n+    containerName = output.trim();\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+\n       assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n       assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n-      assertThat(exitCode).isEqualTo(0);\n-\n-      new Command(\"docker\", \"stop\", output.trim()).run();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMzAyOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544403029", "bodyText": "private", "author": "chanseokoh", "createdAt": "2020-12-16T15:42:48Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java", "diffHunk": "@@ -154,4 +167,71 @@ public void testJar_unknownMode() {\n         .contains(\n             \"Invalid value for option '--mode': expected one of [exploded, packaged] (case-sensitive) but was 'unknown'\");\n   }\n+\n+  @Test\n+  public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n+            .run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();\n+    }\n+  }\n+\n+  @Test\n+  public void testSpringBootNonLayeredJar_explodedMode() throws IOException, InterruptedException {\n+    springBootProjectNonLayered.build(\"clean\", \"bootJar\");\n+    Path jarParentPath =\n+        springBootProjectNonLayered\n+            .getProjectRoot()\n+            .toAbsolutePath()\n+            .resolve(\"build\")\n+            .resolve(\"libs\");\n+    Path jarPath = jarParentPath.resolve(\"spring-boot-nonlayered.jar\");\n+\n+    Integer exitCode =\n+        new CommandLine(new JibCli())\n+            .execute(\"jar\", \"--target\", \"docker://spring-boot-jar\", jarPath.toString());\n+    String output =\n+        new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar\").run();\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNull();\n+      assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n+      assertThat(exitCode).isEqualTo(0);\n+\n+      new Command(\"docker\", \"stop\", output.trim()).run();\n+    }\n+  }\n+\n+  @Nullable\n+  static String getContent(URL url) throws InterruptedException {", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\nindex 3de16e4f..85d8e770 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/JarCommandTest.java\n\n@@ -171,23 +181,22 @@ public class JarCommandTest {\n   @Test\n   public void testSpringBootLayeredJar_explodedMode() throws IOException, InterruptedException {\n     springBootProjectLayered.build(\"clean\", \"bootJar\");\n-    Path jarParentPath =\n-        springBootProjectLayered.getProjectRoot().toAbsolutePath().resolve(\"build\").resolve(\"libs\");\n+    Path jarParentPath = springBootProjectLayered.getProjectRoot().resolve(\"build\").resolve(\"libs\");\n     Path jarPath = jarParentPath.resolve(\"spring-boot-layered.jar\");\n \n     Integer exitCode =\n         new CommandLine(new JibCli())\n             .execute(\"jar\", \"--target\", \"docker://spring-boot-jar-layered\", jarPath.toString());\n+    assertThat(exitCode).isEqualTo(0);\n+\n     String output =\n         new Command(\"docker\", \"run\", \"--rm\", \"--detach\", \"-p8080:8080\", \"spring-boot-jar-layered\")\n             .run();\n-\n+    containerName = output.trim();\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+\n       assertThat(jarFile.getEntry(\"BOOT-INF/layers.idx\")).isNotNull();\n       assertThat(getContent(new URL(\"http://localhost:8080\"))).isEqualTo(\"Hello world\");\n-      assertThat(exitCode).isEqualTo(0);\n-\n-      new Command(\"docker\", \"stop\", output.trim()).run();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMzczNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544403737", "bodyText": "final", "author": "chanseokoh", "createdAt": "2020-12-16T15:43:38Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n+import com.google.common.io.Resources;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.gradle.testkit.runner.BuildResult;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.gradle.util.GradleVersion;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestProject extends TemporaryFolder implements Closeable {\n+\n+  private static final String PROJECTS_PATH_IN_RESOURCES = \"jarTest/spring-boot/\";\n+\n+  /** Copies test project {@code projectName} to {@code destination} folder. */\n+  private static void copyProject(String projectName, Path destination)\n+      throws IOException, URISyntaxException {\n+    Path projectPathInResources =\n+        Paths.get(Resources.getResource(PROJECTS_PATH_IN_RESOURCES + projectName).toURI());\n+    new DirectoryWalker(projectPathInResources)\n+        .filterRoot()\n+        .walk(\n+            path -> {\n+              // Creates the same path in the destDir.\n+              Path destPath = destination.resolve(projectPathInResources.relativize(path));\n+              if (Files.isDirectory(path)) {\n+                Files.createDirectory(destPath);\n+              } else {\n+                Files.copy(path, destPath);\n+              }\n+            });\n+  }\n+\n+  private final String testProjectName;\n+  private String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\nindex 977bcd1f..2946353f 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\n\n@@ -53,7 +53,7 @@ public class TestProject extends TemporaryFolder implements Closeable {\n   }\n \n   private final String testProjectName;\n-  private String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();\n+  private final String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();\n   private GradleRunner gradleRunner;\n \n   private Path projectRoot;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwNjI5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2926#discussion_r544406295", "bodyText": "I wish we had a way to share test utility classes across all projects. But let's not try to resolve this in this PR.\n@loosebazooka", "author": "chanseokoh", "createdAt": "2020-12-16T15:46:45Z", "path": "jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.cli2;\n+\n+import com.google.cloud.tools.jib.filesystem.DirectoryWalker;\n+import com.google.common.io.Resources;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import org.gradle.testkit.runner.BuildResult;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.gradle.util.GradleVersion;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestProject extends TemporaryFolder implements Closeable {", "originalCommit": "ced0108595b0c204de0e8f285ff9ac3e7e6200ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a651ee05735f8f365d433f16f9461699020467b2", "chunk": "diff --git a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\nindex 977bcd1f..2946353f 100644\n--- a/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\n+++ b/jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/cli2/TestProject.java\n\n@@ -53,7 +53,7 @@ public class TestProject extends TemporaryFolder implements Closeable {\n   }\n \n   private final String testProjectName;\n-  private String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();\n+  private final String gradleVersion = GradleVersion.version(\"5.6.4\").getVersion();\n   private GradleRunner gradleRunner;\n \n   private Path projectRoot;\n"}}, {"oid": "a651ee05735f8f365d433f16f9461699020467b2", "url": "https://github.com/GoogleContainerTools/jib/commit/a651ee05735f8f365d433f16f9461699020467b2", "message": "comment fixes", "committedDate": "2020-12-16T16:47:12Z", "type": "commit"}, {"oid": "5cc546794ff04c45a828e876cbf54bbc3a21550d", "url": "https://github.com/GoogleContainerTools/jib/commit/5cc546794ff04c45a828e876cbf54bbc3a21550d", "message": "empty commit to trigger builds", "committedDate": "2020-12-16T19:54:39Z", "type": "commit"}]}