{"pr_number": 2858, "pr_title": "Add snapshot dependencies layer in explode mode for standard jar. ", "pr_createdAt": "2020-10-22T21:24:48Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2858", "timeline": [{"oid": "c8e90df17ba67de2ef04b10a096afe397f8c7d17", "url": "https://github.com/GoogleContainerTools/jib/commit/c8e90df17ba67de2ef04b10a096afe397f8c7d17", "message": "Add snapshot dependencies layer", "committedDate": "2020-10-22T18:15:29Z", "type": "commit"}, {"oid": "8bfd4763312e8a4828daa796d0177357937e3dd4", "url": "https://github.com/GoogleContainerTools/jib/commit/8bfd4763312e8a4828daa796d0177357937e3dd4", "message": "format", "committedDate": "2020-10-22T19:12:41Z", "type": "commit"}, {"oid": "e27ab10a340008c5fa436b859bc7900307f400f7", "url": "https://github.com/GoogleContainerTools/jib/commit/e27ab10a340008c5fa436b859bc7900307f400f7", "message": "format comment", "committedDate": "2020-10-22T21:20:33Z", "type": "commit"}, {"oid": "f53870d25b945a73ff8b7f3eb1ad324451c2d14e", "url": "https://github.com/GoogleContainerTools/jib/commit/f53870d25b945a73ff8b7f3eb1ad324451c2d14e", "message": "fix awkward formatting", "committedDate": "2020-10-22T21:22:57Z", "type": "commit"}, {"oid": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a", "url": "https://github.com/GoogleContainerTools/jib/commit/ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a", "message": "Merge branch 'master' into add-snapshot-layer", "committedDate": "2020-10-22T21:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODQyMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468420", "bodyText": "I think it's okay to embed the predicate. And I think the name 'isSnapshot' is fine in this local scope.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .filter(isNotSnapshotDependency)\n          \n          \n            \n                          .filter(isSnapshot.negate())", "author": "chanseokoh", "createdAt": "2020-10-22T21:28:25Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)", "originalCommit": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e10789db57a48a7ad97b2c4976fba58937bc61", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6791d6ba..a1e8443f 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -91,24 +91,19 @@ public class JarProcessor {\n     }\n \n     if (classPath != null) {\n-      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n-      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n       List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n       List<Path> nonSnapshotDependencies =\n           allDependencies\n               .stream()\n-              .filter(isNotSnapshotDependency)\n+              .filter(isSnapshot.negate())\n               .map(Paths::get)\n               .collect(Collectors.toList());\n       List<Path> snapshotDependencies =\n-          allDependencies\n-              .stream()\n-              .filter(isSnapshotDependency)\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n       if (!nonSnapshotDependencies.isEmpty()) {\n         FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n+            FileEntriesLayer.builder().setName(\"dependencies\");\n         nonSnapshotDependencies.forEach(\n             path ->\n                 nonSnapshotDependenciesLayerBuilder.addEntry(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODgzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468835", "bodyText": "For consistency, let's use the name as defined by JavaContainerBuilder.LayerType.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n          \n          \n            \n                        FileEntriesLayer.builder().setName(\"dependencies\");", "author": "chanseokoh", "createdAt": "2020-10-22T21:29:21Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshotDependency)\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");", "originalCommit": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ4MjY5MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510482691", "bodyText": "ah yes, nice catch", "author": "mpeddada1", "createdAt": "2020-10-22T21:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b0e10789db57a48a7ad97b2c4976fba58937bc61", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6791d6ba..a1e8443f 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -91,24 +91,19 @@ public class JarProcessor {\n     }\n \n     if (classPath != null) {\n-      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n-      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n       List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n       List<Path> nonSnapshotDependencies =\n           allDependencies\n               .stream()\n-              .filter(isNotSnapshotDependency)\n+              .filter(isSnapshot.negate())\n               .map(Paths::get)\n               .collect(Collectors.toList());\n       List<Path> snapshotDependencies =\n-          allDependencies\n-              .stream()\n-              .filter(isSnapshotDependency)\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n       if (!nonSnapshotDependencies.isEmpty()) {\n         FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n+            FileEntriesLayer.builder().setName(\"dependencies\");\n         nonSnapshotDependencies.forEach(\n             path ->\n                 nonSnapshotDependenciesLayerBuilder.addEntry(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODk1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2858#discussion_r510468959", "bodyText": "Likewise,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        FileEntriesLayer.builder().setName(\"snapshotDependencies\");\n          \n          \n            \n                        FileEntriesLayer.builder().setName(\"snapshot dependencies\");", "author": "chanseokoh", "createdAt": "2020-10-22T21:29:36Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -82,27 +82,48 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding a dependencies layer.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n+\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n+      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n+              .stream()\n+              .filter(isNotSnapshotDependency)\n+              .map(Paths::get)\n+              .collect(Collectors.toList());\n+      List<Path> snapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshotDependency)\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n+      }\n+      if (!snapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(\"snapshotDependencies\");", "originalCommit": "ec21a715e3b5024af0ea7eccedde7cbd9d4d3e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e10789db57a48a7ad97b2c4976fba58937bc61", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 6791d6ba..a1e8443f 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -91,24 +91,19 @@ public class JarProcessor {\n     }\n \n     if (classPath != null) {\n-      Predicate<String> isSnapshotDependency = name -> name.contains(\"SNAPSHOT\");\n-      Predicate<String> isNotSnapshotDependency = isSnapshotDependency.negate();\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n       List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n       List<Path> nonSnapshotDependencies =\n           allDependencies\n               .stream()\n-              .filter(isNotSnapshotDependency)\n+              .filter(isSnapshot.negate())\n               .map(Paths::get)\n               .collect(Collectors.toList());\n       List<Path> snapshotDependencies =\n-          allDependencies\n-              .stream()\n-              .filter(isSnapshotDependency)\n-              .map(Paths::get)\n-              .collect(Collectors.toList());\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n       if (!nonSnapshotDependencies.isEmpty()) {\n         FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n-            FileEntriesLayer.builder().setName(\"nonSnapshotDependencies\");\n+            FileEntriesLayer.builder().setName(\"dependencies\");\n         nonSnapshotDependencies.forEach(\n             path ->\n                 nonSnapshotDependenciesLayerBuilder.addEntry(\n"}}, {"oid": "b0e10789db57a48a7ad97b2c4976fba58937bc61", "url": "https://github.com/GoogleContainerTools/jib/commit/b0e10789db57a48a7ad97b2c4976fba58937bc61", "message": "addressing comment suggestions", "committedDate": "2020-10-22T21:58:11Z", "type": "commit"}]}