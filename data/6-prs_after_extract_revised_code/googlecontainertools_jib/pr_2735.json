{"pr_number": 2735, "pr_title": "Read a buildfile and convert it into a JibContainerBuilder", "pr_createdAt": "2020-08-28T23:07:43Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2735", "timeline": [{"oid": "f6fe3136130936a14b61296783408330a3bb92f8", "url": "https://github.com/GoogleContainerTools/jib/commit/f6fe3136130936a14b61296783408330a3bb92f8", "message": "Read a buildfile and convert it into a JibContainerBuilder", "committedDate": "2020-08-31T17:47:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3NzkxNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481277914", "bodyText": "nit: objectMapper might be more descriptive", "author": "mpeddada1", "createdAt": "2020-09-01T16:28:44Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+/** Class to convert BuildFiles to build container representations. */\n+public class BuildFiles {\n+\n+  /**\n+   * Read a buildfile from disk and generate a JibContainerBuilder instance. All parsing of files\n+   * considers the directory the buildfile is located in as the working directory.\n+   *\n+   * @param buildFilePath a file containing the build definition\n+   * @return a {@link JibContainerBuilder} generated from the contents of {@code buildFilePath}\n+   * @throws IOException if an I/O error occurs opening the file, or an error occurs while\n+   *     traversing files on the filesystem\n+   * @throws InvalidImageReferenceException if the baseImage reference can not be parsed\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n+      throws InvalidImageReferenceException, IOException {\n+    ObjectMapper om = new ObjectMapper(new YAMLFactory());", "originalCommit": "f6fe3136130936a14b61296783408330a3bb92f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0590b742c0afadcdde82f71123207dff26338b11", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\nindex fdeb6ea9..f35dbea6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n\n@@ -43,9 +43,10 @@ public class BuildFiles {\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n       throws InvalidImageReferenceException, IOException {\n-    ObjectMapper om = new ObjectMapper(new YAMLFactory());\n+    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n     BuildFileSpec buildFile =\n-        om.readValue(Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+        yamlObjectMapper.readValue(\n+            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n     Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n \n     JibContainerBuilder containerBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NDEyMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481284123", "bodyText": "nit: from -> baseImageSpec?", "author": "mpeddada1", "createdAt": "2020-09-01T16:39:23Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+/** Class to convert BuildFiles to build container representations. */\n+public class BuildFiles {\n+\n+  /**\n+   * Read a buildfile from disk and generate a JibContainerBuilder instance. All parsing of files\n+   * considers the directory the buildfile is located in as the working directory.\n+   *\n+   * @param buildFilePath a file containing the build definition\n+   * @return a {@link JibContainerBuilder} generated from the contents of {@code buildFilePath}\n+   * @throws IOException if an I/O error occurs opening the file, or an error occurs while\n+   *     traversing files on the filesystem\n+   * @throws InvalidImageReferenceException if the baseImage reference can not be parsed\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n+      throws InvalidImageReferenceException, IOException {\n+    ObjectMapper om = new ObjectMapper(new YAMLFactory());\n+    BuildFileSpec buildFile =\n+        om.readValue(Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+    Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n+\n+    JibContainerBuilder containerBuilder;\n+    if (buildFile.getFrom().isPresent()) {\n+      BaseImageSpec from = buildFile.getFrom().get();", "originalCommit": "f6fe3136130936a14b61296783408330a3bb92f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMjEzNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481332136", "bodyText": "I would say in this context from is a better description of that this variable represents.", "author": "loosebazooka", "createdAt": "2020-09-01T18:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0590b742c0afadcdde82f71123207dff26338b11", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\nindex fdeb6ea9..f35dbea6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n\n@@ -43,9 +43,10 @@ public class BuildFiles {\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n       throws InvalidImageReferenceException, IOException {\n-    ObjectMapper om = new ObjectMapper(new YAMLFactory());\n+    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n     BuildFileSpec buildFile =\n-        om.readValue(Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+        yamlObjectMapper.readValue(\n+            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n     Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n \n     JibContainerBuilder containerBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5MDMzNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481290334", "bodyText": "Does this need to be a {@link List} of {@link FileEntriesLayer}?", "author": "mpeddada1", "createdAt": "2020-09-01T16:49:38Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java", "diffHunk": "@@ -47,8 +47,8 @@\n    * @return a {@link List} of {@link LayerObject} to use as part of a buildplan", "originalCommit": "f6fe3136130936a14b61296783408330a3bb92f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0590b742c0afadcdde82f71123207dff26338b11", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\nindex 22e3c9b2..0811fb9d 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\n\n@@ -44,7 +43,7 @@ class Layers {\n    * @param buildRoot the directory to resolve relative paths, usually the directory where the build\n    *     config file is located\n    * @param layersSpec a layersSpec containing configuration for all layers\n-   * @return a {@link List} of {@link LayerObject} to use as part of a buildplan\n+   * @return a {@link List} of {@link FileEntriesLayer} to use as part of a jib container build\n    * @throws IOException if traversing a directory fails\n    */\n   static List<FileEntriesLayer> toLayers(Path buildRoot, LayersSpec layersSpec) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5MDk0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481290940", "bodyText": "public?", "author": "mpeddada1", "createdAt": "2020-09-01T16:50:37Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java", "diffHunk": "@@ -47,8 +47,8 @@\n    * @return a {@link List} of {@link LayerObject} to use as part of a buildplan\n    * @throws IOException if traversing a directory fails\n    */\n-  static List<LayerObject> toLayers(Path buildRoot, LayersSpec layersSpec) throws IOException {\n-    List<LayerObject> layers = new ArrayList<>();\n+  static List<FileEntriesLayer> toLayers(Path buildRoot, LayersSpec layersSpec) throws IOException {", "originalCommit": "f6fe3136130936a14b61296783408330a3bb92f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMTA3Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481331077", "bodyText": "It can be, it doesn't really need to be exposed outside of this package though. Since this isn't a library it doesn't matter all that much. But it really should only be used for conversion within the package.", "author": "loosebazooka", "createdAt": "2020-09-01T18:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5MDk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "0590b742c0afadcdde82f71123207dff26338b11", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\nindex 22e3c9b2..0811fb9d 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java\n\n@@ -44,7 +43,7 @@ class Layers {\n    * @param buildRoot the directory to resolve relative paths, usually the directory where the build\n    *     config file is located\n    * @param layersSpec a layersSpec containing configuration for all layers\n-   * @return a {@link List} of {@link LayerObject} to use as part of a buildplan\n+   * @return a {@link List} of {@link FileEntriesLayer} to use as part of a jib container build\n    * @throws IOException if traversing a directory fails\n    */\n   static List<FileEntriesLayer> toLayers(Path buildRoot, LayersSpec layersSpec) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNDI3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481304274", "bodyText": "have we considered using Truth (https://truth.dev/) for our assertions? It could offer clearer error messaging and help in understanding the actual vs expected values --> assertThat(actual).isEqualTo(expected) (for example, the actual is always on the left-hand side in Truth so we don't need to remember the correct parameter ordering)", "author": "mpeddada1", "createdAt": "2020-09-01T17:13:16Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.LayerObject;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.api.buildplan.Port;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BuildFilesTest {\n+\n+  @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_allProperties()", "originalCommit": "f6fe3136130936a14b61296783408330a3bb92f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMjY4Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r483612682", "bodyText": "No we have not, but this seems like a good idea. We can add this in a new PR and then start writing new tests using Truth. We can also update old tests slowly to use it.", "author": "loosebazooka", "createdAt": "2020-09-04T13:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNDI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "74d3dfa744c4eab4a6cd750bb2e9357eab45c322", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\nindex de31cc32..bf47f54a 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n\n@@ -42,7 +42,7 @@ import org.junit.rules.TemporaryFolder;\n \n public class BuildFilesTest {\n \n-  @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n \n   @Test\n   public void testToJibContainerBuilder_allProperties()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzODg1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481338857", "bodyText": "Close the reader with a try-resource block?", "author": "chanseokoh", "createdAt": "2020-09-01T18:14:37Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+/** Class to convert BuildFiles to build container representations. */\n+public class BuildFiles {\n+\n+  /**\n+   * Read a buildfile from disk and generate a JibContainerBuilder instance. All parsing of files\n+   * considers the directory the buildfile is located in as the working directory.\n+   *\n+   * @param buildFilePath a file containing the build definition\n+   * @return a {@link JibContainerBuilder} generated from the contents of {@code buildFilePath}\n+   * @throws IOException if an I/O error occurs opening the file, or an error occurs while\n+   *     traversing files on the filesystem\n+   * @throws InvalidImageReferenceException if the baseImage reference can not be parsed\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n+      throws InvalidImageReferenceException, IOException {\n+    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+    BuildFileSpec buildFile =\n+        yamlObjectMapper.readValue(\n+            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);", "originalCommit": "912a25d538f4ba82e5a94673a6859c109b92450f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNjU1OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481416558", "bodyText": "oh right, good call.", "author": "loosebazooka", "createdAt": "2020-09-01T20:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzODg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "914e970387c3c88a5e3fec44b8f15b07646c9bf8", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\nindex f35dbea6..fdeb6ea9 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n\n@@ -43,10 +43,9 @@ public class BuildFiles {\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n       throws InvalidImageReferenceException, IOException {\n-    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+    ObjectMapper om = new ObjectMapper(new YAMLFactory());\n     BuildFileSpec buildFile =\n-        yamlObjectMapper.readValue(\n-            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+        om.readValue(Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n     Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n \n     JibContainerBuilder containerBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzOTE4OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481339189", "bodyText": "Perhaps\n      containerBuilder = Jib.from(from.getImage());", "author": "chanseokoh", "createdAt": "2020-09-01T18:15:16Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.Jib;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.common.base.Charsets;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+/** Class to convert BuildFiles to build container representations. */\n+public class BuildFiles {\n+\n+  /**\n+   * Read a buildfile from disk and generate a JibContainerBuilder instance. All parsing of files\n+   * considers the directory the buildfile is located in as the working directory.\n+   *\n+   * @param buildFilePath a file containing the build definition\n+   * @return a {@link JibContainerBuilder} generated from the contents of {@code buildFilePath}\n+   * @throws IOException if an I/O error occurs opening the file, or an error occurs while\n+   *     traversing files on the filesystem\n+   * @throws InvalidImageReferenceException if the baseImage reference can not be parsed\n+   */\n+  public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n+      throws InvalidImageReferenceException, IOException {\n+    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+    BuildFileSpec buildFile =\n+        yamlObjectMapper.readValue(\n+            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+    Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n+\n+    JibContainerBuilder containerBuilder;\n+    if (buildFile.getFrom().isPresent()) {\n+      BaseImageSpec from = buildFile.getFrom().get();\n+      containerBuilder = Jib.from(buildFile.getFrom().get().getImage());", "originalCommit": "912a25d538f4ba82e5a94673a6859c109b92450f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "914e970387c3c88a5e3fec44b8f15b07646c9bf8", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\nindex f35dbea6..fdeb6ea9 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java\n\n@@ -43,10 +43,9 @@ public class BuildFiles {\n    */\n   public static JibContainerBuilder toJibContainerBuilder(Path buildFilePath)\n       throws InvalidImageReferenceException, IOException {\n-    ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+    ObjectMapper om = new ObjectMapper(new YAMLFactory());\n     BuildFileSpec buildFile =\n-        yamlObjectMapper.readValue(\n-            Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n+        om.readValue(Files.newBufferedReader(buildFilePath, Charsets.UTF_8), BuildFileSpec.class);\n     Path projectRoot = buildFilePath.toAbsolutePath().getParent();\n \n     JibContainerBuilder containerBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MDIyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481340221", "bodyText": "final", "author": "chanseokoh", "createdAt": "2020-09-01T18:17:08Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.LayerObject;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.api.buildplan.Port;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BuildFilesTest {\n+\n+  @Rule public TemporaryFolder tmp = new TemporaryFolder();", "originalCommit": "912a25d538f4ba82e5a94673a6859c109b92450f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74d3dfa744c4eab4a6cd750bb2e9357eab45c322", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\nindex de31cc32..bf47f54a 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n\n@@ -42,7 +42,7 @@ import org.junit.rules.TemporaryFolder;\n \n public class BuildFilesTest {\n \n-  @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n \n   @Test\n   public void testToJibContainerBuilder_allProperties()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTQzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481341432", "bodyText": "setName() probably unnecessary if it's only to get entries via getEntries().", "author": "chanseokoh", "createdAt": "2020-09-01T18:19:15Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.LayerObject;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.api.buildplan.Port;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BuildFilesTest {\n+\n+  @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_allProperties()\n+      throws URISyntaxException, IOException, InvalidImageReferenceException {\n+    URL resource = Resources.getResource(\"buildfiles/projects/allProperties/jib.yaml\");\n+    JibContainerBuilder jibContainerBuilder =\n+        BuildFiles.toJibContainerBuilder(Paths.get(resource.toURI()));\n+    Path projectRoot = Paths.get(resource.toURI()).getParent();\n+\n+    ContainerBuildPlan resolved = jibContainerBuilder.toContainerBuildPlan();\n+    Assert.assertEquals(\"ubuntu\", resolved.getBaseImage());\n+    Assert.assertEquals(Instant.ofEpochMilli(2000), resolved.getCreationTime());\n+    Assert.assertEquals(ImageFormat.OCI, resolved.getFormat());\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"arm\", \"linux\"), new Platform(\"amd64\", \"darwin\")),\n+        resolved.getPlatforms());\n+    Assert.assertEquals(ImmutableMap.of(\"KEY1\", \"v1\", \"KEY2\", \"v2\"), resolved.getEnvironment());\n+    Assert.assertEquals(\n+        ImmutableSet.of(AbsoluteUnixPath.get(\"/volume1\"), AbsoluteUnixPath.get(\"/volume2\")),\n+        resolved.getVolumes());\n+    Assert.assertEquals(ImmutableMap.of(\"label1\", \"l1\", \"label2\", \"l2\"), resolved.getLabels());\n+    Assert.assertEquals(\n+        ImmutableSet.of(Port.udp(123), Port.tcp(456), Port.tcp(789)), resolved.getExposedPorts());\n+    Assert.assertEquals(\"customUser\", resolved.getUser());\n+    Assert.assertEquals(AbsoluteUnixPath.get(\"/home\"), resolved.getWorkingDirectory());\n+    Assert.assertEquals(ImmutableList.of(\"sh\", \"script.sh\"), resolved.getEntrypoint());\n+    Assert.assertEquals(ImmutableList.of(\"--param\", \"param\"), resolved.getCmd());\n+\n+    Assert.assertEquals(1, resolved.getLayers().size());\n+    FileEntriesLayer resolvedLayer = (FileEntriesLayer) resolved.getLayers().get(0);\n+    Assert.assertEquals(\"scripts\", resolvedLayer.getName());\n+    Assert.assertEquals(\n+        FileEntriesLayer.builder()\n+            .setName(\"scripts\")", "originalCommit": "912a25d538f4ba82e5a94673a6859c109b92450f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxNzI3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r481417275", "bodyText": "oh right, must've been leftover from when I was trying to compare FileEntriesLayer objects directly", "author": "loosebazooka", "createdAt": "2020-09-01T20:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "74d3dfa744c4eab4a6cd750bb2e9357eab45c322", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\nindex de31cc32..bf47f54a 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java\n\n@@ -42,7 +42,7 @@ import org.junit.rules.TemporaryFolder;\n \n public class BuildFilesTest {\n \n-  @Rule public TemporaryFolder tmp = new TemporaryFolder();\n+  @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n \n   @Test\n   public void testToJibContainerBuilder_allProperties()\n"}}, {"oid": "914e970387c3c88a5e3fec44b8f15b07646c9bf8", "url": "https://github.com/GoogleContainerTools/jib/commit/914e970387c3c88a5e3fec44b8f15b07646c9bf8", "message": "Read a buildfile and convert it into a JibContainerBuilder", "committedDate": "2020-09-18T03:17:52Z", "type": "commit"}, {"oid": "0590b742c0afadcdde82f71123207dff26338b11", "url": "https://github.com/GoogleContainerTools/jib/commit/0590b742c0afadcdde82f71123207dff26338b11", "message": "fixes", "committedDate": "2020-09-18T03:17:52Z", "type": "commit"}, {"oid": "74d3dfa744c4eab4a6cd750bb2e9357eab45c322", "url": "https://github.com/GoogleContainerTools/jib/commit/74d3dfa744c4eab4a6cd750bb2e9357eab45c322", "message": "more fixes", "committedDate": "2020-09-18T03:17:52Z", "type": "commit"}, {"oid": "aed162cc045dfe7491177df305c359962b04dc99", "url": "https://github.com/GoogleContainerTools/jib/commit/aed162cc045dfe7491177df305c359962b04dc99", "message": "rebase platform extra options removal in", "committedDate": "2020-09-18T03:22:56Z", "type": "commit"}, {"oid": "aed162cc045dfe7491177df305c359962b04dc99", "url": "https://github.com/GoogleContainerTools/jib/commit/aed162cc045dfe7491177df305c359962b04dc99", "message": "rebase platform extra options removal in", "committedDate": "2020-09-18T03:22:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzYxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r492867619", "bodyText": "quick question on this: Is this test only for when a scratch base image is used? And is that why we allow some of these required parameters to be empty or null?", "author": "mpeddada1", "createdAt": "2020-09-22T16:19:14Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.cli.buildfile;\n+\n+import com.google.cloud.tools.jib.api.InvalidImageReferenceException;\n+import com.google.cloud.tools.jib.api.JibContainerBuilder;\n+import com.google.cloud.tools.jib.api.buildplan.AbsoluteUnixPath;\n+import com.google.cloud.tools.jib.api.buildplan.ContainerBuildPlan;\n+import com.google.cloud.tools.jib.api.buildplan.FileEntriesLayer;\n+import com.google.cloud.tools.jib.api.buildplan.ImageFormat;\n+import com.google.cloud.tools.jib.api.buildplan.LayerObject;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.api.buildplan.Port;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Instant;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class BuildFilesTest {\n+\n+  @Rule public final TemporaryFolder tmp = new TemporaryFolder();\n+\n+  @Test\n+  public void testToJibContainerBuilder_allProperties()\n+      throws URISyntaxException, IOException, InvalidImageReferenceException {\n+    URL resource = Resources.getResource(\"buildfiles/projects/allProperties/jib.yaml\");\n+    JibContainerBuilder jibContainerBuilder =\n+        BuildFiles.toJibContainerBuilder(Paths.get(resource.toURI()));\n+    Path projectRoot = Paths.get(resource.toURI()).getParent();\n+\n+    ContainerBuildPlan resolved = jibContainerBuilder.toContainerBuildPlan();\n+    Assert.assertEquals(\"ubuntu\", resolved.getBaseImage());\n+    Assert.assertEquals(Instant.ofEpochMilli(2000), resolved.getCreationTime());\n+    Assert.assertEquals(ImageFormat.OCI, resolved.getFormat());\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"arm\", \"linux\"), new Platform(\"amd64\", \"darwin\")),\n+        resolved.getPlatforms());\n+    Assert.assertEquals(ImmutableMap.of(\"KEY1\", \"v1\", \"KEY2\", \"v2\"), resolved.getEnvironment());\n+    Assert.assertEquals(\n+        ImmutableSet.of(AbsoluteUnixPath.get(\"/volume1\"), AbsoluteUnixPath.get(\"/volume2\")),\n+        resolved.getVolumes());\n+    Assert.assertEquals(ImmutableMap.of(\"label1\", \"l1\", \"label2\", \"l2\"), resolved.getLabels());\n+    Assert.assertEquals(\n+        ImmutableSet.of(Port.udp(123), Port.tcp(456), Port.tcp(789)), resolved.getExposedPorts());\n+    Assert.assertEquals(\"customUser\", resolved.getUser());\n+    Assert.assertEquals(AbsoluteUnixPath.get(\"/home\"), resolved.getWorkingDirectory());\n+    Assert.assertEquals(ImmutableList.of(\"sh\", \"script.sh\"), resolved.getEntrypoint());\n+    Assert.assertEquals(ImmutableList.of(\"--param\", \"param\"), resolved.getCmd());\n+\n+    Assert.assertEquals(1, resolved.getLayers().size());\n+    FileEntriesLayer resolvedLayer = (FileEntriesLayer) resolved.getLayers().get(0);\n+    Assert.assertEquals(\"scripts\", resolvedLayer.getName());\n+    Assert.assertEquals(\n+        FileEntriesLayer.builder()\n+            .addEntry(\n+                projectRoot.resolve(\"project/script.sh\"), AbsoluteUnixPath.get(\"/home/script.sh\"))\n+            .build()\n+            .getEntries(),\n+        resolvedLayer.getEntries());\n+    Assert.assertEquals(LayerObject.Type.FILE_ENTRIES, resolvedLayer.getType());\n+  }\n+\n+  @Test\n+  public void testToJibContainerBuilder_requiredProperties()", "originalCommit": "aed162cc045dfe7491177df305c359962b04dc99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NDYwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r492894602", "bodyText": "This test adds in only the required properties and then verifies that the output is the \"defaults\". When the defaults change, this will fail and we will know that we either have to revert the change or update our documentation to correctly reflect what the defaults are.", "author": "loosebazooka", "createdAt": "2020-09-22T17:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNzgxNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2735#discussion_r493137817", "bodyText": "Cool, thanks!", "author": "mpeddada1", "createdAt": "2020-09-23T01:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzYxOQ=="}], "type": "inlineReview", "revised_code": null}]}