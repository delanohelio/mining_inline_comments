{"pr_number": 2872, "pr_title": "Rename JarProcessor method and adjust method access", "pr_createdAt": "2020-10-29T22:08:27Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2872", "timeline": [{"oid": "7de27da5ffd40195f4c0725e907239d822499af4", "url": "https://github.com/GoogleContainerTools/jib/commit/7de27da5ffd40195f4c0725e907239d822499af4", "message": "Rename JarProcessor method and adjust method access", "committedDate": "2020-10-29T22:05:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5OTY4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2872#discussion_r514599686", "bodyText": "Sorry, this was my fault but how about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Creates three layers for classes, resources, and dependencies on container for a standard jar.\n          \n          \n            \n               * Creates layers for dependencies, snapshot dependencies, resources and classes on container for a standard jar.", "author": "mpeddada1", "createdAt": "2020-10-29T22:17:46Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java", "diffHunk": "@@ -68,16 +70,16 @@ public static JarType determineJarType(Path jarPath) throws IOException {\n   }\n \n   /**\n-   * Explodes jar and create three layers for classes, resources and dependencies on container.\n+   * Creates three layers for classes, resources, and dependencies on container for a standard jar.", "originalCommit": "7de27da5ffd40195f4c0725e907239d822499af4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c54075b7733fd661e9fe0f8ce3b6201769ad1ff5", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\nindex 7ebf56121..2ddbd9087 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\n@@ -84,44 +89,58 @@ public class JarProcessor {\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     List<FileEntriesLayer> layers = new ArrayList<>();\n \n-    // Get dependencies from Class-Path in the jar's manifest and add a layer with these\n-    // dependencies as entries. If Class-Path is not present in the jar's manifest then skip adding\n-    // a dependencies layer.\n+    // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot\n+    // and snapshot dependencies. If Class-Path is not present in the jar's manifest then skip\n+    // adding the dependencies layers.\n     String classPath = null;\n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       classPath = jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n     }\n     if (classPath != null) {\n-      List<Path> dependencies =\n-          Splitter.onPattern(\"\\\\s+\")\n-              .splitToList(classPath.trim())\n+      Predicate<String> isSnapshot = name -> name.contains(\"SNAPSHOT\");\n+      List<String> allDependencies = Splitter.onPattern(\"\\\\s+\").splitToList(classPath.trim());\n+      List<Path> nonSnapshotDependencies =\n+          allDependencies\n               .stream()\n+              .filter(isSnapshot.negate())\n               .map(Paths::get)\n               .collect(Collectors.toList());\n-      FileEntriesLayer.Builder dependenciesLayerBuilder =\n-          FileEntriesLayer.builder().setName(\"dependencies\");\n-      dependencies.forEach(\n-          path ->\n-              dependenciesLayerBuilder.addEntry(\n-                  path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n-      layers.add(dependenciesLayerBuilder.build());\n+      List<Path> snapshotDependencies =\n+          allDependencies.stream().filter(isSnapshot).map(Paths::get).collect(Collectors.toList());\n+      if (!nonSnapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder nonSnapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(DEPENDENCIES);\n+        nonSnapshotDependencies.forEach(\n+            path ->\n+                nonSnapshotDependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+        layers.add(nonSnapshotDependenciesLayerBuilder.build());\n+      }\n+      if (!snapshotDependencies.isEmpty()) {\n+        FileEntriesLayer.Builder snapshotDependenciesLayerBuilder =\n+            FileEntriesLayer.builder().setName(SNAPSHOT_DEPENDENCIES);\n+        snapshotDependencies.forEach(\n+            path ->\n+                snapshotDependenciesLayerBuilder.addEntry(\n+                    path, APP_ROOT.resolve(RelativeUnixPath.get(\"dependencies\")).resolve(path)));\n+        layers.add(snapshotDependenciesLayerBuilder.build());\n+      }\n     }\n \n-    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n-\n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n     // file's original project structure.\n+    Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n+    Predicate<Path> isResourceFile = isClassFile.negate();\n     FileEntriesLayer classesLayer =\n         addDirectoryContentsToLayer(\n-            \"classes\",\n+            CLASSES,\n             localExplodedJarRoot,\n             isClassFile,\n             APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")));\n     FileEntriesLayer resourcesLayer =\n         addDirectoryContentsToLayer(\n-            \"resources\",\n+            RESOURCES,\n             localExplodedJarRoot,\n             isResourceFile,\n             APP_ROOT.resolve(RelativeUnixPath.get(\"explodedJar\")));\n"}}, {"oid": "c54075b7733fd661e9fe0f8ce3b6201769ad1ff5", "url": "https://github.com/GoogleContainerTools/jib/commit/c54075b7733fd661e9fe0f8ce3b6201769ad1ff5", "message": "Merge remote-tracking branch 'origin/master' into rename-jib-cli-jar", "committedDate": "2020-10-29T22:35:27Z", "type": "commit"}, {"oid": "24684a342c25734b83edaad88b09736871d68dd4", "url": "https://github.com/GoogleContainerTools/jib/commit/24684a342c25734b83edaad88b09736871d68dd4", "message": "Update jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java\n\nCo-authored-by: Mridula <66699525+mpeddada1@users.noreply.github.com>", "committedDate": "2020-10-29T22:35:44Z", "type": "commit"}, {"oid": "e9a7e43271a1cdd3e842132a59443572f205a5a3", "url": "https://github.com/GoogleContainerTools/jib/commit/e9a7e43271a1cdd3e842132a59443572f205a5a3", "message": "Fix formatting", "committedDate": "2020-10-29T22:36:08Z", "type": "commit"}]}