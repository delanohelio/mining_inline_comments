{"pr_number": 2436, "pr_title": "Minor refactoring to prepare for extra directory targets", "pr_createdAt": "2020-04-28T15:55:26Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2436", "timeline": [{"oid": "6548c75efefe3fa793c6dc3b7fd1b44b36d3547e", "url": "https://github.com/GoogleContainerTools/jib/commit/6548c75efefe3fa793c6dc3b7fd1b44b36d3547e", "message": "Minor refactoring to prepare for extra directory targets", "committedDate": "2020-04-28T15:52:51Z", "type": "commit"}, {"oid": "48dc792779ffd77ecc8c54a7539ae08559818292", "url": "https://github.com/GoogleContainerTools/jib/commit/48dc792779ffd77ecc8c54a7539ae08559818292", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into 1581-extra-dir-target-refactor", "committedDate": "2020-04-28T15:57:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0OTkwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2436#discussion_r416749908", "bodyText": "I think the return type may depend on how we will define the new configuration. I guess one way to translate this is\n    extraDirectories {\n      // not sure if you can use `/`, '\\,', or `C:\\` as a key name in a map.\n      paths = [/path/to/extra/dir: '/target/dir'] // while maintaining backward-compatibility of string list\n      permissions = [\n        '/path/on/container/file1': 744,\n        '/path/on/container/file2': 123\n      ]\n    }\nUsing a path as a map key probably won't work in Maven either. So I reckon you'll have it like\n    extraDirectories {\n      paths { // directory1\n         src = ...\n         target = ... \n      }\n      paths { // directory2\n         src = ...\n         target = ... \n      }\n    }\n?\nI think returning Map<Path, AbsoluteUnixPath> here will still work even if you define a nested structure for paths, but I wonder if it is better to define a nested class (such as RawConfiguration.ExtraDirectoriesConfiguration) if we are going to have a nested structure anyway.", "author": "chanseokoh", "createdAt": "2020-04-28T16:22:50Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleRawConfiguration.java", "diffHunk": "@@ -157,8 +159,12 @@ public String getCreationTime() {\n   }\n \n   @Override\n-  public List<Path> getExtraDirectories() {\n-    return jibExtension.getExtraDirectories().getPaths();\n+  public Map<Path, AbsoluteUnixPath> getExtraDirectories() {", "originalCommit": "48dc792779ffd77ecc8c54a7539ae08559818292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NDg5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2436#discussion_r416764897", "bodyText": "Hmm, I guess that's true, this could probably be closer to how AuthProperty is setup. I guess the question I have is, is RawConfiguration actually meant to imply the layout of the maven/gradle configurations, or is it just meant to purely be a translation layer? I just felt a map was simpler; if we add a nested class in RawConfiguration, we still need to translate the maven/gradle-specific nested configuration classes into the plugins-common version, so it's the same amount of work plus one extra file. The only up-side I can immediately see is that RawConfiguration would more closely resemble the maven/gradle configuration. Is that what we want to stick with?", "author": "TadCordle", "createdAt": "2020-04-28T16:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0OTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc2NTkwNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2436#discussion_r416765907", "bodyText": "Using a map also forces people to avoid specifying 2 target directories for the same source directory. Is that something we want to support?", "author": "TadCordle", "createdAt": "2020-04-28T16:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0OTkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc4OTQzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2436#discussion_r416789435", "bodyText": "I guess the question I have is, is RawConfiguration actually meant to imply the layout of the maven/gradle configurations, or is it just meant to purely be a translation layer?\n\nFrom my point of view, RawConfiguration is a higher-level abstraction that doesn't necessarily have to follow the strict configuration layout. It can be independent, as long as it provides \"raw config values\" in a reasonable way. It's just that, because of the \"raw\" nature, I think in many cases it'll naturally resemble the configuration layout. The point is, we can choose whatever option that provides a better abstraction that makes sense. For example, returning a Map doesn't describe what the keys and the values mean; the caller should have advanced knowledge that the key is the source and the value is the target. In this sense, we could say returning a structured class has an advantage. But I am not so against using Map. This is up for discussions.\n\nUsing a map also forces people to avoid specifying 2 target directories for the same source directory. Is that something we want to support?\n\nI don't think we want to support that, at least not at the moment. Anyways, I think we can enforce this constraint when using a structured class too.", "author": "chanseokoh", "createdAt": "2020-04-28T17:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0OTkwOA=="}], "type": "inlineReview", "revised_code": null}]}