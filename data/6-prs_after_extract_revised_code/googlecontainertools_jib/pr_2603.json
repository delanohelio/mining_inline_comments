{"pr_number": 2603, "pr_title": "Processing Raw Platforms Configs From the Plugins", "pr_createdAt": "2020-07-20T23:34:02Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2603", "timeline": [{"oid": "40459f35436dd8b1015fe258375e1d85a3245a50", "url": "https://github.com/GoogleContainerTools/jib/commit/40459f35436dd8b1015fe258375e1d85a3245a50", "message": "Processing Raw Platforms COnfig From Plugins", "committedDate": "2020-07-20T23:32:57Z", "type": "commit"}, {"oid": "6169846626d936a74150c3cec4049150ccc53d8f", "url": "https://github.com/GoogleContainerTools/jib/commit/6169846626d936a74150c3cec4049150ccc53d8f", "message": "Adding Tests", "committedDate": "2020-07-21T00:19:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2Mzk0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r457763943", "bodyText": "@chanseokoh my tests have been failing because this code block is not catching a platform that has either os or architecture as null.Is there any way of ensuring that when either os/arch is null , this method throws an exception", "author": "louismurerwa", "createdAt": "2020-07-21T00:22:46Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n+        Platform platform =\n+            new Platform(\n+                platformConfiguration.getArchitectureName().orElse(null),\n+                platformConfiguration.getOsName().orElse(null));\n+        platforms.add(platform);", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDMxMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458114311", "bodyText": "orElse() returns an alternative \"default\" value when an Optional in question is empty. Note we don't want to ever pass null to new Platform(), as we didn't design for new Platform() to accept nulls. Because we will check if Optional is empty above, we can just call .get().\n                platformConfiguration.getArchitectureName().get(),\n                platformConfiguration.getOsName().get());", "author": "chanseokoh", "createdAt": "2020-07-21T13:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2Mzk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMzE5Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458223193", "bodyText": "Nice that worked", "author": "louismurerwa", "createdAt": "2020-07-21T16:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2Mzk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..3a69110ad 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -641,21 +642,16 @@ public class PluginConfigurationProcessor {\n     Set<Platform> platforms = new LinkedHashSet<>();\n     for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n       try {\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n         Platform platform =\n             new Platform(\n-                platformConfiguration.getArchitectureName().orElse(null),\n-                platformConfiguration.getOsName().orElse(null));\n+                platformConfiguration.getArchitectureName().get(),\n+                platformConfiguration.getOsName().get());\n         platforms.add(platform);\n-      } catch (IllegalArgumentException exception) {\n+      } catch (NoSuchElementException exception) {\n         throw new InvalidPlatformConfigurationException(\n             platformConfiguration.toString(), platformConfiguration.toString(), exception);\n       }\n     }\n-\n     return platforms;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDAwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r457764004", "bodyText": "I will fix the messages here", "author": "louismurerwa", "createdAt": "2020-07-21T00:23:00Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExMDczMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458110731", "bodyText": "getArchitectureName() and getOsName() never return null. (It's not marked @Nullable.) So you want\nif (platformConfiguration.getArchitectureName().isPreseent() || ....getOsName().isPresent()) {\n  throw new InvalidPlatformConfigurationException(...)\n}\nThere's no need to catch IllegalArgumentException only to re-throw another exception.", "author": "chanseokoh", "createdAt": "2020-07-21T13:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMzczNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458223737", "bodyText": "What exception should i pass to InvalidPlatformConfigurationException since I didnt catch any here ?", "author": "louismurerwa", "createdAt": "2020-07-21T16:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..3a69110ad 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -641,21 +642,16 @@ public class PluginConfigurationProcessor {\n     Set<Platform> platforms = new LinkedHashSet<>();\n     for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n       try {\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n         Platform platform =\n             new Platform(\n-                platformConfiguration.getArchitectureName().orElse(null),\n-                platformConfiguration.getOsName().orElse(null));\n+                platformConfiguration.getArchitectureName().get(),\n+                platformConfiguration.getOsName().get());\n         platforms.add(platform);\n-      } catch (IllegalArgumentException exception) {\n+      } catch (NoSuchElementException exception) {\n         throw new InvalidPlatformConfigurationException(\n             platformConfiguration.toString(), platformConfiguration.toString(), exception);\n       }\n     }\n-\n     return platforms;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5NzE0NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458097144", "bodyText": "... {@code from.platforms} list has ...\nand\n(For example, a platform misses a required field or has an invalid value.)\nNote that eventually we will put more fields into <platform> such as <features>, <variants>, <os..version>, and so on.", "author": "chanseokoh", "createdAt": "2020-07-21T13:29:58Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (The platform misses either an architecture value or os value or both).", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\nindex 7986b24d6..67c63b8ae 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Google LLC.\n+ * Copyright 2020 Google LLC.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5ODA5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458098095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String platform;\n          \n          \n            \n              private final String platform;", "author": "chanseokoh", "createdAt": "2020-07-21T13:31:20Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (The platform misses either an architecture value or os value or both).\n+ */\n+public class InvalidPlatformConfigurationException extends Exception {\n+\n+  private String platform;", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\nindex 7986b24d6..67c63b8ae 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Google LLC.\n+ * Copyright 2020 Google LLC.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDA3MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100070", "bodyText": "Not just missing a field but also for the case with an invalid/unknown value. For example, some invalid value other than \"linux\", \"windows\", etc. So, how about\n\"if the specified platform list is missing required fields or has invalid values\"\n?", "author": "chanseokoh", "createdAt": "2020-07-21T13:34:12Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -92,6 +95,8 @@\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0OTk4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458149980", "bodyText": "I think this sounds better since a platformConfig is the one missing values .\nif there exists a platformConfiguration in the platforms list that is missing required fields or has invalid values", "author": "louismurerwa", "createdAt": "2020-07-21T14:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1NjI0Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458156246", "bodyText": "Sounds good. I'd go with ... exists a {@link PlatformConfiguration} ... in that case.", "author": "chanseokoh", "createdAt": "2020-07-21T14:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..36f87f109 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -95,8 +96,8 @@ public class PluginConfigurationProcessor {\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n-   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n-   *     null architectureName or osName\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n    * @throws InvalidContainerVolumeException if a specific container volume is invalid\n    * @throws IncompatibleBaseImageJavaVersionException if the base image java version cannot support\n    *     this build\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDE3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100175", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T13:34:22Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -156,6 +162,8 @@ public static JibBuildRunner createJibBuildRunnerForDockerDaemonImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..36f87f109 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -162,8 +163,8 @@ public class PluginConfigurationProcessor {\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n-   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n-   *     null architectureName or osName\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n    * @throws InvalidContainerVolumeException if a specific container volume is invalid\n    * @throws IncompatibleBaseImageJavaVersionException if the base image java version cannot support\n    *     this build\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDIzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100231", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T13:34:27Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -215,6 +224,8 @@ public static JibBuildRunner createJibBuildRunnerForTarImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..36f87f109 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -224,8 +225,8 @@ public class PluginConfigurationProcessor {\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n-   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n-   *     null architectureName or osName\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n    * @throws InvalidContainerVolumeException if a specific container volume is invalid\n    * @throws IncompatibleBaseImageJavaVersionException if the base image java version cannot support\n    *     this build\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMDQwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458100400", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T13:34:41Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -290,6 +302,8 @@ public static JibBuildRunner createJibBuildRunnerForRegistryImage(\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..36f87f109 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -302,8 +303,8 @@ public class PluginConfigurationProcessor {\n    * @throws IOException if an error occurs creating the container builder\n    * @throws InvalidWorkingDirectoryException if the working directory specified for the build is\n    *     invalid\n-   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n-   *     null architectureName or osName\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n    * @throws InvalidContainerVolumeException if a specific container volume is invalid\n    * @throws IncompatibleBaseImageJavaVersionException if the base image java version cannot support\n    *     this build\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMTI5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458101290", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return the set of parsed platforms.\n          \n          \n            \n               * @return the set of parsed platforms", "author": "chanseokoh", "createdAt": "2020-07-21T13:36:00Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..3a69110ad 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -641,21 +642,16 @@ public class PluginConfigurationProcessor {\n     Set<Platform> platforms = new LinkedHashSet<>();\n     for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n       try {\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n         Platform platform =\n             new Platform(\n-                platformConfiguration.getArchitectureName().orElse(null),\n-                platformConfiguration.getOsName().orElse(null));\n+                platformConfiguration.getArchitectureName().get(),\n+                platformConfiguration.getOsName().get());\n         platforms.add(platform);\n-      } catch (IllegalArgumentException exception) {\n+      } catch (NoSuchElementException exception) {\n         throw new InvalidPlatformConfigurationException(\n             platformConfiguration.toString(), platformConfiguration.toString(), exception);\n       }\n     }\n-\n     return platforms;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMTcwMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458101701", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T13:36:30Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..3a69110ad 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -641,21 +642,16 @@ public class PluginConfigurationProcessor {\n     Set<Platform> platforms = new LinkedHashSet<>();\n     for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n       try {\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n         Platform platform =\n             new Platform(\n-                platformConfiguration.getArchitectureName().orElse(null),\n-                platformConfiguration.getOsName().orElse(null));\n+                platformConfiguration.getArchitectureName().get(),\n+                platformConfiguration.getOsName().get());\n         platforms.add(platform);\n-      } catch (IllegalArgumentException exception) {\n+      } catch (NoSuchElementException exception) {\n         throw new InvalidPlatformConfigurationException(\n             platformConfiguration.toString(), platformConfiguration.toString(), exception);\n       }\n     }\n-\n     return platforms;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODQ2NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458118464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private String os;\n          \n          \n            \n                @Nullable private String architecture;\n          \n          \n            \n                @Nullable private final String os;\n          \n          \n            \n                @Nullable private final String architecture;", "author": "chanseokoh", "createdAt": "2020-07-21T13:59:01Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NjQxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458176410", "bodyText": "Sorry, I initially removed @Nullable as I mistakenly thought they were just copied blindly. Updated my comment to bring them back.", "author": "chanseokoh", "createdAt": "2020-07-21T15:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDM3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458280374", "bodyText": "Since we are testing the PlatformConfiguration which might contain nulls I had made the os and architecture @Nullable", "author": "louismurerwa", "createdAt": "2020-07-21T17:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -107,12 +107,11 @@ public class PluginConfigurationProcessorTest {\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n-  /** Configuration for {@code platform} parameter. */\n-  public static class PlatformParametersTest implements PlatformConfiguration {\n-    @Nullable private String os;\n-    @Nullable private String architecture;\n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    private final String os;\n+    private final String architecture;\n \n-    PlatformParametersTest(String architecture, String os) {\n+    TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {\n       this.architecture = architecture;\n       this.os = os;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDMxOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120318", "bodyText": "No need for a comment. And this class isn't going to be used outside of this test class, so you don't want to make it public. And the name -Test doesn't sound right.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Configuration for {@code platform} parameter. */\n          \n          \n            \n              public static class PlatformParametersTest implements PlatformConfiguration {\n          \n          \n            \n              private static class TestPlatformConfiguration implements PlatformConfiguration {", "author": "chanseokoh", "createdAt": "2020-07-21T14:01:16Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -107,12 +107,11 @@ public class PluginConfigurationProcessorTest {\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n-  /** Configuration for {@code platform} parameter. */\n-  public static class PlatformParametersTest implements PlatformConfiguration {\n-    @Nullable private String os;\n-    @Nullable private String architecture;\n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    private final String os;\n+    private final String architecture;\n \n-    PlatformParametersTest(String architecture, String os) {\n+    TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {\n       this.architecture = architecture;\n       this.os = os;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDUyNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120526", "bodyText": "Probably Mockito.when(...) will just work.", "author": "chanseokoh", "createdAt": "2020-07-21T14:01:33Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;\n+\n+    PlatformParametersTest(String architecture, String os) {\n+      this.architecture = architecture;\n+      this.os = os;\n+    }\n+\n+    @Override\n+    public Optional<String> getOsName() {\n+      return Optional.ofNullable(os);\n+    }\n+\n+    @Override\n+    public Optional<String> getArchitectureName() {\n+      return Optional.ofNullable(architecture);\n+    }\n+  }\n+\n   @Before\n   public void setUp() throws IOException, InvalidImageReferenceException, InferredAuthException {\n     Mockito.when(rawConfiguration.getFromAuth()).thenReturn(authProperty);\n     Mockito.when(rawConfiguration.getEntrypoint()).thenReturn(Optional.empty());\n     Mockito.when(rawConfiguration.getAppRoot()).thenReturn(\"/app\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3OTE2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458179167", "bodyText": "We need to chat in person about this implementation ,I might some help to change it.", "author": "louismurerwa", "createdAt": "2020-07-21T15:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjk5Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458206996", "bodyText": "Ah, just realized we can't remove it. I think in our test code, we can just say Mockito.<List<?>>.", "author": "chanseokoh", "createdAt": "2020-07-21T15:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3OTAwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458279002", "bodyText": "Yes that implementation works", "author": "louismurerwa", "createdAt": "2020-07-21T17:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -107,12 +107,11 @@ public class PluginConfigurationProcessorTest {\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n-  /** Configuration for {@code platform} parameter. */\n-  public static class PlatformParametersTest implements PlatformConfiguration {\n-    @Nullable private String os;\n-    @Nullable private String architecture;\n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    private final String os;\n+    private final String architecture;\n \n-    PlatformParametersTest(String architecture, String os) {\n+    TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {\n       this.architecture = architecture;\n       this.os = os;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMDkxNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458120914", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //", "author": "chanseokoh", "createdAt": "2020-07-21T14:02:08Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..2f0962702 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -874,20 +874,20 @@ public class PluginConfigurationProcessorTest {\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n-  //\n+\n   @Test\n-  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n-        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n         PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n   }\n \n   @Test\n-  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"testOs\");\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMTA3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458121074", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T14:02:22Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..2f0962702 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -874,20 +874,20 @@ public class PluginConfigurationProcessorTest {\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n-  //\n+\n   @Test\n-  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n-        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n         PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n   }\n \n   @Test\n-  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"testOs\");\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMTE5Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458121196", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T14:02:32Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..2f0962702 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -874,20 +874,20 @@ public class PluginConfigurationProcessorTest {\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n-  //\n+\n   @Test\n-  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n-        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n         PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n   }\n \n   @Test\n-  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"testOs\");\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMjYzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458122631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                PlatformParametersTest(String architecture, String os) {\n          \n          \n            \n                PlatformParametersTest(@Nullable String architecture, @Nullable String os) {\n          \n      \n    \n    \n  \n\nAlthough we don't strictly enforce using @Nullable annotation in test classes, let's annotate these properly since you used @Nullable for the fields.", "author": "chanseokoh", "createdAt": "2020-07-21T14:04:34Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,34 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  /** Configuration for {@code platform} parameter. */\n+  public static class PlatformParametersTest implements PlatformConfiguration {\n+    @Nullable private String os;\n+    @Nullable private String architecture;\n+\n+    PlatformParametersTest(String architecture, String os) {", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -107,12 +107,11 @@ public class PluginConfigurationProcessorTest {\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n-  /** Configuration for {@code platform} parameter. */\n-  public static class PlatformParametersTest implements PlatformConfiguration {\n-    @Nullable private String os;\n-    @Nullable private String architecture;\n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    private final String os;\n+    private final String architecture;\n \n-    PlatformParametersTest(String architecture, String os) {\n+    TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {\n       this.architecture = architecture;\n       this.os = os;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMzI2Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458123263", "bodyText": "2020", "author": "chanseokoh", "createdAt": "2020-07-21T14:05:24Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2018 Google LLC.", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\nindex 7986b24d6..67c63b8ae 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformConfigurationException.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 Google LLC.\n+ * Copyright 2020 Google LLC.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjY2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458126660", "bodyText": "Don't use platform.toString() but use an actual String literal to verify the returned value.", "author": "chanseokoh", "createdAt": "2020-07-21T14:09:57Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -837,6 +874,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n+  //\n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      Assert.assertEquals(platform.toString(), ex.getMessage());\n+      Assert.assertEquals(platform.toString(), ex.getInvalidPlatform());\n+    }", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 7dc981fc0..2f0962702 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -874,20 +874,20 @@ public class PluginConfigurationProcessorTest {\n       Assert.assertEquals(12, ex.getProjectMajorJavaVersion());\n     }\n   }\n-  //\n+\n   @Test\n-  public void testGetPlatformsSet() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"amd64\", \"linux\")));\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n-        ImmutableSet.of(new Platform(\"amd64\", \"linux\")),\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n         PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n   }\n \n   @Test\n-  public void testInvalidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    PlatformParametersTest platform = new PlatformParametersTest(null, \"linux\");\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {\n+    PlatformParametersTest platform = new PlatformParametersTest(null, \"testOs\");\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjkwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458126904", "bodyText": "How about from.platforms misses a required field or has an invalid value: ?\nNote it's from.platforms.", "author": "chanseokoh", "createdAt": "2020-07-21T14:10:18Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -127,6 +128,11 @@ public void buildDocker()\n               + ex.getInvalidPathValue(),\n           ex);\n \n+    } catch (InvalidPlatformConfigurationException ex) {\n+      throw new GradleException(\n+          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1NjcwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458156702", "bodyText": "Sorry, from.platforms, not from.platform.", "author": "chanseokoh", "createdAt": "2020-07-21T14:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMTA0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458221043", "bodyText": "Gotcha", "author": "louismurerwa", "createdAt": "2020-07-21T16:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java b/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\nindex 14add3209..9d8e9cc19 100644\n--- a/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\n+++ b/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\n\n@@ -130,7 +130,8 @@ public class BuildDockerTask extends DefaultTask implements JibTask {\n \n     } catch (InvalidPlatformConfigurationException ex) {\n       throw new GradleException(\n-          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),\n+          \"from.platforms is missing required fields or has invalid values: \"\n+              + ex.getInvalidPlatform(),\n           ex);\n \n     } catch (InvalidContainerVolumeException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyODExMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458128110", "bodyText": "<from><platforms> We use brackets for Maven.", "author": "chanseokoh", "createdAt": "2020-07-21T14:12:00Z", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -106,7 +107,10 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n           \"<container><workingDirectory> is not an absolute Unix-style path: \"\n               + ex.getInvalidPathValue(),\n           ex);\n-\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      throw new MojoExecutionException(\n+          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java b/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\nindex a4e04fbe4..a1fd6ad74 100644\n--- a/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\n+++ b/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\n\n@@ -109,7 +109,8 @@ public class BuildDockerMojo extends JibPluginConfiguration {\n           ex);\n     } catch (InvalidPlatformConfigurationException ex) {\n       throw new MojoExecutionException(\n-          \"container.platforms contains a null architecture or os name: \" + ex.getInvalidPlatform(),\n+          \"<from><platforms> is missing required fields or has invalid values: \"\n+              + ex.getInvalidPlatform(),\n           ex);\n     } catch (InvalidContainerVolumeException ex) {\n       throw new MojoExecutionException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMzU0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458133545", "bodyText": "platformConfiguration.toString() will returns some weird string value (for example, PlatformConfiguration@6d06d69c), unless the class (or any of its super-classes) overrode and implemented toString().\nAnd I think we don't want to implement toString() in PlatformConfiguration implementations. So probably we should assemble a human-readable string form here. For example,\n\"architecture=\" + platformConfiguration.getArchitectureName().orElse(\"<missing>\") + \", os=\" + platformConfiguration.getOsName().orElse(\"<missing>\")", "author": "chanseokoh", "createdAt": "2020-07-21T14:19:15Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +627,38 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms.\n+   * @throws InvalidPlatformConfigurationException if there exists a plaformConfiguration with a\n+   *     null architectureName or osName\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+      try {\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n+        Preconditions.checkNotNull(\n+            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n+        Platform platform =\n+            new Platform(\n+                platformConfiguration.getArchitectureName().orElse(null),\n+                platformConfiguration.getOsName().orElse(null));\n+        platforms.add(platform);\n+      } catch (IllegalArgumentException exception) {\n+        throw new InvalidPlatformConfigurationException(\n+            platformConfiguration.toString(), platformConfiguration.toString(), exception);", "originalCommit": "6169846626d936a74150c3cec4049150ccc53d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NjMzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458166333", "bodyText": "I see what you mean .I agree with you on the string implementation. Done", "author": "louismurerwa", "createdAt": "2020-07-21T15:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMzU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36fde7b6a..3a69110ad 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -641,21 +642,16 @@ public class PluginConfigurationProcessor {\n     Set<Platform> platforms = new LinkedHashSet<>();\n     for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n       try {\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getArchitectureName(), \"platforms set cannot be empty\");\n-        Preconditions.checkNotNull(\n-            platformConfiguration.getOsName(), \"platforms set cannot be empty\");\n         Platform platform =\n             new Platform(\n-                platformConfiguration.getArchitectureName().orElse(null),\n-                platformConfiguration.getOsName().orElse(null));\n+                platformConfiguration.getArchitectureName().get(),\n+                platformConfiguration.getOsName().get());\n         platforms.add(platform);\n-      } catch (IllegalArgumentException exception) {\n+      } catch (NoSuchElementException exception) {\n         throw new InvalidPlatformConfigurationException(\n             platformConfiguration.toString(), platformConfiguration.toString(), exception);\n       }\n     }\n-\n     return platforms;\n   }\n \n"}}, {"oid": "0f55cb9ddb306722095c59ea6439c454fed3e911", "url": "https://github.com/GoogleContainerTools/jib/commit/0f55cb9ddb306722095c59ea6439c454fed3e911", "message": "Tests Work", "committedDate": "2020-07-21T14:25:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDE1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458140159", "bodyText": "testGetPlatformsSet()", "author": "chanseokoh", "createdAt": "2020-07-21T14:27:39Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +875,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {", "originalCommit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NTAwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458165004", "bodyText": "Done", "author": "louismurerwa", "createdAt": "2020-07-21T14:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 2f0962702..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -876,9 +875,9 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n         ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458140950", "bodyText": "testGetPlatformsSet_osMissing()\nThat said, I'd add testGetPlatformsSet_architectureMissing() as well.", "author": "chanseokoh", "createdAt": "2020-07-21T14:28:38Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +875,31 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testInvalidPlatformsList() throws InvalidPlatformConfigurationException {", "originalCommit": "0f55cb9ddb306722095c59ea6439c454fed3e911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzE1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458163159", "bodyText": "Done", "author": "louismurerwa", "createdAt": "2020-07-21T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNTY4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458205681", "bodyText": "Oh, I just noticed that you can remove the throws InvalidPlatformConfigurationException clause from the method signature.", "author": "chanseokoh", "createdAt": "2020-07-21T15:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMDY3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458220673", "bodyText": "The moment I remove it , the file raises the 'unhandled exception error `", "author": "louismurerwa", "createdAt": "2020-07-21T16:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODgzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458278833", "bodyText": "With the latest commit, remove it from testGetPlatformsSet_architectureMissing and testGetPlatformsSet_osMissing.", "author": "chanseokoh", "createdAt": "2020-07-21T17:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MDk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex 2f0962702..fb75c0df1 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -876,9 +875,9 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetValidPlatformsList() throws InvalidPlatformConfigurationException {\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n     Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n-        .thenReturn(Arrays.asList(new PlatformParametersTest(\"testArchitecture\", \"testOs\")));\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n         ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n"}}, {"oid": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "url": "https://github.com/GoogleContainerTools/jib/commit/502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "message": "Style Fixes", "committedDate": "2020-07-21T16:09:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxODQxNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458218417", "bodyText": "Is this correct way of throwing a InvalidPlatformConfigurationException when I didnt catch any exceptions?", "author": "louismurerwa", "createdAt": "2020-07-21T16:11:11Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +628,52 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+\n+      String platformToString =\n+          \"architecture=\"\n+              + platformConfiguration.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platformConfiguration.getOsName().orElse(\"<missing>\");\n+\n+      if (!platformConfiguration.getArchitectureName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an architecture value\",\n+            platformToString,\n+            new IllegalArgumentException());", "originalCommit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODEwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458268108", "bodyText": "We can remove Throwable cause from the contructor, as we don't get any exception from another party.\n  InvalidPlatformConfigurationException(String message, String platform, Throwable cause) {\nAnd for consistency, let's rename the exception class to InvalidPlatformException. And when you rename it, you need to update all the Javadocs too.\nAnd because now we are ensure that getArchitectureName() and getOsName() are always present, there is no need to catch NoSuchElementException that will never be thrown. Remove the try-catch block below.", "author": "chanseokoh", "createdAt": "2020-07-21T17:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxODQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTY0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458299640", "bodyText": "I ended up changing the constructor", "author": "louismurerwa", "createdAt": "2020-07-21T18:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxODQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9d2544014313d340beca1e838d762a63bcd0a3c5", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36f87f109..9683df532 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -633,8 +633,8 @@ public class PluginConfigurationProcessor {\n    *\n    * @param rawConfiguration raw configuration data\n    * @return the set of parsed platforms\n-   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n-   *     specified platforms list that is missing required fields or has invalid values\n+   * @throws InvalidPlatformConfigurationException if there exists a {@link PlatformConfiguration}\n+   *     in the specified platforms list that is missing required fields or has invalid values\n    */\n   @VisibleForTesting\n   static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n"}}, {"oid": "9d2544014313d340beca1e838d762a63bcd0a3c5", "url": "https://github.com/GoogleContainerTools/jib/commit/9d2544014313d340beca1e838d762a63bcd0a3c5", "message": "Style FIxes", "committedDate": "2020-07-21T17:35:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODY0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458268648", "bodyText": "nit: os --> OS", "author": "chanseokoh", "createdAt": "2020-07-21T17:30:07Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java", "diffHunk": "@@ -611,6 +628,52 @@ static String getDefaultBaseImage(ProjectProperties projectProperties)\n     throw new IncompatibleBaseImageJavaVersionException(11, javaVersion);\n   }\n \n+  /**\n+   * Parses the list of platforms to a set of {@link Platform}.\n+   *\n+   * @param rawConfiguration raw configuration data\n+   * @return the set of parsed platforms\n+   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n+   *     specified platforms list that is missing required fields or has invalid values\n+   */\n+  @VisibleForTesting\n+  static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n+      throws InvalidPlatformConfigurationException {\n+    Set<Platform> platforms = new LinkedHashSet<>();\n+    for (PlatformConfiguration platformConfiguration : rawConfiguration.getPlatforms()) {\n+\n+      String platformToString =\n+          \"architecture=\"\n+              + platformConfiguration.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platformConfiguration.getOsName().orElse(\"<missing>\");\n+\n+      if (!platformConfiguration.getArchitectureName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an architecture value\",\n+            platformToString,\n+            new IllegalArgumentException());\n+      }\n+      if (!platformConfiguration.getOsName().isPresent()) {\n+        throw new InvalidPlatformConfigurationException(\n+            \"platform configuration is missing an os value\",", "originalCommit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9d2544014313d340beca1e838d762a63bcd0a3c5", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\nindex 36f87f109..9683df532 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java\n\n@@ -633,8 +633,8 @@ public class PluginConfigurationProcessor {\n    *\n    * @param rawConfiguration raw configuration data\n    * @return the set of parsed platforms\n-   * @throws InvalidPlatformConfigurationException if there exists a platformConfiguration in the\n-   *     specified platforms list that is missing required fields or has invalid values\n+   * @throws InvalidPlatformConfigurationException if there exists a {@link PlatformConfiguration}\n+   *     in the specified platforms list that is missing required fields or has invalid values\n    */\n   @VisibleForTesting\n   static Set<Platform> getPlatformsSet(RawConfiguration rawConfiguration)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MTA4NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458271085", "bodyText": "message = \"architecture=testArchitecture, os=<missing>\" since we are verifying the return value of ex.getInvalidPlatform().", "author": "chanseokoh", "createdAt": "2020-07-21T17:34:17Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,58 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing()\n+      throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =\n+          \"architecture=\"\n+              + platform.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platform.getOsName().orElse(\"<missing>\");\n+      Assert.assertEquals(\n+          \"platform configuration is missing an architecture value\", ex.getMessage());\n+      Assert.assertEquals(message, ex.getInvalidPlatform());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_osMissing() throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(\"testArchitecture\", null);\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =\n+          \"architecture=\"\n+              + platform.getArchitectureName().orElse(\"<missing>\")\n+              + \", os=\"\n+              + platform.getOsName().orElse(\"<missing>\");", "originalCommit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex fb75c0df1..adaf8189a 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -875,8 +875,8 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MTIyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458271225", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-07-21T17:34:30Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,58 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing()\n+      throws InvalidPlatformConfigurationException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformConfigurationException ex) {\n+      String message =", "originalCommit": "502f15ce9d658c06712c1bafcf1e0a9a9e0a92a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex fb75c0df1..adaf8189a 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -875,8 +875,8 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetValidPlatformsSet() throws InvalidPlatformConfigurationException {\n-    Mockito.<List<? extends PlatformConfiguration>>when(rawConfiguration.getPlatforms())\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n         .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n \n     Assert.assertEquals(\n"}}, {"oid": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "url": "https://github.com/GoogleContainerTools/jib/commit/411f03f32cb991b45978d87f0df8a2d3f6b2f234", "message": "Changed the name of the exception", "committedDate": "2020-07-21T18:20:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNTA3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458315078", "bodyText": "from.platforms", "author": "chanseokoh", "createdAt": "2020-07-21T18:48:42Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\nindex a7fb68c15..0b9b43444 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\n\n@@ -17,8 +17,8 @@\n package com.google.cloud.tools.jib.plugins.common;\n \n /**\n- * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n- * (For example, a platform misses a required field or has an invalid value.).\n+ * Indicates that the {@code from.platforms} config value has at least one invalid platform. (For\n+ * example, a platform misses a required field or has an invalid value.)\n  */\n public class InvalidPlatformException extends Exception {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNjA4OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458316089", "bodyText": "I'm pretty sure you can remove throws InvalidPlatformException in this method (since you are catching it with try-catch).", "author": "chanseokoh", "createdAt": "2020-07-21T18:50:29Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,45 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {\n+    TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms()).thenReturn(Arrays.asList(platform));\n+\n+    try {\n+      PluginConfigurationProcessor.getPlatformsSet(rawConfiguration);\n+      Assert.fail();\n+    } catch (InvalidPlatformException ex) {\n+      Assert.assertEquals(\n+          \"platform configuration is missing an architecture value\", ex.getMessage());\n+      Assert.assertEquals(\"architecture=<missing>, os=testOs\", ex.getInvalidPlatform());\n+    }\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_osMissing() throws InvalidPlatformException {", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex adaf8189a..a24d50e19 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -885,7 +885,7 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {\n+  public void testGetPlatformsSet_architectureMissing() {\n     TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n     Mockito.<List<?>>when(rawConfiguration.getPlatforms()).thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxNjE5Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458316192", "bodyText": "I'm pretty sure you can remove throws InvalidPlatformException in this method (since you are catching it with try-catch).", "author": "chanseokoh", "createdAt": "2020-07-21T18:50:39Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -838,6 +874,45 @@ public void testGetJavaContainerBuilderWithBaseImage_java12NoBaseImage()\n     }\n   }\n \n+  @Test\n+  public void testGetPlatformsSet() throws InvalidPlatformException {\n+    Mockito.<List<?>>when(rawConfiguration.getPlatforms())\n+        .thenReturn(Arrays.asList(new TestPlatformConfiguration(\"testArchitecture\", \"testOs\")));\n+\n+    Assert.assertEquals(\n+        ImmutableSet.of(new Platform(\"testArchitecture\", \"testOs\")),\n+        PluginConfigurationProcessor.getPlatformsSet(rawConfiguration));\n+  }\n+\n+  @Test\n+  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex adaf8189a..a24d50e19 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -885,7 +885,7 @@ public class PluginConfigurationProcessorTest {\n   }\n \n   @Test\n-  public void testGetPlatformsSet_architectureMissing() throws InvalidPlatformException {\n+  public void testGetPlatformsSet_architectureMissing() {\n     TestPlatformConfiguration platform = new TestPlatformConfiguration(null, \"testOs\");\n     Mockito.<List<?>>when(rawConfiguration.getPlatforms()).thenReturn(Arrays.asList(platform));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwOTY0NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458409644", "bodyText": "So, I see we have a difference from other Invalid*Exception in that we are passing a better exception messages when instantiating InvalidPlatformException. But then, we are not making use of the exception message. In this case, I think we can show a more helpful and detailed message to the user by\n\"from.platforms contains a platform configuration that is missing required values or has invalid values: \" + ex.getMessage() + \": \" + ex.getInvalidPlatform()\nNote \"platformConfiguration\" --> \"platform configuration\". The message will be shown to the end user, and platformConfiguration is an internal Java variable name in our code that the user doesn't know about. Similarly, I think \"required values\" is more appropriate for the end user.", "author": "chanseokoh", "createdAt": "2020-07-21T21:51:10Z", "path": "jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java", "diffHunk": "@@ -127,6 +128,12 @@ public void buildDocker()\n               + ex.getInvalidPathValue(),\n           ex);\n \n+    } catch (InvalidPlatformException ex) {\n+      throw new GradleException(\n+          \"from.platforms contains a platformConfiguration that is missing required fields or has invalid values: \"", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java b/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\nindex 78c334c2f..25fd79e2f 100644\n--- a/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\n+++ b/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java\n\n@@ -130,7 +130,9 @@ public class BuildDockerTask extends DefaultTask implements JibTask {\n \n     } catch (InvalidPlatformException ex) {\n       throw new GradleException(\n-          \"from.platforms contains a platformConfiguration that is missing required fields or has invalid values: \"\n+          \"from.platforms contains a platform configuration that is missing required values or has invalid values: \"\n+              + ex.getMessage()\n+              + \": \"\n               + ex.getInvalidPlatform(),\n           ex);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwOTgzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458409832", "bodyText": "same for Maven", "author": "chanseokoh", "createdAt": "2020-07-21T21:51:35Z", "path": "jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java", "diffHunk": "@@ -106,7 +107,11 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n           \"<container><workingDirectory> is not an absolute Unix-style path: \"\n               + ex.getInvalidPathValue(),\n           ex);\n-\n+    } catch (InvalidPlatformException ex) {\n+      throw new MojoExecutionException(\n+          \"<from><platforms> contains a platformConfiguration that is missing required fields or has invalid values: \"", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java b/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\nindex 9459463b9..e75e57ab7 100644\n--- a/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\n+++ b/jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java\n\n@@ -109,7 +109,9 @@ public class BuildDockerMojo extends JibPluginConfiguration {\n           ex);\n     } catch (InvalidPlatformException ex) {\n       throw new MojoExecutionException(\n-          \"<from><platforms> contains a platformConfiguration that is missing required fields or has invalid values: \"\n+          \"<from><platforms> contains a platform configuration that is missing required values or has invalid values: \"\n+              + ex.getMessage()\n+              + \": \"\n               + ex.getInvalidPlatform(),\n           ex);\n     } catch (InvalidContainerVolumeException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMTA1Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458411052", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * (For example, a platform misses a required field or has an invalid value.).\n          \n          \n            \n             * (For example, a platform misses a required field or has an invalid value.)", "author": "chanseokoh", "createdAt": "2020-07-21T21:54:22Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+/**\n+ * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n+ * (For example, a platform misses a required field or has an invalid value.).", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\nindex a7fb68c15..0b9b43444 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/InvalidPlatformException.java\n\n@@ -17,8 +17,8 @@\n package com.google.cloud.tools.jib.plugins.common;\n \n /**\n- * Indicates that the {@code container.platforms} config value has at least one invalid platform.\n- * (For example, a platform misses a required field or has an invalid value.).\n+ * Indicates that the {@code from.platforms} config value has at least one invalid platform. (For\n+ * example, a platform misses a required field or has an invalid value.)\n  */\n public class InvalidPlatformException extends Exception {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMjU5OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2603#discussion_r458412599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TestPlatformConfiguration(String architecture, String os) {\n          \n          \n            \n                private TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {", "author": "chanseokoh", "createdAt": "2020-07-21T21:57:41Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java", "diffHunk": "@@ -104,11 +107,33 @@ private static void assertExtractionPathsUnordered(\n   @Mock private AuthProperty authProperty;\n   @Mock private Consumer<LogEvent> logger;\n \n+  private static class TestPlatformConfiguration implements PlatformConfiguration {\n+    @Nullable private final String os;\n+    @Nullable private final String architecture;\n+\n+    TestPlatformConfiguration(String architecture, String os) {", "originalCommit": "411f03f32cb991b45978d87f0df8a2d3f6b2f234", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\nindex adaf8189a..a24d50e19 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java\n\n@@ -111,7 +111,7 @@ public class PluginConfigurationProcessorTest {\n     @Nullable private final String os;\n     @Nullable private final String architecture;\n \n-    TestPlatformConfiguration(String architecture, String os) {\n+    private TestPlatformConfiguration(@Nullable String architecture, @Nullable String os) {\n       this.architecture = architecture;\n       this.os = os;\n     }\n"}}, {"oid": "3bf674dfdbb6c17128b74c90de2c8956f55d946d", "url": "https://github.com/GoogleContainerTools/jib/commit/3bf674dfdbb6c17128b74c90de2c8956f55d946d", "message": "Adding clear error messages", "committedDate": "2020-07-22T14:31:11Z", "type": "commit"}, {"oid": "6d23c750cd21762af4977a6c8b34636b47e5d645", "url": "https://github.com/GoogleContainerTools/jib/commit/6d23c750cd21762af4977a6c8b34636b47e5d645", "message": "empty commit to trigger builds", "committedDate": "2020-07-22T16:15:50Z", "type": "commit"}]}