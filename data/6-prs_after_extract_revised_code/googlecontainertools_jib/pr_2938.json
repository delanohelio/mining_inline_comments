{"pr_number": 2938, "pr_title": "Use cacheDirectories in cli commands", "pr_createdAt": "2020-12-11T20:16:35Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2938", "timeline": [{"oid": "1b351ecc566d980d3025b19190746b36cb3010a0", "url": "https://github.com/GoogleContainerTools/jib/commit/1b351ecc566d980d3025b19190746b36cb3010a0", "message": "Use cacheDirectories in cli commands", "committedDate": "2020-12-11T20:11:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxOTY0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541319641", "bodyText": "Not a big deal, but temporaryFolder.newFile().toPath() will work too.\nAnd use the new exception assertion style in jib-cli (using a lambda).", "author": "chanseokoh", "createdAt": "2020-12-11T21:37:53Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -46,26 +47,38 @@ public void testCacheDirectories_defaults() {\n             XdgDirectories.getCacheHome()\n                 .resolve(\"cli\")\n                 .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+                .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext)));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n   }\n \n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile(\"a.file\").toPath();", "originalCommit": "1b351ecc566d980d3025b19190746b36cb3010a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c056602f7b2854e28a0164a3bfe622876c3503", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\nindex 7435ff7d..f8dbb44a 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n\n@@ -41,13 +40,15 @@ public class CacheDirectoriesTest {\n     Path buildContext = temporaryFolder.newFolder(\"some-context\").toPath();\n     CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n \n+    Path expectedProjectCache =\n+        Paths.get(System.getProperty(\"java.io.tmpdir\"))\n+            .resolve(\"jib-cli-cache\")\n+            .resolve(\"projects\")\n+            .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext));\n     assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n-    assertThat(cacheDirectories.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext)));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(expectedProjectCache);\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(expectedProjectCache.resolve(\"application-layers\"));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541324890", "bodyText": "Technically I think the jarFile path (not the parent) can still work. The difference is whether JARs in the same directory will use the same hash directory and share the app cache. Is there a specific reason to use a parent directory?\nOne thing matters is when that jarFile doesn't have a parent directory, which will be a common case, e.g., when doing jib jar app.jar. We learned that jarFile.getParent() == null in this case. So I think the argument check in from() will fail.\nAnd I just got this question if we can't just use a fixed app cache directory (without hashed sub-directories) shared by every Jib CLI build. But maybe it's good to have a hashed sub-directory per app to avoid generating too many directories in the cache root?", "author": "chanseokoh", "createdAt": "2020-12-11T21:43:35Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -84,7 +84,9 @@ public Integer call() {\n         return 1;\n       }\n \n-      Containerizer containerizer = Containerizers.from(commonCliOptions, logger);\n+      CacheDirectories cacheDirectories =\n+          CacheDirectories.from(commonCliOptions, jarFile.getParent());", "originalCommit": "1b351ecc566d980d3025b19190746b36cb3010a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MzgwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r543683804", "bodyText": "We learned that jarFile.getParent() == null in this case.\n\nInteresting, this is probably just because the parent path element doesn't exist, but shouldn't preclude us from getting a full path and then determining the parent?", "author": "loosebazooka", "createdAt": "2020-12-15T21:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzY3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r543727673", "bodyText": "If the original path value (e.g., app.jar) can be resolved with .getCanonicalPath() (e.g., the file exists in the current working directory), then yeah, I think .getParent() on the resolved path should work. But calling .getCanonicalPath() after .getParent() will probably fail. In any case, this code will fail as it will not pass the Preconditions.checkArgument().", "author": "chanseokoh", "createdAt": "2020-12-15T22:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNDc2NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r543734764", "bodyText": "Right, perhaps the jar is fine then. I was initially worried that the jar would be different each time (like includes version number or something), and then we'll fail to reuse the cache.\nThe other option is to use a common application cache (like all of jib core) and another separate directory for \"other\" project files?", "author": "loosebazooka", "createdAt": "2020-12-15T22:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2ODkyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r543768927", "bodyText": "the jar would be different each time (like includes version number or something), and then we'll fail to reuse the cache.\n\nOh, that's a very good point.", "author": "chanseokoh", "createdAt": "2020-12-15T23:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "c41cc8634a06845f7737be9f02192b5dbfb553f2", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java\nindex eae77ef4..31a0299b 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java\n\n@@ -85,7 +85,7 @@ public class Jar implements Callable<Integer> {\n       }\n \n       CacheDirectories cacheDirectories =\n-          CacheDirectories.from(commonCliOptions, jarFile.getParent());\n+          CacheDirectories.from(commonCliOptions, jarFile.toAbsolutePath().getParent());\n       Containerizer containerizer = Containerizers.from(commonCliOptions, logger, cacheDirectories);\n \n       JibContainerBuilder containerBuilder =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODUzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r541328538", "bodyText": "Just to confirm again: even if Path is a relative path (for example, .), path.toFile().getCanonicalPath() is always a full absolute path based on the current working directory?", "author": "chanseokoh", "createdAt": "2020-12-11T21:47:53Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java", "diffHunk": "@@ -35,12 +37,15 @@\n   /**\n    * Create a caches helper for cli cache locations.\n    *\n-   * @param commonCliOptions cli options\n-   * @param contextRoot the context root, if a single file, use the parent directory, this context\n+   * @param commonCliOptions cli options for user configured cache directories\n+   * @param contextRoot the context root, use the parent directory of single files, this context\n    *     root must exist\n    * @return an instance of CacheDirectories with cli specific cache locations\n    */\n   public static CacheDirectories from(CommonCliOptions commonCliOptions, Path contextRoot) {\n+    Preconditions.checkArgument(\n+        Files.isDirectory(contextRoot),\n+        \"contextRoot must be a directory, but \" + contextRoot.toString() + \" is not.\");", "originalCommit": "1b351ecc566d980d3025b19190746b36cb3010a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MjkwOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r543682909", "bodyText": "canonical path will return a the same path for the same file -- no matter what the currently relative pathing is and whatever the working directory is", "author": "loosebazooka", "createdAt": "2020-12-15T21:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "b0c056602f7b2854e28a0164a3bfe622876c3503", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\nindex f34aa8e9..380a72d1 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectories.java\n\n@@ -31,6 +31,8 @@ import javax.annotation.Nullable;\n /** A class to determine cache locations for any cli commands. */\n public class CacheDirectories {\n \n+  private static final String APPLICATION_LAYER_CACHE_DIR = \"application-layers\";\n+\n   @Nullable private final Path baseImageCache;\n   private final Path projectCache;\n \n"}}, {"oid": "b0c056602f7b2854e28a0164a3bfe622876c3503", "url": "https://github.com/GoogleContainerTools/jib/commit/b0c056602f7b2854e28a0164a3bfe622876c3503", "message": "Some updates\n\n- use tmp for project cache root (instead of user home cache)\n- use subdir application-layers for application layer cache", "committedDate": "2020-12-15T20:56:05Z", "type": "commit"}, {"oid": "c41cc8634a06845f7737be9f02192b5dbfb553f2", "url": "https://github.com/GoogleContainerTools/jib/commit/c41cc8634a06845f7737be9f02192b5dbfb553f2", "message": "fix test, use absolute path before jar parent", "committedDate": "2020-12-16T22:18:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY2OTkxMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r544669910", "bodyText": "nit: assertThat().hasMessageThat().isEqualTo()", "author": "mpeddada1", "createdAt": "2020-12-16T22:30:37Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -34,36 +34,52 @@\n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n-  public void testCacheDirectories_defaults() {\n+  public void testCacheDirectories_defaults() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n-    Path buildContext = Paths.get(\"some-context\");\n+    Path buildContext = temporaryFolder.newFolder(\"some-context\").toPath();\n     CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n \n+    Path expectedProjectCache =\n+        Paths.get(System.getProperty(\"java.io.tmpdir\"))\n+            .resolve(\"jib-cli-cache\")\n+            .resolve(\"projects\")\n+            .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext));\n     assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n-    assertThat(cacheDirectories.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(expectedProjectCache);\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(expectedProjectCache.resolve(\"application-layers\"));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(Paths.get(\"test-project-cache\").resolve(\"application-layers\"));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile().toPath();\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+\n+    IllegalArgumentException iae =\n+        Assert.assertThrows(\n+            IllegalArgumentException.class,\n+            () -> CacheDirectories.from(commonCliOptions, badContext));\n+    assertThat(iae.getMessage())\n+        .isEqualTo(\"contextRoot must be a directory, but \" + badContext.toString() + \" is not.\");", "originalCommit": "c41cc8634a06845f7737be9f02192b5dbfb553f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7236a7fe91641e68474608e75fc502854d7787b4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\nindex e5ad07f3..17cd7f4e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n\n@@ -74,11 +74,12 @@ public class CacheDirectoriesTest {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n \n-    IllegalArgumentException iae =\n+    IllegalArgumentException exception =\n         Assert.assertThrows(\n             IllegalArgumentException.class,\n             () -> CacheDirectories.from(commonCliOptions, badContext));\n-    assertThat(iae.getMessage())\n+    assertThat(exception)\n+        .hasMessageThat()\n         .isEqualTo(\"contextRoot must be a directory, but \" + badContext.toString() + \" is not.\");\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3MDY0Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r544670646", "bodyText": "maybe exception instead of an abbreviation?", "author": "mpeddada1", "createdAt": "2020-12-16T22:31:50Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java", "diffHunk": "@@ -34,36 +34,52 @@\n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n   @Test\n-  public void testCacheDirectories_defaults() {\n+  public void testCacheDirectories_defaults() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n-    Path buildContext = Paths.get(\"some-context\");\n+    Path buildContext = temporaryFolder.newFolder(\"some-context\").toPath();\n     CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, buildContext);\n \n+    Path expectedProjectCache =\n+        Paths.get(System.getProperty(\"java.io.tmpdir\"))\n+            .resolve(\"jib-cli-cache\")\n+            .resolve(\"projects\")\n+            .resolve(CacheDirectories.getProjectCacheDirectoryFromProject(buildContext));\n     assertThat(cacheDirectories.getBaseImageCache()).isEmpty();\n-    assertThat(cacheDirectories.getProjectCache())\n-        .isEqualTo(\n-            XdgDirectories.getCacheHome()\n-                .resolve(\"cli\")\n-                .resolve(\"projects\")\n-                .resolve(\n-                    CacheDirectories.getProjectCacheDirectoryFromProject(\n-                        Paths.get(\"some-context\"))));\n+    assertThat(cacheDirectories.getProjectCache()).isEqualTo(expectedProjectCache);\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(expectedProjectCache.resolve(\"application-layers\"));\n   }\n \n   @Test\n-  public void testCacheDirectories_configuredValuesIgnoresBuildContext() {\n+  public void testCacheDirectories_configuredValuesIgnoresBuildContext() throws IOException {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(\n             new CommonCliOptions(),\n             \"-t=ignored\",\n             \"--base-image-cache=test-base-image-cache\",\n             \"--project-cache=test-project-cache\");\n-    CacheDirectories cacheDirectories =\n-        CacheDirectories.from(commonCliOptions, Paths.get(\"ignored\"));\n+    Path ignoredContext = temporaryFolder.newFolder(\"ignored\").toPath();\n+    CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, ignoredContext);\n \n     assertThat(cacheDirectories.getBaseImageCache()).hasValue(Paths.get(\"test-base-image-cache\"));\n     assertThat(cacheDirectories.getProjectCache()).isEqualTo(Paths.get(\"test-project-cache\"));\n+    assertThat(cacheDirectories.getApplicationLayersCache())\n+        .isEqualTo(Paths.get(\"test-project-cache\").resolve(\"application-layers\"));\n+  }\n+\n+  @Test\n+  public void testCacheDirectories_failIfContextIsNotDirectory() throws IOException {\n+    Path badContext = temporaryFolder.newFile().toPath();\n+    CommonCliOptions commonCliOptions =\n+        CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n+\n+    IllegalArgumentException iae =", "originalCommit": "c41cc8634a06845f7737be9f02192b5dbfb553f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7236a7fe91641e68474608e75fc502854d7787b4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\nindex e5ad07f3..17cd7f4e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/CacheDirectoriesTest.java\n\n@@ -74,11 +74,12 @@ public class CacheDirectoriesTest {\n     CommonCliOptions commonCliOptions =\n         CommandLine.populateCommand(new CommonCliOptions(), \"-t\", \"ignored\");\n \n-    IllegalArgumentException iae =\n+    IllegalArgumentException exception =\n         Assert.assertThrows(\n             IllegalArgumentException.class,\n             () -> CacheDirectories.from(commonCliOptions, badContext));\n-    assertThat(iae.getMessage())\n+    assertThat(exception)\n+        .hasMessageThat()\n         .isEqualTo(\"contextRoot must be a directory, but \" + badContext.toString() + \" is not.\");\n   }\n \n"}}, {"oid": "7236a7fe91641e68474608e75fc502854d7787b4", "url": "https://github.com/GoogleContainerTools/jib/commit/7236a7fe91641e68474608e75fc502854d7787b4", "message": "test cleanup", "committedDate": "2020-12-17T05:23:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545345662", "bodyText": "I don't think this will work. @mpeddada1 can you check what jarFile.toAbsolutePath() evaluates to when running jib jar app.jar (i.e., jarFile is simply app.jar)?", "author": "chanseokoh", "createdAt": "2020-12-17T19:26:10Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Jar.java", "diffHunk": "@@ -84,7 +84,9 @@ public Integer call() {\n         return 1;\n       }\n \n-      Containerizer containerizer = Containerizers.from(commonCliOptions, logger);\n+      CacheDirectories cacheDirectories =\n+          CacheDirectories.from(commonCliOptions, jarFile.toAbsolutePath().getParent());", "originalCommit": "7236a7fe91641e68474608e75fc502854d7787b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM2Mzk2MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545363961", "bodyText": "Yup. Calling jarFile.toAbsolutePath() with jib jar sample.jar results in /Users/<username>/<path to jib folder>/sample.jar. So it resolves it for the current directory.", "author": "mpeddada1", "createdAt": "2020-12-17T19:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM3NDk0MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545374941", "bodyText": "Oh, I was wrong for the whole time about Path.toAbsolutePath(). I realized its Javadoc says it actually resolves the path against a file system.\n\nOtherwise, this method resolves the path in an implementation dependent manner, typically by resolving the path against a file system default directory.\n\n\n/Users/<username>/<path to jib folder>/sample.jar\n\nYou mean .../<parent path of sample.jar>/sample.jar in the end, right? For example, if the current directory is /foo, and if I run foo $ jib bar/sample.jar, then jarFile.toAbsoluatePath(), will correctly resolve to /foo/bar/sample.jar (as long as the file exists), right?", "author": "chanseokoh", "createdAt": "2020-12-17T20:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4NzEzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545387132", "bodyText": "You mean .../<parent path of sample.jar>/sample.jar in the end, right?\n\nYes.\n\nYou mean .../<parent path of sample.jar>/sample.jar in the end, right? For example, if the current directory is /foo, and if I run foo $ jib bar/sample.jar, then jarFile.toAbsoluatePath(), will correctly resolve to /foo/bar/sample.jar (as long as the file exists), right?\n\nOr it would be /Users/username/foo/bar/sample.jar for unix and something like C:\\Users\\username\\foo\\bar\\sample.jar for windows?", "author": "mpeddada1", "createdAt": "2020-12-17T20:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4OTQzNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545389434", "bodyText": "^ well depending on the filesystem default directory according to the doc", "author": "mpeddada1", "createdAt": "2020-12-17T20:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNjgyMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2938#discussion_r545406822", "bodyText": "Okay, you assumed the current working directory was /Users/username/foo. In my comment above, the working directory I assumed is /foo. So in my case, it will resolve to /foo/bar/sample.jar.\nIn any case, looks like jarFile.toAbsoluatePath() does the right thing that we want, so I guess no issue here.", "author": "chanseokoh", "createdAt": "2020-12-17T21:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTY2Mg=="}], "type": "inlineReview", "revised_code": null}]}