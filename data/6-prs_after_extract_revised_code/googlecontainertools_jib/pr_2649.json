{"pr_number": 2649, "pr_title": "Add more validations after yaml is serialized", "pr_createdAt": "2020-07-31T14:46:04Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2649", "timeline": [{"oid": "1076dbf5fb4ae1594107315a265ba458124d5d81", "url": "https://github.com/GoogleContainerTools/jib/commit/1076dbf5fb4ae1594107315a265ba458124d5d81", "message": "Add more validations after yaml is serialized\n\n- Added validation for all our optional parameters\n- Added new parameterized tests\n- Found out yaml parses converts `null` to string if used as a map key", "committedDate": "2020-07-31T14:45:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTA1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465755053", "bodyText": "value --> values and fix the description", "author": "chanseokoh", "createdAt": "2020-08-05T14:10:20Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MDkwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465760908", "bodyText": "IfExists sounds redundant to me when covering an empty collection. It doesn't cover null input though. I think checkNullOrNonNullEntries() coveys the intention more clearly, because it's difficult to know what \"IfExists\" means (== not null and collection is not empty\") without reading the Javadoc. I initially thought \"IfExists\" means \"if an entry exists at all.\" WDYT?", "author": "chanseokoh", "createdAt": "2020-08-05T14:18:16Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullEntriesIfExists(", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1Nzk1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466557951", "bodyText": "yeah that makes sense to me, I was having trouble naming this.", "author": "loosebazooka", "createdAt": "2020-08-06T17:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MTU4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465761587", "bodyText": "Nit: technically values.isEmpty() is unnecessary (the loop will fall through), but your preference.", "author": "chanseokoh", "createdAt": "2020-08-05T14:19:08Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a collection is either null, empty or contains only non-null values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullEntriesIfExists(\n+      @Nullable Collection<?> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODcwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466558700", "bodyText": "agreed", "author": "loosebazooka", "createdAt": "2020-08-06T17:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MTU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2Mjg1OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465762859", "bodyText": "I prefer Map.Entry<String, String> to avoid calling .get(key) (unnecessary map lookup operations).", "author": "chanseokoh", "createdAt": "2020-08-05T14:20:50Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MjkzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465762933", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-08-05T14:20:56Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2MzYyOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465763629", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-08-05T14:21:49Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDE5OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465764198", "bodyText": "empty strings?", "author": "chanseokoh", "createdAt": "2020-08-05T14:22:34Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NDgzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465764833", "bodyText": "empty string key? I think \"empty key\" can be a bit ambiguous.", "author": "chanseokoh", "createdAt": "2020-08-05T14:23:23Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NTEwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465765100", "bodyText": "empty string value?", "author": "chanseokoh", "createdAt": "2020-08-05T14:23:43Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty entries\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNonNullNonEmptyEntriesIfExists(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String key : values.keySet()) {\n+      Preconditions.checkNotNull(key, \"Property '\" + propertyName + \"' cannot contain null keys\");\n+      Preconditions.checkArgument(\n+          !key.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty keys\");\n+      String value = values.get(key);\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null values\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty values\");", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NjE5Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465766193", "bodyText": "Remove @Nullable? Or, does it cause some compilation trouble with NullAway?", "author": "chanseokoh", "createdAt": "2020-08-05T14:25:08Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MzkxNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466563917", "bodyText": "It technically accepts null values. Removing @Nullable would mean a check to use this method.?", "author": "loosebazooka", "createdAt": "2020-08-06T17:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NjE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2NjY0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466566645", "bodyText": "Ah, I guess @Nullable makes sense as a check method.", "author": "chanseokoh", "createdAt": "2020-08-06T17:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NjE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NzExOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465767119", "bodyText": "I think a user who purposely put an empty string to the property might be confused when they see this. \"empty string\"?", "author": "chanseokoh", "createdAt": "2020-08-05T14:26:26Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc2NzQ4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r465767480", "bodyText": "Remove @Nullable? Or, does it cause some compilation trouble with NullAway?", "author": "chanseokoh", "createdAt": "2020-08-05T14:26:52Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,116 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {", "originalCommit": "1076dbf5fb4ae1594107315a265ba458124d5d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f412399af29b6efbab3f420660762a4211b072c0", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 60e84478..432d6dcf 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -38,7 +38,7 @@ public class Validator {\n   public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n"}}, {"oid": "f412399af29b6efbab3f420660762a4211b072c0", "url": "https://github.com/GoogleContainerTools/jib/commit/f412399af29b6efbab3f420660762a4211b072c0", "message": "method naming, javadoc, error messages", "committedDate": "2020-08-06T17:27:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjI2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466592262", "bodyText": "Nit: remove values.isEmpt() for consistency?", "author": "chanseokoh", "createdAt": "2020-08-06T18:03:11Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,120 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty entries\n+   * @throws NullPointerException if {@code values} contains null entries\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {\n+      // pass\n+      return;\n+    }\n+    for (String value : values) {\n+      Preconditions.checkNotNull(\n+          value, \"Property '\" + propertyName + \"' cannot contain null entries\");\n+      Preconditions.checkArgument(\n+          !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot contain empty strings\");\n+    }\n+  }\n+\n+  /**\n+   * Check if a map is either null, empty or contains only non-null, non-empty keys and values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty keys or values\n+   * @throws NullPointerException if {@code values} contains null keys or values\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Map<String, String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "originalCommit": "f412399af29b6efbab3f420660762a4211b072c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMjM2MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466602361", "bodyText": "oh yeah good catch.", "author": "loosebazooka", "createdAt": "2020-08-06T18:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 432d6dcf..7a4c1dab 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -81,7 +81,7 @@ public class Validator {\n    */\n   public static void checkNullOrNonNullNonEmptyEntries(\n       @Nullable Collection<String> values, String propertyName) {\n-    if (values == null || values.isEmpty()) {\n+    if (values == null) {\n       // pass\n       return;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjI5Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2649#discussion_r466592297", "bodyText": "Nit: remove values.isEmpt() for consistency?", "author": "chanseokoh", "createdAt": "2020-08-06T18:03:16Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java", "diffHunk": "@@ -27,35 +28,120 @@\n public class Validator {\n \n   /**\n-   * Checks if string is null, empty or only whitespace.\n+   * Checks if string is non null and non empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n    */\n-  public static void checkNotEmpty(@Nullable String value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable String value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n-        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be empty\");\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n   }\n \n   /**\n-   * Checks if a collection is null or empty.\n+   * Checks if string is null or non empty.\n+   *\n+   * @param value the string in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code value} is empty or only whitespace\n+   */\n+  public static void checkNullOrNotEmpty(@Nullable String value, String propertyName) {\n+    if (value == null) {\n+      // pass\n+      return;\n+    }\n+    Preconditions.checkArgument(\n+        !value.trim().isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty string\");\n+  }\n+\n+  /**\n+   * Checks if a collection is not null and not empty.\n    *\n    * @param value the string in question\n    * @param propertyName the equivalent 'yaml' property name\n    * @throws NullPointerException if {@code value} is null\n    * @throws IllegalArgumentException if {@code value} is empty\n    */\n-  public static void checkNotEmpty(@Nullable Collection<?> value, String propertyName) {\n+  public static void checkNotNullAndNotEmpty(@Nullable Collection<?> value, String propertyName) {\n     Preconditions.checkNotNull(value, \"Property '\" + propertyName + \"' cannot be null\");\n     Preconditions.checkArgument(\n         !value.isEmpty(), \"Property '\" + propertyName + \"' cannot be an empty collection\");\n   }\n \n   /**\n-   * Checks if string is what is expected.\n+   * Check if a collection is either null, empty or contains only non-null, non-empty values.\n+   *\n+   * @param values the collection in question\n+   * @param propertyName the equivalent 'yaml' property name\n+   * @throws IllegalArgumentException if {@code values} contains empty entries\n+   * @throws NullPointerException if {@code values} contains null entries\n+   */\n+  public static void checkNullOrNonNullNonEmptyEntries(\n+      @Nullable Collection<String> values, String propertyName) {\n+    if (values == null || values.isEmpty()) {", "originalCommit": "f412399af29b6efbab3f420660762a4211b072c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\nindex 432d6dcf..7a4c1dab 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java\n\n@@ -81,7 +81,7 @@ public class Validator {\n    */\n   public static void checkNullOrNonNullNonEmptyEntries(\n       @Nullable Collection<String> values, String propertyName) {\n-    if (values == null || values.isEmpty()) {\n+    if (values == null) {\n       // pass\n       return;\n     }\n"}}, {"oid": "9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "url": "https://github.com/GoogleContainerTools/jib/commit/9f7e4dafca75bf8c20b3d7be97819ddfd9fc2e65", "message": "remove isEmpty check", "committedDate": "2020-08-06T18:23:11Z", "type": "commit"}]}