{"pr_number": 2227, "pr_title": "Write out the image metadata to a file after build.", "pr_createdAt": "2020-01-11T22:05:38Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2227", "timeline": [{"oid": "44663b6ca4f195892686b96f5e2312a3f3e049b1", "url": "https://github.com/GoogleContainerTools/jib/commit/44663b6ca4f195892686b96f5e2312a3f3e049b1", "message": "Optionally write out the image name to a file after build.\n\nIf the maven plugin is configured with an `imageName` output\npath:\n```xml\n<configuration>\n  <to>\n    <image>gcr.io/some/path/to/image:tag</image>\n  </to>\n  <outputPaths>\n    <imageName>target/jib-image.name</imageName>\n  </outputPaths>\n</configuration>\n```\n\nThe jib-maven-plugin will now create a file at that path with\nthe image name during the build, like so:\n```\n$ mvn jib:build\n...\n$ cat target/jib-image.name\ngcr.io/some/path/to/image:tag\n```\n\nThis is handy if you generate the image name or tag in a dynamic\nfashion (eg, including a timstamp) and you have other tools in a\nCD pipeline that operate on the generated image. In our case, we\nwould like to use the reference to the generated image to deploy to\nK8S, and our deployment tooling picks it up from a file.\n\nI have only implemented support in the maven plugin for now, since\nthat is what we are using and I'm not really familiar with Gradle.\nThat should be pretty straight-forward to add, if need be.\n\nWhen it comes to the implementation, I imitated how the image id\nand digests are written out for now. Changing to a json or yaml\noutput format felt like a bigger (breaking) change.\n\nRelated issue: #1875", "committedDate": "2020-01-11T21:55:32Z", "type": "commit"}, {"oid": "0d77fbb22a0d49ea6c616fe78ff71abfae225207", "url": "https://github.com/GoogleContainerTools/jib/commit/0d77fbb22a0d49ea6c616fe78ff71abfae225207", "message": "Don't use Java11 from tests", "committedDate": "2020-01-11T22:16:52Z", "type": "commit"}, {"oid": "f9ec62c72e76cd05a4a4cf133ca40dd87c2db0ac", "url": "https://github.com/GoogleContainerTools/jib/commit/f9ec62c72e76cd05a4a4cf133ca40dd87c2db0ac", "message": "Refactoring: Keep the target image in JibContainer", "committedDate": "2020-01-12T18:02:18Z", "type": "commit"}, {"oid": "7fa3cd0894bccaf9195acef75a2c795279a1d228", "url": "https://github.com/GoogleContainerTools/jib/commit/7fa3cd0894bccaf9195acef75a2c795279a1d228", "message": "Write out image metadata as json instead", "committedDate": "2020-01-14T15:59:28Z", "type": "commit"}, {"oid": "5bf7aed414fd233aac081f369bab4a3513c2b286", "url": "https://github.com/GoogleContainerTools/jib/commit/5bf7aed414fd233aac081f369bab4a3513c2b286", "message": "Allow copyright from 2020", "committedDate": "2020-01-14T16:04:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTA4Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r366439083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   \"image\":\"gcr.io/project/image:tag\",\n          \n          \n            \n             *   \"image\": \"gcr.io/project/image:tag\",", "author": "briandealwis", "createdAt": "2020-01-14T16:26:23Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.plugins.common;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.tools.jib.api.JibContainer;\n+import com.google.cloud.tools.jib.json.JsonTemplate;\n+import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+\n+/**\n+ * Builds a JSON string containing metadata about a {@link JibContainer} from a build.\n+ *\n+ * <p>Example:\n+ *\n+ * <pre>{@code\n+ * {\n+ *   \"image\":\"gcr.io/project/image:tag\",", "originalCommit": "5bf7aed414fd233aac081f369bab4a3513c2b286", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjc5NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367326795", "bodyText": "Fixed", "author": "mbruggmann", "createdAt": "2020-01-16T09:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzOTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\nindex 502484b4..35dc104d 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\n\n@@ -23,6 +23,8 @@ import com.google.cloud.tools.jib.json.JsonTemplate;\n import com.google.cloud.tools.jib.json.JsonTemplateMapper;\n import com.google.common.annotations.VisibleForTesting;\n import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * Builds a JSON string containing metadata about a {@link JibContainer} from a build.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NjI4NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r366496284", "bodyText": "I think it would be better to compare this output explicitly as a string to ensure we're producing expected output.  (For example, to detect a situation where we change JSON libraries that produces slightly-invalid JSON.)", "author": "briandealwis", "createdAt": "2020-01-14T18:18:20Z", "path": "jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java", "diffHunk": "@@ -215,4 +222,27 @@ public void testBuildImage_other()\n       Assert.assertEquals(TEST_HELPFUL_SUGGESTIONS.none(), ex.getMessage());\n     }\n   }\n+\n+  @Test\n+  public void testBuildImage_writesImageJson() throws Exception {\n+    final ImageReference targetImageReference = ImageReference.parse(\"gcr.io/distroless/java:11\");\n+    final String imageId =\n+        \"sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9\";\n+    final String digest = \"sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc\";\n+\n+    final Path outputPath = temporaryFolder.newFile(\"jib-image.json\").toPath();\n+\n+    Mockito.when(mockJibContainer.getTargetImage()).thenReturn(targetImageReference);\n+    Mockito.when(mockJibContainer.getImageId()).thenReturn(DescriptorDigest.fromDigest(imageId));\n+    Mockito.when(mockJibContainer.getDigest()).thenReturn(DescriptorDigest.fromDigest(digest));\n+    Mockito.when(mockJibContainerBuilder.containerize(mockContainerizer))\n+        .thenReturn(mockJibContainer);\n+    testJibBuildRunner.writeImageJson(outputPath).runBuild();\n+\n+    final String outputJson = new String(Files.readAllBytes(outputPath), StandardCharsets.UTF_8);", "originalCommit": "5bf7aed414fd233aac081f369bab4a3513c2b286", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyODg4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367328886", "bodyText": "Had a look at this. Beyond putting the full expected json into a string in the testcase (which seems highly specific) I didn't find a good way of doing that.\nAs of now, the next line of ImageMetadataOutput.fromJson(outputJson) will at least make sure it properly parses into the expected type so it should catch any invalid JSON, serialization/deserialization differences and similar.", "author": "mbruggmann", "createdAt": "2020-01-16T10:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NjI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "chunk": "diff --git a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java\nindex 994093f2..447e004d 100644\n--- a/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java\n+++ b/jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java\n\n@@ -229,12 +231,14 @@ public class JibBuildRunnerTest {\n     final String imageId =\n         \"sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9\";\n     final String digest = \"sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc\";\n+    final Set<String> tags = ImmutableSet.of(\"latest\", \"0.1.41-69d10e-20200116T101403\");\n \n     final Path outputPath = temporaryFolder.newFile(\"jib-image.json\").toPath();\n \n     Mockito.when(mockJibContainer.getTargetImage()).thenReturn(targetImageReference);\n     Mockito.when(mockJibContainer.getImageId()).thenReturn(DescriptorDigest.fromDigest(imageId));\n     Mockito.when(mockJibContainer.getDigest()).thenReturn(DescriptorDigest.fromDigest(digest));\n+    Mockito.when(mockJibContainer.getTags()).thenReturn(tags);\n     Mockito.when(mockJibContainerBuilder.containerize(mockContainerizer))\n         .thenReturn(mockJibContainer);\n     testJibBuildRunner.writeImageJson(outputPath).runBuild();\n"}}, {"oid": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "url": "https://github.com/GoogleContainerTools/jib/commit/caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "message": "Also output tags in jib-image.json", "committedDate": "2020-01-16T09:25:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1NzQyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367957427", "bodyText": "Thanks for improving the tests \ud83e\udd47", "author": "briandealwis", "createdAt": "2020-01-17T14:19:15Z", "path": "jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerTest.java", "diffHunk": "@@ -44,34 +47,62 @@ public void setUp() throws DigestException, InvalidImageReferenceException {\n     digest2 =\n         DescriptorDigest.fromDigest(\n             \"sha256:9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba\");\n-    digest3 =\n-        DescriptorDigest.fromDigest(\n-            \"sha256:fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210\");\n+    tags1 = ImmutableSet.of(\"latest\", \"custom-tag\");\n+    tags2 = ImmutableSet.of(\"latest\");\n   }\n \n   @Test\n   public void testCreation() {\n-    JibContainer container = new JibContainer(targetImage1, digest1, digest2);\n+    JibContainer container = new JibContainer(targetImage1, digest1, digest2, tags1);\n \n     Assert.assertEquals(targetImage1, container.getTargetImage());\n     Assert.assertEquals(digest1, container.getDigest());\n     Assert.assertEquals(digest2, container.getImageId());\n+    Assert.assertEquals(tags1, container.getTags());\n   }\n \n   @Test\n   public void testEquality() {\n-    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2);\n-    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2);\n-    JibContainer container3 = new JibContainer(targetImage1, digest2, digest3);\n-    JibContainer container4 = new JibContainer(targetImage2, digest2, digest3);\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2, tags1);\n \n     Assert.assertEquals(container1, container2);\n     Assert.assertEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentTargetImage() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage2, digest1, digest2, tags1);\n+\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentImageDigest() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest2, digest2, tags1);\n \n-    Assert.assertNotEquals(container1, container3);\n-    Assert.assertNotEquals(container1.hashCode(), container3.hashCode());\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }\n+\n+  @Test\n+  public void testEquality_differentImageId() {\n+    JibContainer container1 = new JibContainer(targetImage1, digest1, digest1, tags1);\n+    JibContainer container2 = new JibContainer(targetImage1, digest1, digest2, tags1);\n+\n+    Assert.assertNotEquals(container1, container2);\n+    Assert.assertNotEquals(container1.hashCode(), container2.hashCode());\n+  }", "originalCommit": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MDA4Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r367960083", "bodyText": "I think Guava's ImmutableList.sortedCopyOf() is a little more compact, and immutable?", "author": "briandealwis", "createdAt": "2020-01-17T14:24:34Z", "path": "jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java", "diffHunk": "@@ -62,7 +68,11 @@ public static ImageMetadataOutput fromJibContainer(JibContainer jibContainer) {\n     String image = jibContainer.getTargetImage().toString();\n     String imageId = jibContainer.getImageId().toString();\n     String imageDigest = jibContainer.getDigest().toString();\n-    return new ImageMetadataOutput(image, imageId, imageDigest);\n+\n+    // Make sure tags always appear in a predictable way, by sorting them into a list\n+    List<String> tags = jibContainer.getTags().stream().sorted().collect(Collectors.toList());", "originalCommit": "caeb2fe20ebab0cff2bf821e8532e83dabe01ec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDA1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2227#discussion_r368240057", "bodyText": "Good idea, updated!", "author": "mbruggmann", "createdAt": "2020-01-18T18:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MDA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8d642553e3dfac3da91ed8b6cdbc36afb6607748", "chunk": "diff --git a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\nindex 35dc104d..786362e4 100644\n--- a/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\n+++ b/jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ImageMetadataOutput.java\n\n@@ -70,7 +70,7 @@ public class ImageMetadataOutput implements JsonTemplate {\n     String imageDigest = jibContainer.getDigest().toString();\n \n     // Make sure tags always appear in a predictable way, by sorting them into a list\n-    List<String> tags = jibContainer.getTags().stream().sorted().collect(Collectors.toList());\n+    List<String> tags = ImmutableList.sortedCopyOf(jibContainer.getTags());\n \n     return new ImageMetadataOutput(image, imageId, imageDigest, tags);\n   }\n"}}, {"oid": "8d642553e3dfac3da91ed8b6cdbc36afb6607748", "url": "https://github.com/GoogleContainerTools/jib/commit/8d642553e3dfac3da91ed8b6cdbc36afb6607748", "message": "Use Guavas ImmutableList.sortedCopyOf()", "committedDate": "2020-01-18T17:17:13Z", "type": "commit"}, {"oid": "4fe9a472f4622c23eb8d22438dd497b17e076a7f", "url": "https://github.com/GoogleContainerTools/jib/commit/4fe9a472f4622c23eb8d22438dd497b17e076a7f", "message": "Implement equality on ImageReference", "committedDate": "2020-01-18T17:58:35Z", "type": "commit"}]}