{"pr_number": 2832, "pr_title": "Add to/from credential helper", "pr_createdAt": "2020-10-16T03:55:24Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2832", "timeline": [{"oid": "49ab6b537f2dc141951c57edb4e67a39cd70e06f", "url": "https://github.com/GoogleContainerTools/jib/commit/49ab6b537f2dc141951c57edb4e67a39cd70e06f", "message": "Add to/from credential helper", "committedDate": "2020-10-16T03:53:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4MDkwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2832#discussion_r506480905", "bodyText": "Debug code?", "author": "chanseokoh", "createdAt": "2020-10-16T14:24:42Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -271,43 +373,42 @@ public void testParse_passwordWithoutUsername() {\n   }\n \n   @RunWith(Parameterized.class)\n-  public static class UsernamePasswordNotAllowedWithToAndFrom {\n-    @Parameterized.Parameters(name = \"{0},{1}\")\n-    public static Collection<Object[]> data() {\n+  public static class IncompatibleCredentialCombos {\n+    @Parameterized.Parameters\n+    public static Collection<String[][]> data() {\n       return Arrays.asList(\n-          new Object[][] {\n-            {\"--to-username\", \"--to-password\"},\n-            {\"--from-username\", \"--from-password\"}\n+          new String[][][] {\n+            {{\"--credential-helper=x\", \"--to-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--from-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--username=x\", \"--password=x\"}},\n+            {{\"--credential-helper=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--credential-helper=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-credential-helper=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-credential-helper=x\"}},\n           });\n     }\n \n-    @Parameterized.Parameter(0)\n-    public String usernameField;\n-\n-    @Parameterized.Parameter(1)\n-    public String passwordField;\n+    @Parameterized.Parameter public String[] authArgs;\n+    private final String[] requiredArgs = new String[] {\"--target=ignored\"};\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n+      try {\n+        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n+      } catch (CommandLine.MaxValuesExceededException error) {\n+        System.out.println(\"goose\");\n+      } catch (Exception ex) {\n+        // do nothing\n+      }", "originalCommit": "49ab6b537f2dc141951c57edb4e67a39cd70e06f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90b8e2e38b6d92533f21d87400807c407918026", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\nindex aeafda2b..50f17e8f 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\n\n@@ -395,20 +395,15 @@ public class JibCliTest {\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n-      try {\n-        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n-      } catch (CommandLine.MaxValuesExceededException error) {\n-        System.out.println(\"goose\");\n-      } catch (Exception ex) {\n-        // do nothing\n-      }\n       MutuallyExclusiveArgsException meae =\n           assertThrows(\n               MutuallyExclusiveArgsException.class,\n               () ->\n                   CommandLine.populateCommand(\n                       new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs)));\n-      assertThat(meae.getMessage()).startsWith(\"Error: \");\n+      assertThat(meae)\n+          .hasMessageThat()\n+          .containsMatch(\"^Error: (--credential-helper|\\\\[--username)\");\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxMTMwMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2832#discussion_r506511301", "bodyText": "how about this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertThat(meae.getMessage()).startsWith(\"Error: \");\n          \n          \n            \n                  assertThat(meae).hasMessageThat().startsWith(\"Error:\");\n          \n      \n    \n    \n  \n\nMight produce a more readable error message.", "author": "mpeddada1", "createdAt": "2020-10-16T14:55:11Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java", "diffHunk": "@@ -271,43 +373,42 @@ public void testParse_passwordWithoutUsername() {\n   }\n \n   @RunWith(Parameterized.class)\n-  public static class UsernamePasswordNotAllowedWithToAndFrom {\n-    @Parameterized.Parameters(name = \"{0},{1}\")\n-    public static Collection<Object[]> data() {\n+  public static class IncompatibleCredentialCombos {\n+    @Parameterized.Parameters\n+    public static Collection<String[][]> data() {\n       return Arrays.asList(\n-          new Object[][] {\n-            {\"--to-username\", \"--to-password\"},\n-            {\"--from-username\", \"--from-password\"}\n+          new String[][][] {\n+            {{\"--credential-helper=x\", \"--to-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--from-credential-helper=x\"}},\n+            {{\"--credential-helper=x\", \"--username=x\", \"--password=x\"}},\n+            {{\"--credential-helper=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--credential-helper=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-username=x\", \"--from-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-username=x\", \"--to-password=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--to-credential-helper=x\"}},\n+            {{\"--username=x\", \"--password=x\", \"--from-credential-helper=x\"}},\n           });\n     }\n \n-    @Parameterized.Parameter(0)\n-    public String usernameField;\n-\n-    @Parameterized.Parameter(1)\n-    public String passwordField;\n+    @Parameterized.Parameter public String[] authArgs;\n+    private final String[] requiredArgs = new String[] {\"--target=ignored\"};\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n+      try {\n+        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n+      } catch (CommandLine.MaxValuesExceededException error) {\n+        System.out.println(\"goose\");\n+      } catch (Exception ex) {\n+        // do nothing\n+      }\n       MutuallyExclusiveArgsException meae =\n           assertThrows(\n               MutuallyExclusiveArgsException.class,\n               () ->\n                   CommandLine.populateCommand(\n-                      new JibCli(),\n-                      \"--target\",\n-                      \"test-image-ref\",\n-                      \"--username\",\n-                      \"test-username\",\n-                      \"--password\",\n-                      \"test-password\",\n-                      usernameField,\n-                      \"test-username\",\n-                      passwordField,\n-                      \"test-password\"));\n-      assertThat(meae.getMessage())\n-          .isEqualTo(\n-              \"Error: [--username=<username> --password[=<password>]] and [[--to-username=<username> --to-password[=<password>]] [--from-username=<username> --from-password[=<password>]]] are mutually exclusive (specify only one)\");\n+                      new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs)));\n+      assertThat(meae.getMessage()).startsWith(\"Error: \");", "originalCommit": "49ab6b537f2dc141951c57edb4e67a39cd70e06f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90b8e2e38b6d92533f21d87400807c407918026", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\nindex aeafda2b..50f17e8f 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/cli2/JibCliTest.java\n\n@@ -395,20 +395,15 @@ public class JibCliTest {\n \n     @Test\n     public void testParse_usernameWithoutPassword() {\n-      try {\n-        CommandLine.populateCommand(new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs));\n-      } catch (CommandLine.MaxValuesExceededException error) {\n-        System.out.println(\"goose\");\n-      } catch (Exception ex) {\n-        // do nothing\n-      }\n       MutuallyExclusiveArgsException meae =\n           assertThrows(\n               MutuallyExclusiveArgsException.class,\n               () ->\n                   CommandLine.populateCommand(\n                       new JibCli(), ArrayUtils.addAll(requiredArgs, authArgs)));\n-      assertThat(meae.getMessage()).startsWith(\"Error: \");\n+      assertThat(meae)\n+          .hasMessageThat()\n+          .containsMatch(\"^Error: (--credential-helper|\\\\[--username)\");\n     }\n   }\n }\n"}}, {"oid": "a90b8e2e38b6d92533f21d87400807c407918026", "url": "https://github.com/GoogleContainerTools/jib/commit/a90b8e2e38b6d92533f21d87400807c407918026", "message": "test update", "committedDate": "2020-10-16T15:14:20Z", "type": "commit"}]}