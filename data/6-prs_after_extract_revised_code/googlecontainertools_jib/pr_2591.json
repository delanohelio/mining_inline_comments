{"pr_number": 2591, "pr_title": "Update Javadocs and CHANGELOG for Platforms / minor code style changes", "pr_createdAt": "2020-07-16T16:06:51Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2591", "timeline": [{"oid": "42c28fca4d5219339e48ee93080475a044d2de2f", "url": "https://github.com/GoogleContainerTools/jib/commit/42c28fca4d5219339e48ee93080475a044d2de2f", "message": "Update Javadocs and CHANGELOG for platforms", "committedDate": "2020-07-16T16:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjcxMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455902711", "bodyText": "@louismurerwa we don't include RuntimeException (which IllegalArgumentException) in the method signature if such an exception is from checking arguments.", "author": "chanseokoh", "createdAt": "2020-07-16T16:08:54Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -70,39 +70,40 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n-     * manifest list or an OCI image index, must be set so that an image builder can select the\n-     * image matching the given platform. If the base image reference is an image manifest, this\n-     * value is ignored and the platform of the built image follows that of the base image. The\n-     * default is {@code linux amd64 }.\n+     * Adds a desired image platform (OS and architecture pair). If the base image reference is a\n+     * Docker manifest list or an OCI image index, an image builder may select the base image\n+     * matching the given platform. If the base image reference is an image manifest, an image\n+     * builder may ignore the given platform and use the platform of the base image or may decide to\n+     * raise on error.\n      *\n-     * <p>Note that the build plan starts with amd64/linux as the default platform. If you want to\n-     * reset the default platform instead of adding a new one, use setPlatforms()\"\n+     * <p>Note that a new build plan starts with \"amd64/linux\" as the default platform. If you want\n+     * to reset the default platform instead of adding a new one, use {@link #setPlatforms(Set)}.\n      *\n-     * @param os value to select a base image in case of a manifest list\n-     * @param architecture value to select a base image in case of a manifest list\n+     * @param architecture architecture (for example, {@code amd64}) to select a base image in case\n+     *     of a manifest list\n+     * @param os OS (for example, {@code linux}) to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder addPlatform(String os, String architecture) {\n-      platforms.add(new Platform(os, architecture));\n+    public Builder addPlatform(String architecture, String os) {\n+      platforms.add(new Platform(architecture, os));\n       return this;\n     }\n \n     /**\n-     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n-     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n-     * builder can select the images matching the given platforms. If the base image reference is an\n-     * image manifest, this value is ignored and the platform of the built image follows that of the\n-     * base image. The default is {@code linux amd64 }.\n+     * Sets a desired platform (properties including as OS and architecture) list. If the base image\n+     * reference is a Docker manifest list or an OCI image index, an image builder may select the\n+     * base images matching the given platforms. If the base image reference is an image manifest,\n+     * an image builder may ignore the given platforms and use the platform of the base image or may\n+     * decide to raise on error.\n      *\n-     * @param platforms is a list of platform objects to be used to select base images in case of a\n-     *     manifest list\n+     * <p>Note that a new build plan starts with \"amd64/linux\" as the default platform.\n+     *\n+     * @param platforms list of platforms to select base images in case of a manifest list\n      * @return this\n-     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) {", "originalCommit": "42c28fca4d5219339e48ee93080475a044d2de2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMTU2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455921567", "bodyText": "Sounds Good.Is this a Google Style or a Java Style?", "author": "louismurerwa", "createdAt": "2020-07-16T16:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MzQ3Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455943476", "bodyText": "It's a common practice in Java. In a lot of cases, you don't make RuntimeException explicit.", "author": "chanseokoh", "createdAt": "2020-07-16T17:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjcxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjkwMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455902903", "bodyText": "@louismurerwa FYI", "author": "chanseokoh", "createdAt": "2020-07-16T16:09:09Z", "path": "jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java", "diffHunk": "@@ -116,7 +116,7 @@ public void testToBuilder() {\n   }\n \n   @Test\n-  public void testAddPlatform_DuplicatePlatforms() {\n+  public void testAddPlatform_duplicatePlatforms() {", "originalCommit": "42c28fca4d5219339e48ee93080475a044d2de2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjY5Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455912693", "bodyText": "oh buildplan doesn't have guava?", "author": "loosebazooka", "createdAt": "2020-07-16T16:23:27Z", "path": "jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java", "diffHunk": "@@ -70,39 +70,40 @@ public Builder setBaseImage(String baseImage) {\n     }\n \n     /**\n-     * Adds a desired platform (OS and architecture pair). If the base image reference is a Docker\n-     * manifest list or an OCI image index, must be set so that an image builder can select the\n-     * image matching the given platform. If the base image reference is an image manifest, this\n-     * value is ignored and the platform of the built image follows that of the base image. The\n-     * default is {@code linux amd64 }.\n+     * Adds a desired image platform (OS and architecture pair). If the base image reference is a\n+     * Docker manifest list or an OCI image index, an image builder may select the base image\n+     * matching the given platform. If the base image reference is an image manifest, an image\n+     * builder may ignore the given platform and use the platform of the base image or may decide to\n+     * raise on error.\n      *\n-     * <p>Note that the build plan starts with amd64/linux as the default platform. If you want to\n-     * reset the default platform instead of adding a new one, use setPlatforms()\"\n+     * <p>Note that a new build plan starts with \"amd64/linux\" as the default platform. If you want\n+     * to reset the default platform instead of adding a new one, use {@link #setPlatforms(Set)}.\n      *\n-     * @param os value to select a base image in case of a manifest list\n-     * @param architecture value to select a base image in case of a manifest list\n+     * @param architecture architecture (for example, {@code amd64}) to select a base image in case\n+     *     of a manifest list\n+     * @param os OS (for example, {@code linux}) to select a base image in case of a manifest list\n      * @return this\n      */\n-    public Builder addPlatform(String os, String architecture) {\n-      platforms.add(new Platform(os, architecture));\n+    public Builder addPlatform(String architecture, String os) {\n+      platforms.add(new Platform(architecture, os));\n       return this;\n     }\n \n     /**\n-     * Sets a desired platform list ,a list containing (OS and architecture pairs). If the base\n-     * image reference is a Docker manifest list or an OCI image index, must be set so that an image\n-     * builder can select the images matching the given platforms. If the base image reference is an\n-     * image manifest, this value is ignored and the platform of the built image follows that of the\n-     * base image. The default is {@code linux amd64 }.\n+     * Sets a desired platform (properties including as OS and architecture) list. If the base image\n+     * reference is a Docker manifest list or an OCI image index, an image builder may select the\n+     * base images matching the given platforms. If the base image reference is an image manifest,\n+     * an image builder may ignore the given platforms and use the platform of the base image or may\n+     * decide to raise on error.\n      *\n-     * @param platforms is a list of platform objects to be used to select base images in case of a\n-     *     manifest list\n+     * <p>Note that a new build plan starts with \"amd64/linux\" as the default platform.\n+     *\n+     * @param platforms list of platforms to select base images in case of a manifest list\n      * @return this\n-     * @throws IllegalArgumentException if a user passes in an empty platform list\n      */\n-    public Builder setPlatforms(Set<Platform> platforms) throws IllegalArgumentException {\n+    public Builder setPlatforms(Set<Platform> platforms) {\n       if (platforms.isEmpty()) {\n-        throw new IllegalArgumentException(\"platforms set cannot be empty.\");\n+        throw new IllegalArgumentException(\"platforms set cannot be empty\");", "originalCommit": "42c28fca4d5219339e48ee93080475a044d2de2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjYxNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455916617", "bodyText": "Yeah, no Guava.", "author": "chanseokoh", "createdAt": "2020-07-16T16:29:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMjAzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455922032", "bodyText": "Whats Guava ? Is it the commenting style?", "author": "louismurerwa", "createdAt": "2020-07-16T16:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0Njk4NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2591#discussion_r455946984", "bodyText": "Guava is a very popular Java library (from Google) that provides a lot of handy and convenient utilities, annotations, and language idioms. In this case, if jib-build-plan depended on Guava, we would have been able to use the Preconditions class from Guava.\nPreconditions.checkArgument(!platforms.isEmpty(), \"platforms set cannot be empty\");\nHowever, since we want jib-build-plan to be as much lightweight as possible, we don't use Guava. (jib-core uses Guava, OTOH.)", "author": "chanseokoh", "createdAt": "2020-07-16T17:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMjY5Mw=="}], "type": "inlineReview", "revised_code": null}]}