{"pr_number": 2918, "pr_title": "Implement explode mode for Spring Boot Fat Jar", "pr_createdAt": "2020-12-04T02:49:21Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2918", "timeline": [{"oid": "6758dee990958b4027d4e22545a4f9384daa26f3", "url": "https://github.com/GoogleContainerTools/jib/commit/6758dee990958b4027d4e22545a4f9384daa26f3", "message": "wip", "committedDate": "2020-11-24T01:46:04Z", "type": "commit"}, {"oid": "0547910bc469f07f4f10f1948a9500161436976b", "url": "https://github.com/GoogleContainerTools/jib/commit/0547910bc469f07f4f10f1948a9500161436976b", "message": "wip", "committedDate": "2020-12-02T21:43:54Z", "type": "commit"}, {"oid": "5ce9619fdc8943324e87bc5daa6d746945bf9dec", "url": "https://github.com/GoogleContainerTools/jib/commit/5ce9619fdc8943324e87bc5daa6d746945bf9dec", "message": "exploded mode for spring boot fat jar", "committedDate": "2020-12-03T23:45:17Z", "type": "commit"}, {"oid": "dc2556a5ab323396838ba1405f5fd376605b8d06", "url": "https://github.com/GoogleContainerTools/jib/commit/dc2556a5ab323396838ba1405f5fd376605b8d06", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into cli-spring-boot-expl", "committedDate": "2020-12-03T23:45:23Z", "type": "commit"}, {"oid": "8cf2adc8a73cbee6644106a783d707b2d3253db4", "url": "https://github.com/GoogleContainerTools/jib/commit/8cf2adc8a73cbee6644106a783d707b2d3253db4", "message": "remove test jar", "committedDate": "2020-12-04T01:01:04Z", "type": "commit"}, {"oid": "0864cfb8e8e582980e2a7840260eb5365d696444", "url": "https://github.com/GoogleContainerTools/jib/commit/0864cfb8e8e582980e2a7840260eb5365d696444", "message": "clean up", "committedDate": "2020-12-04T02:36:36Z", "type": "commit"}, {"oid": "9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "url": "https://github.com/GoogleContainerTools/jib/commit/9c2ff61a8c8cfffea8611a2dde8642bf15b8e909", "message": "fix NoSuchElementException when layers.idx includes a layer with no files listed", "committedDate": "2020-12-04T23:10:49Z", "type": "commit"}, {"oid": "5745da8c438bc56ca8257ce745a29ef5d44189b8", "url": "https://github.com/GoogleContainerTools/jib/commit/5745da8c438bc56ca8257ce745a29ef5d44189b8", "message": "rename test jar", "committedDate": "2020-12-04T23:15:56Z", "type": "commit"}, {"oid": "8d4558cff67efb4e25d01a745663c8475df69e1f", "url": "https://github.com/GoogleContainerTools/jib/commit/8d4558cff67efb4e25d01a745663c8475df69e1f", "message": "formatting", "committedDate": "2020-12-04T23:22:47Z", "type": "commit"}, {"oid": "4c6bfba31af3571094279d787d28ce9834760fdd", "url": "https://github.com/GoogleContainerTools/jib/commit/4c6bfba31af3571094279d787d28ce9834760fdd", "message": "cleanup", "committedDate": "2020-12-07T18:36:10Z", "type": "commit"}, {"oid": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "url": "https://github.com/GoogleContainerTools/jib/commit/4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "message": "cleanup", "committedDate": "2020-12-07T18:48:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0Njc1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537946751", "bodyText": "Do we have to do this? jib-core (JavaContainerBuilder) uses a space.", "author": "chanseokoh", "createdAt": "2020-12-08T00:49:06Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -42,7 +50,7 @@\n   private static final String CLASSES = \"classes\";\n   private static final String RESOURCES = \"resources\";\n   private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n+  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot-dependencies\";", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MzU1MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541053550", "bodyText": "I initially changed it to be consistent with the format in layers.idx. But you're right --I reverted the change.", "author": "mpeddada1", "createdAt": "2020-12-11T16:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0Njc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -50,7 +50,7 @@ public class JarModeProcessor {\n   private static final String CLASSES = \"classes\";\n   private static final String RESOURCES = \"resources\";\n   private static final String DEPENDENCIES = \"dependencies\";\n-  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot-dependencies\";\n+  private static final String SNAPSHOT_DEPENDENCIES = \"snapshot dependencies\";\n \n   /**\n    * Jar Type.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzY3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537947679", "bodyText": "I think tempDirPath is right from the perspective of a caller. A caller is not supposed to provide a JAR content root but a temp directory.", "author": "chanseokoh", "createdAt": "2020-12-08T00:51:30Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -79,20 +87,19 @@ static JarType determineJarType(Path jarPath) throws IOException {\n    * a standard jar.\n    *\n    * @param jarPath path to jar file\n-   * @param tempDirPath path to temporary jib local directory\n+   * @param localExplodedJarRoot path to temporary jib local directory", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NDMxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541054319", "bodyText": "Right, reverted this change.", "author": "mpeddada1", "createdAt": "2020-12-11T16:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk0NzY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -87,19 +87,20 @@ public class JarModeProcessor {\n    * a standard jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedStandard(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedStandard(Path jarPath, Path tempDirPath)\n+      throws IOException {\n     // Add dependencies layers.\n     List<FileEntriesLayer> layers = getDependenciesLayers(jarPath, ProcessingMode.exploded);\n \n     // Determine class and resource files in the directory containing jar contents and create\n     // FileEntriesLayer for each type of layer (classes or resources), while maintaining the\n     // file's original project structure.\n+    Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n     Predicate<Path> isResourceFile = isClassFile.negate();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjM3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537952373", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-12-08T01:03:21Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -143,26 +144,26 @@ public class JarModeProcessor {\n    * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(Path jarPath, Path tempDirPath)\n+      throws IOException {\n \n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      Path localExplodedJarRoot = tempDirPath;\n       ZipUtil.unzip(jarPath, localExplodedJarRoot);\n       if (layerIndex != null) {\n         return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n       }\n \n-      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n-\n       // Non-snapshot layer\n       Predicate<Path> isInBootInfLib =\n-          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+          path ->\n+              path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"lib\"));\n       Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n       Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n       FileEntriesLayer nonSnapshotLayer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDgxMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537960812", "bodyText": "Although BOOT-INF/lib works, for non-test code, we do .resolve(\"BOOT-INF\").resolve(\"lib\") to avoid using a certain path separator.\nAnd why do we need getParent() if we are checking startsWith()?", "author": "chanseokoh", "createdAt": "2020-12-08T01:25:41Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NDYwNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541054606", "bodyText": "Oops, my bad.", "author": "mpeddada1", "createdAt": "2020-12-11T16:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MDgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -143,26 +144,26 @@ public class JarModeProcessor {\n    * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(Path jarPath, Path tempDirPath)\n+      throws IOException {\n \n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      Path localExplodedJarRoot = tempDirPath;\n       ZipUtil.unzip(jarPath, localExplodedJarRoot);\n       if (layerIndex != null) {\n         return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n       }\n \n-      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n-\n       // Non-snapshot layer\n       Predicate<Path> isInBootInfLib =\n-          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+          path ->\n+              path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"lib\"));\n       Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n       Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n       FileEntriesLayer nonSnapshotLayer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MzMzNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537963337", "bodyText": "This doesn't seem right. It's surprising this double-resolve actually worked.", "author": "chanseokoh", "createdAt": "2020-12-08T01:32:28Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -143,26 +144,26 @@ public class JarModeProcessor {\n    * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(Path jarPath, Path tempDirPath)\n+      throws IOException {\n \n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      Path localExplodedJarRoot = tempDirPath;\n       ZipUtil.unzip(jarPath, localExplodedJarRoot);\n       if (layerIndex != null) {\n         return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n       }\n \n-      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n-\n       // Non-snapshot layer\n       Predicate<Path> isInBootInfLib =\n-          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+          path ->\n+              path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"lib\"));\n       Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n       Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n       FileEntriesLayer nonSnapshotLayer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965087", "bodyText": "I think the following is more accurate:\nisInMetaInf.or(isInBootInfClasses.and(isClass.negate()))\n\nAnd I thought we should also include resources files at the JAR content root? Is it not the case?", "author": "chanseokoh", "createdAt": "2020-12-08T01:37:07Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n+\n+      // Non-snapshot layer\n+      Predicate<Path> isInBootInfLib =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+      Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n+      Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n+      FileEntriesLayer nonSnapshotLayer =\n+          addDirectoryContentsToLayer(\n+              DEPENDENCIES, localExplodedJarRoot, nonSnapshotPredicate, APP_ROOT);\n+\n+      // Snapshot layer\n+      Predicate<Path> snapshotPredicate = isInBootInfLib.and(isSnapshot);\n+      FileEntriesLayer snapshotLayer =\n+          addDirectoryContentsToLayer(\n+              SNAPSHOT_DEPENDENCIES, localExplodedJarRoot, snapshotPredicate, APP_ROOT);\n+\n+      // Spring-boot-loader layer.\n+      Predicate<Path> isLoader =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"org\"));\n+      FileEntriesLayer loaderLayer =\n+          addDirectoryContentsToLayer(\n+              \"spring-boot-loader\", localExplodedJarRoot, isLoader, APP_ROOT);\n+\n+      // Classes layer.\n+      Predicate<Path> isClass = path -> path.getFileName().toString().endsWith(\".class\");\n+      Predicate<Path> isInBootInfClasses =\n+          path ->\n+              path.getParent()\n+                  .startsWith(\n+                      localExplodedJarRoot.resolve(\n+                          localExplodedJarRoot.resolve(\"BOOT-INF/classes\")));\n+      Predicate<Path> finalPredicateClasses = isInBootInfClasses.and(isClass);\n+      FileEntriesLayer classesLayer =\n+          addDirectoryContentsToLayer(\n+              CLASSES, localExplodedJarRoot, finalPredicateClasses, APP_ROOT);\n+\n+      // Resources layer.\n+      Predicate<Path> isInMetaInf =\n+          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"META-INF\"));\n+      Predicate<Path> finalPredicateResources =\n+          isInBootInfClasses.or(isInMetaInf).and(isClass.negate());", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2NzI3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539567279", "bodyText": "Sorry, would that mean resources files outside the BOOT-INF/classes/ and META-INF/ directories?", "author": "mpeddada1", "createdAt": "2020-12-09T19:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3Mzg2Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539573866", "bodyText": "No, it means isInMetaInf || (isInBootInfClasses && !isClass). OTOH, your original condition is (isInBootInfClasses || isInMetaInf) && !isClass).", "author": "chanseokoh", "createdAt": "2020-12-09T19:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4NDI5OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539584298", "bodyText": "That said, I'm curious if a spring jar can have resources files at root?\n(OTOH, a regular jar has resource files for the application at root.)", "author": "chanseokoh", "createdAt": "2020-12-09T19:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4ODgzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539588831", "bodyText": "I wonder if it can't be like this for a spring jar:\n\nresources under BOOT-INF/classes/ --> resources for the app\nresources under root (excluding BOOT-INF/) --> resources for the spring launcher? (Not accessible from the app runtime but they are for configuring Spring Boot?)\nresources under META-INF/ --> for the app or the launcher? Or both?\n\nAnyways, all of them can go into the same \"resources\" layer, whether some are for the app or the launcher. I just wonder if we miss adding resources at root.", "author": "chanseokoh", "createdAt": "2020-12-09T19:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1MDYxOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539650619", "bodyText": "hm afaik, spring boot jars are structured in this way:\n+-META-INF\n |  +-MANIFEST.MF\n+-org\n |  +-springframework\n |     +-boot\n |        +-loader\n |           +-<spring boot loader classes>\n +-BOOT-INF\n    +-classes\n    |  +-mycompany\n    |     +-project\n    |        +-YourClasses.class\n    +-lib\n       +-dependency1.jar\n       +-dependency2.jar\n\nThe application classes and resources go into BOOT-INF/classes/. META-INF/ can also contain some files such as pom.properties, pom.xml and build-info.properties.  But outside of those three directories (META/, BOOT-INF/, org/) I don't see the possibility of any other resources existing - at least going by the standard structure of the spring boot JAR.", "author": "mpeddada1", "createdAt": "2020-12-09T21:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -143,26 +144,26 @@ public class JarModeProcessor {\n    * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(Path jarPath, Path tempDirPath)\n+      throws IOException {\n \n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      Path localExplodedJarRoot = tempDirPath;\n       ZipUtil.unzip(jarPath, localExplodedJarRoot);\n       if (layerIndex != null) {\n         return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n       }\n \n-      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n-\n       // Non-snapshot layer\n       Predicate<Path> isInBootInfLib =\n-          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+          path ->\n+              path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"lib\"));\n       Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n       Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n       FileEntriesLayer nonSnapshotLayer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NTk1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537965957", "bodyText": "localExplodedJarRoot.resolve(\"BOOT-INF\").... No need for Paths.get().", "author": "chanseokoh", "createdAt": "2020-12-08T01:39:24Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -335,7 +335,7 @@ public class JarModeProcessor {\n    */\n   private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n       Path localExplodedJarRoot) throws IOException {\n-    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));\n+    Path layerIndexPath = localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"layers.idx\");\n     Pattern layerNamePattern = Pattern.compile(\"-\\\\s(.*):\");\n     Pattern fileNamePattern = Pattern.compile(\"\\\\s\\\\s-\\\\s(.*)\");\n     Map<String, List<String>> layersMap = new LinkedHashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTI2MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r537969261", "bodyText": "Let's move this down to line 207.", "author": "chanseokoh", "createdAt": "2020-12-08T01:47:56Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -131,6 +138,81 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     return layers;\n   }\n \n+  /**\n+   * Creates layers as specified in BOOT-INF/layers.idx (if present) or for dependencies,\n+   * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n+   *\n+   * @param jarPath path to jar file\n+   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n+   *     provided doesn't exist\n+   */\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n+      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+\n+    try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+      ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      ZipUtil.unzip(jarPath, localExplodedJarRoot);\n+      if (layerIndex != null) {\n+        return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n+      }\n+\n+      ArrayList<FileEntriesLayer> layers = new ArrayList<>();", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -143,26 +144,26 @@ public class JarModeProcessor {\n    * spring-boot-loader, snapshot dependencies, resource and classes for a spring boot fat jar.\n    *\n    * @param jarPath path to jar file\n-   * @param localExplodedJarRoot path to temporary jib local directory\n+   * @param tempDirPath path to temporary jib local directory\n    * @return list of {@link FileEntriesLayer}\n    * @throws IOException if I/O error occurs when opening the jar file or if temporary directory\n    *     provided doesn't exist\n    */\n-  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(\n-      Path jarPath, Path localExplodedJarRoot) throws IOException {\n+  static List<FileEntriesLayer> createLayersForExplodedSpringBootFat(Path jarPath, Path tempDirPath)\n+      throws IOException {\n \n     try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n       ZipEntry layerIndex = jarFile.getEntry(\"BOOT-INF/layers.idx\");\n+      Path localExplodedJarRoot = tempDirPath;\n       ZipUtil.unzip(jarPath, localExplodedJarRoot);\n       if (layerIndex != null) {\n         return createLayersForLayeredSpringBootJar(localExplodedJarRoot);\n       }\n \n-      ArrayList<FileEntriesLayer> layers = new ArrayList<>();\n-\n       // Non-snapshot layer\n       Predicate<Path> isInBootInfLib =\n-          path -> path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF/lib\"));\n+          path ->\n+              path.getParent().startsWith(localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"lib\"));\n       Predicate<Path> isSnapshot = path -> path.getFileName().toString().contains(\"SNAPSHOT\");\n       Predicate<Path> nonSnapshotPredicate = isInBootInfLib.and(isSnapshot.negate());\n       FileEntriesLayer nonSnapshotLayer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538762722", "bodyText": "In the example above,\n      // - dependencies:\n      //   - BOOT-INF/lib/dependency1.jar\n      // - application:\n      //   - BOOT-INF/classes\n      //   - META-INF/\n\nBOOT-INF/classes is a directory but doesn't end with /. I think it's risky to assume every directory will end with /.", "author": "chanseokoh", "createdAt": "2020-12-08T19:54:47Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -262,4 +414,18 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n             });\n     return builder.build();\n   }\n+\n+  private static Optional<Predicate<Path>> computePredicateForLayeredSpringBoot(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    List<Predicate<Path>> allPredicates = new ArrayList<>();\n+    for (String pathName : layerContents) {\n+      if (pathName.endsWith(\"/\")) {", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3MzU1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539573553", "bodyText": "That is a good point and something I considered while writing this condition. But documentation on the format for layers.idx says that \"a directory name ends with /, a file name does not\" which is why decided to leave it in. (Sorry, the comment was pretty misleading)", "author": "mpeddada1", "createdAt": "2020-12-09T19:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NTY0NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539575644", "bodyText": "I can modify it if we don't want to rely too much on the documentation.", "author": "mpeddada1", "createdAt": "2020-12-09T19:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3ODkxMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539578913", "bodyText": "Ah, it's documented. I think we can rely on it. I thought it's not true based on your sample in the code comment.", "author": "chanseokoh", "createdAt": "2020-12-09T19:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "c25b738e86074b01c1d973045fd1c7c6a8202112", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..026bce6c 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -403,14 +400,24 @@ public class JarModeProcessor {\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n+    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              Path relativePath = sourceRoot.relativize(path);\n+              int nameCount = relativePath.getNameCount();\n+\n+              // Add the parent directories and the path itself\n+              for (int i = 1; i <= nameCount; i++) {\n+                Path subPath = relativePath.subpath(0, i);\n+                if (!addedPaths.contains(subPath)) {\n+                  builder.addEntry(\n+                      sourceRoot.resolve(subPath), basePathInContainer.resolve(subPath));\n+                  addedPaths.add(subPath);\n+                }\n+              }\n             });\n     return builder.build();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NTEyMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538765120", "bodyText": "Is it not possible to exclude META-INF, BOOT-INF, and org?", "author": "chanseokoh", "createdAt": "2020-12-08T19:58:30Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 12f0e83f..df4e782e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -427,6 +427,17 @@ public class JarModeProcessorTest {\n   @Test\n   public void testCreateLayersForExplodedLayeredSpringBoot()\n       throws IOException, URISyntaxException {\n+    // BOOT-INF/layers.idx for this springboot jar is structured in this way:\n+    // - \"dependencies\":\n+    //   - \"BOOT-INF/lib/dependency1.jar\"\n+    //   - \"BOOT-INF/lib/dependency2.jar\"\n+    // - \"spring-boot-loader\":\n+    //   - \"org/\"\n+    // - \"snapshot-dependencies\":\n+    //   - \"BOOT-INF/lib/dependency-SNAPSHOT-3.jar\"\n+    // - \"application\":\n+    //   - \"BOOT-INF/classes/\"\n+    //   - \"META-INF/\"\n     Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjE4MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766180", "bodyText": "Interesting. I guess layer.idx in this test doesn't have a resource layer for META-INF?", "author": "chanseokoh", "createdAt": "2020-12-08T20:00:09Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTMwMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055301", "bodyText": "The layer.idx has an \"application\" layer which contains both classes and resources.", "author": "mpeddada1", "createdAt": "2020-12-11T16:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 12f0e83f..df4e782e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -427,6 +427,17 @@ public class JarModeProcessorTest {\n   @Test\n   public void testCreateLayersForExplodedLayeredSpringBoot()\n       throws IOException, URISyntaxException {\n+    // BOOT-INF/layers.idx for this springboot jar is structured in this way:\n+    // - \"dependencies\":\n+    //   - \"BOOT-INF/lib/dependency1.jar\"\n+    //   - \"BOOT-INF/lib/dependency2.jar\"\n+    // - \"spring-boot-loader\":\n+    //   - \"org/\"\n+    // - \"snapshot-dependencies\":\n+    //   - \"BOOT-INF/lib/dependency-SNAPSHOT-3.jar\"\n+    // - \"application\":\n+    //   - \"BOOT-INF/classes/\"\n+    //   - \"META-INF/\"\n     Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjczNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766734", "bodyText": "I think it's worth adding the contents of layer.idx as a code comment.", "author": "chanseokoh", "createdAt": "2020-12-08T20:01:07Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTQ3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055478", "bodyText": "Good idea.", "author": "mpeddada1", "createdAt": "2020-12-11T16:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjczNA=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 12f0e83f..df4e782e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -427,6 +427,17 @@ public class JarModeProcessorTest {\n   @Test\n   public void testCreateLayersForExplodedLayeredSpringBoot()\n       throws IOException, URISyntaxException {\n+    // BOOT-INF/layers.idx for this springboot jar is structured in this way:\n+    // - \"dependencies\":\n+    //   - \"BOOT-INF/lib/dependency1.jar\"\n+    //   - \"BOOT-INF/lib/dependency2.jar\"\n+    // - \"spring-boot-loader\":\n+    //   - \"org/\"\n+    // - \"snapshot-dependencies\":\n+    //   - \"BOOT-INF/lib/dependency-SNAPSHOT-3.jar\"\n+    // - \"application\":\n+    //   - \"BOOT-INF/classes/\"\n+    //   - \"META-INF/\"\n     Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Njk4Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538766982", "bodyText": "Content of layers.idx as a comment?", "author": "chanseokoh", "createdAt": "2020-12-08T20:01:28Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -417,4 +423,318 @@ public void testComputeEntrypointForPackagedStandard_withMainClass()\n     assertThat(actualEntrypoint)\n         .isEqualTo(ImmutableList.of(\"java\", \"-jar\", \"/app/standardJarWithClassPath.jar\"));\n   }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot()\n+      throws IOException, URISyntaxException {\n+    Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.newFolder().toPath();\n+    List<FileEntriesLayer> layers =\n+        JarModeProcessor.createLayersForExplodedSpringBootFat(springbootJar, destDir);\n+\n+    assertThat(layers.size()).isEqualTo(4);\n+\n+    FileEntriesLayer nonSnapshotLayer = layers.get(0);\n+    FileEntriesLayer loaderLayer = layers.get(1);\n+    FileEntriesLayer snapshotLayer = layers.get(2);\n+    FileEntriesLayer applicationLayer = layers.get(3);\n+\n+    // Validate dependencies layers.\n+    assertThat(nonSnapshotLayer.getName()).isEqualTo(\"dependencies\");\n+    assertThat(\n+            nonSnapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency2.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+    assertThat(loaderLayer.getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(\n+            loaderLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data/data1.class\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/launcher1.class\"));\n+\n+    assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(\n+            snapshotLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+\n+    assertThat(applicationLayer.getName()).isEqualTo(\"application\");\n+    assertThat(\n+            applicationLayer\n+                .getEntries()\n+                .stream()\n+                .map(FileEntry::getExtractionPath)\n+                .collect(Collectors.toList()))\n+        .containsExactly(\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory\"),\n+            AbsoluteUnixPath.get(\"/app/BOOT-INF/lib\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF\"),\n+            AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"),\n+            AbsoluteUnixPath.get(\"/app/org\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader\"),\n+            AbsoluteUnixPath.get(\"/app/org/springframework/boot/loader/data\"));\n+  }\n+\n+  @Test\n+  public void testCreateLayersForExplodedLayeredSpringBoot_singleEmptyLayerListed()\n+      throws IOException, URISyntaxException {\n+    // Springboot JAR with \"snapshot-dependencies\" layer listed as empty in BOOT-INF/layers.idx", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 12f0e83f..df4e782e 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -427,6 +427,17 @@ public class JarModeProcessorTest {\n   @Test\n   public void testCreateLayersForExplodedLayeredSpringBoot()\n       throws IOException, URISyntaxException {\n+    // BOOT-INF/layers.idx for this springboot jar is structured in this way:\n+    // - \"dependencies\":\n+    //   - \"BOOT-INF/lib/dependency1.jar\"\n+    //   - \"BOOT-INF/lib/dependency2.jar\"\n+    // - \"spring-boot-loader\":\n+    //   - \"org/\"\n+    // - \"snapshot-dependencies\":\n+    //   - \"BOOT-INF/lib/dependency-SNAPSHOT-3.jar\"\n+    // - \"application\":\n+    //   - \"BOOT-INF/classes/\"\n+    //   - \"META-INF/\"\n     Path springbootJar = Paths.get(Resources.getResource(SPRING_BOOT_LAYERED).toURI());\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MDQ4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538770481", "bodyText": "Can we also check the name of each layer?", "author": "chanseokoh", "createdAt": "2020-12-08T20:07:23Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1ODMwMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541058300", "bodyText": "Done.", "author": "mpeddada1", "createdAt": "2020-12-11T16:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MDQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\nindex 7a5f7509..8697f7d1 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n\n@@ -144,6 +148,7 @@ public class JarFilesTest {\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n         .containsExactlyElementsIn(\n             FileEntriesLayer.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MTI3NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r538771274", "bodyText": "I also commented this below, but we should try to exclude directories that don't belong to this layer.", "author": "chanseokoh", "createdAt": "2020-12-08T20:08:47Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -146,4 +151,222 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+    assertThatExpectedEntriesPresentInNonSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInLoaderLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries(), destDir);\n+    assertThatExpectedEntriesPresentInSnapshotLayer_SpringBoot(\n+        ((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries(), destDir);\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(destDir.resolve(\"META-INF/\"), AbsoluteUnixPath.get(\"/app/META-INF/\"))\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(destDir.resolve(\"BOOT-INF/\"), AbsoluteUnixPath.get(\"/app/BOOT-INF/\"))", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTk2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541055969", "bodyText": "Good point. Applied this change.", "author": "mpeddada1", "createdAt": "2020-12-11T16:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3MTI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\nindex 7a5f7509..8697f7d1 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n\n@@ -144,6 +148,7 @@ public class JarFilesTest {\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n         .containsExactlyElementsIn(\n             FileEntriesLayer.builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MjE2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r539682160", "bodyText": "The Spring doc makes it very explicit that they are either dash-space or space-space-dash-space. I think we can use ' ' (space) instead of \\\\s. Also the doc says paths and layer names are quoted. So we can have it like Pattern.compile(\"- \\\"([^\\\"]*)\\\":\") (untested) without later removing quotes?", "author": "chanseokoh", "createdAt": "2020-12-09T22:03:59Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -233,6 +325,66 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     }\n   }\n \n+  /**\n+   * Creates layers as specified by the layers.idx file (located in the BOOT-INF/ directory of the\n+   * JAR).\n+   *\n+   * @param localExplodedJarRoot Path to temporary directory\n+   * @return list of {@link FileEntriesLayer}\n+   * @throws IOException if temporary directory provided doesn't exist\n+   */\n+  private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n+      Path localExplodedJarRoot) throws IOException {\n+    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));\n+    Pattern layerNamePattern = Pattern.compile(\"-\\\\s(.*):\");\n+    Pattern fileNamePattern = Pattern.compile(\"\\\\s\\\\s-\\\\s(.*)\");", "originalCommit": "4af656ce8dd4a5dded13441765b2cb1a5cbf8a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex ddac475a..96665bc6 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -335,7 +335,7 @@ public class JarModeProcessor {\n    */\n   private static List<FileEntriesLayer> createLayersForLayeredSpringBootJar(\n       Path localExplodedJarRoot) throws IOException {\n-    Path layerIndexPath = localExplodedJarRoot.resolve(Paths.get(\"BOOT-INF/layers.idx\"));\n+    Path layerIndexPath = localExplodedJarRoot.resolve(\"BOOT-INF\").resolve(\"layers.idx\");\n     Pattern layerNamePattern = Pattern.compile(\"-\\\\s(.*):\");\n     Pattern fileNamePattern = Pattern.compile(\"\\\\s\\\\s-\\\\s(.*)\");\n     Map<String, List<String>> layersMap = new LinkedHashMap<>();\n"}}, {"oid": "9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "url": "https://github.com/GoogleContainerTools/jib/commit/9a1cd44cb4266a35aa3c1142386ebd569e7d10a4", "message": "cleaning up comments, tests", "committedDate": "2020-12-10T19:55:42Z", "type": "commit"}, {"oid": "c25b738e86074b01c1d973045fd1c7c6a8202112", "url": "https://github.com/GoogleContainerTools/jib/commit/c25b738e86074b01c1d973045fd1c7c6a8202112", "message": "fix more tests and modify regex", "committedDate": "2020-12-11T04:28:34Z", "type": "commit"}, {"oid": "5fdf976e0890ed119c7dd200b6f050692e2391bb", "url": "https://github.com/GoogleContainerTools/jib/commit/5fdf976e0890ed119c7dd200b6f050692e2391bb", "message": "apply suggested edits and fix comments in tests", "committedDate": "2020-12-11T14:15:31Z", "type": "commit"}, {"oid": "ccc02710fe27a13f677677cec4a60efbf65a51b4", "url": "https://github.com/GoogleContainerTools/jib/commit/ccc02710fe27a13f677677cec4a60efbf65a51b4", "message": "don't add layer if it is empty when creating layers for expl standard jar", "committedDate": "2020-12-11T14:23:12Z", "type": "commit"}, {"oid": "012c96074b31d07626db2f13357ff1581a654ef1", "url": "https://github.com/GoogleContainerTools/jib/commit/012c96074b31d07626db2f13357ff1581a654ef1", "message": "simplify existing logic to exclude empty directories", "committedDate": "2020-12-11T15:25:19Z", "type": "commit"}, {"oid": "361dabdbdce24fd57cd140f1a753f80246df0bc7", "url": "https://github.com/GoogleContainerTools/jib/commit/361dabdbdce24fd57cd140f1a753f80246df0bc7", "message": "cleanup few comments, delete spaces", "committedDate": "2020-12-11T15:32:58Z", "type": "commit"}, {"oid": "393dba9255d59b99ac8a3887d44c9cd00d14ae26", "url": "https://github.com/GoogleContainerTools/jib/commit/393dba9255d59b99ac8a3887d44c9cd00d14ae26", "message": "simplify predicate for resources", "committedDate": "2020-12-11T15:41:21Z", "type": "commit"}, {"oid": "59327e1dd0028c818ab90340e3d2654d7fefbdc3", "url": "https://github.com/GoogleContainerTools/jib/commit/59327e1dd0028c818ab90340e3d2654d7fefbdc3", "message": "small format fix for test", "committedDate": "2020-12-11T15:51:31Z", "type": "commit"}, {"oid": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e", "url": "https://github.com/GoogleContainerTools/jib/commit/97e268c65232e4ec0f9912a8c9ccb7744eb5483e", "message": "cleanup jarfiles test", "committedDate": "2020-12-11T18:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwMTg1OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r541401858", "bodyText": "I vaguely remember I added Files.isDirectory(path) to not miss adding empty directories. (It's not because we wanted to add all the directories leading to /. Maybe missing empty directories doesn't matter in practice almost all the time, especially for jib jar. I wonder if we can just get rid of Files.isDirectory(path) and the new while loop below? As long as it works, we should be good?", "author": "chanseokoh", "createdAt": "2020-12-11T23:20:00Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -251,15 +392,36 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n+    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))", "originalCommit": "97e268c65232e4ec0f9912a8c9ccb7744eb5483e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDQxMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542520413", "bodyText": "Good idea - Tried adding the path directly without adding any empty directories and it seemed to work! Will go with this for now.", "author": "mpeddada1", "createdAt": "2020-12-14T16:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQwMTg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "25dc4312107d027569cd47e2b5d6c0fa018c0702", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex 58cb0b08..4055bec5 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -392,22 +394,12 @@ public class JarModeProcessor {\n       AbsoluteUnixPath basePathInContainer)\n       throws IOException {\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n-    HashSet<Path> addedPaths = new HashSet<>();\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n         .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              Path relativePath = sourceRoot.relativize(path);\n-              Path subPath = relativePath;\n-              while (subPath != null) {\n-                if (!addedPaths.contains(subPath)) {\n-                  builder.addEntry(\n-                      sourceRoot.resolve(subPath), basePathInContainer.resolve(subPath));\n-                  addedPaths.add(subPath);\n-                }\n-                subPath = subPath.getParent();\n-              }\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n"}}, {"oid": "25dc4312107d027569cd47e2b5d6c0fa018c0702", "url": "https://github.com/GoogleContainerTools/jib/commit/25dc4312107d027569cd47e2b5d6c0fa018c0702", "message": "make layer predicates check that the path is not a directory and don't add empty directories to layers", "committedDate": "2020-12-12T22:06:56Z", "type": "commit"}, {"oid": "35a451025510cebff01ebf56c821a5b3069139e9", "url": "https://github.com/GoogleContainerTools/jib/commit/35a451025510cebff01ebf56c821a5b3069139e9", "message": "remove unnecessary helpers from test", "committedDate": "2020-12-12T22:17:18Z", "type": "commit"}, {"oid": "5694697be60090695c5a4001f23fb79e11cab7f6", "url": "https://github.com/GoogleContainerTools/jib/commit/5694697be60090695c5a4001f23fb79e11cab7f6", "message": "add space", "committedDate": "2020-12-12T22:18:18Z", "type": "commit"}, {"oid": "64797b74123e9dde635eb8de1324c956f11a92c2", "url": "https://github.com/GoogleContainerTools/jib/commit/64797b74123e9dde635eb8de1324c956f11a92c2", "message": "formatting", "committedDate": "2020-12-14T16:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDgzMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542574832", "bodyText": "Nit: this should also work:\n    Predicate<Path> isFile = Files::isRegularFile;\nor\n    Predicate<Path> isResourceFile = isClassFile.negate().and(Files::isRegularFile);", "author": "chanseokoh", "createdAt": "2020-12-14T17:37:04Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -95,16 +105,21 @@ static JarType determineJarType(Path jarPath) throws IOException {\n     Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isResourceFile = isClassFile.negate();\n+    Predicate<Path> isFile = path -> path.toFile().isFile();\n+    Predicate<Path> isResourceFile = isFile.and(isClassFile.negate());", "originalCommit": "64797b74123e9dde635eb8de1324c956f11a92c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNTkzNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542625934", "bodyText": "thank you!", "author": "mpeddada1", "createdAt": "2020-12-14T18:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NDgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "12c395aab0a84368890e21f269e6256e3abb0d98", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex 4055bec5..07d67aca 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -105,8 +105,7 @@ public class JarModeProcessor {\n     Path localExplodedJarRoot = tempDirPath;\n     ZipUtil.unzip(jarPath, localExplodedJarRoot);\n     Predicate<Path> isClassFile = path -> path.getFileName().toString().endsWith(\".class\");\n-    Predicate<Path> isFile = path -> path.toFile().isFile();\n-    Predicate<Path> isResourceFile = isFile.and(isClassFile.negate());\n+    Predicate<Path> isResourceFile = isClassFile.negate().and(Files::isRegularFile);\n     FileEntriesLayer classesLayer =\n         addDirectoryContentsToLayer(\n             CLASSES, localExplodedJarRoot, isClassFile, APP_ROOT.resolve(\"explodedJar\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542576221", "bodyText": "Start this with checking a file and remove the AND operation at the caller site?\nPredicate<Path> predicate = Files::isRegularFile;", "author": "chanseokoh", "createdAt": "2020-12-14T17:39:08Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +396,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n             });\n     return builder.build();\n   }\n+\n+  private static Predicate<Path> isInListedDirectoryOrIsSameFile(\n+      List<String> layerContents, Path localExplodedJarRoot) {\n+    Predicate<Path> predicate = Predicates.alwaysFalse();", "originalCommit": "64797b74123e9dde635eb8de1324c956f11a92c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNTc0OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542625749", "bodyText": "hm this method needs to check if the path is in one of the directories listed or if the path is the same as one of the files listed, which requires us to use the or condition. Since checking for a file requires and (we always want to check or this), starting with this predicate is a little challenging. I added it at the end of the method, once all the predicates were checked, but please let me know if I'm missing something here.", "author": "mpeddada1", "createdAt": "2020-12-14T18:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNzQ3NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542627475", "bodyText": "Ah, you're right. Good catch.", "author": "chanseokoh", "createdAt": "2020-12-14T18:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3NjIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "557fc14e51af04d59499e37a753bff4131d41930", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex 4055bec5..5b5c81bc 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -414,6 +412,6 @@ public class JarModeProcessor {\n         predicate = predicate.or(path -> path.equals(localExplodedJarRoot.resolve(pathName)));\n       }\n     }\n-    return predicate;\n+    return predicate.and(Files::isRegularFile);\n   }\n }\n"}}, {"oid": "12c395aab0a84368890e21f269e6256e3abb0d98", "url": "https://github.com/GoogleContainerTools/jib/commit/12c395aab0a84368890e21f269e6256e3abb0d98", "message": "cleaning up predicates", "committedDate": "2020-12-14T18:19:40Z", "type": "commit"}, {"oid": "557fc14e51af04d59499e37a753bff4131d41930", "url": "https://github.com/GoogleContainerTools/jib/commit/557fc14e51af04d59499e37a753bff4131d41930", "message": "moving predicate to check a file to helper", "committedDate": "2020-12-14T18:24:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMzYzOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542633639", "bodyText": "Nit: in this case, I think giving a name pathOnContainer via a variable as in the original code improves readabilty. It's not easy to figure out what basePathInContainer.resolve(sourceRoot.relativize(path)) means.", "author": "chanseokoh", "createdAt": "2020-12-14T18:46:08Z", "path": "jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java", "diffHunk": "@@ -253,13 +394,24 @@ private static FileEntriesLayer addDirectoryContentsToLayer(\n     FileEntriesLayer.Builder builder = FileEntriesLayer.builder().setName(layerName);\n     new DirectoryWalker(sourceRoot)\n         .filterRoot()\n-        .filter(path -> Files.isDirectory(path) || pathFilter.test(path))\n+        .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              AbsoluteUnixPath pathOnContainer =\n-                  basePathInContainer.resolve(sourceRoot.relativize(path));\n-              builder.addEntry(path, pathOnContainer);\n+              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\nindex 5b5c81bc..0f18d10d 100644\n--- a/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n+++ b/jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessor.java\n\n@@ -397,7 +397,9 @@ public class JarModeProcessor {\n         .filter(path -> pathFilter.test(path))\n         .walk(\n             path -> {\n-              builder.addEntry(path, basePathInContainer.resolve(sourceRoot.relativize(path)));\n+              AbsoluteUnixPath pathOnContainer =\n+                  basePathInContainer.resolve(sourceRoot.relativize(path));\n+              builder.addEntry(path, pathOnContainer);\n             });\n     return builder.build();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzODQ3MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542638471", "bodyText": "springBootJar per Google-style\nand can we have a bit more meaningful name than destDir?", "author": "chanseokoh", "createdAt": "2020-12-14T18:50:30Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\nindex 200d0f04..e81bd708 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n\n@@ -146,10 +148,11 @@ public class JarFilesTest {\n   @Test\n   public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n       throws IOException, URISyntaxException, InvalidImageReferenceException {\n-    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n-    Path destDir = temporaryFolder.getRoot().toPath();\n+    Path springBootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path parentTemporaryDirectory = temporaryFolder.getRoot().toPath();\n     JibContainerBuilder containerBuilder =\n-        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+        JarFiles.toJibContainerBuilder(\n+            springBootJar, parentTemporaryDirectory, ProcessingMode.exploded);\n     ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n \n     assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MDMzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542640331", "bodyText": "isEqualTo?", "author": "chanseokoh", "createdAt": "2020-12-14T18:52:05Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java", "diffHunk": "@@ -139,11 +134,167 @@ public void testToJibContainerBuilder_packagedStandard_basicInfo()\n                     AbsoluteUnixPath.get(\"/app/dependency1\"))\n                 .build()\n                 .getEntries());\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"jar\");\n     assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n-        .containsExactlyElementsIn(\n+        .isEqualTo(\n             FileEntriesLayer.builder()\n                 .addEntry(standardJar, AbsoluteUnixPath.get(\"/app/basicStandardJar.jar\"))\n                 .build()\n                 .getEntries());\n   }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(4);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot-dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency3-SNAPSHOT.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency3-SNAPSHOT.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(3).getName()).isEqualTo(\"application\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(3)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"META-INF/MANIFEST.MF\"),\n+                    AbsoluteUnixPath.get(\"/app/META-INF/MANIFEST.MF\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/class1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/class1.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/classes/classDirectory/class2.class\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/classes/classDirectory/class2.class\"))\n+                .build()\n+                .getEntries());\n+  }\n+\n+  @Test\n+  public void testToJibContainerBuilder_explodedNonLayeredSpringBoot_basicInfo()\n+      throws IOException, URISyntaxException, InvalidImageReferenceException {\n+    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_NON_LAYERED).toURI());\n+    Path destDir = temporaryFolder.getRoot().toPath();\n+    JibContainerBuilder containerBuilder =\n+        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+    ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n+\n+    assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n+    assertThat(buildPlan.getPlatforms()).isEqualTo(ImmutableSet.of(new Platform(\"amd64\", \"linux\")));\n+    assertThat(buildPlan.getCreationTime()).isEqualTo(Instant.EPOCH);\n+    assertThat(buildPlan.getFormat()).isEqualTo(ImageFormat.Docker);\n+    assertThat(buildPlan.getEnvironment()).isEmpty();\n+    assertThat(buildPlan.getLabels()).isEmpty();\n+    assertThat(buildPlan.getVolumes()).isEmpty();\n+    assertThat(buildPlan.getExposedPorts()).isEmpty();\n+    assertThat(buildPlan.getUser()).isNull();\n+    assertThat(buildPlan.getWorkingDirectory()).isNull();\n+    assertThat(buildPlan.getEntrypoint())\n+        .isEqualTo(\n+            ImmutableList.of(\"java\", \"-cp\", \"/app\", \"org.springframework.boot.loader.JarLauncher\"));\n+    assertThat(buildPlan.getLayers().size()).isEqualTo(5);\n+\n+    assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo(\"dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(0)).getEntries())\n+        .isEqualTo(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"BOOT-INF/lib/dependency1.jar\"),\n+                    AbsoluteUnixPath.get(\"/app/BOOT-INF/lib/dependency1.jar\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(1).getName()).isEqualTo(\"spring-boot-loader\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(1)).getEntries())\n+        .containsExactlyElementsIn(\n+            FileEntriesLayer.builder()\n+                .addEntry(\n+                    destDir.resolve(\"org/launcher.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/launcher.class\"))\n+                .addEntry(\n+                    destDir.resolve(\"org/orgDirectory/data1.class\"),\n+                    AbsoluteUnixPath.get(\"/app/org/orgDirectory/data1.class\"))\n+                .build()\n+                .getEntries());\n+\n+    assertThat(buildPlan.getLayers().get(2).getName()).isEqualTo(\"snapshot dependencies\");\n+    assertThat(((FileEntriesLayer) buildPlan.getLayers().get(2)).getEntries())\n+        .containsExactlyElementsIn(", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\nindex 200d0f04..e81bd708 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java\n\n@@ -146,10 +148,11 @@ public class JarFilesTest {\n   @Test\n   public void testToJibContainerBuilder_explodedLayeredSpringBoot_basicInfo()\n       throws IOException, URISyntaxException, InvalidImageReferenceException {\n-    Path springbootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n-    Path destDir = temporaryFolder.getRoot().toPath();\n+    Path springBootJar = Paths.get(Resources.getResource(SIMPLE_SPRING_BOOT_LAYERED).toURI());\n+    Path parentTemporaryDirectory = temporaryFolder.getRoot().toPath();\n     JibContainerBuilder containerBuilder =\n-        JarFiles.toJibContainerBuilder(springbootJar, destDir, ProcessingMode.exploded);\n+        JarFiles.toJibContainerBuilder(\n+            springBootJar, parentTemporaryDirectory, ProcessingMode.exploded);\n     ContainerBuildPlan buildPlan = containerBuilder.toContainerBuildPlan();\n \n     assertThat(buildPlan.getBaseImage()).isEqualTo(\"gcr.io/distroless/java\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MzI1MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542643250", "bodyText": "This should go before doing layers.get(0).\nAnd we should also have assertThat(resourcesLayer.getEntries().gietSize()).isEqualTo(1).", "author": "chanseokoh", "createdAt": "2020-12-14T18:54:40Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -70,33 +76,11 @@ public void testCreateLayersForExplodedStandard_emptyJar()\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n         JarModeProcessor.createLayersForExplodedStandard(standardJar, destDir);\n-\n-    assertThat(layers.size()).isEqualTo(2);\n-\n     FileEntriesLayer resourcesLayer = layers.get(0);\n-    FileEntriesLayer classesLayer = layers.get(1);\n \n-    // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n-\n-    // Validate classes layer.\n-    List<AbsoluteUnixPath> actualClassesPath =\n-        classesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualClassesPath)\n-        .containsExactly(AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"));\n+    assertThat(layers.size()).isEqualTo(1);", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 60506053..d587da61 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -76,9 +76,12 @@ public class JarModeProcessorTest {\n     Path destDir = temporaryFolder.newFolder().toPath();\n     List<FileEntriesLayer> layers =\n         JarModeProcessor.createLayersForExplodedStandard(standardJar, destDir);\n-    FileEntriesLayer resourcesLayer = layers.get(0);\n \n     assertThat(layers.size()).isEqualTo(1);\n+\n+    FileEntriesLayer resourcesLayer = layers.get(0);\n+\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(1);\n     assertThat(resourcesLayer.getEntries().get(0).getExtractionPath())\n         .isEqualTo(AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NTg4Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542655882", "bodyText": "Likewise, need to assert the size of getEntries().", "author": "chanseokoh", "createdAt": "2020-12-14T19:04:47Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -129,14 +113,8 @@ public void testCreateLayersForExplodedStandard_withClassPathInManifest()\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency4\")));\n     assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot dependencies\");\n-    assertThat(\n-            snapshotLayer\n-                .getEntries()\n-                .stream()\n-                .map(FileEntry::getExtractionPath)\n-                .collect(Collectors.toList()))\n-        .isEqualTo(\n-            ImmutableList.of(AbsoluteUnixPath.get(\"/app/dependencies/dependency3-SNAPSHOT-1.jar\")));\n+    assertThat(snapshotLayer.getEntries().get(0).getExtractionPath())", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 60506053..d587da61 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -113,6 +116,7 @@ public class JarModeProcessorTest {\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency2\"),\n                 AbsoluteUnixPath.get(\"/app/dependencies/dependency4\")));\n     assertThat(snapshotLayer.getName()).isEqualTo(\"snapshot dependencies\");\n+    assertThat(snapshotLayer.getEntries().size()).isEqualTo(1);\n     assertThat(snapshotLayer.getEntries().get(0).getExtractionPath())\n         .isEqualTo(AbsoluteUnixPath.get(\"/app/dependencies/dependency3-SNAPSHOT-1.jar\"));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NjQ4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2918#discussion_r542656486", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-12-14T19:05:23Z", "path": "jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java", "diffHunk": "@@ -252,16 +210,8 @@ public void testCreateLayersForExplodedStandard_withoutClassPathInManifest_conta\n     FileEntriesLayer classesLayer = layers.get(1);\n \n     // Validate resources layer.\n-    List<AbsoluteUnixPath> actualResourcesPath =\n-        resourcesLayer\n-            .getEntries()\n-            .stream()\n-            .map(FileEntry::getExtractionPath)\n-            .collect(Collectors.toList());\n-    assertThat(actualResourcesPath)\n-        .containsExactly(\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF\"),\n-            AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n+    assertThat(resourcesLayer.getEntries().get(0).getExtractionPath())", "originalCommit": "557fc14e51af04d59499e37a753bff4131d41930", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64e328d1ce669215543d981a3d3125f425c7e7da", "chunk": "diff --git a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\nindex 60506053..d587da61 100644\n--- a/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n+++ b/jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarModeProcessorTest.java\n\n@@ -210,6 +214,7 @@ public class JarModeProcessorTest {\n     FileEntriesLayer classesLayer = layers.get(1);\n \n     // Validate resources layer.\n+    assertThat(resourcesLayer.getEntries().size()).isEqualTo(1);\n     assertThat(resourcesLayer.getEntries().get(0).getExtractionPath())\n         .isEqualTo(AbsoluteUnixPath.get(\"/app/explodedJar/META-INF/MANIFEST.MF\"));\n \n"}}, {"oid": "64e328d1ce669215543d981a3d3125f425c7e7da", "url": "https://github.com/GoogleContainerTools/jib/commit/64e328d1ce669215543d981a3d3125f425c7e7da", "message": "fixing naming and tests", "committedDate": "2020-12-15T01:39:38Z", "type": "commit"}, {"oid": "adac4f70f5b040632adc6d4f79fa6c8afb5c1ff5", "url": "https://github.com/GoogleContainerTools/jib/commit/adac4f70f5b040632adc6d4f79fa6c8afb5c1ff5", "message": "naming", "committedDate": "2020-12-15T01:44:04Z", "type": "commit"}, {"oid": "2a22ae19bd871485bebff8ea3f5951457d9150ba", "url": "https://github.com/GoogleContainerTools/jib/commit/2a22ae19bd871485bebff8ea3f5951457d9150ba", "message": "Merge branch 'master' of github.com:GoogleContainerTools/jib into cli-spring-boot-expl", "committedDate": "2020-12-15T17:24:04Z", "type": "commit"}]}