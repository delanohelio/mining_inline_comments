{"pr_number": 1381, "pr_title": "Bugfix/issue 1377 http request task", "pr_createdAt": "2020-06-12T12:37:40Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1381", "timeline": [{"oid": "e17fbf5c3a7a32f60805962845292b149d4811ce", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e17fbf5c3a7a32f60805962845292b149d4811ce", "message": "Move HttpRequestTask to android and JavaSE folders\n\nremove AsyncTask File from base", "committedDate": "2020-06-10T14:28:40Z", "type": "commit"}, {"oid": "3836a3e3cffe503324450b70e2b64257b8e58ddd", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3836a3e3cffe503324450b70e2b64257b8e58ddd", "message": "Add AsyncTask back and deprecate", "committedDate": "2020-06-11T20:38:58Z", "type": "commit"}, {"oid": "2e90aa87b26e2b2f877a857c3ec001511799ce9b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/2e90aa87b26e2b2f877a857c3ec001511799ce9b", "message": "Deprecate Asynctask", "committedDate": "2020-06-11T20:39:26Z", "type": "commit"}, {"oid": "90ca4873451e4a242b99383708eb4e1e58f88e46", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/90ca4873451e4a242b99383708eb4e1e58f88e46", "message": "Merge branch 'develop' into bugfix/issue_1377_HttpRequestTask", "committedDate": "2020-06-12T17:43:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjk2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1381#discussion_r445136963", "bodyText": "Why do the methods don't have any implementation? I agree that the class should be deprecated. However, it should be an exact copy of the android one for now. Otherwise, it will be a breaking change because the implementation was exposed to the developers who are using JavaSE but now it is not,", "author": "bilal-alsharifi", "createdAt": "2020-06-24T19:58:07Z", "path": "javaSE/src/main/java/com/smartdevicelink/util/HttpRequestTask.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.smartdevicelink.util;\n+", "originalCommit": "90ca4873451e4a242b99383708eb4e1e58f88e46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyNTU4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1381#discussion_r445525583", "bodyText": "Methods implemented", "author": "RHenigan", "createdAt": "2020-06-25T12:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c2bd565c585cacad81156b4599225548be0606c0", "chunk": "diff --git a/javaSE/src/main/java/com/smartdevicelink/util/HttpRequestTask.java b/javaSE/src/main/java/com/smartdevicelink/util/HttpRequestTask.java\nindex a77370db8..6ecc73e6e 100644\n--- a/javaSE/src/main/java/com/smartdevicelink/util/HttpRequestTask.java\n+++ b/javaSE/src/main/java/com/smartdevicelink/util/HttpRequestTask.java\n\n@@ -1,22 +1,183 @@\n package com.smartdevicelink.util;\n \n+import android.os.AsyncTask;\n+import android.util.Log;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+\n @Deprecated\n-public class HttpRequestTask {\n+public class HttpRequestTask extends AsyncTask<String, String, String> {\n+    private static final String TAG = \"Http Request Task\";\n+\n     public static final String REQUEST_TYPE_POST = \"POST\";\n     public static final String REQUEST_TYPE_GET = \"GET\";\n     public static final String REQUEST_TYPE_DELETE = \"DELETE\";\n \n+    HttpRequestTaskCallback cb;\n+\n+    /**\n+     * @param hcb callback for when this task finishes\n+     * <br><br><b> - When calling execute, params as followed: </b><br>\n+     *  1. Url String<br>\n+     *  2. Request type (Defined in this class) REQUEST_TYPE_POST, REQUEST_TYPE_GET, REQUEST_TYPE_DELETE<br>\n+     *  3. (Optional) Data to be sent. <br>\n+     *  4. (Optional) Content Type  Default will be application/json<br>\n+     *  5. (Optional) Accept Type  default will be application/json\n+     *\n+     */\n     @Deprecated\n-    public HttpRequestTask( HttpRequestTaskCallback hcb){ }\n+    public HttpRequestTask( HttpRequestTaskCallback hcb){\n+        this.cb = hcb;\n+    }\n \n     @Deprecated\n     protected String doInBackground(String... params) {\n+        int length = params.length;\n+        String urlString = params[0];\n+        String request_type = params[1];\n+\n+        //Grab and set data to be written if included\n+        String data;\n+        if(length>2){\n+            data = params[2];\n+        }else{\n+            data = null;\n+        }\n+\n+        //Grab and set content type for the header if included\n+        String contentType;\n+        if(length>3){\n+            contentType = params[3];\n+        }else{\n+            contentType = \"application/json\";\n+        }\n+        //Grab and set accept type for the header if included\n+        String acceptType;\n+        if(length>4){\n+            acceptType = params[4];\n+        }else{\n+            acceptType = \"application/json\";\n+        }\n+\n+        if(urlString == null || request_type == null){\n+            Log.e(TAG, \"Can't process request, param error\");\n+            if(cb!=null){\n+                cb.httpFailure(-1);\n+                cb = null;\n+            }\n+            return \"Error\";\n+        }\n+\n+        HttpURLConnection urlConnection = null;\n+        BufferedReader reader = null;\n+        try {\n+            URL url = new URL(urlString);\n+            urlConnection = (HttpURLConnection) url.openConnection();\n+            urlConnection.setDoOutput(true);\n+            urlConnection.setRequestMethod(request_type);\n+            urlConnection.setRequestProperty(\"Content-Type\", contentType);\n+            urlConnection.setRequestProperty(\"Accept\", acceptType);\n+            //If we have data, we should write it out\n+            if(data !=null){\n+                Writer writer = new BufferedWriter(new OutputStreamWriter(urlConnection.getOutputStream(), \"UTF-8\"));\n+                writer.write(data);\n+                writer.close();\n+            }\n+            InputStream inputStream = urlConnection.getInputStream();\n+\n+            int responseCode = urlConnection.getResponseCode();\n+            if (responseCode == 200) { //Success\n+                //input stream\n+                StringBuffer buffer = new StringBuffer();\n+                if (inputStream == null) {\n+                    // Nothing to do.\n+                    if(cb!=null){\n+                        cb.httpCallComplete(null);\n+                        cb = null;\n+                    }\n+                    return null;\n+                }\n+                reader = new BufferedReader(new InputStreamReader(inputStream));\n+\n+                String inputLine;\n+                while ((inputLine = reader.readLine()) != null)\n+                    buffer.append(inputLine).append(\"\\n\");\n+                if (buffer.length() == 0) {\n+                    // Stream was empty. No point in parsing.\n+                    if(cb!=null){\n+                        cb.httpCallComplete(null);\n+                        cb = null;\n+                    }\n+                    return null;\n+                }\n+                String response = null;\n+\n+                response = buffer.toString();\n+                //send to post execute\n+                if(cb!=null){\n+                    cb.httpCallComplete(response);\n+                    cb = null;\n+                }\n+                return response;\n+            }else{\n+                if(cb!=null){\n+                    cb.httpFailure(responseCode);\n+                    cb = null;\n+                }\n+                Log.e(TAG, \"Failed to download file - \" + responseCode);\n+                return null;\n+            }\n+\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } catch (NullPointerException e){ // Only to catch error in urlConnection.getOutputStream() - when servers are down\n+            e.printStackTrace();\n+            urlConnection = null;\n+        }\n+        finally {\n+            if (urlConnection != null) {\n+                urlConnection.disconnect();\n+            }\n+            if (reader != null) {\n+                try {\n+                    reader.close();\n+                } catch (final IOException e) {\n+                    Log.e(TAG, \"Error closing stream\", e);\n+                }\n+            }\n+            if(cb!=null){\n+                cb.httpFailure(-1);\n+            }\n+        }\n         return null;\n     }\n \n+    /**\n+     * Callback interface for HTTP requests.\n+     * @author Joey Grover\n+     *\n+     */\n     @Deprecated\n     public interface HttpRequestTaskCallback{\n+        /**\n+         * Called when HTTP request is successfully completed.\n+         * @param response The response to the HTTP request.\n+         */\n         public abstract void httpCallComplete(String response);\n+        /**\n+         * Called when HTTP request failed.\n+         * @param statusCode The HTTP failure code.\n+         */\n         public abstract void httpFailure(int statusCode);\n     }\n \n"}}, {"oid": "c2bd565c585cacad81156b4599225548be0606c0", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c2bd565c585cacad81156b4599225548be0606c0", "message": "Implement JavaSE Methods", "committedDate": "2020-06-25T12:38:15Z", "type": "commit"}]}