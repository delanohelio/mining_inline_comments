{"pr_number": 1527, "pr_title": "Feature/lockscreen ui testing", "pr_createdAt": "2020-10-13T14:18:22Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527", "timeline": [{"oid": "626adac79f134ec2a3d1da3b16b865d69483ef98", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/626adac79f134ec2a3d1da3b16b865d69483ef98", "message": "Add LockScreen UI tests", "committedDate": "2020-10-12T19:22:21Z", "type": "commit"}, {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c88ee3bf8c6a176f2b696b49ba095476717bfea2", "message": "Merge branch 'release/RC_5.0.0' into feature/lockscreen_ui_testing", "committedDate": "2020-10-12T20:48:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MDU1Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504240557", "bodyText": "Can we add a note to remove that before running the test? currently, it says \"no tests were found\" if I try to manually run the tests in Android studio without removing the@Ignore  annotation", "author": "bilal-alsharifi", "createdAt": "2020-10-13T20:31:30Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore", "originalCommit": "c88ee3bf8c6a176f2b696b49ba095476717bfea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46283864ecf72d0f0b7622966133a94cca50170b", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\nindex 73656dad9..264c4c741 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n\n@@ -48,12 +48,11 @@ import static org.mockito.Mockito.mock;\n //They are ignored for CICD purposes and should be run manually during release testing\n @RunWith(AndroidJUnit4.class)\n @LargeTest\n-@Ignore\n+@Ignore //Remove this annotation before running these tests\n public class SDLLockScreenActivityEspressoTest {\n \n     private OnRPCNotificationListener onDDListener;\n     private OnRPCNotificationListener onHMIListener;\n-    private OnRPCNotificationListener onSystemRequestListener;\n \n     @Rule\n     public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NDU4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504254584", "bodyText": "it doesn't seem that we are doing anything in the onSystemRequestAnswer implemetation. If so, can we remove this onSystemRequestAnswer & onSystemRequestListener?", "author": "bilal-alsharifi", "createdAt": "2020-10-13T20:58:18Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore\n+public class SDLLockScreenActivityEspressoTest {\n+\n+    private OnRPCNotificationListener onDDListener;\n+    private OnRPCNotificationListener onHMIListener;\n+    private OnRPCNotificationListener onSystemRequestListener;\n+\n+    @Rule\n+    public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n+            new ActivityScenarioRule<>(SDLLockScreenActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<SDLLockScreenActivity> intentsTestRule =\n+            new IntentsTestRule<>(SDLLockScreenActivity.class);\n+\n+    @Test\n+    public void test1() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test2() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test3() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test4() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test5() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test6() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test7() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test8() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test9() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    @Test\n+    public void test10() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test11() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test12() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test13() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test14() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test15() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test16() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test17() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test18() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    public void testLockScreenBehavior(final DriverDistractionState dd, final Boolean lockScreenDismissibility, final boolean firstDD, final Boolean previousLockScreenDismissibility, final boolean dismissEnabled) {\n+        LockScreenConfig lockScreenConfig = new LockScreenConfig();\n+        lockScreenConfig.setDisplayMode(LockScreenConfig.DISPLAY_MODE_ALWAYS);\n+        lockScreenConfig.enableDismissGesture(true);\n+        lockScreenConfig.setCustomView(0);\n+        lockScreenConfig.setAppIcon(0);\n+\n+        if (Looper.myLooper() == null) {\n+            Looper.prepare();\n+        }\n+        LockScreenManager lockScreenManager = setupLockScreenManager(lockScreenConfig);\n+\n+        lockScreenManager.start(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                OnHMIStatus onHMIStatus = new OnHMIStatus();\n+                onHMIStatus.setHmiLevel(HMILevel.HMI_FULL);\n+                onHMIListener.onNotified(onHMIStatus);\n+\n+                if (!firstDD) {\n+                    OnDriverDistraction firstOnDriverDistraction = new OnDriverDistraction();\n+                    if (dd == DriverDistractionState.DD_OFF) {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_ON);\n+                    } else {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_OFF);\n+                    }\n+\n+                    if (previousLockScreenDismissibility != null) {\n+                        firstOnDriverDistraction.setLockscreenDismissibility(previousLockScreenDismissibility);\n+                    }\n+\n+                    onDDListener.onNotified(firstOnDriverDistraction);\n+                }\n+\n+                OnDriverDistraction onDriverDistraction = new OnDriverDistraction();\n+                if (lockScreenDismissibility != null) {\n+                    onDriverDistraction.setLockscreenDismissibility(lockScreenDismissibility);\n+                }\n+                onDriverDistraction.setState(dd);\n+                onDDListener.onNotified(onDriverDistraction);\n+\n+\n+                new Handler().postDelayed(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (dismissEnabled) {\n+                            onView(withText(\"Swipe down to dismiss, acknowledging that you are not the driver.\")).check(matches(isDisplayed()));\n+                        } else {\n+                            onView(withText(\"Locked for your safety\")).check(matches(isDisplayed()));\n+                        }\n+\n+                        BroadcastReceiver receiver = new BroadcastReceiver() {\n+                            @Override\n+                            public void onReceive(Context context, Intent intent) {\n+                                if (dismissEnabled) {\n+                                    assertEquals(intent.getAction(), SDLLockScreenActivity.KEY_LOCKSCREEN_DISMISSED);\n+                                } else {\n+                                    //Activity should not be dismissible test failed due to lock screen being dismissed\n+                                    fail();\n+                                }\n+                            }\n+                        };\n+\n+                        intentsTestRule.getActivity().registerReceiver(receiver, new IntentFilter(SDLLockScreenActivity.KEY_LOCKSCREEN_DISMISSED));\n+\n+                        onView(ViewMatchers.withId(R.id.lockscreen_linear_layout)).perform(ViewActions.swipeDown());\n+                    }\n+                }, 1000);\n+            }\n+        });\n+    }\n+\n+    private LockScreenManager setupLockScreenManager(LockScreenConfig lockScreenConfig) {\n+        ISdl internalInterface = mock(ISdl.class);\n+\n+        Answer<Void> onDDStatusAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onDDListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        Answer<Void> onHMIStatusAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onHMIListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        Answer<Void> onSystemRequestAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onSystemRequestListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        doAnswer(onDDStatusAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_DRIVER_DISTRACTION), any(OnRPCNotificationListener.class));\n+        doAnswer(onHMIStatusAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCNotificationListener.class));\n+        doAnswer(onSystemRequestAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_SYSTEM_REQUEST), any(OnRPCNotificationListener.class));", "originalCommit": "c88ee3bf8c6a176f2b696b49ba095476717bfea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46283864ecf72d0f0b7622966133a94cca50170b", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\nindex 73656dad9..264c4c741 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n\n@@ -48,12 +48,11 @@ import static org.mockito.Mockito.mock;\n //They are ignored for CICD purposes and should be run manually during release testing\n @RunWith(AndroidJUnit4.class)\n @LargeTest\n-@Ignore\n+@Ignore //Remove this annotation before running these tests\n public class SDLLockScreenActivityEspressoTest {\n \n     private OnRPCNotificationListener onDDListener;\n     private OnRPCNotificationListener onHMIListener;\n-    private OnRPCNotificationListener onSystemRequestListener;\n \n     @Rule\n     public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0ODc3Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504748776", "bodyText": "can we load these two strings from strings.xml instead of hardcoding them again here?", "author": "bilal-alsharifi", "createdAt": "2020-10-14T14:58:57Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore\n+public class SDLLockScreenActivityEspressoTest {\n+\n+    private OnRPCNotificationListener onDDListener;\n+    private OnRPCNotificationListener onHMIListener;\n+    private OnRPCNotificationListener onSystemRequestListener;\n+\n+    @Rule\n+    public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n+            new ActivityScenarioRule<>(SDLLockScreenActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<SDLLockScreenActivity> intentsTestRule =\n+            new IntentsTestRule<>(SDLLockScreenActivity.class);\n+\n+    @Test\n+    public void test1() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test2() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test3() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test4() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test5() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test6() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test7() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test8() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test9() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    @Test\n+    public void test10() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test11() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test12() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test13() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test14() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test15() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test16() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test17() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test18() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    public void testLockScreenBehavior(final DriverDistractionState dd, final Boolean lockScreenDismissibility, final boolean firstDD, final Boolean previousLockScreenDismissibility, final boolean dismissEnabled) {\n+        LockScreenConfig lockScreenConfig = new LockScreenConfig();\n+        lockScreenConfig.setDisplayMode(LockScreenConfig.DISPLAY_MODE_ALWAYS);\n+        lockScreenConfig.enableDismissGesture(true);\n+        lockScreenConfig.setCustomView(0);\n+        lockScreenConfig.setAppIcon(0);\n+\n+        if (Looper.myLooper() == null) {\n+            Looper.prepare();\n+        }\n+        LockScreenManager lockScreenManager = setupLockScreenManager(lockScreenConfig);\n+\n+        lockScreenManager.start(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                OnHMIStatus onHMIStatus = new OnHMIStatus();\n+                onHMIStatus.setHmiLevel(HMILevel.HMI_FULL);\n+                onHMIListener.onNotified(onHMIStatus);\n+\n+                if (!firstDD) {\n+                    OnDriverDistraction firstOnDriverDistraction = new OnDriverDistraction();\n+                    if (dd == DriverDistractionState.DD_OFF) {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_ON);\n+                    } else {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_OFF);\n+                    }\n+\n+                    if (previousLockScreenDismissibility != null) {\n+                        firstOnDriverDistraction.setLockscreenDismissibility(previousLockScreenDismissibility);\n+                    }\n+\n+                    onDDListener.onNotified(firstOnDriverDistraction);\n+                }\n+\n+                OnDriverDistraction onDriverDistraction = new OnDriverDistraction();\n+                if (lockScreenDismissibility != null) {\n+                    onDriverDistraction.setLockscreenDismissibility(lockScreenDismissibility);\n+                }\n+                onDriverDistraction.setState(dd);\n+                onDDListener.onNotified(onDriverDistraction);\n+\n+\n+                new Handler().postDelayed(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (dismissEnabled) {\n+                            onView(withText(\"Swipe down to dismiss, acknowledging that you are not the driver.\")).check(matches(isDisplayed()));", "originalCommit": "c88ee3bf8c6a176f2b696b49ba095476717bfea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46283864ecf72d0f0b7622966133a94cca50170b", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\nindex 73656dad9..264c4c741 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java\n\n@@ -48,12 +48,11 @@ import static org.mockito.Mockito.mock;\n //They are ignored for CICD purposes and should be run manually during release testing\n @RunWith(AndroidJUnit4.class)\n @LargeTest\n-@Ignore\n+@Ignore //Remove this annotation before running these tests\n public class SDLLockScreenActivityEspressoTest {\n \n     private OnRPCNotificationListener onDDListener;\n     private OnRPCNotificationListener onHMIListener;\n-    private OnRPCNotificationListener onSystemRequestListener;\n \n     @Rule\n     public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n"}}, {"oid": "46283864ecf72d0f0b7622966133a94cca50170b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/46283864ecf72d0f0b7622966133a94cca50170b", "message": "Code Review Changes", "committedDate": "2020-10-14T17:25:22Z", "type": "commit"}]}