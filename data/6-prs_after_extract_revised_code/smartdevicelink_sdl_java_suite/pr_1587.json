{"pr_number": 1587, "pr_title": "[0238] Keyboard Enhancements", "pr_createdAt": "2020-12-13T14:59:08Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587", "timeline": [{"oid": "e845d20ba330237bb65393b7c45d2ea0a4490c19", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e845d20ba330237bb65393b7c45d2ea0a4490c19", "message": "[0238]\n- Implement changes according to the proposal", "committedDate": "2020-12-13T14:54:36Z", "type": "commit"}, {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "message": "[0238]\n- Imports rollback", "committedDate": "2020-12-13T15:02:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4Mjg3MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542482870", "bodyText": "@kostyaBoss I would switch lines 62 and 63 so ENABLE comes before DISABLE.  In this way, throughout the code the ordering will be consistent (you have ENABLE, DISABLE, and then USER_CHOICE).", "author": "santhanamk", "createdAt": "2020-12-14T15:39:23Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.smartdevicelink.test.rpc.enums;\n+\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardInputMask;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class KeyboardInputMaskTests extends TestCase {\n+\n+    /**\n+     * Verifies that the enum values are not null upon valid assignment.\n+     */\n+    public void testValidEnums() {\n+        String example = \"ENABLE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumEnableInputKeyMask = KeyboardInputMask.valueForString(example);\n+        example = \"DISABLE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumDisableInputKeyMask = KeyboardInputMask.valueForString(example);\n+        example = \"USER_CHOICE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumUserChoiceInputKeyMask = KeyboardInputMask.valueForString(example);\n+\n+        assertNotNull(\"ENABLE_INPUT_KEY_MASK returned null\", enumEnableInputKeyMask);\n+        assertNotNull(\"DISABLE_INPUT_KEY_MASK returned null\", enumDisableInputKeyMask);\n+        assertNotNull(\"USER_CHOICE_INPUT_KEY_MASK returned null\", enumUserChoiceInputKeyMask);\n+    }\n+\n+    /**\n+     * Verifies that an invalid assignment is null.\n+     */\n+    public void testInvalidEnum() {\n+        String example = \"ENAablE_INPUT_KEY_MASK\";\n+        try {\n+            KeyboardInputMask temp = KeyboardInputMask.valueForString(example);\n+            assertNull(\"Result of valueForString should be null.\", temp);\n+        } catch (IllegalArgumentException exception) {\n+            fail(\"Invalid enum throws IllegalArgumentException.\");\n+        }\n+    }\n+\n+    /**\n+     * Verifies that a null assignment is invalid.\n+     */\n+    public void testNullEnum() {\n+        String example = null;\n+        try {\n+            KeyboardInputMask temp = KeyboardInputMask.valueForString(example);\n+            assertNull(\"Result of valueForString should be null.\", temp);\n+        } catch (NullPointerException exception) {\n+            fail(\"Null string throws NullPointerException.\");\n+        }\n+    }\n+\n+    /**\n+     * Verifies the possible enum values of MassageCushion.\n+     */\n+    public void testListEnum() {\n+        List<KeyboardInputMask> enumValueList = Arrays.asList(KeyboardInputMask.values());\n+\n+        List<KeyboardInputMask> enumTestList = new ArrayList<KeyboardInputMask>();\n+        enumTestList.add(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java\nindex 5b4df965e..66cee940c 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java\n\n@@ -59,8 +59,8 @@ public class KeyboardInputMaskTests extends TestCase {\n         List<KeyboardInputMask> enumValueList = Arrays.asList(KeyboardInputMask.values());\n \n         List<KeyboardInputMask> enumTestList = new ArrayList<KeyboardInputMask>();\n-        enumTestList.add(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n         enumTestList.add(KeyboardInputMask.ENABLE_INPUT_KEY_MASK);\n+        enumTestList.add(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n         enumTestList.add(KeyboardInputMask.USER_CHOICE_INPUT_KEY_MASK);\n \n         assertTrue(\"Enum value list does not match enum class list\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NTczNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542485735", "bodyText": "@kostyaBoss You can remove the unused import on line 3.", "author": "santhanamk", "createdAt": "2020-12-14T15:42:45Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\nindex d6f621238..5c25fed6c 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n\n@@ -1,11 +1,7 @@\n package com.smartdevicelink.test.rpc.datatypes;\n \n-import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n-import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;\n import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeQualificationStatus;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeStatus;\n import com.smartdevicelink.test.JsonUtils;\n import com.smartdevicelink.test.TestValues;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NTg1Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542485853", "bodyText": "@kostyaBoss You can remove the unused import on line 5.", "author": "santhanamk", "createdAt": "2020-12-14T15:42:54Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\nindex d6f621238..5c25fed6c 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n\n@@ -1,11 +1,7 @@\n package com.smartdevicelink.test.rpc.datatypes;\n \n-import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n-import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;\n import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeQualificationStatus;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeStatus;\n import com.smartdevicelink.test.JsonUtils;\n import com.smartdevicelink.test.TestValues;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NjA5Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542486092", "bodyText": "@kostyaBoss You can remove the unused imports on lines 7 and 8.", "author": "santhanamk", "createdAt": "2020-12-14T15:43:12Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.proxy.rpc.enums.PowerModeQualificationStatus;", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\nindex d6f621238..5c25fed6c 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java\n\n@@ -1,11 +1,7 @@\n package com.smartdevicelink.test.rpc.datatypes;\n \n-import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n-import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;\n import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeQualificationStatus;\n-import com.smartdevicelink.proxy.rpc.enums.PowerModeStatus;\n import com.smartdevicelink.test.JsonUtils;\n import com.smartdevicelink.test.TestValues;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxMzk4OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542813989", "bodyText": "@kostyaBoss I would suggest deleting lines 134-137.  It is correct since it is generated by the code generator tool, but it is out of scope of the PR.", "author": "santhanamk", "createdAt": "2020-12-14T21:32:09Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,18 +102,53 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>maskInputCharacters</td>\r\n+ *\t\t\t<td>KeyboardInputMask</td>\r\n+ *\t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td></td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ *\t\t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>customizeKeys</td>\r\n+ *\t\t\t<td>List<String></td>\r\n+ *\t\t\t<td>Array of special characters to show in customizable Keys.If omitted, keyboard will showdefault special characters</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td>{\"array_min_size\": 1, \"array_max_size\": 10, \"string_min_length\": 1, \"string_max_length\": 1}</td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ * \t\t</tr>\r\n  *  </table>\r\n  *\r\n- * @since SmartDeviceLink 3.0\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n \r\n public class KeyboardProperties extends RPCStruct {\r\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n+    /**\r\n+     * @since SmartDeviceLink 3.0.0\r", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 3ec3d7707..a4a6c0932 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -131,15 +131,8 @@ public class KeyboardProperties extends RPCStruct {\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\n-    /**\n-     * @since SmartDeviceLink 3.0.0\n-     * @deprecated in SmartDeviceLink 6.0.0\n-     */\n     @Deprecated\n     public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\n-    /**\n-     * @since SmartDeviceLink 6.0.0\n-     */\n     public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\n     /**\n      * @since SmartDeviceLink 7.1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNDYyNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542814626", "bodyText": "@kostyaBoss I would suggest deleting lines140-142.  It is correct since it is generated by the code generator tool, but it is out of scope of the PR.", "author": "santhanamk", "createdAt": "2020-12-14T21:32:36Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,18 +102,53 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>maskInputCharacters</td>\r\n+ *\t\t\t<td>KeyboardInputMask</td>\r\n+ *\t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td></td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ *\t\t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>customizeKeys</td>\r\n+ *\t\t\t<td>List<String></td>\r\n+ *\t\t\t<td>Array of special characters to show in customizable Keys.If omitted, keyboard will showdefault special characters</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td>{\"array_min_size\": 1, \"array_max_size\": 10, \"string_min_length\": 1, \"string_max_length\": 1}</td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ * \t\t</tr>\r\n  *  </table>\r\n  *\r\n- * @since SmartDeviceLink 3.0\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n \r\n public class KeyboardProperties extends RPCStruct {\r\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n+    /**\r\n+     * @since SmartDeviceLink 3.0.0\r\n+     * @deprecated in SmartDeviceLink 6.0.0\r\n+     */\r\n     @Deprecated\r\n     public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\r\n+    /**\r", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 3ec3d7707..a4a6c0932 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -131,15 +131,8 @@ public class KeyboardProperties extends RPCStruct {\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\n-    /**\n-     * @since SmartDeviceLink 3.0.0\n-     * @deprecated in SmartDeviceLink 6.0.0\n-     */\n     @Deprecated\n     public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\n-    /**\n-     * @since SmartDeviceLink 6.0.0\n-     */\n     public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\n     /**\n      * @since SmartDeviceLink 7.1.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNzY5Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542817697", "bodyText": "@kostyaBoss Lines 312-359 are good.  I would suggest removing anything unrelated to this that you have added.\n(For example lines 303-306, 290-293, etc.).", "author": "santhanamk", "createdAt": "2020-12-14T21:35:14Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -196,23 +285,76 @@ public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\n     }\r\n \r\n     /**\r\n-     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types.\r\n+     * Gets the autoCompleteList.\r\n      *\r\n-     * @return List<String> representing the suggestions list\r\n+     * @return List<String> Allows an app to pre-populate the text field with a list of suggested or completed entries\r\n+     * as the user types. If empty, the auto-complete list will be removed from the screen.\r\n+     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\r\n+     * @since SmartDeviceLink 6.0.0\r\n      */\r\n+    @SuppressWarnings(\"unchecked\")\r\n     public List<String> getAutoCompleteList() {\r\n         return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\r\n     }\r\n \r\n     /**\r\n-     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\r\n+     * Sets the autoCompleteList.\r\n      *\r\n-     * @param autoCompleteList List<String> representing the suggestions list\r\n+     * @param autoCompleteList Allows an app to pre-populate the text field with a list of suggested or completed entries\r\n+     * as the user types. If empty, the auto-complete list will be removed from the screen.\r\n+     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\r\n+     * @since SmartDeviceLink 6.0.0\r\n      */\r\n     public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\r\n         setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\r\n         return this;\r\n     }\r\n+\r", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 3ec3d7707..a4a6c0932 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -285,25 +225,20 @@ public class KeyboardProperties extends RPCStruct {\n     }\n \n     /**\n-     * Gets the autoCompleteList.\n+     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\n+     * completed entries as the user types.\n      *\n-     * @return List<String> Allows an app to pre-populate the text field with a list of suggested or completed entries\n-     * as the user types. If empty, the auto-complete list will be removed from the screen.\n-     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\n-     * @since SmartDeviceLink 6.0.0\n+     * @return List<String> representing the suggestions list\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public List<String> getAutoCompleteList() {\n         return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\n     }\n \n     /**\n-     * Sets the autoCompleteList.\n+     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\n+     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\n      *\n-     * @param autoCompleteList Allows an app to pre-populate the text field with a list of suggested or completed entries\n-     * as the user types. If empty, the auto-complete list will be removed from the screen.\n-     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\n-     * @since SmartDeviceLink 6.0.0\n+     * @param autoCompleteList List<String> representing the suggestions list\n      */\n     public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\n         setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyODE5Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542828193", "bodyText": "@kostyaBoss On line 471 I would rename this to GENERAL_KEYBOARD_INPUT_MASK", "author": "santhanamk", "createdAt": "2020-12-14T21:45:13Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java", "diffHunk": "@@ -464,6 +468,10 @@\n     public static final List<Turn> GENERAL_TURN_LIST = new ArrayList<Turn>();\n     public static final List<Choice> GENERAL_CHOICE_LIST = new ArrayList<Choice>();\n     public static final List<String> GENERAL_STRING_LIST = Arrays.asList(new String[]{\"a\", \"b\"});\n+    public static final KeyboardInputMask GENERAL_MASK_CHARACTERS = KeyboardInputMask.ENABLE_INPUT_KEY_MASK;", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java\nindex 8650a172c..614bc9168 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java\n\n@@ -468,7 +468,7 @@ public class TestValues {\n     public static final List<Turn> GENERAL_TURN_LIST = new ArrayList<Turn>();\n     public static final List<Choice> GENERAL_CHOICE_LIST = new ArrayList<Choice>();\n     public static final List<String> GENERAL_STRING_LIST = Arrays.asList(new String[]{\"a\", \"b\"});\n-    public static final KeyboardInputMask GENERAL_MASK_CHARACTERS = KeyboardInputMask.ENABLE_INPUT_KEY_MASK;\n+    public static final KeyboardInputMask GENERAL_KEYBOARD_INPUT_MASK = KeyboardInputMask.ENABLE_INPUT_KEY_MASK;\n     public static final ConfigurableKeyboards GENERAL_CONFIGURABLE_KEYBOARDS = new ConfigurableKeyboards();\n     public static final List<KeyboardLayout> GENERAL_KEYBOARD_LAYOUT_LIST = Arrays.asList(GENERAL_KEYBOARDLAYOUT, GENERAL_KEYBOARDLAYOUT);\n     public static final List<ConfigurableKeyboards> GENERAL_CONFIGURABLE_KEYBOARDS_LIST = new ArrayList<ConfigurableKeyboards>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1NDEyOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542954129", "bodyText": "@kostyaBoss On line 102 in the if statement you need to add: || key.equals(KeyboardProperties.KEY_CUSTOMIZE_KEYS) as a clause in the conditional.\nSo the if would look like: if (key.equals(KeyboardProperties.KEY_LIMITED_CHARACTER_LIST) || key.equals(KeyboardProperties.KEY_AUTO_COMPLETE_LIST) || key.equals(KeyboardProperties.KEY_CUSTOMIZE_KEYS))", "author": "santhanamk", "createdAt": "2020-12-15T00:33:24Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java", "diffHunk": "@@ -81,6 +90,8 @@ public void testJson() {\n             reference.put(KeyboardProperties.KEY_KEYPRESS_MODE, TestValues.GENERAL_KEYPRESSMODE);\n             reference.put(KeyboardProperties.KEY_LANGUAGE, TestValues.GENERAL_LANGUAGE);\n             reference.put(KeyboardProperties.KEY_LIMITED_CHARACTER_LIST, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n+            reference.put(KeyboardProperties.KEY_CUSTOMIZE_KEYS, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n+            reference.put(KeyboardProperties.KEY_MASK_INPUT_CHARACTERS, TestValues.GENERAL_MASK_CHARACTERS);\n \n             JSONObject underTest = msg.serializeJSON();\n             assertEquals(TestValues.MATCH, reference.length(), underTest.length());", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java\nindex 95f184ada..55a2d728a 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java\n\n@@ -91,7 +91,7 @@ public class KeyboardPropertiesTests extends TestCase {\n             reference.put(KeyboardProperties.KEY_LANGUAGE, TestValues.GENERAL_LANGUAGE);\n             reference.put(KeyboardProperties.KEY_LIMITED_CHARACTER_LIST, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n             reference.put(KeyboardProperties.KEY_CUSTOMIZE_KEYS, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n-            reference.put(KeyboardProperties.KEY_MASK_INPUT_CHARACTERS, TestValues.GENERAL_MASK_CHARACTERS);\n+            reference.put(KeyboardProperties.KEY_MASK_INPUT_CHARACTERS, TestValues.GENERAL_KEYBOARD_INPUT_MASK);\n \n             JSONObject underTest = msg.serializeJSON();\n             assertEquals(TestValues.MATCH, reference.length(), underTest.length());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1ODU3NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542958574", "bodyText": "@kostyaBoss Lines 61-68 are good.  You can revert the other formatting changes in this file, since they don't relate to the PR.", "author": "santhanamk", "createdAt": "2020-12-15T00:45:27Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java", "diffHunk": "@@ -30,35 +30,42 @@\n  * POSSIBILITY OF SUCH DAMAGE.\r\n  */\r\n package com.smartdevicelink.proxy.rpc.enums;\r\n-\r\n /**\r\n  * Enumeration listing possible keyboard events.\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n public enum KeyboardEvent {\r\n-    /**\r\n-     * The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\r\n-     */\r\n+\t/** The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\r\n+\t *\r\n+\t */\r\n \r\n     KEYPRESS,\r\n-    /**\r\n-     * The User has finished entering text from the keyboard and submitted the entry.\r\n+    /** The User has finished entering text from the keyboard and submitted the entry.\r\n+     *\r\n      */\r\n \r\n     ENTRY_SUBMITTED,\r\n-    /**\r\n-     * The User has pressed the HMI-defined \"Cancel\" button.\r\n+    /** The User has pressed the HMI-defined \"Cancel\" button.\r\n+     *\r\n      */\r\n \r\n     ENTRY_CANCELLED,\r\n-    /**\r\n-     * The User has not finished entering text and the keyboard is aborted with the event of higher priority.\r\n+    /** The User has not finished entering text and the keyboard is aborted with the event of higher priority.\r\n+     *\r\n      */\r\n     ENTRY_ABORTED,\r\n     /**\r\n      * @since SmartDeviceLink 4.0\r\n      */\r\n     ENTRY_VOICE,\r\n-    ;\r\n+    /**\r", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java\nindex 892f72fff..a54d247a6 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java\n\n@@ -30,28 +30,28 @@\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n package com.smartdevicelink.proxy.rpc.enums;\n+\n /**\n  * Enumeration listing possible keyboard events.\n- * @since SmartDeviceLink 3.0.0\n  */\n public enum KeyboardEvent {\n-\t/** The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\n-\t *\n-\t */\n+    /**\n+     * The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\n+     */\n \n     KEYPRESS,\n-    /** The User has finished entering text from the keyboard and submitted the entry.\n-     *\n+    /**\n+     * The User has finished entering text from the keyboard and submitted the entry.\n      */\n \n     ENTRY_SUBMITTED,\n-    /** The User has pressed the HMI-defined \"Cancel\" button.\n-     *\n+    /**\n+     * The User has pressed the HMI-defined \"Cancel\" button.\n      */\n \n     ENTRY_CANCELLED,\n-    /** The User has not finished entering text and the keyboard is aborted with the event of higher priority.\n-     *\n+    /**\n+     * The User has not finished entering text and the keyboard is aborted with the event of higher priority.\n      */\n     ENTRY_ABORTED,\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDQ4OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974488", "bodyText": "@kostyaBoss I would remove lines 59-61 since it is not part of the proposal's XML.", "author": "santhanamk", "createdAt": "2020-12-15T01:26:48Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NTk3Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r546885972", "bodyText": "@santanamk, This file is new and introduced in the XML related. Do we still need to rollback (these changes are from the generator)", "author": "kboskin", "createdAt": "2020-12-21T19:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzQ2NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547553464", "bodyText": "@kostyaBoss So I went through the KeyboardCapabilities.java file and the only differences I see is (when comparing my generated file with yours) is in a few places you have added the @ s i n c e SmartDeviceLink 7.1.0 where the generator didn't generate it.  I think this is okay.  You don't need to change anything.", "author": "santhanamk", "createdAt": "2020-12-22T23:20:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex 75939b7cb..aefa55ac3 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDY3NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974675", "bodyText": "@kostyaBoss I would remove lines 87-89 since it is not part of the proposal's XML.", "author": "santhanamk", "createdAt": "2020-12-15T01:27:16Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NjA1OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r546886058", "bodyText": "@santanamk, This file is new and introduced in the XML related. Do we still need to rollback (these changes are from the generator)", "author": "kboskin", "createdAt": "2020-12-21T19:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzQ5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547553494", "bodyText": "@kostyaBoss So I went through the KeyboardCapabilities.java file and the only differences I see is (when comparing my generated file with yours) is in a few places you have added the @ s i n c e SmartDeviceLink 7.1.0 where the generator didn't generate it.  I think this is okay.  You don't need to change anything.", "author": "santhanamk", "createdAt": "2020-12-22T23:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex 75939b7cb..aefa55ac3 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDg2Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974866", "bodyText": "@kostyaBoss I would remove line 119 since it is not part of the proposal's XML.", "author": "santhanamk", "createdAt": "2020-12-15T01:27:46Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_SUPPORTED_KEYBOARD_LAYOUTS = \"supportedKeyboardLayouts\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_CONFIGURABLE_KEYS = \"configurableKeys\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NjE5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r546886194", "bodyText": "@santanamk, This file is new and introduced in the XML related. Do we still need to rollback (these changes are from the generator)", "author": "kboskin", "createdAt": "2020-12-21T19:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzUwOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547553509", "bodyText": "@kostyaBoss So I went through the KeyboardCapabilities.java file and the only differences I see is (when comparing my generated file with yours) is in a few places you have added the @ s i n c e SmartDeviceLink 7.1.0 where the generator didn't generate it.  I think this is okay.  You don't need to change anything.", "author": "santhanamk", "createdAt": "2020-12-22T23:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex 75939b7cb..aefa55ac3 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDk2Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974966", "bodyText": "@kostyaBoss I would remove line 131 since it is not part of the proposal's XML.", "author": "santhanamk", "createdAt": "2020-12-15T01:28:08Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_SUPPORTED_KEYBOARD_LAYOUTS = \"supportedKeyboardLayouts\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_CONFIGURABLE_KEYS = \"configurableKeys\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardCapabilities setMaskInputCharactersSupported(Boolean maskInputCharactersSupported) {\n+        setValue(KEY_MASK_INPUT_CHARACTERS_SUPPORTED, maskInputCharactersSupported);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maskInputCharactersSupported.\n+     *\n+     * @return Boolean Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NjI1Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r546886252", "bodyText": "@santanamk, This file is new and introduced in the XML related. Do we still need to rollback (these changes are from the generator)", "author": "kboskin", "createdAt": "2020-12-21T19:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1MzUyNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547553524", "bodyText": "@kostyaBoss So I went through the KeyboardCapabilities.java file and the only differences I see is (when comparing my generated file with yours) is in a few places you have added the @ s i n c e SmartDeviceLink 7.1.0 where the generator didn't generate it.  I think this is okay.  You don't need to change anything.", "author": "santhanamk", "createdAt": "2020-12-22T23:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex 75939b7cb..aefa55ac3 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542978246", "bodyText": "@kostyaBoss Do you need to uncomment lines 81-91 for the KEY_SUPPORTED_KEYBOARD_LAYOUTS?", "author": "santhanamk", "createdAt": "2020-12-15T01:36:46Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.marshal.JsonRPCMarshaller;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.KeyboardCapabilities;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.test.JsonUtils;\n+import com.smartdevicelink.test.TestValues;\n+import com.smartdevicelink.test.Validator;\n+\n+import junit.framework.TestCase;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class KeyboardCapabilitiesTests extends TestCase {\n+    private KeyboardCapabilities msg;\n+\n+    @Override\n+    public void setUp() {\n+        msg = new KeyboardCapabilities();\n+\n+        msg.setConfigurableKeys(TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST);\n+        msg.setMaskInputCharactersSupported(TestValues.GENERAL_BOOLEAN);\n+        msg.setSupportedKeyboardLayouts(TestValues.GENERAL_KEYBOARD_LAYOUT_LIST);\n+    }\n+\n+    /**\n+     * Tests the expected values of the RPC message.\n+     */\n+    public void testRpcValues() {\n+        // Test Values\n+        List<ConfigurableKeyboards> configurableKeyboards = msg.getConfigurableKeys();\n+        Boolean maskInputCharactersSupported = msg.getMaskInputCharactersSupported();\n+        List<KeyboardLayout> keyboardLayouts = msg.getSupportedKeyboardLayouts();\n+\n+        // Valid Tests\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST, configurableKeyboards);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_BOOLEAN, (boolean) maskInputCharactersSupported);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_KEYBOARD_LAYOUT_LIST, keyboardLayouts);\n+\n+        // Invalid/Null Tests\n+        KeyboardCapabilities msg = new KeyboardCapabilities();\n+        assertNotNull(TestValues.NOT_NULL, msg);\n+\n+        // Keypress mode is created in the object constructor\n+        assertNull(TestValues.NULL, msg.getConfigurableKeys());\n+        assertNull(TestValues.NULL, msg.getMaskInputCharactersSupported());\n+        assertNull(TestValues.NULL, msg.getSupportedKeyboardLayouts());\n+    }\n+\n+    public void testJson() {\n+        JSONObject reference = new JSONObject();\n+\n+        try {\n+            reference.put(KeyboardCapabilities.KEY_CONFIGURABLE_KEYS, TestValues.JSON_CONFIGURABLE_KEYBOARDS_LIST);\n+            reference.put(KeyboardCapabilities.KEY_MASK_INPUT_CHARACTERS_SUPPORTED, TestValues.GENERAL_BOOLEAN);\n+            reference.put(KeyboardCapabilities.KEY_SUPPORTED_KEYBOARD_LAYOUTS, TestValues.JSON_KEYBOARDS_LAYOUTS_LIST);\n+\n+            JSONObject underTest = msg.serializeJSON();\n+            assertEquals(TestValues.MATCH, reference.length(), underTest.length());\n+\n+            Iterator<?> iterator = reference.keys();\n+            while (iterator.hasNext()) {\n+                String key = (String) iterator.next();\n+                if (key.equals(KeyboardCapabilities.KEY_CONFIGURABLE_KEYS)) {\n+                    JSONArray referenceArray = JsonUtils.readJsonArrayFromJsonObject(reference, key);\n+                    JSONArray underTestArray = JsonUtils.readJsonArrayFromJsonObject(underTest, key);\n+                    assertEquals(TestValues.MATCH, referenceArray.length(), underTestArray.length());\n+\n+                    for (int i = 0; i < referenceArray.length(); i++) {\n+                        Hashtable<String, Object> hashReference = JsonRPCMarshaller.deserializeJSONObject(referenceArray.getJSONObject(i));\n+                        Hashtable<String, Object> hashTest = JsonRPCMarshaller.deserializeJSONObject(underTestArray.getJSONObject(i));\n+                        assertTrue(TestValues.TRUE, Validator.validateConfigurableKeyboards(new ConfigurableKeyboards(hashReference), new ConfigurableKeyboards(hashTest)));\n+                    }\n+                }/* else if (key.equals(KeyboardCapabilities.KEY_SUPPORTED_KEYBOARD_LAYOUTS)) {", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NzI2MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r546887261", "bodyText": "@santanamk, thanks for bringing this up. I will delete, the layouts test case is covered by the final else branch", "author": "kboskin", "createdAt": "2020-12-21T19:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\nindex f0b77329a..86494bfde 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\n\n@@ -48,7 +48,6 @@ public class KeyboardCapabilitiesTests extends TestCase {\n         KeyboardCapabilities msg = new KeyboardCapabilities();\n         assertNotNull(TestValues.NOT_NULL, msg);\n \n-        // Keypress mode is created in the object constructor\n         assertNull(TestValues.NULL, msg.getConfigurableKeys());\n         assertNull(TestValues.NULL, msg.getMaskInputCharactersSupported());\n         assertNull(TestValues.NULL, msg.getSupportedKeyboardLayouts());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODUzMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542978533", "bodyText": "@kostyaBoss Do you need this comment on line 51?", "author": "santhanamk", "createdAt": "2020-12-15T01:37:32Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.marshal.JsonRPCMarshaller;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.KeyboardCapabilities;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.test.JsonUtils;\n+import com.smartdevicelink.test.TestValues;\n+import com.smartdevicelink.test.Validator;\n+\n+import junit.framework.TestCase;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class KeyboardCapabilitiesTests extends TestCase {\n+    private KeyboardCapabilities msg;\n+\n+    @Override\n+    public void setUp() {\n+        msg = new KeyboardCapabilities();\n+\n+        msg.setConfigurableKeys(TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST);\n+        msg.setMaskInputCharactersSupported(TestValues.GENERAL_BOOLEAN);\n+        msg.setSupportedKeyboardLayouts(TestValues.GENERAL_KEYBOARD_LAYOUT_LIST);\n+    }\n+\n+    /**\n+     * Tests the expected values of the RPC message.\n+     */\n+    public void testRpcValues() {\n+        // Test Values\n+        List<ConfigurableKeyboards> configurableKeyboards = msg.getConfigurableKeys();\n+        Boolean maskInputCharactersSupported = msg.getMaskInputCharactersSupported();\n+        List<KeyboardLayout> keyboardLayouts = msg.getSupportedKeyboardLayouts();\n+\n+        // Valid Tests\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST, configurableKeyboards);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_BOOLEAN, (boolean) maskInputCharactersSupported);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_KEYBOARD_LAYOUT_LIST, keyboardLayouts);\n+\n+        // Invalid/Null Tests\n+        KeyboardCapabilities msg = new KeyboardCapabilities();\n+        assertNotNull(TestValues.NOT_NULL, msg);\n+\n+        // Keypress mode is created in the object constructor", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\nindex f0b77329a..86494bfde 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java\n\n@@ -48,7 +48,6 @@ public class KeyboardCapabilitiesTests extends TestCase {\n         KeyboardCapabilities msg = new KeyboardCapabilities();\n         assertNotNull(TestValues.NOT_NULL, msg);\n \n-        // Keypress mode is created in the object constructor\n         assertNull(TestValues.NULL, msg.getConfigurableKeys());\n         assertNull(TestValues.NULL, msg.getMaskInputCharactersSupported());\n         assertNull(TestValues.NULL, msg.getSupportedKeyboardLayouts());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MTM4OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542981388", "bodyText": "@kostyaBoss On line 3944 I would rename the parameters to keyboardCapabilities1 and keyboardCapabilities2.", "author": "santhanamk", "createdAt": "2020-12-15T01:45:21Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java", "diffHunk": "@@ -3929,4 +3930,56 @@ public static boolean validateStabilityControlStatus(VehicleDataResult status1,\n         }\n         return status1.getDataType().equals(status2.getDataType()) && status1.getResultCode().equals(status2.getResultCode());\n     }\n+\n+    public static boolean validateConfigurableKeyboards(ConfigurableKeyboards keyboard1, ConfigurableKeyboards keyboard2) {\n+        if (keyboard1 == null) {\n+            return (keyboard2 == null);\n+        }\n+        if (keyboard2 == null) {\n+            return (keyboard1 == null);\n+        }\n+        return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n+    }\n+\n+    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\nindex 63d7313b1..87beb1ce8 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\n\n@@ -3941,19 +3941,19 @@ public class Validator {\n         return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n     }\n \n-    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {\n-        if (keyboard1 == null) {\n-            return (keyboard2 == null);\n+    public static boolean validateKeyboardCapabilities(KeyboardCapabilities keyboardCapabilities1, KeyboardCapabilities keyboardCapabilities2) {\n+        if (keyboardCapabilities1 == null) {\n+            return (keyboardCapabilities2 == null);\n         }\n-        if (keyboard2 == null) {\n-            return (keyboard1 == null);\n+        if (keyboardCapabilities2 == null) {\n+            return (keyboardCapabilities1 == null);\n         }\n         boolean layoutsEqual = true;\n \n-        if (keyboard1.getSupportedKeyboardLayouts() != null && keyboard2.getSupportedKeyboardLayouts() != null) {\n+        if (keyboardCapabilities1.getSupportedKeyboardLayouts() != null && keyboardCapabilities2.getSupportedKeyboardLayouts() != null) {\n \n-            for (KeyboardLayout layout1 : keyboard1.getSupportedKeyboardLayouts()) {\n-                for (KeyboardLayout layout2 : keyboard2.getSupportedKeyboardLayouts()) {\n+            for (KeyboardLayout layout1 : keyboardCapabilities1.getSupportedKeyboardLayouts()) {\n+                for (KeyboardLayout layout2 : keyboardCapabilities2.getSupportedKeyboardLayouts()) {\n                     if (!layout1.equals(layout2)) {\n                         layoutsEqual = false;\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MTc2OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542981768", "bodyText": "@kostyaBoss I would rename the function on line 3944 to validateKeyboardCapabilities.", "author": "santhanamk", "createdAt": "2020-12-15T01:46:23Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java", "diffHunk": "@@ -3929,4 +3930,56 @@ public static boolean validateStabilityControlStatus(VehicleDataResult status1,\n         }\n         return status1.getDataType().equals(status2.getDataType()) && status1.getResultCode().equals(status2.getResultCode());\n     }\n+\n+    public static boolean validateConfigurableKeyboards(ConfigurableKeyboards keyboard1, ConfigurableKeyboards keyboard2) {\n+        if (keyboard1 == null) {\n+            return (keyboard2 == null);\n+        }\n+        if (keyboard2 == null) {\n+            return (keyboard1 == null);\n+        }\n+        return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n+    }\n+\n+    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {", "originalCommit": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\nindex 63d7313b1..87beb1ce8 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java\n\n@@ -3941,19 +3941,19 @@ public class Validator {\n         return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n     }\n \n-    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {\n-        if (keyboard1 == null) {\n-            return (keyboard2 == null);\n+    public static boolean validateKeyboardCapabilities(KeyboardCapabilities keyboardCapabilities1, KeyboardCapabilities keyboardCapabilities2) {\n+        if (keyboardCapabilities1 == null) {\n+            return (keyboardCapabilities2 == null);\n         }\n-        if (keyboard2 == null) {\n-            return (keyboard1 == null);\n+        if (keyboardCapabilities2 == null) {\n+            return (keyboardCapabilities1 == null);\n         }\n         boolean layoutsEqual = true;\n \n-        if (keyboard1.getSupportedKeyboardLayouts() != null && keyboard2.getSupportedKeyboardLayouts() != null) {\n+        if (keyboardCapabilities1.getSupportedKeyboardLayouts() != null && keyboardCapabilities2.getSupportedKeyboardLayouts() != null) {\n \n-            for (KeyboardLayout layout1 : keyboard1.getSupportedKeyboardLayouts()) {\n-                for (KeyboardLayout layout2 : keyboard2.getSupportedKeyboardLayouts()) {\n+            for (KeyboardLayout layout1 : keyboardCapabilities1.getSupportedKeyboardLayouts()) {\n+                for (KeyboardLayout layout2 : keyboardCapabilities2.getSupportedKeyboardLayouts()) {\n                     if (!layout1.equals(layout2)) {\n                         layoutsEqual = false;\n                         break;\n"}}, {"oid": "a277562efdfeaa3e5ab0e7f113a71fc63626d001", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a277562efdfeaa3e5ab0e7f113a71fc63626d001", "message": "[0238]\n- Implement manager updates", "committedDate": "2020-12-17T12:31:07Z", "type": "commit"}, {"oid": "55ec1e14f665d206f44a5e02301688f28d4c65dd", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/55ec1e14f665d206f44a5e02301688f28d4c65dd", "message": "[0238]\n- Rollback of the empty method", "committedDate": "2020-12-17T12:31:50Z", "type": "commit"}, {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f841c3a59fca7d33848420fdb0b390c6c3120563", "message": "[0298]\n- Fix pr comments", "committedDate": "2020-12-21T19:37:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NTA0OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547555048", "bodyText": "@kostyaBoss On line 88 I would rename this to onKeyboardInputMaskHasChanged().", "author": "santhanamk", "createdAt": "2020-12-22T23:25:52Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java", "diffHunk": "@@ -84,4 +84,6 @@\n      * @param currentInputText - The user's full current input text\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n+\n+    void onMaskHasChanged(KeyboardEvent event);", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\nindex 68fa55432..ad53645e0 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\n\n@@ -85,5 +85,5 @@ public interface KeyboardListener {\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n \n-    void onMaskHasChanged(KeyboardEvent event);\n+    void onKeyboardInputMaskHasChanged(KeyboardEvent event);\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NzgyMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547557822", "bodyText": "@kostyaBoss Since these enums were most recently added I would move the else if block on lines 341-342 below the last else if (around lines 362-363).", "author": "santhanamk", "createdAt": "2020-12-22T23:36:02Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java", "diffHunk": "@@ -338,6 +338,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\nindex aee1dc90f..2355b7e66 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\n\n@@ -338,8 +338,6 @@ class PresentChoiceSetOperation extends Task {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n-                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n-                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {\n                     // Notify of Keypress\n                     keyboardListener.updateAutocompleteWithInput(onKeyboard.getData(), new KeyboardAutocompleteCompletionListener() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1ODU1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547558554", "bodyText": "@kostyaBoss Do the unit tests in PresentChoiceSetOperationTests.java need to be updated?", "author": "santhanamk", "createdAt": "2020-12-22T23:38:31Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java", "diffHunk": "@@ -338,6 +338,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n+                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTQ0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r549729443", "bodyText": "@santanamk there were no tests covering the mask previously so I didn't add some new ones. To my mind, the PresentChoiceSetOperationTests are more about thread-safe testing, but we are not introducing some major changes at this point, so I don't think we should push the changes. Please, let me know if you still think we need to update them", "author": "kboskin", "createdAt": "2020-12-29T14:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1ODU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\nindex aee1dc90f..2355b7e66 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java\n\n@@ -338,8 +338,6 @@ class PresentChoiceSetOperation extends Task {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n-                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n-                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {\n                     // Notify of Keypress\n                     keyboardListener.updateAutocompleteWithInput(onKeyboard.getData(), new KeyboardAutocompleteCompletionListener() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTE1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547559150", "bodyText": "@kostyaBoss Since these enums were most recently added I would move the else if block on lines 287-288 below the last else if (around line 310).", "author": "santhanamk", "createdAt": "2020-12-22T23:40:31Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java", "diffHunk": "@@ -284,6 +284,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\nindex 6cfb83217..954d1eb2a 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\n\n@@ -284,8 +284,6 @@ class PresentKeyboardOperation extends Task {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n-                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n-                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {\n                     // Notify of Keypress\n                     keyboardListener.updateAutocompleteWithInput(onKeyboard.getData(), new KeyboardAutocompleteCompletionListener() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTM0NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547559344", "bodyText": "@kostyaBoss Do the unit tests in PresentKeyboardOperationTests.java need to be updated?", "author": "santhanamk", "createdAt": "2020-12-22T23:41:16Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java", "diffHunk": "@@ -284,6 +284,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n+                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTYxNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r549729617", "bodyText": "@santhanamk there were no tests covering the mask previously so I didn't add some new ones. To my mind, the PresentChoiceSetOperationTests are more about thread-safe testing, but we are not introducing some major changes at this point, so I don't think we should push the changes. Please, let me know if you still think we need to update them", "author": "kboskin", "createdAt": "2020-12-29T14:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\nindex 6cfb83217..954d1eb2a 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java\n\n@@ -284,8 +284,6 @@ class PresentKeyboardOperation extends Task {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n-                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n-                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {\n                     // Notify of Keypress\n                     keyboardListener.updateAutocompleteWithInput(onKeyboard.getData(), new KeyboardAutocompleteCompletionListener() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDcyNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547560727", "bodyText": "@kostyaBoss On line 551 you are checking if getMaskInputCharactersSupported () != null .  However, that method returns a Boolean.  Do you need to change this logic?", "author": "santhanamk", "createdAt": "2020-12-22T23:46:23Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczMDU2NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r549730565", "bodyText": "I don't think so, because according to the proposal this is not a mandatory field, as far as I can remember, this means that calling getMaskInputCharactersSupported may produce NPE. That was the reason for this additional check", "author": "kboskin", "createdAt": "2020-12-29T14:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e5b110bc2fec8355d143227a54929c71750360ed", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..3d3a8b934 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -546,12 +604,6 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n-\n-                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n-                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-                            }\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDgwNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547560805", "bodyText": "@kostyaBoss Do you need to update the unit tests?", "author": "santhanamk", "createdAt": "2020-12-22T23:46:39Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+                            }", "originalCommit": "f841c3a59fca7d33848420fdb0b390c6c3120563", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTczMTc0OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r549731749", "bodyText": "I don't think the ChoiceSetManagerTests is testing what's going on it it's DisplayCapabilityListener at least I didn't find it in the current tests and it seems to be never testing before. If we still need to add those tests - let me know", "author": "kboskin", "createdAt": "2020-12-29T14:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5b110bc2fec8355d143227a54929c71750360ed", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..3d3a8b934 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -546,12 +604,6 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n-\n-                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n-                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-                            }\n                         }\n                     }\n                 }\n"}}, {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "message": "[0298]\n- Fix PR comments", "committedDate": "2020-12-29T14:49:15Z", "type": "commit"}, {"oid": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/cd1136eb16d53572fe1b1f2b368d502819d1d422", "message": "Make changes according to revision", "committedDate": "2021-02-06T10:36:25Z", "type": "commit"}, {"oid": "55de319324344973dcfad3e767d152e98c2d0245", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/55de319324344973dcfad3e767d152e98c2d0245", "message": "Merge remote-tracking branch 'origin/develop' into feature/0298_keyboard_enchancements", "committedDate": "2021-02-06T10:51:19Z", "type": "commit"}, {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/40766fd31dc9805c423eb0184eab130e3a521f9c", "message": "Merge branch 'develop' into feature/0298_keyboard_enchancements\n\n# Conflicts:\n#\tandroid/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java\n#\tandroid/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java", "committedDate": "2021-02-11T20:17:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3MDM1OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r560270359", "bodyText": "This import is unused", "author": "bilal-alsharifi", "createdAt": "2021-01-19T15:37:51Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -64,6 +66,7 @@\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n+import java.security.Key;", "originalCommit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..ae372edcc 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -66,7 +66,6 @@ import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n-import java.security.Key;\n import java.util.HashSet;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3MjA5Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r560272096", "bodyText": "Can we remove the todo?", "author": "bilal-alsharifi", "createdAt": "2021-01-19T15:40:09Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -110,6 +113,8 @@\n         // capabilities\n         currentSystemContext = SystemContext.SYSCTXT_MAIN;\n         currentHMILevel = HMILevel.HMI_NONE;\n+        // TODO remove, move to addListener", "originalCommit": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..ae372edcc 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -113,7 +112,6 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         // capabilities\n         currentSystemContext = SystemContext.SYSCTXT_MAIN;\n         currentHMILevel = HMILevel.HMI_NONE;\n-        // TODO remove, move to addListener\n         keyboardConfiguration = defaultKeyboardConfiguration();\n         addListeners();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NDY3Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573044673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *      <td>\n          \n          \n            \n             *         @since SmartDeviceLink 7.1.0\n          \n          \n            \n             *      </td>\n          \n          \n            \n             *      <td></td>\n          \n      \n    \n    \n  \n\nThe @ since is added to the main class so no need to add it again", "author": "bilal-alsharifi", "createdAt": "2021-02-09T16:40:48Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex aefa55ac3..bc2fb4301 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -55,9 +55,7 @@ import java.util.List;\n  *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n  *      <td>N</td>\n  *      <td></td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n+ *      <td></td>\n  *  </tr>\n  *  <tr>\n  *      <td>supportedKeyboards</td>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjM5OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * @since SmartDeviceLink 7.1.0\n          \n          \n            \n                 */", "author": "bilal-alsharifi", "createdAt": "2021-02-09T16:42:57Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex aefa55ac3..bc2fb4301 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -55,9 +55,7 @@ import java.util.List;\n  *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n  *      <td>N</td>\n  *      <td></td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n+ *      <td></td>\n  *  </tr>\n  *  <tr>\n  *      <td>supportedKeyboards</td>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjU4MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since SmartDeviceLink 7.1.0", "author": "bilal-alsharifi", "createdAt": "2021-02-09T16:43:11Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    public static final String KEY_SUPPORTED_KEYBOARDS = \"supportedKeyboards\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex aefa55ac3..bc2fb4301 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -55,9 +55,7 @@ import java.util.List;\n  *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n  *      <td>N</td>\n  *      <td></td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n+ *      <td></td>\n  *  </tr>\n  *  <tr>\n  *      <td>supportedKeyboards</td>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjkwMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046901", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since SmartDeviceLink 7.1.0", "author": "bilal-alsharifi", "createdAt": "2021-02-09T16:43:35Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    public static final String KEY_SUPPORTED_KEYBOARDS = \"supportedKeyboards\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardCapabilities setMaskInputCharactersSupported(Boolean maskInputCharactersSupported) {\n+        setValue(KEY_MASK_INPUT_CHARACTERS_SUPPORTED, maskInputCharactersSupported);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maskInputCharactersSupported.\n+     *\n+     * @return Boolean Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\nindex aefa55ac3..bc2fb4301 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java\n\n@@ -55,9 +55,7 @@ import java.util.List;\n  *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n  *      <td>N</td>\n  *      <td></td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n+ *      <td></td>\n  *  </tr>\n  *  <tr>\n  *      <td>supportedKeyboards</td>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA1MTg0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573051843", "bodyText": "You shouldn't rewrite the whole class. Please revert the changes and  only modify the lines that are affected by the proposal", "author": "bilal-alsharifi", "createdAt": "2021-02-09T16:49:09Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -1,218 +1,352 @@\n-/*\r\n- * Copyright (c) 2017 - 2019, SmartDeviceLink Consortium, Inc.\r\n- * All rights reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions are met:\r\n- *\r\n- * Redistributions of source code must retain the above copyright notice, this\r\n- * list of conditions and the following disclaimer.\r\n- *\r\n- * Redistributions in binary form must reproduce the above copyright notice,\r\n- * this list of conditions and the following\r\n- * disclaimer in the documentation and/or other materials provided with the\r\n- * distribution.\r\n- *\r\n- * Neither the name of the SmartDeviceLink Consortium, Inc. nor the names of its\r\n- * contributors may be used to endorse or promote products derived from this\r\n- * software without specific prior written permission.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n- * POSSIBILITY OF SUCH DAMAGE.\r\n- */\r\n-package com.smartdevicelink.proxy.rpc;\r\n-\r\n-import com.smartdevicelink.proxy.RPCStruct;\r\n-import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\r\n-import com.smartdevicelink.proxy.rpc.enums.KeypressMode;\r\n-import com.smartdevicelink.proxy.rpc.enums.Language;\r\n-\r\n-import java.util.Hashtable;\r\n-import java.util.List;\r\n-\r\n-/**\r\n- * This mode causes the interaction to immediately display a keyboard entry through the HMI.\r\n- *\r\n- * <p><b>Parameter List</b></p>\r\n- * <table border=\"1\" rules=\"all\">\r\n- * \t\t<tr>\r\n- * \t\t\t<th>Name</th>\r\n- * \t\t\t<th>Type</th>\r\n- * \t\t\t<th>Mandatory</th>\r\n- *                 <th> Additional</th>\r\n- * \t\t\t<th>Description</th>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>language</td>\r\n- * \t\t\t<td>Language</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>The keyboard language. </td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>keyboardLayout</td>\r\n- * \t\t\t<td>KeyboardLayout</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>Desired keyboard layout.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>sendDynamicEntry</td>\r\n- * \t\t\t<td>Boolean</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>In this mode, all key presses will be sent as they occur. If disabled, entire string of text will be returned only once submitted by user.If omitted, this value will be set to FALSE.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>keypressMode</td>\r\n- * \t\t\t<td>KeypressMode</td>\r\n- * \t\t\t<td>False</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>Desired keypress mode.If omitted, this value will be set to RESEND_CURRENT_ENTRY. </td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>limitedCharacterList</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>Array = true maxLength = 1 minsize = 1 maxsize = 100</td>\r\n- * \t\t\t<td>Array of keyboard characters to enable. All omitted characters will be greyed out (disabled) on the keyboard. If omitted, the entire keyboard will be enabled.</td>\r\n- * \t\t</tr>\r\n- *\r\n- * \t\t<tr>\r\n- * \t\t\t<td>autoCompleteText</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>maxlength = 1000 </td>\r\n- * \t\t\t<td>Allows an app to prepopulate the text field with a suggested or completed entry as the user types.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>autoCompleteList</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n- * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n- * \t\t</tr>\r\n- *  </table>\r\n- *\r\n- * @since SmartDeviceLink 3.0\r\n- */\r\n-\r\n-public class KeyboardProperties extends RPCStruct {\r\n-    public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n-    public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n-    public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n-    @Deprecated\r\n-    public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\r\n-    public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\r\n-    public static final String KEY_LANGUAGE = \"language\";\r\n-\r\n-    private static final KeypressMode KEYPRESS_MODE_DEFAULT = KeypressMode.RESEND_CURRENT_ENTRY;\r\n-\r\n-    public KeyboardProperties() {\r\n-        setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-    }\r\n-\r\n-    public KeyboardProperties(Hashtable<String, Object> hash) {\r\n-        super(hash);\r\n-        if (!store.containsKey(KEY_KEYPRESS_MODE)) {\r\n-            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-        }\r\n-    }\r\n-\r\n-    public Language getLanguage() {\r\n-        return (Language) getObject(Language.class, KEY_LANGUAGE);\r\n-    }\r\n-\r\n-    public KeyboardProperties setLanguage(Language language) {\r\n-        setValue(KEY_LANGUAGE, language);\r\n-        return this;\r\n-    }\r\n-\r\n-    public KeyboardLayout getKeyboardLayout() {\r\n-        return (KeyboardLayout) getObject(KeyboardLayout.class, KEY_KEYBOARD_LAYOUT);\r\n-    }\r\n-\r\n-    public KeyboardProperties setKeyboardLayout(KeyboardLayout keyboardLayout) {\r\n-        setValue(KEY_KEYBOARD_LAYOUT, keyboardLayout);\r\n-        return this;\r\n-    }\r\n-\r\n-    public KeypressMode getKeypressMode() {\r\n-        KeypressMode kp = (KeypressMode) getObject(KeypressMode.class, KEY_KEYPRESS_MODE);\r\n-        if (kp == null) {\r\n-            kp = KEYPRESS_MODE_DEFAULT;\r\n-        }\r\n-        return kp;\r\n-    }\r\n-\r\n-    public KeyboardProperties setKeypressMode(KeypressMode keypressMode) {\r\n-        if (keypressMode != null) {\r\n-            setValue(KEY_KEYPRESS_MODE, keypressMode);\r\n-        } else {\r\n-            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-        }\r\n-        return this;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<String> getLimitedCharacterList() {\r\n-        return (List<String>) getObject(String.class, KEY_LIMITED_CHARACTER_LIST);\r\n-    }\r\n-\r\n-    public KeyboardProperties setLimitedCharacterList(List<String> limitedCharacterList) {\r\n-        setValue(KEY_LIMITED_CHARACTER_LIST, limitedCharacterList);\r\n-        return this;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the text that allows an app to prepopulate the text field with a suggested entry as the user types\r\n-     *\r\n-     * @return String representing the suggestions text\r\n-     */\r\n-    @Deprecated\r\n-    public String getAutoCompleteText() {\r\n-        return (String) getObject(String.class, KEY_AUTO_COMPLETE_TEXT);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the text that allows an app to prepopulate the text field with a suggested entry as the user types\r\n-     *\r\n-     * @param autoCompleteText String representing the suggestions text\r\n-     * @deprecated use {@link #setAutoCompleteList(List <String>)} instead\r\n-     */\r\n-    @Deprecated\r\n-    public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\r\n-        setValue(KEY_AUTO_COMPLETE_TEXT, autoCompleteText);\r\n-        return this;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types.\r\n-     *\r\n-     * @return List<String> representing the suggestions list\r\n-     */\r\n-    public List<String> getAutoCompleteList() {\r\n-        return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\r\n-     *\r\n-     * @param autoCompleteList List<String> representing the suggestions list\r\n-     */\r\n-    public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\r\n-        setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\r\n-        return this;\r\n-    }\r\n-}\r\n+/*", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex dad74f0bc..22b59bcf2 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -1,352 +1,289 @@\n-/*\n- * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following\n- * disclaimer in the documentation and/or other materials provided with the\n- * distribution.\n- *\n- * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n- * its contributors may be used to endorse or promote products derived\n- * from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n- * POSSIBILITY OF SUCH DAMAGE.\n- */\n-package com.smartdevicelink.proxy.rpc;\n-\n-import com.smartdevicelink.proxy.RPCStruct;\n-import com.smartdevicelink.proxy.rpc.enums.KeyboardInputMask;\n-import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n-import com.smartdevicelink.proxy.rpc.enums.KeypressMode;\n-import com.smartdevicelink.proxy.rpc.enums.Language;\n-\n-import java.util.Hashtable;\n-import java.util.List;\n-\n-/**\n- * Configuration of on-screen keyboard (if available).\n- *\n- * <p><b>Parameter List</b></p>\n- *\n- * <table border=\"1\" rules=\"all\">\n- *  <tr>\n- *      <th>Param Name</th>\n- *      <th>Type</th>\n- *      <th>Description</th>\n- *      <th>Required</th>\n- *      <th>Notes</th>\n- *      <th>Version Available</th>\n- *  </tr>\n- *  <tr>\n- *      <td>language</td>\n- *      <td>Language</td>\n- *      <td>The keyboard language.</td>\n- *      <td>N</td>\n- *      <td></td>\n- *      <td></td>\n- *  </tr>\n- *  <tr>\n- *      <td>keyboardLayout</td>\n- *      <td>KeyboardLayout</td>\n- *      <td>Desired keyboard layout.</td>\n- *      <td>N</td>\n- *      <td></td>\n- *      <td></td>\n- *  </tr>\n- *  <tr>\n- *      <td>keypressMode</td>\n- *      <td>KeypressMode</td>\n- *      <td>Desired keypress mode. If omitted, this value will be set to RESEND_CURRENT_ENTRY.</td>\n- *      <td>N</td>\n- *      <td></td>\n- *      <td></td>\n- *  </tr>\n- *  <tr>\n- *      <td>limitedCharacterList</td>\n- *      <td>List<String></td>\n- *      <td>Array of keyboard characters to enable.All omitted characters will be greyed out(disabled) on the keyboard.If omitted, the entire keyboard will be enabled.</td>\n- *      <td>N</td>\n- *      <td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 1}</td>\n- *      <td></td>\n- *  </tr>\n- *  <tr>\n- *      <td>autoCompleteText</td>\n- *      <td>String</td>\n- *      <td>Deprecated, use autoCompleteList instead.</td>\n- *      <td>N</td>\n- *      <td>{\"string_max_length\": 1000, \"string_min_length\": 1}</td>\n- *      <td>\n- *         @since SmartDeviceLink 3.0.0\n- *         @deprecated in SmartDeviceLink 6.0.0\n- *      </td>\n- *  </tr>\n- *  <tr>\n- *      <td>autoCompleteList</td>\n- *      <td>List<String></td>\n- *      <td>Allows an app to pre-populate the text field with a list of suggested or completed entriesas the user types. If empty, the auto-complete list will be removed from the screen.</td>\n- *      <td>N</td>\n- *      <td>{\"string_max_length\": 1000, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 0}</td>\n- *      <td>\n- *         @since SmartDeviceLink 6.0.0\n- *      </td>\n- *  </tr>\n- *  <tr>\n- *      <td>maskInputCharacters</td>\n- *      <td>KeyboardInputMask</td>\n- *      <td>Allows an app to mask entered characters on HMI</td>\n- *      <td>N</td>\n- *      <td></td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n- *  </tr>\n- *  <tr>\n- *      <td>customKeys</td>\n- *      <td>List<String></td>\n- *      <td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\n- *      <td>N</td>\n- *      <td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\n- *      <td>\n- *         @since SmartDeviceLink 7.1.0\n- *      </td>\n- *  </tr>\n- * </table>\n- *\n- * @since SmartDeviceLink 3.0.0\n- */\n-public class KeyboardProperties extends RPCStruct {\n-    public static final String KEY_LANGUAGE = \"language\";\n-    public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\n-    public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\n-    public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\n-    /**\n-     * @since SmartDeviceLink 3.0.0\n-     * @deprecated in SmartDeviceLink 6.0.0\n-     */\n-    @Deprecated\n-    public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\n-    /**\n-     * @since SmartDeviceLink 6.0.0\n-     */\n-    public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\n-    /**\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    public static final String KEY_MASK_INPUT_CHARACTERS = \"maskInputCharacters\";\n-    /**\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    public static final String KEY_CUSTOM_KEYS = \"customKeys\";\n-\n-    /**\n-     * Constructs a new KeyboardProperties object\n-     */\n-    public KeyboardProperties() { }\n-\n-    /**\n-     * Constructs a new KeyboardProperties object indicated by the Hashtable parameter\n-     *\n-     * @param hash The Hashtable to use\n-     */\n-    public KeyboardProperties(Hashtable<String, Object> hash) {\n-        super(hash);\n-    }\n-\n-    /**\n-     * Sets the language.\n-     *\n-     * @param language The keyboard language.\n-     */\n-    public KeyboardProperties setLanguage(Language language) {\n-        setValue(KEY_LANGUAGE, language);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the language.\n-     *\n-     * @return Language The keyboard language.\n-     */\n-    public Language getLanguage() {\n-        return (Language) getObject(Language.class, KEY_LANGUAGE);\n-    }\n-\n-    /**\n-     * Sets the keyboardLayout.\n-     *\n-     * @param keyboardLayout Desired keyboard layout.\n-     */\n-    public KeyboardProperties setKeyboardLayout(KeyboardLayout keyboardLayout) {\n-        setValue(KEY_KEYBOARD_LAYOUT, keyboardLayout);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the keyboardLayout.\n-     *\n-     * @return KeyboardLayout Desired keyboard layout.\n-     */\n-    public KeyboardLayout getKeyboardLayout() {\n-        return (KeyboardLayout) getObject(KeyboardLayout.class, KEY_KEYBOARD_LAYOUT);\n-    }\n-\n-    /**\n-     * Sets the keypressMode.\n-     *\n-     * @param keypressMode Desired keypress mode. If omitted, this value will be set to RESEND_CURRENT_ENTRY.\n-     */\n-    public KeyboardProperties setKeypressMode(KeypressMode keypressMode) {\n-        setValue(KEY_KEYPRESS_MODE, keypressMode);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the keypressMode.\n-     *\n-     * @return KeypressMode Desired keypress mode. If omitted, this value will be set to RESEND_CURRENT_ENTRY.\n-     */\n-    public KeypressMode getKeypressMode() {\n-        return (KeypressMode) getObject(KeypressMode.class, KEY_KEYPRESS_MODE);\n-    }\n-\n-    /**\n-     * Sets the limitedCharacterList.\n-     *\n-     * @param limitedCharacterList Array of keyboard characters to enable.All omitted characters will be greyed out\n-     * (disabled) on the keyboard.If omitted, the entire keyboard will be enabled.\n-     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 1}\n-     */\n-    public KeyboardProperties setLimitedCharacterList(List<String> limitedCharacterList) {\n-        setValue(KEY_LIMITED_CHARACTER_LIST, limitedCharacterList);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the limitedCharacterList.\n-     *\n-     * @return List<String> Array of keyboard characters to enable.All omitted characters will be greyed out\n-     * (disabled) on the keyboard.If omitted, the entire keyboard will be enabled.\n-     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 1}\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<String> getLimitedCharacterList() {\n-        return (List<String>) getObject(String.class, KEY_LIMITED_CHARACTER_LIST);\n-    }\n-\n-    /**\n-     * Sets the autoCompleteText.\n-     *\n-     * @param autoCompleteText Deprecated, use autoCompleteList instead.\n-     * {\"string_max_length\": 1000, \"string_min_length\": 1}\n-     * @since SmartDeviceLink 3.0.0\n-     * @deprecated in SmartDeviceLink 6.0.0\n-     */\n-    @Deprecated\n-    public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\n-        setValue(KEY_AUTO_COMPLETE_TEXT, autoCompleteText);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the autoCompleteText.\n-     *\n-     * @return String Deprecated, use autoCompleteList instead.\n-     * {\"string_max_length\": 1000, \"string_min_length\": 1}\n-     * @since SmartDeviceLink 3.0.0\n-     * @deprecated in SmartDeviceLink 6.0.0\n-     */\n-    @Deprecated\n-    public String getAutoCompleteText() {\n-        return getString(KEY_AUTO_COMPLETE_TEXT);\n-    }\n-\n-    /**\n-     * Sets the autoCompleteList.\n-     *\n-     * @param autoCompleteList Allows an app to pre-populate the text field with a list of suggested or completed entries\n-     * as the user types. If empty, the auto-complete list will be removed from the screen.\n-     * {\"string_max_length\": 1000, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 0}\n-     * @since SmartDeviceLink 6.0.0\n-     */\n-    public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\n-        setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the autoCompleteList.\n-     *\n-     * @return List<String> Allows an app to pre-populate the text field with a list of suggested or completed entries\n-     * as the user types. If empty, the auto-complete list will be removed from the screen.\n-     * {\"string_max_length\": 1000, \"string_min_length\": 1, \"array_max_size\": 100, \"array_min_size\": 0}\n-     * @since SmartDeviceLink 6.0.0\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<String> getAutoCompleteList() {\n-        return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\n-    }\n-\n-    /**\n-     * Sets the maskInputCharacters.\n-     *\n-     * @param maskInputCharacters Allows an app to mask entered characters on HMI\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    public KeyboardProperties setMaskInputCharacters(KeyboardInputMask maskInputCharacters) {\n-        setValue(KEY_MASK_INPUT_CHARACTERS, maskInputCharacters);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the maskInputCharacters.\n-     *\n-     * @return KeyboardInputMask Allows an app to mask entered characters on HMI\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    public KeyboardInputMask getMaskInputCharacters() {\n-        return (KeyboardInputMask) getObject(KeyboardInputMask.class, KEY_MASK_INPUT_CHARACTERS);\n-    }\n-\n-    /**\n-     * Sets the customKeys.\n-     *\n-     * @param customKeys Array of special characters to show in customizable keys. If omitted, keyboard will show\n-     * default special characters\n-     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    public KeyboardProperties setCustomKeys(List<String> customKeys) {\n-        setValue(KEY_CUSTOM_KEYS, customKeys);\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the customKeys.\n-     *\n-     * @return List<String> Array of special characters to show in customizable keys. If omitted, keyboard will show\n-     * default special characters\n-     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n-     * @since SmartDeviceLink 7.1.0\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public List<String> getCustomKeys() {\n-        return (List<String>) getObject(String.class, KEY_CUSTOM_KEYS);\n-    }\n-}\n+/*\n+ * Copyright (c) 2017 - 2019, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium, Inc. nor the names of its\n+ * contributors may be used to endorse or promote products derived from this\n+ * software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardInputMask;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.proxy.rpc.enums.KeypressMode;\n+import com.smartdevicelink.proxy.rpc.enums.Language;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ * This mode causes the interaction to immediately display a keyboard entry through the HMI.\n+ *\n+ * <p><b>Parameter List</b></p>\n+ * <table border=\"1\" rules=\"all\">\n+ * \t\t<tr>\n+ * \t\t\t<th>Name</th>\n+ * \t\t\t<th>Type</th>\n+ * \t\t\t<th>Mandatory</th>\n+ *                 <th> Additional</th>\n+ * \t\t\t<th>Description</th>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>language</td>\n+ * \t\t\t<td>Language</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td></td>\n+ * \t\t\t<td>The keyboard language. </td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>keyboardLayout</td>\n+ * \t\t\t<td>KeyboardLayout</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td></td>\n+ * \t\t\t<td>Desired keyboard layout.</td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>sendDynamicEntry</td>\n+ * \t\t\t<td>Boolean</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td></td>\n+ * \t\t\t<td>In this mode, all key presses will be sent as they occur. If disabled, entire string of text will be returned only once submitted by user.If omitted, this value will be set to FALSE.</td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>keypressMode</td>\n+ * \t\t\t<td>KeypressMode</td>\n+ * \t\t\t<td>False</td>\n+ *                 <td></td>\n+ * \t\t\t<td>Desired keypress mode.If omitted, this value will be set to RESEND_CURRENT_ENTRY. </td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>limitedCharacterList</td>\n+ * \t\t\t<td>String</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td>Array = true maxLength = 1 minsize = 1 maxsize = 100</td>\n+ * \t\t\t<td>Array of keyboard characters to enable. All omitted characters will be greyed out (disabled) on the keyboard. If omitted, the entire keyboard will be enabled.</td>\n+ * \t\t</tr>\n+ *\n+ * \t\t<tr>\n+ * \t\t\t<td>autoCompleteText</td>\n+ * \t\t\t<td>String</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td>maxlength = 1000 </td>\n+ * \t\t\t<td>Allows an app to prepopulate the text field with a suggested or completed entry as the user types.</td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>autoCompleteList</td>\n+ * \t\t\t<td>String</td>\n+ * \t\t\t<td>false</td>\n+ *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\n+ * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>maskInputCharacters</td>\n+ * \t\t\t<td>KeyboardInputMask</td>\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n+ * \t\t\t<td>N</td>\n+ * \t\t\t<td></td>\n+ * \t\t\t<td>\n+ *         @since SmartDeviceLink 7.1.0\n+ * \t\t\t</td>\n+ * \t\t</tr>\n+ * \t\t<tr>\n+ * \t\t\t<td>customKeys</td>\n+ * \t\t\t<td>List<String></td>\n+ * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\n+ * \t\t\t<td>N</td>\n+ * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\n+ * \t\t\t<td>\n+ *         @since SmartDeviceLink 7.1.0\n+ * \t\t\t</td>\n+ * \t\t</tr>\n+ *  </table>\n+ *\n+ * @since SmartDeviceLink 3.0\n+ */\n+\n+public class KeyboardProperties extends RPCStruct {\n+    public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\n+    public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\n+    public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\n+    @Deprecated\n+    public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\n+    public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\n+    public static final String KEY_MASK_INPUT_CHARACTERS = \"maskInputCharacters\";\n+    public static final String KEY_CUSTOM_KEYS = \"customKeys\";\n+    public static final String KEY_LANGUAGE = \"language\";\n+\n+    private static final KeypressMode KEYPRESS_MODE_DEFAULT = KeypressMode.RESEND_CURRENT_ENTRY;\n+\n+    public KeyboardProperties() {\n+        setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\n+    }\n+\n+    public KeyboardProperties(Hashtable<String, Object> hash) {\n+        super(hash);\n+        if (!store.containsKey(KEY_KEYPRESS_MODE)) {\n+            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\n+        }\n+    }\n+\n+    public Language getLanguage() {\n+        return (Language) getObject(Language.class, KEY_LANGUAGE);\n+    }\n+\n+    public KeyboardProperties setLanguage(Language language) {\n+        setValue(KEY_LANGUAGE, language);\n+        return this;\n+    }\n+\n+    public KeyboardLayout getKeyboardLayout() {\n+        return (KeyboardLayout) getObject(KeyboardLayout.class, KEY_KEYBOARD_LAYOUT);\n+    }\n+\n+    public KeyboardProperties setKeyboardLayout(KeyboardLayout keyboardLayout) {\n+        setValue(KEY_KEYBOARD_LAYOUT, keyboardLayout);\n+        return this;\n+    }\n+\n+    public KeypressMode getKeypressMode() {\n+        KeypressMode kp = (KeypressMode) getObject(KeypressMode.class, KEY_KEYPRESS_MODE);\n+        if (kp == null) {\n+            kp = KEYPRESS_MODE_DEFAULT;\n+        }\n+        return kp;\n+    }\n+\n+    public KeyboardProperties setKeypressMode(KeypressMode keypressMode) {\n+        if (keypressMode != null) {\n+            setValue(KEY_KEYPRESS_MODE, keypressMode);\n+        } else {\n+            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\n+        }\n+        return this;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getLimitedCharacterList() {\n+        return (List<String>) getObject(String.class, KEY_LIMITED_CHARACTER_LIST);\n+    }\n+\n+    public KeyboardProperties setLimitedCharacterList(List<String> limitedCharacterList) {\n+        setValue(KEY_LIMITED_CHARACTER_LIST, limitedCharacterList);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the text that allows an app to prepopulate the text field with a suggested entry as the user types\n+     *\n+     * @return String representing the suggestions text\n+     */\n+    @Deprecated\n+    public String getAutoCompleteText() {\n+        return (String) getObject(String.class, KEY_AUTO_COMPLETE_TEXT);\n+    }\n+\n+    /**\n+     * Sets the text that allows an app to prepopulate the text field with a suggested entry as the user types\n+     *\n+     * @param autoCompleteText String representing the suggestions text\n+     * @deprecated use {@link #setAutoCompleteList(List <String>)} instead\n+     */\n+    @Deprecated\n+    public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\n+        setValue(KEY_AUTO_COMPLETE_TEXT, autoCompleteText);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\n+     * completed entries as the user types.\n+     *\n+     * @return List<String> representing the suggestions list\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getAutoCompleteList() {\n+        return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\n+    }\n+\n+    /**\n+     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\n+     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\n+     *\n+     * @param autoCompleteList List<String> representing the suggestions list\n+     */\n+    public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\n+        setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maskInputCharacters.\n+     *\n+     * @param maskInputCharacters Allows an app to mask entered characters on HMI\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardProperties setMaskInputCharacters(KeyboardInputMask maskInputCharacters) {\n+        setValue(KEY_MASK_INPUT_CHARACTERS, maskInputCharacters);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maskInputCharacters.\n+     *\n+     * @return KeyboardInputMask Allows an app to mask entered characters on HMI\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardInputMask getMaskInputCharacters() {\n+        return (KeyboardInputMask) getObject(KeyboardInputMask.class, KEY_MASK_INPUT_CHARACTERS);\n+    }\n+\n+    /**\n+     * Sets the customKeys.\n+     *\n+     * @param customKeys Array of special characters to show in customizable keys. If omitted, keyboard will show\n+     * default special characters\n+     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardProperties setCustomKeys(List<String> customKeys) {\n+        setValue(KEY_CUSTOM_KEYS, customKeys);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the customKeys.\n+     *\n+     * @return List<String> Array of special characters to show in customizable keys. If omitted, keyboard will show\n+     * default special characters\n+     * {\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getCustomKeys() {\n+        return (List<String>) getObject(String.class, KEY_CUSTOM_KEYS);\n+    }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE2MjY2NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573162665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n          \n          \n            \n                        properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n          \n          \n            \n                        properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());", "author": "bilal-alsharifi", "createdAt": "2021-02-09T19:16:25Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -461,6 +465,7 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());", "originalCommit": "55de319324344973dcfad3e767d152e98c2d0245", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..ae372edcc 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -465,6 +463,7 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n             properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             this.keyboardConfiguration = properties;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MTIwMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576361202", "bodyText": "Can we rename this to onKeyboardDidUpdateInputMask to align with iOS?", "author": "bilal-alsharifi", "createdAt": "2021-02-15T18:14:34Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java", "diffHunk": "@@ -84,4 +84,6 @@\n      * @param currentInputText - The user's full current input text\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n+\n+    void onKeyboardInputMaskHasChanged(KeyboardEvent event);", "originalCommit": "40766fd31dc9805c423eb0184eab130e3a521f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\nindex ad53645e0..619f2c2f2 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java\n\n@@ -85,5 +85,5 @@ public interface KeyboardListener {\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n \n-    void onKeyboardInputMaskHasChanged(KeyboardEvent event);\n+    void onKeyboardDidUpdateInputMask(KeyboardEvent event);\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2Mjc3Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576362772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n          \n          \n            \n                                        if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n          \n          \n            \n                                                && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n          \n          \n            \n                                            keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n          \n          \n            \n                                        }\n          \n      \n    \n    \n  \n\nGetting the keyboardCapabilities and checking it here is not necessary here and can be removed. We should check the capability when setting the keyboard configuration instead (this will be described in another comment)", "author": "bilal-alsharifi", "createdAt": "2021-02-15T18:18:26Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+                            }", "originalCommit": "40766fd31dc9805c423eb0184eab130e3a521f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5b110bc2fec8355d143227a54929c71750360ed", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..3d3a8b934 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -546,12 +604,6 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n-\n-                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n-                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-                            }\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM3NDAyMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576374023", "bodyText": "After checking the proposal, I think that this is missing Android and iOS changes # 4. Here's how I think that would work:\n\nThe manager needs to handle what happens if the keyboard properties that the developer is trying to use are not supported.\nIf the KeyboardProperties that the developer is attempting to use an unsupported KeyboardLayout, the operation will need to fail with an error log.\nIf the KeyboardProperties that the developer is attempting to use uses too many customKeys for the current layout, we will shorten the amount they send to be the maximum amount and print a warning log.\nIf the KeyboardProperties that the developer is attempting to use uses a customKeys array that is empty, we will remove the array to nil.\nIf the KeyboardProperties that the developer is attempting to use uses maskInputCharacters when that is not supported on the current layout, we will remove the property to nil.\nIf the KeyboardCapabilities are not available, use the existing behavior of sending whatever the developer set.\nNote that KeyboardProperties can be passed by developer in both setKeyboardConfiguration() && presentKeyboard() so we need to make sure that the properties are handled properly in both places.", "author": "bilal-alsharifi", "createdAt": "2021-02-15T18:47:54Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -461,6 +465,7 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());", "originalCommit": "40766fd31dc9805c423eb0184eab130e3a521f9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 690ed1222..ae372edcc 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -465,6 +463,7 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n             properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             this.keyboardConfiguration = properties;\n         }\n"}}, {"oid": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "message": "[0238]\n- Fix PR formatting comments", "committedDate": "2021-02-15T19:46:22Z", "type": "commit"}, {"oid": "e5b110bc2fec8355d143227a54929c71750360ed", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e5b110bc2fec8355d143227a54929c71750360ed", "message": "[0238]\n- Implement new logic of ChoiseSetManager", "committedDate": "2021-02-15T20:47:14Z", "type": "commit"}, {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6843d63e94aac1413aeb4d798b1d0561cf700652", "message": "[0238]\n- Fix tests", "committedDate": "2021-02-15T21:26:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNDIxMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576934213", "bodyText": "The indentation doesn't look correct here", "author": "bilal-alsharifi", "createdAt": "2021-02-16T15:57:05Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4629a6039002e0dab711b3eb75253458222fa31a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 22b59bcf2..eab4f8caa 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -105,11 +105,12 @@ import java.util.List;\n  * \t\t<tr>\n  * \t\t\t<td>maskInputCharacters</td>\n  * \t\t\t<td>KeyboardInputMask</td>\n+ * \t\t    <td>false</td>\n  * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n  * \t\t\t<td>N</td>\n  * \t\t\t<td></td>\n  * \t\t\t<td>\n- *         @since SmartDeviceLink 7.1.0\n+ *                 @since SmartDeviceLink 7.1.0\n  * \t\t\t</td>\n  * \t\t</tr>\n  * \t\t<tr>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNDI4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576934283", "bodyText": "The indentation doesn't look correct here", "author": "bilal-alsharifi", "createdAt": "2021-02-16T15:57:11Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r\n+ * \t\t\t<td>List<String></td>\r\n+ * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4629a6039002e0dab711b3eb75253458222fa31a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 22b59bcf2..eab4f8caa 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -105,11 +105,12 @@ import java.util.List;\n  * \t\t<tr>\n  * \t\t\t<td>maskInputCharacters</td>\n  * \t\t\t<td>KeyboardInputMask</td>\n+ * \t\t    <td>false</td>\n  * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n  * \t\t\t<td>N</td>\n  * \t\t\t<td></td>\n  * \t\t\t<td>\n- *         @since SmartDeviceLink 7.1.0\n+ *                 @since SmartDeviceLink 7.1.0\n  * \t\t\t</td>\n  * \t\t</tr>\n  * \t\t<tr>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjI1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576936255", "bodyText": "The order of the cells in the table doesn't match the header which is name, type, mandatory, additional, description.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T15:59:30Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU1ODk2Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577558966", "bodyText": "@bilal-alsharifi I've added the \"mandatory\" section", "author": "kboskin", "createdAt": "2021-02-17T12:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4629a6039002e0dab711b3eb75253458222fa31a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 22b59bcf2..eab4f8caa 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -105,11 +105,12 @@ import java.util.List;\n  * \t\t<tr>\n  * \t\t\t<td>maskInputCharacters</td>\n  * \t\t\t<td>KeyboardInputMask</td>\n+ * \t\t    <td>false</td>\n  * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n  * \t\t\t<td>N</td>\n  * \t\t\t<td></td>\n  * \t\t\t<td>\n- *         @since SmartDeviceLink 7.1.0\n+ *                 @since SmartDeviceLink 7.1.0\n  * \t\t\t</td>\n  * \t\t</tr>\n  * \t\t<tr>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjY1Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576936652", "bodyText": "Also here the order is not correct", "author": "bilal-alsharifi", "createdAt": "2021-02-16T15:59:56Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU2MDY1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577560650", "bodyText": "@bilal-alsharifi I've added the \"mandatory\" section", "author": "kboskin", "createdAt": "2021-02-17T12:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4629a6039002e0dab711b3eb75253458222fa31a", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 22b59bcf2..eab4f8caa 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -105,11 +105,12 @@ import java.util.List;\n  * \t\t<tr>\n  * \t\t\t<td>maskInputCharacters</td>\n  * \t\t\t<td>KeyboardInputMask</td>\n+ * \t\t    <td>false</td>\n  * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n  * \t\t\t<td>N</td>\n  * \t\t\t<td></td>\n  * \t\t\t<td>\n- *         @since SmartDeviceLink 7.1.0\n+ *                 @since SmartDeviceLink 7.1.0\n  * \t\t\t</td>\n  * \t\t</tr>\n  * \t\t<tr>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk0NDYyNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576944624", "bodyText": "Please remove all unused imports", "author": "bilal-alsharifi", "createdAt": "2021-02-16T16:10:02Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -64,8 +67,10 @@\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n+import java.util.Collections;", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -67,10 +66,8 @@ import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.logging.Logger;\n \n /**\n  * <strong>ChoiceSetManager</strong> <br>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA0OTg2NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577049865", "bodyText": "Can we create that var at the beginning of the method and reuse it instead of keep getting that value in multiple places?", "author": "bilal-alsharifi", "createdAt": "2021-02-16T18:36:50Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MTUwNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577051507", "bodyText": "if KeyboardCapabilities is null, we shouldn't use the default capabilities, we should still use what the developer passes but assume that masking and custom keys are not supported.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T18:39:15Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MjQ3OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577052478", "bodyText": "Also defaultMainWindowCapability may be null so we should check for that.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T18:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MTUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1NDIzNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577054236", "bodyText": "I don't think you mean to change the capability here. I think you meant to change the configuration instead.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T18:43:40Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2NjExMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577066113", "bodyText": "That var doesn't seem to be set anywhere", "author": "bilal-alsharifi", "createdAt": "2021-02-16T19:03:20Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2ODQ3NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577068475", "bodyText": "We shouldn't modify the keyboardConfiguration that the developer passes. If masking is not supported just don't set it in the properties object instead.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T19:07:18Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+\n+            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3NDYyNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577074627", "bodyText": "Similar thing applies to keyboardConfiguration.setCustomKeys(customKeys);", "author": "bilal-alsharifi", "createdAt": "2021-02-16T19:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2ODQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3Mjk1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577072955", "bodyText": "As stated previously,  If the KeyboardProperties that the developer sets is attempting to use an unsupported KeyboardLayout, the operation will need to fail with an error log.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T19:15:17Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+\n+            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+            }\n             KeyboardProperties properties = new KeyboardProperties();\n             properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -461,68 +456,62 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n         processKeyboardConfiguration(keyboardConfiguration);\n     }\n \n-    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else if (defaultMainWindowCapability == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n+            this.keyboardConfiguration = keyboardConfiguration;\n+            this.keyboardConfiguration.setMaskInputCharacters(null);\n+            this.keyboardConfiguration.setCustomKeys(null);\n         } else {\n \n             KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+            KeyboardProperties properties = new KeyboardProperties();\n \n-            if (customKeys == null || customKeys.isEmpty()){\n-                keyboardConfiguration.setCustomKeys(null);\n+            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n+            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n+            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n+            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n+\n+            if (keyboardConfiguration.getMaskInputCharacters() != null && keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n             }\n \n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n             boolean containsRightKeyboard = false;\n-            boolean containsValidAmountOfCustomKeys = false;\n-            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n-                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n                     containsRightKeyboard = true;\n \n-                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n-                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                    properties.setKeyboardLayout(keyboardConfiguration.getKeyboardLayout());\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null) {\n                         DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n                     }\n-                    if (customKeys != null) {\n+                    if (customKeys != null && !customKeys.isEmpty()) {\n                         int customKeysSize = customKeys.size();\n                         if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n                             int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n \n-                            for (int i = 0; i < sizeDiff; i++){\n+                            for (int i = 0; i < sizeDiff; i++) {\n                                 customKeys.remove(customKeysSize - 1);\n                             }\n \n-                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n                             DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n                         }\n                     }\n+                    break;\n                 }\n             }\n \n-            if (!containsRightKeyboard){\n-                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n-                return null;\n-            }\n-\n-            if (!containsValidAmountOfCustomKeys){\n+            if (!containsRightKeyboard) {\n                 DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n                 return null;\n             }\n-\n-\n-            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n-                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n-                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n-            }\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());\n-            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());\n-            properties.setCustomKeys(keyboardConfiguration.getCustomKeys());\n             this.keyboardConfiguration = properties;\n         }\n         return this.keyboardConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3Nzg5MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577077891", "bodyText": "if customKeyboardConfig != null, The customKeyboardConfig will be passed without checking them against the keyboard capability which is not correct.", "author": "bilal-alsharifi", "createdAt": "2021-02-16T19:23:55Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -394,10 +399,11 @@ public Integer presentKeyboard(@NonNull String initialText, @Nullable KeyboardPr\n         }\n \n         if (customKeyboardConfig == null) {", "originalCommit": "6843d63e94aac1413aeb4d798b1d0561cf700652", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76101c4c6189da949e1fe578d30e7f460658465e", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 3d3a8b934..8e8352956 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -398,13 +395,11 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n             DebugTool.logWarning(TAG, \"There is a current or pending choice set, cancelling and continuing.\");\n         }\n \n-        if (customKeyboardConfig == null) {\n-            KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n-            if (keyboardProperties != null){\n-                customKeyboardConfig = this.keyboardConfiguration;\n-            } else {\n-                return null;\n-            }\n+        KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n+        if (keyboardProperties != null) {\n+            customKeyboardConfig = this.keyboardConfiguration;\n+        } else {\n+            return null;\n         }\n \n         // Present a keyboard with the choice set that we used to test VR's optional state\n"}}, {"oid": "76101c4c6189da949e1fe578d30e7f460658465e", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/76101c4c6189da949e1fe578d30e7f460658465e", "message": "[0238]\n- Fix pr comments", "committedDate": "2021-02-17T11:28:41Z", "type": "commit"}, {"oid": "4629a6039002e0dab711b3eb75253458222fa31a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4629a6039002e0dab711b3eb75253458222fa31a", "message": "[0238]\n- Fix javaDoc", "committedDate": "2021-02-17T12:07:53Z", "type": "commit"}, {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/5a09c446166891b27cb8a5f68cbfa71422435e3c", "message": "[0238]\n- Fix javaDoc", "committedDate": "2021-02-17T12:12:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc0NDg1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577744855", "bodyText": "Now there are more cells than what exists in the table header. They need to match with the header as the following\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>maskInputCharacters</td>\n          \n          \n            \n             * \t\t\t<td>KeyboardInputMask</td>\n          \n          \n            \n             * \t\t    <td>false</td>\n          \n          \n            \n             * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n          \n          \n            \n             * \t\t\t<td>N</td>\n          \n          \n            \n             * \t\t\t<td></td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             *                 @since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>customKeys</td>\n          \n          \n            \n             * \t\t\t<td>List<String></td>\n          \n          \n            \n             * \t\t    <td>false</td>\n          \n          \n            \n             * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\n          \n          \n            \n             * \t\t\t<td>N</td>\n          \n          \n            \n             * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             *                 @since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>maskInputCharacters</td>\n          \n          \n            \n             * \t\t\t<td>KeyboardInputMask</td>\n          \n          \n            \n             * \t\t\t<td>false</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\t@since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>customKeys</td>\n          \n          \n            \n             * \t\t\t<td>List<String></td>\n          \n          \n            \n             * \t\t\t<td>false</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\t@since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\tArray of special characters to show in customizable keys. If omitted, keyboard will show default special characters \n          \n          \n            \n             * \t\t\t\t{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>", "author": "bilal-alsharifi", "createdAt": "2021-02-17T16:13:34Z", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,28 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t    <td>false</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *                 @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r\n+ * \t\t\t<td>List<String></td>\r\n+ * \t\t    <td>false</td>\r\n+ * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\r\n+ * \t\t\t<td>\r\n+ *                 @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r", "originalCommit": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65ffa59c0de5b4739f909aacab899f12a9f87288", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\nindex 8b5d70847..a59623720 100644\n--- a/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n+++ b/base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\n@@ -105,23 +105,22 @@ import java.util.List;\n  * \t\t<tr>\n  * \t\t\t<td>maskInputCharacters</td>\n  * \t\t\t<td>KeyboardInputMask</td>\n- * \t\t    <td>false</td>\n- * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n- * \t\t\t<td>N</td>\n- * \t\t\t<td></td>\n+ * \t\t\t<td>false</td>\n  * \t\t\t<td>\n- *                 @since SmartDeviceLink 7.1.0\n+ * \t\t\t\t@since SmartDeviceLink 7.1.0\n  * \t\t\t</td>\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n  * \t\t</tr>\n  * \t\t<tr>\n  * \t\t\t<td>customKeys</td>\n  * \t\t\t<td>List<String></td>\n- * \t\t    <td>false</td>\n- * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\n- * \t\t\t<td>N</td>\n- * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\n+ * \t\t\t<td>false</td>\n+ * \t\t\t<td>\n+ * \t\t\t\t@since SmartDeviceLink 7.1.0\n+ * \t\t\t</td>\n  * \t\t\t<td>\n- *                 @since SmartDeviceLink 7.1.0\n+ * \t\t\t\tArray of special characters to show in customizable keys. If omitted, keyboard will show default special characters \n+ * \t\t\t\t{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n  * \t\t\t</td>\n  * \t\t</tr>\n  *  </table>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MTE1NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577941154", "bodyText": "Please revert all changes to this method as they are not necessary with the new createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration that is suggested in another comment.", "author": "bilal-alsharifi", "createdAt": "2021-02-17T21:03:09Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -646,9 +698,31 @@ boolean setUpChoiceSet(ChoiceSet choiceSet) {\n     }\n \n     KeyboardProperties defaultKeyboardConfiguration() {", "originalCommit": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43e14f52a7eca4570ff558745e4794ad8528fa89", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 8e8352956..3ba92d87c 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -698,31 +682,9 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n     }\n \n     KeyboardProperties defaultKeyboardConfiguration() {\n-        KeyboardLayout layout = KeyboardLayout.QWERTY;\n-\n-        if (defaultMainWindowCapability != null){\n-            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n-            boolean containsDefaultKeyboard = false;\n-            if (keyboardCapabilities != null\n-                    && keyboardCapabilities.getSupportedKeyboards() != null\n-                    && !keyboardCapabilities.getSupportedKeyboards().isEmpty()\n-            ) {\n-                for (KeyboardLayoutCapability capability : defaultMainWindowCapability.getKeyboardCapabilities().getSupportedKeyboards()) {\n-                    if (capability.getKeyboardLayout().equals(layout)) {\n-                        containsDefaultKeyboard = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!containsDefaultKeyboard) {\n-                    layout = defaultMainWindowCapability.getKeyboardCapabilities().getSupportedKeyboards().get(0).getKeyboardLayout();\n-                }\n-            }\n-        }\n-\n         KeyboardProperties defaultProperties = new KeyboardProperties();\n         defaultProperties.setLanguage(Language.EN_US);\n-        defaultProperties.setKeyboardLayout(layout);\n+        defaultProperties.setKeyboardLayout(KeyboardLayout.QWERTY);\n         defaultProperties.setKeypressMode(KeypressMode.RESEND_CURRENT_ENTRY);\n         return defaultProperties;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MjAwNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577942005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    processKeyboardConfiguration(keyboardConfiguration);\n          \n          \n            \n                 if (keyboardConfiguration == null) {\n          \n          \n            \n                        this.keyboardConfiguration = defaultKeyboardConfiguration();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n          \n          \n            \n                    }", "author": "bilal-alsharifi", "createdAt": "2021-02-17T21:04:38Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +453,68 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        processKeyboardConfiguration(keyboardConfiguration);", "originalCommit": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30fdae8152d1e964bba67dd8b3653eb3d3249356", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 8e8352956..e83c4ef33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -453,7 +453,11 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        processKeyboardConfiguration(keyboardConfiguration);\n+     if (keyboardConfiguration == null) {\n+            this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else {\n+            this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n+        }\n     }\n \n     private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MzMwNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577943304", "bodyText": "Can we replace processKeyboardConfiguration method with this method? The suggested method is much simpler and aligns with iOS implementation.\n// Takes a keyboard configuration (SDLKeyboardProperties) and creates a valid version of it, if possible, based on this object's internal keyboardCapabilities\nprivate KeyboardProperties createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n    KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability != null ? defaultMainWindowCapability.getKeyboardCapabilities() : null;\n\n    // If there are no keyboard capabilities, if there is no passed keyboard configuration, or if there is no layout to the passed keyboard configuration, just pass back the passed in configuration\n    if (keyboardCapabilities == null || keyboardConfiguration == null || keyboardConfiguration.getKeyboardLayout() == null) {\n        return keyboardConfiguration;\n    }\n\n    KeyboardLayoutCapability selectedLayoutCapability = null;\n    for (KeyboardLayoutCapability layoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n        if (layoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n            selectedLayoutCapability = layoutCapability;\n            break;\n        }\n    }\n\n    if (selectedLayoutCapability == null) {\n        DebugTool.logError(TAG, String.format(\"Configured keyboard layout is not supported: %s\", keyboardConfiguration.getKeyboardLayout()));\n        return null;\n    }\n\n    KeyboardProperties modifiedKeyboardConfiguration = (KeyboardProperties) keyboardConfiguration.clone();\n\n    if (keyboardConfiguration.getCustomKeys() == null || keyboardConfiguration.getCustomKeys().isEmpty()) {\n        modifiedKeyboardConfiguration.setCustomKeys(null);\n    } else {\n        // If there are more custom keys than are allowed for the selected keyboard layout, we need to trim the number of keys to only use the first n number of custom keys, where n is the number of allowed custom keys for that layout.\n        int numConfigurableKeys = selectedLayoutCapability.getNumConfigurableKeys();\n        if (keyboardConfiguration.getCustomKeys().size() > numConfigurableKeys) {\n            modifiedKeyboardConfiguration.setCustomKeys(keyboardConfiguration.getCustomKeys().subList(0, numConfigurableKeys));\n            DebugTool.logWarning(TAG, String.format(Locale.US, \"%d custom keys set, but the selected layout: %s only supports %d. Dropping the rest.\", keyboardConfiguration.getCustomKeys().size(), keyboardConfiguration.getKeyboardLayout(), numConfigurableKeys));\n        }\n    }\n\n    // If the keyboard does not support masking input characters, we will remove it from the keyboard configuration\n    if (!keyboardCapabilities.getMaskInputCharactersSupported()) {\n        modifiedKeyboardConfiguration.setMaskInputCharacters(null);\n    }\n\n    return modifiedKeyboardConfiguration;\n}", "author": "bilal-alsharifi", "createdAt": "2021-02-17T21:06:59Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +453,68 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {", "originalCommit": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0ODkyNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577948924", "bodyText": "Also please add unit tests to test the newly added manager code.", "author": "bilal-alsharifi", "createdAt": "2021-02-17T21:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MzMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "30fdae8152d1e964bba67dd8b3653eb3d3249356", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 8e8352956..e83c4ef33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -453,7 +453,11 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        processKeyboardConfiguration(keyboardConfiguration);\n+     if (keyboardConfiguration == null) {\n+            this.keyboardConfiguration = defaultKeyboardConfiguration();\n+        } else {\n+            this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n+        }\n     }\n \n     private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0NjU2OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577946568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n          \n          \n            \n                    if (keyboardProperties != null) {\n          \n          \n            \n                        customKeyboardConfig = this.keyboardConfiguration;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n            customKeyboardConfig = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(customKeyboardConfig);\n          \n          \n            \n                    if (customKeyboardConfig == null) {\n          \n          \n            \n                        if (this.keyboardConfiguration != null) {\n          \n          \n            \n                            customKeyboardConfig = this.keyboardConfiguration;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            customKeyboardConfig = defaultKeyboardConfiguration();\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "author": "bilal-alsharifi", "createdAt": "2021-02-17T21:11:29Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -393,12 +395,11 @@ public Integer presentKeyboard(@NonNull String initialText, @Nullable KeyboardPr\n             DebugTool.logWarning(TAG, \"There is a current or pending choice set, cancelling and continuing.\");\n         }\n \n-        if (customKeyboardConfig == null) {\n-            if (this.keyboardConfiguration != null) {\n-                customKeyboardConfig = this.keyboardConfiguration;\n-            } else {\n-                customKeyboardConfig = defaultKeyboardConfiguration();\n-            }\n+        KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n+        if (keyboardProperties != null) {\n+            customKeyboardConfig = this.keyboardConfiguration;\n+        } else {\n+            return null;\n         }", "originalCommit": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43e14f52a7eca4570ff558745e4794ad8528fa89", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex 8e8352956..3ba92d87c 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -395,11 +396,13 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n             DebugTool.logWarning(TAG, \"There is a current or pending choice set, cancelling and continuing.\");\n         }\n \n-        KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n-        if (keyboardProperties != null) {\n-            customKeyboardConfig = this.keyboardConfiguration;\n-        } else {\n-            return null;\n+        customKeyboardConfig = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(customKeyboardConfig);\n+        if (customKeyboardConfig == null) {\n+            if (this.keyboardConfiguration != null) {\n+                customKeyboardConfig = this.keyboardConfiguration;\n+            } else {\n+                customKeyboardConfig = defaultKeyboardConfiguration();\n+            }\n         }\n \n         // Present a keyboard with the choice set that we used to test VR's optional state\n"}}, {"oid": "30fdae8152d1e964bba67dd8b3653eb3d3249356", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/30fdae8152d1e964bba67dd8b3653eb3d3249356", "message": "Update base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\nCo-authored-by: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>", "committedDate": "2021-02-18T10:04:44Z", "type": "commit"}, {"oid": "65ffa59c0de5b4739f909aacab899f12a9f87288", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/65ffa59c0de5b4739f909aacab899f12a9f87288", "message": "Update base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\nCo-authored-by: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>", "committedDate": "2021-02-18T10:05:13Z", "type": "commit"}, {"oid": "43e14f52a7eca4570ff558745e4794ad8528fa89", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/43e14f52a7eca4570ff558745e4794ad8528fa89", "message": "[0238]\n- PR suggestions", "committedDate": "2021-02-18T10:13:39Z", "type": "commit"}, {"oid": "68c28a1d4d25e9c88a4634f8bc3daa3e83a45a36", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/68c28a1d4d25e9c88a4634f8bc3daa3e83a45a36", "message": "Merge remote-tracking branch 'origin/feature/0298_keyboard_enchancements' into feature/0298_keyboard_enchancements\n\n# Conflicts:\n#\tbase/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "committedDate": "2021-02-18T10:14:54Z", "type": "commit"}, {"oid": "4361c313a2e01ab506ba1945006071073b606a42", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4361c313a2e01ab506ba1945006071073b606a42", "message": "[0238]\n- Fix PR", "committedDate": "2021-02-18T10:52:36Z", "type": "commit"}, {"oid": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "message": "[0238]\n- Fix PR", "committedDate": "2021-02-18T11:00:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMyOTMzNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578329334", "bodyText": "@kostyaBoss this move is not required", "author": "vladmu", "createdAt": "2021-02-18T11:09:42Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -110,6 +113,7 @@\n         // capabilities\n         currentSystemContext = SystemContext.SYSCTXT_MAIN;\n         currentHMILevel = HMILevel.HMI_NONE;\n+        keyboardConfiguration = defaultKeyboardConfiguration();", "originalCommit": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMzNDQ3MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578334470", "bodyText": "Because createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration could return null we need to avoid setting null to this.keyboardConfiguration please consider my suggestion below:\n        KeyboardProperties properties = null;\n        if (keyboardConfiguration == null) {\n            properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n        }\n        if (properties == null) {\n            this.keyboardConfiguration = defaultKeyboardConfiguration();\n        } else {\n            this.keyboardConfiguration = properties;\n        }", "author": "vladmu", "createdAt": "2021-02-18T11:17:57Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -455,16 +459,52 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n         if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            this.keyboardConfiguration = properties;\n+            this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n         }", "originalCommit": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQ5NjU1OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578496558", "bodyText": "@vladmu  Good point. But I think we should always call createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration  even if the passed keyboardConfiguration is not null right? do you agree with this suggestion?\npublic void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n    KeyboardProperties properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n    if (properties == null) {\n        this.keyboardConfiguration = defaultKeyboardConfiguration();\n    } else {\n        this.keyboardConfiguration = properties;\n    }\n}", "author": "bilal-alsharifi", "createdAt": "2021-02-18T15:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMzNDQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODUxOTY1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578519650", "bodyText": "@vladmu Thanks for the updates! @bilal-alsharifi I've included this as a separate commit, please, let me know if we should revert it", "author": "kboskin", "createdAt": "2021-02-18T15:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMzNDQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex d075801bd..d4225e40e 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -456,10 +456,14 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        KeyboardProperties properties = null;\n         if (keyboardConfiguration == null) {\n+            properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n+        }\n+        if (properties == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n-            this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n+            this.keyboardConfiguration = properties;\n         }\n     }\n \n"}}, {"oid": "1daa2aed786ab0970eeb41cddf3ea97070c68a2c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1daa2aed786ab0970eeb41cddf3ea97070c68a2c", "message": "[0238]\n- Fix tests", "committedDate": "2021-02-18T12:55:16Z", "type": "commit"}, {"oid": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "message": "[0238]\n- Fix Vlad suggestion", "committedDate": "2021-02-18T15:36:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODUzMjk5Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578532996", "bodyText": "@kostyaBoss  We should call createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration whether keyboardConfiguration is null or not. Please consider this implemtation for the method\npublic void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n    KeyboardProperties properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n    if (properties == null) {\n        this.keyboardConfiguration = defaultKeyboardConfiguration();\n    } else {\n        this.keyboardConfiguration = properties;\n    }\n}", "author": "bilal-alsharifi", "createdAt": "2021-02-18T15:53:03Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,19 +456,59 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {", "originalCommit": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce0c7441449fd2ede8cf7b767c42a307a500c02b", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\nindex d4225e40e..06b08c09c 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\n@@ -456,10 +456,7 @@ abstract class BaseChoiceSetManager extends BaseSubManager {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        KeyboardProperties properties = null;\n-        if (keyboardConfiguration == null) {\n-            properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n-        }\n+        KeyboardProperties properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n         if (properties == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n"}}, {"oid": "ce0c7441449fd2ede8cf7b767c42a307a500c02b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ce0c7441449fd2ede8cf7b767c42a307a500c02b", "message": "[0238]\n- Fix PR comments", "committedDate": "2021-02-18T16:38:39Z", "type": "commit"}]}