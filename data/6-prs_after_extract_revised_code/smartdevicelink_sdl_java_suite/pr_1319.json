{"pr_number": 1319, "pr_title": "Cache Lock Screen Icons Retrieved from URL", "pr_createdAt": "2020-03-24T16:11:18Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319", "timeline": [{"oid": "25264c22003a862f668fdc9af8daf69b87080f75", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/25264c22003a862f668fdc9af8daf69b87080f75", "message": "Initial pass at Caching Lock Screen icon", "committedDate": "2020-03-23T20:55:01Z", "type": "commit"}, {"oid": "99934709fe36c32a171d434d70404e49b1a83d9f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/99934709fe36c32a171d434d70404e49b1a83d9f", "message": "Update Exceptions and integrate to lockscrnManager", "committedDate": "2020-03-24T14:58:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MjczNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r397282734", "bodyText": "can the class be package-private as it is not supposed to be used by the devs?", "author": "bilal-alsharifi", "createdAt": "2020-03-24T16:18:38Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.proxy.rpc.DateTime;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Date;\n+\n+public class LockScreenDeviceIconManager {", "originalCommit": "99934709fe36c32a171d434d70404e49b1a83d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex e00a50db2..5c97b470c 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -4,56 +4,67 @@ import android.content.Context;\n import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n-\n-import com.smartdevicelink.proxy.rpc.DateTime;\n+import android.util.Log;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.util.Date;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n \n-public class LockScreenDeviceIconManager {\n+class LockScreenDeviceIconManager {\n \n     private Context context;\n+    protected static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n     }\n \n-    boolean updateCachedImage(String iconIUrl) {\n-        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n-        String iconParameters = sharedPref.getString(iconIUrl, null);\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n         if(iconParameters == null) {\n+            Log.d(TAG, \"No Image Details Found In Preferences\");\n             return true;\n         } else {\n+            Log.d(TAG, \"Image Details Found\");\n             JSONObject jsonObject = null;\n             try {\n                 jsonObject = new JSONObject(iconParameters);\n                 long lastUpdatedTime = 0;\n-                lastUpdatedTime = (long) jsonObject.get(\"lastUpdatedTime\");\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n                 long currentTime = System.currentTimeMillis();\n \n                 long timeDifference = currentTime - lastUpdatedTime;\n                 long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n-\n+                Log.d(TAG, \"Time since last update: \" + daysBetweenLastUpdate);\n                 return daysBetweenLastUpdate >= 30;\n \n             } catch (JSONException e) {\n                 e.printStackTrace();\n+                Log.d(TAG, \"Exception Trying to read system preferences\");\n                 return true;\n             }\n         }\n     }\n \n     void saveFileToCache(Bitmap icon, String iconUrl) {\n-        File f = new File(this.context.getCacheDir(), iconUrl);\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir(), iconHash);\n         try {\n-            f.createNewFile();\n+            Log.d(TAG, \"Attempting to save to cache\");\n             ByteArrayOutputStream bos = new ByteArrayOutputStream();\n             icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n             byte[] bitmapdata = bos.toByteArray();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4OTY5Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r397289692", "bodyText": "I would use a more descriptive name and create a constant for that string instead of hard-coding it in multiple places. That applies to other hardcoded strings in the code. Something like:\n\n  \n    \n      sdl_java_suite/android/sdl_android/src/main/java/com/smartdevicelink/transport/SdlRouterService.java\n    \n    \n         Line 186\n      in\n      797b7a1\n    \n    \n    \n    \n\n        \n          \n           protected static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.device.status\";", "author": "bilal-alsharifi", "createdAt": "2020-03-24T16:27:18Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.proxy.rpc.DateTime;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Date;\n+\n+public class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+    }\n+\n+    boolean updateCachedImage(String iconIUrl) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconIUrl, null);\n+        if(iconParameters == null) {\n+            return true;\n+        } else {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(\"lastUpdatedTime\");\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+\n+                return daysBetweenLastUpdate >= 30;\n+\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        File f = new File(this.context.getCacheDir(), iconUrl);\n+        try {\n+            f.createNewFile();\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+            byte[] bitmapdata = bos.toByteArray();\n+\n+            FileOutputStream fos = null;\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+            JSONObject iconParams;\n+\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconUrl, iconParams);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconUrl, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(\"storedUrl\");\n+                String storedUrl = jsonObject.getString(\"storedUrl\");\n+                return BitmapFactory.decodeFile(storedUrl);\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconUrl, JSONObject jsonObject) throws JSONException {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);", "originalCommit": "99934709fe36c32a171d434d70404e49b1a83d9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex e00a50db2..5c97b470c 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -4,56 +4,67 @@ import android.content.Context;\n import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n-\n-import com.smartdevicelink.proxy.rpc.DateTime;\n+import android.util.Log;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.util.Date;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n \n-public class LockScreenDeviceIconManager {\n+class LockScreenDeviceIconManager {\n \n     private Context context;\n+    protected static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n     }\n \n-    boolean updateCachedImage(String iconIUrl) {\n-        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n-        String iconParameters = sharedPref.getString(iconIUrl, null);\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n         if(iconParameters == null) {\n+            Log.d(TAG, \"No Image Details Found In Preferences\");\n             return true;\n         } else {\n+            Log.d(TAG, \"Image Details Found\");\n             JSONObject jsonObject = null;\n             try {\n                 jsonObject = new JSONObject(iconParameters);\n                 long lastUpdatedTime = 0;\n-                lastUpdatedTime = (long) jsonObject.get(\"lastUpdatedTime\");\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n                 long currentTime = System.currentTimeMillis();\n \n                 long timeDifference = currentTime - lastUpdatedTime;\n                 long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n-\n+                Log.d(TAG, \"Time since last update: \" + daysBetweenLastUpdate);\n                 return daysBetweenLastUpdate >= 30;\n \n             } catch (JSONException e) {\n                 e.printStackTrace();\n+                Log.d(TAG, \"Exception Trying to read system preferences\");\n                 return true;\n             }\n         }\n     }\n \n     void saveFileToCache(Bitmap icon, String iconUrl) {\n-        File f = new File(this.context.getCacheDir(), iconUrl);\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir(), iconHash);\n         try {\n-            f.createNewFile();\n+            Log.d(TAG, \"Attempting to save to cache\");\n             ByteArrayOutputStream bos = new ByteArrayOutputStream();\n             icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n             byte[] bitmapdata = bos.toByteArray();\n"}}, {"oid": "f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "message": "Hash iconUrl and fix minor issues", "committedDate": "2020-03-24T18:39:22Z", "type": "commit"}, {"oid": "3958a341d058493a74ef48df75a22b81757bf008", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3958a341d058493a74ef48df75a22b81757bf008", "message": "Handle Edge Cases and initial tests", "committedDate": "2020-03-25T18:44:42Z", "type": "commit"}, {"oid": "95ae9b19db7179491574cbd1b0437ef69457a68a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/95ae9b19db7179491574cbd1b0437ef69457a68a", "message": "Continue Testing", "committedDate": "2020-03-25T20:35:24Z", "type": "commit"}, {"oid": "ae6aee4f0c95135e660294993b598e0275c151c2", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ae6aee4f0c95135e660294993b598e0275c151c2", "message": "Add passing test for saveFileToCache", "committedDate": "2020-03-25T21:00:23Z", "type": "commit"}, {"oid": "9855cacefcdc42ce3377e8f812a3ac9471aa1997", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9855cacefcdc42ce3377e8f812a3ac9471aa1997", "message": "Add test for getFileFromCache", "committedDate": "2020-03-25T21:05:42Z", "type": "commit"}, {"oid": "35cc26b3536d61f04b891119194226492a890d0a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/35cc26b3536d61f04b891119194226492a890d0a", "message": "Add happy path test for getFileFromCache", "committedDate": "2020-03-25T21:17:38Z", "type": "commit"}, {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/641a48ce265b0203cd24c4c58816b109a0569d61", "message": "Replace Logcat with DebugTool", "committedDate": "2020-03-26T15:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODIyNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400488225", "bodyText": "can we rename this method to something like shouldUpdateCachedImage() isCachedImageExpired()?  just to make it clear from the name that the method only checks if we need to update and it doesn't actually do the update.", "author": "bilal-alsharifi", "createdAt": "2020-03-30T20:55:42Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2OTEwMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401069101", "bodyText": "shouldUpdateCachedImage sounds good to me", "author": "RHenigan", "createdAt": "2020-03-31T16:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 23bfca4ad..2c4ba7a2a 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -68,7 +68,7 @@ class LockScreenDeviceIconManager {\n         File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n-        byte[] bitmapdata = bos.toByteArray();\n+        byte[] bitmapData = bos.toByteArray();\n \n         FileOutputStream fos = null;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTQ0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400489443", "bodyText": "Can we put the three error messages in one log statement using String.format()?", "author": "bilal-alsharifi", "createdAt": "2020-03-30T20:58:03Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t\t\tif (deviceLogo == null) {\n+\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} catch(IOException e){\n+\t\t\t\t\tLog.e(TAG, \"device Icon Error Downloading\");", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NTI2MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401075261", "bodyText": "made into one log statement", "author": "RHenigan", "createdAt": "2020-03-31T17:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex 00f8768eb..f962c65d2 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -379,13 +380,12 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n-\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n-\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.shouldUpdateCachedImage(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n \t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n \t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n \t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n \t\t\t\t\t\tif (deviceLogo == null) {\n \t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTg1MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400489851", "bodyText": "Can we put the two messages in one log statement using String.format() and use DebuggerTool instead?", "author": "bilal-alsharifi", "createdAt": "2020-03-30T20:58:51Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MDAyNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401070025", "bodyText": "changed to debugTool and removed unecessary URL log", "author": "RHenigan", "createdAt": "2020-03-31T16:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex 00f8768eb..f962c65d2 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -379,13 +380,12 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n-\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n-\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.shouldUpdateCachedImage(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n \t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n \t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n \t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n \t\t\t\t\t\tif (deviceLogo == null) {\n \t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400491063", "bodyText": "it is better to use DebugTool for logging D/I messages", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:01:12Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MDQ4MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401070481", "bodyText": "changed to. DebugTool", "author": "RHenigan", "createdAt": "2020-03-31T16:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex 00f8768eb..f962c65d2 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -379,13 +380,12 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n-\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n-\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.shouldUpdateCachedImage(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n \t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n \t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n \t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n \t\t\t\t\t\tif (deviceLogo == null) {\n \t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Nzk0NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400497945", "bodyText": "This doesn't always mean the image is up to date right? I believe the app will hit this else statement if the image is not cached at all.\nI suggest updating the log to be more clear or restructuring the if statements to separate the three cases to make it easier to follow:\n1-image not cached\n2-image cached and valid\n3-image cached but expired", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:14:01Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNzA1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401107055", "bodyText": "the method should only return false if the image is cached and valid, all other instances return true meaning we need to cache a new icon", "author": "RHenigan", "createdAt": "2020-03-31T17:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Nzk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDYwNQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401704605", "bodyText": "Ahh, gotcha. Can we name the method isIconCachedAndValid() in that case and flip the returned result accordingly? I think that makes it easier to follow what is happening.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Nzk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex 00f8768eb..f962c65d2 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -379,13 +380,12 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n-\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n-\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.shouldUpdateCachedImage(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n \t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n \t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n \t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n \t\t\t\t\t\tif (deviceLogo == null) {\n \t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDc4Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400504787", "bodyText": "Would it be possible to reuse the method in LockScreenDeviceIconManager() by making it package-private?", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:27:34Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(35, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconUrl) {\n+        JSONObject jsonObject = new JSONObject();\n+        try {\n+            jsonObject.put(STORED_URL, cahceIconUrl);\n+            long timeDifferenceInMilliSeconds = DaysOld * 1000 * 60 * 60 * 24;\n+            jsonObject.put(LAST_UPDATED_TIME, System.currentTimeMillis() - timeDifferenceInMilliSeconds);\n+            return jsonObject.toString();\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private String getMD5HashFromIconUrl(String iconUrl) {", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NDU4Nw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401074587", "bodyText": "The way it is implemented I need to define the mock (using the md5 hash method) before the class in instantiated, if the class is instantiated before the mock is defined it breaks the test.", "author": "RHenigan", "createdAt": "2020-03-31T17:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NTI2MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401685261", "bodyText": "Will passing new LockScreenDeviceIconManager(null).getMD5HashFromIconUrl(ICON_URL)) work? we will have to check for null in the LockScreenDeviceIconManager constructor in that case.", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\nindex d65cc8348..53bfe3a55 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n\n@@ -3,8 +3,6 @@ package com.smartdevicelink.managers.lockscreen;\n import android.content.Context;\n import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-import android.util.Log;\n \n import com.smartdevicelink.AndroidTestCase2;\n import com.smartdevicelink.util.AndroidTools;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMDQxOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400510418", "bodyText": "Do you think we can simplify that a bit by only storing the hash as key and the time as a value instead of saving the JSON in shared prefs?\ncurrently, this is how the share prefs xml look like. We save the hash twice. I feel that is unesceasry\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"935e06761f887b20a5a10242faaf6ecf\">{&quot;storedUrl&quot;:&quot;\\/data\\/user\\/0\\/io.livio.sdltestsuite.app1\\/cache\\/sdl\\/lock_screen_icon\\/935e06761f887b20a5a10242faaf6ecf&quot;,&quot;lastUpdatedTime&quot;:1585600940171}</string>\n</map>\n\nCannot we just store them like that? This way we don't even need to make s JSON.\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"935e06761f887b20a5a10242faaf6ecf\">1585600940171</string>\n</map>", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:38:58Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        JSONObject iconParams;\n+        try {\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconHash, iconParams);\n+        } catch (JSONException e) {\n+            DebugTool.logError(\"Failed to save to shared preferences, clearing cache icon directory\");\n+            clearIconDirectory();\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                String storedUrl = jsonObject.getString(STORED_URL);\n+                Bitmap cachedIcon = BitmapFactory.decodeFile(storedUrl);\n+                if(cachedIcon == null) {\n+                    DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                    clearIconDirectory();\n+                    return null;\n+                } else {\n+                    return cachedIcon;\n+                }\n+            } catch (JSONException e) {\n+                DebugTool.logError(\"Failed to get file from cache, removing shared pref\");\n+                sharedPref.edit().remove(iconHash).commit();\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash, JSONObject jsonObject) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, jsonObject.toString());\n+        editor.commit();\n+    }\n+\n+    private JSONObject buildDeviceIconParameters(String storedUrl) throws JSONException {", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODg5OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401138898", "bodyText": "Implemented suggestion and fixed associated code", "author": "RHenigan", "createdAt": "2020-03-31T18:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMDQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 23bfca4ad..2c4ba7a2a 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -68,7 +68,7 @@ class LockScreenDeviceIconManager {\n         File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n-        byte[] bitmapdata = bos.toByteArray();\n+        byte[] bitmapData = bos.toByteArray();\n \n         FileOutputStream fos = null;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMjU3NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400512575", "bodyText": "If I understand it correctly, this saves the file path, not the url right? If so, can we change the name to filePath  to make it easier to read?", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:43:26Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        JSONObject iconParams;\n+        try {\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconHash, iconParams);\n+        } catch (JSONException e) {\n+            DebugTool.logError(\"Failed to save to shared preferences, clearing cache icon directory\");\n+            clearIconDirectory();\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                String storedUrl = jsonObject.getString(STORED_URL);\n+                Bitmap cachedIcon = BitmapFactory.decodeFile(storedUrl);\n+                if(cachedIcon == null) {\n+                    DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                    clearIconDirectory();\n+                    return null;\n+                } else {\n+                    return cachedIcon;\n+                }\n+            } catch (JSONException e) {\n+                DebugTool.logError(\"Failed to get file from cache, removing shared pref\");\n+                sharedPref.edit().remove(iconHash).commit();\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash, JSONObject jsonObject) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, jsonObject.toString());\n+        editor.commit();\n+    }\n+\n+    private JSONObject buildDeviceIconParameters(String storedUrl) throws JSONException {\n+        JSONObject parametersJson = new JSONObject();\n+        parametersJson.put(STORED_URL, storedUrl);", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3NzM5Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401077392", "bodyText": "Refactored", "author": "RHenigan", "createdAt": "2020-03-31T17:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 23bfca4ad..2c4ba7a2a 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -68,7 +68,7 @@ class LockScreenDeviceIconManager {\n         File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n-        byte[] bitmapdata = bos.toByteArray();\n+        byte[] bitmapData = bos.toByteArray();\n \n         FileOutputStream fos = null;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDAyMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400514023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] bitmapdata = bos.toByteArray();\n          \n          \n            \n                    byte[] bitmapData = bos.toByteArray();", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:46:24Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 23bfca4ad..2c4ba7a2a 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -68,7 +68,7 @@ class LockScreenDeviceIconManager {\n         File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n-        byte[] bitmapdata = bos.toByteArray();\n+        byte[] bitmapData = bos.toByteArray();\n \n         FileOutputStream fos = null;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDIxOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400514218", "bodyText": "Can we remove the extra lines before and after this line?", "author": "bilal-alsharifi", "createdAt": "2020-03-30T21:46:48Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);", "originalCommit": "641a48ce265b0203cd24c4c58816b109a0569d61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 23bfca4ad..2c4ba7a2a 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -68,7 +68,7 @@ class LockScreenDeviceIconManager {\n         File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n-        byte[] bitmapdata = bos.toByteArray();\n+        byte[] bitmapData = bos.toByteArray();\n \n         FileOutputStream fos = null;\n         try {\n"}}, {"oid": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8facbe9d4102a10348060ff06b0b3195ffe00bb2", "message": "Update android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\nCo-Authored-By: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>", "committedDate": "2020-03-31T17:01:31Z", "type": "commit"}, {"oid": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "message": "Fixes from PR Review", "committedDate": "2020-03-31T18:50:28Z", "type": "commit"}, {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4105cbd349f557ea7af53647d268d2fc8cacd66d", "message": "Merge branch 'bugfix/issue_1316' of github.com:smartdevicelink/sdl_java_suite into bugfix/issue_1316", "committedDate": "2020-03-31T18:50:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NjMwNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401686307", "bodyText": "Can we remove the extra lines here?", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:03:55Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(35));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(15));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconPath) {\n+        JSONObject jsonObject = new JSONObject();\n+        try {\n+            jsonObject.put(STORED_PATH, cahceIconPath);\n+            long timeDifferenceInMilliSeconds = DaysOld * 1000 * 60 * 60 * 24;\n+            jsonObject.put(LAST_UPDATED_TIME, System.currentTimeMillis() - timeDifferenceInMilliSeconds);\n+            return jsonObject.toString();\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private String getMD5HashFromIconUrl(String iconUrl) {\n+        String iconHash = null;\n+        try {\n+            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+            byte[] messageDigest = md.digest(iconUrl.getBytes());\n+            BigInteger no = new BigInteger(1, messageDigest);\n+            String hashtext = no.toString(16);\n+            while (hashtext.length() < 32) {\n+                hashtext = \"0\" + hashtext;\n+            }\n+            iconHash = hashtext;\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();\n+        }\n+        return iconHash;\n+    }\n+\n+    private String daysToMillisecondsAsString(int days) {\n+        long milliSeconds = (long) days * 24 * 60 * 60 * 1000;\n+        long previousDay = System.currentTimeMillis() - milliSeconds;\n+        return previousDay + \"\";\n+    }\n+", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\nindex 53bfe3a55..0526d3088 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n\n@@ -31,7 +31,6 @@ public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n     private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n     private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n     private static final String STORED_PATH = \"storedPath\";\n-    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n \n     public void setup() throws Exception {\n         super.setUp();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjEwOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401712108", "bodyText": "the last three vars are not used anymore", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:38:16Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f10f4c3c5..f564aa8a7 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -7,9 +7,6 @@ import android.graphics.BitmapFactory;\n \n import com.smartdevicelink.util.DebugTool;\n \n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzY4Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401717686", "bodyText": "iconParameters has only the time now after removing the JOSN file. Can we rename the iconParameters var to iconLastUpdatedTime?", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:45:55Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f10f4c3c5..f564aa8a7 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -7,9 +7,6 @@ import android.graphics.BitmapFactory;\n \n import com.smartdevicelink.util.DebugTool;\n \n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMDExMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401720113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void writeDeviceIconParametersToSystemPreferences(String iconHash) {\n          \n          \n            \n                private void writeDeviceIconParametersToSharedPreferences(String iconHash) {", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:49:04Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash) {", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f10f4c3c5..f564aa8a7 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -7,9 +7,6 @@ import android.graphics.BitmapFactory;\n \n import com.smartdevicelink.util.DebugTool;\n \n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMTQwMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401721403", "bodyText": "I suggest using String valueOf(long l) instead of contacting an empty string to convert a long to string", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:50:49Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, System.currentTimeMillis() + \"\");", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f10f4c3c5..f564aa8a7 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -7,9 +7,6 @@ import android.graphics.BitmapFactory;\n \n import com.smartdevicelink.util.DebugTool;\n \n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjM5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401722394", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String iconParameters = sharedPref.getString(iconHash, null);\n          \n          \n            \n                    String iconLastUpdatedTime = sharedPref.getString(iconHash, null);", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:52:16Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f10f4c3c5..f564aa8a7 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -7,9 +7,6 @@ import android.graphics.BitmapFactory;\n \n import com.smartdevicelink.util.DebugTool;\n \n-import org.json.JSONException;\n-import org.json.JSONObject;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDU0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401724546", "bodyText": "this is unused", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:55:09Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\nindex 53bfe3a55..0526d3088 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n\n@@ -31,7 +31,6 @@ public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n     private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n     private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n     private static final String STORED_PATH = \"storedPath\";\n-    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n \n     public void setup() throws Exception {\n         super.setUp();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTU5NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401725595", "bodyText": "I am not sure why we still need that method if JSON is not used anymore", "author": "bilal-alsharifi", "createdAt": "2020-04-01T15:56:38Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(35));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(15));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconPath) {", "originalCommit": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\nindex 53bfe3a55..0526d3088 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java\n\n@@ -31,7 +31,6 @@ public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n     private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n     private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n     private static final String STORED_PATH = \"storedPath\";\n-    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n \n     public void setup() throws Exception {\n         super.setUp();\n"}}, {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "message": "Updates based on PR feedback", "committedDate": "2020-04-01T17:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjU0NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402552544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n          \n          \n            \n                private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n          \n      \n    \n    \n  \n\nJust a suggestion to be clear with file and directory naming", "author": "joeljfischer", "createdAt": "2020-04-02T19:16:15Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";", "originalCommit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f564aa8a7..3023f2c29 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -5,11 +5,13 @@ import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n \n+import com.smartdevicelink.util.AndroidTools;\n import com.smartdevicelink.util.DebugTool;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDAxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402560014", "bodyText": "On iOS, this logic is all contained by the SDLCacheFileManager (your LockScreenDeviceIconManager) itself, I think that's a better solution. iOS calls a method with a completion handler that returns either an image or an error.", "author": "joeljfischer", "createdAt": "2020-04-02T19:29:43Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +380,31 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.isIconCachedAndValid(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n+\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t\t\tif (deviceLogo == null) {\n+\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t}\n+\t\t\t\t} catch(IOException e){\n+\t\t\t\t\tLog.e(TAG, \"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t}", "originalCommit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzE0Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r403133143", "bodyText": "Logic pulled into LockScreenDeviceIconManager", "author": "RHenigan", "createdAt": "2020-04-03T16:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex 320deced6..ee7efb534 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -379,23 +379,17 @@ public class LockScreenManager extends BaseSubManager {\n \t\tnew Thread(new Runnable(){\n \t\t\t@Override\n \t\t\tpublic void run(){\n-\t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.isIconCachedAndValid(url)) {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n-\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n-\t\t\t\t\t\tif (deviceLogo == null) {\n-\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n-\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\tmLockScreenDeviceIconManager.retrieveIcon(url, new LockScreenDeviceIconManager.OnIconRetrievedListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onImageRetrieved(Bitmap icon) {\n+\t\t\t\t\t\tdeviceLogo = icon;\n \t\t\t\t\t}\n-\t\t\t\t} catch(IOException e){\n-\t\t\t\t\tLog.e(TAG, \"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n-\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n-\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onError(String info) {\n+\t\t\t\t\t\tDebugTool.logError(info);\n+\t\t\t\t\t}\n+\t\t\t\t});\n \t\t\t\tif(deviceLogo != null) {\n \t\t\t\t\tIntent intent = new Intent(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_DOWNLOADED);\n \t\t\t\t\tintent.putExtra(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_EXTRA, deviceLogoEnabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4Mjc1Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402582753", "bodyText": "As mentioned above, I think a better entry into this class is something like:\nvoid retrieveIcon(String iconURL, OnImageRetrievedListener imageRetrievedListener)\nWhere OnImageRetrievedListener is something like:\ninterface OnImageRetrievedListener {\n\tvoid onImageRetrieved(Bitmap icon);\n\tvoid onError(String info);\n}", "author": "joeljfischer", "createdAt": "2020-04-02T20:12:07Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {", "originalCommit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzc0Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r403133746", "bodyText": "OnIconRetrievedListener Implemented", "author": "RHenigan", "createdAt": "2020-04-03T16:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4Mjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f564aa8a7..3023f2c29 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -5,11 +5,13 @@ import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n \n+import com.smartdevicelink.util.AndroidTools;\n import com.smartdevicelink.util.DebugTool;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NTEzOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402585138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String getMD5HashFromIconUrl(String iconUrl) {\n          \n          \n            \n                private String getMD5HashFromIconUrl(String iconUrl) {", "author": "joeljfischer", "createdAt": "2020-04-02T20:17:27Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate < 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSharedPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+\n+        if (iconLastUpdatedTime != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSharedPreferences(String iconHash) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, String.valueOf(System.currentTimeMillis()));\n+        editor.commit();\n+    }\n+\n+    String getMD5HashFromIconUrl(String iconUrl) {", "originalCommit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk5ODY1NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402998655", "bodyText": "This was changed to be package private to access from the tests to avoid duplicating this method in the test", "author": "RHenigan", "createdAt": "2020-04-03T13:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NTEzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzQ0OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r403133448", "bodyText": "No longer needed in tests, method made private", "author": "RHenigan", "createdAt": "2020-04-03T16:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NTEzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f564aa8a7..3023f2c29 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -5,11 +5,13 @@ import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n \n+import com.smartdevicelink.util.AndroidTools;\n import com.smartdevicelink.util.DebugTool;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NzkwMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402587902", "bodyText": "Can this be private?", "author": "joeljfischer", "createdAt": "2020-04-02T20:24:11Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate < 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSharedPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {", "originalCommit": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMzUyOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r403133528", "bodyText": "made private", "author": "RHenigan", "createdAt": "2020-04-03T16:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NzkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex f564aa8a7..3023f2c29 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -5,11 +5,13 @@ import android.content.SharedPreferences;\n import android.graphics.Bitmap;\n import android.graphics.BitmapFactory;\n \n+import com.smartdevicelink.util.AndroidTools;\n import com.smartdevicelink.util.DebugTool;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n"}}, {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f9b3dba9e36564e370de47e08610077a5f933c5c", "message": "Pull logic into DeviceIconManager and use listener", "committedDate": "2020-04-03T15:40:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5OTAzNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404299034", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n          \n          \n            \n                            // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n          \n          \n            \n                            DebugTool.logInfo(\"Lock Screen Icon Update Needed\");", "author": "joeljfischer", "createdAt": "2020-04-06T18:25:41Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NDU4OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404984589", "bodyText": "added", "author": "RHenigan", "createdAt": "2020-04-07T17:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5OTAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "0259aba1670b0268e61490f7e55d141132afd314", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 3023f2c29..387ed2807 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -16,6 +16,12 @@ import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n class LockScreenDeviceIconManager {\n \n     private Context context;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4ODY3OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404788678", "bodyText": "Please add documentation to all methods", "author": "joeljfischer", "createdAt": "2020-04-07T13:00:01Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NzM5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405097394", "bodyText": "Documentation added, If you have any feedback or feel I am missing any details please let me know", "author": "RHenigan", "createdAt": "2020-04-07T20:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4ODY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "0259aba1670b0268e61490f7e55d141132afd314", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 3023f2c29..387ed2807 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -16,6 +16,12 @@ import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n class LockScreenDeviceIconManager {\n \n     private Context context;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MDQ2MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404790461", "bodyText": "Do you want to write the icon parameters to shared prefs if the write of the image to disk failed?", "author": "joeljfischer", "createdAt": "2020-04-07T13:02:40Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -73,13 +105,13 @@ void saveFileToCache(Bitmap icon, String iconUrl) {\n         writeDeviceIconParametersToSharedPreferences(iconHash);", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NDQyMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404984421", "bodyText": "moved call to be within the try block, if write fails details will no longer be saved to shared preferences", "author": "RHenigan", "createdAt": "2020-04-07T17:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0259aba1670b0268e61490f7e55d141132afd314", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 3023f2c29..387ed2807 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -96,15 +123,18 @@ class LockScreenDeviceIconManager {\n             fos.write(bitmapData);\n             fos.flush();\n             fos.close();\n+            writeDeviceIconParametersToSharedPreferences(iconHash);\n         } catch (Exception e) {\n             DebugTool.logError(\"Failed to save icon to cache\");\n             e.printStackTrace();\n-            return;\n         }\n-\n-        writeDeviceIconParametersToSharedPreferences(iconHash);\n     }\n \n+    /**\n+     * Will try to retrieve icon bitmap from cached directory\n+     * @param iconUrl the url where the icon was retrieved will be hashed and used to look up file location\n+     * @return bitmap of device icon or null if it fails to find the icon or read from shared preferences\n+     */\n     private Bitmap getFileFromCache(String iconUrl) {\n         String iconHash = getMD5HashFromIconUrl(iconUrl);\n         SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0MjU5MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404842591", "bodyText": "If the icon is null here, it should return an error, right?", "author": "joeljfischer", "createdAt": "2020-04-07T14:14:43Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                saveFileToCache(icon, iconURL);\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NTA1MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404985050", "bodyText": "added check, will call onError if downloaded icon is null", "author": "RHenigan", "createdAt": "2020-04-07T17:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0MjU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0259aba1670b0268e61490f7e55d141132afd314", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 3023f2c29..387ed2807 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -16,6 +16,12 @@ import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n class LockScreenDeviceIconManager {\n \n     private Context context;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NjE2MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404866161", "bodyText": "I don't think that this is necessarily what we want to do here, unlike iOS. On iOS, all the image file information is contained in one file. So on iOS, when you clear the icon directory, the file went along with it. Here, if the directory is cleared, all the icon information remains in SharedPreferences. That means that attempting to retrieve an icon may fail and then we'll have a cascading set of retrieval failures because old data is contained in SharedPreferences that we know isn't accurate.\nI can think of a few possibilities to solve this:\n\nWe don't clear the icon directory if an error occurs. This isn't aligned with iOS' mitigation strategy and has the possibility of leaving icons in the directory that are unused.\nInstead of storing the data in separate SharedPreferences keys, use a single key, store the information in JSON and store the JSON in the SharedPreferences under that single key. Then when you clear the icon directory, you clear the JSON document as well.", "author": "joeljfischer", "createdAt": "2020-04-07T14:44:47Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -73,13 +105,13 @@ void saveFileToCache(Bitmap icon, String iconUrl) {\n         writeDeviceIconParametersToSharedPreferences(iconHash);\n     }\n \n-    Bitmap getFileFromCache(String iconUrl) {\n+    private Bitmap getFileFromCache(String iconUrl) {\n         String iconHash = getMD5HashFromIconUrl(iconUrl);\n         SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n         String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n \n         if (iconLastUpdatedTime != null) {\n-            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_DIRECTORY_PATH + \"/\" + iconHash);\n             if(cachedIcon == null) {\n                 DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n                 clearIconDirectory();", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MjQ4NQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404982485", "bodyText": "I see what you mean, we would also have the option of sharedPref.edit().clear().commit();\nhttps://developer.android.com/reference/android/content/SharedPreferences.Editor#clear()\nwould this be closer to the ios implementation?", "author": "RHenigan", "createdAt": "2020-04-07T17:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NjE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NjYzMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405076632", "bodyText": "If that clears all data about cached icons and their expiration dates, then yes, I believe it would.", "author": "joeljfischer", "createdAt": "2020-04-07T20:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NjE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0259aba1670b0268e61490f7e55d141132afd314", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 3023f2c29..387ed2807 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -96,15 +123,18 @@ class LockScreenDeviceIconManager {\n             fos.write(bitmapData);\n             fos.flush();\n             fos.close();\n+            writeDeviceIconParametersToSharedPreferences(iconHash);\n         } catch (Exception e) {\n             DebugTool.logError(\"Failed to save icon to cache\");\n             e.printStackTrace();\n-            return;\n         }\n-\n-        writeDeviceIconParametersToSharedPreferences(iconHash);\n     }\n \n+    /**\n+     * Will try to retrieve icon bitmap from cached directory\n+     * @param iconUrl the url where the icon was retrieved will be hashed and used to look up file location\n+     * @return bitmap of device icon or null if it fails to find the icon or read from shared preferences\n+     */\n     private Bitmap getFileFromCache(String iconUrl) {\n         String iconHash = getMD5HashFromIconUrl(iconUrl);\n         SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2Njc4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404866784", "bodyText": "The indentation seems off on these", "author": "joeljfischer", "createdAt": "2020-04-07T14:45:40Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -379,23 +379,17 @@ private void downloadDeviceIcon(final String url){\n \t\tnew Thread(new Runnable(){\n \t\t\t@Override\n \t\t\tpublic void run(){\n-\t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.isIconCachedAndValid(url)) {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n-\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n-\t\t\t\t\t\tif (deviceLogo == null) {\n-\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n-\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\tmLockScreenDeviceIconManager.retrieveIcon(url, new LockScreenDeviceIconManager.OnIconRetrievedListener() {", "originalCommit": "f9b3dba9e36564e370de47e08610077a5f933c5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjU5MA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404976590", "bodyText": "this is the removed code, the new code seems aligned correctly with the run method above to me.", "author": "RHenigan", "createdAt": "2020-04-07T17:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2Njc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDkzMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405074932", "bodyText": "I just pulled your latest updates, it still appears incorrect on the new code. They appear to have an extra tab of indentation.", "author": "joeljfischer", "createdAt": "2020-04-07T19:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2Njc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "1831f2e8218f31bb9fb3128714b28ce4a32c6671", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex ee7efb534..2e81894ed 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -383,6 +381,14 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onImageRetrieved(Bitmap icon) {\n \t\t\t\t\t\tdeviceLogo = icon;\n+\t\t\t\t\t\tif(deviceLogo != null) {\n+\t\t\t\t\t\t\tIntent intent = new Intent(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_DOWNLOADED);\n+\t\t\t\t\t\t\tintent.putExtra(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_EXTRA, deviceLogoEnabled);\n+\t\t\t\t\t\t\tintent.putExtra(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_BITMAP, deviceLogo);\n+\t\t\t\t\t\t\tif (context.get() != null) {\n+\t\t\t\t\t\t\t\tcontext.get().sendBroadcast(intent);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t@Override\n"}}, {"oid": "0259aba1670b0268e61490f7e55d141132afd314", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0259aba1670b0268e61490f7e55d141132afd314", "message": "Adding documentation and PR changes", "committedDate": "2020-04-07T18:01:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDA0Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405084042", "bodyText": "If the getFileFromCache returns a null icon, it shouldn't return it here. It should return an error through the onImageRetrieved, right?", "author": "joeljfischer", "createdAt": "2020-04-07T20:14:34Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                if (icon != null) {\n+                    saveFileToCache(icon, iconURL);\n+                    iconRetrievedListener.onImageRetrieved(icon);\n+                } else {\n+                    iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);", "originalCommit": "0259aba1670b0268e61490f7e55d141132afd314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMTk5Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405101993", "bodyText": "null check added", "author": "RHenigan", "createdAt": "2020-04-07T20:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "92d01bfe8a9f5e03fccf47827ed574b7b9fa2b49", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 387ed2807..83b729da5 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -71,7 +71,11 @@ class LockScreenDeviceIconManager {\n         } catch (IOException e) {\n             iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n             icon = getFileFromCache(iconURL);\n-            iconRetrievedListener.onImageRetrieved(icon);\n+            if (icon != null) {\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                iconRetrievedListener.onError(\"Unable to retrieve icon from cache\");\n+            }\n         }\n     }\n \n"}}, {"oid": "92d01bfe8a9f5e03fccf47827ed574b7b9fa2b49", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/92d01bfe8a9f5e03fccf47827ed574b7b9fa2b49", "message": "Add null check", "committedDate": "2020-04-07T20:46:20Z", "type": "commit"}, {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "message": "Fix test", "committedDate": "2020-04-07T21:04:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNzUwNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405627504", "bodyText": "There are some unused imports in the class", "author": "bilal-alsharifi", "createdAt": "2020-04-08T15:48:53Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -82,11 +83,14 @@\n \tprivate boolean mLockScreenHasBeenDismissed, lockscreenDismissReceiverRegistered, receivedFirstDDNotification;\n \tprivate String mLockscreenWarningMsg;\n \tprivate BroadcastReceiver mLockscreenDismissedReceiver;\n+\tprivate LockScreenDeviceIconManager mLockScreenDeviceIconManager;", "originalCommit": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMDEwMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405810101", "bodyText": "removed", "author": "RHenigan", "createdAt": "2020-04-08T20:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNzUwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMTU4OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405631588", "bodyText": "can we get the url and replace it in one line?\ndeviceIconUrl = msg.getUrl().replace(\"http://\", \"https://\");", "author": "bilal-alsharifi", "createdAt": "2020-04-08T15:54:22Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -232,6 +236,7 @@ public void onNotified(RPCNotification notification) {\n \t\t\t\t\t\t\tmsg.getUrl() != null) {\n \t\t\t\t\t\t// send intent to activity to download icon from core\n \t\t\t\t\t\tdeviceIconUrl = msg.getUrl();", "originalCommit": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMDUwNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405810507", "bodyText": "yes, made the change", "author": "RHenigan", "createdAt": "2020-04-08T20:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "1831f2e8218f31bb9fb3128714b28ce4a32c6671", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex d05f41d7e..2e81894ed 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -235,8 +233,7 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t\t\tif (msg.getRequestType() == RequestType.LOCK_SCREEN_ICON_URL &&\n \t\t\t\t\t\t\tmsg.getUrl() != null) {\n \t\t\t\t\t\t// send intent to activity to download icon from core\n-\t\t\t\t\t\tdeviceIconUrl = msg.getUrl();\n-\t\t\t\t\t\tdeviceIconUrl = deviceIconUrl.replace(\"http://\", \"https://\");\n+\t\t\t\t\t\tdeviceIconUrl = msg.getUrl().replace(\"http://\", \"https://\");\n \t\t\t\t\t\tdownloadDeviceIcon(deviceIconUrl);\n \t\t\t\t\t}\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405645544", "bodyText": "what happens if the code hits the if statement on line 54 but failed to download the icon? I think it should call onError() in that case", "author": "bilal-alsharifi", "createdAt": "2020-04-08T16:14:47Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {", "originalCommit": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODY3NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405808674", "bodyText": "If the download fails it throws an IOException which is caught below", "author": "RHenigan", "createdAt": "2020-04-08T20:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzOTczMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405839731", "bodyText": "Hmm, that is right. In that case, the else statement on line 67 will never be hit right?", "author": "bilal-alsharifi", "createdAt": "2020-04-08T21:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0MTU5Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405841593", "bodyText": "line 67 would occur if dowonloadImage returns null rather than throw an exception, so I would need to look and see if downloadImage can return null", "author": "RHenigan", "createdAt": "2020-04-08T22:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTExMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r406191113", "bodyText": "downloadImage is returning the following\nBitmap result = BitmapFactory.decodeStream(bis);\nbis.close();\nreturn result;\n.decodeStream can return null so it is possible to get null from downloadImage without an excption being thrown", "author": "RHenigan", "createdAt": "2020-04-09T13:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTYzNg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r406205636", "bodyText": "in that case, we should always check if the value is null after trying to download the image.", "author": "bilal-alsharifi", "createdAt": "2020-04-09T13:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMzg4NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r406223884", "bodyText": "Yeah, I will add a null check", "author": "RHenigan", "createdAt": "2020-04-09T13:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "2714061ca222d0282437ac2fc9a22c77da0e4ba8", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 83b729da5..b2b8e6b14 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -54,7 +54,12 @@ class LockScreenDeviceIconManager {\n                 if (icon == null) {\n                     DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n                     icon = AndroidTools.downloadImage(iconURL);\n-                    saveFileToCache(icon, iconURL);\n+                    if (icon != null) {\n+                        saveFileToCache(icon, iconURL);\n+                    } else {\n+                        iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                        return;\n+                    }\n                 }\n                 iconRetrievedListener.onImageRetrieved(icon);\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjcyMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405656722", "bodyText": "I don't think that will work. We are retrieving the icon in an async way and immediately use the icon without waiting for onImageRetrieved () to be called. I think deviceLogo will always be null. I suggest moving the code after the async call to be inside the onImageRetrieved() callback.", "author": "bilal-alsharifi", "createdAt": "2020-04-08T16:31:32Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -375,17 +380,26 @@ private void downloadDeviceIcon(final String url){\n \t\tnew Thread(new Runnable(){\n \t\t\t@Override\n \t\t\tpublic void run(){\n-\t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\tmLockScreenDeviceIconManager.retrieveIcon(url, new LockScreenDeviceIconManager.OnIconRetrievedListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onImageRetrieved(Bitmap icon) {", "originalCommit": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzkxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405807914", "bodyText": "moved", "author": "RHenigan", "createdAt": "2020-04-08T20:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "1831f2e8218f31bb9fb3128714b28ce4a32c6671", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\nindex d05f41d7e..2e81894ed 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java\n\n@@ -384,6 +381,14 @@ public class LockScreenManager extends BaseSubManager {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onImageRetrieved(Bitmap icon) {\n \t\t\t\t\t\tdeviceLogo = icon;\n+\t\t\t\t\t\tif(deviceLogo != null) {\n+\t\t\t\t\t\t\tIntent intent = new Intent(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_DOWNLOADED);\n+\t\t\t\t\t\t\tintent.putExtra(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_EXTRA, deviceLogoEnabled);\n+\t\t\t\t\t\t\tintent.putExtra(SDLLockScreenActivity.LOCKSCREEN_DEVICE_LOGO_BITMAP, deviceLogo);\n+\t\t\t\t\t\t\tif (context.get() != null) {\n+\t\t\t\t\t\t\t\tcontext.get().sendBroadcast(intent);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDgwMQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405660801", "bodyText": "Just to confirm, this clears only the icon shared preferences not all shared prefs for the app, right?", "author": "bilal-alsharifi", "createdAt": "2020-04-08T16:37:52Z", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                if (icon != null) {\n+                    saveFileToCache(icon, iconURL);\n+                    iconRetrievedListener.onImageRetrieved(icon);\n+                } else {\n+                    iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);\n+            if (icon != null) {\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                iconRetrievedListener.onError(\"Unable to retrieve icon from cache\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Will decide if a cached icon is available and up to date\n+     * @param iconUrl url will be hashed and used to look up last updated timestamp in shared preferences\n+     * @return True when icon details are in shared preferences and less than 30 days old, False if icon details are too old or not found\n+     */\n+    private boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().clear().commit();", "originalCommit": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzUyOA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405807528", "bodyText": "Yes, we create a new sharedPreference witht the key of sdl.lockScreenIcon, this is the only shared preference we are referencing withing this class", "author": "RHenigan", "createdAt": "2020-04-08T20:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDgwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2714061ca222d0282437ac2fc9a22c77da0e4ba8", "chunk": "diff --git a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\nindex 83b729da5..b2b8e6b14 100644\n--- a/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n+++ b/android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\n@@ -54,7 +54,12 @@ class LockScreenDeviceIconManager {\n                 if (icon == null) {\n                     DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n                     icon = AndroidTools.downloadImage(iconURL);\n-                    saveFileToCache(icon, iconURL);\n+                    if (icon != null) {\n+                        saveFileToCache(icon, iconURL);\n+                    } else {\n+                        iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                        return;\n+                    }\n                 }\n                 iconRetrievedListener.onImageRetrieved(icon);\n             } else {\n"}}, {"oid": "1831f2e8218f31bb9fb3128714b28ce4a32c6671", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1831f2e8218f31bb9fb3128714b28ce4a32c6671", "message": "PR Changes requested", "committedDate": "2020-04-08T20:59:25Z", "type": "commit"}, {"oid": "0aaf1f77007fa170d9f8aa3fc3c1702c91ba21c8", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0aaf1f77007fa170d9f8aa3fc3c1702c91ba21c8", "message": "Checkout manifest from develop", "committedDate": "2020-04-08T21:57:29Z", "type": "commit"}, {"oid": "2714061ca222d0282437ac2fc9a22c77da0e4ba8", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/2714061ca222d0282437ac2fc9a22c77da0e4ba8", "message": "Add null check for downloaded image", "committedDate": "2020-04-09T14:00:02Z", "type": "commit"}]}