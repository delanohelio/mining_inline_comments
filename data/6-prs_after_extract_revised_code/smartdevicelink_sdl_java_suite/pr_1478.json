{"pr_number": 1478, "pr_title": "Fix Issue 1465 - NPE in ManagerUtility", "pr_createdAt": "2020-09-02T16:12:19Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1478", "timeline": [{"oid": "9829fb3228e8bd8a38a67a32a3666fcc45acf066", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9829fb3228e8bd8a38a67a32a3666fcc45acf066", "message": "Fix potential NPEs in ManagerUtility class\n\nAlso added unit tests for class", "committedDate": "2020-09-02T16:08:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMTE5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1478#discussion_r482201194", "bodyText": "This passes after the fix, right? can we remove the comment if it is not relevant anymore?", "author": "bilal-alsharifi", "createdAt": "2020-09-02T16:24:50Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/ManagerUtilityTests.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package com.smartdevicelink.managers;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.smartdevicelink.proxy.rpc.ImageField;\n+import com.smartdevicelink.proxy.rpc.TextField;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.CharacterSet;\n+import com.smartdevicelink.proxy.rpc.enums.FileType;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertNotNull;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.assertFalse;\n+\n+/**\n+ * This is a unit test class for the SmartDeviceLink library manager class :\n+ * {@link ManagerUtility}\n+ */\n+@RunWith(AndroidJUnit4.class)\n+public class ManagerUtilityTests {\n+\n+\n+\t@Before\n+\tpublic void setUp() throws Exception{\n+\n+\t}\n+\n+\t// TESTS\n+\n+\t@Test\n+\tpublic void testGetAllImageFields(){\n+\n+\t\tList<ImageField> fields = ManagerUtility.WindowCapabilityUtility.getAllImageFields();\n+\t\tassertNotNull(fields);\n+\t\tint size = fields.size();\n+\t\tassertEquals(ImageFieldName.values().length, size);\n+\n+\t\tImageFieldName[] names = ImageFieldName.values();\n+\n+\t\tboolean found;\n+\t\tfor (ImageFieldName name : names) {\n+\t\t\tfound = false;\n+\t\t\tfor(ImageField field : fields) {\n+\t\t\t\tif(field != null\n+\t\t\t\t\t\t&& field.getName() != null\n+\t\t\t\t\t\t&& field.getName().equals(name)) {\n+\t\t\t\t\tfound = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tassertTrue(found);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAllTextFields(){\n+\n+\t\tList<TextField> fields = ManagerUtility.WindowCapabilityUtility.getAllTextFields();\n+\t\tassertNotNull(fields);\n+\t\tint size = fields.size();\n+\t\tassertEquals(TextFieldName.values().length, size);\n+\n+\t\tTextFieldName[] names = TextFieldName.values();\n+\n+\t\tboolean found;\n+\t\tfor (TextFieldName name : names) {\n+\t\t\tfound = false;\n+\t\t\tfor(TextField field : fields) {\n+\t\t\t\tif(field != null\n+\t\t\t\t\t\t&& field.getName() != null\n+\t\t\t\t\t\t&& field.getName().equals(name)) {\n+\t\t\t\t\tfound = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tassertTrue(found);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testHasTextFieldOfName() {\n+\t\tWindowCapability capability = new WindowCapability();\n+\t\tList<TextField> textFieldList = new ArrayList<>();\n+\t\ttextFieldList.add(new TextField(TextFieldName.mainField1, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(textFieldList);\n+\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.mainField1));\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.alertText3));\n+\n+\t\ttextFieldList.add(new TextField(TextFieldName.alertText3, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(textFieldList);\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.mainField1));\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.alertText3));\n+\n+\t\ttextFieldList.clear();\n+\t\ttextFieldList.add(null);\n+\t\tcapability.setTextFields(textFieldList);\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.mainField1));\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.alertText3));\n+\n+\t\ttextFieldList.add(new TextField(TextFieldName.alertText3, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(textFieldList);\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.mainField1));\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(capability, TextFieldName.alertText3));\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testHasImageFieldOfName() {\n+\n+\t\tWindowCapability capability = new WindowCapability();\n+\t\tList<FileType> allImageFileTypes = Arrays.asList(FileType.GRAPHIC_BMP, FileType.GRAPHIC_JPEG, FileType.GRAPHIC_PNG);\n+\n+\t\tList<ImageField> imageFieldList = new ArrayList<>();\n+\t\timageFieldList.add(new ImageField(ImageFieldName.graphic, allImageFileTypes));\n+\t\tcapability.setImageFields(imageFieldList);\n+\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.graphic));\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.alertIcon));\n+\n+\t\timageFieldList.add(new ImageField(ImageFieldName.alertIcon, allImageFileTypes));\n+\t\tcapability.setImageFields(imageFieldList);\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.graphic));\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.alertIcon));;\n+\n+\t\timageFieldList.clear();\n+\t\timageFieldList.add(null);\n+\t\tcapability.setImageFields(imageFieldList);\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.graphic));\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.alertIcon));\n+\n+\t\timageFieldList.add(new ImageField(ImageFieldName.alertIcon, allImageFileTypes));\n+\t\tcapability.setImageFields(imageFieldList);\n+\t\tassertFalse(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.graphic));\n+\t\tassertTrue(ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(capability, ImageFieldName.alertIcon));\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetMaxNumberOfMainFieldLines() {\n+\n+\t\tWindowCapability capability = new WindowCapability();\n+\t\tcapability.setTextFields(ManagerUtility.WindowCapabilityUtility.getAllTextFields());\n+\n+\t\tint maxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n+\n+\t\tassertEquals(4, maxNumerOfLines);\n+\n+\t\t//Single line\n+\t\tList<TextField> singleLineList = new ArrayList<>();\n+\t\tsingleLineList.add(new TextField(TextFieldName.mainField1, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(singleLineList);\n+\t\tmaxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n+\t\tassertEquals(1, maxNumerOfLines);\n+\n+\t\tsingleLineList.add(new TextField(TextFieldName.mainField2, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(singleLineList);\n+\t\tmaxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n+\t\tassertEquals(2, maxNumerOfLines);\n+\n+\t\tsingleLineList.add(new TextField(TextFieldName.mainField3, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(singleLineList);\n+\t\tmaxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n+\t\tassertEquals(3, maxNumerOfLines);\n+\n+\t\tsingleLineList.add(new TextField(TextFieldName.mainField4, CharacterSet.UTF_8, 500, 8));\n+\t\tcapability.setTextFields(singleLineList);\n+\t\tmaxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n+\t\tassertEquals(4, maxNumerOfLines);\n+\n+\t\tList<TextField> nullList = new ArrayList<>();\n+\t\tnullList.add(null);\n+\t\tassertNotNull(nullList);\n+\t\tcapability.setTextFields(nullList);\n+\t\tassertNotNull(capability);\n+\t\tassertNotNull(capability.getTextFields()); //Fails", "originalCommit": "9829fb3228e8bd8a38a67a32a3666fcc45acf066", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc42d9702e59aec552fa1f6d7c8bb61cc9be18d", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/ManagerUtilityTests.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/ManagerUtilityTests.java\nindex ac8d9eb75..fe7d402b9 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/ManagerUtilityTests.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/ManagerUtilityTests.java\n\n@@ -189,7 +189,7 @@ public class ManagerUtilityTests {\n \t\tassertNotNull(nullList);\n \t\tcapability.setTextFields(nullList);\n \t\tassertNotNull(capability);\n-\t\tassertNotNull(capability.getTextFields()); //Fails\n+\t\tassertNotNull(capability.getTextFields());\n \n \t\tmaxNumerOfLines = ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(capability);\n \t\tassertEquals(0, maxNumerOfLines);\n"}}, {"oid": "ddc42d9702e59aec552fa1f6d7c8bb61cc9be18d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ddc42d9702e59aec552fa1f6d7c8bb61cc9be18d", "message": "Remove incorrect fails comment in unit tests", "committedDate": "2020-09-02T16:36:31Z", "type": "commit"}]}