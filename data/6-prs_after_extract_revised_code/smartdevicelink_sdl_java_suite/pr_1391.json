{"pr_number": 1391, "pr_title": "Feature/subscribe buttons", "pr_createdAt": "2020-06-22T21:28:30Z", "pr_url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391", "timeline": [{"oid": "e44984f1ff828437348faf42f2e06ad93579e2ab", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e44984f1ff828437348faf42f2e06ad93579e2ab", "message": "Added subscribeButtonManager, OnButtonListener, add subscribeButton functionality to screenManager", "committedDate": "2020-06-22T20:33:40Z", "type": "commit"}, {"oid": "adc538bfb0f83ff667ca1efc1b33653e19d3147b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/adc538bfb0f83ff667ca1efc1b33653e19d3147b", "message": "Fixed formatting in SubscribeButtonManager", "committedDate": "2020-06-22T21:26:51Z", "type": "commit"}, {"oid": "4cd8001113225fc5063667bb2e8ccbfe20257cad", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4cd8001113225fc5063667bb2e8ccbfe20257cad", "message": "Added Base class for subscribeButton Manager then created two SubscribeButtonManager classes, one for android, one for javaSE", "committedDate": "2020-06-23T17:11:14Z", "type": "commit"}, {"oid": "c971ce87816ce66774fce3c775c58c583581f3fb", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c971ce87816ce66774fce3c775c58c583581f3fb", "message": "Moved OnButtonListener to manager package", "committedDate": "2020-06-23T17:38:21Z", "type": "commit"}, {"oid": "d40055c175a71577311eac8a5039e48182e50a34", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d40055c175a71577311eac8a5039e48182e50a34", "message": "Fixed ordering of null error check", "committedDate": "2020-06-23T19:05:24Z", "type": "commit"}, {"oid": "fc2b61ea0955647a210e0cfb6ae0a5a8d4206e3d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/fc2b61ea0955647a210e0cfb6ae0a5a8d4206e3d", "message": "Added JavaDocs to SubscribeButtonManager and OnButtonListener", "committedDate": "2020-06-23T20:37:25Z", "type": "commit"}, {"oid": "1852182e6df3907f557ee0cc3a0cd681d877fbe2", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1852182e6df3907f557ee0cc3a0cd681d877fbe2", "message": "Added unit test for SubscribeButtonManager", "committedDate": "2020-06-23T20:37:47Z", "type": "commit"}, {"oid": "edc1b96eaaa961412cdba50d909a9e42577a782e", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/edc1b96eaaa961412cdba50d909a9e42577a782e", "message": "Added dispose() to SubscribeButtonManager", "committedDate": "2020-06-23T20:48:10Z", "type": "commit"}, {"oid": "a467de836751227c2b8ed710e5f589e3a02ce3d8", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a467de836751227c2b8ed710e5f589e3a02ce3d8", "message": "Changed value from private to package private", "committedDate": "2020-06-23T20:57:14Z", "type": "commit"}, {"oid": "ae1af38e6d36bf78be6724104332c0cbf25f489c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ae1af38e6d36bf78be6724104332c0cbf25f489c", "message": "Moved OnButtonListener folder and created a symlink for android", "committedDate": "2020-06-23T21:41:31Z", "type": "commit"}, {"oid": "ed74897bd95623bc3d0ac49d7aca4f61fe0ce39b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ed74897bd95623bc3d0ac49d7aca4f61fe0ce39b", "message": "Fixed symlink", "committedDate": "2020-06-23T21:58:53Z", "type": "commit"}, {"oid": "9c165b687f86b85d8a01fa3148a9cbbd5d47168d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9c165b687f86b85d8a01fa3148a9cbbd5d47168d", "message": "Merge branch 'develop' into feature/subscribe_buttons", "committedDate": "2020-06-23T22:38:45Z", "type": "commit"}, {"oid": "e44bbaf1c1a71a467c4592d2baad3db08ccc6a1f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e44bbaf1c1a71a467c4592d2baad3db08ccc6a1f", "message": "Added more unit test and fixed formatting", "committedDate": "2020-06-24T14:21:42Z", "type": "commit"}, {"oid": "84de99fdac0cc9e1caa60ec701bb17e1b2bf230c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/84de99fdac0cc9e1caa60ec701bb17e1b2bf230c", "message": "Added logic for SubscribeButtonManager States in ScreenManager", "committedDate": "2020-06-24T14:53:30Z", "type": "commit"}, {"oid": "bb3ee4c1727a83c7b592093f4ce52a6a46c33a26", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bb3ee4c1727a83c7b592093f4ce52a6a46c33a26", "message": "Added Test", "committedDate": "2020-06-24T15:10:28Z", "type": "commit"}, {"oid": "ab4ac0649751b3aae62e61420eb49c967917854f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ab4ac0649751b3aae62e61420eb49c967917854f", "message": "Added subscribe button capabilities to all hard buttons in example app", "committedDate": "2020-06-24T17:02:01Z", "type": "commit"}, {"oid": "34bc2e5cb233d3fb2387c6ec1995762c3674d301", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/34bc2e5cb233d3fb2387c6ec1995762c3674d301", "message": "Changed logic of when listeners get added", "committedDate": "2020-06-24T18:05:42Z", "type": "commit"}, {"oid": "19f88e38ae07083856769119a90d9f55fec3aca6", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/19f88e38ae07083856769119a90d9f55fec3aca6", "message": "removed unused imports", "committedDate": "2020-06-24T18:06:53Z", "type": "commit"}, {"oid": "342d1db39c75a61ff612d589f9f2e8bac1537d2d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/342d1db39c75a61ff612d589f9f2e8bac1537d2d", "message": "Removed unused menuCell", "committedDate": "2020-06-24T18:07:36Z", "type": "commit"}, {"oid": "cbf8429ab20f7ada9182a3689400a7305b1ad0fc", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/cbf8429ab20f7ada9182a3689400a7305b1ad0fc", "message": "removed unused imports", "committedDate": "2020-06-24T18:07:56Z", "type": "commit"}, {"oid": "b03b47014626bc85982ca610d0eb369ebe059b90", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b03b47014626bc85982ca610d0eb369ebe059b90", "message": "removed unused code", "committedDate": "2020-06-24T18:10:38Z", "type": "commit"}, {"oid": "ccb27966b55111996843ffb5ed6c4c8be6cd4942", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ccb27966b55111996843ffb5ed6c4c8be6cd4942", "message": "Added Unit test and fixed formatting", "committedDate": "2020-06-24T19:21:03Z", "type": "commit"}, {"oid": "49646d926aed791dc23188c5ecb8983a4765418c", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/49646d926aed791dc23188c5ecb8983a4765418c", "message": "Added subscribe to preset buttons to hello_sdl for android and javaSE", "committedDate": "2020-06-24T21:18:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyODExNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r445828114", "bodyText": "I suggest showing the message in tetxtfiled1 instead of logging it because that is more visible to the user. That also applies to the javaSE app\nsdlManager.getScreenManager().setTextField1();", "author": "bilal-alsharifi", "createdAt": "2020-06-25T20:45:57Z", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -370,6 +385,41 @@ public void onComplete(boolean success) {\n \t\t});\n \t}\n \n+\t/**\n+\t * Attempts to Subscribe to all preset buttons\n+\t */\n+\tprivate void subscribeToPresetButtons() {\n+\t\tonButtonListener = new OnButtonListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\t\t\t\tLog.i(TAG, \"onPress: \" + buttonName);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f038a51cb6c1c13a2676e58ced5ff541c1e75", "chunk": "diff --git a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\nindex 090e53a91..090eb097b 100755\n--- a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n+++ b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n\n@@ -388,16 +383,16 @@ public class SdlService extends Service {\n \t/**\n \t * Attempts to Subscribe to all preset buttons\n \t */\n-\tprivate void subscribeToPresetButtons() {\n+\tprivate void subscribeToButtons() {\n \t\tonButtonListener = new OnButtonListener() {\n \t\t\t@Override\n \t\t\tpublic void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n-\t\t\t\tLog.i(TAG, \"onPress: \" + buttonName);\n+\t\t\t\tsdlManager.getScreenManager().setTextField1(\"Subscribed Button Named: \" + buttonName + \" was pressed\");\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic void onEvent(ButtonName buttonName, OnButtonEvent buttonEvent) {\n-\t\t\t\tLog.i(TAG, \"onEvent: \" + buttonName + \" \" + buttonEvent);\n+\t\t\t\tsdlManager.getScreenManager().setTextField2(\"Subscribed Button Named: \" + buttonName + \" Event: \" + buttonEvent.getButtonEventMode());\n \t\t\t}\n \n \t\t\t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTA3Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r445829076", "bodyText": "I suggest removing the unsubscribe feature from hello sdl menu because it is not very essential. Users will be more interested in testing subscribing than unsubscribing. After doing that buttonNames & onButtonListener   can be converted to local vars. This also applies to the javaSE app.", "author": "bilal-alsharifi", "createdAt": "2020-06-25T20:48:01Z", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -78,6 +82,9 @@\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n+\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f038a51cb6c1c13a2676e58ced5ff541c1e75", "chunk": "diff --git a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\nindex 090e53a91..090eb097b 100755\n--- a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n+++ b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n\n@@ -82,7 +82,9 @@ public class SdlService extends Service {\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n-\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};\n+\tprivate ButtonName[] buttonNames = {ButtonName.PLAY_PAUSE, ButtonName.SEEKLEFT, ButtonName.SEEKRIGHT, ButtonName.AC_MAX, ButtonName.AC, ButtonName.RECIRCULATE,\n+\t\t\tButtonName.FAN_UP, ButtonName.FAN_DOWN, ButtonName.TEMP_UP, ButtonName.FAN_DOWN, ButtonName.DEFROST_MAX, ButtonName.DEFROST_REAR, ButtonName.DEFROST,\n+\t\t\tButtonName.UPPER_VENT, ButtonName.LOWER_VENT, ButtonName.VOLUME_UP, ButtonName.VOLUME_DOWN, ButtonName.EJECT, ButtonName.SOURCE, ButtonName.SHUFFLE, ButtonName.REPEAT};\n \tprivate OnButtonListener onButtonListener;\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2MjU3Mg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446262572", "bodyText": "Can we let the app subscribe to this set of buttons instead? this works on Manticore with the default appType\nPLAY_PAUSE, SEEKLEFT, SEEKRIGHT, AC_MAX, AC, RECIRCULATE, FAN_UP, FAN_DOWN, TEMP_UP,TEMP_DOWN, DEFROST_MAX, DEFROST, DEFROST_REAR, UPPER_VENT, LOWER_VENT, VOLUME_UP, VOLUME_DOWN, EJECT, SOURCE, SHUFFLE, REPEAT", "author": "bilal-alsharifi", "createdAt": "2020-06-26T15:44:15Z", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -78,6 +82,9 @@\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n+\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9f038a51cb6c1c13a2676e58ced5ff541c1e75", "chunk": "diff --git a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\nindex 090e53a91..090eb097b 100755\n--- a/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n+++ b/android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java\n\n@@ -82,7 +82,9 @@ public class SdlService extends Service {\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n-\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};\n+\tprivate ButtonName[] buttonNames = {ButtonName.PLAY_PAUSE, ButtonName.SEEKLEFT, ButtonName.SEEKRIGHT, ButtonName.AC_MAX, ButtonName.AC, ButtonName.RECIRCULATE,\n+\t\t\tButtonName.FAN_UP, ButtonName.FAN_DOWN, ButtonName.TEMP_UP, ButtonName.FAN_DOWN, ButtonName.DEFROST_MAX, ButtonName.DEFROST_REAR, ButtonName.DEFROST,\n+\t\t\tButtonName.UPPER_VENT, ButtonName.LOWER_VENT, ButtonName.VOLUME_UP, ButtonName.VOLUME_DOWN, ButtonName.EJECT, ButtonName.SOURCE, ButtonName.SHUFFLE, ButtonName.REPEAT};\n \tprivate OnButtonListener onButtonListener;\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMDk4Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446310986", "bodyText": "Is there a reason for putting OnButtonListener.java and the symlink not on the same folder as SubscribeButtonManager? I think they should be in this path:\ncom/smartdevicelink/managers/screen/", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:17:20Z", "path": "baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java", "diffHunk": "@@ -0,0 +1 @@\n+../../../../../../../base/src/main/java/com/smartdevicelink/managers/OnButtonListener.java", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java b/baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java\ndeleted file mode 120000\nindex 7c5bd48f8..000000000\n--- a/baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java\n+++ /dev/null\n\n@@ -1 +0,0 @@\n-../../../../../../../base/src/main/java/com/smartdevicelink/managers/OnButtonListener.java\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxNDkxMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446314913", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));\n          \n          \n            \n                    assertFalse(subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:25:34Z", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.proxy.RPCMessage;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.SubscribeButtonResponse;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButtonResponse;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+public class SubscribeButtonManagerTest extends AndroidTestCase2 {\n+    private SubscribeButtonManager subscribeButtonManager;\n+    private ISdl internalInterface;\n+\n+    private Answer<Void> onSubscribe_UnsubscribeSuccess = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if(message instanceof SubscribeButton){\n+                SubscribeButtonResponse subscribeButtonResponse = new SubscribeButtonResponse();\n+                subscribeButtonResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(message.getCorrelationID(),subscribeButtonResponse);\n+            }\n+            if(message instanceof UnsubscribeButton) {\n+                UnsubscribeButtonResponse unsubscribeButtonResponse = new UnsubscribeButtonResponse();\n+                unsubscribeButtonResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(message.getCorrelationID(), unsubscribeButtonResponse);\n+            }\n+            return null;\n+        }\n+    };\n+\n+\n+    private Answer<Void> onSubscribeFail = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if(message instanceof SubscribeButton){\n+                SubscribeButtonResponse subscribeButtonResponse = new SubscribeButtonResponse();\n+                subscribeButtonResponse.setSuccess(false);\n+                message.getOnRPCResponseListener().onError(message.getCorrelationID(), Result.GENERIC_ERROR, \"Fail\");\n+            }\n+            return null;\n+        }\n+    };\n+    private OnButtonListener listener = new OnButtonListener() {\n+        @Override\n+        public void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\n+        }\n+\n+        @Override\n+        public void onEvent(ButtonName buttonName, OnButtonEvent buttonEvent) {\n+\n+        }\n+\n+        @Override\n+        public void onError(String info) {\n+\n+        }\n+    };\n+\n+    private OnButtonListener listener2 = new OnButtonListener() {\n+        @Override\n+        public void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\n+        }\n+\n+        @Override\n+        public void onEvent(ButtonName buttonName, OnButtonEvent buttonEvent) {\n+\n+        }\n+\n+        @Override\n+        public void onError(String info) {\n+\n+        }\n+    };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        internalInterface = mock(ISdl.class);\n+        subscribeButtonManager = new SubscribeButtonManager(internalInterface);\n+    }\n+\n+    public void testInstantiation(){\n+        assertNotNull(subscribeButtonManager.onButtonListeners);\n+        assertEquals(subscribeButtonManager.getState(), BaseSubManager.SETTING_UP);\n+    }\n+\n+    public void testDispose() {\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        subscribeButtonManager.dispose();\n+        assertTrue(subscribeButtonManager.onButtonListeners == null);\n+    }\n+\n+    public void testAddButtonListener() {\n+        doAnswer(onSubscribe_UnsubscribeSuccess).when(internalInterface).sendRPC(any(RPCMessage.class));\n+\n+        subscribeButtonManager.addButtonListener(null, null);\n+        assertTrue(subscribeButtonManager.onButtonListeners.size() == 0);\n+\n+        subscribeButtonManager.addButtonListener(null, listener);\n+        assertTrue(subscribeButtonManager.onButtonListeners.size() == 0);\n+\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        assertTrue(subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));\n+\n+    }\n+\n+    public void testAddButtonListenerError(){\n+        doAnswer(onSubscribeFail).when(internalInterface).sendRPC(any(RPCMessage.class));\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        assertTrue(!subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java\nindex e3841ce07..757486634 100644\n--- a/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java\n+++ b/android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java\n\n@@ -2,7 +2,6 @@ package com.smartdevicelink.managers.screen;\n \n import com.smartdevicelink.AndroidTestCase2;\n import com.smartdevicelink.managers.BaseSubManager;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.proxy.RPCMessage;\n import com.smartdevicelink.proxy.RPCRequest;\n import com.smartdevicelink.proxy.interfaces.ISdl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxOTIyMw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446319223", "bodyText": "just to avoid potential NPEs\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    onButtonListeners = null;\n          \n          \n            \n                    onButtonListeners.clear();", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:34:36Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTgyOQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446321829", "bodyText": "You can pass the button name in the constructor and remove this line.", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:40:05Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);\n+                onButtonListeners.put(buttonName, new CopyOnWriteArrayList<OnButtonListener>());\n+                onButtonListeners.get(buttonName).add(listener);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        subscribeButtonRequest.setButtonName(buttonName);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTkxNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446321914", "bodyText": "You can pass the button name in the constructor and remove this line.", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:40:14Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNDM5NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446324394", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:45:21Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNTc0NA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446325744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n          \n          \n            \n                            listener.onError(info);\n          \n          \n            \n                            listener.onError(\"Attempt to unsubscribe to button named \" + buttonName + \" Failed . ResultCode: \" + resultCode + \" info: \" + info);", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:48:18Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNjg1OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446326858", "bodyText": "line spacing is not very consistent throughout the file", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:50:36Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzMyNw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446327327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n          \n          \n            \n                        Log.w(TAG, \"Already subscribed to button named: \" + buttonName);", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:51:39Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODA2OA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446328068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"OnButtonListener cannot be null: \");\n          \n          \n            \n                        Log.e(TAG, \"OnButtonListener cannot be null\");", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:53:10Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI4Ng==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446328286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"ButtonName cannot be null\");", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:53:35Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTg4Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446329883", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n          \n          \n            \n                        listener.onError(\"Attempting to unsubscribe to the \" + buttonName + \" button failed because it is not currently subscribed\");", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:57:04Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMTA4OQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446331089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n          \n          \n            \n                            listener.onError(info);\n          \n          \n            \n                            listener.onError(\"Attempt to subscribe to button named \" + buttonName + \" Failed . ResultCode: \" + resultCode + \" info: \" + info);", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:59:28Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);\n+                onButtonListeners.put(buttonName, new CopyOnWriteArrayList<OnButtonListener>());\n+                onButtonListeners.get(buttonName).add(listener);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n+                listener.onError(info);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMTI3MQ==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446331271", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);", "author": "bilal-alsharifi", "createdAt": "2020-06-26T17:59:48Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjIyMg==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446332222", "bodyText": "I suggest adding a separate method called unsubscribeButtonRequest() similar to subscribeButtonRequest() for more consistency", "author": "bilal-alsharifi", "createdAt": "2020-06-26T18:01:57Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {", "originalCommit": "49646d926aed791dc23188c5ecb8983a4765418c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex 80d693303..f75397c33 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -5,7 +5,6 @@ import android.util.Log;\n \n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n-import com.smartdevicelink.managers.OnButtonListener;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n import com.smartdevicelink.proxy.RPCResponse;\n"}}, {"oid": "d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d28ff2aa9bde9bbed26175d0ee9e8c8c25cc6230", "message": "Move OnButtonListener to same package as screen manager", "committedDate": "2020-06-29T16:59:36Z", "type": "commit"}, {"oid": "10d9bf489f950c9953ad286380806546356c929b", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/10d9bf489f950c9953ad286380806546356c929b", "message": "Fixed formatting", "committedDate": "2020-06-29T17:01:01Z", "type": "commit"}, {"oid": "8c8b0c1d7ae2adff0b2cd432b2f6a4740a69ed3d", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8c8b0c1d7ae2adff0b2cd432b2f6a4740a69ed3d", "message": "Fixed imports", "committedDate": "2020-06-29T17:07:43Z", "type": "commit"}, {"oid": "8f9f038a51cb6c1c13a2676e58ced5ff541c1e75", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8f9f038a51cb6c1c13a2676e58ced5ff541c1e75", "message": "Updated hello sdl example apps", "committedDate": "2020-06-29T17:58:23Z", "type": "commit"}, {"oid": "cd3ce0e2eae26d48d9e225b78457f0119589bc3f", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/cd3ce0e2eae26d48d9e225b78457f0119589bc3f", "message": "Updating hello sdl example apps", "committedDate": "2020-06-29T18:02:50Z", "type": "commit"}, {"oid": "e2ba3299f7ba5aee93e860a56dd069eda713b731", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e2ba3299f7ba5aee93e860a56dd069eda713b731", "message": "Fixed Unit test", "committedDate": "2020-06-29T18:11:32Z", "type": "commit"}, {"oid": "dbaf99662ac476f1b96530b236fe738288b2c9f5", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/dbaf99662ac476f1b96530b236fe738288b2c9f5", "message": "Fixed dispose message as well as some log messages and listener messages", "committedDate": "2020-06-29T18:13:37Z", "type": "commit"}, {"oid": "aabe6dec3992dd3d4cc85a4e7417d1a33f37021a", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/aabe6dec3992dd3d4cc85a4e7417d1a33f37021a", "message": "Added unsubscribeButtonRequest method and fixed spacing", "committedDate": "2020-06-29T18:18:26Z", "type": "commit"}, {"oid": "adcf242644912c3c59c0d6b6c7fe1520f60f99fa", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/adcf242644912c3c59c0d6b6c7fe1520f60f99fa", "message": "Adding missed buttonName", "committedDate": "2020-06-29T18:36:49Z", "type": "commit"}, {"oid": "f291492fed7a4ae67fea5786c3f0fa88f53487fa", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f291492fed7a4ae67fea5786c3f0fa88f53487fa", "message": "Fixing wording to make sure text will appear on screen, In JavaSe the full message was not displaying on sdl_hmi", "committedDate": "2020-06-29T18:50:57Z", "type": "commit"}, {"oid": "4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf", "message": "Fixed unit test", "committedDate": "2020-06-29T19:07:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMzUwNA==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r447723504", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    onButtonListeners.clear();\n          \n          \n            \n                    if (onButtonListeners != null) {\n          \n          \n            \n                        onButtonListeners.clear();\n          \n          \n            \n                    }", "author": "bilal-alsharifi", "createdAt": "2020-06-30T14:23:26Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners.clear();", "originalCommit": "4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1fbaa6f9f1ab37ed64e4f326ac415e05e94cfee", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex be180fb91..70996db4c 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -48,7 +48,9 @@ abstract class BaseSubscribeButtonManager extends BaseSubManager {\n     @Override\n     public void dispose() {\n         super.dispose();\n-        onButtonListeners.clear();\n+        if (onButtonListeners != null) {\n+            onButtonListeners.clear();\n+        }\n         internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n         internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMTY2Mw==", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r447731663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"ButtonName cannot be null\");\n          \n          \n            \n                        return;", "author": "bilal-alsharifi", "createdAt": "2020-06-30T14:33:35Z", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners.clear();\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null\");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.w(TAG, \"Already subscribed to button named: \" + buttonName);\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");", "originalCommit": "4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1fbaa6f9f1ab37ed64e4f326ac415e05e94cfee", "chunk": "diff --git a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\nindex be180fb91..70996db4c 100644\n--- a/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n+++ b/base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java\n\n@@ -48,7 +48,9 @@ abstract class BaseSubscribeButtonManager extends BaseSubManager {\n     @Override\n     public void dispose() {\n         super.dispose();\n-        onButtonListeners.clear();\n+        if (onButtonListeners != null) {\n+            onButtonListeners.clear();\n+        }\n         internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n         internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n     }\n"}}, {"oid": "a1fbaa6f9f1ab37ed64e4f326ac415e05e94cfee", "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a1fbaa6f9f1ab37ed64e4f326ac415e05e94cfee", "message": "Fixed potential NPE and removed log statement", "committedDate": "2020-06-30T15:09:33Z", "type": "commit"}]}