{"pr_number": 6999, "pr_title": "Impl. of OpenID Connect token-based API access (a.k.a. DAT access with Keycloak)", "pr_createdAt": "2020-01-14T15:05:36Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/6999", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDAxNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604014", "bodyText": "More stylistic - but I think if there is more that one import from the same package, we should just use a wildcard.", "author": "n1zea144", "createdAt": "2020-03-14T17:16:24Z", "path": "portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/java/sample/config/BeanConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package sample.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.core.userdetails.User;", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ee37c9e9be31d73ef4244b2c4b5df5dd6a93d0f", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/java/sample/config/BeanConfig.java b/portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/java/sample/config/BeanConfig.java\ndeleted file mode 100644\nindex ee5d8639e..000000000\n--- a/portal/src/integration-tests/saml-oauth2-setup/saml-idp/src/main/java/sample/config/BeanConfig.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-package sample.config;\n-\n-import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n-import org.springframework.security.core.userdetails.UserDetailsService;\n-import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n-import org.springframework.security.saml.provider.SamlServerConfiguration;\n-import org.springframework.security.saml.provider.identity.AssertionEnhancer;\n-import org.springframework.security.saml.provider.identity.config.SamlIdentityProviderServerBeanConfiguration;\n-import org.springframework.security.saml.saml2.attribute.Attribute;\n-\n-@Configuration\n-public class BeanConfig extends SamlIdentityProviderServerBeanConfiguration {\n-\tprivate final AppConfig config;\n-\n-\tpublic BeanConfig(AppConfig config) {\n-\t\tthis.config = config;\n-\t}\n-\n-\t@Override\n-\tprotected SamlServerConfiguration getDefaultHostSamlServerConfiguration() {\n-\t\treturn config;\n-\t}\n-\n-\t@Bean(name = \"samlAssertionEnhancer\")\n-\tpublic AssertionEnhancer samlAssertionEnhancer(@Value(\"${user.email}\") String testEmail) {\n-\t\treturn assertion -> {\n-\t\t\tAttribute emailAttribute = new Attribute();\n-\t\t\temailAttribute.setName(\"User.email\");\n-\t\t\temailAttribute.addValues(testEmail);\n-\t\t\tassertion.addAttribute(emailAttribute);\n-\t\t\treturn assertion;\n-\t\t};\n-\t}\n-\n-\t@Bean\n-\tpublic UserDetailsService userDetailsService() {\n-\t\tUserDetails userDetails = User.withDefaultPasswordEncoder()\n-\t\t\t.username(\"user\")\n-\t\t\t.password(\"password\")\n-\t\t\t.roles(\"USER\")\n-\t\t\t.build();\n-\t\treturn new InMemoryUserDetailsManager(userDetails);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDcxOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604719", "bodyText": "Agrees with saml-oauth2-setup/pom.xml", "author": "n1zea144", "createdAt": "2020-03-14T17:26:26Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07be3d5c920e45887afda35dd27417dc8d93020b", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\nindex f624d7199..d11d7d01c 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n\n@@ -66,7 +66,6 @@ public class Oauth2ResourceServerIntegrationTests {\n             request()\n                 .withMethod(\"POST\")\n                 .withPath(\"/auth/realms/cbio/token\")\n-                .withHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                 .withBody(subString(\"refresh_token=\" + URLEncoder.encode(encodedOfflineToken, \"UTF-8\"))))\n             .respond(response().withStatusCode(401));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNDk5MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392604991", "bodyText": "We're not actually connecting to Keycloak here, but maybe we should use cbioportal as the name here since it is used in the docs?", "author": "n1zea144", "createdAt": "2020-03-14T17:30:36Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";\n+    private static final int IDP_PORT = 8443;\n+\n+    @Test\n+    public void testAccessForbiddenForAnonymousUser() throws IOException {\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", null, null);\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForbiddenForFakeBearerToken() throws IOException {\n+        String offlineToken = \"{\\\"sub\\\": \\\"0000000000\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineToken);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07be3d5c920e45887afda35dd27417dc8d93020b", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\nindex f624d7199..d11d7d01c 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n\n@@ -66,7 +66,6 @@ public class Oauth2ResourceServerIntegrationTests {\n             request()\n                 .withMethod(\"POST\")\n                 .withPath(\"/auth/realms/cbio/token\")\n-                .withHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                 .withBody(subString(\"refresh_token=\" + URLEncoder.encode(encodedOfflineToken, \"UTF-8\"))))\n             .respond(response().withStatusCode(401));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTA1Ng==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605056", "bodyText": "Same comment as above - we're not actually connecting to Keycloak here, but maybe we should use cbioportal as the name here since it is used in the docs?", "author": "n1zea144", "createdAt": "2020-03-14T17:31:20Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests protection of API endpoints\n+ */\n+public class Oauth2ResourceServerIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080/cbioportal\";\n+    private static final int IDP_PORT = 8443;\n+\n+    @Test\n+    public void testAccessForbiddenForAnonymousUser() throws IOException {\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", null, null);\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForbiddenForFakeBearerToken() throws IOException {\n+        String offlineToken = \"{\\\"sub\\\": \\\"0000000000\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineToken);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")\n+                .withHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n+                .withBody(subString(\"refresh_token=\" + URLEncoder.encode(encodedOfflineToken, \"UTF-8\"))))\n+            .respond(response().withStatusCode(401));\n+\n+        HttpHelper.HttpResponse response = HttpHelper.sendGetRequest(HOST + \"/api/studies\", encodedOfflineToken, null);\n+\n+        assertEquals(401, response.code);\n+    }\n+\n+    @Test\n+    public void testAccessForValidBearerToken() throws IOException, JSONException {\n+        String offlineTokenClaims = \"{\\\"sub\\\": \\\"1234567890\\\"}\";\n+        String encodedOfflineToken = encodeWithoutSigning(offlineTokenClaims);\n+        String accessTokenClaims = \"{\" +\n+            \"\\\"sub\\\": \\\"1234567890\\\",\" +\n+            \"\\\"name\\\": \\\"John Doe\\\",\" +\n+            \"\\\"resource_access\\\": {\\\"cbioportal\\\": {\\\"roles\\\": [\\\"cbioportal:study_tcga_pub\\\"]}}\" +\n+            \"}\";\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07be3d5c920e45887afda35dd27417dc8d93020b", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\nindex f624d7199..d11d7d01c 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/Oauth2ResourceServerIntegrationTests.java\n\n@@ -66,7 +66,6 @@ public class Oauth2ResourceServerIntegrationTests {\n             request()\n                 .withMethod(\"POST\")\n                 .withPath(\"/auth/realms/cbio/token\")\n-                .withHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                 .withBody(subString(\"refresh_token=\" + URLEncoder.encode(encodedOfflineToken, \"UTF-8\"))))\n             .respond(response().withStatusCode(401));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTI3NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605275", "bodyText": "This has also been defined in Oauth2ResourceServerIntegrationTests.java\nOk to leave since this test will be static once complete, just a thought that maybe they should be place in common location.", "author": "n1zea144", "createdAt": "2020-03-14T17:34:49Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\nindex de498db6d..cc3acb73b 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n\n@@ -129,7 +129,8 @@ public class OfflineTokenDownloadIntegrationTests {\n         //7. Then we get redirected to originally requested page\n         assertEquals(302, requestAssertionsConsumerRepsonse.code);\n         String dataAccessTokenLocation = requestAssertionsConsumerRepsonse.headers.get(\"Location\").get(0);\n-        assertEquals(cbioPageUrl, dataAccessTokenLocation);\n+        \n+        assertEquals(\"/cbioportal/restore?key=login-redirect\", dataAccessTokenLocation);\n \n         //8. Finally we can reach the home page\n         HttpHelper.HttpResponse homePageResponse = HttpHelper.sendGetRequest(cbioPageUrl, null, cbioCookie);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTg5OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605899", "bodyText": "Nice piece of work here - I would say you have become an expert in SAML login flow ;-).  Just so I understand.  A user goes through an interactive login session to get the offline token for use in the future - correct?", "author": "n1zea144", "createdAt": "2020-03-14T17:44:59Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";\n+    private static final String CBIO_URL = HOST + \"/cbioportal\";\n+    private static final String IDP_URL = HOST + \"/saml-idp\";\n+\n+    private static final int IDP_PORT = 8443;\n+\n+    private static String cbioCookie;\n+    //FIXME Endpoints to download offline token do not initiate login with saml, their simply return 401 http code. Should it be this way? Add tests\n+\n+    @Test\n+    public void A_testReachHomePageOnlyAfterLogInWithSamlIdp() throws IOException {", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\nindex de498db6d..cc3acb73b 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n\n@@ -129,7 +129,8 @@ public class OfflineTokenDownloadIntegrationTests {\n         //7. Then we get redirected to originally requested page\n         assertEquals(302, requestAssertionsConsumerRepsonse.code);\n         String dataAccessTokenLocation = requestAssertionsConsumerRepsonse.headers.get(\"Location\").get(0);\n-        assertEquals(cbioPageUrl, dataAccessTokenLocation);\n+        \n+        assertEquals(\"/cbioportal/restore?key=login-redirect\", dataAccessTokenLocation);\n \n         //8. Finally we can reach the home page\n         HttpHelper.HttpResponse homePageResponse = HttpHelper.sendGetRequest(cbioPageUrl, null, cbioCookie);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNTkzNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392605936", "bodyText": "Same concern with realm here - should we use cbioportal and is it clear this realm setup is prerequisite to run test.", "author": "n1zea144", "createdAt": "2020-03-14T17:45:28Z", "path": "portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2019 The Hyve B.V.\n+ * This code is licensed under the GNU Affero General Public License (AGPL),\n+ * version 3, or (at your option) any later version.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.mskcc.cbio.portal;\n+\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.mockserver.client.MockServerClient;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+\n+import static org.junit.Assert.*;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+import static org.mockserver.model.HttpRequest.request;\n+import static org.mockserver.model.HttpResponse.response;\n+import static org.mockserver.model.StringBody.subString;\n+import static org.mskcc.cbio.portal.TokenHelper.encodeWithoutSigning;\n+\n+\n+/**\n+ * Tests SAML authentication and offline token download\n+ */\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class OfflineTokenDownloadIntegrationTests {\n+\n+    private static final String HOST = \"http://localhost:8080\";\n+    private static final String CBIO_URL = HOST + \"/cbioportal\";\n+    private static final String IDP_URL = HOST + \"/saml-idp\";\n+\n+    private static final int IDP_PORT = 8443;\n+\n+    private static String cbioCookie;\n+    //FIXME Endpoints to download offline token do not initiate login with saml, their simply return 401 http code. Should it be this way? Add tests\n+\n+    @Test\n+    public void A_testReachHomePageOnlyAfterLogInWithSamlIdp() throws IOException {\n+        //1. When we try to reach cbioportal\n+        String cbioPageUrl = CBIO_URL + \"/\";\n+        HttpHelper.HttpResponse discoveryEndpointRedirect = HttpHelper.sendGetRequest(cbioPageUrl, null, null);\n+        //1. Then we get redirect to the discovery page\n+        assertEquals(302, discoveryEndpointRedirect.code);\n+        String discoveryEndpointLocation = discoveryEndpointRedirect.headers.get(\"Location\").get(0);\n+        assertEquals(CBIO_URL + \"/saml/discovery?entityID=cbioportal&returnIDParam=idp\", discoveryEndpointLocation);\n+        //1. And we set the session cookie\n+        String cbioSetCookie = discoveryEndpointRedirect.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(cbioSetCookie.startsWith(\"JSESSIONID=\"));\n+        cbioCookie = cbioSetCookie.split(\";\")[0];\n+\n+        //2. When we make a request to the discovery endpoint\n+        HttpHelper.HttpResponse cbioIdpLoginRedirect = HttpHelper.sendGetRequest(discoveryEndpointLocation, null, cbioCookie);\n+        //2. Then it redirects us to the saml idp login screen of the cbioportal\n+        assertEquals(302, cbioIdpLoginRedirect.code);\n+        String cbioIdpLoginLocation = cbioIdpLoginRedirect.headers.get(\"Location\").get(0);\n+        assertEquals(CBIO_URL + \"/saml/login?disco=true&idp=spring.security.saml.idp.id\", cbioIdpLoginLocation);\n+\n+        //3. When we make a request to the cbio login page\n+        HttpHelper.HttpResponse idpRedirect = HttpHelper.sendGetRequest(cbioIdpLoginLocation, null, cbioCookie);\n+        //3. Then we get redirected to the saml idp site\n+        assertEquals(302, idpRedirect.code);\n+        String idpLocation = idpRedirect.headers.get(\"Location\").get(0);\n+        assertTrue(idpLocation.startsWith(IDP_URL + \"/saml/idp/SSO/alias/boot-sample-idp?\"));\n+\n+        //4. When we make a request to the idp page\n+        HttpHelper.HttpResponse idpLoginRedirect = HttpHelper.sendGetRequest(idpLocation, null, null);\n+        //4. Then we get redirected to the saml idp login page\n+        assertEquals(302, idpLoginRedirect.code);\n+        String idpLoginLocation = idpLoginRedirect.headers.get(\"Location\").get(0);\n+        assertTrue(idpLoginLocation.startsWith(IDP_URL + \"/login\"));\n+        //4. And we set the idp session cookie\n+        String idpSetCookie = idpLoginRedirect.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(idpSetCookie.startsWith(\"JSESSIONID=\"));\n+        String idpCookie = idpSetCookie.split(\";\")[0];\n+\n+        // We skipped requesting the login page for the brevity\n+\n+        //5. When we submit the login form\n+        HttpHelper.HttpResponse idpLoginRepsonse = HttpHelper.sendPostRequest(idpLoginLocation, null, idpCookie, \"username=user&password=password\");\n+        //5. Then we get redirected to the saml idp site\n+        assertEquals(302, idpLoginRepsonse.code);\n+        String jumpToServiceProviderPageLocation = idpLoginRepsonse.headers.get(\"Location\").get(0);\n+        assertTrue(jumpToServiceProviderPageLocation.startsWith(IDP_URL + \"/saml/idp/SSO/alias/boot-sample-idp?\"));\n+        //5. And we set the idp session cookie\n+        idpSetCookie = idpLoginRepsonse.headers.get(\"Set-Cookie\").get(0);\n+        assertTrue(idpSetCookie.startsWith(\"JSESSIONID=\"));\n+        idpCookie = idpSetCookie.split(\";\")[0];\n+\n+        //6. When we reach the jump page\n+        HttpHelper.HttpResponse jumpToServiceProviderPageRepsonse = HttpHelper.sendGetRequest(jumpToServiceProviderPageLocation, null, idpCookie);\n+        //6. Then we get html page with javascript that redirects us to the service provider\n+        assertEquals(200, jumpToServiceProviderPageRepsonse.code);\n+        String jumpPage = jumpToServiceProviderPageRepsonse.body;\n+        assertTrue(jumpPage.contains(\"form action=\\\"\" + CBIO_URL + \"/saml/SSO\\\"\"));\n+        String samlResponseValueStart = \"name=\\\"SAMLResponse\\\" value=\\\"\";\n+        assertTrue(jumpPage.contains(samlResponseValueStart));\n+        int start = jumpPage.indexOf(samlResponseValueStart);\n+        int end = jumpPage.indexOf(\"\\\"\", start + samlResponseValueStart.length());\n+        String samlResponse = jumpPage.substring(start + samlResponseValueStart.length(), end);\n+\n+        //7. When we submit the assertions to the consumer\n+        HttpHelper.HttpResponse requestAssertionsConsumerRepsonse = HttpHelper\n+            .sendPostRequest(CBIO_URL + \"/saml/SSO\", null, cbioCookie,\n+                \"SAMLResponse=\" + URLEncoder.encode(samlResponse, \"UTF-8\"));\n+        //7. Then we get redirected to originally requested page\n+        assertEquals(302, requestAssertionsConsumerRepsonse.code);\n+        String dataAccessTokenLocation = requestAssertionsConsumerRepsonse.headers.get(\"Location\").get(0);\n+        assertEquals(cbioPageUrl, dataAccessTokenLocation);\n+\n+        //8. Finally we can reach the home page\n+        HttpHelper.HttpResponse homePageResponse = HttpHelper.sendGetRequest(cbioPageUrl, null, cbioCookie);\n+        assertEquals(200, homePageResponse.code);\n+        assertFalse(homePageResponse.body.isEmpty());\n+\n+    }\n+\n+    @Test\n+    public void B_testDownloadOfflineToken() throws IOException {\n+        String offlineTokenClaims = \"{\\\"sub\\\": \\\"1234567890\\\"}\";\n+        String encodedOfflineTokenClaims = encodeWithoutSigning(offlineTokenClaims);\n+        new MockServerClient(\"localhost\", IDP_PORT).when(\n+            request()\n+                .withMethod(\"POST\")\n+                .withPath(\"/auth/realms/cbio/token\")", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "chunk": "diff --git a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\nindex de498db6d..cc3acb73b 100644\n--- a/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n+++ b/portal/src/integration-tests/saml-oauth2-setup/src/test/java/org/mskcc/cbio/portal/OfflineTokenDownloadIntegrationTests.java\n\n@@ -129,7 +129,8 @@ public class OfflineTokenDownloadIntegrationTests {\n         //7. Then we get redirected to originally requested page\n         assertEquals(302, requestAssertionsConsumerRepsonse.code);\n         String dataAccessTokenLocation = requestAssertionsConsumerRepsonse.headers.get(\"Location\").get(0);\n-        assertEquals(cbioPageUrl, dataAccessTokenLocation);\n+        \n+        assertEquals(\"/cbioportal/restore?key=login-redirect\", dataAccessTokenLocation);\n \n         //8. Finally we can reach the home page\n         HttpHelper.HttpResponse homePageResponse = HttpHelper.sendGetRequest(cbioPageUrl, null, cbioCookie);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNjkwMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392606902", "bodyText": "Have you confirmed that previous modes of token access still work?", "author": "n1zea144", "createdAt": "2020-03-14T17:58:55Z", "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenAuthenticationFilter.java", "diffHunk": "@@ -65,23 +58,8 @@\n @Component\n public class TokenAuthenticationFilter extends AbstractAuthenticationProcessingFilter {", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzExMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392607111", "bodyText": "Looks to be related to code removed from TokenAuthenticationFilter?", "author": "n1zea144", "createdAt": "2020-03-14T18:01:59Z", "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java", "diffHunk": "@@ -46,18 +46,22 @@\n  */\n public class TokenUserDetailsAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n \n+    private static final Log LOG = LogFactory.getLog(TokenUserDetailsAuthenticationProvider.class);\n+\n     private PortalUserDetailsService userDetailsService;\n \n     public TokenUserDetailsAuthenticationProvider(PortalUserDetailsService userDetailsService) {\n         this.userDetailsService = userDetailsService;\n     }\n \n-    private static final Log LOG = LogFactory.getLog(TokenUserDetailsAuthenticationProvider.class);\n+    @Override\n+    public boolean supports(Class<?> authentication) {", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7078270218b795bd7f745d9b09649f652b30657e", "chunk": "diff --git a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java\nindex 019eb9bec..3aea451a7 100644\n--- a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java\n+++ b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/TokenUserDetailsAuthenticationProvider.java\n\n@@ -35,15 +35,19 @@ package org.cbioportal.security.spring.authentication.token;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.cbioportal.security.spring.authentication.social.PortalUserDetailsService;\n+import org.cbioportal.service.config.annotation.ConditionalOnDatMethod;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider;\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.stereotype.Component;\n \n /**\n  *\n  * @author Manda Wilson\n  */\n+@Component(\"tokenAuthenticationProvider\")\n+@ConditionalOnDatMethod(value = \"oauth2\", isNot = true)\n public class TokenUserDetailsAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n \n     private static final Log LOG = LogFactory.getLog(TokenUserDetailsAuthenticationProvider.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzYzNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392607637", "bodyText": "I don't think we should hardcode the client id here.", "author": "n1zea144", "createdAt": "2020-03-14T18:10:45Z", "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"oauth2TokenAuthenticationProvider\")\n+public class OAuth2TokenAuthenticationProvider implements AuthenticationProvider {\n+\n+    @Autowired\n+    OAuth2TokenRefreshRestTemplate tokenRefreshRestTemplate;\n+\n+    @Override\n+    public boolean supports(Class<?> authentication) {\n+        return authentication.isAssignableFrom(OAuth2BearerAuthenticationToken.class);\n+    }\n+\n+    @Override\n+    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n+\n+        String offlineToken = (String) ((OAuth2BearerAuthenticationToken) authentication).getCredentials();\n+        \n+        // Note: validity of the offline token is not checked in cBioPortal \n+        // backend, is handeled by the OAuth2 authentication server.\n+\n+        // request an access token from the OAuth2 identity provider\n+        final String accessToken = tokenRefreshRestTemplate.getAccessToken(offlineToken);\n+        \n+        Set<GrantedAuthority> authorities = extractAuthorities(accessToken);\n+\n+        return new OAuth2BearerAuthenticationToken(authentication.getPrincipal(), authorities);\n+    }\n+\n+    private Set<GrantedAuthority> extractAuthorities(final String token) throws BadCredentialsException {\n+        final Jwt tokenDecoded = JwtHelper.decode(token);\n+        final String claims = tokenDecoded.getClaims();\n+        final Set<GrantedAuthority> authorities;\n+        try {\n+            JsonNode claimsMap = new ObjectMapper().readTree(claims);\n+\n+            // Read roles/authorities from cbioportal client (not cbioportal_api client!).\n+            // Note: For this to work \"Full scope allowed\" must be enabled for\n+            //       the cbioportal_api client in the KeyCloak configuration.\n+            //       This ensures that the cbioportal_api client can add\n+            //       cbioportal studies/roles to the JWT token.\n+            String cbioportalClientId = \"cbioportal\";", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NTYxNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395685614", "bodyText": "@pvannierop Am I misunderstanding something here?", "author": "n1zea144", "createdAt": "2020-03-20T14:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwNzYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "chunk": "diff --git a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java\nindex 63c6fb356..9fdabb5a7 100644\n--- a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java\n+++ b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2TokenAuthenticationProvider.java\n\n@@ -47,9 +47,7 @@ import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.jwt.Jwt;\n import org.springframework.security.jwt.JwtHelper;\n-import org.springframework.stereotype.Component;\n \n-@Component(\"oauth2TokenAuthenticationProvider\")\n public class OAuth2TokenAuthenticationProvider implements AuthenticationProvider {\n \n     @Autowired\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwOTAzMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392609031", "bodyText": "Not much code duplication and should not be modified going forward, but pointing out this is same implementation as in JwtDataAccessTokenServiceImpl.java", "author": "n1zea144", "createdAt": "2020-03-14T18:31:13Z", "path": "service/src/main/java/org/cbioportal/service/impl/UuidDataAccessTokenServiceImpl.java", "diffHunk": "@@ -173,4 +182,20 @@ private void revokeOldestDataAccessTokenForUsername(String username) {\n         DataAccessToken oldestDataAccessToken = allDataAccessTokens.get(0);\n         dataAccessTokenRepository.removeDataAccessToken(oldestDataAccessToken.getToken());\n     }\n+\n+    @Override\n+    public Authentication createAuthenticationRequest(String token) {", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYwOTgyMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392609823", "bodyText": "I imagine there is a corresponding frontend change to support these endpoints?", "author": "n1zea144", "createdAt": "2020-03-14T18:42:48Z", "path": "web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.web;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.HttpClientErrorException;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Data Access Tokens\", description = \" \")\n+@Profile(\"dat.oauth2\")\n+public class OAuth2DataAccessTokenController {", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java b/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\nindex b4928bbdf..db9a29406 100644\n--- a/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\n+++ b/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\n\n@@ -48,7 +48,6 @@ import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n import org.cbioportal.web.config.annotation.InternalApi;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMDE5Ng==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r392610196", "bodyText": "I wonder if we should put \"offline\" somewhere in this url to make it clear in the swagger (or use @ApiOperation annotations?)", "author": "n1zea144", "createdAt": "2020-03-14T18:47:48Z", "path": "web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.web;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.cbioportal.web.config.annotation.InternalApi;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.HttpClientErrorException;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n+@InternalApi\n+@RestController\n+@Validated\n+@Api(tags = \"Data Access Tokens\", description = \" \")\n+@Profile(\"dat.oauth2\")\n+public class OAuth2DataAccessTokenController {\n+\n+    @Value(\"${dat.oauth2.userAuthorizationUri}\")\n+    private String userAuthorizationUri;\n+\n+    @Value(\"${dat.oauth2.redirectUri}\")\n+    private String redirectUri;\n+\n+    @Value(\"${dat.oauth2.clientId}\")\n+    private String clientId;\n+\n+    @Autowired\n+    private DataAccessTokenService tokenService;\n+    private String authorizationUrl;\n+    private String fileName = \"cbioportal_data_access_token.txt\";\n+\n+    @PostConstruct\n+    public void postConstruct() throws UnsupportedEncodingException {\n+        \n+        String scopeEncoded = URLEncoder.encode(\"openid offline_access\", StandardCharsets.UTF_8.toString());\n+        String clientIdEncoded = URLEncoder.encode(clientId, StandardCharsets.UTF_8.toString());\n+        String redirUriEncode = URLEncoder.encode(redirectUri, StandardCharsets.UTF_8.toString());\n+\n+        authorizationUrl = String.format(\"%s?response_type=%s&scope=%s&client_id=%s&redirect_uri=%s\", userAuthorizationUri, \"code\", scopeEncoded, clientIdEncoded, redirUriEncode);\n+    }\n+\n+    // this is the entrypoint for the cBioPortal frontend to download a single user token\n+    @RequestMapping(\"/data-access-token\")\n+    public ResponseEntity<String> downloadDataAccessToken(Authentication authentication, \n+        HttpServletRequest request, HttpServletResponse response) throws IOException {\n+\n+        // redirect to authentication endpoint\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.add(\"Location\", authorizationUrl);\n+        return new ResponseEntity<>(headers, HttpStatus.FOUND);\n+\n+    }\n+\n+    // retrieve and trigger download OAuth2 offline token\n+    @RequestMapping(\"/data-access-token/oauth2\")", "originalCommit": "e377c2c665c6fc02949ae6dcba10722272f8c12e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java b/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\nindex b4928bbdf..db9a29406 100644\n--- a/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\n+++ b/web/src/main/java/org/cbioportal/web/OAuth2DataAccessTokenController.java\n\n@@ -48,7 +48,6 @@ import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n import org.cbioportal.web.config.annotation.InternalApi;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n-import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n"}}, {"oid": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "url": "https://github.com/cBioPortal/cbioportal/commit/fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "message": "Create token beans from portal.properties\n\nControlled by env.var before", "committedDate": "2020-03-17T14:05:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NjI5OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395686298", "bodyText": "Can we add a newline here?", "author": "n1zea144", "createdAt": "2020-03-20T14:48:08Z", "path": "security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import static org.cbioportal.security.spring.authentication.token.oauth2.OAuth2TokenTestUtils.createJwt;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+\n+@TestPropertySource(\n+    properties = {\n+        \"dat.method = oauth2\",\n+        \"dat.oauth2.issuer = my_issuer\",\n+        \"dat.oauth2.clientId = my_client_id\"\n+    }\n+)\n+@ContextConfiguration(classes=OAuth2DataAccessTokenServiceImplTestConfiguration.class)\n+@RunWith(SpringRunner.class)\n+public class OAuth2DataAccessTokenServiceImplTest {\n+\n+    static final String ACCESS_CODE_VALID = \"dummy_valid_access_code\";\n+    static final String ACCESS_CODE_INVALID = \"dummy_invalid_access_code\";\n+    static final String ACCESS_TOKEN = \"dummy_access_token\";\n+\n+    @Value(\"${dat.oauth2.issuer:}\")\n+    private String issuer;\n+\n+    @Value(\"${dat.oauth2.clientId:}\")\n+    private String clientId;\n+\n+    @Autowired\n+    OAuth2DataAccessTokenServiceImpl service;\n+\n+    @Test\n+    public void testCreateDataAccessTokenSuccess() {\n+        DataAccessToken accessToken = service.createDataAccessToken(ACCESS_CODE_VALID);\n+        assertEquals(accessToken.getToken(), ACCESS_TOKEN);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testCreateDataAccessTokenFailure() {\n+        service.createDataAccessToken(ACCESS_CODE_INVALID);\n+    }\n+\n+    @Test\n+    public void testGetUsernameSuccess() {\n+        String token = createJwt(\"{\\\"sub\\\":\\\"me\\\"}\");\n+        assertEquals(service.getUsername(token), \"me\");\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testGetUsernameFailure() {\n+        String token = createJwt(\"{}\");\n+        service.getUsername(token);\n+    }\n+\n+    @Test\n+    public void testCreateAuthenticationRequestSuccess() {\n+        String token = createJwt(\"{\\\"sub\\\":\\\"me\\\"}\");\n+        Authentication auth = service.createAuthenticationRequest(token);\n+        assertEquals(auth.getPrincipal(), \"me\");\n+        assertEquals(auth.getCredentials(), token);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testCreateAuthenticationRequestFailure() {\n+        String token = createJwt(\"{}\");\n+        service.createAuthenticationRequest(token);\n+    }\n+\n+    @Test\n+    public void testGetExpirtaionReturnsNull() {\n+        assertNull(service.getExpiration(\"dummy_token\"));\n+    }\n+\n+    @Test\n+    public void testIsValidSuccess() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(clientId).append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(issuer).append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        assert(service.isValid(token));\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testIsValidFailureAud() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(\"invalid_client_id\").append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(issuer).append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        service.isValid(token);\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void testIsValidFailureIss() {\n+        String json = new StringBuilder()\n+            .append(\"{\")\n+                .append(\"\\\"aud\\\":\\\"\").append(clientId).append(\"\\\",\")\n+                .append(\"\\\"iss\\\":\\\"\").append(\"invalid_issuer\").append(\"\\\"\")\n+            .append(\"}\")\n+            .toString();\n+\n+        String token = createJwt(json);\n+\n+        service.isValid(token);\n+    }\n+\n+}", "originalCommit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MjQwNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r439382407", "bodyText": "Done", "author": "pvannierop", "createdAt": "2020-06-12T12:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NjI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7078270218b795bd7f745d9b09649f652b30657e", "chunk": "diff --git a/security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java b/security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java\nindex 3e2c203b4..1dd57accf 100644\n--- a/security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java\n+++ b/security/security-spring/src/test/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImplTest.java\n\n@@ -110,7 +110,7 @@ public class OAuth2DataAccessTokenServiceImplTest {\n     }\n \n     @Test\n-    public void testGetExpirtaionReturnsNull() {\n+    public void testGetExpirationReturnsNull() {\n         assertNull(service.getExpiration(\"dummy_token\"));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4ODY4NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395688685", "bodyText": "Interesting!", "author": "n1zea144", "createdAt": "2020-03-20T14:51:31Z", "path": "web/src/main/java/org/cbioportal/web/DataAccessTokenController.java", "diffHunk": "@@ -1,98 +1,97 @@\n /*\n- * This file is part of cBioPortal.\n- *\n- * cBioPortal is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n package org.cbioportal.web;\n \n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n-import org.cbioportal.service.DataAccessTokenServiceFactory;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n-import org.cbioportal.service.impl.UnauthDataAccessTokenServiceImpl;\n import org.cbioportal.web.config.annotation.InternalApi;\n-\n-import io.swagger.annotations.*;\n-import java.util.*;\n-import javax.annotation.PostConstruct;\n-import org.springframework.beans.factory.annotation.*;\n-import org.springframework.http.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.core.Authentication;\n import org.springframework.validation.annotation.Validated;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.client.HttpClientErrorException;\n \n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n @InternalApi\n-@RestController\n+@RequestMapping // replaces @RestController; controller is created conditionally in DataAccessTokenControllerConfig", "originalCommit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a32eb56973c17f390694e40b27226b6b551ee246", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java b/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\nindex f8f59c710..1973bc43a 100644\n--- a/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\n+++ b/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\n\n@@ -30,6 +30,7 @@ import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.cbioportal.web.config.annotation.InternalApi;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5MDg1OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395690859", "bodyText": "I'm not questioning the implementation, I find it curious that its the condition classes that make the decision but that the property sources are loaded in...in any event, interesting Spring \"spell\".", "author": "n1zea144", "createdAt": "2020-03-20T14:54:31Z", "path": "web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+* Copyright (c) 2020 The Hyve B.V.\n+*\n+* This library is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+* FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+* is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+* obligations to provide maintenance, support, updates, enhancements or\n+* modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+* liable to any party for direct, indirect, special, incidental or\n+* consequential damages, including lost profits, arising out of the use of this\n+* software and its documentation, even if Memorial Sloan-Kettering Cancer\n+* Center has been advised of the possibility of such damage.\n+*/\n+\n+/*\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package org.cbioportal.web.config;\n+\n+import org.cbioportal.web.DataAccessTokenController;\n+import org.cbioportal.web.OAuth2DataAccessTokenController;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.context.annotation.PropertySources;\n+\n+@Configuration", "originalCommit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java b/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\nindex 403c30b1f..e8438b1c9 100644\n--- a/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\n+++ b/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\n\n@@ -41,8 +41,8 @@ import org.springframework.context.annotation.PropertySources;\n \n @Configuration\n @PropertySources({\n-    @PropertySource(\"classpath:portal.properties\"),\n-    @PropertySource(\"file:///${PORTAL_HOME}/portal.properties\")\n+    @PropertySource(value=\"classpath:portal.properties\", ignoreResourceNotFound=true),\n+    @PropertySource(value=\"file:///${PORTAL_HOME}/portal.properties\", ignoreResourceNotFound=true)\n })\n public class DataAccessTokenControllerConfig {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTE3OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r395949179", "bodyText": "I think this needs some tweaking.  Since I deploy war with portal.properties rolled in, to avoid a FileNotFoundException, I had to do the following:\n\n@propertysource(value=\"file:///${portal_home}/portal.properties\", ignoreResourceNotFound=true)\n\nI imagine you want to look in war first and if not found, then environment?  Maybe you need to place ignoreResourceNotFound on both @propertysource and then do something smart in the condition class?", "author": "n1zea144", "createdAt": "2020-03-21T01:39:45Z", "path": "web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+* Copyright (c) 2020 The Hyve B.V.\n+*\n+* This library is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+* FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+* is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+* obligations to provide maintenance, support, updates, enhancements or\n+* modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+* liable to any party for direct, indirect, special, incidental or\n+* consequential damages, including lost profits, arising out of the use of this\n+* software and its documentation, even if Memorial Sloan-Kettering Cancer\n+* Center has been advised of the possibility of such damage.\n+*/\n+\n+/*\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package org.cbioportal.web.config;\n+\n+import org.cbioportal.web.DataAccessTokenController;\n+import org.cbioportal.web.OAuth2DataAccessTokenController;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.context.annotation.PropertySources;\n+\n+@Configuration\n+@PropertySources({", "originalCommit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3MzU1MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r397673550", "bodyText": "I have updated to this:\n@Configuration\n@PropertySources({\n    @PropertySource(\"file:///${PORTAL_HOME}/portal.properties\", ignoreResourceNotFound=true),\n    @PropertySource(\"classpath:portal.properties\", ignoreResourceNotFound=true)\n})\n\nI do not think the Condition classes need to be updated since these check for presence of the dat.method prop. If not present, the beans are not created without making a fuss.", "author": "pvannierop", "createdAt": "2020-03-25T08:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0OTE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java b/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\nindex 403c30b1f..e8438b1c9 100644\n--- a/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\n+++ b/web/src/main/java/org/cbioportal/web/config/DataAccessTokenControllerConfig.java\n\n@@ -41,8 +41,8 @@ import org.springframework.context.annotation.PropertySources;\n \n @Configuration\n @PropertySources({\n-    @PropertySource(\"classpath:portal.properties\"),\n-    @PropertySource(\"file:///${PORTAL_HOME}/portal.properties\")\n+    @PropertySource(value=\"classpath:portal.properties\", ignoreResourceNotFound=true),\n+    @PropertySource(value=\"file:///${PORTAL_HOME}/portal.properties\", ignoreResourceNotFound=true)\n })\n public class DataAccessTokenControllerConfig {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMDQ3Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r397500477", "bodyText": "Setting this is missing from the documents.", "author": "n1zea144", "createdAt": "2020-03-24T22:29:17Z", "path": "security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020 The Hyve B.V.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.cbioportal.security.spring.authentication.token.oauth2;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.cbioportal.model.DataAccessToken;\n+import org.cbioportal.service.DataAccessTokenService;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.jwt.Jwt;\n+import org.springframework.security.jwt.JwtHelper;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.client.RestTemplate;\n+\n+\n+@Service\n+@Component(\"oauth2\")\n+public class OAuth2DataAccessTokenServiceImpl implements DataAccessTokenService {\n+\n+    @Value(\"${dat.oauth2.issuer:}\")\n+    private String issuer;\n+\n+    @Value(\"${dat.oauth2.clientId:}\")\n+    private String clientId;\n+\n+    @Value(\"${dat.oauth2.clientSecret:}\")\n+    private String clientSecret;\n+\n+    @Value(\"${dat.oauth2.accessTokenUri:}\")\n+    private String accessTokenUri;\n+\n+    @Value(\"${dat.oauth2.userAuthorizationUri:}\")\n+    private String userAuthorizationUri;\n+\n+    @Value(\"${dat.oauth2.redirectUri:}\")", "originalCommit": "fd3f6e5111ffed07d6eba8975910bdc52743d9e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3MDQwOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r397670409", "bodyText": "Fixed.", "author": "pvannierop", "createdAt": "2020-03-25T08:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "chunk": "diff --git a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java\nindex 322274a7b..50dd67353 100644\n--- a/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java\n+++ b/security/security-spring/src/main/java/org/cbioportal/security/spring/authentication/token/oauth2/OAuth2DataAccessTokenServiceImpl.java\n\n@@ -49,33 +49,31 @@ import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.jwt.Jwt;\n import org.springframework.security.jwt.JwtHelper;\n-import org.springframework.stereotype.Component;\n import org.springframework.stereotype.Service;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n import org.springframework.web.client.RestTemplate;\n \n \n-@Service\n-@Component(\"oauth2\")\n+@Service(\"oauth2\")\n public class OAuth2DataAccessTokenServiceImpl implements DataAccessTokenService {\n \n-    @Value(\"${dat.oauth2.issuer:}\")\n+    @Value(\"${dat.oauth2.issuer}\")\n     private String issuer;\n \n-    @Value(\"${dat.oauth2.clientId:}\")\n+    @Value(\"${dat.oauth2.clientId}\")\n     private String clientId;\n \n-    @Value(\"${dat.oauth2.clientSecret:}\")\n+    @Value(\"${dat.oauth2.clientSecret}\")\n     private String clientSecret;\n \n-    @Value(\"${dat.oauth2.accessTokenUri:}\")\n+    @Value(\"${dat.oauth2.accessTokenUri}\")\n     private String accessTokenUri;\n \n-    @Value(\"${dat.oauth2.userAuthorizationUri:}\")\n+    @Value(\"${dat.oauth2.userAuthorizationUri}\")\n     private String userAuthorizationUri;\n \n-    @Value(\"${dat.oauth2.redirectUri:}\")\n+    @Value(\"${dat.oauth2.redirectUri}\")\n     private String redirectUri;\n \n     @Autowired\n"}}, {"oid": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "url": "https://github.com/cBioPortal/cbioportal/commit/4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "message": "Add jwtRolesPath to OAuth2 Provider", "committedDate": "2020-03-26T15:05:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NjI0Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r401046247", "bodyText": "It looks like the removal of @RestController causes the following DataAccessTokenControllerTest.revokeAllTokensForUserTest() failure:\nRunning org.cbioportal.web.DataAccessTokenControllerTest Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.534 sec <<< FAILURE! revokeAllTokensForUserTest(org.cbioportal.web.DataAccessTokenControllerTest)  Time elapsed: 0.772 sec  <<< ERROR! javax.servlet.ServletException: Circular view path [data-access-tokens]: would dispatch back to the current handler URL [/data-access-tokens] again. Check your ViewResolver setup ! (Hint: This may be the result of an unspecified view, due to default view name generation.)      \nAfter some digging, I think its because @RestController included @responsebody which is required to properly unmarshal into JSON.  Adding @responsebody after @RequestMapping should solve this issue.", "author": "n1zea144", "createdAt": "2020-03-31T16:23:08Z", "path": "web/src/main/java/org/cbioportal/web/DataAccessTokenController.java", "diffHunk": "@@ -1,98 +1,97 @@\n /*\n- * This file is part of cBioPortal.\n- *\n- * cBioPortal is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+* This file is part of cBioPortal.\n+*\n+* cBioPortal is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU Affero General Public License as\n+* published by the Free Software Foundation, either version 3 of the\n+* License.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU Affero General Public License for more details.\n+*\n+* You should have received a copy of the GNU Affero General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n \n package org.cbioportal.web;\n \n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n-import org.cbioportal.service.DataAccessTokenServiceFactory;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n-import org.cbioportal.service.impl.UnauthDataAccessTokenServiceImpl;\n import org.cbioportal.web.config.annotation.InternalApi;\n-\n-import io.swagger.annotations.*;\n-import java.util.*;\n-import javax.annotation.PostConstruct;\n-import org.springframework.beans.factory.annotation.*;\n-import org.springframework.http.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n import org.springframework.security.core.Authentication;\n import org.springframework.validation.annotation.Validated;\n-import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.client.HttpClientErrorException;\n \n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiParam;\n+\n @InternalApi\n-@RestController\n+@RequestMapping // replaces @RestController; controller is created conditionally in DataAccessTokenControllerConfig", "originalCommit": "4fb7fbc67ab3f3a1eb9e45683a2e01c2e0b7c8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MzExMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/6999#discussion_r402093111", "bodyText": "PR was updated with this solution.", "author": "pvannierop", "createdAt": "2020-04-02T07:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0NjI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a32eb56973c17f390694e40b27226b6b551ee246", "chunk": "diff --git a/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java b/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\nindex f8f59c710..1973bc43a 100644\n--- a/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\n+++ b/web/src/main/java/org/cbioportal/web/DataAccessTokenController.java\n\n@@ -30,6 +30,7 @@ import org.cbioportal.model.DataAccessToken;\n import org.cbioportal.service.DataAccessTokenService;\n import org.cbioportal.service.exception.DataAccessTokenNoUserIdentityException;\n import org.cbioportal.service.exception.DataAccessTokenProhibitedUserException;\n+import org.springframework.web.bind.annotation.ResponseBody;\n import org.cbioportal.web.config.annotation.InternalApi;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n"}}, {"oid": "a32eb56973c17f390694e40b27226b6b551ee246", "url": "https://github.com/cBioPortal/cbioportal/commit/a32eb56973c17f390694e40b27226b6b551ee246", "message": "Fix oauth2 integration tests", "committedDate": "2020-05-12T09:09:12Z", "type": "forcePushed"}, {"oid": "1ac9c1257ad2a0b4c477295c15a16502118bb8a1", "url": "https://github.com/cBioPortal/cbioportal/commit/1ac9c1257ad2a0b4c477295c15a16502118bb8a1", "message": "Fix wantAssertionSigned sp metadata field", "committedDate": "2020-05-15T12:27:48Z", "type": "forcePushed"}, {"oid": "9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "url": "https://github.com/cBioPortal/cbioportal/commit/9f6a4cceafa56779793beeb98f21f8859ad2ee3f", "message": "Adapt to new Mockito API", "committedDate": "2020-05-26T15:49:59Z", "type": "forcePushed"}, {"oid": "7078270218b795bd7f745d9b09649f652b30657e", "url": "https://github.com/cBioPortal/cbioportal/commit/7078270218b795bd7f745d9b09649f652b30657e", "message": "Reinstate test config for dat controller", "committedDate": "2020-06-06T07:29:30Z", "type": "forcePushed"}, {"oid": "5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "url": "https://github.com/cBioPortal/cbioportal/commit/5c70e5a38c123ae24bd21c92dfbd7063b2fecbc8", "message": "Fix typo in study_es_0 ('G   RCh37')", "committedDate": "2020-06-06T08:55:28Z", "type": "forcePushed"}, {"oid": "8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "url": "https://github.com/cBioPortal/cbioportal/commit/8f41ebea3f9efa6f9ffb45606412dc3a248629e7", "message": "Fix typo in study_es_0", "committedDate": "2020-06-06T08:59:14Z", "type": "forcePushed"}, {"oid": "07be3d5c920e45887afda35dd27417dc8d93020b", "url": "https://github.com/cBioPortal/cbioportal/commit/07be3d5c920e45887afda35dd27417dc8d93020b", "message": "Fix study_es_0", "committedDate": "2020-06-13T11:20:15Z", "type": "forcePushed"}, {"oid": "fa721bcf95da7c89ba1b04b3e573a41858faa8df", "url": "https://github.com/cBioPortal/cbioportal/commit/fa721bcf95da7c89ba1b04b3e573a41858faa8df", "message": "Fix study_es_0", "committedDate": "2020-07-02T11:44:21Z", "type": "forcePushed"}, {"oid": "4ee37c9e9be31d73ef4244b2c4b5df5dd6a93d0f", "url": "https://github.com/cBioPortal/cbioportal/commit/4ee37c9e9be31d73ef4244b2c4b5df5dd6a93d0f", "message": "Impl. OAuth2-token based API access", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "2dd6696d1cff5ec604dacc1c0d44fd36ab67e1de", "url": "https://github.com/cBioPortal/cbioportal/commit/2dd6696d1cff5ec604dacc1c0d44fd36ab67e1de", "message": "Impl. unit tests for OAuth2 token service", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "611eb3d32aac42f238a106e20614e87f5c546790", "url": "https://github.com/cBioPortal/cbioportal/commit/611eb3d32aac42f238a106e20614e87f5c546790", "message": "Impl. unit tests for OAuth2 token refresh template", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "fc39431a9965e703818331fc45126cb9a4f48e39", "url": "https://github.com/cBioPortal/cbioportal/commit/fc39431a9965e703818331fc45126cb9a4f48e39", "message": "Impl. unit tests for OAuth2 token authentication provider", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "b71046cb6a52b42707d6dc3d42c75d3978ddb1ac", "url": "https://github.com/cBioPortal/cbioportal/commit/b71046cb6a52b42707d6dc3d42c75d3978ddb1ac", "message": "Impl. SAML/OAuth2-token data access security integration tests\n\nIt introduces new infrastructure to run integration tests as\nseparate maven projects.", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "594790a6164c58dc8706163f610244c32121cb79", "url": "https://github.com/cBioPortal/cbioportal/commit/594790a6164c58dc8706163f610244c32121cb79", "message": "Add copyright statements", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "4cc12140a0f439650412e0c775dc857427af8f42", "url": "https://github.com/cBioPortal/cbioportal/commit/4cc12140a0f439650412e0c775dc857427af8f42", "message": "Update PR\n\nFeedback from Ben", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "db6e4167ba5afffe33b0ed29b13e3f1c0e5163d8", "url": "https://github.com/cBioPortal/cbioportal/commit/db6e4167ba5afffe33b0ed29b13e3f1c0e5163d8", "message": "Update docs", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "3e92a224a33056daa9619c56427d3dc22c62d9ea", "url": "https://github.com/cBioPortal/cbioportal/commit/3e92a224a33056daa9619c56427d3dc22c62d9ea", "message": "Add info on keycloak version to docs", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "d95f84c89d46acc5f91765423e7b9f7b017e4e8f", "url": "https://github.com/cBioPortal/cbioportal/commit/d95f84c89d46acc5f91765423e7b9f7b017e4e8f", "message": "Create token beans from portal.properties\n\nControlled by env.var before", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "f41c2e65280a523a2094f745bc4ec34521fd36fe", "url": "https://github.com/cBioPortal/cbioportal/commit/f41c2e65280a523a2094f745bc4ec34521fd36fe", "message": "Add redirectURI to docs and portal.properties", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "8bf4a56ff15267c533e1b0073f0574ac55a0b799", "url": "https://github.com/cBioPortal/cbioportal/commit/8bf4a56ff15267c533e1b0073f0574ac55a0b799", "message": "Fix reference to tokenAuthenticationProvider", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "2444098cec5f1818210122b89db1d9b4c7aaebf3", "url": "https://github.com/cBioPortal/cbioportal/commit/2444098cec5f1818210122b89db1d9b4c7aaebf3", "message": "Fix error thrown missing portal.properties", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "d9332c372c6f514de63f3cc8c4e6a084f88f5e60", "url": "https://github.com/cBioPortal/cbioportal/commit/d9332c372c6f514de63f3cc8c4e6a084f88f5e60", "message": "Refactor bean instantiation for token services and auth providers", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "dc78069f9cdde86f3017b4bdf1bb0eac07d1a2c7", "url": "https://github.com/cBioPortal/cbioportal/commit/dc78069f9cdde86f3017b4bdf1bb0eac07d1a2c7", "message": "Add jwtRolesPath to OAuth2 Provider", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "6a44838e010f83431372dafad1540ec8e554ecb9", "url": "https://github.com/cBioPortal/cbioportal/commit/6a44838e010f83431372dafad1540ec8e554ecb9", "message": "Add responsebody annotation to DAT controllers", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "622eb8f07fa90c0e2e9a58f3ad9f57f8a8dec670", "url": "https://github.com/cBioPortal/cbioportal/commit/622eb8f07fa90c0e2e9a58f3ad9f57f8a8dec670", "message": "Fix oauth2 integration tests", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "d7d0bcf7b54ca67a8129451516ab2f51924ed85e", "url": "https://github.com/cBioPortal/cbioportal/commit/d7d0bcf7b54ca67a8129451516ab2f51924ed85e", "message": "Small fixes", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "18f970a5c09aa956d0d6da8735fa6bc554e6adaa", "url": "https://github.com/cBioPortal/cbioportal/commit/18f970a5c09aa956d0d6da8735fa6bc554e6adaa", "message": "Fix wantAssertionSigned sp metadata field", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "e05709d2d483bc8cbc4a824a0939a86552bca24f", "url": "https://github.com/cBioPortal/cbioportal/commit/e05709d2d483bc8cbc4a824a0939a86552bca24f", "message": "Remove -Dauthenticate=false from travis integration-test command", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "d454f190240f457be74be69eea6b3dfde064818d", "url": "https://github.com/cBioPortal/cbioportal/commit/d454f190240f457be74be69eea6b3dfde064818d", "message": "Fix SAML integration test", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "99338665c26f00d84cd0ab315d5292ef3d604d90", "url": "https://github.com/cBioPortal/cbioportal/commit/99338665c26f00d84cd0ab315d5292ef3d604d90", "message": "Adapt to new Mockito API", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "84c54bc2ba9689bb310642dc3b045a205cc5c2a6", "url": "https://github.com/cBioPortal/cbioportal/commit/84c54bc2ba9689bb310642dc3b045a205cc5c2a6", "message": "Rework conditional creation of dat access beans", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "98d962d7692d935ee8e40ae2d385d54d190c7db6", "url": "https://github.com/cBioPortal/cbioportal/commit/98d962d7692d935ee8e40ae2d385d54d190c7db6", "message": "Remove obsolete config class", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "3edfd094c3414a236a72a9ddd8a3dc8148c3a347", "url": "https://github.com/cBioPortal/cbioportal/commit/3edfd094c3414a236a72a9ddd8a3dc8148c3a347", "message": "Remove obsolete bean definitions for token service factory", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "a42a920d1aaf384c9cfae73c7d836419e995054c", "url": "https://github.com/cBioPortal/cbioportal/commit/a42a920d1aaf384c9cfae73c7d836419e995054c", "message": "Add jackson dep to security project", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "b98e7924b269c1b19d91a42dda0b697a5eac443b", "url": "https://github.com/cBioPortal/cbioportal/commit/b98e7924b269c1b19d91a42dda0b697a5eac443b", "message": "Add jackson dependency to security pom.xml (correct indentation)", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "e827d0aadac900ed16c51a90b7ea72d62f1d33f5", "url": "https://github.com/cBioPortal/cbioportal/commit/e827d0aadac900ed16c51a90b7ea72d62f1d33f5", "message": "Correct typo in method name", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "5cf2f3aa1e731f01ed38c598503d4b6027ce40f3", "url": "https://github.com/cBioPortal/cbioportal/commit/5cf2f3aa1e731f01ed38c598503d4b6027ce40f3", "message": "Update jackson dependencies from codehouse to fasterxml", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "b40ab4d0869afe6d63e4a858c308e8cc5b53ed22", "url": "https://github.com/cBioPortal/cbioportal/commit/b40ab4d0869afe6d63e4a858c308e8cc5b53ed22", "message": "Fix unit test failing for missing key id", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "2f2118382d71a10e1f7e98a1991612078abe1773", "url": "https://github.com/cBioPortal/cbioportal/commit/2f2118382d71a10e1f7e98a1991612078abe1773", "message": "Fix conditional creation for DAT security beans", "committedDate": "2020-08-04T07:28:59Z", "type": "commit"}, {"oid": "532476b94e475319c5b1cc5360192a8be3edc210", "url": "https://github.com/cBioPortal/cbioportal/commit/532476b94e475319c5b1cc5360192a8be3edc210", "message": "Fixes", "committedDate": "2020-08-04T07:29:21Z", "type": "commit"}, {"oid": "154d90ccac758b0f21a98b2146ab597050d217f9", "url": "https://github.com/cBioPortal/cbioportal/commit/154d90ccac758b0f21a98b2146ab597050d217f9", "message": "Rework DAT controller instantiation", "committedDate": "2020-08-04T07:29:21Z", "type": "commit"}, {"oid": "bf9552b65f5cd7c030e4168999d748731e751522", "url": "https://github.com/cBioPortal/cbioportal/commit/bf9552b65f5cd7c030e4168999d748731e751522", "message": "Fix oauth2 integration tests", "committedDate": "2020-08-04T07:29:21Z", "type": "commit"}, {"oid": "0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "url": "https://github.com/cBioPortal/cbioportal/commit/0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "message": "Fix study_es_0", "committedDate": "2020-08-04T07:29:21Z", "type": "commit"}, {"oid": "0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "url": "https://github.com/cBioPortal/cbioportal/commit/0347d5d87c2b9d43e6796dbb6cb7c2700e341b2c", "message": "Fix study_es_0", "committedDate": "2020-08-04T07:29:21Z", "type": "forcePushed"}, {"oid": "78327923fce7618ba0aa6699e8bcbcd1efac31de", "url": "https://github.com/cBioPortal/cbioportal/commit/78327923fce7618ba0aa6699e8bcbcd1efac31de", "message": "Add -q flag to Travis core maven install command\n\nMitigates job termination due to exceeding the max\nlog length.", "committedDate": "2020-08-05T06:22:41Z", "type": "commit"}]}