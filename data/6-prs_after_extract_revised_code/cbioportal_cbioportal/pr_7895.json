{"pr_number": 7895, "pr_title": "Optimize mutation count by keyword calculation", "pr_createdAt": "2020-09-22T19:03:05Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7895", "timeline": [{"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "url": "https://github.com/cBioPortal/cbioportal/commit/7bedc81f2266df6f76afbcda17e608606d59f6b5", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>", "committedDate": "2020-09-23T19:17:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NDEwMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#discussion_r495184101", "bodyText": "Add a space between 'while' and '('?", "author": "divyamadala30", "createdAt": "2020-09-25T19:16:06Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java", "diffHunk": "@@ -186,27 +189,74 @@ public static void createMutationCountClinicalData(GeneticProfile geneticProfile\n         }\n     }\n \n-    public static int calculateMutationCountByKeyword(int profileId) throws DaoException {\n+    public static void calculateMutationCountByKeyword(int geneticProfileId) throws DaoException {\n+        if (!MySQLbulkLoader.isBulkLoad()) {\n+            throw new DaoException(\"You have to turn on MySQLbulkLoader in order to update mutation counts by keyword\");\n+        } else {\n+            MultiKeyMap mutationEventKeywordCountMap = getMutationEventKeywordCountByGeneticProfileId(geneticProfileId); // mutation event keyword -> entrez id -> keyword count\n+            Map<Long, Integer> geneCountMap = getGeneCountByGeneticProfileId(geneticProfileId); // entrez id -> gene count\n+            MapIterator it = mutationEventKeywordCountMap.mapIterator();\n+            while (it.hasNext()) {\n+                it.next();\n+                MultiKey mk = (MultiKey) it.getKey();\n+                String mutationEventKeyword = String.valueOf(mk.getKey(0));\n+                Long entrezGeneId = Long.valueOf(mk.getKey(1).toString());\n+                String keywordCount = it.getValue().toString();\n+                Integer geneCount = geneCountMap.get(entrezGeneId);\n+                MySQLbulkLoader.getMySQLbulkLoader(\"mutation_count_by_keyword\").insertRecord(\n+                        Integer.toString(geneticProfileId),\n+                        mutationEventKeyword,\n+                        Long.toString(entrezGeneId),\n+                        keywordCount,\n+                        Integer.toString(geneCount)\n+                );\n+            }\n+        }\n+    }\n+\n+    public static MultiKeyMap getMutationEventKeywordCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        MultiKeyMap mutationEventKeywordCountByGeneticProfileId = new MultiKeyMap();\n         Connection con = null;\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n             con = JdbcUtil.getDbConnection(DaoMutation.class);\n             pstmt = con.prepareStatement(\n-                \"INSERT INTO mutation_count_by_keyword \" +\n-                    \"SELECT g2.`GENETIC_PROFILE_ID`, mutation_event.`KEYWORD`, m2.`ENTREZ_GENE_ID`, \" +\n-                    \"IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(m2.SAMPLE_ID))) AS KEYWORD_COUNT, \" +\n-                    \"(SELECT COUNT(DISTINCT(m1.SAMPLE_ID)) FROM `mutation` AS m1 , `genetic_profile` AS g1 \" +\n-                    \"WHERE m1.`GENETIC_PROFILE_ID` = g1.`GENETIC_PROFILE_ID` \" +\n-                    \"AND g1.`GENETIC_PROFILE_ID`= g2.`GENETIC_PROFILE_ID` AND m1.`ENTREZ_GENE_ID` = m2.`ENTREZ_GENE_ID` \" +\n-                    \"GROUP BY g1.`GENETIC_PROFILE_ID` , m1.`ENTREZ_GENE_ID`) AS GENE_COUNT \" +\n-                    \"FROM `mutation` AS m2 , `genetic_profile` AS g2 , `mutation_event` \" +\n-                    \"WHERE m2.`GENETIC_PROFILE_ID` = g2.`GENETIC_PROFILE_ID` \" +\n-                    \"AND m2.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n-                    \"AND g2.`GENETIC_PROFILE_ID`=? \" +\n-                    \"GROUP BY g2.`GENETIC_PROFILE_ID` , mutation_event.`KEYWORD` , m2.`ENTREZ_GENE_ID`;\");\n-            pstmt.setInt(1, profileId);\n-            return pstmt.executeUpdate();\n+                    \"SELECT mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`,  IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(mutation.SAMPLE_ID))) AS KEYWORD_COUNT \" +\n+                            \"FROM mutation_event JOIN mutation on mutation.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n+                            \"WHERE mutation.`GENETIC_PROFILE_ID` = ? \" +\n+                            \"GROUP BY mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`;\"\n+            );\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                mutationEventKeywordCountByGeneticProfileId.put(rs.getString(1), rs.getLong(2), rs.getInt(3));\n+            }\n+            return mutationEventKeywordCountByGeneticProfileId;\n+        } catch (SQLException e) {\n+            throw new DaoException(e);\n+        } finally {\n+            JdbcUtil.closeAll(DaoMutation.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    public static Map<Long, Integer> getGeneCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        Map<Long, Integer> geneCountByGeneticProfileId = new HashMap<>();\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoMutation.class);\n+            pstmt = con.prepareStatement(\n+                \"SELECT ENTREZ_GENE_ID AS `ENTREZ_GENE_ID`, COUNT(DISTINCT(SAMPLE_ID)) AS `GENE_COUNT`\" +\n+                    \" FROM mutation WHERE GENETIC_PROFILE_ID = ? \" +\n+                    \"GROUP BY ENTREZ_GENE_ID;\");\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while(rs.next()) {", "originalCommit": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyNzcwMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#discussion_r495227703", "bodyText": "fixed, thanks!", "author": "ao508", "createdAt": "2020-09-25T20:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NDEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f7f5ae829f379015a04ef034acce39754009eec", "chunk": "diff --git a/core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java b/core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java\nindex 37c95b3f9..0f734a78b 100644\n--- a/core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java\n+++ b/core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java\n\n@@ -253,7 +253,7 @@ public final class DaoMutation {\n                     \"GROUP BY ENTREZ_GENE_ID;\");\n             pstmt.setInt(1, geneticProfileId);\n             rs = pstmt.executeQuery();\n-            while(rs.next()) {\n+            while (rs.next()) {\n                 geneCountByGeneticProfileId.put(rs.getLong(\"ENTREZ_GENE_ID\"), rs.getInt(\"GENE_COUNT\"));\n             }\n             return geneCountByGeneticProfileId;\n"}}, {"oid": "7bedc81f2266df6f76afbcda17e608606d59f6b5", "url": "https://github.com/cBioPortal/cbioportal/commit/7bedc81f2266df6f76afbcda17e608606d59f6b5", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>", "committedDate": "2020-09-23T19:17:53Z", "type": "forcePushed"}, {"oid": "5f7f5ae829f379015a04ef034acce39754009eec", "url": "https://github.com/cBioPortal/cbioportal/commit/5f7f5ae829f379015a04ef034acce39754009eec", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>", "committedDate": "2020-09-25T20:59:00Z", "type": "commit"}, {"oid": "5f7f5ae829f379015a04ef034acce39754009eec", "url": "https://github.com/cBioPortal/cbioportal/commit/5f7f5ae829f379015a04ef034acce39754009eec", "message": "Optimize mutation count by keyword calculation\n\nCurrent implementation of this calculation is extremely time consuming\nfor studies with large and/or multiple MAFs.\n\nWith the changes in this PR the runtime for the calculation is reduced\nfrom greater than 60 minutes to approximately 18 minutes for the\nmskimpact study.\n\nIn short the changes in this PR implement the use of the bulk loader as\nwell as a step that pre-calculates the gene counts and mutation keyword\ncounts for the current study being imported before creating the insert\nstatements with the bulk loader and executing the import.\n\nSigned-off-by: Angelica Ochoa <15623749+ao508@users.noreply.github.com>", "committedDate": "2020-09-25T20:59:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MTc3Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7895#discussion_r496991772", "bodyText": "yes ... here we can simply filter mutation table by genetic_profile_id ... rather than joining to genetic_profile first and then selecting records which match by genetic profile id (as before)", "author": "sheridancbio", "createdAt": "2020-09-29T19:30:14Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoMutation.java", "diffHunk": "@@ -186,27 +189,74 @@ public static void createMutationCountClinicalData(GeneticProfile geneticProfile\n         }\n     }\n \n-    public static int calculateMutationCountByKeyword(int profileId) throws DaoException {\n+    public static void calculateMutationCountByKeyword(int geneticProfileId) throws DaoException {\n+        if (!MySQLbulkLoader.isBulkLoad()) {\n+            throw new DaoException(\"You have to turn on MySQLbulkLoader in order to update mutation counts by keyword\");\n+        } else {\n+            MultiKeyMap mutationEventKeywordCountMap = getMutationEventKeywordCountByGeneticProfileId(geneticProfileId); // mutation event keyword -> entrez id -> keyword count\n+            Map<Long, Integer> geneCountMap = getGeneCountByGeneticProfileId(geneticProfileId); // entrez id -> gene count\n+            MapIterator it = mutationEventKeywordCountMap.mapIterator();\n+            while (it.hasNext()) {\n+                it.next();\n+                MultiKey mk = (MultiKey) it.getKey();\n+                String mutationEventKeyword = String.valueOf(mk.getKey(0));\n+                Long entrezGeneId = Long.valueOf(mk.getKey(1).toString());\n+                String keywordCount = it.getValue().toString();\n+                Integer geneCount = geneCountMap.get(entrezGeneId);\n+                MySQLbulkLoader.getMySQLbulkLoader(\"mutation_count_by_keyword\").insertRecord(\n+                        Integer.toString(geneticProfileId),\n+                        mutationEventKeyword,\n+                        Long.toString(entrezGeneId),\n+                        keywordCount,\n+                        Integer.toString(geneCount)\n+                );\n+            }\n+        }\n+    }\n+\n+    public static MultiKeyMap getMutationEventKeywordCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        MultiKeyMap mutationEventKeywordCountByGeneticProfileId = new MultiKeyMap();\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoMutation.class);\n+            pstmt = con.prepareStatement(\n+                    \"SELECT mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`,  IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(mutation.SAMPLE_ID))) AS KEYWORD_COUNT \" +\n+                            \"FROM mutation_event JOIN mutation on mutation.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n+                            \"WHERE mutation.`GENETIC_PROFILE_ID` = ? \" +\n+                            \"GROUP BY mutation_event.`KEYWORD`, mutation_event.`ENTREZ_GENE_ID`;\"\n+            );\n+            pstmt.setInt(1, geneticProfileId);\n+            rs = pstmt.executeQuery();\n+            while (rs.next()) {\n+                mutationEventKeywordCountByGeneticProfileId.put(rs.getString(1), rs.getLong(2), rs.getInt(3));\n+            }\n+            return mutationEventKeywordCountByGeneticProfileId;\n+        } catch (SQLException e) {\n+            throw new DaoException(e);\n+        } finally {\n+            JdbcUtil.closeAll(DaoMutation.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    public static Map<Long, Integer> getGeneCountByGeneticProfileId(int geneticProfileId) throws DaoException {\n+        Map<Long, Integer> geneCountByGeneticProfileId = new HashMap<>();\n         Connection con = null;\n         PreparedStatement pstmt = null;\n         ResultSet rs = null;\n         try {\n             con = JdbcUtil.getDbConnection(DaoMutation.class);\n             pstmt = con.prepareStatement(\n-                \"INSERT INTO mutation_count_by_keyword \" +\n-                    \"SELECT g2.`GENETIC_PROFILE_ID`, mutation_event.`KEYWORD`, m2.`ENTREZ_GENE_ID`, \" +\n-                    \"IF(mutation_event.`KEYWORD` IS NULL, 0, COUNT(DISTINCT(m2.SAMPLE_ID))) AS KEYWORD_COUNT, \" +\n-                    \"(SELECT COUNT(DISTINCT(m1.SAMPLE_ID)) FROM `mutation` AS m1 , `genetic_profile` AS g1 \" +\n-                    \"WHERE m1.`GENETIC_PROFILE_ID` = g1.`GENETIC_PROFILE_ID` \" +\n-                    \"AND g1.`GENETIC_PROFILE_ID`= g2.`GENETIC_PROFILE_ID` AND m1.`ENTREZ_GENE_ID` = m2.`ENTREZ_GENE_ID` \" +\n-                    \"GROUP BY g1.`GENETIC_PROFILE_ID` , m1.`ENTREZ_GENE_ID`) AS GENE_COUNT \" +\n-                    \"FROM `mutation` AS m2 , `genetic_profile` AS g2 , `mutation_event` \" +\n-                    \"WHERE m2.`GENETIC_PROFILE_ID` = g2.`GENETIC_PROFILE_ID` \" +\n-                    \"AND m2.`MUTATION_EVENT_ID` = mutation_event.`MUTATION_EVENT_ID` \" +\n-                    \"AND g2.`GENETIC_PROFILE_ID`=? \" +\n-                    \"GROUP BY g2.`GENETIC_PROFILE_ID` , mutation_event.`KEYWORD` , m2.`ENTREZ_GENE_ID`;\");\n-            pstmt.setInt(1, profileId);\n-            return pstmt.executeUpdate();\n+                \"SELECT ENTREZ_GENE_ID AS `ENTREZ_GENE_ID`, COUNT(DISTINCT(SAMPLE_ID)) AS `GENE_COUNT`\" +\n+                    \" FROM mutation WHERE GENETIC_PROFILE_ID = ? \" +", "originalCommit": "5f7f5ae829f379015a04ef034acce39754009eec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}