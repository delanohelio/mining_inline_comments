{"pr_number": 2962, "pr_title": "Chores: bump up f8 dep", "pr_createdAt": "2020-05-06T10:19:13Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962", "timeline": [{"oid": "3892d06a57b971889da25c2baf9b961283f07a39", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3892d06a57b971889da25c2baf9b961283f07a39", "message": "patch pdb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-24T13:58:55Z", "type": "forcePushed"}, {"oid": "208525fbb8634a4c6079c69c4a48924a13524606", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/208525fbb8634a4c6079c69c4a48924a13524606", "message": "fix build\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T08:49:22Z", "type": "forcePushed"}, {"oid": "af926ebb05783b6575ba71bfd39d1205b0700232", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/af926ebb05783b6575ba71bfd39d1205b0700232", "message": "spotbugs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T09:50:24Z", "type": "forcePushed"}, {"oid": "c1c421d4f0d9e4083c628b48fd1df3f93006a0ca", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c1c421d4f0d9e4083c628b48fd1df3f93006a0ca", "message": "mock the tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T11:37:04Z", "type": "forcePushed"}, {"oid": "8bffdf4f09f8a7b8e1080ad18ed69ad446356c23", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8bffdf4f09f8a7b8e1080ad18ed69ad446356c23", "message": "mock the tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T12:03:14Z", "type": "forcePushed"}, {"oid": "07f6b074ba17775e461a2027363ce9a20a9eb49b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/07f6b074ba17775e461a2027363ce9a20a9eb49b", "message": "fix another tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T18:22:03Z", "type": "forcePushed"}, {"oid": "b72ac60f579e0bfd899d2215bc4527e6eb3e0e5e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b72ac60f579e0bfd899d2215bc4527e6eb3e0e5e", "message": "revert+fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-13T12:37:00Z", "type": "forcePushed"}, {"oid": "67ec313bc8cb03c4ba2c8b32c96ac8bf389176c1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/67ec313bc8cb03c4ba2c8b32c96ac8bf389176c1", "message": "revert+fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-13T12:51:54Z", "type": "forcePushed"}, {"oid": "70e227b8a901c197b905e674182908bbc913c479", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/70e227b8a901c197b905e674182908bbc913c479", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-13T15:07:18Z", "type": "forcePushed"}, {"oid": "22d03208821a7df6f961ececb202c92d7074550a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/22d03208821a7df6f961ececb202c92d7074550a", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T06:35:26Z", "type": "forcePushed"}, {"oid": "82fae99fe11f123c82e23deed7fb13ff1ab13af3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/82fae99fe11f123c82e23deed7fb13ff1ab13af3", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T06:51:54Z", "type": "forcePushed"}, {"oid": "5aedfa03b2270d95cdce4612294e9a0bc98da024", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5aedfa03b2270d95cdce4612294e9a0bc98da024", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T07:01:33Z", "type": "forcePushed"}, {"oid": "0a9a012ef880f6c9d5f6c9dc64aec03591e408a5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0a9a012ef880f6c9d5f6c9dc64aec03591e408a5", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T07:04:01Z", "type": "forcePushed"}, {"oid": "18db028b81b40322f39d30a34cc94459e689cf72", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/18db028b81b40322f39d30a34cc94459e689cf72", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T07:10:19Z", "type": "forcePushed"}, {"oid": "1d3dbb438d7d4603c716356584c3beab97686539", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d3dbb438d7d4603c716356584c3beab97686539", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T07:13:35Z", "type": "forcePushed"}, {"oid": "b13b2b06c9ddd1712835c8fe7147b77a6a8ca1a2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b13b2b06c9ddd1712835c8fe7147b77a6a8ca1a2", "message": "debug\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T07:49:20Z", "type": "forcePushed"}, {"oid": "6aedb75b420e7a05806e1eb97b5dd0e5ecd3fa5a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6aedb75b420e7a05806e1eb97b5dd0e5ecd3fa5a", "message": "fix build\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T09:39:31Z", "type": "forcePushed"}, {"oid": "56f1b0cb320efdfd75e6f245ef2523aa00f7d943", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/56f1b0cb320efdfd75e6f245ef2523aa00f7d943", "message": "increase surefire mem\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T11:48:17Z", "type": "forcePushed"}, {"oid": "3cff899a4184254b5bf075d43ed4a295f60da169", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3cff899a4184254b5bf075d43ed4a295f60da169", "message": "increase surefire mem\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-14T13:11:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0OTIzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425349231", "bodyText": "Why is this needed and wasn't needed before?", "author": "scholzj", "createdAt": "2020-05-14T18:33:27Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2789,6 +2790,7 @@ StatefulSet getKafkaStatefulSet()   {\n         }\n \n         @SuppressWarnings(\"deprecation\")\n+        @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\")", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2MDQ1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431160453", "bodyText": "How was this resolved?", "author": "tombentley", "createdAt": "2020-05-27T14:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0OTIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 49506dad8b..8ee5d17cf3 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2790,86 +2827,16 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n         }\n \n         @SuppressWarnings(\"deprecation\")\n-        @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\")\n-        private final Future<ReconciliationState> getTopicOperatorDescription() {\n-            this.topicOperator = io.strimzi.operator.cluster.model.TopicOperator.fromCrd(kafkaAssembly, versions);\n-\n-            if (topicOperator != null) {\n-                this.toDeployment = topicOperator.generateDeployment(pfa.isOpenshift(), imagePullPolicy, imagePullSecrets);\n-                if (topicOperator.getLogging() instanceof ExternalLogging) {\n-                    return configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName())\n-                            .compose(cm -> {\n-                                ConfigMap logAndMetricsConfigMap = topicOperator.generateMetricsAndLogConfigMap(cm);\n-                                this.toMetricsAndLogsConfigMap = topicOperator.generateMetricsAndLogConfigMap(logAndMetricsConfigMap);\n-                                Annotations.annotations(this.toDeployment.getSpec().getTemplate()).put(\n-                                        Annotations.STRIMZI_LOGGING_ANNOTATION,\n-                                        this.toMetricsAndLogsConfigMap.getData().get(\"log4j2.properties\"));\n-\n-                                return Future.succeededFuture(this);\n-                            });\n-                } else {\n-                    this.toMetricsAndLogsConfigMap = topicOperator.generateMetricsAndLogConfigMap(null);\n-                }\n-            } else {\n-                this.toDeployment = null;\n-                this.toMetricsAndLogsConfigMap = null;\n+        Future<ReconciliationState> checkUnsupportedTopicOperator() {\n+            if (kafkaAssembly.getSpec().getTopicOperator() != null) {\n+                kafkaStatus.addCondition(StatusUtils.buildWarningCondition(\"TopicOperator\",\n+                        \"Kafka.spec.topicOperator is not supported anymore. \" +\n+                                \"Topic operator should be configured at path spec.entityOperator.topicOperator.\"));\n             }\n-            return Future.succeededFuture(this);\n-        }\n-\n-        @SuppressWarnings(\"deprecation\")\n-        Future<ReconciliationState> topicOperatorServiceAccount() {\n-            return withVoid(serviceAccountOperations.reconcile(namespace,\n-                    io.strimzi.operator.cluster.model.TopicOperator.topicOperatorServiceAccountName(name),\n-                    toDeployment != null ? topicOperator.generateServiceAccount() : null));\n-        }\n \n-        @SuppressWarnings(\"deprecation\")\n-        Future<ReconciliationState> topicOperatorRoleBinding() {\n-            if (topicOperator != null) {\n-                String watchedNamespace = namespace;\n-\n-                if (topicOperator.getWatchedNamespace() != null\n-                        && !topicOperator.getWatchedNamespace().isEmpty()) {\n-                    watchedNamespace = topicOperator.getWatchedNamespace();\n-                }\n-\n-                return withVoid(roleBindingOperations.reconcile(watchedNamespace, io.strimzi.operator.cluster.model.TopicOperator.roleBindingName(name), topicOperator.generateRoleBinding(namespace, watchedNamespace)));\n-            } else {\n-                return withVoid(roleBindingOperations.reconcile(namespace, io.strimzi.operator.cluster.model.TopicOperator.roleBindingName(name), null));\n-            }\n-        }\n-\n-        @SuppressWarnings(\"deprecation\")\n-        Future<ReconciliationState> topicOperatorAncillaryCm() {\n-            return withVoid(configMapOperations.reconcile(namespace,\n-                    toDeployment != null ? topicOperator.getAncillaryConfigName() : io.strimzi.operator.cluster.model.TopicOperator.metricAndLogConfigsName(name),\n-                    toMetricsAndLogsConfigMap));\n-        }\n-\n-        @SuppressWarnings(\"deprecation\")\n-        Future<ReconciliationState> topicOperatorDeployment() {\n-            if (this.topicOperator != null) {\n-                Future<Deployment> future = deploymentOperations.getAsync(namespace, this.topicOperator.getName());\n-                return future.compose(dep -> {\n-                    // getting the current cluster CA generation from the current deployment, if exists\n-                    int caCertGeneration = getCaCertGeneration(this.clusterCa);\n-                    Annotations.annotations(toDeployment.getSpec().getTemplate()).put(\n-                            Ca.ANNO_STRIMZI_IO_CLUSTER_CA_CERT_GENERATION, String.valueOf(caCertGeneration));\n-                    return withVoid(deploymentOperations.reconcile(namespace, io.strimzi.operator.cluster.model.TopicOperator.topicOperatorName(name), toDeployment));\n-                }).map(i -> this);\n-            } else  {\n-                return withVoid(deploymentOperations.reconcile(namespace, io.strimzi.operator.cluster.model.TopicOperator.topicOperatorName(name), null));\n-            }\n-        }\n-\n-        @SuppressWarnings(\"deprecation\")\n-        Future<ReconciliationState> topicOperatorSecret(Supplier<Date> dateSupplier) {\n-            return withVoid(secretOperations.reconcile(namespace, io.strimzi.operator.cluster.model.TopicOperator.secretName(name), topicOperator == null ? null : topicOperator.generateSecret(clusterCa, isMaintenanceTimeWindowsSatisfied(dateSupplier))));\n+            return Future.succeededFuture(this);\n         }\n \n-        @SuppressWarnings(\"deprecation\")\n-        @SuppressFBWarnings(value = \"UPM_UNCALLED_PRIVATE_METHOD\")\n         private final Future<ReconciliationState> getEntityOperatorDescription() {\n             this.entityOperator = EntityOperator.fromCrd(kafkaAssembly, versions);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDA3OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350079", "bodyText": "Are you sure this is right? DeletionPropagation.BACKGROUND does not sound like it is the same as cascading(false). I think that DeletionPropagation.ORPHAN sounds more like it.", "author": "scholzj", "createdAt": "2020-05-14T18:35:01Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "diffHunk": "@@ -323,7 +324,7 @@ public static int getPodGeneration(Pod resource) {\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).cascading(cascading).withGracePeriod(-1L).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\nindex b169f4dce1..423e8a5676 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\n\n@@ -324,7 +334,7 @@ public abstract class StatefulSetOperator extends AbstractScalableResourceOperat\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.ORPHAN).withGracePeriod(-1L).delete();\n \n             Future<Void> deletedFut = waitFor(namespace, name, \"deleted\", pollingIntervalMs, timeoutMs, (ignore1, ignore2) -> {\n                 StatefulSet sts = get(namespace, name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDQzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350436", "bodyText": "Have you double checked that the gracePeriod is still maintained from the pod when the withGracePeriod is removed?", "author": "scholzj", "createdAt": "2020-05-14T18:35:37Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java", "diffHunk": "@@ -323,7 +324,7 @@ public static int getPodGeneration(Pod resource) {\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).cascading(cascading).withGracePeriod(-1L).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\nindex b169f4dce1..423e8a5676 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetOperator.java\n\n@@ -324,7 +334,7 @@ public abstract class StatefulSetOperator extends AbstractScalableResourceOperat\n             long pollingIntervalMs = 1_000;\n             long timeoutMs = operationTimeoutMs;\n \n-            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.BACKGROUND).delete();\n+            operation().inNamespace(namespace).withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.ORPHAN).withGracePeriod(-1L).delete();\n \n             Future<Void> deletedFut = waitFor(namespace, name, \"deleted\", pollingIntervalMs, timeoutMs, (ignore1, ignore2) -> {\n                 StatefulSet sts = get(namespace, name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MDkzMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425350932", "bodyText": "This doesn't sound right to me. Why is this needed nd why is this ok to change it?", "author": "scholzj", "createdAt": "2020-05-14T18:36:32Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java", "diffHunk": "@@ -349,7 +349,7 @@ public void testGenerateStatefulSetWithEmptyStorageSelector() {\n \n     @Test\n     public void testGenerateStatefulSetWithSetSizeLimit() {\n-        String sizeLimit = \"1Gi\";\n+        String sizeLimit = \"1\";", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java\nindex ced948701f..902bddc0c2 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaClusterTest.java\n\n@@ -349,8 +336,8 @@ public class KafkaClusterTest {\n \n     @Test\n     public void testGenerateStatefulSetWithSetSizeLimit() {\n-        String sizeLimit = \"1\";\n-        Kafka kafkaAssembly = new KafkaBuilder(ResourceUtils.createKafkaCluster(namespace, cluster, replicas,\n+        String sizeLimit = \"1Gi\";\n+        Kafka kafkaAssembly = new KafkaBuilder(ResourceUtils.createKafka(namespace, cluster, replicas,\n                 image, healthDelay, healthTimeout, metricsCm, configuration, emptyMap()))\n                 .editSpec()\n                     .editKafka()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MTI5Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425351296", "bodyText": "Again, this does not seem to be right. How does this impact the behaviour of the public APIs where you use 4Gi today?", "author": "scholzj", "createdAt": "2020-05-14T18:37:18Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java", "diffHunk": "@@ -284,7 +284,7 @@ public void testGenerateBuildConfig() {\n         assertThat(bc.getSpec().getSuccessfulBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getFailedBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getResources().getLimits().get(\"cpu\").getAmount(), is(\"42\"));\n-        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\").getAmount(), is(\"4Gi\"));\n+        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\").getAmount(), is(\"4\"));", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java\nindex a8c58c8f56..90900e56c0 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectS2IClusterTest.java\n\n@@ -284,7 +281,7 @@ public class KafkaConnectS2IClusterTest {\n         assertThat(bc.getSpec().getSuccessfulBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getFailedBuildsHistoryLimit(), is(new Integer(5)));\n         assertThat(bc.getSpec().getResources().getLimits().get(\"cpu\").getAmount(), is(\"42\"));\n-        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\").getAmount(), is(\"4\"));\n+        assertThat(bc.getSpec().getResources().getRequests().get(\"mem\"), is(new Quantity(\"4\", \"Gi\")));\n         checkOwnerReference(kc.createOwnerReference(), bc);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425353742", "bodyText": "What is the value of having this in Util and not right in this class? It does not seem to be used from other places.", "author": "scholzj", "createdAt": "2020-05-14T18:41:29Z", "path": "operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java", "diffHunk": "@@ -103,7 +103,7 @@ private static OkHttpClient getOkHttpClient(KubernetesClient client)   {\n \n         if (kubernetesVersion != null) {\n             try {\n-                futureVersion = Future.succeededFuture(new VersionInfo(Util.parseMap(kubernetesVersion)));\n+                futureVersion = Future.succeededFuture(Util.parseVersionInfo(kubernetesVersion));", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMzE0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425613145", "bodyText": "It was there before o.O", "author": "sknot-rh", "createdAt": "2020-05-15T07:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNzY2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425627663", "bodyText": "Before you used a method from Util. But it was generic method used on many places. Now you added your own method (which is fine) used only in here and in the related test. So it does not mke sense anymore I guess?", "author": "scholzj", "createdAt": "2020-05-15T07:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java b/operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java\nindex e4f3770e36..7687a7e77d 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/PlatformFeaturesAvailability.java\n\n@@ -103,7 +104,7 @@ public class PlatformFeaturesAvailability {\n \n         if (kubernetesVersion != null) {\n             try {\n-                futureVersion = Future.succeededFuture(Util.parseVersionInfo(kubernetesVersion));\n+                futureVersion = Future.succeededFuture(parseVersionInfo(kubernetesVersion));\n             } catch (ParseException e) {\n                 throw new RuntimeException(\"Failed to parse the Kubernetes version information provided through STRIMZI_KUBERNETES_VERSION environment variable\", e);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NDA2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425354069", "bodyText": "Did you checked why we added the cascading here?", "author": "scholzj", "createdAt": "2020-05-14T18:42:04Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java", "diffHunk": "@@ -173,7 +173,7 @@ public AbstractNonNamespacedResourceOperator(Vertx vertx, C client, String resou\n \n     protected Future<ReconcileResult<T>> internalPatch(String name, T current, T desired, boolean cascading) {\n         try {\n-            T result = operation().withName(name).cascading(cascading).patch(desired);\n+            T result = operation().withName(name).patch(desired);", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java\nindex b5a917d8be..89a7bf20a1 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperator.java\n\n@@ -173,7 +174,7 @@ public abstract class AbstractNonNamespacedResourceOperator<C extends Kubernetes\n \n     protected Future<ReconcileResult<T>> internalPatch(String name, T current, T desired, boolean cascading) {\n         try {\n-            T result = operation().withName(name).patch(desired);\n+            T result = operation().withName(name).withPropagationPolicy(cascading ? DeletionPropagation.FOREGROUND : DeletionPropagation.ORPHAN).patch(desired);\n             log.debug(\"{} {} has been patched\", resourceKind, name);\n             return Future.succeededFuture(wasChanged(current, result) ?\n                     ReconcileResult.patched(result) : ReconcileResult.noop(result));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTA1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425355055", "bodyText": "Why do we have to wait here now and did not had to wait before? That sounds like it will break whatever place is using it and is expecting the old behavior.", "author": "scholzj", "createdAt": "2020-05-14T18:43:43Z", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "diffHunk": "@@ -105,6 +106,7 @@ public void testCreateModifyDelete(VertxTestContext context)    {\n             }))\n             .compose(rr -> op.reconcile(namespace, RESOURCE_NAME, null))\n             .setHandler(context.succeeding(rrDeleted -> {\n+                TestUtils.waitFor(\"resouce deleted\", 1_000, 30_000, () -> op.get(namespace, RESOURCE_NAME) == null);", "originalCommit": "e013f55a32c17044087c6bbaeb8c5e10daca92ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3MDIzMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r425770233", "bodyText": "It is flaky now but I am afraid it is the same as https://github.com/strimzi/strimzi-kafka-operator/pull/1424/files#diff-210c63328d6cf1d8f3f414fdd5244bf8R129", "author": "sknot-rh", "createdAt": "2020-05-15T12:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java b/operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java\nindex 850bd863de..e971103c26 100644\n--- a/operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java\n+++ b/operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java\n\n@@ -90,28 +99,37 @@ public abstract class AbstractResourceOperatorIT<C extends KubernetesClient, T e\n         T newResource = getOriginal();\n         T modResource = getModified();\n \n-        op.reconcile(namespace, RESOURCE_NAME, newResource)\n-            .setHandler(context.succeeding(rrCreated -> {\n-                T created = op.get(namespace, RESOURCE_NAME);\n+        op.reconcile(namespace, resourceName, newResource)\n+            .onComplete(context.succeeding(rrCreated -> {\n+                T created = op.get(namespace, resourceName);\n \n                 context.verify(() -> assertThat(created, is(notNullValue())));\n                 assertResources(context, newResource, created);\n             }))\n-            .compose(rr -> op.reconcile(namespace, RESOURCE_NAME, modResource))\n-            .setHandler(context.succeeding(rrModified -> {\n-                T modified = op.get(namespace, RESOURCE_NAME);\n+            .compose(rr -> op.reconcile(namespace, resourceName, modResource))\n+            .onComplete(context.succeeding(rrModified -> {\n+                T modified = op.get(namespace, resourceName);\n \n                 context.verify(() -> assertThat(modified, is(notNullValue())));\n                 assertResources(context, modResource, modified);\n             }))\n-            .compose(rr -> op.reconcile(namespace, RESOURCE_NAME, null))\n-            .setHandler(context.succeeding(rrDeleted -> {\n-                TestUtils.waitFor(\"resouce deleted\", 1_000, 30_000, () -> op.get(namespace, RESOURCE_NAME) == null);\n-                T deleted = op.get(namespace, RESOURCE_NAME);\n-\n-                context.verify(() -> assertThat(deleted, is(nullValue())));\n-                async.flag();\n+            .compose(rr -> op.reconcile(namespace, resourceName, null))\n+            .onComplete(context.succeeding(rrDeleted -> {\n+                // it seems the resource is cached for some time so we need wait for it to be null\n+                context.verify(() -> {\n+                        Util.waitFor(vertx, \"resource deletion \" + resourceName, \"deleted\", 1000,\n+                                30_000, () -> op.get(namespace, resourceName) == null)\n+                                .onComplete(del -> {\n+                                    assertThat(op.get(namespace, resourceName), is(nullValue()));\n+                                    async.flag();\n+                                });\n+                    }\n+                );\n             }));\n     }\n+\n+    protected String getResourceName(String name) {\n+        return name + \"-\" + new Random().nextInt(Integer.MAX_VALUE);\n+    }\n }\n \n"}}, {"oid": "125a37fc41c17a9e530da6cbf546c772cb2dc9ad", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/125a37fc41c17a9e530da6cbf546c772cb2dc9ad", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-15T12:40:56Z", "type": "forcePushed"}, {"oid": "c307ea02a6e127a3f47a79ade374ad425296e137", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c307ea02a6e127a3f47a79ade374ad425296e137", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-26T06:07:23Z", "type": "forcePushed"}, {"oid": "0ec7f74d8fb68e4eb9f76606169b96c411cadf73", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0ec7f74d8fb68e4eb9f76606169b96c411cadf73", "message": "fix attempt\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-26T10:51:22Z", "type": "forcePushed"}, {"oid": "ffa8cd615732bcb661ab785e6eabf4d379a04488", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ffa8cd615732bcb661ab785e6eabf4d379a04488", "message": "fix attempt\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-26T10:53:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTMzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431159335", "bodyText": "Can we rename x to something a little more descriptive?", "author": "tombentley", "createdAt": "2020-05-27T14:06:58Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java", "diffHunk": "@@ -277,18 +277,17 @@ public void setup(VertxTestContext testContext) throws InterruptedException {\n         kafkaConnectOperator.createWatch(NAMESPACE, e -> testContext.failNow(e))\n             .onComplete(testContext.succeeding())\n             .compose(watch -> {\n-                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx, pfa, ros, config, x -> api);\n+                kafkaConnectS2iOperator = new KafkaConnectS2IAssemblyOperator(vertx,\n+                    pfa,\n+                    ros,\n+                    config,\n+                    x -> api);", "originalCommit": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzM3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431587374", "bodyText": "Not actually my code but sure.", "author": "sknot-rh", "createdAt": "2020-05-28T05:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c1b8390aa5295e2db2167210089d82b022d61d5", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java\nindex 544baa15d0..61625360ee 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/ConnectorMockTest.java\n\n@@ -270,7 +270,7 @@ public class ConnectorMockTest {\n             pfa,\n             ros,\n             config,\n-            x -> api);\n+            vertx -> api);\n \n         Checkpoint async = testContext.checkpoint();\n         // Fail test if watcher closes for any reason\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2Mjk3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431162977", "bodyText": "Why is this now necessary?", "author": "tombentley", "createdAt": "2020-05-27T14:11:55Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -456,6 +456,7 @@ public static KafkaConnectS2I createEmptyKafkaConnectS2ICluster(String clusterCm\n                 .withNamespace(clusterCmNamespace)\n                 .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                         \"my-user-label\", \"cromulent\"))\n+                .withAnnotations(emptyMap())", "originalCommit": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTE5Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431589192", "bodyText": "It seems to be null by default. Some tests were relying on non null value. See \n  \n    \n      strimzi-kafka-operator/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperatorTest.java\n    \n    \n         Line 1023\n      in\n      f983bb0\n    \n    \n    \n    \n\n        \n          \n           clusterCm.getMetadata().getAnnotations().put(\"strimzi.io/use-connector-resources\", \"true\");", "author": "sknot-rh", "createdAt": "2020-05-28T05:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2Mjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\nindex 0627349f9f..de46ee31f3 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\n\n@@ -443,95 +428,112 @@ public class ResourceUtils {\n                     .withConfig((Map<String, Object>) TestUtils.fromJson(connectConfig, Map.class))\n                     .withInsecureSourceRepository(insecureSourceRepo)\n                     .withBuildResources(builResourceRequirements)\n-                .endSpec().build();\n+                .endSpec()\n+                .build();\n     }\n \n     /**\n-     * Generate empty Kafka Connect S2I ConfigMap\n+     * Create an empty Kafka Connect S2I custom resource\n      */\n-    public static KafkaConnectS2I createEmptyKafkaConnectS2ICluster(String clusterCmNamespace, String clusterCmName) {\n+    public static KafkaConnectS2I createEmptyKafkaConnectS2I(String namespace, String name) {\n         return new KafkaConnectS2IBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                .withName(clusterCmName)\n-                .withNamespace(clusterCmNamespace)\n-                .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n-                        \"my-user-label\", \"cromulent\"))\n-                .withAnnotations(emptyMap())\n+                    .withName(name)\n+                    .withNamespace(namespace)\n+                    .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n+                            \"my-user-label\", \"cromulent\"))\n+                    .withAnnotations(emptyMap())\n                 .build())\n-                .withNewSpec().endSpec()\n+                .withNewSpec()\n+                .endSpec()\n                 .build();\n     }\n \n     /**\n-     * Generate empty Kafka Connect ConfigMap\n+     * Create an empty Kafka Connect custom resource\n      */\n-    public static KafkaConnect createEmptyKafkaConnectCluster(String clusterCmNamespace, String clusterCmName) {\n+    public static KafkaConnect createEmptyKafkaConnect(String namespace, String name) {\n         return new KafkaConnectBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                        .withName(clusterCmName)\n-                        .withNamespace(clusterCmNamespace)\n+                        .withName(name)\n+                        .withNamespace(namespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .withAnnotations(emptyMap())\n                         .build())\n-                .withNewSpec().endSpec()\n+                .withNewSpec()\n+                .endSpec()\n                 .build();\n     }\n \n     /**\n-     * Generate empty Kafka Bridge ConfigMap\n+     * Create an empty Kafka Bridge custom resource\n      */\n-    public static KafkaBridge createEmptyKafkaBridgeCluster(String clusterCmNamespace, String clusterCmName) {\n+    public static KafkaBridge createEmptyKafkaBridge(String namespace, String name) {\n         return new KafkaBridgeBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                        .withName(clusterCmName)\n-                        .withNamespace(clusterCmNamespace)\n+                        .withName(name)\n+                        .withNamespace(namespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n                 .withNewSpec()\n-                .withNewHttp(8080).endSpec()\n+                    .withNewHttp(8080)\n+                .endSpec()\n                 .build();\n     }\n \n     /**\n-     * Generate empty Kafka MirrorMaker ConfigMap\n+     * Create an empty Kafka MirrorMaker custom resource\n      */\n-    public static KafkaMirrorMaker createEmptyKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName) {\n+    public static KafkaMirrorMaker createEmptyKafkaMirrorMaker(String namespace, String name) {\n         return new KafkaMirrorMakerBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                        .withName(clusterCmName)\n-                        .withNamespace(clusterCmNamespace)\n+                        .withName(name)\n+                        .withNamespace(namespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n-                .withNewSpec().endSpec()\n+                .withNewSpec()\n+                .endSpec()\n                 .build();\n     }\n \n-    public static KafkaMirrorMaker createKafkaMirrorMakerCluster(String clusterCmNamespace, String clusterCmName, String image, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n-        return new KafkaMirrorMakerBuilder()\n+    public static KafkaMirrorMaker createKafkaMirrorMaker(String namespace, String name, String image, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n+        return createKafkaMirrorMaker(namespace, name, image, null, producer, consumer, whitelist, metricsCm);\n+    }\n+\n+    public static KafkaMirrorMaker createKafkaMirrorMaker(String namespace, String name, String image, Integer replicas, KafkaMirrorMakerProducerSpec producer, KafkaMirrorMakerConsumerSpec consumer, String whitelist, Map<String, Object> metricsCm) {\n+\n+        KafkaMirrorMakerBuilder builder = new KafkaMirrorMakerBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                        .withName(clusterCmName)\n-                        .withNamespace(clusterCmNamespace)\n+                        .withName(name)\n+                        .withNamespace(namespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n                 .withNewSpec()\n-                .withImage(image)\n-                .withProducer(producer)\n-                .withConsumer(consumer)\n-                .withWhitelist(whitelist)\n-                .withMetrics(metricsCm)\n-                .endSpec()\n-                .build();\n+                    .withImage(image)\n+                    .withProducer(producer)\n+                    .withConsumer(consumer)\n+                    .withWhitelist(whitelist)\n+                    .withMetrics(metricsCm)\n+                .endSpec();\n+\n+        if (replicas != null) {\n+            builder.editOrNewSpec()\n+                        .withReplicas(replicas)\n+                    .endSpec();\n+        }\n+\n+        return builder.build();\n     }\n \n-    public static KafkaBridge createKafkaBridgeCluster(String clusterCmNamespace, String clusterCmName, String image, int replicas, String bootstrapservers, KafkaBridgeProducerSpec producer, KafkaBridgeConsumerSpec consumer, KafkaBridgeHttpConfig http, Map<String, Object> metricsCm) {\n+    public static KafkaBridge createKafkaBridge(String namespace, String name, String image, int replicas, String bootstrapservers, KafkaBridgeProducerSpec producer, KafkaBridgeConsumerSpec consumer, KafkaBridgeHttpConfig http, boolean enableMetrics) {\n         return new KafkaBridgeBuilder()\n                 .withMetadata(new ObjectMetaBuilder()\n-                        .withName(clusterCmName)\n-                        .withNamespace(clusterCmNamespace)\n+                        .withName(name)\n+                        .withNamespace(namespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n                         .build())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431165803", "bodyText": "So I'm guessing this is necessary because there's some new overloaded create() method which makes the old any() ambiguous. Can you tell me what the new create() method is?", "author": "tombentley", "createdAt": "2020-05-27T14:15:30Z", "path": "mockkube/src/main/java/io/strimzi/test/mockkube/StatefulSetMockBuilder.java", "diffHunk": "@@ -126,7 +128,7 @@ private void mockScale(String resourceName, RollableScalableResource<StatefulSet\n \n     @Override\n     protected void mockCreate(String resourceName, RollableScalableResource<StatefulSet, DoneableStatefulSet> resource) {\n-        when(resource.create(any())).thenAnswer(cinvocation -> {\n+        when(resource.create(any(StatefulSet.class))).thenAnswer(cinvocation -> {", "originalCommit": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431586982", "bodyText": "I believe it is caused by adding this: https://github.com/fabric8io/kubernetes-client/blob/master/kubernetes-client/src/main/java/io/fabric8/kubernetes/client/dsl/Createable.java#L22", "author": "sknot-rh", "createdAt": "2020-05-28T05:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5Mzc0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r432293745", "bodyText": "Ah, excellent, that's a method I requested myself actually. In the AbstractResourceOperator (and similar) we used to get \"generic array creation\" warnings because there was only a varargs method in Creatable. This means that we won't get those warnings now, so the @SuppressWarnings won't be needed any more. Can you hunt down those annotations and remove them? Perhaps in a followup PR?", "author": "tombentley", "createdAt": "2020-05-29T07:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NTgwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTM4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431169383", "bodyText": "If it's deprecated should we still be using it?", "author": "tombentley", "createdAt": "2020-05-27T14:20:12Z", "path": "topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java", "diffHunk": "@@ -566,17 +567,17 @@ protected void waitForEvent(KafkaTopic kafkaTopic, String expectedMessage, Topic\n             List<Event> items = kubeClient.events().inNamespace(NAMESPACE).withLabels(labels.labels()).list().getItems();\n             List<Event> filtered = items.stream().\n                     filter(evt -> !preExistingEvents.contains(evt.getMetadata().getUid())\n-                            && \"KafkaTopic\".equals(evt.getInvolvedObject().getKind())\n-                            && kafkaTopic.getMetadata().getName().equals(evt.getInvolvedObject().getName())).\n+                            && \"KafkaTopic\".equals(evt.getRegarding().getKind())\n+                            && kafkaTopic.getMetadata().getName().equals(evt.getRegarding().getName())).\n                     collect(Collectors.toList());\n-            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getMessage()).collect(Collectors.toList()));\n+            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getReason()).collect(Collectors.toList()));\n             return filtered.stream().anyMatch(event ->\n-                    Pattern.matches(expectedMessage, event.getMessage()) &&\n+                    Pattern.matches(expectedMessage, event.getReason()) &&\n                         Objects.equals(expectedType.name, event.getType()) &&\n-                        event.getInvolvedObject() != null &&\n-                        event.getLastTimestamp() != null &&\n-                        Objects.equals(\"KafkaTopic\", event.getInvolvedObject().getKind()) &&\n-                        Objects.equals(kafkaTopic.getMetadata().getName(), event.getInvolvedObject().getName()));\n+                        event.getRegarding() != null &&\n+                        event.getDeprecatedLastTimestamp() != null &&", "originalCommit": "8b064ab1c38dcad6a9976c8007a0b8aa6f902284", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NzIyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r431587226", "bodyText": "I am not sure how important it is in TO. If you think it is not needed anymore, I can remove it.", "author": "sknot-rh", "createdAt": "2020-05-28T05:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2OTM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3892d06a57b971889da25c2baf9b961283f07a39", "chunk": "diff --git a/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java b/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java\nindex 9c9440aaef..6f42e1592b 100644\n--- a/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java\n+++ b/topic-operator/src/test/java/io/strimzi/operator/topic/TopicOperatorBaseIT.java\n\n@@ -567,17 +566,17 @@ public abstract class TopicOperatorBaseIT {\n             List<Event> items = kubeClient.events().inNamespace(NAMESPACE).withLabels(labels.labels()).list().getItems();\n             List<Event> filtered = items.stream().\n                     filter(evt -> !preExistingEvents.contains(evt.getMetadata().getUid())\n-                            && \"KafkaTopic\".equals(evt.getRegarding().getKind())\n-                            && kafkaTopic.getMetadata().getName().equals(evt.getRegarding().getName())).\n+                            && \"KafkaTopic\".equals(evt.getInvolvedObject().getKind())\n+                            && kafkaTopic.getMetadata().getName().equals(evt.getInvolvedObject().getName())).\n                     collect(Collectors.toList());\n-            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getReason()).collect(Collectors.toList()));\n+            LOGGER.debug(\"Waiting for events: {}\", filtered.stream().map(evt -> evt.getMessage()).collect(Collectors.toList()));\n             return filtered.stream().anyMatch(event ->\n-                    Pattern.matches(expectedMessage, event.getReason()) &&\n+                    Pattern.matches(expectedMessage, event.getMessage()) &&\n                         Objects.equals(expectedType.name, event.getType()) &&\n-                        event.getRegarding() != null &&\n-                        event.getDeprecatedLastTimestamp() != null &&\n-                        Objects.equals(\"KafkaTopic\", event.getRegarding().getKind()) &&\n-                        Objects.equals(kafkaTopic.getMetadata().getName(), event.getRegarding().getName()));\n+                        event.getInvolvedObject() != null &&\n+                        event.getLastTimestamp() != null &&\n+                        Objects.equals(\"KafkaTopic\", event.getInvolvedObject().getKind()) &&\n+                        Objects.equals(kafkaTopic.getMetadata().getName(), event.getInvolvedObject().getName()));\n         }, \"Expected an error event\");\n     }\n \n"}}, {"oid": "3c1b8390aa5295e2db2167210089d82b022d61d5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3c1b8390aa5295e2db2167210089d82b022d61d5", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-02T14:08:13Z", "type": "forcePushed"}, {"oid": "d12018b0ebfd51abc1652c57bca27215e9292aec", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d12018b0ebfd51abc1652c57bca27215e9292aec", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T09:39:02Z", "type": "forcePushed"}, {"oid": "afe81f166b0ea7feb96378a9de4ec9f0da68c070", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/afe81f166b0ea7feb96378a9de4ec9f0da68c070", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T09:50:07Z", "type": "forcePushed"}, {"oid": "d7e659570b523030683d5ee40fe27fce5ee494ee", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d7e659570b523030683d5ee40fe27fce5ee494ee", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T09:55:00Z", "type": "forcePushed"}, {"oid": "7052596a026678fde413289bd6f44a2629b4abcb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7052596a026678fde413289bd6f44a2629b4abcb", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T10:04:25Z", "type": "forcePushed"}, {"oid": "a8ea5c6968c5304d0335ac5fad84498fc35a567a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a8ea5c6968c5304d0335ac5fad84498fc35a567a", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T10:07:25Z", "type": "forcePushed"}, {"oid": "c249d876fd57d5bd4aed22dcf3950e6150dedbf4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c249d876fd57d5bd4aed22dcf3950e6150dedbf4", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T10:25:52Z", "type": "forcePushed"}, {"oid": "509356e61c0f11c04244176a77c2400bcd1a5561", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/509356e61c0f11c04244176a77c2400bcd1a5561", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T10:59:57Z", "type": "forcePushed"}, {"oid": "cad93262ee7573227afe468c1a2c2c7327a3b0fc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cad93262ee7573227afe468c1a2c2c7327a3b0fc", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T11:26:56Z", "type": "forcePushed"}, {"oid": "966b8c128f4c37fb708ababc5000853846f41e94", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/966b8c128f4c37fb708ababc5000853846f41e94", "message": "4.10.2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T11:31:44Z", "type": "forcePushed"}, {"oid": "6e06cb57ef531a1dfadd0f7bfe836c0d2a89d7cb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6e06cb57ef531a1dfadd0f7bfe836c0d2a89d7cb", "message": "deflaky\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T15:03:32Z", "type": "forcePushed"}, {"oid": "cd0fe76a29bbf25e93a9ef65deaf15f636bb97aa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cd0fe76a29bbf25e93a9ef65deaf15f636bb97aa", "message": "deflaky\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T15:50:39Z", "type": "forcePushed"}, {"oid": "647db0b26170d972b5e3adea82fdc2c48de46eaa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/647db0b26170d972b5e3adea82fdc2c48de46eaa", "message": "deflaky\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-04T16:05:18Z", "type": "forcePushed"}, {"oid": "6d63bc790208a0e4a68cb6a02dd2db52e8cc764f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6d63bc790208a0e4a68cb6a02dd2db52e8cc764f", "message": "deflaky\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-15T10:04:23Z", "type": "forcePushed"}, {"oid": "fee77aa7b00d139ed4f75922cd362044bda9666e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fee77aa7b00d139ed4f75922cd362044bda9666e", "message": "helm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-06-16T12:33:05Z", "type": "forcePushed"}, {"oid": "386afc9aacb393e2804e469479a42040ab6ac095", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/386afc9aacb393e2804e469479a42040ab6ac095", "message": "rebase\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-16T13:49:43Z", "type": "forcePushed"}, {"oid": "c4560c6b7a7f041c33231bed594f639e6f833721", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c4560c6b7a7f041c33231bed594f639e6f833721", "message": "4.10.3\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-21T11:52:36Z", "type": "forcePushed"}, {"oid": "78f50fcd0f1bf6468fa2b2e210a78109318da4eb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/78f50fcd0f1bf6468fa2b2e210a78109318da4eb", "message": "commit\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-21T14:54:19Z", "type": "forcePushed"}, {"oid": "6974a57bd99f10a413ac723c90741924c9e9fe81", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6974a57bd99f10a413ac723c90741924c9e9fe81", "message": "commit\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-21T15:06:56Z", "type": "forcePushed"}, {"oid": "507cc06cfa7e49082b90016a6962b6dd2b2902bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/507cc06cfa7e49082b90016a6962b6dd2b2902bc", "message": "commit\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-21T15:23:46Z", "type": "forcePushed"}, {"oid": "a0206d30821750305a970a8574b4958db2c4ffa3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a0206d30821750305a970a8574b4958db2c4ffa3", "message": "commit\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-21T15:44:33Z", "type": "forcePushed"}, {"oid": "49d786c54e0237b35ee710d9dc2ae1a353cbf3d7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/49d786c54e0237b35ee710d9dc2ae1a353cbf3d7", "message": "upgrade f8 dep\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-22T09:28:48Z", "type": "forcePushed"}, {"oid": "dc2ee5f0bca2629fc5cf93400ca4329f4bccb12f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dc2ee5f0bca2629fc5cf93400ca4329f4bccb12f", "message": "fix it tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-22T10:50:37Z", "type": "forcePushed"}, {"oid": "80a4f487a5caef42d315ceeb98b8ceb84e18ae46", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/80a4f487a5caef42d315ceeb98b8ceb84e18ae46", "message": "fix it tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-22T10:50:58Z", "type": "forcePushed"}, {"oid": "3778b9d8b4d64b8e33e0f2fb0d243b83006d7f83", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3778b9d8b4d64b8e33e0f2fb0d243b83006d7f83", "message": "fix it tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-22T10:54:27Z", "type": "forcePushed"}, {"oid": "1fadbf70fe91fdb756d06794bb4742176022003b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1fadbf70fe91fdb756d06794bb4742176022003b", "message": "fix it tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-23T07:06:28Z", "type": "forcePushed"}, {"oid": "5672353df8bcc32bd1f7f347f65050bce0a039a6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5672353df8bcc32bd1f7f347f65050bce0a039a6", "message": "aaarrrgghhhh\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-23T09:00:30Z", "type": "forcePushed"}, {"oid": "9d24d9848d0b6596553bb03fc633ed0f0946f079", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9d24d9848d0b6596553bb03fc633ed0f0946f079", "message": "\u00af\\_(\u30c4)_/\u00af\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T07:28:36Z", "type": "forcePushed"}, {"oid": "5672353df8bcc32bd1f7f347f65050bce0a039a6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5672353df8bcc32bd1f7f347f65050bce0a039a6", "message": "aaarrrgghhhh\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-23T09:00:30Z", "type": "forcePushed"}, {"oid": "5b10f40457721208e289defe2b346457cdc9c7bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5b10f40457721208e289defe2b346457cdc9c7bc", "message": "flaking test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T09:34:33Z", "type": "forcePushed"}, {"oid": "9b80e3418341ab0f3d3a12999c903004f8174d3f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b80e3418341ab0f3d3a12999c903004f8174d3f", "message": "flaking test\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-17T11:44:16Z", "type": "forcePushed"}, {"oid": "078014d937f4d94b014746066f0c41c0808fbd38", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/078014d937f4d94b014746066f0c41c0808fbd38", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T07:19:44Z", "type": "forcePushed"}, {"oid": "2cdee241bbe84485d46ee6d886ec8a92f8441a3b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2cdee241bbe84485d46ee6d886ec8a92f8441a3b", "message": "test fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-17T13:06:57Z", "type": "forcePushed"}, {"oid": "d54758e08ee80189725b3d6736ad2f5f2a39a53c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d54758e08ee80189725b3d6736ad2f5f2a39a53c", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T11:08:42Z", "type": "forcePushed"}, {"oid": "28a0d5b97de354f2ddb0c4ffa0dd0cffc27437c8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/28a0d5b97de354f2ddb0c4ffa0dd0cffc27437c8", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T12:53:15Z", "type": "forcePushed"}, {"oid": "888548bade8f891738dea4ce51c4d9309f774fc4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/888548bade8f891738dea4ce51c4d9309f774fc4", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T12:54:32Z", "type": "forcePushed"}, {"oid": "904377ac1536f73fa329d42309897f66e8e338f6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/904377ac1536f73fa329d42309897f66e8e338f6", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T13:30:04Z", "type": "forcePushed"}, {"oid": "b1e150c96c65f2675e0936f8507e71ff9b9630e6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b1e150c96c65f2675e0936f8507e71ff9b9630e6", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T14:20:07Z", "type": "forcePushed"}, {"oid": "b515755eb4296e76b3ae854f226637a2b3e60231", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b515755eb4296e76b3ae854f226637a2b3e60231", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T15:10:27Z", "type": "forcePushed"}, {"oid": "f4b75c761212f0a679e8697d95ad87b4d67d55e5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f4b75c761212f0a679e8697d95ad87b4d67d55e5", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-18T17:38:26Z", "type": "forcePushed"}, {"oid": "327d3c7a7fee289042dfb69cdcd27a410f530273", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/327d3c7a7fee289042dfb69cdcd27a410f530273", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T07:52:59Z", "type": "forcePushed"}, {"oid": "035319ae10007b543fc259cee06e90730289b08e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/035319ae10007b543fc259cee06e90730289b08e", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T10:36:48Z", "type": "forcePushed"}, {"oid": "1c5c9bbb74a55ba3c23427f41a109c60ca51cbf9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1c5c9bbb74a55ba3c23427f41a109c60ca51cbf9", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T10:45:08Z", "type": "forcePushed"}, {"oid": "29d03eed2ba0f914071e999e113ff088cf44092f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/29d03eed2ba0f914071e999e113ff088cf44092f", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T10:47:17Z", "type": "forcePushed"}, {"oid": "5c6ddbce463329f49f938d4ef9505dc0e44bcd53", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5c6ddbce463329f49f938d4ef9505dc0e44bcd53", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T10:59:25Z", "type": "forcePushed"}, {"oid": "b6ef702bcae43a521aede761687114cc3f6f4ef6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6ef702bcae43a521aede761687114cc3f6f4ef6", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:04:36Z", "type": "forcePushed"}, {"oid": "950f0e5f45524c5fdf651a370e7cc2fb11fd90c1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/950f0e5f45524c5fdf651a370e7cc2fb11fd90c1", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:06:54Z", "type": "forcePushed"}, {"oid": "a832093b04caf9eed7ca5f0b078878e9898f7ea6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a832093b04caf9eed7ca5f0b078878e9898f7ea6", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:09:32Z", "type": "forcePushed"}, {"oid": "e823f7f2b0d0381b41cb2ea06ac3596cf7c16bdb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e823f7f2b0d0381b41cb2ea06ac3596cf7c16bdb", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:26:26Z", "type": "forcePushed"}, {"oid": "90e7699e8096c00aec8906adbc9ec8c1e7e2e0ed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/90e7699e8096c00aec8906adbc9ec8c1e7e2e0ed", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:36:01Z", "type": "forcePushed"}, {"oid": "0e1c49c7e2e1736fb44e395d23b7d59260467536", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0e1c49c7e2e1736fb44e395d23b7d59260467536", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:41:30Z", "type": "forcePushed"}, {"oid": "5975c510667e8b56798f572d035fb4dfa606ace1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5975c510667e8b56798f572d035fb4dfa606ace1", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:42:05Z", "type": "forcePushed"}, {"oid": "39decdac789c8493d08c90a0238788d03cd790ee", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/39decdac789c8493d08c90a0238788d03cd790ee", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:47:18Z", "type": "forcePushed"}, {"oid": "b1a20a818296c51b5d958cfcf93023b59ce040f4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b1a20a818296c51b5d958cfcf93023b59ce040f4", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:57:36Z", "type": "forcePushed"}, {"oid": "1b1969b00c561f223736c5d076af25eb5fbaab28", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1b1969b00c561f223736c5d076af25eb5fbaab28", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T11:59:41Z", "type": "forcePushed"}, {"oid": "148f60c2c45aa673f873fc8b05d9dc2c4b2d54d8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/148f60c2c45aa673f873fc8b05d9dc2c4b2d54d8", "message": "another try\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T12:06:23Z", "type": "forcePushed"}, {"oid": "5113a67b832c6b970f7cd25fba61ef68c8d331ad", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5113a67b832c6b970f7cd25fba61ef68c8d331ad", "message": "i do not know\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-19T13:28:56Z", "type": "forcePushed"}, {"oid": "3cdc1c6fbf482ffe62f110ca263b2ccc52ea7395", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3cdc1c6fbf482ffe62f110ca263b2ccc52ea7395", "message": "another try 11\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T11:55:49Z", "type": "forcePushed"}, {"oid": "e7909d585b0640403e7cf6bd57316475808a2389", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e7909d585b0640403e7cf6bd57316475808a2389", "message": "another try 16\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T13:37:00Z", "type": "forcePushed"}, {"oid": "563cc6ba17a1b98cee3c310f0e7b124d3583b6f2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/563cc6ba17a1b98cee3c310f0e7b124d3583b6f2", "message": "another try 16\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T13:48:51Z", "type": "forcePushed"}, {"oid": "ed6ad18a7d981114c81afcc795d108dfeed53131", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed6ad18a7d981114c81afcc795d108dfeed53131", "message": "another try 16\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T13:52:41Z", "type": "forcePushed"}, {"oid": "7cf92d22dbe3e4ab36b448b171bac71a0ba9d1bb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7cf92d22dbe3e4ab36b448b171bac71a0ba9d1bb", "message": "another try 16\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T13:56:18Z", "type": "forcePushed"}, {"oid": "c01834a910525a6b82e088cd5376e70706b9a8a3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c01834a910525a6b82e088cd5376e70706b9a8a3", "message": "another try 16\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-20T17:50:16Z", "type": "forcePushed"}, {"oid": "c8f595619ecb135cdf0e6caf0e9009eac0c47282", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c8f595619ecb135cdf0e6caf0e9009eac0c47282", "message": "fix tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T05:25:04Z", "type": "forcePushed"}, {"oid": "c8f595619ecb135cdf0e6caf0e9009eac0c47282", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c8f595619ecb135cdf0e6caf0e9009eac0c47282", "message": "fix tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T05:25:04Z", "type": "forcePushed"}, {"oid": "d6d01ef9d5497e5e37c62a0cb9a220afe4e43408", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d6d01ef9d5497e5e37c62a0cb9a220afe4e43408", "message": "upgrade f8 dep\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T06:14:31Z", "type": "commit"}, {"oid": "989f97554a38b92f1253966c7393e9bfe46f0b89", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/989f97554a38b92f1253966c7393e9bfe46f0b89", "message": "fix tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T06:14:31Z", "type": "commit"}, {"oid": "824228f064aff83b11171da03c3b4bfaf43b0b2d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/824228f064aff83b11171da03c3b4bfaf43b0b2d", "message": "rebase to master\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T06:17:57Z", "type": "commit"}, {"oid": "824228f064aff83b11171da03c3b4bfaf43b0b2d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/824228f064aff83b11171da03c3b4bfaf43b0b2d", "message": "rebase to master\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-21T06:17:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODI3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475568276", "bodyText": "Why is this needed? Can you explain?", "author": "scholzj", "createdAt": "2020-08-24T12:38:55Z", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractNonNamespacedResourceOperatorIT.java", "diffHunk": "@@ -44,6 +49,11 @@ public static void before() {\n         client = new DefaultKubernetesClient();\n     }\n \n+    @BeforeEach\n+    public void renameResource() {\n+        resourceName = getResourceName(RESOURCE_NAME);\n+    }\n+", "originalCommit": "824228f064aff83b11171da03c3b4bfaf43b0b2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3MzM4NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475573384", "bodyText": "I was running into some flakiness of the tests because all the resources had the same name.", "author": "sknot-rh", "createdAt": "2020-08-24T12:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODI3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2OTA0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2962#discussion_r475569042", "bodyText": "Again, could you explain why this is needed?", "author": "scholzj", "createdAt": "2020-08-24T12:40:22Z", "path": "operator-common/src/test/java/io/strimzi/operator/common/operator/resource/AbstractResourceOperatorIT.java", "diffHunk": "@@ -40,12 +44,18 @@\n public abstract class AbstractResourceOperatorIT<C extends KubernetesClient, T extends HasMetadata, L extends KubernetesResourceList/*<T>*/, D, R extends Resource<T, D>> {\n     protected static final Logger log = LogManager.getLogger(AbstractResourceOperatorIT.class);\n     public static final String RESOURCE_NAME = \"my-test-resource\";\n+    protected String resourceName;\n     protected static Vertx vertx;\n     protected static KubernetesClient client;\n     protected static String namespace = \"resource-operator-it-namespace\";\n \n     private static KubeClusterResource cluster;\n \n+    @BeforeEach\n+    public void renameResource() {\n+        this.resourceName = getResourceName(RESOURCE_NAME);\n+    }", "originalCommit": "824228f064aff83b11171da03c3b4bfaf43b0b2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "573cc8be9a35e175071f3c0f42f861e030d10e5d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/573cc8be9a35e175071f3c0f42f861e030d10e5d", "message": "patch pdb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-24T13:51:18Z", "type": "forcePushed"}, {"oid": "3892d06a57b971889da25c2baf9b961283f07a39", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3892d06a57b971889da25c2baf9b961283f07a39", "message": "patch pdb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-08-24T13:58:55Z", "type": "commit"}]}