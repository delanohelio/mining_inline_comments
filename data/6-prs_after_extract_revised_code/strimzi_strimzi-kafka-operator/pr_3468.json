{"pr_number": 3468, "pr_title": "[MO] - [system test] -> cruise control metrics", "pr_createdAt": "2020-08-06T11:32:05Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468", "timeline": [{"oid": "2bf9a94a3021807b01c430cfbcb6f24b12cd60b0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2bf9a94a3021807b01c430cfbcb6f24b12cd60b0", "message": "[MO] - [system test] -> cruise control meetrics\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-06T11:29:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NDk2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466354962", "bodyText": "Just a question -> shouldn't be this test in MetricsST? I know you already added test to this suite, but I'm curious. It can be really confusing for the first time.", "author": "im-konge", "createdAt": "2020-08-06T11:46:39Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlApiST.java", "diffHunk": "@@ -121,15 +122,30 @@ void testUserTasks() {\n         assertThat(response, containsString(CruiseControlUserTaskStatus.COMPLETED.toString()));\n     }\n \n+    @Order(5)\n+    @Test\n+    void testMetrics() {", "originalCommit": "2bf9a94a3021807b01c430cfbcb6f24b12cd60b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4MDk2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466380963", "bodyText": "I agree, as /metrics is not actually a CC API endpoint this test would be better in the MetricsST.", "author": "tomncooper", "createdAt": "2020-08-06T12:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NDk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4MTg2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466381869", "bodyText": "I would say that name of the suite CruiseControlApiST.java  will tell explicitly the user that tests are designed to tests the APIs which CC provide or it is bind.", "author": "see-quick", "createdAt": "2020-08-06T12:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NDk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjc5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466402790", "bodyText": "Yeah, I don't think that testing metrics is ok here. This class is about testing CC API endpoints which /metrics isn't.", "author": "ppatierno", "createdAt": "2020-08-06T13:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NDk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b6fc362973c482b0471c05a59b109294677efa6b", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlApiST.java b/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlApiST.java\nindex efd866011a..73be7dbada 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlApiST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlApiST.java\n\n@@ -122,30 +121,11 @@ public class CruiseControlApiST extends AbstractST {\n         assertThat(response, containsString(CruiseControlUserTaskStatus.COMPLETED.toString()));\n     }\n \n-    @Order(5)\n-    @Test\n-    void testMetrics() {\n-        String response = CruiseControlUtils.callApi(CruiseControlUtils.SupportedHttpMethods.POST, CruiseControlEndpoints.METRICS);\n-\n-        assertThat(response, not(nullValue()));\n-\n-        response = CruiseControlUtils.callApi(CruiseControlUtils.SupportedHttpMethods.GET, CruiseControlEndpoints.METRICS);\n-\n-        assertThat(response, not(nullValue()));\n-\n-        assertThat(response, containsString(\"GET\"));\n-        assertThat(response, containsString(CruiseControlEndpoints.STATE.toString()));\n-        assertThat(response, containsString(\"POST\"));\n-        assertThat(response, containsString(CruiseControlEndpoints.REBALANCE.toString()));\n-        assertThat(response, containsString(CruiseControlEndpoints.STOP.toString()));\n-        assertThat(response, containsString(CruiseControlUserTaskStatus.COMPLETED.toString()));\n-    }\n-\n     @BeforeAll\n     void setup() throws Exception {\n         ResourceManager.setClassResources();\n         installClusterOperator(NAMESPACE);\n \n-        KafkaResource.kafkaAndCruiseControlWithMetrics(CLUSTER_NAME, 3, 3).done();\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NTU3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466375576", "bodyText": "Could you put a comment above this entry and state that this is not provided by Cruise Control and instead comes from the JMX Exporter.", "author": "tomncooper", "createdAt": "2020-08-06T12:28:02Z", "path": "operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlEndpoints.java", "diffHunk": "@@ -9,7 +9,9 @@\n     STATE(\"/kafkacruisecontrol/state\"),\n     REBALANCE(\"/kafkacruisecontrol/rebalance\"),\n     STOP(\"/kafkacruisecontrol/stop_proposal_execution\"),\n-    USER_TASKS(\"/kafkacruisecontrol/user_tasks\");\n+    USER_TASKS(\"/kafkacruisecontrol/user_tasks\"),\n+\n+    METRICS(\"/metrics\");", "originalCommit": "2bf9a94a3021807b01c430cfbcb6f24b12cd60b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4MjAzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466382034", "bodyText": "Of course :)", "author": "see-quick", "createdAt": "2020-08-06T12:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NTU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTM5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r466401393", "bodyText": "Tbh I would not add this endpoint here. It's not the code for tests only, it's code related to the Cruise Control integration in the operator and that integration is about the strictly related CC endpoints.", "author": "ppatierno", "createdAt": "2020-08-06T13:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NTU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d410559eedecc032c4b0aac03c0505c7c982e832", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlEndpoints.java b/operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlEndpoints.java\nindex 2ddfe08e97..be6eb2777c 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlEndpoints.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/cluster/operator/resource/cruisecontrol/CruiseControlEndpoints.java\n\n@@ -11,6 +11,7 @@ public enum CruiseControlEndpoints {\n     STOP(\"/kafkacruisecontrol/stop_proposal_execution\"),\n     USER_TASKS(\"/kafkacruisecontrol/user_tasks\"),\n \n+    // this entry is not provided by Cruise Control and instead comes from the JMX Exporter\n     METRICS(\"/metrics\");\n \n     String path;\n"}}, {"oid": "d410559eedecc032c4b0aac03c0505c7c982e832", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d410559eedecc032c4b0aac03c0505c7c982e832", "message": "[MO] - commend\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-06T12:43:03Z", "type": "commit"}, {"oid": "b6fc362973c482b0471c05a59b109294677efa6b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6fc362973c482b0471c05a59b109294677efa6b", "message": "commends\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-06T13:37:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467775473", "bodyText": "Might we want to assert that we pass through this more than 0 times? If the interface changes the regex will immediately not find and this test becomes a no-op if I am not mistaken.", "author": "samuel-hawker", "createdAt": "2020-08-10T09:07:45Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -329,6 +333,26 @@ void testKafkaBridgeMetrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    @Tag(CRUISE_CONTROL)\n+    void testCruiseControlMetrics() {\n+\n+        String cruiseControlMetrics = CruiseControlUtils.callApi(CruiseControlUtils.SupportedHttpMethods.GET, \"/metrics\");\n+\n+        Matcher regex = Pattern.compile(\"^([^#].*)\\\\s+([^\\\\s]*)$\", Pattern.MULTILINE).matcher(cruiseControlMetrics);\n+\n+        while (regex.find()) {", "originalCommit": "b6fc362973c482b0471c05a59b109294677efa6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4MDM0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467780345", "bodyText": "Yeah, that's correct consideration. What about assertThat(regex.end(), greaterThan(0)); ?", "author": "see-quick", "createdAt": "2020-08-10T09:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNTUxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467825514", "bodyText": "Changed to\nLOGGER.info(\"Verifying that there is already more than 100 different metrics\");\nassertThat(regex.results().count(), greaterThan(100L));", "author": "see-quick", "createdAt": "2020-08-10T10:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNjEzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467826138", "bodyText": "That looks good to me, whilst variable sized checks are useful for extensibility, we should add the sanity check assert that you suggested to check that we have an expected sized sample", "author": "samuel-hawker", "createdAt": "2020-08-10T10:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MjM1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467852353", "bodyText": "hmmm regex.results().count() is only for Java 11 :(, This one regex.end() also doens't work. So maybe i can assert that line will have 2 groups.", "author": "see-quick", "createdAt": "2020-08-10T11:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzMjUyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r467932528", "bodyText": "WDYT  @samuel-hawker", "author": "see-quick", "createdAt": "2020-08-10T14:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MjAwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3468#discussion_r468062004", "bodyText": "Honestly, I don't have a strong opinion on this, I would suggest the cleaner Java 11 check you leave in, but commented out, and when we stop supporting java 8 we remove the old assertion.", "author": "samuel-hawker", "createdAt": "2020-08-10T17:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c6ba6959c6525d8618263896fdb8c6fd699e0b3f", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex ca05ea546c..8733ab4a81 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -341,6 +342,10 @@ public class MetricsST extends AbstractST {\n \n         Matcher regex = Pattern.compile(\"^([^#].*)\\\\s+([^\\\\s]*)$\", Pattern.MULTILINE).matcher(cruiseControlMetrics);\n \n+        LOGGER.info(\"Verifying that there is already more than 100 different metrics\");\n+\n+        assertThat(regex.results().count(), greaterThan(100L));\n+\n         while (regex.find()) {\n \n             String metricKey = regex.group(1);\n"}}, {"oid": "c6ba6959c6525d8618263896fdb8c6fd699e0b3f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c6ba6959c6525d8618263896fdb8c6fd699e0b3f", "message": "add assert\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-10T10:52:38Z", "type": "commit"}, {"oid": "d3e4130f5e81f24070cc5276d59b5a510fde9986", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d3e4130f5e81f24070cc5276d59b5a510fde9986", "message": "assert changed\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-10T11:54:46Z", "type": "commit"}]}