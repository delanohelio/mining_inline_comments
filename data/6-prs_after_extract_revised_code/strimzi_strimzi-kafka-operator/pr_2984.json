{"pr_number": 2984, "pr_title": "Allow 0 replica in kafka bridge.", "pr_createdAt": "2020-05-10T14:05:40Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984", "timeline": [{"oid": "54cc51c890e5e7ed9c493322bc5f04d992c16d56", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/54cc51c890e5e7ed9c493322bc5f04d992c16d56", "message": "Allow 0 replica in bridge.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-10T14:20:23Z", "type": "forcePushed"}, {"oid": "c032172826017eae1067497508aa8e4544fa860b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c032172826017eae1067497508aa8e4544fa860b", "message": "Allow kafka bridge to scale to 0.", "committedDate": "2020-05-10T14:23:36Z", "type": "forcePushed"}, {"oid": "05f7b18b2a7432dde45477c620ab31569e04c18b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05f7b18b2a7432dde45477c620ab31569e04c18b", "message": "Allow kafka bridge to scale to 0.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-10T14:24:19Z", "type": "commit"}, {"oid": "05f7b18b2a7432dde45477c620ab31569e04c18b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05f7b18b2a7432dde45477c620ab31569e04c18b", "message": "Allow kafka bridge to scale to 0.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-10T14:24:19Z", "type": "forcePushed"}, {"oid": "ee0c1fe966a65ad540161553b1c4165734d782ed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ee0c1fe966a65ad540161553b1c4165734d782ed", "message": "Added test for 0 replica bridge.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-11T08:05:59Z", "type": "commit"}, {"oid": "ee0c1fe966a65ad540161553b1c4165734d782ed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ee0c1fe966a65ad540161553b1c4165734d782ed", "message": "Added test for 0 replica bridge.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-11T08:05:59Z", "type": "forcePushed"}, {"oid": "cee371ec9c953255af64be472bae3960717db2db", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cee371ec9c953255af64be472bae3960717db2db", "message": "Refactored test slightly.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-11T08:09:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzIwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893206", "bodyText": "When the bridge is scaled to 0, the status should show that it is ready, but it should not list the URL. So I think you should add similar condition also arount the lines 106-110 to prevent this.", "author": "scholzj", "createdAt": "2020-05-11T09:04:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "diffHunk": "@@ -100,7 +101,7 @@ public KafkaBridgeAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa\n             .compose(i -> deploymentOperations.reconcile(namespace, bridge.getName(), bridge.generateDeployment(annotations, pfa.isOpenshift(), imagePullPolicy, imagePullSecrets)))\n             .compose(i -> deploymentOperations.scaleUp(namespace, bridge.getName(), bridge.getReplicas()))\n             .compose(i -> deploymentOperations.waitForObserved(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n-            .compose(i -> deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n+            .compose(i -> bridgeHasZeroReplicas ? Future.succeededFuture() : deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))", "originalCommit": "cee371ec9c953255af64be472bae3960717db2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTE0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429125149", "bodyText": "Done!", "author": "leonardgee", "createdAt": "2020-05-22T08:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\nindex f26a8a07b9..b8cb5b7468 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\n\n@@ -104,11 +104,13 @@ public class KafkaBridgeAssemblyOperator extends AbstractAssemblyOperator<Kubern\n             .compose(i -> bridgeHasZeroReplicas ? Future.succeededFuture() : deploymentOperations.readiness(namespace, bridge.getName(), 1_000, operationTimeoutMs))\n             .setHandler(reconciliationResult -> {\n                 StatusUtils.setStatusConditionAndObservedGeneration(assemblyResource, kafkaBridgeStatus, reconciliationResult.mapEmpty());\n-                int port = KafkaBridgeCluster.DEFAULT_REST_API_PORT;\n-                if (bridge.getHttp() != null) {\n-                    port = bridge.getHttp().getPort();\n+                if (!bridgeHasZeroReplicas) {\n+                    int port = KafkaBridgeCluster.DEFAULT_REST_API_PORT;\n+                    if (bridge.getHttp() != null) {\n+                        port = bridge.getHttp().getPort();\n+                    }\n+                    kafkaBridgeStatus.setUrl(KafkaBridgeResources.url(bridge.getCluster(), namespace, port));\n                 }\n-                kafkaBridgeStatus.setUrl(KafkaBridgeResources.url(bridge.getCluster(), namespace, port));\n \n                 updateStatus(assemblyResource, reconciliation, kafkaBridgeStatus).setHandler(statusResult -> {\n                     // If both features succeeded, createOrUpdate succeeded as well\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzI2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893264", "bodyText": "Can you keep this as separte imports? Maybe that is the checkstyle issue crashing the CI builds?", "author": "scholzj", "createdAt": "2020-05-11T09:04:52Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -67,10 +67,7 @@\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.doAnswer;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.*;", "originalCommit": "cee371ec9c953255af64be472bae3960717db2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMDcyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429110723", "bodyText": "Sure!", "author": "leonardgee", "createdAt": "2020-05-22T08:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex f7315f2763..b12fa64165 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -62,12 +62,16 @@ import java.util.concurrent.TimeoutException;\n import static java.util.Arrays.asList;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n @ExtendWith(VertxExtension.class)\n public class KafkaBridgeAssemblyOperatorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzUxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422893516", "bodyText": "I think it would be great to also test the captured state to check that the URL is not present when scaled to 0.", "author": "scholzj", "createdAt": "2020-05-11T09:05:15Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.\n+            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+", "originalCommit": "cee371ec9c953255af64be472bae3960717db2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjg5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422906898", "bodyText": "Agreed with Jakub", "author": "samuel-hawker", "createdAt": "2020-05-11T09:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5MzUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex f7315f2763..b12fa64165 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -716,14 +720,14 @@ public class KafkaBridgeAssemblyOperatorTest {\n                 ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n \n         Checkpoint async = context.checkpoint();\n-        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n-            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n-\n-            // Replica is 0 so readiness shouldn't get called.\n-            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n-\n-            async.flag();\n-        });\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {\n+                    // 0 Replicas - readiness should never get called.\n+                    verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+                    assertNull(bridgeCaptor.getValue().getStatus().getUrl());\n+\n+                    async.flag();\n+                })));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjc5Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422906792", "bodyText": "// 0 Replicas - readiness should never get called.\n\nSlight tweak just to match the code syntax", "author": "samuel-hawker", "createdAt": "2020-05-11T09:27:03Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n+            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n+\n+            // Replica is 0 so readiness shouldn't get called.", "originalCommit": "cee371ec9c953255af64be472bae3960717db2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExMDk0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429110942", "bodyText": "Sure!", "author": "leonardgee", "createdAt": "2020-05-22T08:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNjc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex f7315f2763..b12fa64165 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -716,14 +720,14 @@ public class KafkaBridgeAssemblyOperatorTest {\n                 ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n \n         Checkpoint async = context.checkpoint();\n-        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n-            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n-\n-            // Replica is 0 so readiness shouldn't get called.\n-            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n-\n-            async.flag();\n-        });\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {\n+                    // 0 Replicas - readiness should never get called.\n+                    verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+                    assertNull(bridgeCaptor.getValue().getStatus().getUrl());\n+\n+                    async.flag();\n+                })));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNzk1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r422907958", "bodyText": "Can we change:\n        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n\nTo:\n        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n            .setHandler(context.succeeding(v -> context.verify(() ->\n\n\nContext succeeding ensures we always have a non error and stops the need to check the result", "author": "samuel-hawker", "createdAt": "2020-05-11T09:28:58Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -684,4 +681,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n         });\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {", "originalCommit": "cee371ec9c953255af64be472bae3960717db2db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjMxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429126318", "bodyText": "Done!", "author": "leonardgee", "createdAt": "2020-05-22T08:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNzk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex f7315f2763..b12fa64165 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -716,14 +720,14 @@ public class KafkaBridgeAssemblyOperatorTest {\n                 ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n \n         Checkpoint async = context.checkpoint();\n-        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm).setHandler(createResult -> {\n-            context.verify(() -> assertThat(createResult.succeeded(), is(true)));\n-\n-            // Replica is 0 so readiness shouldn't get called.\n-            verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n-\n-            async.flag();\n-        });\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {\n+                    // 0 Replicas - readiness should never get called.\n+                    verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n+                    assertNull(bridgeCaptor.getValue().getStatus().getUrl());\n+\n+                    async.flag();\n+                })));\n     }\n \n }\n"}}, {"oid": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "message": "Refactored according to reviewer comments.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T08:53:53Z", "type": "commit"}, {"oid": "34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/34f53820c1f9b3402e19a8ff9dc4766c56dd7668", "message": "Refactored according to reviewer comments.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T08:53:53Z", "type": "forcePushed"}, {"oid": "916dc8ee1815d66be441580c680c1cfb40975c92", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/916dc8ee1815d66be441580c680c1cfb40975c92", "message": "Merge branch 'master' into set_bridge_replica_to_zero", "committedDate": "2020-05-22T08:56:50Z", "type": "commit"}, {"oid": "d67bfc309fb8981c1d6741c255caec23e719345b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d67bfc309fb8981c1d6741c255caec23e719345b", "message": "Merge branch 'set_bridge_replica_to_zero' of github.com:524119574/strimzi-kafka-operator into set_bridge_replica_to_zero\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T11:09:33Z", "type": "forcePushed"}, {"oid": "2892816c91e391819b07da58ea68fd4c7fdf9182", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2892816c91e391819b07da58ea68fd4c7fdf9182", "message": "Merge branch 'set_bridge_replica_to_zero' of github.com:524119574/strimzi-kafka-operator into set_bridge_replica_to_zero\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T11:12:44Z", "type": "forcePushed"}, {"oid": "8793e9a9a4f56aa5933205b2397c271cf171af62", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8793e9a9a4f56aa5933205b2397c271cf171af62", "message": "Merge branch 'set_bridge_replica_to_zero' of github.com:524119574/strimzi-kafka-operator into set_bridge_replica_to_zero\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T11:14:34Z", "type": "forcePushed"}, {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bf12c11d06c07a158b8e44dc92b51ecda1592a64", "message": "Changed default replica.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T11:28:44Z", "type": "commit"}, {"oid": "bf12c11d06c07a158b8e44dc92b51ecda1592a64", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bf12c11d06c07a158b8e44dc92b51ecda1592a64", "message": "Changed default replica.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-22T11:28:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429242183", "bodyText": "TBH, most users would expect it to run. So I think the DEFAULT_REPLICAS should stay 1.", "author": "scholzj", "createdAt": "2020-05-22T13:22:07Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java", "diffHunk": "@@ -57,7 +57,7 @@\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 1;\n+    protected static final int DEFAULT_REPLICAS = 0;", "originalCommit": "bf12c11d06c07a158b8e44dc92b51ecda1592a64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MjExNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429252117", "bodyText": "Are you saying that I should change the test KafkaBridgeClusterTest.testDefaultValues instead then?", "author": "leonardgee", "createdAt": "2020-05-22T13:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NzMxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429277310", "bodyText": "Sorry, I'm not sure I undertsand why. The default number of replicas was 1 before, so the test should work without any changes, or? The scaling to 0 should be used only when user explicitly sets the replicas field in the KafkaBridge CR to 0. Not by default when it is not set.", "author": "scholzj", "createdAt": "2020-05-22T14:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMTI5Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429301297", "bodyText": "kafkaBridgeCluster.setReplicas's condition has changed from > to >= which breaks the above-mentioned test, thus the question.", "author": "leonardgee", "createdAt": "2020-05-22T15:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNjgwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429336805", "bodyText": "I guess that might be because the replicas is defined as int in KafkaBridgeSpec class in api module which means that if not set it would be 0. I guess it should probably have the default one already there and this whole default part can be probably removed from KafkaBridgeCluster?", "author": "scholzj", "createdAt": "2020-05-22T16:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNDI1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429614258", "bodyText": "It should be fixed now. Thanks for the clarification!", "author": "leonardgee", "createdAt": "2020-05-24T08:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyMjc3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429622770", "bodyText": "Oh, I didn't. The replica is still 0 in the test. I see there is a @DefaultValue(1) annotation in the getReplicas method of KafkaBridgeSpec, not sure why it still returns 0.", "author": "leonardgee", "createdAt": "2020-05-24T10:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyMzY1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429623651", "bodyText": "I can manually set the instance field to be 1 on initialization do you want me to do that?\ni.e. in the KafkaBridgeSpec I changed it to:\nprivate int replicas = 1", "author": "leonardgee", "createdAt": "2020-05-24T10:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNDIwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429624205", "bodyText": "Right, that is what I meant - sorry for not being clear on that. The @DefaultValue is AFAIK just for the docs.", "author": "scholzj", "createdAt": "2020-05-24T10:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjE4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429626181", "bodyText": "Sure, will do it now. Thanks a lot!", "author": "leonardgee", "createdAt": "2020-05-24T11:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0MjE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c2a2e42de5e7f8591df7aa81607fcf0c58ec7736", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java\nindex bc25a5953b..3ee9d2ee9f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBridgeCluster.java\n\n@@ -57,7 +57,7 @@ public class KafkaBridgeCluster extends AbstractModel {\n     protected static final String PASSWORD_VOLUME_MOUNT = \"/opt/strimzi/bridge-password/\";\n \n     // Configuration defaults\n-    protected static final int DEFAULT_REPLICAS = 0;\n+    protected static final int DEFAULT_REPLICAS = 1;\n     protected static final int DEFAULT_HEALTHCHECK_DELAY = 15;\n     protected static final int DEFAULT_HEALTHCHECK_TIMEOUT = 5;\n     protected static final boolean DEFAULT_KAFKA_BRIDGE_METRICS_ENABLED = false;\n"}}, {"oid": "e42995a3433b748027b1110b66f19d4be00cf944", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e42995a3433b748027b1110b66f19d4be00cf944", "message": "Refactored according to comments.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T08:46:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNTQyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429625422", "bodyText": "To match the recent vertx upgrade we did this should now be onComplete instead of setHandler", "author": "samuel-hawker", "createdAt": "2020-05-24T11:15:02Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -687,4 +688,49 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+    @Test\n+    public void testCreateOrUpdateBridgeZeroReplica(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockBridgeOps = supplier.kafkaBridgeOperator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        String failureMsg = \"failure\";\n+        Map<String, Object> metricsCm = new HashMap<>();\n+        metricsCm.put(\"foo\", \"bar\");\n+        KafkaBridge clusterCm = ResourceUtils.createKafkaBridgeCluster(clusterCmNamespace, clusterCmName, image, 0,\n+                BOOTSTRAP_SERVERS, KAFKA_BRIDGE_PRODUCER_SPEC, KAFKA_BRIDGE_CONSUMER_SPEC, KAFKA_BRIDGE_HTTP_SPEC, metricsCm);\n+\n+        when(mockBridgeOps.get(clusterCmNamespace, clusterCmName)).thenReturn(clusterCm);\n+        when(mockBridgeOps.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(clusterCm));\n+        when(mockServiceOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.reconcile(anyString(), anyString(), any())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockPdbOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        ArgumentCaptor<KafkaBridge> bridgeCaptor = ArgumentCaptor.forClass(KafkaBridge.class);\n+        when(mockBridgeOps.updateStatusAsync(bridgeCaptor.capture())).thenReturn(Future.succeededFuture());\n+        KafkaBridgeAssemblyOperator ops = new KafkaBridgeAssemblyOperator(vertx,\n+                new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                new MockCertManager(), new PasswordGenerator(10, \"a\", \"a\"),\n+                supplier,\n+                ResourceUtils.dummyClusterOperatorConfig(VERSIONS));\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n+                .setHandler(context.succeeding(v -> context.verify(() -> {", "originalCommit": "76ecdd07b8eedf690aa1fe267744efc52127777b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjIwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429626205", "bodyText": "Sure!", "author": "leonardgee", "createdAt": "2020-05-24T11:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNTQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "c2a2e42de5e7f8591df7aa81607fcf0c58ec7736", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex b660050a81..6cea06e9d8 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -724,7 +724,7 @@ public class KafkaBridgeAssemblyOperatorTest {\n \n         Checkpoint async = context.checkpoint();\n         ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaBridge.RESOURCE_KIND, clusterCmNamespace, clusterCmName), clusterCm)\n-                .setHandler(context.succeeding(v -> context.verify(() -> {\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n                     // 0 Replicas - readiness should never get called.\n                     verify(mockDcOps, never()).readiness(anyString(), anyString(), anyLong(), anyLong());\n                     assertNull(bridgeCaptor.getValue().getStatus().getUrl());\n"}}, {"oid": "c2a2e42de5e7f8591df7aa81607fcf0c58ec7736", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c2a2e42de5e7f8591df7aa81607fcf0c58ec7736", "message": "Merge branch 'set_bridge_replica_to_zero' of github.com:524119574/strimzi-kafka-operator into set_bridge_replica_to_zero\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T12:25:31Z", "type": "forcePushed"}, {"oid": "3e7a43031cb0a9abd45f43a0bd4db44d3c9d9019", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3e7a43031cb0a9abd45f43a0bd4db44d3c9d9019", "message": "Refactored based on reiviewer comments.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T12:26:56Z", "type": "commit"}, {"oid": "3e7a43031cb0a9abd45f43a0bd4db44d3c9d9019", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3e7a43031cb0a9abd45f43a0bd4db44d3c9d9019", "message": "Refactored based on reiviewer comments.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T12:26:56Z", "type": "forcePushed"}, {"oid": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5855418c8c7bfca531c6731ffe99f9dc0b30b00a", "message": "Merge branch 'master' into set_bridge_replica_to_zero", "committedDate": "2020-05-24T12:28:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429639541", "bodyText": "Why are you not using the constant here to make clear the intent that replicas is initialized with the default", "author": "samuel-hawker", "createdAt": "2020-05-24T13:57:44Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas;\n+    private int replicas = 1;", "originalCommit": "5855418c8c7bfca531c6731ffe99f9dc0b30b00a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0MzgxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429643815", "bodyText": "Which constants are you referring to here? The KafkaBridgeCluster.DEFAULT_REPLICAS? The access modifier is protected so I am afraid I can't use it here.", "author": "leonardgee", "createdAt": "2020-05-24T14:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NDQxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429644414", "bodyText": "I have created a private constant for this now.", "author": "leonardgee", "createdAt": "2020-05-24T14:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzA1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429647053", "bodyText": "I think switching default replicas in the KakaBridgeCluster class to public is perfectly fine given that It is an important implementation detail that it should be exposing to other classes. Unless @scholzj thinks differently on this?", "author": "samuel-hawker", "createdAt": "2020-05-24T15:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODA0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2984#discussion_r429648049", "bodyText": "Let me know and I will change accordingly. Thanks.", "author": "leonardgee", "createdAt": "2020-05-24T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzOTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf143b94b763fc6e46bb9daecfb2edd18c607a53", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java\nindex 457fe91b39..92e315efff 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/KafkaBridgeSpec.java\n\n@@ -35,7 +37,7 @@ public class KafkaBridgeSpec implements UnknownPropertyPreserving, Serializable\n \n     private static final long serialVersionUID = 1L;\n \n-    private int replicas = 1;\n+    private int replicas = DEFAULT_REPLICAS;\n \n     private String image;\n     private KafkaBridgeHttpConfig http;\n"}}, {"oid": "cf143b94b763fc6e46bb9daecfb2edd18c607a53", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cf143b94b763fc6e46bb9daecfb2edd18c607a53", "message": "Used constant for replicas.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T14:38:03Z", "type": "commit"}, {"oid": "cbb6468cc6412c65fadef94764596687b72a2075", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cbb6468cc6412c65fadef94764596687b72a2075", "message": "Created constant for default replica.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T14:48:12Z", "type": "commit"}, {"oid": "d56196d20e0bad6028471d9b703b448fecbfe4e9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d56196d20e0bad6028471d9b703b448fecbfe4e9", "message": "Merge branch 'set_bridge_replica_to_zero' of github.com:524119574/strimzi-kafka-operator into set_bridge_replica_to_zero\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T14:48:42Z", "type": "commit"}, {"oid": "c957c73ce5dce33c5e0d72feb45182ee8f39cfd8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c957c73ce5dce33c5e0d72feb45182ee8f39cfd8", "message": "Fixed new line issue.\n\nSigned-off-by: Leonard Ge <gw980531@gmail.com>", "committedDate": "2020-05-24T14:50:05Z", "type": "commit"}]}