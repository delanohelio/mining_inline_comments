{"pr_number": 3538, "pr_title": "ST: change keycloak deployment in system tests", "pr_createdAt": "2020-08-24T07:14:42Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4OTM2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475389369", "bodyText": "This can be removed :)", "author": "see-quick", "createdAt": "2020-08-24T07:19:27Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java", "diffHunk": "@@ -204,7 +198,7 @@ public KafkaClientPropertiesBuilder withSaslJassConfigAndTls(String clientId, St\n \n             try {\n                 importKeycloakCertificateToTruststore(properties);\n-                fixBadlyImportedAuthzSettings();\n+//                fixBadlyImportedAuthzSettings();", "originalCommit": "ff8b5cb566b864b6996f2542d571f7569b710d1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "707194e22871943693271cb9555e1681017a1ab6", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java b/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java\nindex c02abbd54f..9d38a794c3 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/KafkaClientProperties.java\n\n@@ -198,7 +198,6 @@ public class KafkaClientProperties  {\n \n             try {\n                 importKeycloakCertificateToTruststore(properties);\n-//                fixBadlyImportedAuthzSettings();\n             } catch (Exception e) {\n                 e.printStackTrace();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDI2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475390263", "bodyText": "Do we still need this?", "author": "see-quick", "createdAt": "2020-08-24T07:21:21Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java", "diffHunk": "@@ -71,73 +70,62 @@ void setup() throws Exception {\n \n         LOGGER.info(\"Deploying keycloak...\");\n \n-        KeycloakUtils.deployKeycloak().done();\n+        KeycloakUtils.deployKeycloak(NAMESPACE);\n \n         // https\n-        Service keycloakService = KubernetesResource.deployKeycloakNodePortService(NAMESPACE);\n+        Service keycloakService = KubernetesResource.createKeycloakNodePortService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakService.getMetadata().getName());\n \n         // http\n-        Service keycloakHttpService = KubernetesResource.deployKeycloakNodePortHttpService(NAMESPACE);\n+        Service keycloakHttpService = KubernetesResource.createKeycloakNodePortHttpService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakHttpService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakHttpService.getMetadata().getName());\n \n-        keycloakInstance = new KeycloakInstance(\"admin\", \"admin\");\n-        clusterHost = kubeClient().getNodeAddress();\n-\n-        LOGGER.info(\"Importing basic realm\");\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm.sh\");\n-\n-        LOGGER.info(\"Importing authorization realm\");\n-\n-        keycloakInstance.importRealm(\"../systemtest/src/test/resources/oauth2/create_realm_authorization.sh\");\n+        String passwordEncoded = kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\");\n+        String password = new String(Base64.getDecoder().decode(passwordEncoded.getBytes()));\n+        keycloakInstance = new KeycloakInstance(\"admin\", password);\n \n-        String keycloakPodName = kubeClient().listPodsByPrefixInName(\"keycloak-\").get(0).getMetadata().getName();\n-\n-        String pubKey = ResourceManager.cmdKubeClient().execInPod(keycloakPodName, \"keytool\", \"-exportcert\", \"-keystore\",\n-            \"/opt/jboss/keycloak/standalone/configuration/application.keystore\", \"-alias\", \"server\", \"-storepass\", \"password\", \"-rfc\").out();\n-\n-        SecretUtils.createSecret(SECRET_OF_KEYCLOAK, CERTIFICATE_OF_KEYCLOAK, new String(Base64.getEncoder().encode(pubKey.getBytes()), StandardCharsets.US_ASCII));\n+        clusterHost = kubeClient().getNodeAddress();\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n-                .editSpec()\n-                    .editKafka()\n-                        .editListeners()\n-                            .withNewTls()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endTls()\n-                            .withNewKafkaListenerExternalNodePort()\n-                                .withNewKafkaListenerAuthenticationOAuth()\n-                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                    .withTlsTrustedCertificates(\n-                                        new CertSecretSourceBuilder()\n-                                            .withSecretName(SECRET_OF_KEYCLOAK)\n-                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                            .build())\n-                                    .withDisableTlsHostnameVerification(true)\n-                                .endKafkaListenerAuthenticationOAuth()\n-                            .endKafkaListenerExternalNodePort()\n-                        .endListeners()\n-                    .endKafka()\n-                .endSpec()\n-                .done();\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewTls()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endTls()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withNewKafkaListenerAuthenticationOAuth()\n+                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                .withTlsTrustedCertificates(\n+                                    new CertSecretSourceBuilder()\n+                                        .withSecretName(SECRET_OF_KEYCLOAK)\n+                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                        .build())\n+                                .withDisableTlsHostnameVerification(true)\n+                            .endKafkaListenerAuthenticationOAuth()\n+                        .endKafkaListenerExternalNodePort()", "originalCommit": "ff8b5cb566b864b6996f2542d571f7569b710d1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NzA2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475397063", "bodyText": "Yes because I didn't removed external listener completely. I expected it will be done in our PR", "author": "Frawless", "createdAt": "2020-08-24T07:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "253f076443d2dc79bae96130f0c79e9365f6b833", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java b/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java\nindex 691ffb219c..9d90095ea3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAbstractST.java\n\n@@ -70,62 +69,73 @@ public class OauthAbstractST extends AbstractST {\n \n         LOGGER.info(\"Deploying keycloak...\");\n \n-        KeycloakUtils.deployKeycloak(NAMESPACE);\n+        KeycloakUtils.deployKeycloak().done();\n \n         // https\n-        Service keycloakService = KubernetesResource.createKeycloakNodePortService(NAMESPACE);\n+        Service keycloakService = KubernetesResource.deployKeycloakNodePortService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakService.getMetadata().getName());\n \n         // http\n-        Service keycloakHttpService = KubernetesResource.createKeycloakNodePortHttpService(NAMESPACE);\n+        Service keycloakHttpService = KubernetesResource.deployKeycloakNodePortHttpService(NAMESPACE);\n         KubernetesResource.createServiceResource(keycloakHttpService, NAMESPACE);\n         ServiceUtils.waitForNodePortService(keycloakHttpService.getMetadata().getName());\n \n-        String passwordEncoded = kubeClient().getSecret(\"credential-example-keycloak\").getData().get(\"ADMIN_PASSWORD\");\n-        String password = new String(Base64.getDecoder().decode(passwordEncoded.getBytes()));\n-        keycloakInstance = new KeycloakInstance(\"admin\", password);\n-\n+        keycloakInstance = new KeycloakInstance(\"admin\", \"admin\");\n         clusterHost = kubeClient().getNodeAddress();\n \n+        LOGGER.info(\"Importing basic realm\");\n+        keycloakInstance.importRealm(TestUtils.USER_PATH + \"/../systemtest/src/test/resources/oauth2/create_realm.sh\");\n+\n+        LOGGER.info(\"Importing authorization realm\");\n+\n+        keycloakInstance.importRealm(TestUtils.USER_PATH + \"/../systemtest/src/test/resources/oauth2/create_realm_authorization.sh\");\n+\n+        String keycloakPodName = kubeClient().listPodsByPrefixInName(\"keycloak-\").get(0).getMetadata().getName();\n+\n+        String pubKey = ResourceManager.cmdKubeClient().execInPod(keycloakPodName, \"keytool\", \"-exportcert\", \"-keystore\",\n+            \"/opt/jboss/keycloak/standalone/configuration/application.keystore\", \"-alias\", \"server\", \"-storepass\", \"password\", \"-rfc\").out();\n+\n+        SecretUtils.createSecret(SECRET_OF_KEYCLOAK, CERTIFICATE_OF_KEYCLOAK, new String(Base64.getEncoder().encode(pubKey.getBytes()), StandardCharsets.US_ASCII));\n+\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n-            .editSpec()\n-                .editKafka()\n-                    .editListeners()\n-                        .withNewTls()\n-                            .withNewKafkaListenerAuthenticationOAuth()\n-                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                .withTlsTrustedCertificates(\n-                                    new CertSecretSourceBuilder()\n-                                        .withSecretName(SECRET_OF_KEYCLOAK)\n-                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                        .build())\n-                                .withDisableTlsHostnameVerification(true)\n-                            .endKafkaListenerAuthenticationOAuth()\n-                        .endTls()\n-                        .withNewKafkaListenerExternalNodePort()\n-                            .withNewKafkaListenerAuthenticationOAuth()\n-                                .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n-                                .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n-                                .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n-                                .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n-                                .withUserNameClaim(keycloakInstance.getUserNameClaim())\n-                                .withTlsTrustedCertificates(\n-                                    new CertSecretSourceBuilder()\n-                                        .withSecretName(SECRET_OF_KEYCLOAK)\n-                                        .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n-                                        .build())\n-                                .withDisableTlsHostnameVerification(true)\n-                            .endKafkaListenerAuthenticationOAuth()\n-                        .endKafkaListenerExternalNodePort()\n-                    .endListeners()\n-                .endKafka()\n-            .endSpec()\n-            .done();\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewTls()\n+                                .withNewKafkaListenerAuthenticationOAuth()\n+                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                    .withTlsTrustedCertificates(\n+                                        new CertSecretSourceBuilder()\n+                                            .withSecretName(SECRET_OF_KEYCLOAK)\n+                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                            .build())\n+                                    .withDisableTlsHostnameVerification(true)\n+                                .endKafkaListenerAuthenticationOAuth()\n+                            .endTls()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withNewKafkaListenerAuthenticationOAuth()\n+                                    .withValidIssuerUri(keycloakInstance.getValidIssuerUri())\n+                                    .withJwksExpirySeconds(keycloakInstance.getJwksExpireSeconds())\n+                                    .withJwksRefreshSeconds(keycloakInstance.getJwksRefreshSeconds())\n+                                    .withJwksEndpointUri(keycloakInstance.getJwksEndpointUri())\n+                                    .withUserNameClaim(keycloakInstance.getUserNameClaim())\n+                                    .withTlsTrustedCertificates(\n+                                        new CertSecretSourceBuilder()\n+                                            .withSecretName(SECRET_OF_KEYCLOAK)\n+                                            .withCertificate(CERTIFICATE_OF_KEYCLOAK)\n+                                            .build())\n+                                    .withDisableTlsHostnameVerification(true)\n+                                .endKafkaListenerAuthenticationOAuth()\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n \n         KafkaTopicResource.topic(CLUSTER_NAME, TOPIC_NAME).done();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNzMzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r475537337", "bodyText": "Here you can remove this commend or?", "author": "see-quick", "createdAt": "2020-08-24T11:36:03Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java", "diffHunk": "@@ -136,7 +136,7 @@ void testTeamBWriteToTopic() {\n         );\n     }\n \n-    @Disabled(\"Will be fixed in the new PR.\")\n+//    @Disabled(\"Will be fixed in the new PR.\")", "originalCommit": "eece305ed44a09ed8bd8b2338c1a66c85aca195f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce520220e6c034dac659ebad4c3424b20611d9c7", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java b/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java\nindex 590e838521..910307ad13 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/security/oauth/OauthAuthorizationST.java\n\n@@ -136,7 +136,6 @@ public class OauthAuthorizationST extends OauthAbstractST {\n         );\n     }\n \n-//    @Disabled(\"Will be fixed in the new PR.\")\n     @Description(\"As a member of team A, I can write to topics starting with 'x-' and \" +\n             \"as a member of team B can read from topics starting with 'x-'\")\n     @Test\n"}}, {"oid": "253f076443d2dc79bae96130f0c79e9365f6b833", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/253f076443d2dc79bae96130f0c79e9365f6b833", "message": "Deploy keycloak via script\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:49:16Z", "type": "commit"}, {"oid": "eab9952d3296efc45871a3aed8d03353a63ce2fa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eab9952d3296efc45871a3aed8d03353a63ce2fa", "message": "Make deployment working, increace version of keycloak to 11.0.0, use operator for deployment\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:17Z", "type": "commit"}, {"oid": "707194e22871943693271cb9555e1681017a1ab6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/707194e22871943693271cb9555e1681017a1ab6", "message": "Remove leftovers\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:23Z", "type": "commit"}, {"oid": "acae7ecbd83defbacc600799723f019b6d3c60e8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/acae7ecbd83defbacc600799723f019b6d3c60e8", "message": "fix st on jenkins\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:23Z", "type": "commit"}, {"oid": "2678008a232539f4bc556b2217e90b2dc18a193a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2678008a232539f4bc556b2217e90b2dc18a193a", "message": "fixup! fix st on jenkins\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:23Z", "type": "commit"}, {"oid": "ce520220e6c034dac659ebad4c3424b20611d9c7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ce520220e6c034dac659ebad4c3424b20611d9c7", "message": "fixup! fixup! fix st on jenkins\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:24Z", "type": "commit"}, {"oid": "90e050c73f679a19a79dcb3e29d6c6014fab21e1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/90e050c73f679a19a79dcb3e29d6c6014fab21e1", "message": "some fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:24Z", "type": "commit"}, {"oid": "b97d980aa1d92046a22c031717879656f8dc9102", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b97d980aa1d92046a22c031717879656f8dc9102", "message": "Azp debug\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:24Z", "type": "commit"}, {"oid": "db21af25f05956f4d333d261c6e358cdbf36aba5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/db21af25f05956f4d333d261c6e358cdbf36aba5", "message": "another fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:24Z", "type": "commit"}, {"oid": "6d452fe94f20086047b4f1ead4f29e4ce78c04fe", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6d452fe94f20086047b4f1ead4f29e4ce78c04fe", "message": "fixup! another fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:50:24Z", "type": "commit"}, {"oid": "a111f6d0d70865e49301add66346a617201fd0e8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a111f6d0d70865e49301add66346a617201fd0e8", "message": "fixup! fixup! another fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:55:59Z", "type": "commit"}, {"oid": "a111f6d0d70865e49301add66346a617201fd0e8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a111f6d0d70865e49301add66346a617201fd0e8", "message": "fixup! fixup! another fixes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T10:55:59Z", "type": "forcePushed"}, {"oid": "f1d96fe37a3e8df0e33999c681039a69906d4807", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1d96fe37a3e8df0e33999c681039a69906d4807", "message": "Rever pipeline changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T12:34:49Z", "type": "commit"}, {"oid": "151210b1ca0911ec41678d8e2ef27e842ce83c60", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/151210b1ca0911ec41678d8e2ef27e842ce83c60", "message": "fixup! Rever pipeline changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T13:50:41Z", "type": "commit"}, {"oid": "80d9bdcb0ac8681252904a8772585443d2a0ee4c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/80d9bdcb0ac8681252904a8772585443d2a0ee4c", "message": "fixup! fixup! Rever pipeline changes\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T13:53:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477322416", "bodyText": "Remove it? :)", "author": "see-quick", "createdAt": "2020-08-26T13:58:11Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java", "diffHunk": "@@ -37,40 +35,22 @@\n     private Pattern keystorePattern = Pattern.compile(\"<tls>\\\\s*<key-stores>\\\\s*<key-store name=\\\"kcKeyStore\\\">\\\\s*<credential-reference clear-text=\\\".*\\\"\\\\/>\");\n     private Pattern keystorePasswordPattern = Pattern.compile(\"\\\\\\\".*\\\\\\\"\");\n \n-    public KeycloakInstance(String username, String password) {\n+    public KeycloakInstance(String username, String password, String namespace) {\n \n         this.username = username;\n         this.password = password;\n+        this.namespace = namespace;\n         this.httpsUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTPS_KEYCLOAK_DEFAULT_NODE_PORT;\n         this.httpUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTP_KEYCLOAK_DEFAULT_NODE_PORT;\n+        // this.httpsUri = \"keycloak.\" + namespace + \".svc.cluster.local\" +\":8443\";\n+        // this.httpUri = \"keycloak-discovery.\" + namespace + \".svc.cluster.local\" +\":8080\";", "originalCommit": "80d9bdcb0ac8681252904a8772585443d2a0ee4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NTE0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477345145", "bodyText": "Well I wanted to keep this as preparation for your PR. But I can remove it if you want", "author": "Frawless", "createdAt": "2020-08-26T14:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2MzcwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3538#discussion_r477363708", "bodyText": "Ok, let it be :)", "author": "see-quick", "createdAt": "2020-08-26T14:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMjQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "a0b07399e6692956dc8c4ceb05c0babc1185f1bb", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java b/systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java\nindex 0384a4b9e3..71a2d78778 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/keycloak/KeycloakInstance.java\n\n@@ -42,8 +42,6 @@ public class KeycloakInstance {\n         this.namespace = namespace;\n         this.httpsUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTPS_KEYCLOAK_DEFAULT_NODE_PORT;\n         this.httpUri = ResourceManager.kubeClient().getNodeAddress() + \":\" + Constants.HTTP_KEYCLOAK_DEFAULT_NODE_PORT;\n-        // this.httpsUri = \"keycloak.\" + namespace + \".svc.cluster.local\" +\":8443\";\n-        // this.httpUri = \"keycloak-discovery.\" + namespace + \".svc.cluster.local\" +\":8080\";\n         this.validIssuerUri = \"https://\" + httpsUri + \"/auth/realms/internal\";\n         this.jwksEndpointUri = \"https://\" + httpsUri + \"/auth/realms/internal/protocol/openid-connect/certs\";\n         this.oauthTokenEndpointUri = \"https://\" + httpsUri + \"/auth/realms/internal/protocol/openid-connect/token\";\n"}}, {"oid": "a0b07399e6692956dc8c4ceb05c0babc1185f1bb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a0b07399e6692956dc8c4ceb05c0babc1185f1bb", "message": "Comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-08-26T16:45:47Z", "type": "commit"}]}