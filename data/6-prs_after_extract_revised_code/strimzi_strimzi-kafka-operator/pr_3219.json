{"pr_number": 3219, "pr_title": "[systemtest][cruise-control] Change testManuallyCreateMetricsReporterTopic", "pr_createdAt": "2020-06-19T17:49:27Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219", "timeline": [{"oid": "c3c41700aa023156e37d5cc8d26f99cab96729a5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3c41700aa023156e37d5cc8d26f99cab96729a5", "message": "change our test to be more relevant\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-19T17:36:00Z", "type": "commit"}, {"oid": "895daaace161baa419576f8768a0c1ae9c7a610b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/895daaace161baa419576f8768a0c1ae9c7a610b", "message": "remove unnecessary method from kafka resource\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-19T17:36:23Z", "type": "commit"}, {"oid": "06cb3a50a1fbf44d0e99d2e5a4585f1503bdf6f9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/06cb3a50a1fbf44d0e99d2e5a4585f1503bdf6f9", "message": "add method for deletion of topics with wait\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-19T17:42:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0MTAwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443341003", "bodyText": "this flag doesn't make sense in CC configuration. It's a broker configuration.", "author": "ppatierno", "createdAt": "2020-06-22T06:28:47Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java", "diffHunk": "@@ -42,47 +42,65 @@\n     private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n     private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n \n-\n     @Test\n-    @Disabled\n-    void testManuallyCreateMetricsReporterTopic() {\n-        KafkaResource.kafkaWithCruiseControlWithoutWaitAutoCreateTopicsDisable(CLUSTER_NAME, 3, 3);\n-\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.zookeeperStatefulSetName(CLUSTER_NAME));\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n-        PodUtils.verifyThatRunningPodsAreStable(KafkaResources.entityOperatorDeploymentName(CLUSTER_NAME));\n-\n-        LOGGER.info(\"Verifying that metrics reporter topic is not present because of selected config 'auto.create.topics.enable=false'\");\n-\n-        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatKafkaCruiseControlMetricReporterTopicIsPresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n-\n-        PodUtils.waitUntilPodIsPresent(CruiseControlResources.deploymentName(CLUSTER_NAME));\n-        PodUtils.waitUntilPodIsInCrashLoopBackOff(kubeClient().listPodsByPrefixInName(CruiseControlResources.deploymentName(CLUSTER_NAME)).get(0).getMetadata().getName());\n-\n-        LOGGER.info(\"Verifying that samples topics are not present because of \" +\n-            \"'Cruise Control cannot find partitions for the metrics reporter that topic matches strimzi.cruisecontrol.metrics in the target cluster'\");\n-\n-        assertThrows(WaitException.class, () -> CruiseControlUtils.verifyThatCruiseControlSamplesTopicsArePresent(Constants.GLOBAL_CRUISE_CONTROL_EXCEPT_FAIL_TIMEOUT));\n-\n-        // Since log compaction may remove records needed by Cruise Control, all topics created by Cruise Control must\n-        // be configured with cleanup.policy=delete to disable log compaction.\n-        // More in docs 8.5.2. Topic creation and configuration\n-        KafkaTopicResource.topic(CLUSTER_NAME, CRUISE_CONTROL_METRICS_TOPIC)\n-            .editSpec()\n-                .addToConfig(\"cleanup.policy\", \"delete\")\n+    void testAutoCreationOfCruiseControlTopics() throws InterruptedException {\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n+            .editOrNewSpec()\n+                .editKafka()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n+                .endKafka()\n+                .editCruiseControl()\n+                    .addToConfig(\"auto.create.topics.enable\", \"false\")", "originalCommit": "06cb3a50a1fbf44d0e99d2e5a4585f1503bdf6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39506bdbc996462acfca4df111523e2672944726", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java b/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java\nindex 42130a5aa5..c957dd4c49 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/cruisecontrol/CruiseControlIsolatedST.java\n\n@@ -43,46 +43,15 @@ public class CruiseControlIsolatedST extends BaseST {\n     private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n \n     @Test\n-    void testAutoCreationOfCruiseControlTopics() throws InterruptedException {\n+    void testAutoCreationOfCruiseControlTopics() {\n         KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3)\n             .editOrNewSpec()\n                 .editKafka()\n                     .addToConfig(\"auto.create.topics.enable\", \"false\")\n                 .endKafka()\n-                .editCruiseControl()\n-                    .addToConfig(\"auto.create.topics.enable\", \"false\")\n-                .endCruiseControl()\n             .endSpec()\n             .done();\n \n-        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n-\n-        LOGGER.info(\"Removing auto-created CC topics\");\n-        KafkaTopicUtils.deleteKafkaTopicWithWait(CRUISE_CONTROL_METRICS_TOPIC);\n-        KafkaTopicUtils.deleteKafkaTopicWithWait(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n-        KafkaTopicUtils.deleteKafkaTopicWithWait(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n-\n-        //wait some time to know if CC topics will be created by metrics reporter\n-        Thread.sleep(60_000);\n-\n-        LOGGER.info(\"Checking if CC topics are not recreated\");\n-        assertThat(KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(CRUISE_CONTROL_METRICS_TOPIC).get() == null, is(true));\n-        assertThat(KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get() == null, is(true));\n-        assertThat(KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get() == null, is(true));\n-\n-        LOGGER.info(\"Changing the CC config to auto.create.topics.enable=true and removing config of Kafka\");\n-        //firstly we need to configure the Kafka settings, because it will be rolled sooner than CC and it will create the topics with default values for Kafka\n-        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n-            kafka.getSpec().getKafka().getConfig().remove(\"auto.create.topics.enable\", \"false\");\n-            kafka.getSpec().getCruiseControl().getConfig().put(\"auto.create.topics.enable\", \"true\");\n-        });\n-        StatefulSetUtils.waitTillSsHasRolled(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n-        DeploymentUtils.waitForDeploymentAndPodsReady(CLUSTER_NAME + \"-cruise-control\", 1);\n-\n-        KafkaTopicUtils.waitForKafkaTopicCreation(CRUISE_CONTROL_METRICS_TOPIC);\n-        KafkaTopicUtils.waitForKafkaTopicCreation(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n-        KafkaTopicUtils.waitForKafkaTopicCreation(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n-\n         KafkaTopicSpec metricsTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE)\n             .withName(CRUISE_CONTROL_METRICS_TOPIC).get().getSpec();\n         KafkaTopicSpec modelTrainingTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE)\n"}}, {"oid": "39506bdbc996462acfca4df111523e2672944726", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/39506bdbc996462acfca4df111523e2672944726", "message": "change the test\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-22T10:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NjQwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443476409", "bodyText": "do we still need this method?", "author": "ppatierno", "createdAt": "2020-06-22T10:53:46Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java", "diffHunk": "@@ -73,6 +73,12 @@ public static void waitForKafkaTopicCreationByNamePrefix(String topicNamePrefix)\n         );\n     }\n \n+    public static void deleteKafkaTopicWithWait(String topicName) {\n+        LOGGER.info(\"Deleting topic {} in namespace {}\", topicName, kubeClient().getNamespace());\n+        KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(topicName).delete();\n+        waitForKafkaTopicDeletion(topicName);\n+    }", "originalCommit": "39506bdbc996462acfca4df111523e2672944726", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3ODY0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3219#discussion_r443478647", "bodyText": "Not at all, if we will need it in future, we add it in different PR, thanks :)", "author": "im-konge", "createdAt": "2020-06-22T10:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3NjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e5cecf1748104d2403af18aa4dfc3256c3e8dc5", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java\nindex 37633efabc..babff8d785 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaTopicUtils.java\n\n@@ -73,12 +73,6 @@ public class KafkaTopicUtils {\n         );\n     }\n \n-    public static void deleteKafkaTopicWithWait(String topicName) {\n-        LOGGER.info(\"Deleting topic {} in namespace {}\", topicName, kubeClient().getNamespace());\n-        KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(topicName).delete();\n-        waitForKafkaTopicDeletion(topicName);\n-    }\n-\n     public static void waitForKafkaTopicDeletion(String topicName) {\n         LOGGER.info(\"Waiting for KafkaTopic {} deletion\", topicName);\n         TestUtils.waitFor(\"KafkaTopic deletion \" + topicName, Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n"}}, {"oid": "ee045369e4161b6ed9097499af3a307130a22236", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ee045369e4161b6ed9097499af3a307130a22236", "message": "fixup! change the test\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-22T10:54:42Z", "type": "commit"}, {"oid": "0e5cecf1748104d2403af18aa4dfc3256c3e8dc5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0e5cecf1748104d2403af18aa4dfc3256c3e8dc5", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-22T10:59:29Z", "type": "commit"}]}