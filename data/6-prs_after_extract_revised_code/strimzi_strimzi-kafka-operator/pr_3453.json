{"pr_number": 3453, "pr_title": "Add generate secret owner reference flag", "pr_createdAt": "2020-08-05T09:03:06Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453", "timeline": [{"oid": "a6298a12770fc9661f54295b251271ad6fd07c5a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6298a12770fc9661f54295b251271ad6fd07c5a", "message": "Add sign-off\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-08-05T09:08:09Z", "type": "forcePushed"}, {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5b862aa72193f5caeba255b472291ae0bbbd8561", "message": "Add generate secret owner reference flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-08-05T09:08:51Z", "type": "commit"}, {"oid": "5b862aa72193f5caeba255b472291ae0bbbd8561", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5b862aa72193f5caeba255b472291ae0bbbd8561", "message": "Add generate secret owner reference flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-08-05T09:08:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3MTg0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r465671844", "bodyText": "should we explain what's the consequence of setting it to false? so explaining that deleting the Kafka cluster won't delete the certificate secrets?", "author": "ppatierno", "createdAt": "2020-08-05T11:53:54Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set \" +\n+    \"Default is true.\")", "originalCommit": "5b862aa72193f5caeba255b472291ae0bbbd8561", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcf4525de0d9207898d7bada1d335a532780aad5", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\nindex 02a222c994..53291bedaf 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n\n@@ -60,7 +60,7 @@ public class CertificateAuthority implements UnknownPropertyPreserving, Serializ\n     }\n \n     @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n-    \"Otherwise no owner reference is set \" +\n+    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +\n     \"Default is true.\")\n     public boolean isGenerateSecretOwnerReference() {\n         return generateSecretOwnerReference;\n"}}, {"oid": "fcf4525de0d9207898d7bada1d335a532780aad5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fcf4525de0d9207898d7bada1d335a532780aad5", "message": "Improve description of new field and add changes to kafka crd at cluster-operator\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-08-05T12:43:39Z", "type": "commit"}, {"oid": "fcf4525de0d9207898d7bada1d335a532780aad5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fcf4525de0d9207898d7bada1d335a532780aad5", "message": "Improve description of new field and add changes to kafka crd at cluster-operator\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-08-05T12:43:39Z", "type": "forcePushed"}, {"oid": "d5bd9a525f6ac7c24b6b6e193617eeebdd760792", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d5bd9a525f6ac7c24b6b6e193617eeebdd760792", "message": "Add KafkaAssemblyOperatorTest\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-02T07:32:43Z", "type": "commit"}, {"oid": "4915f564dc127c139fd15973e02a0370916ad07a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4915f564dc127c139fd15973e02a0370916ad07a", "message": "Merge branch 'master' into add-or-flag", "committedDate": "2020-10-02T07:34:47Z", "type": "commit"}, {"oid": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "message": "Merge branch 'master' into add-or-flag", "committedDate": "2020-10-02T07:36:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4Nzg4NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499287884", "bodyText": "I think this needs to be indented with 8 spaces => that is why the CI failed.", "author": "scholzj", "createdAt": "2020-10-04T20:54:48Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +\n+    \"Default is true.\")", "originalCommit": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065451f4597bb8e1ff5639a77b652f5c638580e2", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\nindex 53291bedaf..50ac172c52 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n\n@@ -60,8 +60,8 @@ public class CertificateAuthority implements UnknownPropertyPreserving, Serializ\n     }\n \n     @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n-    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +\n-    \"Default is true.\")\n+            \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets. \" +\n+            \"Default is true.\")\n     public boolean isGenerateSecretOwnerReference() {\n         return generateSecretOwnerReference;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODk0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288943", "bodyText": "Should this be clusterCaConfig instead of clusterCa?", "author": "scholzj", "createdAt": "2020-10-04T21:07:06Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -603,7 +603,8 @@ ReconciliationState createReconciliationState(Reconciliation reconciliation, Kaf\n                                 clusterCaConfig != null ? clusterCaConfig.getCertificateExpirationPolicy() : null);\n                         clusterCa.createRenewOrReplace(\n                                 reconciliation.namespace(), reconciliation.name(), caLabels.toMap(),\n-                                ownerRef, isMaintenanceTimeWindowsSatisfied(dateSupplier));\n+                                clusterCa.isGenerateSecretOwnerReference() ? ownerRef : null, ", "originalCommit": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065451f4597bb8e1ff5639a77b652f5c638580e2", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex b922938063..965dacd030 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -596,6 +598,17 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                         // When we are not supposed to generate the CA but it does not exist, we should just throw an error\n                         checkCustomCaSecret(clusterCaConfig, clusterCaCertSecret, clusterCaKeySecret, \"Cluster CA\");\n \n+                        Map<String, String> clusterCaCertLabels = emptyMap();\n+                        Map<String, String> clusterCaCertAnnotations = emptyMap();\n+\n+                        if (kafkaAssembly.getSpec().getKafka() != null\n+                                && kafkaAssembly.getSpec().getKafka().getTemplate() != null\n+                                && kafkaAssembly.getSpec().getKafka().getTemplate().getClusterCaCert() != null\n+                                && kafkaAssembly.getSpec().getKafka().getTemplate().getClusterCaCert().getMetadata() != null) {\n+                            clusterCaCertLabels = kafkaAssembly.getSpec().getKafka().getTemplate().getClusterCaCert().getMetadata().getLabels();\n+                            clusterCaCertAnnotations = kafkaAssembly.getSpec().getKafka().getTemplate().getClusterCaCert().getMetadata().getAnnotations();\n+                        }\n+\n                         this.clusterCa = new ClusterCa(certManager, passwordGenerator, name, clusterCaCertSecret, clusterCaKeySecret,\n                                 ModelUtils.getCertificateValidity(clusterCaConfig),\n                                 ModelUtils.getRenewalDays(clusterCaConfig),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4ODk1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499288958", "bodyText": "Should this be clientsCaConfig instead of clientsCa ?", "author": "scholzj", "createdAt": "2020-10-04T21:07:27Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -620,7 +621,8 @@ ReconciliationState createReconciliationState(Reconciliation reconciliation, Kaf\n                                 clientsCaConfig == null || clientsCaConfig.isGenerateCertificateAuthority(),\n                                 clientsCaConfig != null ? clientsCaConfig.getCertificateExpirationPolicy() : null);\n                         clientsCa.createRenewOrReplace(reconciliation.namespace(), reconciliation.name(),\n-                                caLabels.toMap(), ownerRef, isMaintenanceTimeWindowsSatisfied(dateSupplier));\n+                                caLabels.toMap(), clientsCa.isGenerateSecretOwnerReference() ? ownerRef : null,", "originalCommit": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065451f4597bb8e1ff5639a77b652f5c638580e2", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex b922938063..965dacd030 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -621,7 +635,8 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                                 clientsCaConfig == null || clientsCaConfig.isGenerateCertificateAuthority(),\n                                 clientsCaConfig != null ? clientsCaConfig.getCertificateExpirationPolicy() : null);\n                         clientsCa.createRenewOrReplace(reconciliation.namespace(), reconciliation.name(),\n-                                caLabels.toMap(), clientsCa.isGenerateSecretOwnerReference() ? ownerRef : null,\n+                                caLabels.toMap(), emptyMap(), emptyMap(), \n+                                clientsCaConfig.isGenerateSecretOwnerReference() ? ownerRef : null,\n                                 isMaintenanceTimeWindowsSatisfied(dateSupplier));\n \n                         List<Future> secretReconciliations = new ArrayList<>(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTE3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499289176", "bodyText": "I do not think the test here really tests what it should. I do not think it triggered the code you changed in createKafkaClusterInitialSecrets. I think you would need to capture the secrets and check it on them. You also need to make sure that in different runs, the values are configured differently to test both situations which I don't think it happening here.", "author": "scholzj", "createdAt": "2020-10-04T21:10:04Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java", "diffHunk": "@@ -592,6 +592,19 @@ private void createCluster(VertxTestContext context, Kafka kafka, List<Secret> s\n             expectedSecrets.add(EntityOperator.secretName(kafkaName));\n         }\n \n+        List<Secrets> caSecrets = getInitialCertificates(kafkaName);\n+        if (getKafkaAssembly(kafkaName).getSpec().getClusterCa().isGenerateSecretOwnerReference()) {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n+        } else {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n+        }\n+\n+        if (getKafkaAssembly(kafkaName).getSpec().getClientsCa().isGenerateSecretOwnerReference()) {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n+        } else {\n+            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n+        }\n+", "originalCommit": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065451f4597bb8e1ff5639a77b652f5c638580e2", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java\nindex a8ff018d5b..a771932740 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorTest.java\n\n@@ -592,19 +592,6 @@ public class KafkaAssemblyOperatorTest {\n             expectedSecrets.add(EntityOperator.secretName(kafkaName));\n         }\n \n-        List<Secrets> caSecrets = getInitialCertificates(kafkaName);\n-        if (getKafkaAssembly(kafkaName).getSpec().getClusterCa().isGenerateSecretOwnerReference()) {\n-            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n-        } else {\n-            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n-        }\n-\n-        if (getKafkaAssembly(kafkaName).getSpec().getClientsCa().isGenerateSecretOwnerReference()) {\n-            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(1));\n-        } else {\n-            assertThat(caSecrets.get(0).getMetadata().getOwnerReferences().size(), is(0));\n-        }\n-\n         when(mockDepOps.reconcile(anyString(), anyString(), any())).thenAnswer(invocation -> {\n             String name = invocation.getArgument(1);\n             Deployment desired = invocation.getArgument(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDU0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r499290547", "bodyText": "Could you add space at the end of the sentence after the .?", "author": "scholzj", "createdAt": "2020-10-04T21:26:51Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java", "diffHunk": "@@ -58,6 +59,17 @@ public void setGenerateCertificateAuthority(boolean generateCertificateAuthority\n         this.generateCertificateAuthority = generateCertificateAuthority;\n     }\n \n+    @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n+    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +", "originalCommit": "126a9eb4d313bd4102e8c4e9c5f841b60abd4b22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065451f4597bb8e1ff5639a77b652f5c638580e2", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\nindex 53291bedaf..50ac172c52 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/CertificateAuthority.java\n\n@@ -60,8 +60,8 @@ public class CertificateAuthority implements UnknownPropertyPreserving, Serializ\n     }\n \n     @Description(\"If true then the Certificate Authority certificates secrets owner reference is set to the Kafka object. \" +\n-    \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets.\" +\n-    \"Default is true.\")\n+            \"Otherwise no owner reference is set so deleting the Kafka object won't delete the secrets. \" +\n+            \"Default is true.\")\n     public boolean isGenerateSecretOwnerReference() {\n         return generateSecretOwnerReference;\n     }\n"}}, {"oid": "065451f4597bb8e1ff5639a77b652f5c638580e2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/065451f4597bb8e1ff5639a77b652f5c638580e2", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-27T07:52:25Z", "type": "forcePushed"}, {"oid": "ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ef5014b6fd3c68d2025957336f5c5a0814a0fec6", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-27T07:53:03Z", "type": "forcePushed"}, {"oid": "c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "message": "Add test and changes based on pr comments\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-27T08:04:04Z", "type": "commit"}, {"oid": "c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0fa6f4d7019b9b0373b5a102a4ec9889de4daed", "message": "Add test and changes based on pr comments\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-27T08:04:04Z", "type": "forcePushed"}, {"oid": "5eef42a2152a89e5af3ce94503433915850598bf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5eef42a2152a89e5af3ce94503433915850598bf", "message": "Merge branch 'master' into add-or-flag\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-10-27T08:06:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDE5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680191", "bodyText": "I think this is missing the @Test annotation?", "author": "scholzj", "createdAt": "2020-11-01T22:23:48Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {", "originalCommit": "5eef42a2152a89e5af3ce94503433915850598bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5Nzg0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516797845", "bodyText": "True!", "author": "dgdelahera", "createdAt": "2020-11-03T16:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\nindex 8f98607e48..49bc381ece 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n\n@@ -149,21 +152,19 @@ public class KafkaAssemblyOperatorNonParametrizedTest {\n                 })));\n     }\n \n+    @Test\n     public void testCASecretsWithOwnerReference(VertxTestContext context) {\n         OwnerReference ownerReference = new OwnerReferenceBuilder()\n-                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n-                    .withKind(\"Kafka\")\n-                    .withName(NAME)\n-                    .withUid(\"random-1234\")\n-                    .withBlockOwnerDeletion(false)\n-                    .withController(false)\n-                    .build();\n-\n+                        .withKind(\"Kafka\")\n+                        .withName(NAME)\n+                        .withBlockOwnerDeletion(false)\n+                        .withController(false)\n+                        .build();\n \n         Kafka kafka = new KafkaBuilder()\n                 .withNewMetadata()\n-                    .withName(NAME)\n-                    .withNamespace(NAMESPACE)\n+                        .withName(NAME)\n+                        .withNamespace(NAMESPACE)\n                 .endMetadata()\n                 .withNewSpec()\n                     .withNewKafka()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDU0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680545", "bodyText": "I think this is a almost good test for the positive case. You should also add a case for the other case - that the owner reference is disabled - and check that it is indeed null. It should be easy to build on that from the", "author": "scholzj", "createdAt": "2020-11-01T22:26:33Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();\n+\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences(), hasSize(1));\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences().get(0), is(ownerReference));\n+\n+                    assertThat(clientsCaCertSecret.getMetadata().getOwnerReferences(), hasSize(0));\n+\n+                    async.flag();\n+                })));\n+        }\n+    }", "originalCommit": "5eef42a2152a89e5af3ce94503433915850598bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\nindex 8f98607e48..49bc381ece 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n\n@@ -149,21 +152,19 @@ public class KafkaAssemblyOperatorNonParametrizedTest {\n                 })));\n     }\n \n+    @Test\n     public void testCASecretsWithOwnerReference(VertxTestContext context) {\n         OwnerReference ownerReference = new OwnerReferenceBuilder()\n-                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n-                    .withKind(\"Kafka\")\n-                    .withName(NAME)\n-                    .withUid(\"random-1234\")\n-                    .withBlockOwnerDeletion(false)\n-                    .withController(false)\n-                    .build();\n-\n+                        .withKind(\"Kafka\")\n+                        .withName(NAME)\n+                        .withBlockOwnerDeletion(false)\n+                        .withController(false)\n+                        .build();\n \n         Kafka kafka = new KafkaBuilder()\n                 .withNewMetadata()\n-                    .withName(NAME)\n-                    .withNamespace(NAMESPACE)\n+                        .withName(NAME)\n+                        .withNamespace(NAMESPACE)\n                 .endMetadata()\n                 .withNewSpec()\n                     .withNewKafka()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDcwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680703", "bodyText": "Can you check the owner reference for all of the secrets? Although your PR affects only the cert secrets and not for the key secrets, it makes sense to test it to make sure they are not affected.", "author": "scholzj", "createdAt": "2020-11-01T22:27:57Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();", "originalCommit": "5eef42a2152a89e5af3ce94503433915850598bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5ODA4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516798080", "bodyText": "Sure!", "author": "dgdelahera", "createdAt": "2020-11-03T16:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\nindex 8f98607e48..49bc381ece 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n\n@@ -149,21 +152,19 @@ public class KafkaAssemblyOperatorNonParametrizedTest {\n                 })));\n     }\n \n+    @Test\n     public void testCASecretsWithOwnerReference(VertxTestContext context) {\n         OwnerReference ownerReference = new OwnerReferenceBuilder()\n-                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n-                    .withKind(\"Kafka\")\n-                    .withName(NAME)\n-                    .withUid(\"random-1234\")\n-                    .withBlockOwnerDeletion(false)\n-                    .withController(false)\n-                    .build();\n-\n+                        .withKind(\"Kafka\")\n+                        .withName(NAME)\n+                        .withBlockOwnerDeletion(false)\n+                        .withController(false)\n+                        .build();\n \n         Kafka kafka = new KafkaBuilder()\n                 .withNewMetadata()\n-                    .withName(NAME)\n-                    .withNamespace(NAMESPACE)\n+                        .withName(NAME)\n+                        .withNamespace(NAMESPACE)\n                 .endMetadata()\n                 .withNewSpec()\n                     .withNewKafka()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDc0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r515680744", "bodyText": "Why do you expect it to be 0 here?", "author": "scholzj", "createdAt": "2020-11-01T22:28:24Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()\n+                    .endKafka()\n+                    .withNewZookeeper()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                    .endZookeeper()\n+                .endSpec()\n+                .build();\n+        \n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(false);\n+        SecretOperator secretOps = supplier.secretOperations;\n+\n+        ArgumentCaptor<Secret> clusterCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clusterCaKey = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaCert = ArgumentCaptor.forClass(Secret.class);\n+        ArgumentCaptor<Secret> clientsCaKey = ArgumentCaptor.forClass(Secret.class);\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaCertSecretName(NAME)), clusterCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(AbstractModel.clusterCaKeySecretName(NAME)), clusterCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaCertSecretName(NAME)), clientsCaCert.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+        when(secretOps.reconcile(eq(NAMESPACE), eq(KafkaCluster.clientsCaKeySecretName(NAME)), clientsCaKey.capture())).thenAnswer(i -> Future.succeededFuture(ReconcileResult.created(i.getArgument(0))));\n+\n+        KafkaAssemblyOperator op = new KafkaAssemblyOperator(vertx, new PlatformFeaturesAvailability(false, KubernetesVersion.V1_9), certManager, passwordGenerator,\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(1L));\n+        Reconciliation reconciliation = new Reconciliation(\"test-trigger\", Kafka.RESOURCE_KIND, NAMESPACE, NAME);\n+\n+        Checkpoint async = context.checkpoint();\n+        \n+        op.new ReconciliationState(reconciliation, kafka).reconcileCas(() -> new Date())\n+                .onComplete(context.succeeding(c -> context.verify(() -> {\n+                    assertThat(clusterCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clusterCaKey.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaCert.getAllValues(), hasSize(1));\n+                    assertThat(clientsCaKey.getAllValues(), hasSize(1));\n+\n+                    Secret clusterCaCertSecret = clusterCaCert.getValue();\n+                    Secret clusterCaKeySecret = clusterCaKey.getValue();\n+                    Secret clientsCaCertSecret = clientsCaCert.getValue();\n+                    Secret clientsCaKeySecret = clientsCaKey.getValue();\n+\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences(), hasSize(1));\n+                    assertThat(clusterCaCertSecret.getMetadata().getOwnerReferences().get(0), is(ownerReference));\n+\n+                    assertThat(clientsCaCertSecret.getMetadata().getOwnerReferences(), hasSize(0));", "originalCommit": "5eef42a2152a89e5af3ce94503433915850598bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc5OTUxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516799513", "bodyText": "The clientsCaCert is created without OnwerReference, so I wanted to check here if it is null", "author": "dgdelahera", "createdAt": "2020-11-03T16:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODYxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516908617", "bodyText": "But why is it created without the owner reference? The generateSecretOwnerReference defaults to true and you did not set it differently. So it should have it in this test, or?", "author": "scholzj", "createdAt": "2020-11-03T19:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\nindex 8f98607e48..49bc381ece 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n\n@@ -149,21 +152,19 @@ public class KafkaAssemblyOperatorNonParametrizedTest {\n                 })));\n     }\n \n+    @Test\n     public void testCASecretsWithOwnerReference(VertxTestContext context) {\n         OwnerReference ownerReference = new OwnerReferenceBuilder()\n-                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n-                    .withKind(\"Kafka\")\n-                    .withName(NAME)\n-                    .withUid(\"random-1234\")\n-                    .withBlockOwnerDeletion(false)\n-                    .withController(false)\n-                    .build();\n-\n+                        .withKind(\"Kafka\")\n+                        .withName(NAME)\n+                        .withBlockOwnerDeletion(false)\n+                        .withController(false)\n+                        .build();\n \n         Kafka kafka = new KafkaBuilder()\n                 .withNewMetadata()\n-                    .withName(NAME)\n-                    .withNamespace(NAMESPACE)\n+                        .withName(NAME)\n+                        .withNamespace(NAMESPACE)\n                 .endMetadata()\n                 .withNewSpec()\n                     .withNewKafka()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMDIxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3453#discussion_r516910218", "bodyText": "BTW: I didn't noticed this before, but this should IMHO not even compile. There is no owner reference support in the template.", "author": "scholzj", "createdAt": "2020-11-03T19:37:07Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java", "diffHunk": "@@ -148,4 +148,80 @@ public void testCustomLabelsAndAnnotations(VertxTestContext context) {\n                     async.flag();\n                 })));\n     }\n-}\n\\ No newline at end of file\n+\n+    public void testCASecretsWithOwnerReference(VertxTestContext context) {\n+        OwnerReference ownerReference = new OwnerReferenceBuilder()\n+                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n+                    .withKind(\"Kafka\")\n+                    .withName(NAME)\n+                    .withUid(\"random-1234\")\n+                    .withBlockOwnerDeletion(false)\n+                    .withController(false)\n+                    .build();\n+\n+\n+        Kafka kafka = new KafkaBuilder()\n+                .withNewMetadata()\n+                    .withName(NAME)\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withNewKafka()\n+                        .withReplicas(3)\n+                        .withNewEphemeralStorage()\n+                        .endEphemeralStorage()\n+                        .withNewTemplate()\n+                            .withNewClusterCaCert()\n+                                .withNewMetadata()\n+                                    .withOwnerReferences(ownerReference)\n+                                .endMetadata()\n+                            .endClusterCaCert()\n+                        .endTemplate()", "originalCommit": "5eef42a2152a89e5af3ce94503433915850598bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\nindex 8f98607e48..49bc381ece 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperatorNonParametrizedTest.java\n\n@@ -149,21 +152,19 @@ public class KafkaAssemblyOperatorNonParametrizedTest {\n                 })));\n     }\n \n+    @Test\n     public void testCASecretsWithOwnerReference(VertxTestContext context) {\n         OwnerReference ownerReference = new OwnerReferenceBuilder()\n-                    .withApiVersion(\"kafka.strimzi.io/v1beta1\")\n-                    .withKind(\"Kafka\")\n-                    .withName(NAME)\n-                    .withUid(\"random-1234\")\n-                    .withBlockOwnerDeletion(false)\n-                    .withController(false)\n-                    .build();\n-\n+                        .withKind(\"Kafka\")\n+                        .withName(NAME)\n+                        .withBlockOwnerDeletion(false)\n+                        .withController(false)\n+                        .build();\n \n         Kafka kafka = new KafkaBuilder()\n                 .withNewMetadata()\n-                    .withName(NAME)\n-                    .withNamespace(NAMESPACE)\n+                        .withName(NAME)\n+                        .withNamespace(NAMESPACE)\n                 .endMetadata()\n                 .withNewSpec()\n                     .withNewKafka()\n"}}, {"oid": "c37a7c7aedc8143812c841f87f5d13ab883c579c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c37a7c7aedc8143812c841f87f5d13ab883c579c", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-11-07T12:00:58Z", "type": "forcePushed"}, {"oid": "977807dd1999642cf17a079e7008af6db20d4424", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/977807dd1999642cf17a079e7008af6db20d4424", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-11-07T12:06:30Z", "type": "commit"}, {"oid": "977807dd1999642cf17a079e7008af6db20d4424", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/977807dd1999642cf17a079e7008af6db20d4424", "message": "Fix bugs and improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-11-07T12:06:30Z", "type": "forcePushed"}, {"oid": "942c343daec571ade0387ca3d65e2215b3016bba", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/942c343daec571ade0387ca3d65e2215b3016bba", "message": "Improve unit test\n\nSigned-off-by: Daniel Gonzalez <dgdelahera@gmail.com>", "committedDate": "2020-11-07T12:16:02Z", "type": "commit"}, {"oid": "749667b307cb9fc36c8e7c4386dd928426c28723", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/749667b307cb9fc36c8e7c4386dd928426c28723", "message": "Fix tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-11-07T23:26:57Z", "type": "commit"}, {"oid": "4579d6207d43190e758641728ae87e1046d9dd30", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4579d6207d43190e758641728ae87e1046d9dd30", "message": "Update all CRDs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-11-08T14:02:35Z", "type": "commit"}]}