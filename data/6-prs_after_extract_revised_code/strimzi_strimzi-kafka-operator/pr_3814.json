{"pr_number": 3814, "pr_title": "Recreate watcher when closed with an exception", "pr_createdAt": "2020-10-15T10:01:17Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814", "timeline": [{"oid": "d729aa1a334c3b59868894ab9bf79333b76916e4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d729aa1a334c3b59868894ab9bf79333b76916e4", "message": "Recreate watcher when closed with an exception\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-15T09:26:25Z", "type": "commit"}, {"oid": "1acacc9b8e3aa30d2cb13aaaf2486fe6ea19e873", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1acacc9b8e3aa30d2cb13aaaf2486fe6ea19e873", "message": "spotbugs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-15T11:42:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNDMxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814#discussion_r505514316", "bodyText": "The thread you pass here is started a couple of line below. This means that the call to start in onClose(KubernetesClientException) would throw IllegalThreadStateException. Which raises several points:\n\nWe need a test which covers this properly (the existing tests didn't detect the IllegalThreadStateException).\nIt's not clear to me now why we need the resourceThread. I think the watcher we pass to fabric will be invoked on some thread of fabric8's. Maybe we don't need it at all.\nIf it turned out that we really did need it... I assume resourceThread gets stopped when the Session is shutdown/closed. That pattern doesn't work if there are other threads which only the watcher know about. And I say threads plural because it need to cope with the watcher being closed multiple times, so having a single thread (again, if it's really needed) is not going to work.", "author": "tombentley", "createdAt": "2020-10-15T12:50:22Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/Session.java", "diffHunk": "@@ -206,6 +206,8 @@ public void start(Promise<Void> start) {\n                     }\n \n                 }, \"resource-watcher\");\n+                watcher = new K8sTopicWatcher(topicOperator, initReconcilePromise.future(), resourceThread);", "originalCommit": "1acacc9b8e3aa30d2cb13aaaf2486fe6ea19e873", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd76c16726fb0d9f7aea7fd79d4bb3eb9c16e71b", "chunk": "diff --git a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\nindex 09f5d0f2eb..9384ae3335 100644\n--- a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n+++ b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n\n@@ -188,28 +189,11 @@ public class Session extends AbstractVerticle {\n                 LOGGER.debug(\"Using TopicsWatcher {}\", topicsWatcher);\n                 topicsWatcher.start(zk);\n \n-                Promise<Void> promise = Promise.promise();\n                 Promise<Void> initReconcilePromise = Promise.promise();\n-                Thread resourceThread = new Thread(() -> {\n-                    try {\n-                        LOGGER.debug(\"Watching KafkaTopics matching {}\", labels.labels());\n-\n-                        Session.this.topicWatch = kubeClient.customResources(Crds.kafkaTopic(), KafkaTopic.class, KafkaTopicList.class, DoneableKafkaTopic.class)\n-                                .inNamespace(namespace).withLabels(labels.labels()).watch(watcher);\n-                        LOGGER.debug(\"Watching setup\");\n \n-                        // start the HTTP server for healthchecks\n-                        healthServer = this.startHealthServer();\n-                        promise.complete();\n-                    } catch (Throwable t) {\n-                        promise.fail(t);\n-                    }\n-\n-                }, \"resource-watcher\");\n-                watcher = new K8sTopicWatcher(topicOperator, initReconcilePromise.future(), resourceThread);\n-\n-                LOGGER.debug(\"Starting {}\", resourceThread);\n-                resourceThread.start();\n+                watcher = new K8sTopicWatcher(topicOperator, initReconcilePromise.future(), () -> startWatcher(null));\n+                LOGGER.debug(\"Starting watcher\");\n+                startWatcher(start);\n \n                 final Long interval = config.get(Config.FULL_RECONCILIATION_INTERVAL_MS);\n                 Handler<Long> periodic = new Handler<Long>() {\n"}}, {"oid": "fd76c16726fb0d9f7aea7fd79d4bb3eb9c16e71b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fd76c16726fb0d9f7aea7fd79d4bb3eb9c16e71b", "message": "changes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-19T06:55:59Z", "type": "forcePushed"}, {"oid": "92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "message": "changes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-19T06:56:39Z", "type": "commit"}, {"oid": "92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "message": "changes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-19T06:56:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDY1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814#discussion_r507540656", "bodyText": "You can combine these three into one. Also, is it really correct to only re-establish the watch on GONE, or should we do it whenever the exception is not null? IIRC that's what we do in CO and we should be consistent unless there's a good reason why not.", "author": "tombentley", "createdAt": "2020-10-19T07:50:22Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java", "diffHunk": "@@ -67,7 +72,16 @@ public void eventReceived(Action action, KafkaTopic kafkaTopic) {\n     }\n \n     @Override\n-    public void onClose(KubernetesClientException e) {\n+    public void onClose(KubernetesClientException exception) {\n         LOGGER.debug(\"Closing {}\", this);\n+        Optional.ofNullable(exception)\n+                .map(e -> {\n+                    LOGGER.info(\"Exception received during watch\", e);\n+                    return exception;\n+                })\n+                .map(KubernetesClientException::getStatus)\n+                .map(Status::getCode)", "originalCommit": "92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4145756d01c45954da5a6959c1333380193dcf", "chunk": "diff --git a/topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java b/topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java\nindex e7945937ae..8acfb351f9 100644\n--- a/topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java\n+++ b/topic-operator/src/main/java/io/strimzi/operator/topic/K8sTopicWatcher.java\n\n@@ -74,14 +71,9 @@ class K8sTopicWatcher implements Watcher<KafkaTopic> {\n     @Override\n     public void onClose(KubernetesClientException exception) {\n         LOGGER.debug(\"Closing {}\", this);\n-        Optional.ofNullable(exception)\n-                .map(e -> {\n-                    LOGGER.info(\"Exception received during watch\", e);\n-                    return exception;\n-                })\n-                .map(KubernetesClientException::getStatus)\n-                .map(Status::getCode)\n-                .filter(c -> c.equals(HttpURLConnection.HTTP_GONE))\n-                .ifPresent(c -> onHttpGoneTask.run());\n+        if (exception != null) {\n+            LOGGER.debug(\"Restarting  topic watcher due to \", exception);\n+            onHttpGoneTask.run();\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MTM3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814#discussion_r507541370", "bodyText": "We only want to start the health server the first time this is called, not when it's being called to recreate the watch.", "author": "tombentley", "createdAt": "2020-10-19T07:51:31Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/Session.java", "diffHunk": "@@ -229,11 +215,29 @@ public void handle(Long oldTimerId) {\n                     }\n                 };\n                 periodic.handle(null);\n-                promise.future().onComplete(start);\n                 LOGGER.info(\"Started\");\n             });\n     }\n \n+    void startWatcher(Promise<Void> start) {\n+        Promise<Void> promise = Promise.promise();\n+        try {\n+            LOGGER.debug(\"Watching KafkaTopics matching {}\", config.get(Config.LABELS).labels());\n+\n+            Session.this.topicWatch = kubeClient.customResources(CustomResourceDefinitionContext.fromCrd(Crds.kafkaTopic()), KafkaTopic.class, KafkaTopicList.class, DoneableKafkaTopic.class)\n+                    .inNamespace(config.get(Config.NAMESPACE)).withLabels(config.get(Config.LABELS).labels()).watch(watcher);\n+            LOGGER.debug(\"Watching setup\");\n+            // start the HTTP server for healthchecks\n+            healthServer = this.startHealthServer();", "originalCommit": "92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4145756d01c45954da5a6959c1333380193dcf", "chunk": "diff --git a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\nindex b7e76488ec..d7c5c9fc08 100644\n--- a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n+++ b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n\n@@ -219,7 +219,7 @@ public class Session extends AbstractVerticle {\n             });\n     }\n \n-    void startWatcher(Promise<Void> start) {\n+    Future<Void> startWatcher(boolean firstTime) {\n         Promise<Void> promise = Promise.promise();\n         try {\n             LOGGER.debug(\"Watching KafkaTopics matching {}\", config.get(Config.LABELS).labels());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MjU5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814#discussion_r507542591", "bodyText": "Probably better to have the signature Future<Void> startWatcher(), or maybe Future<Void> startWatcher(boolean firstTime) and complete the caller's start future using onComplete() at the call site.", "author": "tombentley", "createdAt": "2020-10-19T07:53:35Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/Session.java", "diffHunk": "@@ -229,11 +215,29 @@ public void handle(Long oldTimerId) {\n                     }\n                 };\n                 periodic.handle(null);\n-                promise.future().onComplete(start);\n                 LOGGER.info(\"Started\");\n             });\n     }\n \n+    void startWatcher(Promise<Void> start) {", "originalCommit": "92fe69c9dc1b746d671e2d8c650eb35ddf5bea65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f4145756d01c45954da5a6959c1333380193dcf", "chunk": "diff --git a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\nindex b7e76488ec..d7c5c9fc08 100644\n--- a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n+++ b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n\n@@ -219,7 +219,7 @@ public class Session extends AbstractVerticle {\n             });\n     }\n \n-    void startWatcher(Promise<Void> start) {\n+    Future<Void> startWatcher(boolean firstTime) {\n         Promise<Void> promise = Promise.promise();\n         try {\n             LOGGER.debug(\"Watching KafkaTopics matching {}\", config.get(Config.LABELS).labels());\n"}}, {"oid": "3f4145756d01c45954da5a6959c1333380193dcf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f4145756d01c45954da5a6959c1333380193dcf", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-19T11:02:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0MzE4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3814#discussion_r516043185", "bodyText": "There's no need for this method to start the health server. At the call site you currently do:\n startWatcher(true).onComplete(start);\nYou do easily make that\n startWatcher(true).compose(\n    ignored -> {\n      Session.this.healthServer = startHealthServer()\n      return Future.succeededFuture();\n    }).onComplete(start);", "author": "tombentley", "createdAt": "2020-11-02T15:17:55Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/Session.java", "diffHunk": "@@ -229,11 +215,29 @@ public void handle(Long oldTimerId) {\n                     }\n                 };\n                 periodic.handle(null);\n-                promise.future().onComplete(start);\n                 LOGGER.info(\"Started\");\n             });\n     }\n \n+    Future<Void> startWatcher(boolean firstTime) {\n+        Promise<Void> promise = Promise.promise();\n+        try {\n+            LOGGER.debug(\"Watching KafkaTopics matching {}\", config.get(Config.LABELS).labels());\n+\n+            Session.this.topicWatch = kubeClient.customResources(CustomResourceDefinitionContext.fromCrd(Crds.kafkaTopic()), KafkaTopic.class, KafkaTopicList.class, DoneableKafkaTopic.class)\n+                    .inNamespace(config.get(Config.NAMESPACE)).withLabels(config.get(Config.LABELS).labels()).watch(watcher);\n+            LOGGER.debug(\"Watching setup\");\n+            if (firstTime) {\n+                // start the HTTP server for healthchecks\n+                healthServer = this.startHealthServer();", "originalCommit": "3f4145756d01c45954da5a6959c1333380193dcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f336453ec4c745436e00b42576ec12613a4020a3", "chunk": "diff --git a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\nindex d7c5c9fc08..8eb77f9ecf 100644\n--- a/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n+++ b/topic-operator/src/main/java/io/strimzi/operator/topic/Session.java\n\n@@ -219,7 +224,7 @@ public class Session extends AbstractVerticle {\n             });\n     }\n \n-    Future<Void> startWatcher(boolean firstTime) {\n+    Future<Void> startWatcher() {\n         Promise<Void> promise = Promise.promise();\n         try {\n             LOGGER.debug(\"Watching KafkaTopics matching {}\", config.get(Config.LABELS).labels());\n"}}, {"oid": "f336453ec4c745436e00b42576ec12613a4020a3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f336453ec4c745436e00b42576ec12613a4020a3", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-02T15:30:29Z", "type": "commit"}]}