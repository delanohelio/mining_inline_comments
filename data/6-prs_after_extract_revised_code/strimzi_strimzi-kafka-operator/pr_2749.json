{"pr_number": 2749, "pr_title": "[systemtest] Remove duplicated methods, add new one to utils classes", "pr_createdAt": "2020-03-25T17:05:56Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2749", "timeline": [{"oid": "f1c0f196f1af7abc1bcd3c6c377ada475513f26e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1c0f196f1af7abc1bcd3c6c377ada475513f26e", "message": "remove utils methods and duplicated methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-25T17:23:54Z", "type": "forcePushed"}, {"oid": "cbedd3bd104b1127894c0ae114ac56aaca581621", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cbedd3bd104b1127894c0ae114ac56aaca581621", "message": "remove duplicated methods from CustomResourceStatusST\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T13:50:29Z", "type": "commit"}, {"oid": "63b7b32340783b48028d1514886764b43b663d55", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/63b7b32340783b48028d1514886764b43b663d55", "message": "move methods from STs\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T13:50:31Z", "type": "commit"}, {"oid": "df4fe0cfb4c5acfaf3642c64d60c3cec0d1e3ae3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/df4fe0cfb4c5acfaf3642c64d60c3cec0d1e3ae3", "message": "create utils file for cluster relevant methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T13:50:31Z", "type": "commit"}, {"oid": "a6fedfb7a80a003ad4cd1c0d7fe57bfda560db9f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6fedfb7a80a003ad4cd1c0d7fe57bfda560db9f", "message": "remove utils methods and duplicated methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T13:51:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NDU1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2749#discussion_r398844555", "bodyText": "As we discussed, move this to the KafkaUtils", "author": "see-quick", "createdAt": "2020-03-26T19:42:44Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kubeUtils.objects;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.api.kafka.model.KafkaResources.zookeeperStatefulSetName;\n+\n+public class ClusterUtils {", "originalCommit": "f1c0f196f1af7abc1bcd3c6c377ada475513f26e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODcwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2749#discussion_r399288708", "bodyText": "Moved :)", "author": "im-konge", "createdAt": "2020-03-27T14:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NDU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbedd3bd104b1127894c0ae114ac56aaca581621", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java\ndeleted file mode 100644\nindex c54195b58..000000000\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.systemtest.utils.kubeUtils.objects;\n-\n-import io.strimzi.api.kafka.model.KafkaResources;\n-import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n-import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n-import io.strimzi.test.TestUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n-import static io.strimzi.api.kafka.model.KafkaResources.zookeeperStatefulSetName;\n-\n-public class ClusterUtils {\n-    private static final Logger LOGGER = LogManager.getLogger(ClusterUtils.class);\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void waitForClusterStability(String clusterName) {\n-        LOGGER.info(\"Waiting for cluster stability\");\n-        Map<String, String>[] zkPods = new Map[1];\n-        Map<String, String>[] kafkaPods = new Map[1];\n-        Map<String, String>[] eoPods = new Map[1];\n-        AtomicInteger count = new AtomicInteger();\n-        zkPods[0] = StatefulSetUtils.ssSnapshot(zookeeperStatefulSetName(clusterName));\n-        kafkaPods[0] = StatefulSetUtils.ssSnapshot(kafkaStatefulSetName(clusterName));\n-        eoPods[0] = DeploymentUtils.depSnapshot(KafkaResources.entityOperatorDeploymentName(clusterName));\n-        TestUtils.waitFor(\"Cluster stable and ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.TIMEOUT_FOR_CLUSTER_STABLE, () -> {\n-            Map<String, String> zkSnapshot = StatefulSetUtils.ssSnapshot(zookeeperStatefulSetName(clusterName));\n-            Map<String, String> kafkaSnaptop = StatefulSetUtils.ssSnapshot(kafkaStatefulSetName(clusterName));\n-            Map<String, String> eoSnapshot = DeploymentUtils.depSnapshot(KafkaResources.entityOperatorDeploymentName(clusterName));\n-            boolean zkSameAsLast = zkSnapshot.equals(zkPods[0]);\n-            boolean kafkaSameAsLast = kafkaSnaptop.equals(kafkaPods[0]);\n-            boolean eoSameAsLast = eoSnapshot.equals(eoPods[0]);\n-            if (!zkSameAsLast) {\n-                LOGGER.info(\"ZK Cluster not stable\");\n-            }\n-            if (!kafkaSameAsLast) {\n-                LOGGER.info(\"Kafka Cluster not stable\");\n-            }\n-            if (!eoSameAsLast) {\n-                LOGGER.info(\"EO not stable\");\n-            }\n-            if (zkSameAsLast\n-                    && kafkaSameAsLast\n-                    && eoSameAsLast) {\n-                int c = count.getAndIncrement();\n-                LOGGER.info(\"All stable for {} polls\", c);\n-                return c > 60;\n-            }\n-            zkPods[0] = zkSnapshot;\n-            kafkaPods[0] = kafkaSnaptop;\n-            count.set(0);\n-            return false;\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NjA3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2749#discussion_r398846070", "bodyText": "You shouldn't use AtomicInteger, you shouldn't use things unless you have a really good reason to use. And the reason for using AtomicInteger might be only allowing concurrent accesses or such as.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    AtomicInteger count = new AtomicInteger();\n          \n          \n            \n                 int[] count = {0};", "author": "see-quick", "createdAt": "2020-03-26T19:45:34Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.kubeUtils.objects;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.api.kafka.model.KafkaResources.zookeeperStatefulSetName;\n+\n+public class ClusterUtils {\n+    private static final Logger LOGGER = LogManager.getLogger(ClusterUtils.class);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static void waitForClusterStability(String clusterName) {\n+        LOGGER.info(\"Waiting for cluster stability\");\n+        Map<String, String>[] zkPods = new Map[1];\n+        Map<String, String>[] kafkaPods = new Map[1];\n+        Map<String, String>[] eoPods = new Map[1];\n+        AtomicInteger count = new AtomicInteger();", "originalCommit": "f1c0f196f1af7abc1bcd3c6c377ada475513f26e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4ODQzMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2749#discussion_r399288433", "bodyText": "This wasn't used by me :D but already changed.", "author": "im-konge", "createdAt": "2020-03-27T14:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NjA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "cbedd3bd104b1127894c0ae114ac56aaca581621", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java\ndeleted file mode 100644\nindex c54195b58..000000000\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/ClusterUtils.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.systemtest.utils.kubeUtils.objects;\n-\n-import io.strimzi.api.kafka.model.KafkaResources;\n-import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n-import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n-import io.strimzi.test.TestUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n-import static io.strimzi.api.kafka.model.KafkaResources.zookeeperStatefulSetName;\n-\n-public class ClusterUtils {\n-    private static final Logger LOGGER = LogManager.getLogger(ClusterUtils.class);\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static void waitForClusterStability(String clusterName) {\n-        LOGGER.info(\"Waiting for cluster stability\");\n-        Map<String, String>[] zkPods = new Map[1];\n-        Map<String, String>[] kafkaPods = new Map[1];\n-        Map<String, String>[] eoPods = new Map[1];\n-        AtomicInteger count = new AtomicInteger();\n-        zkPods[0] = StatefulSetUtils.ssSnapshot(zookeeperStatefulSetName(clusterName));\n-        kafkaPods[0] = StatefulSetUtils.ssSnapshot(kafkaStatefulSetName(clusterName));\n-        eoPods[0] = DeploymentUtils.depSnapshot(KafkaResources.entityOperatorDeploymentName(clusterName));\n-        TestUtils.waitFor(\"Cluster stable and ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.TIMEOUT_FOR_CLUSTER_STABLE, () -> {\n-            Map<String, String> zkSnapshot = StatefulSetUtils.ssSnapshot(zookeeperStatefulSetName(clusterName));\n-            Map<String, String> kafkaSnaptop = StatefulSetUtils.ssSnapshot(kafkaStatefulSetName(clusterName));\n-            Map<String, String> eoSnapshot = DeploymentUtils.depSnapshot(KafkaResources.entityOperatorDeploymentName(clusterName));\n-            boolean zkSameAsLast = zkSnapshot.equals(zkPods[0]);\n-            boolean kafkaSameAsLast = kafkaSnaptop.equals(kafkaPods[0]);\n-            boolean eoSameAsLast = eoSnapshot.equals(eoPods[0]);\n-            if (!zkSameAsLast) {\n-                LOGGER.info(\"ZK Cluster not stable\");\n-            }\n-            if (!kafkaSameAsLast) {\n-                LOGGER.info(\"Kafka Cluster not stable\");\n-            }\n-            if (!eoSameAsLast) {\n-                LOGGER.info(\"EO not stable\");\n-            }\n-            if (zkSameAsLast\n-                    && kafkaSameAsLast\n-                    && eoSameAsLast) {\n-                int c = count.getAndIncrement();\n-                LOGGER.info(\"All stable for {} polls\", c);\n-                return c > 60;\n-            }\n-            zkPods[0] = zkSnapshot;\n-            kafkaPods[0] = kafkaSnaptop;\n-            count.set(0);\n-            return false;\n-        });\n-    }\n-}\n"}}, {"oid": "1c062d8f4250fb6ab9c4f9f6fdd3cf93ca57735d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1c062d8f4250fb6ab9c4f9f6fdd3cf93ca57735d", "message": "fixup! remove utils methods and duplicated methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T14:12:28Z", "type": "commit"}, {"oid": "1c062d8f4250fb6ab9c4f9f6fdd3cf93ca57735d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1c062d8f4250fb6ab9c4f9f6fdd3cf93ca57735d", "message": "fixup! remove utils methods and duplicated methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-03-27T14:12:28Z", "type": "forcePushed"}]}