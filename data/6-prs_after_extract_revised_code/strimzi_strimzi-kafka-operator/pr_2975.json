{"pr_number": 2975, "pr_title": "[systemtest] Edit ClientUtils receive method", "pr_createdAt": "2020-05-07T10:16:40Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975", "timeline": [{"oid": "090941a0e69663396e81a6b6f3fb08865df87fcc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/090941a0e69663396e81a6b6f3fb08865df87fcc", "message": "rewrite method with counter\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-05-07T09:13:53Z", "type": "commit"}, {"oid": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459", "message": "add exception to method signature\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-05-07T10:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5ODE2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421398163", "bodyText": "Use RuntimeException instead of this", "author": "Frawless", "createdAt": "2020-05-07T10:20:18Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {\n+            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+\n+            if (receivedMessages == exceptedMessages) {\n+                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n+                break;\n+            }\n+        }\n+        if (tries == 0) {\n+            throw new Throwable(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));", "originalCommit": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91efa8a7992e07f9ceb151ff9cde71f929a66f98", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\nindex 3a41d60c6..cac7f21b1 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n\n@@ -23,20 +23,19 @@ public class ClientUtils {\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n-        int receivedMessages;\n-        int tries = 3;\n-\n-        for (; tries > 0; tries--) {\n-            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Exception {\n+        for (int tries = 1; ; tries++) {\n+            int receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n \n             if (receivedMessages == exceptedMessages) {\n-                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n+                LOGGER.info(\"Consumer successfully consumed {} messages for the {} time\", exceptedMessages, tries);\n                 break;\n             }\n-        }\n-        if (tries == 0) {\n-            throw new Throwable(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n+\n+            if (tries == 3) {\n+                throw new RuntimeException(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            }\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMDIyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421410228", "bodyText": "why do you reverse the counting? Shouldn't be better iterate from 1 to 3 inclusive and use that value in the logging?", "author": "see-quick", "createdAt": "2020-05-07T10:43:19Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {", "originalCommit": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91efa8a7992e07f9ceb151ff9cde71f929a66f98", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\nindex 3a41d60c6..cac7f21b1 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n\n@@ -23,20 +23,19 @@ public class ClientUtils {\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n-        int receivedMessages;\n-        int tries = 3;\n-\n-        for (; tries > 0; tries--) {\n-            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Exception {\n+        for (int tries = 1; ; tries++) {\n+            int receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n \n             if (receivedMessages == exceptedMessages) {\n-                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n+                LOGGER.info(\"Consumer successfully consumed {} messages for the {} time\", exceptedMessages, tries);\n                 break;\n             }\n-        }\n-        if (tries == 0) {\n-            throw new Throwable(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n+\n+            if (tries == 3) {\n+                throw new RuntimeException(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            }\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxMDU2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2975#discussion_r421410560", "bodyText": "here you can use it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n          \n          \n            \n                            LOGGER.info(\"Consumer successfully consumed {} messages for the {} time\", exceptedMessages, tries);", "author": "see-quick", "createdAt": "2020-05-07T10:43:52Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -24,18 +23,21 @@\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) {\n-        TestUtils.waitFor(\"Kafka \" + kafkaClient.toString() + \" client received messages\", Constants.GLOBAL_CLIENTS_POLL, Constants.GLOBAL_TIMEOUT,\n-            () -> {\n-                int receivedMessages = 0;\n-                try {\n-                    receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n-                    return receivedMessages == exceptedMessages;\n-                } catch (Exception e) {\n-                    LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n-                    return false;\n-                }\n-            });\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n+        int receivedMessages;\n+        int tries = 3;\n+\n+        for (; tries > 0; tries--) {\n+            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+\n+            if (receivedMessages == exceptedMessages) {\n+                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);", "originalCommit": "7f3cac0db5ff0de9e470c3e7c43f54b40bd2d459", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91efa8a7992e07f9ceb151ff9cde71f929a66f98", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\nindex 3a41d60c6..cac7f21b1 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n\n@@ -23,20 +23,19 @@ public class ClientUtils {\n     // ensuring that object can not be created outside of class\n     private ClientUtils() {}\n \n-    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Throwable {\n-        int receivedMessages;\n-        int tries = 3;\n-\n-        for (; tries > 0; tries--) {\n-            receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n+    public static void waitUntilClientReceivedMessagesTls(KafkaClientOperations kafkaClient, int exceptedMessages) throws Exception {\n+        for (int tries = 1; ; tries++) {\n+            int receivedMessages = kafkaClient.receiveMessagesTls(Constants.GLOBAL_CLIENTS_TIMEOUT);\n \n             if (receivedMessages == exceptedMessages) {\n-                LOGGER.info(\"Consumer successfully consumed {} messages\", exceptedMessages);\n+                LOGGER.info(\"Consumer successfully consumed {} messages for the {} time\", exceptedMessages, tries);\n                 break;\n             }\n-        }\n-        if (tries == 0) {\n-            throw new Throwable(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            LOGGER.warn(\"Client not received excepted messages {}, instead received only {}!\", exceptedMessages, receivedMessages);\n+\n+            if (tries == 3) {\n+                throw new RuntimeException(String.format(\"Consumer wasn't able to consume %s messages for 3 times\", exceptedMessages));\n+            }\n         }\n     }\n }\n"}}, {"oid": "91efa8a7992e07f9ceb151ff9cde71f929a66f98", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/91efa8a7992e07f9ceb151ff9cde71f929a66f98", "message": "comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-05-07T13:50:42Z", "type": "commit"}]}