{"pr_number": 2450, "pr_title": "Edit testCustomAndUpdatedValues with checks for missing kafka configuration", "pr_createdAt": "2020-01-24T11:09:07Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450", "timeline": [{"oid": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/064ebd2f076d32eec37664e1f7f9871dd1c8b062", "message": "Edit testCustomAndUpdatedValues with checks for kafka configuration\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-01-24T11:30:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODAwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648007", "bodyText": "Move it to some utils class.", "author": "Frawless", "createdAt": "2020-01-24T14:02:55Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {", "originalCommit": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e005cf64402c0da667b04db37f09b664a3371939", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\nindex 8b606eadd0..1791d239ec 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n\n@@ -379,58 +376,6 @@ public abstract class BaseST implements TestSeparator {\n         }\n     }\n \n-    private Properties stringToProperties(String str) {\n-        Properties result = new Properties();\n-        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n-        for (String line: list) {\n-            String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private Properties configMap2Properties(ConfigMap cm) {\n-        return stringToProperties(cm.getData().get(\"server.config\"));\n-    }\n-\n-    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n-        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n-        List<String> validLines = new ArrayList<>();\n-\n-        for (String line : allLines)    {\n-            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n-                validLines.add(line.replace(\" \", \"\"));\n-            }\n-        }\n-        return validLines;\n-    }\n-\n-    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n-        LOGGER.info(\"Checking kafka configuration\");\n-        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n-\n-        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n-\n-        config.forEach((key, val) -> {\n-            assertThat(properties.keySet().contains(key), is(true));\n-            assertThat(properties.getProperty(key), is(val));\n-        });\n-\n-        for (Pod pod: pods) {\n-            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n-            Properties execProperties = stringToProperties(result.out());\n-\n-            config.forEach((key, val) -> {\n-                assertThat(execProperties.keySet().contains(key), is(true));\n-                assertThat(execProperties.getProperty(key), is(val));\n-            });\n-        }\n-    }\n-\n     /**\n      * Verifies container environment variables passed as a map.\n      * @param podNamePrefix Name of pod where container is located\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODA0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648041", "bodyText": "Move it to some utils class.", "author": "Frawless", "createdAt": "2020-01-24T14:02:59Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {", "originalCommit": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e005cf64402c0da667b04db37f09b664a3371939", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\nindex 8b606eadd0..1791d239ec 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n\n@@ -379,58 +376,6 @@ public abstract class BaseST implements TestSeparator {\n         }\n     }\n \n-    private Properties stringToProperties(String str) {\n-        Properties result = new Properties();\n-        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n-        for (String line: list) {\n-            String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private Properties configMap2Properties(ConfigMap cm) {\n-        return stringToProperties(cm.getData().get(\"server.config\"));\n-    }\n-\n-    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n-        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n-        List<String> validLines = new ArrayList<>();\n-\n-        for (String line : allLines)    {\n-            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n-                validLines.add(line.replace(\" \", \"\"));\n-            }\n-        }\n-        return validLines;\n-    }\n-\n-    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n-        LOGGER.info(\"Checking kafka configuration\");\n-        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n-\n-        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n-\n-        config.forEach((key, val) -> {\n-            assertThat(properties.keySet().contains(key), is(true));\n-            assertThat(properties.getProperty(key), is(val));\n-        });\n-\n-        for (Pod pod: pods) {\n-            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n-            Properties execProperties = stringToProperties(result.out());\n-\n-            config.forEach((key, val) -> {\n-                assertThat(execProperties.keySet().contains(key), is(true));\n-                assertThat(execProperties.getProperty(key), is(val));\n-            });\n-        }\n-    }\n-\n     /**\n      * Verifies container environment variables passed as a map.\n      * @param podNamePrefix Name of pod where container is located\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODEzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370648130", "bodyText": "Move it to some utils class.", "author": "Frawless", "createdAt": "2020-01-24T14:03:11Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {", "originalCommit": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e005cf64402c0da667b04db37f09b664a3371939", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\nindex 8b606eadd0..1791d239ec 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n\n@@ -379,58 +376,6 @@ public abstract class BaseST implements TestSeparator {\n         }\n     }\n \n-    private Properties stringToProperties(String str) {\n-        Properties result = new Properties();\n-        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n-        for (String line: list) {\n-            String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private Properties configMap2Properties(ConfigMap cm) {\n-        return stringToProperties(cm.getData().get(\"server.config\"));\n-    }\n-\n-    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n-        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n-        List<String> validLines = new ArrayList<>();\n-\n-        for (String line : allLines)    {\n-            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n-                validLines.add(line.replace(\" \", \"\"));\n-            }\n-        }\n-        return validLines;\n-    }\n-\n-    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n-        LOGGER.info(\"Checking kafka configuration\");\n-        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n-\n-        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n-\n-        config.forEach((key, val) -> {\n-            assertThat(properties.keySet().contains(key), is(true));\n-            assertThat(properties.getProperty(key), is(val));\n-        });\n-\n-        for (Pod pod: pods) {\n-            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n-            Properties execProperties = stringToProperties(result.out());\n-\n-            config.forEach((key, val) -> {\n-                assertThat(execProperties.keySet().contains(key), is(true));\n-                assertThat(execProperties.getProperty(key), is(val));\n-            });\n-        }\n-    }\n-\n     /**\n      * Verifies container environment variables passed as a map.\n      * @param podNamePrefix Name of pod where container is located\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0OTg3Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370649873", "bodyText": "I think use here classic for is more readable.\nYou can loop over config items and some this: assertThat(properties, hasEntry(configEntry));", "author": "Frawless", "createdAt": "2020-01-24T14:06:38Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n+        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n+        List<String> validLines = new ArrayList<>();\n+\n+        for (String line : allLines)    {\n+            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n+                validLines.add(line.replace(\" \", \"\"));\n+            }\n+        }\n+        return validLines;\n+    }\n+\n+    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n+        LOGGER.info(\"Checking kafka configuration\");\n+        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n+\n+        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n+\n+        config.forEach((key, val) -> {", "originalCommit": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e005cf64402c0da667b04db37f09b664a3371939", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\nindex 8b606eadd0..1791d239ec 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n\n@@ -379,58 +376,6 @@ public abstract class BaseST implements TestSeparator {\n         }\n     }\n \n-    private Properties stringToProperties(String str) {\n-        Properties result = new Properties();\n-        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n-        for (String line: list) {\n-            String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private Properties configMap2Properties(ConfigMap cm) {\n-        return stringToProperties(cm.getData().get(\"server.config\"));\n-    }\n-\n-    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n-        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n-        List<String> validLines = new ArrayList<>();\n-\n-        for (String line : allLines)    {\n-            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n-                validLines.add(line.replace(\" \", \"\"));\n-            }\n-        }\n-        return validLines;\n-    }\n-\n-    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n-        LOGGER.info(\"Checking kafka configuration\");\n-        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n-\n-        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n-\n-        config.forEach((key, val) -> {\n-            assertThat(properties.keySet().contains(key), is(true));\n-            assertThat(properties.getProperty(key), is(val));\n-        });\n-\n-        for (Pod pod: pods) {\n-            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n-            Properties execProperties = stringToProperties(result.out());\n-\n-            config.forEach((key, val) -> {\n-                assertThat(execProperties.keySet().contains(key), is(true));\n-                assertThat(execProperties.getProperty(key), is(val));\n-            });\n-        }\n-    }\n-\n     /**\n      * Verifies container environment variables passed as a map.\n      * @param podNamePrefix Name of pod where container is located\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MDQzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r370650434", "bodyText": "same as above", "author": "Frawless", "createdAt": "2020-01-24T14:07:51Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/BaseST.java", "diffHunk": "@@ -376,6 +379,58 @@ protected void checkComponentConfiguration(String podNamePrefix, String containe\n         }\n     }\n \n+    private Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Properties configMap2Properties(ConfigMap cm) {\n+        return stringToProperties(cm.getData().get(\"server.config\"));\n+    }\n+\n+    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n+        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n+        List<String> validLines = new ArrayList<>();\n+\n+        for (String line : allLines)    {\n+            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n+                validLines.add(line.replace(\" \", \"\"));\n+            }\n+        }\n+        return validLines;\n+    }\n+\n+    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n+        LOGGER.info(\"Checking kafka configuration\");\n+        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n+\n+        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n+\n+        config.forEach((key, val) -> {\n+            assertThat(properties.keySet().contains(key), is(true));\n+            assertThat(properties.getProperty(key), is(val));\n+        });\n+\n+        for (Pod pod: pods) {\n+            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n+            Properties execProperties = stringToProperties(result.out());\n+\n+            config.forEach((key, val) -> {", "originalCommit": "064ebd2f076d32eec37664e1f7f9871dd1c8b062", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e005cf64402c0da667b04db37f09b664a3371939", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\nindex 8b606eadd0..1791d239ec 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/BaseST.java\n\n@@ -379,58 +376,6 @@ public abstract class BaseST implements TestSeparator {\n         }\n     }\n \n-    private Properties stringToProperties(String str) {\n-        Properties result = new Properties();\n-        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n-        for (String line: list) {\n-            String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    private Properties configMap2Properties(ConfigMap cm) {\n-        return stringToProperties(cm.getData().get(\"server.config\"));\n-    }\n-\n-    private List<String> getLinesWithoutCommentsAndEmptyLines(String config) {\n-        List<String> allLines = Arrays.asList(config.split(\"\\\\r?\\\\n\"));\n-        List<String> validLines = new ArrayList<>();\n-\n-        for (String line : allLines)    {\n-            if (!line.replace(\" \", \"\").startsWith(\"#\") && !line.isEmpty())   {\n-                validLines.add(line.replace(\" \", \"\"));\n-            }\n-        }\n-        return validLines;\n-    }\n-\n-    protected void checkKafkaConfiguration(String podNamePrefix, Map<String, Object> config, String clusterName) {\n-        LOGGER.info(\"Checking kafka configuration\");\n-        List<Pod> pods = kubeClient().listPodsByPrefixInName(podNamePrefix);\n-\n-        Properties properties = configMap2Properties(kubeClient().getConfigMap(clusterName + \"-kafka-config\"));\n-\n-        config.forEach((key, val) -> {\n-            assertThat(properties.keySet().contains(key), is(true));\n-            assertThat(properties.getProperty(key), is(val));\n-        });\n-\n-        for (Pod pod: pods) {\n-            ExecResult result = cmdKubeClient().execInPod(pod.getMetadata().getName(), \"/bin/bash\", \"-c\", \"cat /tmp/strimzi.properties\");\n-            Properties execProperties = stringToProperties(result.out());\n-\n-            config.forEach((key, val) -> {\n-                assertThat(execProperties.keySet().contains(key), is(true));\n-                assertThat(execProperties.getProperty(key), is(val));\n-            });\n-        }\n-    }\n-\n     /**\n      * Verifies container environment variables passed as a map.\n      * @param podNamePrefix Name of pod where container is located\n"}}, {"oid": "b5298f17ca828d49b846066b155672d8cea07488", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b5298f17ca828d49b846066b155672d8cea07488", "message": "Edit testCustomAndUpdatedValues with checks for kafka configuration\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-01-28T07:33:10Z", "type": "forcePushed"}, {"oid": "e005cf64402c0da667b04db37f09b664a3371939", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e005cf64402c0da667b04db37f09b664a3371939", "message": "Add checkKafkaConfiguration from BaseST\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-01-28T09:34:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MTA4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r371781086", "bodyText": "what about?\nresult.put(split[0], split.length == 1 ? \"\" : split[1])", "author": "ppatierno", "createdAt": "2020-01-28T12:47:51Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -176,4 +178,34 @@ public static void checkCologForUsedVariable(String varName) {\n     public static String globalVariableJsonPathBuilder(int containerIndex, String envVar) {\n         return \"$.spec.containers[\" + containerIndex + \"].env[?(@.name=='\" + envVar + \"')].value\";\n     }\n+\n+    public static Properties stringToProperties(String str) {\n+        Properties result = new Properties();\n+        List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n+        for (String line: list) {\n+            String[] split = line.split(\"=\");\n+            if (split.length == 1) {\n+                result.put(split[0], \"\");\n+            } else {\n+                result.put(split[0], split[1]);\n+            }", "originalCommit": "e005cf64402c0da667b04db37f09b664a3371939", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDI3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2450#discussion_r372274274", "bodyText": "Yeah I think that's better :) thank you, already pushed and ready for merge", "author": "im-konge", "createdAt": "2020-01-29T09:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4MTA4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "25eba960a4c1273fdb92fad9551a82b40a90c8ed", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\nindex 1fa5212f75..858e6b9edd 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\n\n@@ -184,11 +184,7 @@ public class StUtils {\n         List<String> list = getLinesWithoutCommentsAndEmptyLines(str);\n         for (String line: list) {\n             String[] split = line.split(\"=\");\n-            if (split.length == 1) {\n-                result.put(split[0], \"\");\n-            } else {\n-                result.put(split[0], split[1]);\n-            }\n+            result.put(split[0], split.length == 1 ? \"\" : split[1]);\n         }\n         return result;\n     }\n"}}, {"oid": "25eba960a4c1273fdb92fad9551a82b40a90c8ed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/25eba960a4c1273fdb92fad9551a82b40a90c8ed", "message": "Change if/else to ternary operator in stringToProperties function\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-01-29T09:24:50Z", "type": "forcePushed"}, {"oid": "a4b6de0328bdb384eb4de14d08f6432c65107ab0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a4b6de0328bdb384eb4de14d08f6432c65107ab0", "message": "Add asserts for checking kafka configuration\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:49:15Z", "type": "commit"}, {"oid": "03a7cd1992352953845d0e54ba1c49439643ab69", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/03a7cd1992352953845d0e54ba1c49439643ab69", "message": "Edit testCustomAndUpdatedValues with checks for kafka configuration\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:49:15Z", "type": "commit"}, {"oid": "8e38456e223396882328ed7348172f14ae96f4ea", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8e38456e223396882328ed7348172f14ae96f4ea", "message": "Add utils for resolving kafka configuration\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:49:15Z", "type": "commit"}, {"oid": "6ca26a8a544c2b50c1774ac7a68d0e73835dc85f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6ca26a8a544c2b50c1774ac7a68d0e73835dc85f", "message": "Change forEach to for to be more readable\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:49:15Z", "type": "commit"}, {"oid": "c050592646a51080798f489f4f0b73f6974c3d6b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c050592646a51080798f489f4f0b73f6974c3d6b", "message": "Remove checkKafkaConfiguration from BaseST and move it to KafkaST - single use method\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:49:15Z", "type": "commit"}, {"oid": "29091349a7a82f586934d007b8a68b07ef85e66a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/29091349a7a82f586934d007b8a68b07ef85e66a", "message": "Add checkKafkaConfiguration from BaseST\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:51:38Z", "type": "commit"}, {"oid": "7d1ae2a64735d3ef930057d8eaee9d8019694852", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7d1ae2a64735d3ef930057d8eaee9d8019694852", "message": "Change if/else to ternary operator in stringToProperties function\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:51:38Z", "type": "commit"}, {"oid": "7d1ae2a64735d3ef930057d8eaee9d8019694852", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7d1ae2a64735d3ef930057d8eaee9d8019694852", "message": "Change if/else to ternary operator in stringToProperties function\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-02-03T13:51:38Z", "type": "forcePushed"}]}