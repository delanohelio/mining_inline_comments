{"pr_number": 2789, "pr_title": "[systemtest] Improve logging of CR deployment", "pr_createdAt": "2020-04-06T09:39:16Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789", "timeline": [{"oid": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8cb789d6252ba0de9a0a39c853b3a53b609c9648", "message": "add method for logging current status of CR\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-06T14:15:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NTA3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404345076", "bodyText": "Are you sure it's set everytime?", "author": "Frawless", "createdAt": "2020-04-06T19:47:00Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java", "diffHunk": "@@ -89,9 +91,14 @@ private static KafkaBridge getKafkaBridgeFromYaml(String yamlPath) {\n     }\n \n     private static KafkaBridge waitFor(KafkaBridge kafkaBridge) {\n-        LOGGER.info(\"Waiting for Kafka Bridge {}\", kafkaBridge.getMetadata().getName());\n-        DeploymentUtils.waitForDeploymentReady(kafkaBridge.getMetadata().getName() + \"-bridge\", kafkaBridge.getSpec().getReplicas());\n-        LOGGER.info(\"Kafka Bridge {} is ready\", kafkaBridge.getMetadata().getName());\n+        String namespace = ResourceManager.kubeClient().getNamespace();", "originalCommit": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\nindex b077f1006b..0312f4e72e 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\n\n@@ -91,13 +90,11 @@ public class KafkaBridgeResource {\n     }\n \n     private static KafkaBridge waitFor(KafkaBridge kafkaBridge) {\n-        String namespace = ResourceManager.kubeClient().getNamespace();\n-        String name = kafkaBridge.getMetadata().getName();\n+        String kafkaBridgeCrName = kafkaBridge.getMetadata().getName();\n \n-        LOGGER.info(\"Waiting for Kafka Bridge {}\", name);\n-        DeploymentUtils.waitForDeploymentReady(KafkaBridgeResources.deploymentName(name), kafkaBridge.getSpec().getReplicas(),\n-            () -> StUtils.logCurrentStatus(kafkaBridge, kafkaBridgeClient().inNamespace(namespace).withName(name).get().getStatus()));\n-        LOGGER.info(\"Kafka Bridge {} is ready\", name);\n+        LOGGER.info(\"Waiting for Kafka Bridge {}\", kafkaBridgeCrName);\n+        DeploymentUtils.waitForDeploymentReady(KafkaBridgeResources.deploymentName(kafkaBridgeCrName), kafkaBridge.getSpec().getReplicas());\n+        LOGGER.info(\"Kafka Bridge {} is ready\", kafkaBridgeCrName);\n \n         return kafkaBridge;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzcxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404347719", "bodyText": "Why you don't get there CR via client like you do for other cases?", "author": "Frawless", "createdAt": "2020-04-06T19:51:53Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java", "diffHunk": "@@ -78,9 +78,13 @@ private static KafkaTopic getKafkaTopicFromYaml(String yamlPath) {\n     }\n \n     private static KafkaTopic waitFor(KafkaTopic kafkaTopic) {\n-        LOGGER.info(\"Waiting for Kafka Topic {}\", kafkaTopic.getMetadata().getName());\n-        KafkaTopicUtils.waitForKafkaTopicCreation(kafkaTopic.getMetadata().getName());\n-        LOGGER.info(\"Kafka Topic {} is ready\", kafkaTopic.getMetadata().getName());\n+        String name = kafkaTopic.getMetadata().getName();\n+\n+        LOGGER.info(\"Waiting for Kafka Topic {}\", name);\n+        KafkaTopicUtils.waitForKafkaTopicCreation(name,\n+            () -> LOGGER.info(kafkaTopic));", "originalCommit": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java\nindex 67d69ef02a..785fff0e99 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaTopicResource.java\n\n@@ -78,12 +78,11 @@ public class KafkaTopicResource {\n     }\n \n     private static KafkaTopic waitFor(KafkaTopic kafkaTopic) {\n-        String name = kafkaTopic.getMetadata().getName();\n+        String kafkaTopicCrName = kafkaTopic.getMetadata().getName();\n \n-        LOGGER.info(\"Waiting for Kafka Topic {}\", name);\n-        KafkaTopicUtils.waitForKafkaTopicCreation(name,\n-            () -> LOGGER.info(kafkaTopic));\n-        LOGGER.info(\"Kafka Topic {} is ready\", name);\n+        LOGGER.info(\"Waiting for Kafka Topic {}\", kafkaTopicCrName);\n+        KafkaTopicUtils.waitForKafkaTopicCreation(kafkaTopicCrName);\n+        LOGGER.info(\"Kafka Topic {} is ready\", kafkaTopicCrName);\n \n         return kafkaTopic;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0Nzc5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404347799", "bodyText": "Same as above", "author": "Frawless", "createdAt": "2020-04-06T19:52:04Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java", "diffHunk": "@@ -77,10 +76,13 @@ private static KafkaUser getKafkaUserFromYaml(String yamlPath) {\n     }\n \n     private static KafkaUser waitFor(KafkaUser kafkaUser) {\n-        LOGGER.info(\"Waiting for Kafka User {}\", kafkaUser.getMetadata().getName());\n-        SecretUtils.waitForSecretReady(kafkaUser.getMetadata().getName());\n-        KafkaUserUtils.waitForKafkaUserCreation(kafkaUser.getMetadata().getName());\n-        LOGGER.info(\"Kafka User {} is ready\", kafkaUser.getMetadata().getName());\n+        String name = kafkaUser.getMetadata().getName();\n+\n+        LOGGER.info(\"Waiting for Kafka User {}\", name);\n+        KafkaUserUtils.waitForKafkaUserCreation(name,\n+            () -> LOGGER.info(kafkaUser));", "originalCommit": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java\nindex f2df41ccb6..3b3cce5d7f 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaUserResource.java\n\n@@ -76,12 +76,11 @@ public class KafkaUserResource {\n     }\n \n     private static KafkaUser waitFor(KafkaUser kafkaUser) {\n-        String name = kafkaUser.getMetadata().getName();\n+        String kafkaUserCrName = kafkaUser.getMetadata().getName();\n \n-        LOGGER.info(\"Waiting for Kafka User {}\", name);\n-        KafkaUserUtils.waitForKafkaUserCreation(name,\n-            () -> LOGGER.info(kafkaUser));\n-        LOGGER.info(\"Kafka User {} is ready\", name);\n+        LOGGER.info(\"Waiting for Kafka User {}\", kafkaUserCrName);\n+        KafkaUserUtils.waitForKafkaUserCreation(kafkaUserCrName);\n+        LOGGER.info(\"Kafka User {} is ready\", kafkaUserCrName);\n \n         return kafkaUser;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwODc0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404408742", "bodyText": "You don't need to have this generic I think. Or maybe update it to accept resources which has status? In that case you should change the naming.", "author": "Frawless", "createdAt": "2020-04-06T21:47:40Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java", "diffHunk": "@@ -240,4 +253,20 @@ public static void waitForNoRollingUpdate(String deploymentName, Map<String, Str\n \n         return depConfigSnapshot(name);\n     }\n+\n+    public static <T extends Deployment, L extends DeploymentStatus> void logCurrentDeploymentStatus(T deployment, L status) {", "originalCommit": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\nindex 494ea1c9cb..9b4ba5ca5f 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\n\n@@ -254,13 +248,17 @@ public class DeploymentUtils {\n         return depConfigSnapshot(name);\n     }\n \n-    public static <T extends Deployment, L extends DeploymentStatus> void logCurrentDeploymentStatus(T deployment, L status) {\n+    /**\n+     * Log actual status of deployment with pods\n+     * @param deployment - every DoneableDeployment, that HasMetadata and has status (fabric8 status)\n+     **/\n+    public static <T extends Deployment> void logCurrentDeploymentStatus(T deployment) {\n         String kind = deployment.getKind();\n         String name = deployment.getMetadata().getName();\n \n         List<String> log = new ArrayList<>(asList(\"\\n\", kind, \" status:\\n\", \"\\nConditions:\\n\"));\n \n-        for (DeploymentCondition deploymentCondition : status.getConditions()) {\n+        for (DeploymentCondition deploymentCondition : deployment.getStatus().getConditions()) {\n             log.add(\"\\tType: \" + deploymentCondition.getType() + \"\\n\");\n             log.add(\"\\tMessage: \" + deploymentCondition.getMessage() + \"\\n\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjM1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404586355", "bodyText": "For this and all the other waitFor*() methods, when and why don't you want to have the debug logging on timeout? In other words, what are the callers of waitForConnectorStatus(String name, String state) doing that means they're not needing the debug logging?", "author": "tombentley", "createdAt": "2020-04-07T07:15:44Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java", "diffHunk": "@@ -44,9 +44,14 @@ public static void waitForConnectorStability(String connectorName, String connec\n     }\n \n     public static void waitForConnectorStatus(String name, String state) {\n+        waitForConnectorStatus(name, state, () -> { });\n+    }\n+\n+    public static void waitForConnectorStatus(String name, String state, Runnable onTimeout) {", "originalCommit": "8cb789d6252ba0de9a0a39c853b3a53b609c9648", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NDk1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404644959", "bodyText": "That's really interesting idea, thanks :)", "author": "im-konge", "createdAt": "2020-04-07T08:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java\nindex e3db8013f5..7a68eb3354 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kafkaUtils/KafkaConnectorUtils.java\n\n@@ -39,19 +40,16 @@ public class KafkaConnectorUtils {\n                 } else {\n                     throw new RuntimeException(\"Connector\" + connectorName + \" is not stable!\");\n                 }\n-            }\n+            }, () -> StUtils.logCurrentStatus(KafkaConnectorResource.kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(connectorName).get())\n         );\n     }\n \n     public static void waitForConnectorStatus(String name, String state) {\n-        waitForConnectorStatus(name, state, () -> { });\n-    }\n-\n-    public static void waitForConnectorStatus(String name, String state, Runnable onTimeout) {\n         LOGGER.info(\"Waiting for Kafka Connector {}\", name);\n         TestUtils.waitFor(\" Kafka Connector \" + name + \" is ready\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS,\n-            () -> Crds.kafkaConnectorOperation(kubeClient().getClient()).inNamespace(kubeClient().getNamespace()).withName(name).get().getStatus().getConditions().get(0).getType().equals(state),\n-                onTimeout);\n+            () -> KafkaConnectorResource.kafkaConnectorClient().inNamespace(kubeClient().getNamespace())\n+                    .withName(name).get().getStatus().getConditions().get(0).getType().equals(state),\n+            () -> StUtils.logCurrentStatus(KafkaConnectorResource.kafkaConnectorClient().inNamespace(kubeClient().getNamespace()).withName(name).get()));\n         LOGGER.info(\"Kafka Connector {} is ready\", name);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczMzc0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404733746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String name = deployment.getMetadata().getName();\n          \n          \n            \n                    String deploymentName = deployment.getMetadata().getName();", "author": "see-quick", "createdAt": "2020-04-07T11:23:38Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java", "diffHunk": "@@ -417,9 +417,11 @@ private static ClusterRoleBinding getClusterRoleBindingFromYaml(String yamlPath)\n     }\n \n     private static Deployment waitFor(Deployment deployment) {\n-        LOGGER.info(\"Waiting for deployment {}\", deployment.getMetadata().getName());\n-        DeploymentUtils.waitForDeploymentReady(deployment.getMetadata().getName(), deployment.getSpec().getReplicas());\n-        LOGGER.info(\"Deployment {} is ready\", deployment.getMetadata().getName());\n+        String name = deployment.getMetadata().getName();", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java\nindex 0e6d6ffd61..5c2b3e92f3 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/KubernetesResource.java\n\n@@ -417,11 +417,11 @@ public class KubernetesResource {\n     }\n \n     private static Deployment waitFor(Deployment deployment) {\n-        String name = deployment.getMetadata().getName();\n+        String deploymentName = deployment.getMetadata().getName();\n \n-        LOGGER.info(\"Waiting for deployment {}\", name);\n-        DeploymentUtils.waitForDeploymentReady(name, deployment.getSpec().getReplicas());\n-        LOGGER.info(\"Deployment {} is ready\", name);\n+        LOGGER.info(\"Waiting for deployment {}\", deploymentName);\n+        DeploymentUtils.waitForDeploymentReady(deploymentName, deployment.getSpec().getReplicas());\n+        LOGGER.info(\"Deployment {} is ready\", deploymentName);\n         return deployment;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNDYyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404734622", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String name = kafkaBridge.getMetadata().getName();\n          \n          \n            \n                    String kafkaBridgeCrName = kafkaBridge.getMetadata().getName();\n          \n      \n    \n    \n  \n\nand same applied with the others...", "author": "see-quick", "createdAt": "2020-04-07T11:25:19Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java", "diffHunk": "@@ -89,9 +90,12 @@ private static KafkaBridge getKafkaBridgeFromYaml(String yamlPath) {\n     }\n \n     private static KafkaBridge waitFor(KafkaBridge kafkaBridge) {\n-        LOGGER.info(\"Waiting for Kafka Bridge {}\", kafkaBridge.getMetadata().getName());\n-        DeploymentUtils.waitForDeploymentReady(kafkaBridge.getMetadata().getName() + \"-bridge\", kafkaBridge.getSpec().getReplicas());\n-        LOGGER.info(\"Kafka Bridge {} is ready\", kafkaBridge.getMetadata().getName());\n+        String name = kafkaBridge.getMetadata().getName();", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\nindex 53e5360845..0312f4e72e 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaBridgeResource.java\n\n@@ -90,11 +90,11 @@ public class KafkaBridgeResource {\n     }\n \n     private static KafkaBridge waitFor(KafkaBridge kafkaBridge) {\n-        String name = kafkaBridge.getMetadata().getName();\n+        String kafkaBridgeCrName = kafkaBridge.getMetadata().getName();\n \n-        LOGGER.info(\"Waiting for Kafka Bridge {}\", name);\n-        DeploymentUtils.waitForDeploymentReady(KafkaBridgeResources.deploymentName(name), kafkaBridge.getSpec().getReplicas());\n-        LOGGER.info(\"Kafka Bridge {} is ready\", name);\n+        LOGGER.info(\"Waiting for Kafka Bridge {}\", kafkaBridgeCrName);\n+        DeploymentUtils.waitForDeploymentReady(KafkaBridgeResources.deploymentName(kafkaBridgeCrName), kafkaBridge.getSpec().getReplicas());\n+        LOGGER.info(\"Kafka Bridge {} is ready\", kafkaBridgeCrName);\n \n         return kafkaBridge;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNjI1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404736256", "bodyText": "nice use of generics :) but please make sure when you  defining it, create some doc, where you explain, which set of types can be contains T type.", "author": "see-quick", "createdAt": "2020-04-07T11:28:12Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java", "diffHunk": "@@ -229,4 +234,20 @@ public static boolean checkLogForJSONFormat(Map<String, String> pods, String con\n         }\n         return isJSON;\n     }\n+\n+    public static <T extends CustomResource & HasStatus> void logCurrentStatus(T customResource) {", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\nindex b89603d308..104077996e 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/StUtils.java\n\n@@ -234,7 +234,10 @@ public class StUtils {\n         }\n         return isJSON;\n     }\n-\n+    /**\n+     * Log actual status of custom resource with pods.\n+     * @param customResource - Kafka, KafkaConnect etc. - every resource that HasMetadata and HasStatus (Strimzi status)\n+     */\n     public static <T extends CustomResource & HasStatus> void logCurrentStatus(T customResource) {\n         String kind = customResource.getKind();\n         String name = customResource.getMetadata().getName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNzU0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404737543", "bodyText": "What else here can be here like Deployment?  Please write some documentation explaining what can be T, it will make more sense for the person who will use it after you :).", "author": "see-quick", "createdAt": "2020-04-07T11:30:32Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java", "diffHunk": "@@ -240,4 +247,20 @@ public static void waitForNoRollingUpdate(String deploymentName, Map<String, Str\n \n         return depConfigSnapshot(name);\n     }\n+\n+    public static <T extends Deployment> void logCurrentDeploymentStatus(T deployment) {", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\nindex 4e2c3286a3..9b4ba5ca5f 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/controllers/DeploymentUtils.java\n\n@@ -248,6 +248,10 @@ public class DeploymentUtils {\n         return depConfigSnapshot(name);\n     }\n \n+    /**\n+     * Log actual status of deployment with pods\n+     * @param deployment - every DoneableDeployment, that HasMetadata and has status (fabric8 status)\n+     **/\n     public static <T extends Deployment> void logCurrentDeploymentStatus(T deployment) {\n         String kind = deployment.getKind();\n         String name = deployment.getMetadata().getName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTA4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404739083", "bodyText": "What does it mean () -> { } ?", "author": "see-quick", "createdAt": "2020-04-07T11:33:28Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -56,6 +57,10 @@ public static String getInitContainerImageName(String podName) {\n     }\n \n     public static void waitForPodsReady(LabelSelector selector, int expectPods, boolean containers) {\n+        waitForPodsReady(selector, expectPods, containers, () -> { });", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0Mzc4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404743786", "bodyText": "This is used in case you don't want to onTimeout code execution - nothing will happen, just empty lambda - empty runnable - if you have any idea how to do it better - I'm open for any ideas. I think this is good if we don't want to display anything in tests after timeout exception is thrown.", "author": "im-konge", "createdAt": "2020-04-07T11:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6ea0156f11dc9de7891e5f9e3bd22c3db4bc62dc", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\nindex 80f83d4985..10f4b24a55 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\n\n@@ -57,10 +56,6 @@ public class PodUtils {\n     }\n \n     public static void waitForPodsReady(LabelSelector selector, int expectPods, boolean containers) {\n-        waitForPodsReady(selector, expectPods, containers, () -> { });\n-    }\n-\n-    public static void waitForPodsReady(LabelSelector selector, int expectPods, boolean containers, Runnable onTimeout) {\n         AtomicInteger count = new AtomicInteger();\n         TestUtils.waitFor(\"All pods matching \" + selector + \"to be ready\", Constants.POLL_INTERVAL_FOR_RESOURCE_READINESS, Constants.TIMEOUT_FOR_RESOURCE_READINESS, () -> {\n             List<Pod> pods = kubeClient().listPods(selector);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTU1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2789#discussion_r404739553", "bodyText": "Again some documentation will be supportive.. )", "author": "see-quick", "createdAt": "2020-04-07T11:34:21Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -248,4 +253,20 @@ public static void waitUntilPodsStability(List<Pod> pods) {\n                 return false;\n             });\n     }\n+\n+    public static void logCurrentPodStatus(String kind, String name, List<String> log) {", "originalCommit": "45e80e0a9ba10c67b5d89ada7cd805a480b08d6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f5de924bb98734419616d1893b66a26a0197491", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\nindex 80f83d4985..5179e809b9 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java\n\n@@ -254,6 +254,12 @@ public class PodUtils {\n             });\n     }\n \n+    /**\n+     * Log actual pod statuses list by prefix name\n+     * @param kind - custom resource / deployment kind - Kafka, KafkaBridge etc.\n+     * @param name - custom resource / deployment name - used for prefix\n+     * @param log - ArrayList - add statuses, pods and conditions for future display\n+     */\n     public static void logCurrentPodStatus(String kind, String name, List<String> log) {\n         if (!(kind.equals(\"KafkaConnector\"))) {\n             log.add(\"\\nPods with conditions and messages:\\n\\n\");\n"}}, {"oid": "9f5de924bb98734419616d1893b66a26a0197491", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9f5de924bb98734419616d1893b66a26a0197491", "message": "add doc and remake utils methods for avoiding NPE\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-07T13:06:11Z", "type": "forcePushed"}, {"oid": "b5d42ae4732f1d923b7425827b5726f33e392f55", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b5d42ae4732f1d923b7425827b5726f33e392f55", "message": "add doc and remake utils methods for avoiding NPE\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-07T14:49:58Z", "type": "forcePushed"}, {"oid": "6ea0156f11dc9de7891e5f9e3bd22c3db4bc62dc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6ea0156f11dc9de7891e5f9e3bd22c3db4bc62dc", "message": "add to resources waits logging methods\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T11:56:42Z", "type": "commit"}, {"oid": "80cbe04f814e0b215db43e67d0b98a52f25b2d31", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/80cbe04f814e0b215db43e67d0b98a52f25b2d31", "message": "add runnable variable for timeout execution\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T11:56:42Z", "type": "commit"}, {"oid": "6d860146947da9efea42f4d5314b7285c80c07a3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6d860146947da9efea42f4d5314b7285c80c07a3", "message": "add method for logging current status of CR\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T11:56:42Z", "type": "commit"}, {"oid": "b14ca37d6bac78eb1c1a1f9ac88a7f3e7bafb2ed", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b14ca37d6bac78eb1c1a1f9ac88a7f3e7bafb2ed", "message": "fixup! add method for logging current status of CR\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T11:56:42Z", "type": "commit"}, {"oid": "720b4c84c0b6b1e46ce8928b5cfb6a643543ef39", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/720b4c84c0b6b1e46ce8928b5cfb6a643543ef39", "message": "add doc and remake utils methods for avoiding NPE\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T11:56:42Z", "type": "commit"}, {"oid": "ed06d4e69d635a1f783f9c3eb004190a520c7c2c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed06d4e69d635a1f783f9c3eb004190a520c7c2c", "message": "fixup! add doc and remake utils methods for avoiding NPE\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T12:04:03Z", "type": "commit"}, {"oid": "ed06d4e69d635a1f783f9c3eb004190a520c7c2c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ed06d4e69d635a1f783f9c3eb004190a520c7c2c", "message": "fixup! add doc and remake utils methods for avoiding NPE\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-08T12:04:03Z", "type": "forcePushed"}]}