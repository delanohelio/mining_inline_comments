{"pr_number": 3190, "pr_title": "Refactor KafkaRebalance status condition ", "pr_createdAt": "2020-06-11T16:42:02Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190", "timeline": [{"oid": "360f941c81aaa4495675dffd9e7e84c240a2a476", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/360f941c81aaa4495675dffd9e7e84c240a2a476", "message": "Refactored CC status condition to swap type and status fields\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-11T17:12:15Z", "type": "forcePushed"}, {"oid": "c3cbdef619542e83e11b1258dc74d38d975c582d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c3cbdef619542e83e11b1258dc74d38d975c582d", "message": "Refactored CC status condition to swap type and status fields\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-11T17:14:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyOTcxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190#discussion_r439029710", "bodyText": "can we just do a && adding the other condition in one filter operation instead of having two?", "author": "ppatierno", "createdAt": "2020-06-11T19:48:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java", "diffHunk": "@@ -203,23 +204,23 @@ public void onClose(KubernetesClientException e) {\n     }\n \n     /**\n-     * Searches through the conditions in the supplied status instance and finds those whose type is\n-     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_TYPE}. If there are none it will return null. If there are\n+     * Searches through the conditions in the supplied status instance and finds those whose type matches one of the values defined\n+     * in the {@link KafkaRebalanceAssemblyOperator.State} enum. If there are none it will return null. If there are\n      * more than one it will throw a RuntimeException. If there is only one it will return that Condition.\n      *\n      * @param status The KafkaRebalanceStatus instance whose conditions will be searched.\n-     * @return The Condition instance from the supplied status that has type {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_TYPE}.\n-     *         If none are found then the method will return null.\n-     * @throws RuntimeException If there is more than one Condition instance in the supplied status with the type\n-     *                          {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_TYPE}.\n+     * @return The Condition instance from the supplied status that has a type value matching one of the values of the\n+     *         {@link KafkaRebalanceAssemblyOperator.State} enum. If none are found then the method will return null.\n+     * @throws RuntimeException If there is more than one Condition instance in the supplied status whose type matches one of the\n+     *                          {@link KafkaRebalanceAssemblyOperator.State} enum values.\n      */\n     /* test */ protected Condition rebalanceStateCondition(KafkaRebalanceStatus status) {\n         if (status.getConditions() != null) {\n \n             List<Condition> statusConditions = status.getConditions()\n                     .stream()\n-                    .filter(condition -> condition.getType() != null &&\n-                            condition.getType().equals(KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_TYPE))\n+                    .filter(condition -> condition.getType() != null)\n+                    .filter(condition -> Arrays.stream(State.values()).anyMatch(stateValue -> stateValue.toString().equals(condition.getType())))", "originalCommit": "c3cbdef619542e83e11b1258dc74d38d975c582d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMjQyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190#discussion_r439032425", "bodyText": "you are using this overload ...\nStatusUtils.setStatusConditionAndObservedGeneration(R resource, S status, String type, String conditionStatus, Throwable error)\nwhere conditionStatus is actually always \"True\".\nMaybe it could be useful having another overload without the conditionStatus where it's set to \"True\" implicitly.\nSomething like we already have:\npublic static <R extends CustomResource, S extends Status> void setStatusConditionAndObservedGeneration(R resource, S status, Throwable error) {\n        setStatusConditionAndObservedGeneration(resource, status, error == null ? \"Ready\" : \"NotReady\", \"True\", error);\n    }\nbut with the additional type parameter.", "author": "ppatierno", "createdAt": "2020-06-11T19:54:35Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java", "diffHunk": "@@ -233,30 +234,30 @@ public void onClose(KubernetesClientException e) {\n     }\n \n     /**\n-     * Searches through the Conditions in the supplied status and returns the status of the Condition with type\n-     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_TYPE}.\n+     * Searches through the Conditions in the supplied status and returns the type of the Condition with status\n+     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_STATUS}.\n      *\n      * @param status The status instance whose conditions will be searched.\n      * @return The status of the rebalance condition.\n      */\n-    private String rebalanceStateConditionStatus(KafkaRebalanceStatus status) {\n+    private String rebalanceStateConditionType(KafkaRebalanceStatus status) {\n         Condition rebalanceStateCondition = rebalanceStateCondition(status);\n-        return rebalanceStateCondition != null ? rebalanceStateCondition.getStatus() : null;\n+        return rebalanceStateCondition != null ? rebalanceStateCondition.getType() : null;\n     }\n \n     private Future<KafkaRebalance> updateStatus(KafkaRebalance kafkaRebalance,\n                                                 KafkaRebalanceStatus desiredStatus,\n                                                 Throwable e) {\n         // leaving the current status when the desired one is null\n         if (desiredStatus != null) {\n-            String rebalanceStatusString = rebalanceStateConditionStatus(desiredStatus);\n+            String rebalanceTypeString = rebalanceStateConditionType(desiredStatus);\n \n             if (e != null) {\n                 StatusUtils.setStatusConditionAndObservedGeneration(kafkaRebalance, desiredStatus,\n-                        KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_TYPE, State.NotReady.toString(), e);\n-            } else if (rebalanceStatusString != null) {\n+                        State.NotReady.toString(), KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_STATUS, e);\n+            } else if (rebalanceTypeString != null) {\n                 StatusUtils.setStatusConditionAndObservedGeneration(kafkaRebalance, desiredStatus,\n-                        KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_TYPE, rebalanceStatusString);\n+                        rebalanceTypeString, KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_STATUS);", "originalCommit": "c3cbdef619542e83e11b1258dc74d38d975c582d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd0339845a16eadd552c03e280eaa68ad10b8bf3", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\nindex 7702534b8b..ccd0d33b02 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n\n@@ -234,11 +235,14 @@ public class KafkaRebalanceAssemblyOperator\n     }\n \n     /**\n-     * Searches through the Conditions in the supplied status and returns the type of the Condition with status\n-     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_STATUS}.\n+     * Searches through the conditions in the supplied status instance and finds those whose type matches one of the values defined\n+     * in the {@link KafkaRebalanceAssemblyOperator.State} enum. If there are none it will return null. If there are\n+     * more than one it will throw a RuntimeException. If there is only one it will return that Condition's type string.\n      *\n      * @param status The status instance whose conditions will be searched.\n-     * @return The status of the rebalance condition.\n+     * @return The type of the rebalance status condition.\n+     * @throws RuntimeException If there is more than one Condition instance in the supplied status whose type matches one of the\n+     *                          {@link KafkaRebalanceAssemblyOperator.State} enum values.\n      */\n     private String rebalanceStateConditionType(KafkaRebalanceStatus status) {\n         Condition rebalanceStateCondition = rebalanceStateCondition(status);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNDI3Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190#discussion_r439034273", "bodyText": "I was noticing that adding a condition in this way isn't not calling the .withLastTransitionTime(iso8601Now()) which is called by all the StatusUtils method.\nI was wondering if we should have a buildCondition as we have the buildWarningCondition passing just the type and it will set the status to \"True\" instead of passing again this constant.", "author": "ppatierno", "createdAt": "2020-06-11T19:58:22Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java", "diffHunk": "@@ -525,8 +526,8 @@ private String rebalanceStateConditionStatus(KafkaRebalanceStatus status) {\n                                     p.complete(new KafkaRebalanceStatusBuilder()\n                                             .withSessionId(null)\n                                             .addNewCondition()\n-                                                .withNewStatus(State.Stopped.toString())\n-                                                .withNewType(KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_TYPE)\n+                                                .withNewType(State.Stopped.toString())\n+                                                .withNewStatus(KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_STATUS)", "originalCommit": "c3cbdef619542e83e11b1258dc74d38d975c582d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0b60ca1c6789146c151cffe1a23ae94c22271c1", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\nindex 7702534b8b..47c86b24a8 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n\n@@ -523,12 +539,7 @@ public class KafkaRebalanceAssemblyOperator\n                                 if (rebalanceAnnotation(freshKafkaRebalance) == RebalanceAnnotation.stop) {\n                                     log.debug(\"{}: Stopping current Cruise Control proposal request timer\", reconciliation);\n                                     vertx.cancelTimer(t);\n-                                    p.complete(new KafkaRebalanceStatusBuilder()\n-                                            .withSessionId(null)\n-                                            .addNewCondition()\n-                                                .withNewType(State.Stopped.toString())\n-                                                .withNewStatus(KafkaRebalanceStatus.REBALANCE_STATUS_CONDITION_STATUS)\n-                                            .endCondition().build());\n+                                    p.complete(buildRebalanceStatus(null, State.Stopped));\n                                 } else {\n                                     requestRebalance(reconciliation, host, apiClient, true, rebalanceOptionsBuilder,\n                                             freshKafkaRebalance.getStatus().getSessionId()).onComplete(rebalanceResult -> {\n"}}, {"oid": "e0b60ca1c6789146c151cffe1a23ae94c22271c1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e0b60ca1c6789146c151cffe1a23ae94c22271c1", "message": "Refactored Rebalance Status to use common util method\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-15T15:55:35Z", "type": "forcePushed"}, {"oid": "bd0339845a16eadd552c03e280eaa68ad10b8bf3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bd0339845a16eadd552c03e280eaa68ad10b8bf3", "message": "Refactored Rebalance Status to use common util method\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-15T16:16:30Z", "type": "forcePushed"}, {"oid": "549aa6ca30c387e6561f64391ff58e993ea0ebc4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/549aa6ca30c387e6561f64391ff58e993ea0ebc4", "message": "Refactored Rebalance Status to use common util method\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-15T16:18:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNTAxMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190#discussion_r440625011", "bodyText": "this exception is never raised, isn't it? We just return null, right?", "author": "ppatierno", "createdAt": "2020-06-16T06:55:21Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java", "diffHunk": "@@ -233,30 +235,31 @@ public void onClose(KubernetesClientException e) {\n     }\n \n     /**\n-     * Searches through the Conditions in the supplied status and returns the status of the Condition with type\n-     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_TYPE}.\n+     * Searches through the conditions in the supplied status instance and finds those whose type matches one of the values defined\n+     * in the {@link KafkaRebalanceAssemblyOperator.State} enum. If there are none it will return null. If there are\n+     * more than one it will throw a RuntimeException. If there is only one it will return that Condition's type string.\n      *\n      * @param status The status instance whose conditions will be searched.\n-     * @return The status of the rebalance condition.\n+     * @return The type of the rebalance status condition.\n+     * @throws RuntimeException If there is more than one Condition instance in the supplied status whose type matches one of the", "originalCommit": "549aa6ca30c387e6561f64391ff58e993ea0ebc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4ODAwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3190#discussion_r440688003", "bodyText": "Actually it will as it calls the search function which throws the exception.", "author": "tomncooper", "createdAt": "2020-06-16T08:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "abda71c2a0bfbfbf6e8cdf8beb69a1e5dbd08f79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\nindex ccd0d33b02..7702534b8b 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaRebalanceAssemblyOperator.java\n\n@@ -235,14 +234,11 @@ public class KafkaRebalanceAssemblyOperator\n     }\n \n     /**\n-     * Searches through the conditions in the supplied status instance and finds those whose type matches one of the values defined\n-     * in the {@link KafkaRebalanceAssemblyOperator.State} enum. If there are none it will return null. If there are\n-     * more than one it will throw a RuntimeException. If there is only one it will return that Condition's type string.\n+     * Searches through the Conditions in the supplied status and returns the type of the Condition with status\n+     * {@link KafkaRebalanceStatus#REBALANCE_STATUS_CONDITION_STATUS}.\n      *\n      * @param status The status instance whose conditions will be searched.\n-     * @return The type of the rebalance status condition.\n-     * @throws RuntimeException If there is more than one Condition instance in the supplied status whose type matches one of the\n-     *                          {@link KafkaRebalanceAssemblyOperator.State} enum values.\n+     * @return The status of the rebalance condition.\n      */\n     private String rebalanceStateConditionType(KafkaRebalanceStatus status) {\n         Condition rebalanceStateCondition = rebalanceStateCondition(status);\n"}}, {"oid": "b9b3ad1e43895d9fa2764d9001091529c3e98a29", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b9b3ad1e43895d9fa2764d9001091529c3e98a29", "message": "Fixed system test util classes to use Status Condition type for rebalance tests\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-16T14:23:18Z", "type": "forcePushed"}, {"oid": "abda71c2a0bfbfbf6e8cdf8beb69a1e5dbd08f79", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/abda71c2a0bfbfbf6e8cdf8beb69a1e5dbd08f79", "message": "Refactored CC status condition to swap type and status fields\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-17T08:36:20Z", "type": "commit"}, {"oid": "2d3bb5fddc86d63c6f91cacaaecd0ae1e9b7d1d4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2d3bb5fddc86d63c6f91cacaaecd0ae1e9b7d1d4", "message": "Refactored Rebalance Status to use common util method\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-17T08:36:20Z", "type": "commit"}, {"oid": "c53cc71b1d64fab5c201d3f0707f8836c2d868f5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c53cc71b1d64fab5c201d3f0707f8836c2d868f5", "message": "Fixed system test util classes to use Status Condition type for rebalance tests\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-17T08:50:05Z", "type": "commit"}, {"oid": "c53cc71b1d64fab5c201d3f0707f8836c2d868f5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c53cc71b1d64fab5c201d3f0707f8836c2d868f5", "message": "Fixed system test util classes to use Status Condition type for rebalance tests\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-06-17T08:50:05Z", "type": "forcePushed"}]}