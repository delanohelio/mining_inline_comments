{"pr_number": 3855, "pr_title": "Metrics in cm", "pr_createdAt": "2020-10-22T11:34:00Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855", "timeline": [{"oid": "112962a5c47edd78c5945a961d3fc27425574b3a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/112962a5c47edd78c5945a961d3fc27425574b3a", "message": "weird fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-22T14:11:03Z", "type": "forcePushed"}, {"oid": "d49f981411ddf28408f7c41b108e74c69c8e8194", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d49f981411ddf28408f7c41b108e74c69c8e8194", "message": "reverting tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-26T11:50:07Z", "type": "forcePushed"}, {"oid": "3f2feb8ef467fb2a3b0c6c7ad4b73936c1814b1d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f2feb8ef467fb2a3b0c6c7ad4b73936c1814b1d", "message": "revert indent\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-26T11:54:01Z", "type": "forcePushed"}, {"oid": "de8251101877dbbdea588ac38f6a9a61cf34ec8a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/de8251101877dbbdea588ac38f6a9a61cf34ec8a", "message": "sb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-26T13:17:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyMDM1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r514520359", "bodyText": "I think the test should test the actual metrics. I think you should also consider:\n\nHaving the test for all affected resources\nTest things such as updates to the metrics\nEventually migrations from one set of metrics to another", "author": "scholzj", "createdAt": "2020-10-29T19:44:14Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +391,62 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {", "originalCommit": "de8251101877dbbdea588ac38f6a9a61cf34ec8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex 6aa266eef3..1d7e60a84b 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -436,15 +440,39 @@ public class MetricsST extends AbstractST {\n \n         kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n \n-        Map<String, Object> externalMetrics = new HashMap<>();\n-        externalMetrics.put(\"type\", \"external\");\n-        externalMetrics.put(\"name\", \"external-metrics-cm\");\n+        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config.yml\")\n+                .build();\n+        JmxExporterMetrics jmxExporterMetrics = new JmxExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n         KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n-            k.getSpec().getKafka().setMetrics(externalMetrics);\n+            // JMX metrics have higher priority\n+            k.getSpec().getKafka().setMetricsConfig(jmxExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n         });\n+\n         PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n         actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n         assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig));\n+\n+        // update metrics\n+        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig.replace(\"true\", \"false\")))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"true\", \"false\")));\n     }\n \n     private String getExporterRunScript(String podName) throws InterruptedException, ExecutionException, IOException {\n"}}, {"oid": "4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-04T11:04:53Z", "type": "forcePushed"}, {"oid": "20647ca01e7fb1f5d05a6fd6da8bbda7efba9f9d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20647ca01e7fb1f5d05a6fd6da8bbda7efba9f9d", "message": "tests + mm2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-09T14:18:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5MzU1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r515993550", "bodyText": "long line", "author": "tombentley", "createdAt": "2020-11-02T14:06:21Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,28 +513,63 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n         if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n-            }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n+            data.put(ANCILLARY_CM_KEY_METRICS, parseMetrics(externalMetricsConfigMap));\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n-    protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n+    public Map<String, Object> getMetricsConfig() {\n         return metricsConfig;\n     }\n \n-    protected void setMetricsConfig(Iterable<Map.Entry<String, Object>> metricsConfig) {\n+    public boolean isExternalMetricsConfigured() {\n+        return getMetricsConfig() != null && getMetricsConfig().get(\"type\") != null && getMetricsConfig().get(\"type\").equals(\"external\") && getMetricsConfig().get(\"name\") != null;", "originalCommit": "de8251101877dbbdea588ac38f6a9a61cf34ec8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NjY0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r521186644", "bodyText": "Umm, not sure what do you see at GH, but this method was reverted (it does not exist at all). Could you please try to refresh? That might also apply to test, which has been updated.", "author": "sknot-rh", "createdAt": "2020-11-11T08:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5MzU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4f2a4e06a9500a8b57b9c43b7e6866fba906721a", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 92aeb31d57..231b93eab0 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -520,59 +523,59 @@ public abstract class AbstractModel {\n     public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n         data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n             data.put(ANCILLARY_CM_KEY_METRICS, parseMetrics(externalMetricsConfigMap));\n         }\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n-    public Map<String, Object> getMetricsConfig() {\n-        return metricsConfig;\n-    }\n-\n-    public boolean isExternalMetricsConfigured() {\n-        return getMetricsConfig() != null && getMetricsConfig().get(\"type\") != null && getMetricsConfig().get(\"type\").equals(\"external\") && getMetricsConfig().get(\"name\") != null;\n-    }\n-\n-    public String getExternalMetricsName() {\n-        if (isExternalMetricsConfigured()) {\n-            return getMetricsConfig().get(\"name\").toString();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            if (getMetricsConfig().get(\"type\") != null && getMetricsConfig().get(\"type\").equals(\"external\")) {\n-                // external metrics\n-                if (getMetricsConfig().get(\"name\") != null) {\n-                    if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(ANCILLARY_CM_KEY_METRICS)) {\n-                        return externalCm.getData().get(ANCILLARY_CM_KEY_METRICS);\n-                    } else {\n-                        log.warn(\"ConfigMap {} with external metrics configuration does not exist or doesn't contain the configuration under the {} key. Metrics are empty.\",\n-                                getMetricsConfig().get(\"name\"), ANCILLARY_CM_KEY_METRICS);\n-                        return null;\n-                    }\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxExporterMetrics) {\n+                if (externalCm == null || externalCm.getData().get(((JmxExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey()) == null) {\n+                    log.warn(\"ConfigMap {} does not exist or doesn't contain the configuration under the {} key. Default logging settings are used.\",\n+                            ((JmxExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n+                            ((JmxExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n                 } else {\n-                    log.warn(\"External metrics configured without the name of the external ConfigMap.\");\n+                    return externalCm.getData().get(((JmxExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n                 }\n-            } else {\n-                // inline metrics\n+            }\n+        } else {\n+            if (isMetricsEnabled() && getMetricsConfig() != null) {\n                 HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig().entrySet()) {\n+                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n                     m.put(entry.getKey(), entry.getValue());\n                 }\n                 return new JsonObject(m).toString();\n             }\n         }\n         return null;\n+\n     }\n \n-    protected void setMetricsConfig(Map<String, Object> metricsConfig) {\n+    protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n+        return metricsConfig;\n+    }\n+\n+    protected void setMetricsConfig(Iterable<Map.Entry<String, Object>> metricsConfig) {\n         this.metricsConfig = metricsConfig;\n     }\n \n+    protected void setMetricsConfigInCm(MetricsConfig metricsConfigInCm) {\n+        if (metricsConfigInCm != null) {\n+            this.metricsConfigInCm = metricsConfigInCm;\n+            setMetricsEnabled(true);\n+        }\n+    }\n+\n+    public MetricsConfig getMetricsConfigInCm() {\n+        return metricsConfigInCm;\n+    }\n+\n+    public boolean isMetricsConfigured() {\n+        return this.metricsConfigInCm != null;\n+    }\n+\n     /**\n      * Returns name of config map used for storing metrics and logging configuration.\n      * @return The name of config map used for storing metrics and logging configuration.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzIyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r520753225", "bodyText": "I'm seeing this repeated enough times to think we should have a method: kafkaClienter.isMetricsJmxPrometheusExporter()", "author": "tombentley", "createdAt": "2020-11-10T17:46:52Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {", "originalCommit": "1c221536d9a1abdc1cb0baa79312ee3d6d46a887", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTkxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r521185915", "bodyText": "I left it separated on purpose. Let's say we will support another type of metrics (DifferentMetrics) so the code will look like\n            if (kafkaCluster.isMetricsConfigured()) {\n                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                   doJmxStuff() \n                }\n                if (kafkaCluster.getMetricsConfigInCm() instanceof AnyDifferrentMetrics) {\n                   doDifferentStuff() \n                }\n             }", "author": "sknot-rh", "createdAt": "2020-11-11T08:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2411,40 +2414,45 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n             }\n         }\n \n-        ConfigMap getKafkaAncillaryCm()    {\n-            ConfigMap loggingCm = null;\n-            ConfigMap metricsCm = null;\n-\n-            if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n-                loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n-            }\n+        Future<ConfigMap> getKafkaAncillaryCm()    {\n+            Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n \n             if (kafkaCluster.isMetricsConfigured()) {\n                 if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                    metricsCm = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    log.warn(\"Unknown metrics type {}\", kafkaCluster.getMetricsConfigInCm().getType());\n+                    throw new InvalidResourceException(\"Unknown metrics type \" + kafkaCluster.getMetricsConfigInCm().getType());\n                 }\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n-            KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n+            return metricsCm.compose(metricsCmRes -> {\n+                ConfigMap loggingCm = null;\n+                if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n+                    loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n+                }\n+\n+                ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCmRes, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+                KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n \n-            // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n-            String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n+                // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n+                String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n \n-            this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n-            this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n+                this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n+                this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n \n-            String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n-            this.kafkaLogging = loggingConfiguration;\n-            this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n+                String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+                this.kafkaLogging = loggingConfiguration;\n+                this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n \n-            return brokerCm;\n+                return Future.succeededFuture(brokerCm);\n+            });\n         }\n \n         Future<ReconciliationState> kafkaAncillaryCm() {\n-            return withVoid(configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), getKafkaAncillaryCm()));\n+            return withVoid(getKafkaAncillaryCm().compose(cm -> configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), cm)));\n         }\n \n         Future<ReconciliationState> kafkaBrokersSecret() {\n"}}, {"oid": "08282e1ea747eb70ec242f2f1df5548a8e381491", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/08282e1ea747eb70ec242f2f1df5548a8e381491", "message": "ribejs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-11T12:07:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522866383", "bodyText": "@tombentley Do we need to add to the old fields some markers that they will not be in v1beta2 anymore? I know you worked on some annotations like that for the CRD v1.", "author": "scholzj", "createdAt": "2020-11-13T10:37:29Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -132,6 +133,18 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @Description(\"Metrics configuration.\")\n+    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n+    public MetricsConfig getMetricsConfig() {\n+        return metricsConfig;\n+    }\n+\n+    public void setMetricsConfig(MetricsConfig metricsConfig) {\n+        this.metricsConfig = metricsConfig;\n+    }\n+\n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI5OTYzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533299634", "bodyText": "@sknot-rh Please check with @tombentley about whether this needs to also list the specific versions or not. (here as well as on the other places)", "author": "scholzj", "createdAt": "2020-12-01T10:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ0NDY0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533444643", "bodyText": "@PresentInVersions(\"v1alpha1-b1beta1\") should do it.", "author": "tombentley", "createdAt": "2020-12-01T14:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java\nindex 196136da0c..1f49457349 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java\n\n@@ -144,6 +145,7 @@ public abstract class AbstractKafkaConnectSpec extends Spec {\n     }\n \n     @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @PresentInVersions(\"v1alpha1-v1beta1\")\n     @Deprecated\n     @JsonInclude(JsonInclude.Include.NON_NULL)\n     @Description(\"The Prometheus JMX Exporter configuration. \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzgwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522867802", "bodyText": "You seem to use somewhere getMetricsConfigInCm() (line 526) and the other time just metricsConfigInCm. Any reasons? Maybe you could use the same everywhere?", "author": "scholzj", "createdAt": "2020-11-13T10:40:12Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 16a39975b4..714204d3c5 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -534,34 +540,45 @@ public abstract class AbstractModel {\n     }\n \n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (metricsConfigInCm != null) {\n-            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+        if (getMetricsConfigInCm() != null) {\n+            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                 if (externalCm == null) {\n                     log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n                 } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n                     if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n+                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n+                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n                     } else {\n-                        return data;\n+                        if (data.isEmpty()) {\n+                            return \"{}\";\n+                        }\n+                        try {\n+                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+                            Object yaml = yamlReader.readValue(data, Object.class);\n+                            ObjectMapper jsonWriter = new ObjectMapper();\n+                            return jsonWriter.writeValueAsString(yaml);\n+                        } catch (JsonProcessingException e) {\n+                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n+                        }\n                     }\n                 }\n             } else {\n-                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n+                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n             }\n-        } else {\n-            if (isMetricsEnabled() && getMetricsConfig() != null) {\n-                HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                    m.put(entry.getKey(), entry.getValue());\n-                }\n-                return new JsonObject(m).toString();\n+        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+            HashMap<String, Object> m = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n+                m.put(entry.getKey(), entry.getValue());\n             }\n+            return new JsonObject(m).toString();\n         }\n         return null;\n-\n     }\n \n     protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODM1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868353", "bodyText": "If nothing else, this should add to the warning conditions. But maybe it would be fine to just fail the reconciliation for this?", "author": "scholzj", "createdAt": "2020-11-13T10:41:13Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 16a39975b4..714204d3c5 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -534,34 +540,45 @@ public abstract class AbstractModel {\n     }\n \n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (metricsConfigInCm != null) {\n-            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+        if (getMetricsConfigInCm() != null) {\n+            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                 if (externalCm == null) {\n                     log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n                 } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n                     if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n+                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n+                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n                     } else {\n-                        return data;\n+                        if (data.isEmpty()) {\n+                            return \"{}\";\n+                        }\n+                        try {\n+                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+                            Object yaml = yamlReader.readValue(data, Object.class);\n+                            ObjectMapper jsonWriter = new ObjectMapper();\n+                            return jsonWriter.writeValueAsString(yaml);\n+                        } catch (JsonProcessingException e) {\n+                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n+                        }\n                     }\n                 }\n             } else {\n-                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n+                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n             }\n-        } else {\n-            if (isMetricsEnabled() && getMetricsConfig() != null) {\n-                HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                    m.put(entry.getKey(), entry.getValue());\n-                }\n-                return new JsonObject(m).toString();\n+        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+            HashMap<String, Object> m = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n+                m.put(entry.getKey(), entry.getValue());\n             }\n+            return new JsonObject(m).toString();\n         }\n         return null;\n-\n     }\n \n     protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODQ2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868467", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T10:41:27Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 16a39975b4..714204d3c5 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -534,34 +540,45 @@ public abstract class AbstractModel {\n     }\n \n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (metricsConfigInCm != null) {\n-            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+        if (getMetricsConfigInCm() != null) {\n+            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                 if (externalCm == null) {\n                     log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n                 } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n                     if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n+                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n+                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n                     } else {\n-                        return data;\n+                        if (data.isEmpty()) {\n+                            return \"{}\";\n+                        }\n+                        try {\n+                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+                            Object yaml = yamlReader.readValue(data, Object.class);\n+                            ObjectMapper jsonWriter = new ObjectMapper();\n+                            return jsonWriter.writeValueAsString(yaml);\n+                        } catch (JsonProcessingException e) {\n+                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n+                        }\n                     }\n                 }\n             } else {\n-                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n+                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n             }\n-        } else {\n-            if (isMetricsEnabled() && getMetricsConfig() != null) {\n-                HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                    m.put(entry.getKey(), entry.getValue());\n-                }\n-                return new JsonObject(m).toString();\n+        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+            HashMap<String, Object> m = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n+                m.put(entry.getKey(), entry.getValue());\n             }\n+            return new JsonObject(m).toString();\n         }\n         return null;\n-\n     }\n \n     protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODYyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868622", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T10:41:43Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    } else {\n+                        return data;\n+                    }\n+                }\n+            } else {\n+                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 16a39975b4..714204d3c5 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -534,34 +540,45 @@ public abstract class AbstractModel {\n     }\n \n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (metricsConfigInCm != null) {\n-            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+        if (getMetricsConfigInCm() != null) {\n+            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                 if (externalCm == null) {\n                     log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n                 } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n                     if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n+                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n+                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n                     } else {\n-                        return data;\n+                        if (data.isEmpty()) {\n+                            return \"{}\";\n+                        }\n+                        try {\n+                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+                            Object yaml = yamlReader.readValue(data, Object.class);\n+                            ObjectMapper jsonWriter = new ObjectMapper();\n+                            return jsonWriter.writeValueAsString(yaml);\n+                        } catch (JsonProcessingException e) {\n+                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n+                        }\n                     }\n                 }\n             } else {\n-                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n+                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n             }\n-        } else {\n-            if (isMetricsEnabled() && getMetricsConfig() != null) {\n-                HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                    m.put(entry.getKey(), entry.getValue());\n-                }\n-                return new JsonObject(m).toString();\n+        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+            HashMap<String, Object> m = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n+                m.put(entry.getKey(), entry.getValue());\n             }\n+            return new JsonObject(m).toString();\n         }\n         return null;\n-\n     }\n \n     protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2ODk0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522868944", "bodyText": "Any reason why not just use else if (isMetricsEnabled() && getMetricsConfig() != null)?", "author": "scholzj", "createdAt": "2020-11-13T10:42:25Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -513,23 +516,54 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n-            HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n+            String parseResult = parseMetrics(externalMetricsConfigMap);\n+            if (parseResult != null) {\n+                this.setMetricsEnabled(true);\n+                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n             }\n-            data.put(ANCILLARY_CM_KEY_METRICS, new JsonObject(m).toString());\n         }\n-\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    protected String parseMetrics(ConfigMap externalCm) {\n+        if (metricsConfigInCm != null) {\n+            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+                if (externalCm == null) {\n+                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n+                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    if (data == null) {\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    } else {\n+                        return data;\n+                    }\n+                }\n+            } else {\n+                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+            }\n+        } else {\n+            if (isMetricsEnabled() && getMetricsConfig() != null) {", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 16a39975b4..714204d3c5 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -534,34 +540,45 @@ public abstract class AbstractModel {\n     }\n \n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (metricsConfigInCm != null) {\n-            if (metricsConfigInCm instanceof JmxPrometheusExporterMetrics) {\n+        if (getMetricsConfigInCm() != null) {\n+            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n                 if (externalCm == null) {\n                     log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName());\n+                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n                 } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n                     if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) metricsConfigInCm).getValueFrom().getConfigMapKeyRef().getKey());\n+                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n+                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n+                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n+                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n                     } else {\n-                        return data;\n+                        if (data.isEmpty()) {\n+                            return \"{}\";\n+                        }\n+                        try {\n+                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+                            Object yaml = yamlReader.readValue(data, Object.class);\n+                            ObjectMapper jsonWriter = new ObjectMapper();\n+                            return jsonWriter.writeValueAsString(yaml);\n+                        } catch (JsonProcessingException e) {\n+                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n+                        }\n                     }\n                 }\n             } else {\n-                log.warn(\"Unknown type of metrics {}\", metricsConfigInCm.getClass());\n+                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n+                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n             }\n-        } else {\n-            if (isMetricsEnabled() && getMetricsConfig() != null) {\n-                HashMap<String, Object> m = new HashMap<>();\n-                for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                    m.put(entry.getKey(), entry.getValue());\n-                }\n-                return new JsonObject(m).toString();\n+        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+            HashMap<String, Object> m = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n+                m.put(entry.getKey(), entry.getValue());\n             }\n+            return new JsonObject(m).toString();\n         }\n         return null;\n-\n     }\n \n     protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Mzc0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522893745", "bodyText": "Any reason to use ArrayList for the type and not just List<Future>?", "author": "scholzj", "createdAt": "2020-11-13T11:31:11Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1374,14 +1375,25 @@ protected CompositeFuture adminClientSecrets() {\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        if (zkCluster.getLogging() instanceof  ExternalLogging) {\n-                            return configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName());\n+                        ArrayList<Future> configMaps = new ArrayList<>(2);", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -1375,7 +1375,7 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        ArrayList<Future> configMaps = new ArrayList<>(2);\n+                        List<Future> configMaps = new ArrayList<>(2);\n                         if (zkCluster.getLogging() instanceof ExternalLogging) {\n                             configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName()));\n                         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDUxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522894514", "bodyText": "Please use getAsync().", "author": "scholzj", "createdAt": "2020-11-13T11:32:50Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2411,40 +2414,45 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n             }\n         }\n \n-        ConfigMap getKafkaAncillaryCm()    {\n-            ConfigMap loggingCm = null;\n-            ConfigMap metricsCm = null;\n-\n-            if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n-                loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n-            }\n+        Future<ConfigMap> getKafkaAncillaryCm()    {\n+            Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n \n             if (kafkaCluster.isMetricsConfigured()) {\n                 if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                    metricsCm = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    log.warn(\"Unknown metrics type {}\", kafkaCluster.getMetricsConfigInCm().getType());\n+                    throw new InvalidResourceException(\"Unknown metrics type \" + kafkaCluster.getMetricsConfigInCm().getType());\n                 }\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n-            KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n+            return metricsCm.compose(metricsCmRes -> {\n+                ConfigMap loggingCm = null;\n+                if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n+                    loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n+                }\n+\n+                ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCmRes, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+                KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n \n-            // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n-            String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n+                // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n+                String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n \n-            this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n-            this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n+                this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n+                this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n \n-            String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n-            this.kafkaLogging = loggingConfiguration;\n-            this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n+                String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+                this.kafkaLogging = loggingConfiguration;\n+                this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n \n-            return brokerCm;\n+                return Future.succeededFuture(brokerCm);\n+            });\n         }\n \n         Future<ReconciliationState> kafkaAncillaryCm() {\n-            return withVoid(configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), getKafkaAncillaryCm()));\n+            return withVoid(getKafkaAncillaryCm().compose(cm -> configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), cm)));\n         }\n \n         Future<ReconciliationState> kafkaBrokersSecret() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NTUyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522895520", "bodyText": "Wait ... TO and UO do not have any metrics configurations. So why do we need these changes?", "author": "scholzj", "createdAt": "2020-11-13T11:35:04Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3000,55 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;\n                 if (topicOperator != null && topicOperator.getLogging() instanceof ExternalLogging)  {\n-                    futToConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n+                    futToLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n                 } else {\n-                    futToConfigMap = Future.succeededFuture(null);\n+                    futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futUoConfigMap;\n+                Future<ConfigMap> futToMetricsConfigMap;\n+                if (topicOperator != null && topicOperator.isMetricsConfigured()) {", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -3007,17 +3015,6 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                     futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futToMetricsConfigMap;\n-                if (topicOperator != null && topicOperator.isMetricsConfigured()) {\n-                    if (topicOperator.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                        futToMetricsConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (topicOperator.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n-                    } else {\n-                        return Future.failedFuture(\"Unknown metrics type \" + topicOperator.getMetricsConfigInCm().getType());\n-                    }\n-                } else {\n-                    futToMetricsConfigMap = Future.succeededFuture(null);\n-                }\n-\n                 Future<ConfigMap> futUoLogConfigMap;\n                 if (userOperator != null && userOperator.getLogging() instanceof ExternalLogging)  {\n                     futUoLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NTY4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522895680", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T11:35:26Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3000,55 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;\n                 if (topicOperator != null && topicOperator.getLogging() instanceof ExternalLogging)  {\n-                    futToConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n+                    futToLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n                 } else {\n-                    futToConfigMap = Future.succeededFuture(null);\n+                    futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futUoConfigMap;\n+                Future<ConfigMap> futToMetricsConfigMap;\n+                if (topicOperator != null && topicOperator.isMetricsConfigured()) {\n+                    if (topicOperator.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        futToMetricsConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (topicOperator.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                    } else {\n+                        return Future.failedFuture(\"Unknown metrics type \" + topicOperator.getMetricsConfigInCm().getType());\n+                    }\n+                } else {\n+                    futToMetricsConfigMap = Future.succeededFuture(null);\n+                }\n \n+                Future<ConfigMap> futUoLogConfigMap;\n                 if (userOperator != null && userOperator.getLogging() instanceof ExternalLogging)  {\n-                    futUoConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n+                    futUoLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n+                } else {\n+                    futUoLogConfigMap = Future.succeededFuture(null);\n+                }\n+\n+                Future<ConfigMap> futUoMetricsConfigMap;\n+                if (userOperator != null && userOperator.isMetricsConfigured()) {", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -3007,17 +3015,6 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                     futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futToMetricsConfigMap;\n-                if (topicOperator != null && topicOperator.isMetricsConfigured()) {\n-                    if (topicOperator.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                        futToMetricsConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (topicOperator.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n-                    } else {\n-                        return Future.failedFuture(\"Unknown metrics type \" + topicOperator.getMetricsConfigInCm().getType());\n-                    }\n-                } else {\n-                    futToMetricsConfigMap = Future.succeededFuture(null);\n-                }\n-\n                 Future<ConfigMap> futUoLogConfigMap;\n                 if (userOperator != null && userOperator.getLogging() instanceof ExternalLogging)  {\n                     futUoLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjM0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896349", "bodyText": "Please use getAsync() ... ideally also for the logging CM (I know that that was there already before, sorry).", "author": "scholzj", "createdAt": "2020-11-13T11:36:58Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -3150,10 +3191,21 @@ private boolean isPodUpToDate(StatefulSet sts, Pod pod) {\n         private final Future<ReconciliationState> getCruiseControlDescription() {\n             CruiseControl cruiseControl = CruiseControl.fromCrd(kafkaAssembly, versions);\n             if (cruiseControl != null) {\n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(\n-                        cruiseControl.getLogging() instanceof ExternalLogging ?\n-                                configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n-                                null);\n+                ConfigMap loggingCm = cruiseControl.getLogging() instanceof ExternalLogging ?\n+                        configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n+                        null;\n+\n+                ConfigMap metricsCm = null;\n+                if (cruiseControl.isMetricsConfigured()) {\n+                    if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjUxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r525882513", "bodyText": "I've created #3970 for changing logging. This PR is big enough already.", "author": "sknot-rh", "createdAt": "2020-11-18T08:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -3195,23 +3179,27 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                         configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n                         null;\n \n-                ConfigMap metricsCm = null;\n+                Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n                 if (cruiseControl.isMetricsConfigured()) {\n                     if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                        metricsCm = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n                     } else {\n                         log.warn(\"Unknown metrics type {}\", cruiseControl.getMetricsConfigInCm().getType());\n+                        throw new InvalidResourceException(\"Unknown metrics type \" + cruiseControl.getMetricsConfigInCm().getType());\n                     }\n                 }\n \n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n+                metricsCm.compose(cmRes -> {\n+                    ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(loggingCm, cmRes);\n \n-                Map<String, String> annotations = singletonMap(CruiseControl.ANNO_STRIMZI_IO_LOGGING, logAndMetricsConfigMap.getData().get(ANCILLARY_CM_KEY_LOG_CONFIG));\n+                    Map<String, String> annotations = singletonMap(CruiseControl.ANNO_STRIMZI_IO_LOGGING, logAndMetricsConfigMap.getData().get(ANCILLARY_CM_KEY_LOG_CONFIG));\n \n-                this.cruiseControlMetricsAndLogsConfigMap = logAndMetricsConfigMap;\n-                this.cruiseControl = cruiseControl;\n+                    this.cruiseControlMetricsAndLogsConfigMap = logAndMetricsConfigMap;\n+                    this.cruiseControl = cruiseControl;\n \n-                this.ccDeployment = cruiseControl.generateDeployment(pfa.isOpenshift(), annotations, imagePullPolicy, imagePullSecrets);\n+                    this.ccDeployment = cruiseControl.generateDeployment(pfa.isOpenshift(), annotations, imagePullPolicy, imagePullSecrets);\n+                    return Future.succeededFuture(this);\n+                });\n             }\n             return withVoid(Future.succeededFuture());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NjU1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896557", "bodyText": "Again, this should at least add warning condition or maybe fail the reocnciliation.", "author": "scholzj", "createdAt": "2020-11-13T11:37:24Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -3150,10 +3191,21 @@ private boolean isPodUpToDate(StatefulSet sts, Pod pod) {\n         private final Future<ReconciliationState> getCruiseControlDescription() {\n             CruiseControl cruiseControl = CruiseControl.fromCrd(kafkaAssembly, versions);\n             if (cruiseControl != null) {\n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(\n-                        cruiseControl.getLogging() instanceof ExternalLogging ?\n-                                configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n-                                null);\n+                ConfigMap loggingCm = cruiseControl.getLogging() instanceof ExternalLogging ?\n+                        configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n+                        null;\n+\n+                ConfigMap metricsCm = null;\n+                if (cruiseControl.isMetricsConfigured()) {\n+                    if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                    } else {\n+                        log.warn(\"Unknown metrics type {}\", cruiseControl.getMetricsConfigInCm().getType());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -3195,23 +3179,27 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                         configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) cruiseControl.getLogging()).getName()) :\n                         null;\n \n-                ConfigMap metricsCm = null;\n+                Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n                 if (cruiseControl.isMetricsConfigured()) {\n                     if (cruiseControl.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                        metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                        metricsCm = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) cruiseControl.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n                     } else {\n                         log.warn(\"Unknown metrics type {}\", cruiseControl.getMetricsConfigInCm().getType());\n+                        throw new InvalidResourceException(\"Unknown metrics type \" + cruiseControl.getMetricsConfigInCm().getType());\n                     }\n                 }\n \n-                ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n+                metricsCm.compose(cmRes -> {\n+                    ConfigMap logAndMetricsConfigMap = cruiseControl.generateMetricsAndLogConfigMap(loggingCm, cmRes);\n \n-                Map<String, String> annotations = singletonMap(CruiseControl.ANNO_STRIMZI_IO_LOGGING, logAndMetricsConfigMap.getData().get(ANCILLARY_CM_KEY_LOG_CONFIG));\n+                    Map<String, String> annotations = singletonMap(CruiseControl.ANNO_STRIMZI_IO_LOGGING, logAndMetricsConfigMap.getData().get(ANCILLARY_CM_KEY_LOG_CONFIG));\n \n-                this.cruiseControlMetricsAndLogsConfigMap = logAndMetricsConfigMap;\n-                this.cruiseControl = cruiseControl;\n+                    this.cruiseControlMetricsAndLogsConfigMap = logAndMetricsConfigMap;\n+                    this.cruiseControl = cruiseControl;\n \n-                this.ccDeployment = cruiseControl.generateDeployment(pfa.isOpenshift(), annotations, imagePullPolicy, imagePullSecrets);\n+                    this.ccDeployment = cruiseControl.generateDeployment(pfa.isOpenshift(), annotations, imagePullPolicy, imagePullSecrets);\n+                    return Future.succeededFuture(this);\n+                });\n             }\n             return withVoid(Future.succeededFuture());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Njg2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522896861", "bodyText": "Should we handle the else as in other places you use this?", "author": "scholzj", "createdAt": "2020-11-13T11:38:05Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2401,12 +2413,19 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n \n         ConfigMap getKafkaAncillaryCm()    {\n             ConfigMap loggingCm = null;\n+            ConfigMap metricsCm = null;\n \n             if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n                 loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+            if (kafkaCluster.isMetricsConfigured()) {\n+                if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                }", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2411,40 +2414,45 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n             }\n         }\n \n-        ConfigMap getKafkaAncillaryCm()    {\n-            ConfigMap loggingCm = null;\n-            ConfigMap metricsCm = null;\n-\n-            if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n-                loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n-            }\n+        Future<ConfigMap> getKafkaAncillaryCm()    {\n+            Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n \n             if (kafkaCluster.isMetricsConfigured()) {\n                 if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                    metricsCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                    metricsCm = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (kafkaCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName());\n+                } else {\n+                    log.warn(\"Unknown metrics type {}\", kafkaCluster.getMetricsConfigInCm().getType());\n+                    throw new InvalidResourceException(\"Unknown metrics type \" + kafkaCluster.getMetricsConfigInCm().getType());\n                 }\n             }\n \n-            ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCm, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n-            KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n+            return metricsCm.compose(metricsCmRes -> {\n+                ConfigMap loggingCm = null;\n+                if (kafkaCluster.getLogging() instanceof ExternalLogging) {\n+                    loggingCm = configMapOperations.get(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) kafkaCluster.getLogging()).getName());\n+                }\n+\n+                ConfigMap brokerCm = kafkaCluster.generateAncillaryConfigMap(loggingCm, metricsCmRes, kafkaAdvertisedHostnames, kafkaAdvertisedPorts);\n+                KafkaConfiguration kc = KafkaConfiguration.unvalidated(kafkaCluster.getBrokersConfiguration()); // has to be after generateAncillaryConfigMap() which generates the configuration\n \n-            // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n-            String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n-            brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n+                // if BROKER_ADVERTISED_HOSTNAMES_FILENAME or BROKER_ADVERTISED_PORTS_FILENAME changes, compute a hash and put it into annotation\n+                String brokerConfiguration = brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_HOSTNAMES_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_ADVERTISED_PORTS_FILENAME, \"\");\n+                brokerConfiguration += brokerCm.getData().getOrDefault(KafkaCluster.BROKER_LISTENERS_FILENAME, \"\");\n \n-            this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n-            this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n+                this.kafkaBrokerConfigurationHash = Util.stringHash(brokerConfiguration);\n+                this.kafkaBrokerConfigurationHash += Util.stringHash(kc.unknownConfigsWithValues(kafkaCluster.getKafkaVersion()).toString());\n \n-            String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n-            this.kafkaLogging = loggingConfiguration;\n-            this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n+                String loggingConfiguration = brokerCm.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+                this.kafkaLogging = loggingConfiguration;\n+                this.kafkaLoggingAppendersHash = Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(loggingConfiguration));\n \n-            return brokerCm;\n+                return Future.succeededFuture(brokerCm);\n+            });\n         }\n \n         Future<ReconciliationState> kafkaAncillaryCm() {\n-            return withVoid(configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), getKafkaAncillaryCm()));\n+            return withVoid(getKafkaAncillaryCm().compose(cm -> configMapOperations.reconcile(namespace, kafkaCluster.getAncillaryConfigMapName(), cm)));\n         }\n \n         Future<ReconciliationState> kafkaBrokersSecret() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NzEwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897104", "bodyText": "Should we handle the else as in other places you use this?", "author": "scholzj", "createdAt": "2020-11-13T11:38:43Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -1374,14 +1375,25 @@ protected CompositeFuture adminClientSecrets() {\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        if (zkCluster.getLogging() instanceof  ExternalLogging) {\n-                            return configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName());\n+                        ArrayList<Future> configMaps = new ArrayList<>(2);\n+                        if (zkCluster.getLogging() instanceof ExternalLogging) {\n+                            configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName()));\n                         } else {\n-                            return Future.succeededFuture(null);\n+                            configMaps.add(Future.succeededFuture(null));\n                         }\n-                    }).compose(cm -> {\n-                        ConfigMap logAndMetricsConfigMap = zkCluster.generateConfigurationConfigMap(cm);\n-                        this.zkMetricsAndLogsConfigMap = zkCluster.generateConfigurationConfigMap(logAndMetricsConfigMap);\n+\n+                        if (zkCluster.isMetricsConfigured()) {\n+                            if (zkCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                                configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((JmxPrometheusExporterMetrics) (zkCluster.getMetricsConfigInCm())).getValueFrom().getConfigMapKeyRef().getName()));\n+                            }", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 9f9fee9596..946e4738dd 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -1375,7 +1375,7 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                             zkCluster.getConfiguration().setConfigOption(\"ssl.enabledProtocols\", \"TLSv1.2,TLSv1.1,TLSv1\");\n                         }\n \n-                        ArrayList<Future> configMaps = new ArrayList<>(2);\n+                        List<Future> configMaps = new ArrayList<>(2);\n                         if (zkCluster.getLogging() instanceof ExternalLogging) {\n                             configMaps.add(configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) zkCluster.getLogging()).getName()));\n                         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NzU3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897572", "bodyText": "I didn't saw you changing the Bridge API - which I actually raised as a comment ... so is this really needed?", "author": "scholzj", "createdAt": "2020-11-13T11:39:40Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java", "diffHunk": "@@ -78,9 +79,20 @@ public KafkaBridgeAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pfa\n             return Future.failedFuture(new ReconciliationException(kafkaBridgeStatus, e));\n         }\n \n-        ConfigMap logAndMetricsConfigMap = bridge.generateMetricsAndLogConfigMap(bridge.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = bridge.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) bridge.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (bridge.isMetricsConfigured()) {\n+            if (bridge.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) bridge.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", bridge.getMetricsConfigInCm().getType());\n+            }\n+        }", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\nindex 4582e09e90..42c6c25603 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperator.java\n\n@@ -83,16 +82,7 @@ public class KafkaBridgeAssemblyOperator extends AbstractAssemblyOperator<Kubern\n                 configMapOperations.get(namespace, ((ExternalLogging) bridge.getLogging()).getName()) :\n                 null;\n \n-        ConfigMap metricsCm = null;\n-        if (bridge.isMetricsConfigured()) {\n-            if (bridge.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) bridge.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", bridge.getMetricsConfigInCm().getType());\n-            }\n-        }\n-\n-        ConfigMap logAndMetricsConfigMap = bridge.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n+        ConfigMap logAndMetricsConfigMap = bridge.generateMetricsAndLogConfigMap(loggingCm, null);\n \n         Promise<KafkaBridgeStatus> createOrUpdatePromise = Promise.promise();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Nzc2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897762", "bodyText": "getAsync() please.", "author": "scholzj", "createdAt": "2020-11-13T11:40:05Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -102,9 +103,20 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n         Promise<KafkaConnectStatus> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\nindex f32fed485a..92a640fc32 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n\n@@ -107,22 +106,7 @@ public class KafkaConnectAssemblyOperator extends AbstractConnectOperator<Kubern\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n                 null;\n \n-        ConfigMap metricsCm = null;\n-        if (connect.isMetricsConfigured()) {\n-            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());\n-            }\n-        }\n-\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n-\n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n \n         log.debug(\"{}: Updating Kafka Connect cluster\", reconciliation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5Nzg0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522897841", "bodyText": "Warning condition or failure?", "author": "scholzj", "createdAt": "2020-11-13T11:40:16Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -102,9 +103,20 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n         Promise<KafkaConnectStatus> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\nindex f32fed485a..92a640fc32 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n\n@@ -107,22 +106,7 @@ public class KafkaConnectAssemblyOperator extends AbstractConnectOperator<Kubern\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n                 null;\n \n-        ConfigMap metricsCm = null;\n-        if (connect.isMetricsConfigured()) {\n-            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());\n-            }\n-        }\n-\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n-\n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n \n         log.debug(\"{}: Updating Kafka Connect cluster\", reconciliation);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODA2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898060", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T11:40:34Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -111,9 +112,20 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n         String namespace = reconciliation.namespace();\n \n         connect.generateBuildConfig();\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (connect.isMetricsConfigured()) {\n+            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\nindex f87e5a58dd..53d876ff85 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\n\n@@ -116,22 +115,9 @@ public class KafkaConnectS2IAssemblyOperator extends AbstractConnectOperator<Ope\n         ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n                 null;\n-        ConfigMap metricsCm = null;\n-        if (connect.isMetricsConfigured()) {\n-            if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());\n-            }\n-        }\n-\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];\n \n         boolean connectHasZeroReplicas = connect.getReplicas() == 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODE1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898150", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T11:40:46Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -133,9 +134,19 @@ public KafkaMirrorMaker2AssemblyOperator(Vertx vertx, PlatformFeaturesAvailabili\n         Promise<KafkaMirrorMaker2Status> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = mirrorMaker2Cluster.generateMetricsAndLogConfigMap(mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirrorMaker2Cluster.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (mirrorMaker2Cluster.isMetricsConfigured()) {\n+            if (mirrorMaker2Cluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirrorMaker2Cluster.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", mirrorMaker2Cluster.getMetricsConfigInCm().getType());", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\nindex 16ad018259..4a51c94ec7 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\n\n@@ -137,21 +136,9 @@ public class KafkaMirrorMaker2AssemblyOperator extends AbstractConnectOperator<K\n         ConfigMap loggingCm = mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirrorMaker2Cluster.getLogging()).getName()) :\n                 null;\n-        ConfigMap metricsCm = null;\n-        if (mirrorMaker2Cluster.isMetricsConfigured()) {\n-            if (mirrorMaker2Cluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirrorMaker2Cluster.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", mirrorMaker2Cluster.getMetricsConfigInCm().getType());\n-            }\n-        }\n-\n-        ConfigMap logAndMetricsConfigMap = mirrorMaker2Cluster.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];\n \n         boolean mirrorMaker2HasZeroReplicas = mirrorMaker2Cluster.getReplicas() == 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODI0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898248", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-11-13T11:41:00Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java", "diffHunk": "@@ -80,9 +81,18 @@ public KafkaMirrorMakerAssemblyOperator(Vertx vertx, PlatformFeaturesAvailabilit\n             return Future.failedFuture(new ReconciliationException(kafkaMirrorMakerStatus, e));\n         }\n \n-        ConfigMap logAndMetricsConfigMap = mirror.generateMetricsAndLogConfigMap(mirror.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirror.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirror.getLogging()).getName()) :\n-                null);\n+                null;\n+        ConfigMap metricsCm = null;\n+        if (mirror.isMetricsConfigured()) {\n+            if (mirror.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n+                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirror.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+            } else {\n+                log.warn(\"Unknown metrics type {}\", mirror.getMetricsConfigInCm().getType());\n+            }", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java\nindex 817bed7211..00ba367ee4 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMakerAssemblyOperator.java\n\n@@ -84,18 +85,8 @@ public class KafkaMirrorMakerAssemblyOperator extends AbstractAssemblyOperator<K\n         ConfigMap loggingCm = mirror.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirror.getLogging()).getName()) :\n                 null;\n-        ConfigMap metricsCm = null;\n-        if (mirror.isMetricsConfigured()) {\n-            if (mirror.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCm = configMapOperations.get(namespace, ((JmxPrometheusExporterMetrics) mirror.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-            } else {\n-                log.warn(\"Unknown metrics type {}\", mirror.getMetricsConfigInCm().getType());\n-            }\n-        }\n-        ConfigMap logAndMetricsConfigMap = mirror.generateMetricsAndLogConfigMap(loggingCm, metricsCm);\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.STRIMZI_LOGGING_ANNOTATION, logAndMetricsConfigMap.getData().get(mirror.ANCILLARY_CM_KEY_LOG_CONFIG));\n \n         Promise<KafkaMirrorMakerStatus> createOrUpdatePromise = Promise.promise();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5ODgzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522898831", "bodyText": "Maybe you can rename the metricsCm to something else? It suggests to be config map which it is not.", "author": "scholzj", "createdAt": "2020-11-13T11:42:18Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -179,17 +180,20 @@ public static Kafka createKafka(String namespace, String name, int replicas,\n     public static Kafka createKafka(String namespace, String name, int replicas,\n                                     String image, int healthDelay, int healthTimeout,\n                                     Map<String, Object> metricsCm,\n+                                    MetricsConfig metricsConfig,\n                                     Map<String, Object> kafkaConfigurationJson,\n                                     Map<String, Object> zooConfigurationJson) {\n         return new KafkaBuilder(createKafka(namespace, name, replicas, image, healthDelay, healthTimeout))\n                 .editSpec()\n                     .editKafka()\n                         .withMetrics(metricsCm)", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\nindex 250e90ef9f..66f38c98f0 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java\n\n@@ -179,20 +179,20 @@ public class ResourceUtils {\n \n     public static Kafka createKafka(String namespace, String name, int replicas,\n                                     String image, int healthDelay, int healthTimeout,\n-                                    Map<String, Object> metricsCm,\n+                                    Map<String, Object> metricsMap,\n                                     MetricsConfig metricsConfig,\n                                     Map<String, Object> kafkaConfigurationJson,\n                                     Map<String, Object> zooConfigurationJson) {\n         return new KafkaBuilder(createKafka(namespace, name, replicas, image, healthDelay, healthTimeout))\n                 .editSpec()\n                     .editKafka()\n-                        .withMetrics(metricsCm)\n+                        .withMetrics(metricsMap)\n                         .withConfig(kafkaConfigurationJson)\n                         .withMetricsConfig(metricsConfig)\n                     .endKafka()\n                     .editZookeeper()\n                         .withConfig(zooConfigurationJson)\n-                        .withMetrics(metricsCm)\n+                        .withMetrics(metricsMap)\n                         .withMetricsConfig(metricsConfig)\n                     .endZookeeper()\n                 .endSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkwNDU1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522904555", "bodyText": "I do not think this should be here. This is a class containing tests for AbstractModel. This is not an abstract class where you put some shared methods used elsewhere. You should put this probably into some utils class.", "author": "scholzj", "createdAt": "2020-11-13T11:55:21Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java", "diffHunk": "@@ -214,4 +219,23 @@ public void testDetermineImagePullPolicy()  {\n         assertThat(am.determineImagePullPolicy(null, \"docker.io/repo/image:not-so-latest\"), is(ImagePullPolicy.IFNOTPRESENT.toString()));\n         assertThat(am.determineImagePullPolicy(null, \"docker.io/repo/image:latest-kafka-2.6.0\"), is(ImagePullPolicy.ALWAYS.toString()));\n     }\n+\n+    public static JmxPrometheusExporterMetrics getJmxPrometheusExporterMetrics(String key, String name) {\n+        JmxPrometheusExporterMetrics metricsConfig = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withNewConfigMapKeyRef(key, name, true)\n+                .endValueFrom()\n+                .build();\n+        return metricsConfig;\n+    }\n+\n+    public static ConfigMap getJmxMetricsCm(String data, String metricsCMName) {\n+        ConfigMap metricsCM = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                    .withName(metricsCMName)\n+                .endMetadata()\n+                .withData(singletonMap(AbstractModel.ANCILLARY_CM_KEY_METRICS, data))\n+                .build();\n+        return metricsCM;\n+    }", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java\nindex e9e87c0e66..b46cf7c1ff 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/AbstractModelTest.java\n\n@@ -220,22 +215,4 @@ public class AbstractModelTest {\n         assertThat(am.determineImagePullPolicy(null, \"docker.io/repo/image:latest-kafka-2.6.0\"), is(ImagePullPolicy.ALWAYS.toString()));\n     }\n \n-    public static JmxPrometheusExporterMetrics getJmxPrometheusExporterMetrics(String key, String name) {\n-        JmxPrometheusExporterMetrics metricsConfig = new JmxPrometheusExporterMetricsBuilder()\n-                .withNewValueFrom()\n-                    .withNewConfigMapKeyRef(key, name, true)\n-                .endValueFrom()\n-                .build();\n-        return metricsConfig;\n-    }\n-\n-    public static ConfigMap getJmxMetricsCm(String data, String metricsCMName) {\n-        ConfigMap metricsCM = new ConfigMapBuilder()\n-                .withNewMetadata()\n-                    .withName(metricsCMName)\n-                .endMetadata()\n-                .withData(singletonMap(AbstractModel.ANCILLARY_CM_KEY_METRICS, data))\n-                .build();\n-        return metricsCM;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMTkwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522911909", "bodyText": "So what does this actually test? I'm not entirely sure after reading the test. Maybe it should start with some Javadoc explaining it.", "author": "scholzj", "createdAt": "2020-11-13T12:11:39Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex b9bdeb13d8..ef1ae978d2 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -397,30 +395,47 @@ public class MetricsST extends AbstractST {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        KafkaResource.kafkaWithMetrics(SECOND_CLUSTER, 1, 1).done();\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson, Map.class));\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n+\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson.replace(\"true\", \"false\"), Map.class));\n+        });\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n+    }\n+\n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigYaml in spec.kafka.metricsConfig\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n     @Test\n     void testKafkaMetricsSettings() {\n-        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        String metricsConfigYaml = \"lowercaseOutputName: true\";\n \n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NDA3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522974074", "bodyText": "Wouldn't be better actually check the metrics exported by Kafka instead of just checking the configuration? I think Jakub is proposing the same.", "author": "Frawless", "createdAt": "2020-11-13T14:12:13Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex b9bdeb13d8..ef1ae978d2 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -397,30 +395,47 @@ public class MetricsST extends AbstractST {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        KafkaResource.kafkaWithMetrics(SECOND_CLUSTER, 1, 1).done();\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson, Map.class));\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n+\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson.replace(\"true\", \"false\"), Map.class));\n+        });\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n+    }\n+\n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigYaml in spec.kafka.metricsConfig\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n     @Test\n     void testKafkaMetricsSettings() {\n-        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        String metricsConfigYaml = \"lowercaseOutputName: true\";\n \n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NDc2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522974764", "bodyText": "You should wait there for rolling update, not just for pods readiness.", "author": "Frawless", "createdAt": "2020-11-13T14:13:28Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                true\n+        );\n+\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"\\n\", \" \")));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            // JMX metrics have higher priority\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig));\n+\n+        // update metrics\n+        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig.replace(\"true\", \"false\")))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"true\", \"false\")));\n+    }\n+\n+    @Test\n+    void testMetricsConfigMapErrors() {\n+        // specified ConfigMap does exist - disabled metrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm-error\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        // Changing metrics on -> off triggers RU (envar was changed)\n+        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(SECOND_CLUSTER), 1);", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex b9bdeb13d8..ef1ae978d2 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -397,30 +395,47 @@ public class MetricsST extends AbstractST {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        KafkaResource.kafkaWithMetrics(SECOND_CLUSTER, 1, 1).done();\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson, Map.class));\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n+\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson.replace(\"true\", \"false\"), Map.class));\n+        });\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n+    }\n+\n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigYaml in spec.kafka.metricsConfig\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n     @Test\n     void testKafkaMetricsSettings() {\n-        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        String metricsConfigYaml = \"lowercaseOutputName: true\";\n \n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NTAyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522975022", "bodyText": "Probably same as above?", "author": "Frawless", "createdAt": "2020-11-13T14:13:53Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,157 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    @Test\n+    void testKafkaMetricsSettings() {\n+        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n+                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n+                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                true\n+        );\n+\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"\\n\", \" \")));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                    .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            // JMX metrics have higher priority\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig));\n+\n+        // update metrics\n+        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", expectedMetricsConfig.replace(\"true\", \"false\")))\n+                .withNewMetadata()\n+                    .withName(\"external-metrics-cm\")\n+                    .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(expectedMetricsConfig.replace(\"true\", \"false\")));\n+    }\n+\n+    @Test\n+    void testMetricsConfigMapErrors() {\n+        // specified ConfigMap does exist - disabled metrics\n+        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm-error\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        // Changing metrics on -> off triggers RU (envar was changed)\n+        StatefulSetUtils.waitForAllStatefulSetPodsReady(KafkaResources.kafkaStatefulSetName(SECOND_CLUSTER), 1);\n+\n+        assertThat(StUtils.checkEnvVarInPod(KafkaResources.kafkaPodName(SECOND_CLUSTER, 0), \"KAFKA_METRICS_ENABLED\"), is(\"false\"));\n+\n+        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n+                .withData(Collections.singletonMap(\"metrics-config.yml\", \"\"))\n+                .withNewMetadata()\n+                .withName(\"external-metrics-cm\")\n+                .withNamespace(NAMESPACE)\n+                .endMetadata()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n+\n+        // specified ConfigMap does exist but does not contain specified key - metrics disabled\n+        cmks = new ConfigMapKeySelectorBuilder()\n+                .withName(\"external-metrics-cm\")\n+                .withKey(\"metrics-config-error.yml\")\n+                .build();\n+        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics2 = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withConfigMapKeyRef(cmks)\n+                .endValueFrom()\n+                .build();\n+\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics2);\n+            k.getSpec().getKafka().setMetrics(null);\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        assertThat(StUtils.checkEnvVarInPod(KafkaResources.kafkaPodName(SECOND_CLUSTER, 0), \"KAFKA_METRICS_ENABLED\"), is(\"false\"));", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex b9bdeb13d8..ef1ae978d2 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -397,30 +395,47 @@ public class MetricsST extends AbstractST {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        KafkaResource.kafkaWithMetrics(SECOND_CLUSTER, 1, 1).done();\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson, Map.class));\n+        });\n+\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n+\n+        // update metrics\n+        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n+            k.getSpec().getKafka().setMetricsConfig(null);\n+            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson.replace(\"true\", \"false\"), Map.class));\n+        });\n+        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n+        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n+        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n+    }\n+\n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigYaml in spec.kafka.metricsConfig\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n     @Test\n     void testKafkaMetricsSettings() {\n-        String expectedMetricsConfig = \"{\\\"lowercaseOutputName\\\":true,\\\"rules\\\":[{\\\"labels\\\":{\\\"clientId\\\":\\\"$3\\\",\\\"partition\\\":\\\"$5\\\",\\\"topic\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"broker\\\":\\\"$4:$5\\\",\\\"clientId\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$2\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"cipher\\\":\\\"$5\\\",\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\",\\\"protocol\\\":\\\"$4\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_tls_info\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"clientSoftwareName\\\":\\\"$2\\\",\\\"clientSoftwareVersion\\\":\\\"$3\\\",\\\"listener\\\":\\\"$4\\\",\\\"networkProcessor\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_server_$1_connections_software\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+):\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"listener\\\":\\\"$2\\\",\\\"networkProcessor\\\":\\\"$3\\\"},\\\"name\\\":\\\"kafka_server_$1_$4\\\",\\\"pattern\\\":\\\"kafka.server<type=(.+),\\n\" +\n-                        \"listener=(.+), networkProcessor=(.+)><>(.+)\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>MeanRate\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_percent\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)Percent\\\\\\\\w*, (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*, (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_total\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)PerSec\\\\\\\\w*><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Value\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"$6\\\":\\\"$7\\\",\\\"quantile\\\":\\\"0.$8\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*), (.+)=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"$4\\\":\\\"$5\\\",\\\"quantile\\\":\\\"0.$6\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+), (.+)=(.*)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"},{\\\"name\\\":\\\"kafka_$1_$2_$3_count\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>Count\\\",\\\"type\\\":\\\"COUNTER\\\"},{\\\"labels\\\":{\\\"quantile\\\":\\\"0.$4\\\"},\\\"name\\\":\\\"kafka_$1_$2_$3\\\",\\\"pattern\\\":\\\"kafka.(\\\\\\\\w+)<type=(.+),\\n\" +\n-                        \"name=(.+)><>(\\\\\\\\d+)thPercentile\\\",\\\"type\\\":\\\"GAUGE\\\"}]}\";\n+        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n+        String metricsConfigYaml = \"lowercaseOutputName: true\";\n \n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3NTU1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r522975557", "bodyText": "Please, keep indent as it was before your changes.", "author": "Frawless", "createdAt": "2020-11-13T14:14:39Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java", "diffHunk": "@@ -625,16 +642,33 @@ void testMetricsChange() {\n         zookeeperMetrics.put(\"lowercaseOutputName\", true);\n         zookeeperMetrics.put(\"rules\", Collections.singletonList(zookeeperRule));\n \n+        String metricsCMNameZk = \"zk-metrics-cm\";\n+        ConfigMap metricsCMZk = new ConfigMapBuilder()\n+                .withNewMetadata()\n+                .withName(metricsCMNameZk)\n+                .endMetadata()\n+                .withData(singletonMap(\"metrics-config.yml\", new JsonObject(zookeeperMetrics).toString()))\n+                .build();\n+\n+        JmxPrometheusExporterMetrics zkMetricsConfig = new JmxPrometheusExporterMetricsBuilder()\n+                .withNewValueFrom()\n+                .withNewConfigMapKeyRef(\"metrics-config.yml\", metricsCMNameZk, true)\n+                .endValueFrom()\n+                .build();\n+\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(metricsCMK);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(metricsCMZk);\n+\n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n                 .editSpec()\n-                    .editKafka()\n-                        .withMetrics(kafkaMetrics)\n-                    .endKafka()\n-                    .editOrNewZookeeper()\n-                        .withMetrics(zookeeperMetrics)\n-                    .endZookeeper()\n-                    .withNewKafkaExporter()\n-                    .endKafkaExporter()\n+                .editKafka()\n+                .withMetricsConfig(kafkaMetricsConfig)\n+                .endKafka()\n+                .editOrNewZookeeper()\n+                .withMetricsConfig(zkMetricsConfig)\n+                .endZookeeper()\n+                .withNewKafkaExporter()\n+                .endKafkaExporter()", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java\nindex 0f51c87cc7..fcf0c99999 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/RollingUpdateST.java\n\n@@ -647,7 +652,7 @@ class RollingUpdateST extends AbstractST {\n                 .withNewMetadata()\n                 .withName(metricsCMNameZk)\n                 .endMetadata()\n-                .withData(singletonMap(\"metrics-config.yml\", new JsonObject(zookeeperMetrics).toString()))\n+                .withData(singletonMap(\"metrics-config.yml\", mapper.writeValueAsString(zookeeperMetrics)))\n                 .build();\n \n         JmxPrometheusExporterMetrics zkMetricsConfig = new JmxPrometheusExporterMetricsBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4MTQ5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r526681495", "bodyText": "I would be more explicit and clear with \"Reference to the key in the ConfigMap containing the metrics configuration\"", "author": "ppatierno", "createdAt": "2020-11-19T08:39:12Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import io.fabric8.kubernetes.api.model.ConfigMapKeySelector;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Representation for metrics configuration\n+ */\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+@EqualsAndHashCode\n+public class ExternalConfigurationMetrics implements Serializable, UnknownPropertyPreserving {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private ConfigMapKeySelector configMapKeyRef;\n+    private Map<String, Object> additionalProperties = new HashMap<>(0);\n+\n+    @Description(\"Reference to a key in a ConfigMap.\")", "originalCommit": "cdd5fd9647f947f868f3da459678b8711dcc75cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ee817d82a464cd093f98be5d44729a37a603ff", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java b/api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java\nindex c05c9df864..93b2d41178 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/ExternalConfigurationMetrics.java\n\n@@ -31,7 +31,7 @@ public class ExternalConfigurationMetrics implements Serializable, UnknownProper\n     private ConfigMapKeySelector configMapKeyRef;\n     private Map<String, Object> additionalProperties = new HashMap<>(0);\n \n-    @Description(\"Reference to a key in a ConfigMap.\")\n+    @Description(\"Reference to the key in the ConfigMap containing the metrics configuration.\")\n     @KubeLink(group = \"core\", version = \"v1\", kind = \"configmapkeyselector\")\n     @JsonInclude(value = JsonInclude.Include.NON_NULL)\n     public ConfigMapKeySelector getConfigMapKeyRef() {\n"}}, {"oid": "e6ee817d82a464cd093f98be5d44729a37a603ff", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e6ee817d82a464cd093f98be5d44729a37a603ff", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-19T15:59:04Z", "type": "forcePushed"}, {"oid": "f880b9caae0fe2c8cc8942cc73b8210efb06b0fb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f880b9caae0fe2c8cc8942cc73b8210efb06b0fb", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-20T07:39:58Z", "type": "forcePushed"}, {"oid": "a9732d7cbee91406f4510af893edc6c27c887338", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a9732d7cbee91406f4510af893edc6c27c887338", "message": "fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-11-24T13:50:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMwODQ0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533308447", "bodyText": "I'm not sure I like this ... you create the Future here but in many cases it will not be used.  I think you could better use if ... else ... and return directly.", "author": "scholzj", "createdAt": "2020-12-01T10:41:51Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java", "diffHunk": "@@ -690,4 +693,17 @@ protected JsonObject asJson(KafkaConnectorSpec spec) {\n \n         return updateStatusPromise.future();\n     }\n+\n+    protected Future<ConfigMap> connectMetricsConfigMap(String namespace, KafkaConnectCluster connect) {\n+        Future<ConfigMap> metricsCmFut = Future.succeededFuture(null);", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java\nindex 4d4963316d..d8598c90fb 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/AbstractConnectOperator.java\n\n@@ -695,15 +695,14 @@ public abstract class AbstractConnectOperator<C extends KubernetesClient, T exte\n     }\n \n     protected Future<ConfigMap> connectMetricsConfigMap(String namespace, KafkaConnectCluster connect) {\n-        Future<ConfigMap> metricsCmFut = Future.succeededFuture(null);\n         if (connect.isMetricsConfigured()) {\n             if (connect.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                metricsCmFut = configMapOperations.getAsync(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n+                return configMapOperations.getAsync(namespace, ((JmxPrometheusExporterMetrics) connect.getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n             } else {\n                 log.warn(\"Unknown metrics type {}\", connect.getMetricsConfigInCm().getType());\n                 throw new InvalidResourceException(\"Unknown metrics type \" + connect.getMetricsConfigInCm().getType());\n             }\n         }\n-        return metricsCmFut;\n+        return Future.succeededFuture(null);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTAwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533365001", "bodyText": "Same as above ... create the succeeded future only when it is really needed. This might be also on other places.", "author": "scholzj", "createdAt": "2020-12-01T12:16:57Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2399,33 +2414,45 @@ String getCertificateThumbprint(Secret certSecret, CertAndKeySecretSource custom\n             }\n         }\n \n-        ConfigMap getKafkaAncillaryCm()    {\n-            ConfigMap loggingCm = null;\n+        Future<ConfigMap> getKafkaAncillaryCm()    {\n+            Future<ConfigMap> metricsCm = Future.succeededFuture(null);", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 946e4738dd..6b2dbb211f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2415,7 +2415,7 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n         }\n \n         Future<ConfigMap> getKafkaAncillaryCm()    {\n-            Future<ConfigMap> metricsCm = Future.succeededFuture(null);\n+            final Future<ConfigMap> metricsCm;\n \n             if (kafkaCluster.isMetricsConfigured()) {\n                 if (kafkaCluster.getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTkzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533365930", "bodyText": "See, this is better then above ;-)", "author": "scholzj", "createdAt": "2020-12-01T12:18:41Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2981,33 +3008,31 @@ StatefulSet getKafkaStatefulSet()   {\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToConfigMap;\n-\n+                Future<ConfigMap> futToLogConfigMap;", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ0OTQyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533449422", "bodyText": "But better still if you make the declaration final.", "author": "tombentley", "createdAt": "2020-12-01T14:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NTkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 946e4738dd..6b2dbb211f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -3008,14 +3010,14 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n                 EntityTopicOperator topicOperator = entityOperator.getTopicOperator();\n                 EntityUserOperator userOperator = entityOperator.getUserOperator();\n \n-                Future<ConfigMap> futToLogConfigMap;\n+                final Future<ConfigMap> futToLogConfigMap;\n                 if (topicOperator != null && topicOperator.getLogging() instanceof ExternalLogging)  {\n                     futToLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) topicOperator.getLogging()).getName());\n                 } else {\n                     futToLogConfigMap = Future.succeededFuture(null);\n                 }\n \n-                Future<ConfigMap> futUoLogConfigMap;\n+                final Future<ConfigMap> futUoLogConfigMap;\n                 if (userOperator != null && userOperator.getLogging() instanceof ExternalLogging)  {\n                     futUoLogConfigMap = configMapOperations.getAsync(kafkaAssembly.getMetadata().getNamespace(), ((ExternalLogging) userOperator.getLogging()).getName());\n                 } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODMxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533368315", "bodyText": "Just a nit ... but maybe you can try to fix the alignment to make it more readable.", "author": "scholzj", "createdAt": "2020-12-01T12:22:41Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java", "diffHunk": "@@ -116,9 +122,29 @@\n             .build();\n     private final KafkaConnectCluster kc = KafkaConnectCluster.fromCrd(resource, VERSIONS);\n \n+    @Deprecated\n+    @Test\n+    public void testMetricsConfigMapDeprecatedMetrics() {\n+        KafkaConnect resource = new KafkaConnectBuilder(ResourceUtils.createEmptyKafkaConnect(namespace, cluster))\n+                .withNewSpec()\n+                .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n+                .withMetricsConfig(null)\n+                .withConfig((Map<String, Object>) TestUtils.fromJson(configurationJson, Map.class))\n+                .withImage(image)\n+                .withReplicas(replicas)\n+                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                .withBootstrapServers(bootstrapServers)\n+                .endSpec()", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\nindex 36cf52b844..24805ea35a 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\n\n@@ -127,14 +127,14 @@ public class KafkaConnectClusterTest {\n     public void testMetricsConfigMapDeprecatedMetrics() {\n         KafkaConnect resource = new KafkaConnectBuilder(ResourceUtils.createEmptyKafkaConnect(namespace, cluster))\n                 .withNewSpec()\n-                .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n-                .withMetricsConfig(null)\n-                .withConfig((Map<String, Object>) TestUtils.fromJson(configurationJson, Map.class))\n-                .withImage(image)\n-                .withReplicas(replicas)\n-                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n-                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n-                .withBootstrapServers(bootstrapServers)\n+                    .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n+                    .withMetricsConfig(null)\n+                    .withConfig((Map<String, Object>) TestUtils.fromJson(configurationJson, Map.class))\n+                    .withImage(image)\n+                    .withReplicas(replicas)\n+                    .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                    .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                    .withBootstrapServers(bootstrapServers)\n                 .endSpec()\n                 .build();\n         KafkaConnectCluster kc = KafkaConnectCluster.fromCrd(resource, VERSIONS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2ODQ4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533368489", "bodyText": "Same as above.", "author": "scholzj", "createdAt": "2020-12-01T12:23:04Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java", "diffHunk": "@@ -116,10 +121,37 @@\n             .endSpec()\n             .build();\n     private final KafkaMirrorMaker2Cluster kmm2 = KafkaMirrorMaker2Cluster.fromCrd(resource, VERSIONS);\n+    {\n+        // we were setting metricsEnabled in fromCrd, which was just checking it for non-null. With metrics in CM, we have to check\n+        // its content, what is done in generateMetricsAndLogConfigMap\n+        kmm2.generateMetricsAndLogConfigMap(null, metricsCM);\n+    }\n+\n+    @Deprecated\n+    @Test\n+    public void testMetricsConfigMapDeprecatedMetrics() {\n+        KafkaMirrorMaker2 resource = new KafkaMirrorMaker2Builder(ResourceUtils.createEmptyKafkaMirrorMaker2(namespace, cluster))\n+                .withNewSpec()\n+                .withMetrics((Map<String, Object>) TestUtils.fromJson(metricsCmJson, Map.class))\n+                .withMetricsConfig(null)\n+                .withImage(image)\n+                .withReplicas(replicas)\n+                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                .withConnectCluster(targetClusterAlias)\n+                .withClusters(targetCluster)\n+                .endSpec()\n+                .build();", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java\nindex 7ba441f00c..adab1c18f3 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaMirrorMaker2ClusterTest.java\n\n@@ -111,13 +111,13 @@ public class KafkaMirrorMaker2ClusterTest {\n \n     private final KafkaMirrorMaker2 resource = new KafkaMirrorMaker2Builder(ResourceUtils.createEmptyKafkaMirrorMaker2(namespace, cluster))\n             .withNewSpec()\n-            .withMetricsConfig(jmxMetricsConfig)\n-            .withImage(image)\n-            .withReplicas(replicas)\n-            .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n-            .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n-            .withConnectCluster(targetClusterAlias)\n-            .withClusters(targetCluster)\n+                .withMetricsConfig(jmxMetricsConfig)\n+                .withImage(image)\n+                .withReplicas(replicas)\n+                .withReadinessProbe(new Probe(healthDelay, healthTimeout))\n+                .withLivenessProbe(new Probe(healthDelay, healthTimeout))\n+                .withConnectCluster(targetClusterAlias)\n+                .withClusters(targetCluster)\n             .endSpec()\n             .build();\n     private final KafkaMirrorMaker2Cluster kmm2 = KafkaMirrorMaker2Cluster.fromCrd(resource, VERSIONS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2OTc2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533369767", "bodyText": "This is weird ... within this file you remove Collections. from one emptyMap but leave it with the rest of them. Any reason for it? If not, maybe we could keep it consistent at least within the file or within the same line.", "author": "scholzj", "createdAt": "2020-12-01T12:25:35Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java", "diffHunk": "@@ -64,7 +64,7 @@ public void checkEmptyWarnings() {\n     @Test\n     public void checkKafkaStorage() {\n         Kafka kafka = new KafkaBuilder(ResourceUtils.createKafka(NAMESPACE, NAME, 1, IMAGE, HEALTH_DELAY, HEALTH_TIMEOUT,\n-            Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(),\n+            emptyMap(), null, Collections.emptyMap(), Collections.emptyMap(),", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java\nindex 2557b306dd..7ea6d20951 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/resource/KafkaSpecCheckerTest.java\n\n@@ -64,7 +63,7 @@ public class KafkaSpecCheckerTest {\n     @Test\n     public void checkKafkaStorage() {\n         Kafka kafka = new KafkaBuilder(ResourceUtils.createKafka(NAMESPACE, NAME, 1, IMAGE, HEALTH_DELAY, HEALTH_TIMEOUT,\n-            emptyMap(), null, Collections.emptyMap(), Collections.emptyMap(),\n+            emptyMap(), null, emptyMap(), emptyMap(),\n             new EphemeralStorage(), new EphemeralStorage(), null, null, null, null))\n                 .editSpec()\n                     .editZookeeper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MTgxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533381818", "bodyText": "Should the deprecated metrics tests added also for the other components? Or do you think we do not need it?", "author": "scholzj", "createdAt": "2020-12-01T12:47:12Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -385,6 +397,107 @@ void testCruiseControlMetrics() {\n         }\n     }\n \n+    /**\n+     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n+     * 2. Check, whether the metrics ConfigMap is changed\n+     * 3. Updates ConfigMap linked as metrics on\n+     * 4. Check, whether the metrics ConfigMap is changed\n+     */\n+    @Deprecated\n+    @Test\n+    void testKafkaMetricsSettingsDeprecatedMetrics() {", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex 836369e9a3..8fe8ba9036 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -397,107 +385,6 @@ public class MetricsST extends AbstractST {\n         }\n     }\n \n-    /**\n-     * 1. Update metrics form whatever it is to @metricsConfigJson in spec.kafka.metrics\n-     * 2. Check, whether the metrics ConfigMap is changed\n-     * 3. Updates ConfigMap linked as metrics on\n-     * 4. Check, whether the metrics ConfigMap is changed\n-     */\n-    @Deprecated\n-    @Test\n-    void testKafkaMetricsSettingsDeprecatedMetrics() {\n-        AtomicReference<MetricsConfig> previousMetrics = new AtomicReference<>();\n-\n-        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n-        // update metrics\n-        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n-            previousMetrics.set(k.getSpec().getKafka().getMetricsConfig());\n-            k.getSpec().getKafka().setMetricsConfig(null);\n-            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson, Map.class));\n-        });\n-\n-        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n-        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n-        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n-\n-        // update metrics\n-        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n-            k.getSpec().getKafka().setMetricsConfig(null);\n-            k.getSpec().getKafka().setMetrics((Map<String, Object>) TestUtils.fromJson(metricsConfigJson.replace(\"true\", \"false\"), Map.class));\n-        });\n-        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n-        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n-        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n-\n-        // revert metrics changes\n-        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n-            k.getSpec().getKafka().setMetricsConfig(previousMetrics.get());\n-            k.getSpec().getKafka().setMetrics(null);\n-        });\n-    }\n-\n-    /**\n-     * 1. Update metrics form whatever it is to @metricsConfigYaml in spec.kafka.metricsConfig\n-     * 2. Check, whether the metrics ConfigMap is changed\n-     * 3. Updates ConfigMap linked as metrics on\n-     * 4. Check, whether the metrics ConfigMap is changed\n-     */\n-    @Test\n-    void testKafkaMetricsSettings() {\n-        String metricsConfigJson = \"{\\\"lowercaseOutputName\\\":true}\";\n-        String metricsConfigYaml = \"lowercaseOutputName: true\";\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(\n-                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n-                true\n-        );\n-\n-        ConfigMap externalMetricsCm = new ConfigMapBuilder()\n-                .withData(Collections.singletonMap(\"metrics-config.yml\", metricsConfigYaml))\n-                .withNewMetadata()\n-                    .withName(\"external-metrics-cm\")\n-                    .withNamespace(NAMESPACE)\n-                .endMetadata()\n-                .build();\n-\n-        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsCm);\n-\n-        // spec.kafka.metrics -> spec.kafka.jmxExporterMetrics\n-        ConfigMapKeySelector cmks = new ConfigMapKeySelectorBuilder()\n-                .withName(\"external-metrics-cm\")\n-                .withKey(\"metrics-config.yml\")\n-                .build();\n-        JmxPrometheusExporterMetrics jmxPrometheusExporterMetrics = new JmxPrometheusExporterMetricsBuilder()\n-                .withNewValueFrom()\n-                    .withConfigMapKeyRef(cmks)\n-                .endValueFrom()\n-                .build();\n-        KafkaResource.replaceKafkaResource(SECOND_CLUSTER, k -> {\n-            // JMX metrics have higher priority\n-            k.getSpec().getKafka().setMetricsConfig(jmxPrometheusExporterMetrics);\n-            k.getSpec().getKafka().setMetrics(null);\n-        });\n-\n-        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n-        ConfigMap actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n-        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson));\n-\n-        // update metrics\n-        ConfigMap externalMetricsUpdatedCm = new ConfigMapBuilder()\n-                .withData(Collections.singletonMap(\"metrics-config.yml\", metricsConfigYaml.replace(\"true\", \"false\")))\n-                .withNewMetadata()\n-                    .withName(\"external-metrics-cm\")\n-                    .withNamespace(NAMESPACE)\n-                .endMetadata()\n-                .build();\n-\n-        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(externalMetricsUpdatedCm);\n-        PodUtils.verifyThatRunningPodsAreStable(SECOND_CLUSTER);\n-        actualCm = kubeClient().getConfigMap(KafkaResources.kafkaMetricsAndLogConfigMapName(SECOND_CLUSTER));\n-        assertThat(actualCm.getData().get(\"metrics-config.yml\"), is(metricsConfigJson.replace(\"true\", \"false\")));\n-    }\n-\n     private String getExporterRunScript(String podName) throws InterruptedException, ExecutionException, IOException {\n         ArrayList<String> command = new ArrayList<>();\n         command.add(\"cat\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MDk2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533450966", "bodyText": "Unless you know that the write-site and read-site will be running on the same thread (and maybe they are, but I'm not 100% certain about that) then you should use an AtomicReference.", "author": "tombentley", "createdAt": "2020-12-01T14:32:00Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java", "diffHunk": "@@ -123,6 +119,7 @@ public KafkaConnectAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability pf\n \n         boolean connectHasZeroReplicas = connect.getReplicas() == 0;\n \n+        final String[] desiredLogging = new String[1];", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\nindex 92a640fc32..7af2d37b86 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java\n\n@@ -119,7 +120,7 @@ public class KafkaConnectAssemblyOperator extends AbstractConnectOperator<Kubern\n \n         boolean connectHasZeroReplicas = connect.getReplicas() == 0;\n \n-        final String[] desiredLogging = new String[1];\n+        final AtomicReference<String> desiredLogging = new AtomicReference<>();\n         connectS2ICheck\n                 .compose(otherConnect -> {\n                     if (otherConnect != null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTA5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451098", "bodyText": "Same comment", "author": "tombentley", "createdAt": "2020-12-01T14:32:12Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java", "diffHunk": "@@ -111,15 +111,13 @@ public KafkaConnectS2IAssemblyOperator(Vertx vertx, PlatformFeaturesAvailability\n         String namespace = reconciliation.namespace();\n \n         connect.generateBuildConfig();\n-        ConfigMap logAndMetricsConfigMap = connect.generateMetricsAndLogConfigMap(connect.getLogging() instanceof ExternalLogging ?\n+\n+        ConfigMap loggingCm = connect.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) connect.getLogging()).getName()) :\n-                null);\n+                null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\nindex 53d876ff85..91e0133ff2 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectS2IAssemblyOperator.java\n\n@@ -117,7 +118,7 @@ public class KafkaConnectS2IAssemblyOperator extends AbstractConnectOperator<Ope\n                 null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        final String[] desiredLogging = new String[1];\n+        final AtomicReference<String> desiredLogging = new AtomicReference<>();\n \n         boolean connectHasZeroReplicas = connect.getReplicas() == 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTI1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451255", "bodyText": "Same comment", "author": "tombentley", "createdAt": "2020-12-01T14:32:26Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java", "diffHunk": "@@ -133,14 +133,12 @@ public KafkaMirrorMaker2AssemblyOperator(Vertx vertx, PlatformFeaturesAvailabili\n         Promise<KafkaMirrorMaker2Status> createOrUpdatePromise = Promise.promise();\n         String namespace = reconciliation.namespace();\n \n-        ConfigMap logAndMetricsConfigMap = mirrorMaker2Cluster.generateMetricsAndLogConfigMap(mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n+        ConfigMap loggingCm = mirrorMaker2Cluster.getLogging() instanceof ExternalLogging ?\n                 configMapOperations.get(namespace, ((ExternalLogging) mirrorMaker2Cluster.getLogging()).getName()) :\n-                null);\n+                null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        annotations.put(Annotations.ANNO_STRIMZI_LOGGING_DYNAMICALLY_UNCHANGEABLE_HASH,\n-                Util.stringHash(Util.getLoggingDynamicallyUnmodifiableEntries(logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG))));\n-        String desiredLogging = logAndMetricsConfigMap.getData().get(AbstractModel.ANCILLARY_CM_KEY_LOG_CONFIG);\n+        final String[] desiredLogging = new String[1];", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\nindex 4a51c94ec7..49291dd10c 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperator.java\n\n@@ -138,7 +139,7 @@ public class KafkaMirrorMaker2AssemblyOperator extends AbstractConnectOperator<K\n                 null;\n \n         Map<String, String> annotations = new HashMap<>(1);\n-        final String[] desiredLogging = new String[1];\n+        final AtomicReference<String> desiredLogging = new AtomicReference<>();\n \n         boolean mirrorMaker2HasZeroReplicas = mirrorMaker2Cluster.getReplicas() == 0;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTkxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533451916", "bodyText": "Three (count them, three!) blank lines! They're not free you know!", "author": "tombentley", "createdAt": "2020-12-01T14:33:23Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java", "diffHunk": "@@ -68,6 +70,12 @@\n     private final int uoReconciliationInterval = 90;\n     private final int uoZookeeperSessionTimeout = 20;\n \n+    private final String metricsCmJson = \"{\\\"animal\\\":\\\"wombat\\\"}\";\n+    private final String metricsCMName = \"metrics-cm\";\n+    private final ConfigMap metricsCM = io.strimzi.operator.cluster.TestUtils.getJmxMetricsCm(metricsCmJson, metricsCMName);\n+    private final JmxPrometheusExporterMetrics jmxMetricsConfig = io.strimzi.operator.cluster.TestUtils.getJmxPrometheusExporterMetrics(AbstractModel.ANCILLARY_CM_KEY_METRICS, metricsCMName);\n+\n+\n ", "originalCommit": "629207be6bb388f68ff0088dcbc17c4577507b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1cb698a8586a6c8485151879552598aa65acc79", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java\nindex c74b4dd8b6..7954b6579f 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/EntityUserOperatorTest.java\n\n@@ -74,9 +74,6 @@ public class EntityUserOperatorTest {\n     private final String metricsCMName = \"metrics-cm\";\n     private final ConfigMap metricsCM = io.strimzi.operator.cluster.TestUtils.getJmxMetricsCm(metricsCmJson, metricsCMName);\n     private final JmxPrometheusExporterMetrics jmxMetricsConfig = io.strimzi.operator.cluster.TestUtils.getJmxPrometheusExporterMetrics(AbstractModel.ANCILLARY_CM_KEY_METRICS, metricsCMName);\n-\n-\n-\n     private final List<SystemProperty> javaSystemProperties = new ArrayList<SystemProperty>() {{\n             add(new SystemPropertyBuilder().withName(\"javax.net.debug\").withValue(\"verbose\").build());\n             add(new SystemPropertyBuilder().withName(\"something.else\").withValue(\"42\").build());\n"}}, {"oid": "f1cb698a8586a6c8485151879552598aa65acc79", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1cb698a8586a6c8485151879552598aa65acc79", "message": "addressing comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-01T15:39:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMjI3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533732277", "bodyText": "\"Exporter\"", "author": "ppatierno", "createdAt": "2020-12-01T21:27:35Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/JmxPrometheusExporterMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.sundr.builder.annotations.Buildable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JMX Prometheus metrics config", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/JmxPrometheusExporterMetrics.java b/api/src/main/java/io/strimzi/api/kafka/model/JmxPrometheusExporterMetrics.java\ndeleted file mode 100644\nindex a917bc3c03..0000000000\n--- a/api/src/main/java/io/strimzi/api/kafka/model/JmxPrometheusExporterMetrics.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.api.kafka.model;\n-\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-import io.strimzi.crdgenerator.annotations.Description;\n-import io.sundr.builder.annotations.Buildable;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * JMX Prometheus metrics config\n- */\n-@Buildable(\n-        editableEnabled = false,\n-        builderPackage = Constants.FABRIC8_KUBERNETES_API\n-)\n-@JsonPropertyOrder({\"type\", \"valueFrom\"})\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-public class JmxPrometheusExporterMetrics extends MetricsConfig {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    public static final String TYPE_JMX_EXPORTER = \"jmxPrometheusExporter\";\n-\n-    private ExternalConfigurationMetrics valueFrom;\n-    private Map<String, Object> additionalProperties = new HashMap<>(0);\n-\n-    @Description(\"ConfigMap where the Prometheus JMX Exporter configuration is stored. \" +\n-            \"For details of the structure of this configuration, see the {JMXExporter}.\")\n-    @JsonProperty(required = true)\n-    public ExternalConfigurationMetrics getValueFrom() {\n-        return valueFrom;\n-    }\n-\n-    public void setValueFrom(ExternalConfigurationMetrics valueFrom) {\n-        this.valueFrom = valueFrom;\n-    }\n-\n-    @Description(\"Must be `\" + TYPE_JMX_EXPORTER + \"`\")\n-    @Override\n-    public String getType() {\n-        return TYPE_JMX_EXPORTER;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjc4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533736782", "bodyText": "I was wondering if we really still need the isMetricsEnabled when everything depends on the metrics field. If the field is not specified it just means no metrics. Or there is something missing  why it's still needed?", "author": "ppatierno", "createdAt": "2020-12-01T21:36:10Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -516,21 +522,63 @@ protected String maybeAddMonitorIntervalToExternalLogging(String data) {\n     /**\n      * Generates a metrics and logging ConfigMap according to configured defaults.\n      *\n-     * @param externalConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalLoggingConfigMap The ConfigMap used if Logging is an instance of ExternalLogging\n+     * @param externalMetricsConfigMap The ConfigMap used if Metrics is an instance of ExternalMetrics\n      * @return The generated ConfigMap.\n      */\n-    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalConfigMap) {\n+    public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n-        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalConfigMap));\n-        if (isMetricsEnabled() && getMetricsConfig() != null) {\n+        data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n+        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2NzcxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533967713", "bodyText": "AFAICS the purpose of this field is to be written into the envvar, what causes RU if we want to un/deploy metrics.", "author": "sknot-rh", "createdAt": "2020-12-02T08:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 714204d3c5..011b39f364 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -529,78 +526,45 @@ public abstract class AbstractModel {\n     public ConfigMap generateMetricsAndLogConfigMap(ConfigMap externalLoggingConfigMap, ConfigMap externalMetricsConfigMap) {\n         Map<String, String> data = new HashMap<>(2);\n         data.put(getAncillaryConfigMapKeyLogConfig(), parseLogging(getLogging(), externalLoggingConfigMap));\n-        if (getMetricsConfigInCm() != null || (isMetricsEnabled() && getMetricsConfig() != null)) {\n-            String parseResult = parseMetrics(externalMetricsConfigMap);\n-            if (parseResult != null) {\n-                this.setMetricsEnabled(true);\n-                data.put(ANCILLARY_CM_KEY_METRICS, parseResult);\n-            }\n+        if (isMetricsEnabled() && getMetrics() != null) {\n+            data.put(ANCILLARY_CM_KEY_METRICS, parseMetrics(externalMetricsConfigMap));\n         }\n         return createConfigMap(ancillaryConfigMapName, data);\n     }\n \n+    public Metrics getMetrics() {\n+        return metricsConfig;\n+    }\n+\n     protected String parseMetrics(ConfigMap externalCm) {\n-        if (getMetricsConfigInCm() != null) {\n-            if (getMetricsConfigInCm() instanceof JmxPrometheusExporterMetrics) {\n-                if (externalCm == null) {\n-                    log.warn(\"ConfigMap {} does not exist. Metrics disabled.\",\n-                            ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName());\n-                    throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName() + \" does not exist.\");\n-                } else {\n-                    String data = externalCm.getData().get(((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n-                    if (data == null) {\n-                        log.warn(\"ConfigMap {} does not contain specified key {}. Metrics disabled.\", ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName(),\n-                                ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey());\n-                        throw new InvalidResourceException(\"ConfigMap \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getName()\n-                                + \" does not contain specified key \" + ((JmxPrometheusExporterMetrics) getMetricsConfigInCm()).getValueFrom().getConfigMapKeyRef().getKey() + \".\");\n-                    } else {\n-                        if (data.isEmpty()) {\n-                            return \"{}\";\n-                        }\n-                        try {\n-                            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n-                            Object yaml = yamlReader.readValue(data, Object.class);\n-                            ObjectMapper jsonWriter = new ObjectMapper();\n-                            return jsonWriter.writeValueAsString(yaml);\n-                        } catch (JsonProcessingException e) {\n-                            throw new InvalidResourceException(\"Parsing metrics configuration failed. \", e);\n-                        }\n-                    }\n-                }\n-            } else {\n-                log.warn(\"Unknown type of metrics {}.\", getMetricsConfigInCm().getClass());\n-                throw new InvalidResourceException(\"Unknown type of metrics \" + getMetricsConfigInCm().getClass() + \".\");\n-            }\n-        } else if (isMetricsEnabled() && getMetricsConfig() != null) {\n+        if (metricsConfig instanceof InlineMetrics) {\n             HashMap<String, Object> m = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : getMetricsConfig()) {\n-                m.put(entry.getKey(), entry.getValue());\n+            m.put(\"lowercaseOutputName\", ((InlineMetrics) getMetrics()).getLowercaseOutputName());\n+            ArrayList<Map<String, Object>> data = new ArrayList<>();\n+            for (Map<String, Object> rule : ((InlineMetrics) getMetrics()).getRules()) {\n+                data.add(rule);\n             }\n+            m.put(\"rules\", data);\n             return new JsonObject(m).toString();\n+        } else if (metricsConfig instanceof ExternalMetrics) {\n+            if (externalCm != null && externalCm.getData() != null && externalCm.getData().containsKey(ANCILLARY_CM_KEY_METRICS)) {\n+                return externalCm.getData().get(ANCILLARY_CM_KEY_METRICS);\n+            } else {\n+                log.warn(\"ConfigMap {} with external metrics configuration does not exist or doesn't contain the configuration under the {} key. Metrics are empty.\",\n+                        ((ExternalMetrics) getMetrics()).getName(),\n+                        ANCILLARY_CM_KEY_METRICS);\n+                return null;\n+            }\n+        } else {\n+            log.debug(\"Metrics are not set, thus disabled\");\n+            return null;\n         }\n-        return null;\n-    }\n-\n-    protected Iterable<Map.Entry<String, Object>> getMetricsConfig() {\n-        return metricsConfig;\n     }\n \n-    protected void setMetricsConfig(Iterable<Map.Entry<String, Object>> metricsConfig) {\n+    protected void setMetricsConfig(Metrics metricsConfig) {\n         this.metricsConfig = metricsConfig;\n     }\n \n-    protected void setMetricsConfigInCm(MetricsConfig metricsConfigInCm) {\n-        this.metricsConfigInCm = metricsConfigInCm;\n-    }\n-\n-    public MetricsConfig getMetricsConfigInCm() {\n-        return metricsConfigInCm;\n-    }\n-\n-    public boolean isMetricsConfigured() {\n-        return this.metricsConfigInCm != null;\n-    }\n-\n     /**\n      * Returns name of config map used for storing metrics and logging configuration.\n      * @return The name of config map used for storing metrics and logging configuration.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0Mzk4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533743989", "bodyText": "The @PresentInVersions(\"v1alpha1-v1beta1\") needs to be added everywhere ;-)", "author": "scholzj", "createdAt": "2020-12-01T21:50:07Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java", "diffHunk": "@@ -96,6 +98,8 @@ public void setConfig(Map<String, Object> config) {\n         this.config = config;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.cruiseControl.metricsConfig\")\n+    @Deprecated", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java\nindex 1412238649..c18aba39b5 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlSpec.java\n\n@@ -98,29 +96,17 @@ public class CruiseControlSpec implements UnknownPropertyPreserving, Serializabl\n         this.config = config;\n     }\n \n-    @DeprecatedProperty(movedToPath = \"spec.cruiseControl.metricsConfig\")\n-    @Deprecated\n     @JsonInclude(JsonInclude.Include.NON_EMPTY)\n     @Description(\"The Prometheus JMX Exporter configuration. \" +\n             \"See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.\")\n-    public Map<String, Object> getMetrics() {\n+    public Metrics getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Map<String, Object> metrics) {\n+    public void setMetrics(Metrics metrics) {\n         this.metrics = metrics;\n     }\n \n-    @Description(\"Metrics configuration.\")\n-    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-    public MetricsConfig getMetricsConfig() {\n-        return metricsConfig;\n-    }\n-\n-    public void setMetricsConfig(MetricsConfig metricsConfig) {\n-        this.metricsConfig = metricsConfig;\n-    }\n-\n     @Description(\"Logging configuration (log4j1) for Cruise Control.\")\n     @JsonInclude(value = JsonInclude.Include.NON_NULL)\n     public Logging getLogging() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDI3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744274", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "author": "scholzj", "createdAt": "2020-12-01T21:50:37Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java", "diffHunk": "@@ -234,6 +235,8 @@ public void setJmxOptions(KafkaJmxOptions jmxOptions) {\n         this.jmxOptions = jmxOptions;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.kafka.metricsConfig\")\n+    @Deprecated", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java\nindex bcc0e799ef..d7718a8b02 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/KafkaClusterSpec.java\n\n@@ -235,29 +234,17 @@ public class KafkaClusterSpec implements UnknownPropertyPreserving, Serializable\n         this.jmxOptions = jmxOptions;\n     }\n \n-    @DeprecatedProperty(movedToPath = \"spec.kafka.metricsConfig\")\n-    @Deprecated\n     @JsonInclude(JsonInclude.Include.NON_EMPTY)\n     @Description(\"The Prometheus JMX Exporter configuration. \" +\n             \"See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.\")\n-    public Map<String, Object> getMetrics() {\n+    public Metrics getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Map<String, Object> metrics) {\n+    public void setMetrics(Metrics metrics) {\n         this.metrics = metrics;\n     }\n \n-    @Description(\"Metrics configuration.\")\n-    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-    public MetricsConfig getMetricsConfig() {\n-        return metricsConfig;\n-    }\n-\n-    public void setMetricsConfig(MetricsConfig metricsConfig) {\n-        this.metricsConfig = metricsConfig;\n-    }\n-\n     @PresentInVersions(\"v1alpha1-v1beta1\")\n     @Description(\"The pod's affinity rules.\")\n     @KubeLink(group = \"core\", version = \"v1\", kind = \"affinity\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDMzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744338", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "author": "scholzj", "createdAt": "2020-12-01T21:50:44Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java", "diffHunk": "@@ -121,6 +122,8 @@ public void setProducer(KafkaMirrorMakerProducerSpec producer) {\n         this.producer = producer;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n+    @Deprecated", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java\nindex d5013fcc86..d4fa7b2cd5 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMakerSpec.java\n\n@@ -122,29 +120,17 @@ public class KafkaMirrorMakerSpec extends Spec {\n         this.producer = producer;\n     }\n \n-    @DeprecatedProperty(movedToPath = \"spec.metricsConfig\")\n-    @Deprecated\n     @JsonInclude(JsonInclude.Include.NON_NULL)\n     @Description(\"The Prometheus JMX Exporter configuration. \" +\n             \"See {JMXExporter} for details of the structure of this configuration.\")\n-    public Map<String, Object> getMetrics() {\n+    public Metrics getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Map<String, Object> metrics) {\n+    public void setMetrics(Metrics metrics) {\n         this.metrics = metrics;\n     }\n \n-    @Description(\"Metrics configuration.\")\n-    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-    public MetricsConfig getMetricsConfig() {\n-        return metricsConfig;\n-    }\n-\n-    public void setMetricsConfig(MetricsConfig metricsConfig) {\n-        this.metricsConfig = metricsConfig;\n-    }\n-\n     @JsonInclude(JsonInclude.Include.NON_NULL)\n     @Description(\"The configuration of tracing in Kafka MirrorMaker.\")\n     public Tracing getTracing() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0NDQyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3855#discussion_r533744429", "bodyText": "@PresentInVersions(\"v1alpha1-v1beta1\")", "author": "scholzj", "createdAt": "2020-12-01T21:50:56Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java", "diffHunk": "@@ -177,6 +178,8 @@ public void setJvmOptions(JvmOptions jvmOptions) {\n         this.jvmOptions = jvmOptions;\n     }\n \n+    @DeprecatedProperty(movedToPath = \"spec.zookeeper.metricsConfig\")\n+    @Deprecated", "originalCommit": "f1cb698a8586a6c8485151879552598aa65acc79", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "033a0f86089c1611dadac8682863f91b8ccda237", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java\nindex 39c228b4aa..7e4f648f42 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/ZookeeperClusterSpec.java\n\n@@ -178,29 +177,17 @@ public class ZookeeperClusterSpec implements UnknownPropertyPreserving, Serializ\n         this.jvmOptions = jvmOptions;\n     }\n \n-    @DeprecatedProperty(movedToPath = \"spec.zookeeper.metricsConfig\")\n-    @Deprecated\n     @JsonInclude(JsonInclude.Include.NON_EMPTY)\n     @Description(\"The Prometheus JMX Exporter configuration. \" +\n             \"See https://github.com/prometheus/jmx_exporter for details of the structure of this configuration.\")\n-    public Map<String, Object> getMetrics() {\n+    public Metrics getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Map<String, Object> metrics) {\n+    public void setMetrics(Metrics metrics) {\n         this.metrics = metrics;\n     }\n \n-    @Description(\"Metrics configuration.\")\n-    @JsonInclude(JsonInclude.Include.NON_EMPTY)\n-    public MetricsConfig getMetricsConfig() {\n-        return metricsConfig;\n-    }\n-\n-    public void setMetricsConfig(MetricsConfig metricsConfig) {\n-        this.metricsConfig = metricsConfig;\n-    }\n-\n     @PresentInVersions(\"v1alpha1-v1beta1\")\n     @Description(\"The pod's affinity rules.\")\n     @KubeLink(group = \"core\", version = \"v1\", kind = \"affinity\")\n"}}, {"oid": "033a0f86089c1611dadac8682863f91b8ccda237", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/033a0f86089c1611dadac8682863f91b8ccda237", "message": "init\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T07:59:18Z", "type": "commit"}, {"oid": "4f711abfd8cd80de0293efd7a38aa13a850e699c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4f711abfd8cd80de0293efd7a38aa13a850e699c", "message": "tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T07:59:56Z", "type": "commit"}, {"oid": "23aa595d1e4ea52c090cb24f30071646cdf092f4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/23aa595d1e4ea52c090cb24f30071646cdf092f4", "message": "changelog\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T07:59:59Z", "type": "commit"}, {"oid": "9dc997cc4e9151553ac9bc53a185f6401e773e93", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9dc997cc4e9151553ac9bc53a185f6401e773e93", "message": "weird fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T07:59:59Z", "type": "commit"}, {"oid": "87bcf542546a523fe5fc892f8883ee57175ce883", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/87bcf542546a523fe5fc892f8883ee57175ce883", "message": "preserve compatibility\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:14Z", "type": "commit"}, {"oid": "90a5adab1baa82f4dc607c2c44154436a6434864", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/90a5adab1baa82f4dc607c2c44154436a6434864", "message": "reverting tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:17Z", "type": "commit"}, {"oid": "16d92f8ee48e5cb66ba5391486a8827031381e88", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/16d92f8ee48e5cb66ba5391486a8827031381e88", "message": "revert indent\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:17Z", "type": "commit"}, {"oid": "bdfe2eff67f287cbd722621b2eb0e396a60a89a9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bdfe2eff67f287cbd722621b2eb0e396a60a89a9", "message": "sb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:17Z", "type": "commit"}, {"oid": "42968b0741bbb73f240fa5a8a63e0bd69387308a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/42968b0741bbb73f240fa5a8a63e0bd69387308a", "message": "Tom's suggestion\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:18Z", "type": "commit"}, {"oid": "3f8a7515b8a13feee727c744057c0fe0d97908a1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f8a7515b8a13feee727c744057c0fe0d97908a1", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:18Z", "type": "commit"}, {"oid": "f1afe7c7de587243eba6bb005427f59dba5d25b7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1afe7c7de587243eba6bb005427f59dba5d25b7", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:18Z", "type": "commit"}, {"oid": "54ae7bb63fa16abc226113d377ab6fbea12d0708", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/54ae7bb63fa16abc226113d377ab6fbea12d0708", "message": "rename\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:18Z", "type": "commit"}, {"oid": "05e1d7fccf665ae2041fb6bf6928245cb4982324", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05e1d7fccf665ae2041fb6bf6928245cb4982324", "message": "tests + mm2\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:47Z", "type": "commit"}, {"oid": "3bc6f9a59fd572e4389fb7da79ebb517fc5d2552", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bc6f9a59fd572e4389fb7da79ebb517fc5d2552", "message": "ST\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "7648ecbd575a7869ed6422561fedd013edab1ce3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7648ecbd575a7869ed6422561fedd013edab1ce3", "message": "adjust STs to use cm\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "2313e4d9c7f52000db959d10a746584a06525bd6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2313e4d9c7f52000db959d10a746584a06525bd6", "message": "ribejs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "7fb50810f9ad984947afb2422677b93674209100", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7fb50810f9ad984947afb2422677b93674209100", "message": "api ITs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "b739519a8d8d5242c09678a28e9433e886ef2df4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b739519a8d8d5242c09678a28e9433e886ef2df4", "message": "improvements + st\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "d32da60e04a5cad390433a7bea5eed61fbdbf063", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d32da60e04a5cad390433a7bea5eed61fbdbf063", "message": "phew\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "9c55f710b1fc0f6fd62486c0490483033b80cfc4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c55f710b1fc0f6fd62486c0490483033b80cfc4", "message": "fixes\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "ee6077e5c4980b683e9531ec20031e8f4632a327", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ee6077e5c4980b683e9531ec20031e8f4632a327", "message": "rebasE\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "63ecdf5959e41ab70efb761aea1044af4bfe8610", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/63ecdf5959e41ab70efb761aea1044af4bfe8610", "message": "addressing comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T08:00:50Z", "type": "commit"}, {"oid": "99b3f46934588f69292a2b6ed56fbf2e65721cc0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99b3f46934588f69292a2b6ed56fbf2e65721cc0", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T09:28:01Z", "type": "commit"}, {"oid": "99b3f46934588f69292a2b6ed56fbf2e65721cc0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99b3f46934588f69292a2b6ed56fbf2e65721cc0", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T09:28:01Z", "type": "forcePushed"}, {"oid": "19fad3458dd3392b905f0df9d858136f685707b8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/19fad3458dd3392b905f0df9d858136f685707b8", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T10:47:36Z", "type": "commit"}, {"oid": "19fad3458dd3392b905f0df9d858136f685707b8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/19fad3458dd3392b905f0df9d858136f685707b8", "message": "fix\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-12-02T10:47:36Z", "type": "forcePushed"}]}