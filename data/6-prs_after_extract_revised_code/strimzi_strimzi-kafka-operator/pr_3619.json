{"pr_number": 3619, "pr_title": "[systemtest] Builder for example clients", "pr_createdAt": "2020-09-09T08:08:55Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODg2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r485508866", "bodyText": "Here I would  add some control  that when we use oauth client these variables should not be empty or null :)", "author": "see-quick", "createdAt": "2020-09-09T10:31:52Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java", "diffHunk": "@@ -10,50 +10,66 @@\n \n public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n \n-    private final String oauthClientId;\n-    private final String oauthClientSecret;\n-    private final String oauthTokenEndpointUri;\n-    private final String userName;\n-\n-    public KafkaOauthClientsResource(\n-        String producerName, String consumerName, String bootstrapServer, String topicName, int messageCount,\n-        String additionalConfig, String consumerGroup, String oauthClientId, String oauthClientSecret, String oauthTokenEndpointUri) {\n-\n-        super(producerName, consumerName, bootstrapServer, topicName, messageCount, additionalConfig, consumerGroup, 0);\n-        this.oauthClientId = oauthClientId;\n-        this.oauthClientSecret = oauthClientSecret;\n-        this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n-        this.userName = oauthClientId;\n+    private String oauthClientId;\n+    private String oauthClientSecret;\n+    private String oauthTokenEndpointUri;\n+    private String userName;\n+\n+    public static class KafkaOauthClientsBuilder extends KafkaClientsBuilder<KafkaOauthClientsResource.KafkaOauthClientsBuilder> {\n+        private String oauthClientId;\n+        private String oauthClientSecret;\n+        private String oauthTokenEndpointUri;\n+        private String userName;\n+\n+        public KafkaOauthClientsBuilder withOAuthClientId(String oauthClientId) {\n+            this.oauthClientId = oauthClientId;\n+            return self();\n+        }\n+\n+        public KafkaOauthClientsBuilder withOAuthClientSecret(String oauthClientSecret) {\n+            this.oauthClientSecret = oauthClientSecret;\n+            return self();\n+        }\n+\n+        public KafkaOauthClientsBuilder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n+            this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n+            return self();\n+        }\n+\n+        public KafkaOauthClientsBuilder withUserName(String userName) {\n+            this.userName = userName;\n+            return self();\n+        }\n+\n+        @Override\n+        public KafkaOauthClientsResource build() {\n+            return new KafkaOauthClientsResource(this);\n+        }\n+\n+        @Override\n+        protected KafkaOauthClientsResource.KafkaOauthClientsBuilder self() {\n+            return this;\n+        }\n     }\n \n-    // from existing client create new client with random consumer group (immutability)\n-    public KafkaOauthClientsResource(KafkaOauthClientsResource kafkaOauthClientsResource) {\n-        super(kafkaOauthClientsResource);\n-        this.oauthClientId = kafkaOauthClientsResource.oauthClientId;\n-        this.oauthClientSecret = kafkaOauthClientsResource.oauthClientSecret;\n-        this.oauthTokenEndpointUri = kafkaOauthClientsResource.oauthTokenEndpointUri;\n-        this.userName = kafkaOauthClientsResource.userName;\n-\n+    private KafkaOauthClientsResource(KafkaOauthClientsResource.KafkaOauthClientsBuilder builder) {\n+        super(builder);\n+        oauthClientId = builder.oauthClientId;\n+        oauthClientSecret = builder.oauthClientSecret;\n+        oauthTokenEndpointUri = builder.oauthTokenEndpointUri;", "originalCommit": "4948049e254799d39b20e0d7f5f2db22ee9933f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMDIzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r485510230", "bodyText": "Yes, I wanted to add it there, thanks :)", "author": "im-konge", "createdAt": "2020-09-09T10:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a8191b22d6f54e2fe129793faff96819dede3505", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\nsimilarity index 90%\nrename from systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\nrename to systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\nindex 1c04d8551a..015bcb44d9 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\n\n@@ -8,14 +8,16 @@ import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n+import java.security.InvalidParameterException;\n+\n+public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n \n     private String oauthClientId;\n     private String oauthClientSecret;\n     private String oauthTokenEndpointUri;\n     private String userName;\n \n-    public static class KafkaOauthClientsBuilder extends KafkaClientsBuilder<KafkaOauthClientsResource.KafkaOauthClientsBuilder> {\n+    public static class KafkaOauthClientsBuilder extends KafkaBasicExampleClients.KafkaBasicClientsBuilder<KafkaOauthClientsBuilder> {\n         private String oauthClientId;\n         private String oauthClientSecret;\n         private String oauthTokenEndpointUri;\n"}}, {"oid": "a8191b22d6f54e2fe129793faff96819dede3505", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a8191b22d6f54e2fe129793faff96819dede3505", "message": "some refactor, add methods etc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-10T22:11:07Z", "type": "forcePushed"}, {"oid": "2bb07ec625f78a850e938cdb4265c519ee39a849", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2bb07ec625f78a850e938cdb4265c519ee39a849", "message": "fixup! some refactor, add methods etc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-14T12:34:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2MzAwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488463006", "bodyText": "Why removing all the formatting which made it easier to read when you already had it (here and several other places)?", "author": "scholzj", "createdAt": "2020-09-15T07:56:21Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java", "diffHunk": "@@ -210,24 +165,24 @@ private static PodSpec createClientSpec(boolean tlsListener, String kafkaClients\n \n                     containerBuilder\n                         .addNewVolumeMount()\n-                            .withName(clusterCaSecretVolumeName)\n-                            .withMountPath(caSecretMountPoint)\n+                        .withName(clusterCaSecretVolumeName)\n+                        .withMountPath(caSecretMountPoint)\n                         .endVolumeMount()\n                         .addNewEnv().withName(\"PRODUCER_TLS\" + envVariablesSuffix).withValue(\"TRUE\").endEnv()\n                         .addNewEnv().withName(\"CONSUMER_TLS\" + envVariablesSuffix).withValue(\"TRUE\").endEnv()\n                         .addNewEnv().withName(\"CA_LOCATION\" + envVariablesSuffix).withValue(caSecretMountPoint).endEnv()\n-                        .addNewEnv().withName(\"TRUSTSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\"  + kafkaUserName + \"-truststore.p12\").endEnv();\n+                        .addNewEnv().withName(\"TRUSTSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\" + kafkaUserName + \"-truststore.p12\").endEnv();\n \n                     if (tlsUser) {\n                         containerBuilder.addNewEnv().withName(\"KEYSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\" + kafkaUserName + \"-keystore.p12\").endEnv();\n                     }\n \n                     podSpecBuilder\n                         .addNewVolume()\n-                            .withName(clusterCaSecretVolumeName)\n-                            .withNewSecret()\n-                                .withSecretName(clusterCaSecretName)\n-                            .endSecret()\n+                        .withName(clusterCaSecretVolumeName)\n+                        .withNewSecret()\n+                        .withSecretName(clusterCaSecretName)\n+                        .endSecret()", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NTMxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488465315", "bodyText": "Yes sorry, maybe problem when I was moving the code.", "author": "im-konge", "createdAt": "2020-09-15T08:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2MzAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "05ddfefbec07116c1021922f3cedfe7ded02222a", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\nindex cf4ac2209e..dae9bc374f 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\n\n@@ -165,13 +169,21 @@ public abstract class KafkaClientsResource {\n \n                     containerBuilder\n                         .addNewVolumeMount()\n-                        .withName(clusterCaSecretVolumeName)\n-                        .withMountPath(caSecretMountPoint)\n+                            .withName(clusterCaSecretVolumeName)\n+                            .withMountPath(caSecretMountPoint)\n                         .endVolumeMount()\n-                        .addNewEnv().withName(\"PRODUCER_TLS\" + envVariablesSuffix).withValue(\"TRUE\").endEnv()\n-                        .addNewEnv().withName(\"CONSUMER_TLS\" + envVariablesSuffix).withValue(\"TRUE\").endEnv()\n-                        .addNewEnv().withName(\"CA_LOCATION\" + envVariablesSuffix).withValue(caSecretMountPoint).endEnv()\n-                        .addNewEnv().withName(\"TRUSTSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\" + kafkaUserName + \"-truststore.p12\").endEnv();\n+                        .addNewEnv()\n+                            .withName(\"PRODUCER_TLS\" + envVariablesSuffix).withValue(\"TRUE\")\n+                        .endEnv()\n+                        .addNewEnv()\n+                            .withName(\"CONSUMER_TLS\" + envVariablesSuffix).withValue(\"TRUE\")\n+                        .endEnv()\n+                        .addNewEnv()\n+                            .withName(\"CA_LOCATION\" + envVariablesSuffix).withValue(caSecretMountPoint)\n+                        .endEnv()\n+                        .addNewEnv()\n+                            .withName(\"TRUSTSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\" + kafkaUserName + \"-truststore.p12\")\n+                        .endEnv();\n \n                     if (tlsUser) {\n                         containerBuilder.addNewEnv().withName(\"KEYSTORE_LOCATION\" + envVariablesSuffix).withValue(\"/tmp/\" + kafkaUserName + \"-keystore.p12\").endEnv();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2Mzg2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488463869", "bodyText": "Is this just a server or address? I do not see any withBootstrapPort ... so maeby naming it withBootstrapAddress would be better to make it more clear it is server+port?", "author": "scholzj", "createdAt": "2020-09-15T07:57:49Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources.crd.kafkaclients;\n+\n+import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n+import io.fabric8.kubernetes.api.model.batch.JobBuilder;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.security.InvalidParameterException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public abstract class KafkaBasicExampleClients {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaBasicExampleClients.class);\n+\n+    protected String producerName;\n+    protected String consumerName;\n+    protected String bootstrapServer;\n+    protected String topicName;\n+    protected int messageCount;\n+    protected String additionalConfig;\n+    protected String consumerGroup;\n+    protected long delayMs;\n+\n+    public abstract static class Builder<T extends Builder<T>> {\n+        private String producerName;\n+        private String consumerName;\n+        private String bootstrapServer;\n+        private String topicName;\n+        private int messageCount;\n+        private String additionalConfig;\n+        private String consumerGroup;\n+        private long delayMs;\n+\n+        public T withProducerName(String producerName) {\n+            this.producerName = producerName;\n+            return self();\n+        }\n+\n+        public T withConsumerName(String consumerName) {\n+            this.consumerName = consumerName;\n+            return self();\n+        }\n+\n+        public T withBootstrapServer(String bootstrapServer) {", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2NTY5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488465693", "bodyText": "Sure, sounds good, thanks :)", "author": "im-konge", "createdAt": "2020-09-15T08:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2Mzg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java\ndeleted file mode 100644\nindex fc932c5a43..0000000000\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java\n+++ /dev/null\n\n@@ -1,243 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.systemtest.resources.crd.kafkaclients;\n-\n-import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n-import io.fabric8.kubernetes.api.model.batch.JobBuilder;\n-import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.resources.KubernetesResource;\n-import io.strimzi.systemtest.resources.ResourceManager;\n-import io.strimzi.systemtest.utils.ClientUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.security.InvalidParameterException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public abstract class KafkaBasicExampleClients {\n-\n-    private static final Logger LOGGER = LogManager.getLogger(KafkaBasicExampleClients.class);\n-\n-    protected String producerName;\n-    protected String consumerName;\n-    protected String bootstrapServer;\n-    protected String topicName;\n-    protected int messageCount;\n-    protected String additionalConfig;\n-    protected String consumerGroup;\n-    protected long delayMs;\n-\n-    public abstract static class Builder<T extends Builder<T>> {\n-        private String producerName;\n-        private String consumerName;\n-        private String bootstrapServer;\n-        private String topicName;\n-        private int messageCount;\n-        private String additionalConfig;\n-        private String consumerGroup;\n-        private long delayMs;\n-\n-        public T withProducerName(String producerName) {\n-            this.producerName = producerName;\n-            return self();\n-        }\n-\n-        public T withConsumerName(String consumerName) {\n-            this.consumerName = consumerName;\n-            return self();\n-        }\n-\n-        public T withBootstrapServer(String bootstrapServer) {\n-            this.bootstrapServer = bootstrapServer;\n-            return self();\n-        }\n-\n-        public T withTopicName(String topicName) {\n-            this.topicName = topicName;\n-            return self();\n-        }\n-\n-        public T withMessageCount(int messageCount) {\n-            this.messageCount = messageCount;\n-            return self();\n-        }\n-\n-        public T withAdditionalConfig(String additionalConfig) {\n-            this.additionalConfig = additionalConfig;\n-            return self();\n-        }\n-\n-        public T withConsumerGroup(String consumerGroup) {\n-            this.consumerGroup = consumerGroup;\n-            return self();\n-        }\n-\n-        public T withDelayMs(long delayMs) {\n-            this.delayMs = delayMs;\n-            return self();\n-        }\n-\n-        protected abstract KafkaBasicExampleClients build();\n-\n-        protected abstract T self();\n-    }\n-\n-    protected KafkaBasicExampleClients(Builder<?> builder) {\n-        if (builder.topicName == null || builder.topicName.isEmpty()) throw new InvalidParameterException(\"Topic name is not set.\");\n-        if (builder.bootstrapServer == null || builder.bootstrapServer.isEmpty()) throw new InvalidParameterException(\"Bootstrap server is not set.\");\n-        if (builder.messageCount <= 0) throw  new InvalidParameterException(\"Message count is less than 1\");\n-        if (builder.consumerGroup == null || builder.consumerGroup.isEmpty()) {\n-            LOGGER.info(\"Consumer group were not specified going to create the random one.\");\n-            builder.consumerGroup = ClientUtils.generateRandomConsumerGroup();\n-        }\n-\n-        producerName = builder.producerName;\n-        consumerName = builder.consumerName;\n-        bootstrapServer = builder.bootstrapServer;\n-        topicName = builder.topicName;\n-        messageCount = builder.messageCount;\n-        additionalConfig = builder.additionalConfig;\n-        consumerGroup = builder.consumerGroup;\n-        delayMs = builder.delayMs;\n-    }\n-\n-    public void setTopicName(String topicName) {\n-        this.topicName = topicName;\n-    }\n-\n-    public void setConsumerGroup(String consumerGroup) {\n-        this.consumerGroup = consumerGroup;\n-    }\n-\n-\n-    public DoneableJob producerStrimzi() {\n-        if (producerName == null || producerName.isEmpty()) throw new InvalidParameterException(\"Producer name is not set.\");\n-\n-        Map<String, String> producerLabels = new HashMap<>();\n-        producerLabels.put(\"app\", producerName);\n-        producerLabels.put(Constants.KAFKA_CLIENTS_LABEL_KEY, Constants.KAFKA_CLIENTS_LABEL_VALUE);\n-\n-        return KubernetesResource.deployNewJob(new JobBuilder()\n-            .withNewMetadata()\n-                .withNamespace(ResourceManager.kubeClient().getNamespace())\n-                .withLabels(producerLabels)\n-                .withName(producerName)\n-            .endMetadata()\n-            .withNewSpec()\n-                .withNewTemplate()\n-                    .withNewMetadata()\n-                        .withLabels(producerLabels)\n-                    .endMetadata()\n-                    .withNewSpec()\n-                        .withRestartPolicy(\"Never\")\n-                        .withContainers()\n-                            .addNewContainer()\n-                                .withName(producerName)\n-                                .withImagePullPolicy(Constants.IF_NOT_PRESENT_IMAGE_PULL_POLICY)\n-                                .withImage(\"strimzi/hello-world-producer:latest\")\n-                                .addNewEnv()\n-                                    .withName(\"BOOTSTRAP_SERVERS\")\n-                                    .withValue(bootstrapServer)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"TOPIC\")\n-                                    .withValue(topicName)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"DELAY_MS\")\n-                                    .withValue(String.valueOf(delayMs))\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"LOG_LEVEL\")\n-                                    .withValue(\"DEBUG\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"MESSAGE_COUNT\")\n-                                    .withValue(String.valueOf(messageCount))\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"MESSAGE\")\n-                                    .withValue(\"Hello-world\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"PRODUCER_ACKS\")\n-                                    .withValue(\"all\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"ADDITIONAL_CONFIG\")\n-                                    .withValue(additionalConfig)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"BLOCKING_PRODUCER\")\n-                                    .withValue(\"true\")\n-                                .endEnv()\n-                            .endContainer()\n-                    .endSpec()\n-                .endTemplate()\n-            .endSpec()\n-            .build());\n-    }\n-\n-    public DoneableJob consumerStrimzi() {\n-        if (consumerName == null || consumerName.isEmpty()) throw new InvalidParameterException(\"Consumer name is not set.\");\n-\n-        Map<String, String> consumerLabels = new HashMap<>();\n-        consumerLabels.put(\"app\", consumerName);\n-        consumerLabels.put(Constants.KAFKA_CLIENTS_LABEL_KEY, Constants.KAFKA_CLIENTS_LABEL_VALUE);\n-\n-        return KubernetesResource.deployNewJob(new JobBuilder()\n-            .withNewMetadata()\n-                .withNamespace(ResourceManager.kubeClient().getNamespace())\n-                .withLabels(consumerLabels)\n-                .withName(consumerName)\n-            .endMetadata()\n-            .withNewSpec()\n-            .withNewTemplate()\n-                .withNewMetadata()\n-                    .withLabels(consumerLabels)\n-                .endMetadata()\n-                .withNewSpec()\n-                    .withRestartPolicy(\"Never\")\n-                    .withContainers()\n-                        .addNewContainer()\n-                            .withName(consumerName)\n-                            .withImagePullPolicy(Constants.IF_NOT_PRESENT_IMAGE_PULL_POLICY)\n-                            .withImage(\"strimzi/hello-world-consumer:latest\")\n-                            .addNewEnv()\n-                                .withName(\"BOOTSTRAP_SERVERS\")\n-                                .withValue(bootstrapServer)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"TOPIC\")\n-                                .withValue(topicName)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"DELAY_MS\")\n-                                .withValue(String.valueOf(delayMs))\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"LOG_LEVEL\")\n-                                .withValue(\"DEBUG\")\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"MESSAGE_COUNT\")\n-                                .withValue(String.valueOf(messageCount))\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"GROUP_ID\")\n-                                .withValue(consumerGroup)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"ADDITIONAL_CONFIG\")\n-                                .withValue(additionalConfig)\n-                            .endEnv()\n-                        .endContainer()\n-                .endSpec()\n-            .endTemplate()\n-            .endSpec()\n-            .build());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDI0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488524240", "bodyText": "When do you want to send 0 messages? :D", "author": "see-quick", "createdAt": "2020-09-15T09:32:51Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources.crd.kafkaclients;\n+\n+import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n+import io.fabric8.kubernetes.api.model.batch.JobBuilder;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.KubernetesResource;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.utils.ClientUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.security.InvalidParameterException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public abstract class KafkaBasicExampleClients {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KafkaBasicExampleClients.class);\n+\n+    protected String producerName;\n+    protected String consumerName;\n+    protected String bootstrapServer;\n+    protected String topicName;\n+    protected int messageCount;\n+    protected String additionalConfig;\n+    protected String consumerGroup;\n+    protected long delayMs;\n+\n+    public abstract static class Builder<T extends Builder<T>> {\n+        private String producerName;\n+        private String consumerName;\n+        private String bootstrapServer;\n+        private String topicName;\n+        private int messageCount;\n+        private String additionalConfig;\n+        private String consumerGroup;\n+        private long delayMs;\n+\n+        public T withProducerName(String producerName) {\n+            this.producerName = producerName;\n+            return self();\n+        }\n+\n+        public T withConsumerName(String consumerName) {\n+            this.consumerName = consumerName;\n+            return self();\n+        }\n+\n+        public T withBootstrapServer(String bootstrapServer) {\n+            this.bootstrapServer = bootstrapServer;\n+            return self();\n+        }\n+\n+        public T withTopicName(String topicName) {\n+            this.topicName = topicName;\n+            return self();\n+        }\n+\n+        public T withMessageCount(int messageCount) {\n+            this.messageCount = messageCount;\n+            return self();\n+        }\n+\n+        public T withAdditionalConfig(String additionalConfig) {\n+            this.additionalConfig = additionalConfig;\n+            return self();\n+        }\n+\n+        public T withConsumerGroup(String consumerGroup) {\n+            this.consumerGroup = consumerGroup;\n+            return self();\n+        }\n+\n+        public T withDelayMs(long delayMs) {\n+            this.delayMs = delayMs;\n+            return self();\n+        }\n+\n+        protected abstract KafkaBasicExampleClients build();\n+\n+        protected abstract T self();\n+    }\n+\n+    protected KafkaBasicExampleClients(Builder<?> builder) {\n+        if (builder.topicName == null || builder.topicName.isEmpty()) throw new InvalidParameterException(\"Topic name is not set.\");\n+        if (builder.bootstrapServer == null || builder.bootstrapServer.isEmpty()) throw new InvalidParameterException(\"Bootstrap server is not set.\");\n+        if (builder.messageCount <= 0) throw  new InvalidParameterException(\"Message count is less than 1\");", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzMjI4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488532289", "bodyText": "(you have it in your builder too :D)", "author": "im-konge", "createdAt": "2020-09-15T09:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzMjQ2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488532461", "bodyText": "Gonna change it everywhere", "author": "im-konge", "createdAt": "2020-09-15T09:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNDI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java\ndeleted file mode 100644\nindex fc932c5a43..0000000000\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBasicExampleClients.java\n+++ /dev/null\n\n@@ -1,243 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.systemtest.resources.crd.kafkaclients;\n-\n-import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n-import io.fabric8.kubernetes.api.model.batch.JobBuilder;\n-import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.resources.KubernetesResource;\n-import io.strimzi.systemtest.resources.ResourceManager;\n-import io.strimzi.systemtest.utils.ClientUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import java.security.InvalidParameterException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public abstract class KafkaBasicExampleClients {\n-\n-    private static final Logger LOGGER = LogManager.getLogger(KafkaBasicExampleClients.class);\n-\n-    protected String producerName;\n-    protected String consumerName;\n-    protected String bootstrapServer;\n-    protected String topicName;\n-    protected int messageCount;\n-    protected String additionalConfig;\n-    protected String consumerGroup;\n-    protected long delayMs;\n-\n-    public abstract static class Builder<T extends Builder<T>> {\n-        private String producerName;\n-        private String consumerName;\n-        private String bootstrapServer;\n-        private String topicName;\n-        private int messageCount;\n-        private String additionalConfig;\n-        private String consumerGroup;\n-        private long delayMs;\n-\n-        public T withProducerName(String producerName) {\n-            this.producerName = producerName;\n-            return self();\n-        }\n-\n-        public T withConsumerName(String consumerName) {\n-            this.consumerName = consumerName;\n-            return self();\n-        }\n-\n-        public T withBootstrapServer(String bootstrapServer) {\n-            this.bootstrapServer = bootstrapServer;\n-            return self();\n-        }\n-\n-        public T withTopicName(String topicName) {\n-            this.topicName = topicName;\n-            return self();\n-        }\n-\n-        public T withMessageCount(int messageCount) {\n-            this.messageCount = messageCount;\n-            return self();\n-        }\n-\n-        public T withAdditionalConfig(String additionalConfig) {\n-            this.additionalConfig = additionalConfig;\n-            return self();\n-        }\n-\n-        public T withConsumerGroup(String consumerGroup) {\n-            this.consumerGroup = consumerGroup;\n-            return self();\n-        }\n-\n-        public T withDelayMs(long delayMs) {\n-            this.delayMs = delayMs;\n-            return self();\n-        }\n-\n-        protected abstract KafkaBasicExampleClients build();\n-\n-        protected abstract T self();\n-    }\n-\n-    protected KafkaBasicExampleClients(Builder<?> builder) {\n-        if (builder.topicName == null || builder.topicName.isEmpty()) throw new InvalidParameterException(\"Topic name is not set.\");\n-        if (builder.bootstrapServer == null || builder.bootstrapServer.isEmpty()) throw new InvalidParameterException(\"Bootstrap server is not set.\");\n-        if (builder.messageCount <= 0) throw  new InvalidParameterException(\"Message count is less than 1\");\n-        if (builder.consumerGroup == null || builder.consumerGroup.isEmpty()) {\n-            LOGGER.info(\"Consumer group were not specified going to create the random one.\");\n-            builder.consumerGroup = ClientUtils.generateRandomConsumerGroup();\n-        }\n-\n-        producerName = builder.producerName;\n-        consumerName = builder.consumerName;\n-        bootstrapServer = builder.bootstrapServer;\n-        topicName = builder.topicName;\n-        messageCount = builder.messageCount;\n-        additionalConfig = builder.additionalConfig;\n-        consumerGroup = builder.consumerGroup;\n-        delayMs = builder.delayMs;\n-    }\n-\n-    public void setTopicName(String topicName) {\n-        this.topicName = topicName;\n-    }\n-\n-    public void setConsumerGroup(String consumerGroup) {\n-        this.consumerGroup = consumerGroup;\n-    }\n-\n-\n-    public DoneableJob producerStrimzi() {\n-        if (producerName == null || producerName.isEmpty()) throw new InvalidParameterException(\"Producer name is not set.\");\n-\n-        Map<String, String> producerLabels = new HashMap<>();\n-        producerLabels.put(\"app\", producerName);\n-        producerLabels.put(Constants.KAFKA_CLIENTS_LABEL_KEY, Constants.KAFKA_CLIENTS_LABEL_VALUE);\n-\n-        return KubernetesResource.deployNewJob(new JobBuilder()\n-            .withNewMetadata()\n-                .withNamespace(ResourceManager.kubeClient().getNamespace())\n-                .withLabels(producerLabels)\n-                .withName(producerName)\n-            .endMetadata()\n-            .withNewSpec()\n-                .withNewTemplate()\n-                    .withNewMetadata()\n-                        .withLabels(producerLabels)\n-                    .endMetadata()\n-                    .withNewSpec()\n-                        .withRestartPolicy(\"Never\")\n-                        .withContainers()\n-                            .addNewContainer()\n-                                .withName(producerName)\n-                                .withImagePullPolicy(Constants.IF_NOT_PRESENT_IMAGE_PULL_POLICY)\n-                                .withImage(\"strimzi/hello-world-producer:latest\")\n-                                .addNewEnv()\n-                                    .withName(\"BOOTSTRAP_SERVERS\")\n-                                    .withValue(bootstrapServer)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"TOPIC\")\n-                                    .withValue(topicName)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"DELAY_MS\")\n-                                    .withValue(String.valueOf(delayMs))\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"LOG_LEVEL\")\n-                                    .withValue(\"DEBUG\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"MESSAGE_COUNT\")\n-                                    .withValue(String.valueOf(messageCount))\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"MESSAGE\")\n-                                    .withValue(\"Hello-world\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"PRODUCER_ACKS\")\n-                                    .withValue(\"all\")\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"ADDITIONAL_CONFIG\")\n-                                    .withValue(additionalConfig)\n-                                .endEnv()\n-                                .addNewEnv()\n-                                    .withName(\"BLOCKING_PRODUCER\")\n-                                    .withValue(\"true\")\n-                                .endEnv()\n-                            .endContainer()\n-                    .endSpec()\n-                .endTemplate()\n-            .endSpec()\n-            .build());\n-    }\n-\n-    public DoneableJob consumerStrimzi() {\n-        if (consumerName == null || consumerName.isEmpty()) throw new InvalidParameterException(\"Consumer name is not set.\");\n-\n-        Map<String, String> consumerLabels = new HashMap<>();\n-        consumerLabels.put(\"app\", consumerName);\n-        consumerLabels.put(Constants.KAFKA_CLIENTS_LABEL_KEY, Constants.KAFKA_CLIENTS_LABEL_VALUE);\n-\n-        return KubernetesResource.deployNewJob(new JobBuilder()\n-            .withNewMetadata()\n-                .withNamespace(ResourceManager.kubeClient().getNamespace())\n-                .withLabels(consumerLabels)\n-                .withName(consumerName)\n-            .endMetadata()\n-            .withNewSpec()\n-            .withNewTemplate()\n-                .withNewMetadata()\n-                    .withLabels(consumerLabels)\n-                .endMetadata()\n-                .withNewSpec()\n-                    .withRestartPolicy(\"Never\")\n-                    .withContainers()\n-                        .addNewContainer()\n-                            .withName(consumerName)\n-                            .withImagePullPolicy(Constants.IF_NOT_PRESENT_IMAGE_PULL_POLICY)\n-                            .withImage(\"strimzi/hello-world-consumer:latest\")\n-                            .addNewEnv()\n-                                .withName(\"BOOTSTRAP_SERVERS\")\n-                                .withValue(bootstrapServer)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"TOPIC\")\n-                                .withValue(topicName)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"DELAY_MS\")\n-                                .withValue(String.valueOf(delayMs))\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"LOG_LEVEL\")\n-                                .withValue(\"DEBUG\")\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"MESSAGE_COUNT\")\n-                                .withValue(String.valueOf(messageCount))\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"GROUP_ID\")\n-                                .withValue(consumerGroup)\n-                            .endEnv()\n-                            .addNewEnv()\n-                                .withName(\"ADDITIONAL_CONFIG\")\n-                                .withValue(additionalConfig)\n-                            .endEnv()\n-                        .endContainer()\n-                .endSpec()\n-            .endTemplate()\n-            .endSpec()\n-            .build());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNTk1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488525957", "bodyText": "Why it is not final? One of the advantages of the builder pattern is that the objects that are created are immutable.  Marking this as not final you saying that it can be changed...", "author": "see-quick", "createdAt": "2020-09-15T09:35:42Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeExampleClients.java", "diffHunk": "@@ -9,24 +9,48 @@\n import io.strimzi.systemtest.Constants;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n-import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n \n import java.util.HashMap;\n import java.util.Map;\n \n // HTTP Bridge clients\n-public class KafkaBridgeClientsResource extends KafkaClientsResource {\n+public class KafkaBridgeExampleClients extends KafkaBasicExampleClients {\n \n-    private final int port;\n-    private final int pollInterval;", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeClientsResource.java\nsimilarity index 89%\nrename from systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeExampleClients.java\nrename to systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeClientsResource.java\nindex 29926d3b10..9193ee0352 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeExampleClients.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaBridgeClientsResource.java\n\n@@ -9,42 +9,43 @@ import io.fabric8.kubernetes.api.model.batch.JobBuilder;\n import io.strimzi.systemtest.Constants;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n \n import java.util.HashMap;\n import java.util.Map;\n \n // HTTP Bridge clients\n-public class KafkaBridgeExampleClients extends KafkaBasicExampleClients {\n+public class KafkaBridgeClientsResource extends KafkaClientsResource {\n \n     private int port;\n     private int pollInterval;\n \n-    public static class Builder extends KafkaBasicExampleClients.Builder<Builder> {\n+    public static class KafkaBridgeClientsBuilder extends KafkaClientsBuilder<KafkaBridgeClientsResource.KafkaBridgeClientsBuilder> {\n         private int port;\n         private int pollInterval;\n \n-        public Builder withPort(int port) {\n+        public KafkaBridgeClientsBuilder withPort(int port) {\n             this.port = port;\n             return self();\n         }\n \n-        public Builder withPollInterval(int pollInterval) {\n+        public KafkaBridgeClientsBuilder withPollInterval(int pollInterval) {\n             this.pollInterval = pollInterval;\n             return self();\n         }\n \n         @Override\n-        public KafkaBridgeExampleClients build() {\n-            return new KafkaBridgeExampleClients(this);\n+        public KafkaBridgeClientsResource build() {\n+            return new KafkaBridgeClientsResource(this);\n         }\n \n         @Override\n-        protected KafkaBridgeExampleClients.Builder self() {\n+        protected KafkaBridgeClientsResource.KafkaBridgeClientsBuilder self() {\n             return this;\n         }\n     }\n \n-    private KafkaBridgeExampleClients(KafkaBridgeExampleClients.Builder builder) {\n+    private KafkaBridgeClientsResource(KafkaBridgeClientsResource.KafkaBridgeClientsBuilder builder) {\n         super(builder);\n         port = builder.port;\n         pollInterval = builder.pollInterval;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyNjIwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488526205", "bodyText": "Again final?", "author": "see-quick", "createdAt": "2020-09-15T09:36:07Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java", "diffHunk": "@@ -8,52 +8,75 @@\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n-\n-    private final String oauthClientId;\n-    private final String oauthClientSecret;\n-    private final String oauthTokenEndpointUri;\n-    private final String userName;\n-\n-    public KafkaOauthClientsResource(\n-        String producerName, String consumerName, String bootstrapServer, String topicName, int messageCount,\n-        String additionalConfig, String consumerGroup, String oauthClientId, String oauthClientSecret, String oauthTokenEndpointUri) {\n-\n-        super(producerName, consumerName, bootstrapServer, topicName, messageCount, additionalConfig, consumerGroup, 0);\n-        this.oauthClientId = oauthClientId;\n-        this.oauthClientSecret = oauthClientSecret;\n-        this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n-        this.userName = oauthClientId;\n+import java.security.InvalidParameterException;\n+\n+public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n+\n+    private String oauthClientId;\n+    private String oauthClientSecret;\n+    private String oauthTokenEndpointUri;\n+    private String userName;", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\nsimilarity index 87%\nrename from systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\nrename to systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\nindex 14aff859c6..1c04d8551a 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\n\n@@ -8,59 +8,52 @@ import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-import java.security.InvalidParameterException;\n-\n-public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n+public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n \n     private String oauthClientId;\n     private String oauthClientSecret;\n     private String oauthTokenEndpointUri;\n     private String userName;\n \n-    public static class Builder extends KafkaBasicExampleClients.Builder<Builder> {\n+    public static class KafkaOauthClientsBuilder extends KafkaClientsBuilder<KafkaOauthClientsResource.KafkaOauthClientsBuilder> {\n         private String oauthClientId;\n         private String oauthClientSecret;\n         private String oauthTokenEndpointUri;\n         private String userName;\n \n-        public Builder withOAuthClientId(String oauthClientId) {\n+        public KafkaOauthClientsBuilder withOAuthClientId(String oauthClientId) {\n             this.oauthClientId = oauthClientId;\n             return self();\n         }\n \n-        public Builder withOAuthClientSecret(String oauthClientSecret) {\n+        public KafkaOauthClientsBuilder withOAuthClientSecret(String oauthClientSecret) {\n             this.oauthClientSecret = oauthClientSecret;\n             return self();\n         }\n \n-        public Builder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n+        public KafkaOauthClientsBuilder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n             this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n             return self();\n         }\n \n-        public Builder withUserName(String userName) {\n+        public KafkaOauthClientsBuilder withUserName(String userName) {\n             this.userName = userName;\n             return self();\n         }\n \n         @Override\n-        public KafkaOauthExampleClients build() {\n-            return new KafkaOauthExampleClients(this);\n+        public KafkaOauthClientsResource build() {\n+            return new KafkaOauthClientsResource(this);\n         }\n \n         @Override\n-        protected KafkaOauthExampleClients.Builder self() {\n+        protected KafkaOauthClientsResource.KafkaOauthClientsBuilder self() {\n             return this;\n         }\n     }\n \n-    private KafkaOauthExampleClients(KafkaOauthExampleClients.Builder builder) {\n+    private KafkaOauthClientsResource(KafkaOauthClientsResource.KafkaOauthClientsBuilder builder) {\n         super(builder);\n-        if (builder.oauthClientId == null || builder.oauthClientId.isEmpty()) throw new InvalidParameterException(\"OAuth client id is not set.\");\n-        if (builder.oauthClientSecret == null || builder.oauthClientSecret.isEmpty()) throw new InvalidParameterException(\"OAuth client secret is not set.\");\n-        if (builder.oauthTokenEndpointUri == null || builder.oauthTokenEndpointUri.isEmpty()) throw new InvalidParameterException(\"OAuth token endpoint url is not set.\");\n-        if (builder.userName == null || builder.userName.isEmpty()) builder.userName = builder.oauthClientId;\n-\n         oauthClientId = builder.oauthClientId;\n         oauthClientSecret = builder.oauthClientSecret;\n         oauthTokenEndpointUri = builder.oauthTokenEndpointUri;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyODUyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488528526", "bodyText": "I know that I have in my ExternalClients the setters, but that's not good practice. Maybe you could create sometimes that will do this\nOn the created instance of the client just modified the fields and create another.\nKafkaOauthClientsResource client = new KafkaOauthClientsResourceBuilder(anotherClient)\n    .editTopicName(\"something\")\n    .editConsumerName(\"something\")\n    .build();\n\nCreating setters will again break the main meaning of builder pattern.", "author": "see-quick", "createdAt": "2020-09-15T09:39:54Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java", "diffHunk": "@@ -8,52 +8,75 @@\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n-\n-    private final String oauthClientId;\n-    private final String oauthClientSecret;\n-    private final String oauthTokenEndpointUri;\n-    private final String userName;\n-\n-    public KafkaOauthClientsResource(\n-        String producerName, String consumerName, String bootstrapServer, String topicName, int messageCount,\n-        String additionalConfig, String consumerGroup, String oauthClientId, String oauthClientSecret, String oauthTokenEndpointUri) {\n-\n-        super(producerName, consumerName, bootstrapServer, topicName, messageCount, additionalConfig, consumerGroup, 0);\n-        this.oauthClientId = oauthClientId;\n-        this.oauthClientSecret = oauthClientSecret;\n-        this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n-        this.userName = oauthClientId;\n+import java.security.InvalidParameterException;\n+\n+public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n+\n+    private String oauthClientId;\n+    private String oauthClientSecret;\n+    private String oauthTokenEndpointUri;\n+    private String userName;\n+\n+    public static class Builder extends KafkaBasicExampleClients.Builder<Builder> {\n+        private String oauthClientId;\n+        private String oauthClientSecret;\n+        private String oauthTokenEndpointUri;\n+        private String userName;\n+\n+        public Builder withOAuthClientId(String oauthClientId) {\n+            this.oauthClientId = oauthClientId;\n+            return self();\n+        }\n+\n+        public Builder withOAuthClientSecret(String oauthClientSecret) {\n+            this.oauthClientSecret = oauthClientSecret;\n+            return self();\n+        }\n+\n+        public Builder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n+            this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n+            return self();\n+        }\n+\n+        public Builder withUserName(String userName) {\n+            this.userName = userName;\n+            return self();\n+        }\n+\n+        @Override\n+        public KafkaOauthExampleClients build() {\n+            return new KafkaOauthExampleClients(this);\n+        }\n+\n+        @Override\n+        protected KafkaOauthExampleClients.Builder self() {\n+            return this;\n+        }\n     }\n \n-    // from existing client create new client with random consumer group (immutability)\n-    public KafkaOauthClientsResource(KafkaOauthClientsResource kafkaOauthClientsResource) {\n-        super(kafkaOauthClientsResource);\n-        this.oauthClientId = kafkaOauthClientsResource.oauthClientId;\n-        this.oauthClientSecret = kafkaOauthClientsResource.oauthClientSecret;\n-        this.oauthTokenEndpointUri = kafkaOauthClientsResource.oauthTokenEndpointUri;\n-        this.userName = kafkaOauthClientsResource.userName;\n-\n+    private KafkaOauthExampleClients(KafkaOauthExampleClients.Builder builder) {\n+        super(builder);\n+        if (builder.oauthClientId == null || builder.oauthClientId.isEmpty()) throw new InvalidParameterException(\"OAuth client id is not set.\");\n+        if (builder.oauthClientSecret == null || builder.oauthClientSecret.isEmpty()) throw new InvalidParameterException(\"OAuth client secret is not set.\");\n+        if (builder.oauthTokenEndpointUri == null || builder.oauthTokenEndpointUri.isEmpty()) throw new InvalidParameterException(\"OAuth token endpoint url is not set.\");\n+        if (builder.userName == null || builder.userName.isEmpty()) builder.userName = builder.oauthClientId;\n+\n+        oauthClientId = builder.oauthClientId;\n+        oauthClientSecret = builder.oauthClientSecret;\n+        oauthTokenEndpointUri = builder.oauthTokenEndpointUri;\n+        userName = builder.userName;\n     }\n \n-    // from existing client create new client with new specific consumer group and topicName (immutability)\n-    public KafkaOauthClientsResource(KafkaOauthClientsResource kafkaOauthClientsResource, String topicName, String consumerGroup) {\n-        super(kafkaOauthClientsResource, topicName, consumerGroup);\n-        this.oauthClientId = kafkaOauthClientsResource.oauthClientId;\n-        this.oauthClientSecret = kafkaOauthClientsResource.oauthClientSecret;\n-        this.oauthTokenEndpointUri = kafkaOauthClientsResource.oauthTokenEndpointUri;\n-        this.userName = kafkaOauthClientsResource.userName;\n+    public void setTopicName(String topicName) {\n+        this.topicName = topicName;\n+    }\n \n+    public void setConsumerGroup(String consumerGroup) {\n+        this.consumerGroup = consumerGroup;", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\nsimilarity index 87%\nrename from systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\nrename to systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\nindex 14aff859c6..1c04d8551a 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthClientsResource.java\n\n@@ -8,59 +8,52 @@ import io.fabric8.kubernetes.api.model.batch.DoneableJob;\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-import java.security.InvalidParameterException;\n-\n-public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n+public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n \n     private String oauthClientId;\n     private String oauthClientSecret;\n     private String oauthTokenEndpointUri;\n     private String userName;\n \n-    public static class Builder extends KafkaBasicExampleClients.Builder<Builder> {\n+    public static class KafkaOauthClientsBuilder extends KafkaClientsBuilder<KafkaOauthClientsResource.KafkaOauthClientsBuilder> {\n         private String oauthClientId;\n         private String oauthClientSecret;\n         private String oauthTokenEndpointUri;\n         private String userName;\n \n-        public Builder withOAuthClientId(String oauthClientId) {\n+        public KafkaOauthClientsBuilder withOAuthClientId(String oauthClientId) {\n             this.oauthClientId = oauthClientId;\n             return self();\n         }\n \n-        public Builder withOAuthClientSecret(String oauthClientSecret) {\n+        public KafkaOauthClientsBuilder withOAuthClientSecret(String oauthClientSecret) {\n             this.oauthClientSecret = oauthClientSecret;\n             return self();\n         }\n \n-        public Builder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n+        public KafkaOauthClientsBuilder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n             this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n             return self();\n         }\n \n-        public Builder withUserName(String userName) {\n+        public KafkaOauthClientsBuilder withUserName(String userName) {\n             this.userName = userName;\n             return self();\n         }\n \n         @Override\n-        public KafkaOauthExampleClients build() {\n-            return new KafkaOauthExampleClients(this);\n+        public KafkaOauthClientsResource build() {\n+            return new KafkaOauthClientsResource(this);\n         }\n \n         @Override\n-        protected KafkaOauthExampleClients.Builder self() {\n+        protected KafkaOauthClientsResource.KafkaOauthClientsBuilder self() {\n             return this;\n         }\n     }\n \n-    private KafkaOauthExampleClients(KafkaOauthExampleClients.Builder builder) {\n+    private KafkaOauthClientsResource(KafkaOauthClientsResource.KafkaOauthClientsBuilder builder) {\n         super(builder);\n-        if (builder.oauthClientId == null || builder.oauthClientId.isEmpty()) throw new InvalidParameterException(\"OAuth client id is not set.\");\n-        if (builder.oauthClientSecret == null || builder.oauthClientSecret.isEmpty()) throw new InvalidParameterException(\"OAuth client secret is not set.\");\n-        if (builder.oauthTokenEndpointUri == null || builder.oauthTokenEndpointUri.isEmpty()) throw new InvalidParameterException(\"OAuth token endpoint url is not set.\");\n-        if (builder.userName == null || builder.userName.isEmpty()) builder.userName = builder.oauthClientId;\n-\n         oauthClientId = builder.oauthClientId;\n         oauthClientSecret = builder.oauthClientSecret;\n         oauthTokenEndpointUri = builder.oauthTokenEndpointUri;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyODcyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r488528724", "bodyText": "again", "author": "see-quick", "createdAt": "2020-09-15T09:40:12Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingExampleClients.java", "diffHunk": "@@ -8,51 +8,64 @@\n import io.fabric8.kubernetes.api.model.apps.DoneableDeployment;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n-import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-public class KafkaTracingClientsResource extends KafkaClientsResource {\n+public class KafkaTracingExampleClients extends KafkaBasicExampleClients {\n \n     private static final String JAEGER_AGENT_HOST =  \"my-jaeger-agent\";\n     private static final String JAEGER_SAMPLER_TYPE =  \"const\";\n     private static final String JAEGER_SAMPLER_PARAM =  \"1\";\n \n-    private final String jaegerServiceProducerName;\n-    private final String jaegerServiceConsumerName;\n-    private final String jaegerServiceStreamsName;\n+    private String jaegerServiceProducerName;\n+    private String jaegerServiceConsumerName;\n+    private String jaegerServiceStreamsName;", "originalCommit": "978cbc8e300b3787a0d55d08547a284ad52e4175", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4127f32e03088440a858c9b780dfa490c1a0029", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingClientsResource.java\nsimilarity index 92%\nrename from systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingExampleClients.java\nrename to systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingClientsResource.java\nindex e467d6752d..bf21c3dfa2 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingExampleClients.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaTracingClientsResource.java\n\n@@ -8,11 +8,12 @@ import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n import io.fabric8.kubernetes.api.model.apps.DoneableDeployment;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.systemtest.resources.crd.KafkaClientsResource;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-public class KafkaTracingExampleClients extends KafkaBasicExampleClients {\n+public class KafkaTracingClientsResource extends KafkaClientsResource {\n \n     private static final String JAEGER_AGENT_HOST =  \"my-jaeger-agent\";\n     private static final String JAEGER_SAMPLER_TYPE =  \"const\";\n"}}, {"oid": "f4127f32e03088440a858c9b780dfa490c1a0029", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f4127f32e03088440a858c9b780dfa490c1a0029", "message": "first try for the builder of clients\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:44:45Z", "type": "commit"}, {"oid": "bdc6c787229b4c996ed41b748f4a13a71533b240", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bdc6c787229b4c996ed41b748f4a13a71533b240", "message": "some refactor, add methods etc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "b48b798ccbc61c3c6797f51ba40c7e2671e88342", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b48b798ccbc61c3c6797f51ba40c7e2671e88342", "message": "fixup! some refactor, add methods etc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "b399151ede712c2efcdc434ceeb095fb7e14594f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b399151ede712c2efcdc434ceeb095fb7e14594f", "message": "fixup! fixup! some refactor, add methods etc\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "d76723190149195b76b0673cb9ca74e4c1b1f9f3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d76723190149195b76b0673cb9ca74e4c1b1f9f3", "message": "change naming\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "0bb615ba973b8b99e420fcd32a9318367220de96", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0bb615ba973b8b99e420fcd32a9318367220de96", "message": "see-quick comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "05ddfefbec07116c1021922f3cedfe7ded02222a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05ddfefbec07116c1021922f3cedfe7ded02222a", "message": "change the builder and some formatting comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:46:20Z", "type": "commit"}, {"oid": "151a8027ce8ad9ca4712f04c7bb84d36e0f13751", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/151a8027ce8ad9ca4712f04c7bb84d36e0f13751", "message": "rebase\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:55:41Z", "type": "commit"}, {"oid": "151a8027ce8ad9ca4712f04c7bb84d36e0f13751", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/151a8027ce8ad9ca4712f04c7bb84d36e0f13751", "message": "rebase\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T15:55:41Z", "type": "forcePushed"}, {"oid": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/468193464e3f6f1eeb21aed86928b03159cf9e2b", "message": "fixup! rebase\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-21T16:33:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTYzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492251635", "bodyText": "is that change desired? It open doors for troubles I think.", "author": "Frawless", "createdAt": "2020-09-21T18:08:11Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/AbstractKafkaClient.java", "diffHunk": "@@ -108,7 +108,7 @@ protected AbstractKafkaClient(Builder<?> builder) {\n         if (builder.topicName == null || builder.topicName.isEmpty()) throw new InvalidParameterException(\"Topic name is not set.\");\n         if (builder.namespaceName == null || builder.namespaceName.isEmpty()) throw new InvalidParameterException(\"Namespace name is not set.\");\n         if (builder.clusterName == null  || builder.clusterName.isEmpty()) throw  new InvalidParameterException(\"Cluster name is not set.\");\n-        if (builder.messageCount <= 0) throw  new InvalidParameterException(\"Message count is less than 1\");\n+        if (builder.messageCount == 0) throw  new InvalidParameterException(\"Message count is less than 1\");", "originalCommit": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2Njc3OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492266779", "bodyText": "Well @see-quick had comment that we never want to send less than one message. So I changed it in both example clients and AbstractKafkaClient.. I think that better it will be with the <= :)", "author": "im-konge", "createdAt": "2020-09-21T18:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NDg2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492294862", "bodyText": "I thought that there was (builder.messageCount < 0) which means you can also send 0 messages. That's was I was referring to. Anyway, (builder.messageCount <= 0) is the best option here.", "author": "see-quick", "createdAt": "2020-09-21T19:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7636818aa4680da59bfea43a402a695dc54a4d4e", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/AbstractKafkaClient.java b/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/AbstractKafkaClient.java\nindex 1d8c34d886..207f694480 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/AbstractKafkaClient.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/kafkaclients/AbstractKafkaClient.java\n\n@@ -108,7 +108,7 @@ public abstract class AbstractKafkaClient {\n         if (builder.topicName == null || builder.topicName.isEmpty()) throw new InvalidParameterException(\"Topic name is not set.\");\n         if (builder.namespaceName == null || builder.namespaceName.isEmpty()) throw new InvalidParameterException(\"Namespace name is not set.\");\n         if (builder.clusterName == null  || builder.clusterName.isEmpty()) throw  new InvalidParameterException(\"Cluster name is not set.\");\n-        if (builder.messageCount == 0) throw  new InvalidParameterException(\"Message count is less than 1\");\n+        if (builder.messageCount <= 0) throw  new InvalidParameterException(\"Message count is less than 1\");\n         if (builder.consumerGroup == null || builder.consumerGroup.isEmpty()) {\n             LOGGER.info(\"Consumer group were not specified going to create the random one.\");\n             builder.consumerGroup = ClientUtils.generateRandomConsumerGroup();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzM2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492253364", "bodyText": "why you removed a space here?", "author": "Frawless", "createdAt": "2020-09-21T18:11:19Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java", "diffHunk": "@@ -117,7 +72,7 @@ public static DoneableDeployment deployKafkaClients(boolean tlsListener, String\n         return KubernetesResource.deployNewDeployment(kafkaClient);\n     }\n \n-    private static PodSpec createClientSpec(boolean tlsListener, String kafkaClientsName, boolean hostnameVerification, KafkaUser... kafkaUsers) {\n+    private static PodSpec createClientSpec(boolean tlsListener, String kafkaClientsName, boolean hostnameVerification, KafkaUser...kafkaUsers) {", "originalCommit": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI2NzY2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492267661", "bodyText": "Some \"refactor\" leftover and \"miss click\", thanks :)", "author": "im-konge", "createdAt": "2020-09-21T18:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7636818aa4680da59bfea43a402a695dc54a4d4e", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\nindex dae9bc374f..4deb79d8a4 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaClientsResource.java\n\n@@ -72,7 +72,7 @@ public class KafkaClientsResource {\n         return KubernetesResource.deployNewDeployment(kafkaClient);\n     }\n \n-    private static PodSpec createClientSpec(boolean tlsListener, String kafkaClientsName, boolean hostnameVerification, KafkaUser...kafkaUsers) {\n+    private static PodSpec createClientSpec(boolean tlsListener, String kafkaClientsName, boolean hostnameVerification, KafkaUser... kafkaUsers) {\n         PodSpecBuilder podSpecBuilder = new PodSpecBuilder();\n         ContainerBuilder containerBuilder = new ContainerBuilder()\n             .withName(kafkaClientsName)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODIwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492298203", "bodyText": "Here you are mixing two things. The explicit casting of the Builder and using my implementation self(), which encapsulate this casting.", "author": "see-quick", "createdAt": "2020-09-21T19:32:34Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java", "diffHunk": "@@ -8,52 +8,138 @@\n import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.keycloak.KeycloakInstance;\n \n-public class KafkaOauthClientsResource extends KafkaBasicClientResource {\n+import java.security.InvalidParameterException;\n+\n+public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n \n     private final String oauthClientId;\n     private final String oauthClientSecret;\n     private final String oauthTokenEndpointUri;\n     private final String userName;\n \n-    public KafkaOauthClientsResource(\n-        String producerName, String consumerName, String bootstrapServer, String topicName, int messageCount,\n-        String additionalConfig, String consumerGroup, String oauthClientId, String oauthClientSecret, String oauthTokenEndpointUri) {\n+    public static class Builder extends KafkaBasicExampleClients.Builder {\n+        private String oauthClientId;\n+        private String oauthClientSecret;\n+        private String oauthTokenEndpointUri;\n+        private String userName;\n+\n+        public Builder withOAuthClientId(String oauthClientId) {\n+            this.oauthClientId = oauthClientId;\n+            return self();\n+        }\n+\n+        public Builder withOAuthClientSecret(String oauthClientSecret) {\n+            this.oauthClientSecret = oauthClientSecret;\n+            return self();\n+        }\n+\n+        public Builder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n+            this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n+            return self();\n+        }\n+\n+        public Builder withUserName(String userName) {\n+            this.userName = userName;\n+            return self();\n+        }\n+\n+        @Override\n+        public Builder withProducerName(String producerName) {\n+            return (Builder) super.withProducerName(producerName);\n+        }", "originalCommit": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5NTQwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492495405", "bodyText": "Well I removed the self() method and keep only return this in cases which are specific -> for Oauth example client is withOAuthClientId.. etc.\nFor the method that I'm overriding I keep the return (Builder) super. .. as we want to use the methods from the KafkaBasicExampleClients. If I do it with return self() or return this here, the methods will not work -> as they don't have access on it.\nCan it be like that?", "author": "im-konge", "createdAt": "2020-09-22T06:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "7636818aa4680da59bfea43a402a695dc54a4d4e", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\nindex d5428b7780..4b01220d83 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/crd/kafkaclients/KafkaOauthExampleClients.java\n\n@@ -25,22 +25,22 @@ public class KafkaOauthExampleClients extends KafkaBasicExampleClients {\n \n         public Builder withOAuthClientId(String oauthClientId) {\n             this.oauthClientId = oauthClientId;\n-            return self();\n+            return this;\n         }\n \n         public Builder withOAuthClientSecret(String oauthClientSecret) {\n             this.oauthClientSecret = oauthClientSecret;\n-            return self();\n+            return this;\n         }\n \n         public Builder withOAuthTokenEndpointUri(String oauthTokenEndpointUri) {\n             this.oauthTokenEndpointUri = oauthTokenEndpointUri;\n-            return self();\n+            return this;\n         }\n \n         public Builder withUserName(String userName) {\n             this.userName = userName;\n-            return self();\n+            return this;\n         }\n \n         @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODc0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492298743", "bodyText": "Here will be 0? Not the 1000?", "author": "see-quick", "createdAt": "2020-09-21T19:33:38Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "diffHunk": "@@ -652,12 +651,24 @@ void testMirrorMaker2CorrectlyMirrorsHeaders() {\n \n         //deploying example clients for checking if mm2 will mirror messages with headers\n \n-        KafkaBasicClientResource targetKafkaClientsJob = new KafkaBasicClientResource(\"\", targetConsumerName,\n-            KafkaResources.plainBootstrapAddress(kafkaClusterTargetName), targetExampleTopic, messageCount, \"\", ClientUtils.generateRandomConsumerGroup(), 1000);\n+        KafkaBasicExampleClients targetKafkaClientsJob = new KafkaBasicExampleClients.Builder()\n+            .withConsumerName(targetConsumerName)\n+            .withBootstrapAddress(KafkaResources.plainBootstrapAddress(kafkaClusterTargetName))\n+            .withTopicName(targetExampleTopic)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withDelayMs(0)", "originalCommit": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ5NTYxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492495610", "bodyText": "Good catch, that's rebasing fault \ud83d\ude04", "author": "im-konge", "createdAt": "2020-09-22T06:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7636818aa4680da59bfea43a402a695dc54a4d4e", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\nindex 8c0c4924b0..3cc27db741 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\n\n@@ -656,7 +656,7 @@ class MirrorMaker2ST extends AbstractST {\n             .withBootstrapAddress(KafkaResources.plainBootstrapAddress(kafkaClusterTargetName))\n             .withTopicName(targetExampleTopic)\n             .withMessageCount(MESSAGE_COUNT)\n-            .withDelayMs(0)\n+            .withDelayMs(1000)\n             .build();\n \n         targetKafkaClientsJob.consumerStrimzi().done();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5ODg4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3619#discussion_r492298886", "bodyText": "Same here?", "author": "see-quick", "createdAt": "2020-09-21T19:33:59Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java", "diffHunk": "@@ -652,12 +651,24 @@ void testMirrorMaker2CorrectlyMirrorsHeaders() {\n \n         //deploying example clients for checking if mm2 will mirror messages with headers\n \n-        KafkaBasicClientResource targetKafkaClientsJob = new KafkaBasicClientResource(\"\", targetConsumerName,\n-            KafkaResources.plainBootstrapAddress(kafkaClusterTargetName), targetExampleTopic, messageCount, \"\", ClientUtils.generateRandomConsumerGroup(), 1000);\n+        KafkaBasicExampleClients targetKafkaClientsJob = new KafkaBasicExampleClients.Builder()\n+            .withConsumerName(targetConsumerName)\n+            .withBootstrapAddress(KafkaResources.plainBootstrapAddress(kafkaClusterTargetName))\n+            .withTopicName(targetExampleTopic)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withDelayMs(0)\n+            .build();\n+\n         targetKafkaClientsJob.consumerStrimzi().done();\n \n-        KafkaBasicClientResource sourceKafkaClientsJob = new KafkaBasicClientResource(sourceProducerName, \"\",\n-            KafkaResources.plainBootstrapAddress(kafkaClusterSourceName), sourceExampleTopic, messageCount, \"\", ClientUtils.generateRandomConsumerGroup(), 1000);\n+        KafkaBasicExampleClients sourceKafkaClientsJob = new KafkaBasicExampleClients.Builder()\n+            .withProducerName(sourceProducerName)\n+            .withBootstrapAddress(KafkaResources.plainBootstrapAddress(kafkaClusterSourceName))\n+            .withTopicName(sourceExampleTopic)\n+            .withMessageCount(MESSAGE_COUNT)\n+            .withDelayMs(0)", "originalCommit": "468193464e3f6f1eeb21aed86928b03159cf9e2b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7636818aa4680da59bfea43a402a695dc54a4d4e", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\nindex 8c0c4924b0..3cc27db741 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMaker2ST.java\n\n@@ -656,7 +656,7 @@ class MirrorMaker2ST extends AbstractST {\n             .withBootstrapAddress(KafkaResources.plainBootstrapAddress(kafkaClusterTargetName))\n             .withTopicName(targetExampleTopic)\n             .withMessageCount(MESSAGE_COUNT)\n-            .withDelayMs(0)\n+            .withDelayMs(1000)\n             .build();\n \n         targetKafkaClientsJob.consumerStrimzi().done();\n"}}, {"oid": "7636818aa4680da59bfea43a402a695dc54a4d4e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7636818aa4680da59bfea43a402a695dc54a4d4e", "message": "comments and fixes\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-22T06:41:00Z", "type": "commit"}]}