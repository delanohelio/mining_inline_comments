{"pr_number": 3132, "pr_title": "To fix", "pr_createdAt": "2020-06-02T13:00:50Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132", "timeline": [{"oid": "b331bfd6666300a48eba85b3085774cb6fb90027", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b331bfd6666300a48eba85b3085774cb6fb90027", "message": "Rewrite KafkaImpl to use Futures everywhere\n\n* Add a test\n* Change how deleteTopic works slightly, so an exception from the AdminClient\n  causes Util.waitFor to fail its returned future immediately.\n* Fix a log message\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-06-02T11:53:44Z", "type": "commit"}, {"oid": "a6cf626495831ce86ef77828baae43886edd33cc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a6cf626495831ce86ef77828baae43886edd33cc", "message": "Javadoc\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-06-02T12:00:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDI0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r433864240", "bodyText": "I am just curious. What is the semantics of these files inside the system-test module?", "author": "see-quick", "createdAt": "2020-06-02T13:14:02Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/upgrade/MappedYamlArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.upgrade;\n+\n+public class MappedYamlArgumentsProvider {\n+}", "originalCommit": "a6cf626495831ce86ef77828baae43886edd33cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODA4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r433918080", "bodyText": "Ah, damn! I committed this by accident.\nFor context, I was trying to add assertions to the update ST and I found I didn't really like the @JsonFileResource as a way to supply arguments to the parameterised test, because:\n\nThere's no documentation of the fields, so it's difficult to come along and figure out how to write the JSON to test a particular scenario.\nIf you're only interested in your scenario you have to run the test with all the combinations before you can pick out the individual scenario you added.\n\nSo I was messing about with writing something which functioned a lot like @JsonFileResource but:\n\nUsed YAML rather than JSON (thus supporting comments, solving problem 2).\nUses the Jackson YAMLMapper to provide typed arguments to the test method, with classes for the Upgrade, Images, EnvironmentInfo etc. This would proved a place to document what all those properties are for.\n\nAnother advantage would be extra type safety in those tests.\nAnyway, I didn't open a PR for this because I felt it would be a time sink to push it through, but I still believe it would be an improvement.", "author": "tombentley", "createdAt": "2020-06-02T14:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NDI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "64f62d10a421b850bdaa053352a03311e4129a57", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/upgrade/MappedYamlArgumentsProvider.java b/systemtest/src/test/java/io/strimzi/systemtest/upgrade/MappedYamlArgumentsProvider.java\ndeleted file mode 100644\nindex d1a204671..000000000\n--- a/systemtest/src/test/java/io/strimzi/systemtest/upgrade/MappedYamlArgumentsProvider.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.systemtest.upgrade;\n-\n-public class MappedYamlArgumentsProvider {\n-}\n"}}, {"oid": "64f62d10a421b850bdaa053352a03311e4129a57", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/64f62d10a421b850bdaa053352a03311e4129a57", "message": "Oops\n\nSigned-off-by: Tom Bentley <tbentley@redhat.com>", "committedDate": "2020-06-02T14:26:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NTU2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r435145568", "bodyText": "it's something not actually related to the fix but tbh I am starting to really hate the \"static import\". From the code, it's not clear that singleton is coming from Collections but it could be a private method doing something related to singleton pattern. Tbh I would prefer to be explicit. Of course, it's not a change you have to do if you like \"static import\". I think that it makes the code less readable.", "author": "ppatierno", "createdAt": "2020-06-04T10:15:51Z", "path": "topic-operator/src/main/java/io/strimzi/operator/topic/KafkaImpl.java", "diffHunk": "@@ -222,75 +56,88 @@ protected void queueWork(Work work) {\n         Promise<Void> handler = Promise.promise();\n         LOGGER.debug(\"Deleting topic {}\", topicName);\n         KafkaFuture<Void> future = adminClient.deleteTopics(\n-                Collections.singleton(topicName.toString())).values().get(topicName.toString());\n-        queueWork(new UniWork<>(\"deleteTopic\", future, handler));\n-        return handler.future().compose(ig ->\n+                singleton(topicName.toString())).values().get(topicName.toString());\n+        mapFuture(future).compose(ig ->\n                 Util.waitFor(vertx, \"deleted sync \" + topicName, \"deleted\", 1000, 120_000, () -> {\n                     try {\n-                        return adminClient.describeTopics(Collections.singleton(topicName.toString())).all().get().get(topicName.toString()) == null;\n+                        return adminClient.describeTopics(singleton(topicName.toString())).all().get().get(topicName.toString()) == null;", "originalCommit": "64f62d10a421b850bdaa053352a03311e4129a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NjY1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3132#discussion_r435166652", "bodyText": "We've discussed this before, and I think it depends on the familiarity of the methods being imported. If it was emptyList() or asList() I'm guessing you'd be a little more comfortable with it, because you'd be more prepared to guess it was Collections.emptyList() or Arrays.asList(), because those methods are more familiar to you. Personally I know those APIs pretty well, so I guess I'm more comfortable with code like this, and I don't especially like seeing those methods class qualified.\nIf you feel strongly about it maybe we should formalise which classes & methods we consider OK for static imports, and use https://checkstyle.sourceforge.io/config_imports.html#AvoidStaticImport to prevent static imports of anything else. At least that would put everyone on the same page and make the code base consistent wrt static imports.", "author": "tombentley", "createdAt": "2020-06-04T10:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NTU2OA=="}], "type": "inlineReview", "revised_code": null}]}