{"pr_number": 3144, "pr_title": "feat: Cleanup AbstractModel", "pr_createdAt": "2020-06-03T09:21:44Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144", "timeline": [{"oid": "9d46147739744b0df62feb551d486ff7075109bd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9d46147739744b0df62feb551d486ff7075109bd", "message": "feat: Cleanup AbstractModel\n\nCleanup includes, argument renaming, documenting some methods\norganizing fields into more logical groupings\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-06-03T09:19:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NDUzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434464536", "bodyText": "Do you think this is really needed? I originally had it. But it seemed wasteful to have 3 static Strings which are used only in the static initilizer below. So I decided to remove them and use the env var names directly.", "author": "scholzj", "createdAt": "2020-06-03T10:22:31Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -88,40 +88,50 @@\n \n     public static final String ANCILLARY_CM_KEY_METRICS = \"metrics-config.yml\";\n     public static final String ANCILLARY_CM_KEY_LOG_CONFIG = \"log4j.properties\";\n+\n+    public static final String NETWORK_POLICY_KEY_SUFFIX = \"-network-policy\";\n+\n     public static final String ENV_VAR_DYNAMIC_HEAP_FRACTION = \"DYNAMIC_HEAP_FRACTION\";\n     public static final String ENV_VAR_KAFKA_HEAP_OPTS = \"KAFKA_HEAP_OPTS\";\n     public static final String ENV_VAR_KAFKA_JVM_PERFORMANCE_OPTS = \"KAFKA_JVM_PERFORMANCE_OPTS\";\n     public static final String ENV_VAR_DYNAMIC_HEAP_MAX = \"DYNAMIC_HEAP_MAX\";\n-    public static final String NETWORK_POLICY_KEY_SUFFIX = \"-network-policy\";\n     public static final String ENV_VAR_STRIMZI_KAFKA_GC_LOG_ENABLED = \"STRIMZI_KAFKA_GC_LOG_ENABLED\";\n     public static final String ENV_VAR_STRIMZI_JAVA_SYSTEM_PROPERTIES = \"STRIMZI_JAVA_SYSTEM_PROPERTIES\";\n     public static final String ENV_VAR_STRIMZI_JAVA_OPTS = \"STRIMZI_JAVA_OPTS\";\n     public static final String ENV_VAR_STRIMZI_GC_LOG_ENABLED = \"STRIMZI_GC_LOG_ENABLED\";\n \n-    public static final String ANNO_STRIMZI_IO_DELETE_CLAIM = Annotations.STRIMZI_DOMAIN + \"delete-claim\";\n-    /** Annotation on PVCs storing the original configuration (so we can revert changes). */\n+    /**\n+     * Annotation on PVCs storing the original configuration\n+     * Used to revert changes\n+     */\n     public static final String ANNO_STRIMZI_IO_STORAGE = Annotations.STRIMZI_DOMAIN + \"storage\";\n+    public static final String ANNO_STRIMZI_IO_DELETE_CLAIM = Annotations.STRIMZI_DOMAIN + \"delete-claim\";\n+    public static final String ANNO_STRIMZI_LOGGING_HASH = Annotations.STRIMZI_DOMAIN + \"logging-hash\";\n+\n     @Deprecated\n     public static final String ANNO_CO_STRIMZI_IO_DELETE_CLAIM = ClusterOperator.STRIMZI_CLUSTER_OPERATOR_DOMAIN + \"/delete-claim\";\n \n-    public static final String ANNO_STRIMZI_CM_GENERATION = Annotations.STRIMZI_DOMAIN + \"cm-generation\";\n-    public static final String ANNO_STRIMZI_LOGGING_HASH = Annotations.STRIMZI_DOMAIN + \"logging-hash\";\n-\n+    private static final String ENV_VAR_HTTP_PROXY = \"HTTP_PROXY\";", "originalCommit": "9d46147739744b0df62feb551d486ff7075109bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NTg5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434475893", "bodyText": "I know what you mean, I think the fact we use the same strings more than once means really we should use static strings.\nUltimately it all gets compiled down the same (correct me if I am wrong) and the consistency of always defining envars as static strings can only increase consistency and less bugs in the long run..\nNot a hill I will die on for this particular envar, but still...", "author": "samuel-hawker", "createdAt": "2020-06-03T10:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NDUzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NTc5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434465795", "bodyText": "Should we put empty line between the sentence and the @param? TBH I do not really mind, but it seems you did that in other Javadoc comments around.", "author": "scholzj", "createdAt": "2020-06-03T10:24:56Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -518,57 +556,59 @@ protected void setConfiguration(AbstractConfiguration configuration) {\n      * @return The image name.\n      */\n     public String getImage() {\n-        return this.image;\n+        return image;\n     }\n \n     /**\n-     * @return the service account used by the deployed cluster for Kubernetes/OpenShift API operations\n+     * @return the name of the service account used by the deployed cluster for Kubernetes/OpenShift API operations.\n      */\n     protected String getServiceAccountName() {\n         return null;\n     }\n \n     /**\n-     * @return the cluster name\n+     * @return the cluster name.\n      */\n     public String getCluster() {\n         return cluster;\n     }\n \n     /**\n      * Gets the name of a given pod in a StatefulSet.\n-     * @param podId The Id of the pod.\n+     *\n+     * @param podId The Id (ordinal) of the pod.\n      * @return The name of the pod with the given name.\n      */\n     public String getPodName(int podId) {\n         return name + \"-\" + podId;\n     }\n \n     /**\n-     * Sets the affinity as configured by the user in the cluster CR\n+     * Sets the affinity as configured by the user in the cluster CR.", "originalCommit": "9d46147739744b0df62feb551d486ff7075109bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a284975e1a59b52e1c62a0851e0d16571e401a9a", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 345523a7c1..480606a7d6 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -585,6 +585,7 @@ public abstract class AbstractModel {\n \n     /**\n      * Sets the affinity as configured by the user in the cluster CR.\n+     *\n      * @param affinity\n      */\n     protected void setUserAffinity(Affinity affinity) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NzAwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434467008", "bodyText": "I do not think there is a real rule for this or anything like that, so feel free to leave it like this ... But I usually prefer to have the && at the next line - it seems to me more readable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .filter(broker -> broker != null &&\n          \n          \n            \n                                        broker.getBroker() != null &&\n          \n          \n            \n                                        broker.getBroker() == ordinalId &&\n          \n          \n            \n                                        broker.getStorageClass() != null)\n          \n          \n            \n                                .filter(broker -> broker != null \n          \n          \n            \n                                        && broker.getBroker() != null \n          \n          \n            \n                                        && broker.getBroker() == ordinalId \n          \n          \n            \n                                        && broker.getStorageClass() != null)", "author": "scholzj", "createdAt": "2020-06-03T10:27:15Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -638,17 +693,22 @@ protected PersistentVolumeClaim createPersistentVolumeClaim(int podNumber, Strin\n \n         String storageClass = storage.getStorageClass();\n         if (storage.getOverrides() != null) {\n-            storageClass = storage.getOverrides().stream().filter(broker -> broker != null && broker.getBroker() != null && broker.getBroker() == podNumber && broker.getStorageClass() != null)\n+            storageClass = storage.getOverrides().stream()\n+                    .filter(broker -> broker != null &&\n+                            broker.getBroker() != null &&\n+                            broker.getBroker() == ordinalId &&\n+                            broker.getStorageClass() != null)", "originalCommit": "9d46147739744b0df62feb551d486ff7075109bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NjI0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434476240", "bodyText": "Great suggestion!", "author": "samuel-hawker", "createdAt": "2020-06-03T10:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NzAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a284975e1a59b52e1c62a0851e0d16571e401a9a", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 345523a7c1..480606a7d6 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -694,10 +695,10 @@ public abstract class AbstractModel {\n         String storageClass = storage.getStorageClass();\n         if (storage.getOverrides() != null) {\n             storageClass = storage.getOverrides().stream()\n-                    .filter(broker -> broker != null &&\n-                            broker.getBroker() != null &&\n-                            broker.getBroker() == ordinalId &&\n-                            broker.getStorageClass() != null)\n+                    .filter(broker -> broker != null\n+                            && broker.getBroker() != null\n+                            && broker.getBroker() == ordinalId\n+                            && broker.getStorageClass() != null)\n                     .map(PersistentClaimStorageOverride::getStorageClass)\n                     .findAny()\n                     // if none are found for broker do not change storage class from overrides\n"}}, {"oid": "a284975e1a59b52e1c62a0851e0d16571e401a9a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a284975e1a59b52e1c62a0851e0d16571e401a9a", "message": "fix: Review comments\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-06-03T10:46:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NzIxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434477214", "bodyText": "I would leave just Kubernetes.", "author": "ppatierno", "createdAt": "2020-06-03T10:47:14Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -349,12 +373,13 @@ public static OrderedProperties getOrderedProperties(String configFileName) {\n     }\n \n     /**\n-     * Transforms map to log4j properties file format\n-     * @param properties map with properties\n-     * @return\n+     * Transforms map to log4j properties file format.\n+     *\n+     * @param properties map of log4j properties.\n+     * @return log4j properties as a String.\n      */\n     protected static String createPropertiesString(OrderedProperties properties) {\n-        return properties.asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding kubernetes/openshift resource.\");\n+        return properties.asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes/OpenShift resource.\");", "originalCommit": "9d46147739744b0df62feb551d486ff7075109bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4NTI0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434485245", "bodyText": "As in remove the reference to OpenShift all together?", "author": "samuel-hawker", "createdAt": "2020-06-03T11:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4OTY4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434489689", "bodyText": "I would say that where the code is not related to OpenShift specific stuff, we should just mention Kubernetes.", "author": "ppatierno", "createdAt": "2020-06-03T11:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxMDM2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434510364", "bodyText": "Addressed :)", "author": "samuel-hawker", "createdAt": "2020-06-03T11:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NzIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "f11c788a100ac616f140aab1d89f3a79f387dadd", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex 345523a7c1..2466e1e848 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -379,7 +379,7 @@ public abstract class AbstractModel {\n      * @return log4j properties as a String.\n      */\n     protected static String createPropertiesString(OrderedProperties properties) {\n-        return properties.asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes/OpenShift resource.\");\n+        return properties.asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes resource.\");\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4MDk5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3144#discussion_r434480991", "bodyText": "As before I would say just Kubernetes. The same for the others following this one.", "author": "ppatierno", "createdAt": "2020-06-03T10:54:56Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java", "diffHunk": "@@ -80,7 +80,7 @@\n     protected static Vertx vertx;\n     private static final String METRICS_CONFIG = \"{\\\"foo\\\":\\\"bar\\\"}\";\n     private static final String LOGGING_CONFIG = AbstractModel.getOrderedProperties(\"kafkaBridgeDefaultLoggingProperties\")\n-            .asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding kubernetes/openshift resource.\");\n+            .asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes/OpenShift resource.\");", "originalCommit": "9d46147739744b0df62feb551d486ff7075109bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f11c788a100ac616f140aab1d89f3a79f387dadd", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\nindex 68c7dba2fc..ddd69e1c79 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaBridgeAssemblyOperatorTest.java\n\n@@ -80,7 +80,7 @@ public class KafkaBridgeAssemblyOperatorTest {\n     protected static Vertx vertx;\n     private static final String METRICS_CONFIG = \"{\\\"foo\\\":\\\"bar\\\"}\";\n     private static final String LOGGING_CONFIG = AbstractModel.getOrderedProperties(\"kafkaBridgeDefaultLoggingProperties\")\n-            .asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes/OpenShift resource.\");\n+            .asPairsWithComment(\"Do not change this generated file. Logging can be configured in the corresponding Kubernetes resource.\");\n \n     private static final String BOOTSTRAP_SERVERS = \"foo-kafka:9092\";\n     private static final KafkaBridgeConsumerSpec KAFKA_BRIDGE_CONSUMER_SPEC = new KafkaBridgeConsumerSpec();\n"}}, {"oid": "f11c788a100ac616f140aab1d89f3a79f387dadd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f11c788a100ac616f140aab1d89f3a79f387dadd", "message": "fix: Remove unneeded OpenShift references\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-06-03T11:53:49Z", "type": "commit"}]}