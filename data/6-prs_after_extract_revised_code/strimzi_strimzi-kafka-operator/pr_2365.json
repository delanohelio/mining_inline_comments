{"pr_number": 2365, "pr_title": "Fix rolling update of existing pods when scaling up/down", "pr_createdAt": "2020-01-06T17:32:57Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365", "timeline": [{"oid": "b9120d236ba55e710f252141d3440ce0d04f9218", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b9120d236ba55e710f252141d3440ce0d04f9218", "message": "Fix rolling update of existing pods when scaling up/down\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-06T17:29:02Z", "type": "commit"}, {"oid": "59500b446f6c2a54a53678d6879eabe9257695b9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/59500b446f6c2a54a53678d6879eabe9257695b9", "message": "Fix tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-06T19:06:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1NzE0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363657141", "bodyText": "I wonder if the name (do)commonCertificatesDiffer is better?", "author": "tombentley", "createdAt": "2020-01-07T09:24:05Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -366,4 +366,31 @@ public static String encodeStorageToJson(Storage storage) {\n     private static byte[] decodeFromSecret(Secret secret, String key) {\n         return Base64.getDecoder().decode(secret.getData().get(key));\n     }\n+\n+    /**\n+     * Compares two Secrets with certificates and checks whether any value for a key which exists in both Secrets\n+     * changed. This method is used to evaluate whether rolling update of existing brokers is needed when secrets with\n+     * certificates change. It separates changes for existing certificates with other changes to the secret such as\n+     * added or removed certificates (scale-up or scale-down).\n+     *\n+     * @param current   Existing secret\n+     * @param desired   Desired secret\n+     *\n+     * @return  True if there is a key which exists in the data sections of both secrets and which changed.\n+     */\n+    public static boolean didAnyCertificateChangedInSecret(Secret current, Secret desired) {", "originalCommit": "59500b446f6c2a54a53678d6879eabe9257695b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyNTIwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363825208", "bodyText": "I think common is a bit confusing. I went with doExistingCertificatesDiffer - hope that works for you.", "author": "scholzj", "createdAt": "2020-01-07T16:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1NzE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "230412bf605c6acd3a1e404e348b49e402b54453", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\nindex 4346061dc6..0c2d8f4416 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n\n@@ -378,7 +378,7 @@ public class ModelUtils {\n      *\n      * @return  True if there is a key which exists in the data sections of both secrets and which changed.\n      */\n-    public static boolean didAnyCertificateChangedInSecret(Secret current, Secret desired) {\n+    public static boolean doExistingCertificatesDiffer(Secret current, Secret desired) {\n         Map<String, String> currentData = current.getData();\n         Map<String, String> desiredData = desired.getData();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1OTM5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363659395", "bodyText": "We've got this same pattern of method calls repeated three or four times in this PR. Surely we can factor out a common method which takes the secret name and BiFunction whose argument is a method reference to kafkaExporter::generateSecret or whatever?", "author": "tombentley", "createdAt": "2020-01-07T09:29:22Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -2866,12 +2884,18 @@ String getInternalServiceHostname(String serviceName)    {\n         }\n \n         Future<ReconciliationState> kafkaExporterSecret(Supplier<Date> dateSupplier) {\n-            return secretOperations.reconcile(namespace, KafkaExporter.secretName(name),\n-                    kafkaExporter == null ? null : kafkaExporter.generateSecret(clusterCa, isMaintenanceTimeWindowsSatisfied(dateSupplier)))\n-                    .map(res -> {\n-                        isKafkaExporterCertsChanged = res instanceof ReconcileResult.Patched;\n-                        return this;\n-                    });\n+            return secretOperations.getAsync(namespace, KafkaExporter.secretName(name))\n+                    .compose(oldSecret -> secretOperations.reconcile(namespace, KafkaExporter.secretName(name),\n+                            kafkaExporter == null ? null : kafkaExporter.generateSecret(clusterCa, isMaintenanceTimeWindowsSatisfied(dateSupplier)))\n+                            .map(res -> {\n+                                if (res instanceof ReconcileResult.Patched) {\n+                                    // The secret is patched and some changes to the existing certificates actually occured\n+                                    isExistingKafkaExporterCertsChanged = ModelUtils.didAnyCertificateChangedInSecret(oldSecret, res.resource());\n+                                }\n+\n+                                return this;\n+                            })\n+                    );\n         }", "originalCommit": "59500b446f6c2a54a53678d6879eabe9257695b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyNTQ4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363825488", "bodyText": "I migth have done this a bit differently, but I factored it out. and re-used it in all 4 methods.", "author": "scholzj", "createdAt": "2020-01-07T16:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1OTM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "230412bf605c6acd3a1e404e348b49e402b54453", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 8f270453ad..a67d2c21eb 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -2884,18 +2885,11 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n         }\n \n         Future<ReconciliationState> kafkaExporterSecret(Supplier<Date> dateSupplier) {\n-            return secretOperations.getAsync(namespace, KafkaExporter.secretName(name))\n-                    .compose(oldSecret -> secretOperations.reconcile(namespace, KafkaExporter.secretName(name),\n-                            kafkaExporter == null ? null : kafkaExporter.generateSecret(clusterCa, isMaintenanceTimeWindowsSatisfied(dateSupplier)))\n-                            .map(res -> {\n-                                if (res instanceof ReconcileResult.Patched) {\n-                                    // The secret is patched and some changes to the existing certificates actually occured\n-                                    isExistingKafkaExporterCertsChanged = ModelUtils.didAnyCertificateChangedInSecret(oldSecret, res.resource());\n-                                }\n-\n-                                return this;\n-                            })\n-                    );\n+            return updateCertificateSecretWithDiff(KafkaExporter.secretName(name), kafkaExporter == null ? null : kafkaExporter.generateSecret(clusterCa, isMaintenanceTimeWindowsSatisfied(dateSupplier)))\n+                    .map(changed -> {\n+                        existingKafkaExporterCertsChanged = changed;\n+                        return this;\n+                    });\n         }\n \n         Future<ReconciliationState> kafkaExporterDeployment() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MDM5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363660399", "bodyText": "If we're changing the name of these anyway, I wonder if we should drop the is part. The tense disagrees with the changed suffix, so it reads a bit awkwardly.", "author": "tombentley", "createdAt": "2020-01-07T09:31:27Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java", "diffHunk": "@@ -383,10 +383,10 @@ ReconciliationState createReconciliationState(Reconciliation reconciliation, Kaf\n         /* test */ Set<String> fsResizingRestartRequest = new HashSet<>();\n \n         // Certificate change indicators\n-        private boolean isZookeeperCertsChanged = false;\n-        private boolean isKafkaCertsChanged = false;\n-        private boolean isKafkaExporterCertsChanged = false;\n-        private boolean isEntityOperatorCertsChanged = false;\n+        private boolean isExistingZookeeperCertsChanged = false;\n+        private boolean isExistingKafkaCertsChanged = false;\n+        private boolean isExistingKafkaExporterCertsChanged = false;\n+        private boolean isExistingEntityOperatorCertsChanged = false;", "originalCommit": "59500b446f6c2a54a53678d6879eabe9257695b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyNTczMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2365#discussion_r363825733", "bodyText": "Yeah, now when you say it it sounds weird :-D", "author": "scholzj", "createdAt": "2020-01-07T16:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MDM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "230412bf605c6acd3a1e404e348b49e402b54453", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\nindex 8f270453ad..a67d2c21eb 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaAssemblyOperator.java\n\n@@ -383,10 +383,10 @@ public class KafkaAssemblyOperator extends AbstractAssemblyOperator<KubernetesCl\n         /* test */ Set<String> fsResizingRestartRequest = new HashSet<>();\n \n         // Certificate change indicators\n-        private boolean isExistingZookeeperCertsChanged = false;\n-        private boolean isExistingKafkaCertsChanged = false;\n-        private boolean isExistingKafkaExporterCertsChanged = false;\n-        private boolean isExistingEntityOperatorCertsChanged = false;\n+        private boolean existingZookeeperCertsChanged = false;\n+        private boolean existingKafkaCertsChanged = false;\n+        private boolean existingKafkaExporterCertsChanged = false;\n+        private boolean existingEntityOperatorCertsChanged = false;\n \n         // Custom Listener certificates\n         private String tlsListenerCustomCertificateThumbprint;\n"}}, {"oid": "230412bf605c6acd3a1e404e348b49e402b54453", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/230412bf605c6acd3a1e404e348b49e402b54453", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-07T16:11:03Z", "type": "commit"}]}