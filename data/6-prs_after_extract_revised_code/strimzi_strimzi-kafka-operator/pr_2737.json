{"pr_number": 2737, "pr_title": "Add more metrics to our cluster and user operators", "pr_createdAt": "2020-03-23T00:26:24Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzOTY1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737#discussion_r396239657", "bodyText": "if we could assume that strimzi.reconciliations is a sort of root for the reconciliations related metrics, should the others be strimzi.reconciliations.periodical and not the other way around?", "author": "ppatierno", "createdAt": "2020-03-23T06:49:18Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java", "diffHunk": "@@ -59,10 +64,46 @@\n     protected final S resourceOperator;\n     private final String kind;\n \n+    private final MeterRegistry metrics;\n+    private final Counter periodicReconciliationsCounter;\n+    private final Counter reconciliationsCounter;\n+    private final Counter failedReconciliationsCounter;\n+    private final Counter successfulReconciliationsCounter;\n+    private final AtomicInteger resourceCounter;\n+\n     public AbstractOperator(Vertx vertx, String kind, S resourceOperator) {\n         this.vertx = vertx;\n         this.kind = kind;\n         this.resourceOperator = resourceOperator;\n+\n+        // Setup metrics\n+        metrics = BackendRegistries.getDefaultNow();\n+        \n+        periodicReconciliationsCounter = Counter.builder(\"strimzi.periodical.reconcilitions\")", "originalCommit": "8ca665888d6c50bc786afcb76d2f96a04425d64d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2aeebc50b8d1a71d4bbd769b42f9fb39a6f25b1", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\nindex 151365645..b61142f91 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n\n@@ -70,6 +74,7 @@ public abstract class AbstractOperator<\n     private final Counter failedReconciliationsCounter;\n     private final Counter successfulReconciliationsCounter;\n     private final AtomicInteger resourceCounter;\n+    private final Timer reconciliationsTimer;\n \n     public AbstractOperator(Vertx vertx, String kind, S resourceOperator) {\n         this.vertx = vertx;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0MDE4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737#discussion_r396240188", "bodyText": "isn't it enough one failedReconciliationsCounter.increment(); call out of this if and elseif statements?", "author": "ppatierno", "createdAt": "2020-03-23T06:51:14Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java", "diffHunk": "@@ -259,15 +303,25 @@ public void accept(KubernetesClientException e) {\n      */\n     private void handleResult(Reconciliation reconciliation, AsyncResult<Void> result) {\n         if (result.succeeded()) {\n+            successfulReconciliationsCounter.increment();\n             log.info(\"{}: reconciled\", reconciliation);\n         } else {\n             Throwable cause = result.cause();\n             if (cause instanceof InvalidConfigParameterException) {\n+                failedReconciliationsCounter.increment();\n                 log.warn(\"{}: Failed to reconcile {}\", reconciliation, cause.getMessage());\n             } else if (!(cause instanceof UnableToAcquireLockException)) {\n+                failedReconciliationsCounter.increment();", "originalCommit": "8ca665888d6c50bc786afcb76d2f96a04425d64d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODk4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737#discussion_r396298983", "bodyText": "No, because I do not think we should report when the reconciliation fails to obtain a lock as a failure.", "author": "scholzj", "createdAt": "2020-03-23T09:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI0MDE4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c2aeebc50b8d1a71d4bbd769b42f9fb39a6f25b1", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\nindex 151365645..b61142f91 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n\n@@ -301,17 +320,20 @@ public abstract class AbstractOperator<\n     /**\n      * Log the reconciliation outcome.\n      */\n-    private void handleResult(Reconciliation reconciliation, AsyncResult<Void> result) {\n+    private void handleResult(Reconciliation reconciliation, AsyncResult<Void> result, Timer.Sample reconciliationTimerSample) {\n         if (result.succeeded()) {\n             successfulReconciliationsCounter.increment();\n+            reconciliationTimerSample.stop(reconciliationsTimer);\n             log.info(\"{}: reconciled\", reconciliation);\n         } else {\n             Throwable cause = result.cause();\n             if (cause instanceof InvalidConfigParameterException) {\n                 failedReconciliationsCounter.increment();\n+                reconciliationTimerSample.stop(reconciliationsTimer);\n                 log.warn(\"{}: Failed to reconcile {}\", reconciliation, cause.getMessage());\n             } else if (!(cause instanceof UnableToAcquireLockException)) {\n                 failedReconciliationsCounter.increment();\n+                reconciliationTimerSample.stop(reconciliationsTimer);\n                 log.warn(\"{}: Failed to reconcile\", reconciliation, cause);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NzQwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737#discussion_r396297401", "bodyText": "Typo in multiple locations s/reconcilitions/reconciliations", "author": "sknot-rh", "createdAt": "2020-03-23T09:01:51Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java", "diffHunk": "@@ -59,10 +64,46 @@\n     protected final S resourceOperator;\n     private final String kind;\n \n+    private final MeterRegistry metrics;\n+    private final Counter periodicReconciliationsCounter;\n+    private final Counter reconciliationsCounter;\n+    private final Counter failedReconciliationsCounter;\n+    private final Counter successfulReconciliationsCounter;\n+    private final AtomicInteger resourceCounter;\n+\n     public AbstractOperator(Vertx vertx, String kind, S resourceOperator) {\n         this.vertx = vertx;\n         this.kind = kind;\n         this.resourceOperator = resourceOperator;\n+\n+        // Setup metrics\n+        metrics = BackendRegistries.getDefaultNow();\n+        \n+        periodicReconciliationsCounter = Counter.builder(\"strimzi.periodical.reconcilitions\")\n+                .description(\"Number of periodical reconciliations done by the operator\")\n+                .tag(\"kind\", kind())\n+                .register(metrics);\n+\n+        reconciliationsCounter = Counter.builder(\"strimzi.reconcilitions\")", "originalCommit": "8ca665888d6c50bc786afcb76d2f96a04425d64d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2aeebc50b8d1a71d4bbd769b42f9fb39a6f25b1", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\nindex 151365645..b61142f91 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/AbstractOperator.java\n\n@@ -70,6 +74,7 @@ public abstract class AbstractOperator<\n     private final Counter failedReconciliationsCounter;\n     private final Counter successfulReconciliationsCounter;\n     private final AtomicInteger resourceCounter;\n+    private final Timer reconciliationsTimer;\n \n     public AbstractOperator(Vertx vertx, String kind, S resourceOperator) {\n         this.vertx = vertx;\n"}}, {"oid": "c2aeebc50b8d1a71d4bbd769b42f9fb39a6f25b1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c2aeebc50b8d1a71d4bbd769b42f9fb39a6f25b1", "message": "Review comments + timer\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-03-27T23:34:45Z", "type": "forcePushed"}, {"oid": "9078507933a6de4dbb0bc19dea13f3cad3d2aef8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9078507933a6de4dbb0bc19dea13f3cad3d2aef8", "message": "Add more metrics to our operators\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nCHANGELOG.md\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nFix checkstyleL\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nReview comments + timer\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd Connector metrics + Add MetricsProvider to mock metrics in tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nRemove histograms and quantiles, finish dashabord, add Prometheus integration (credit Standa)\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nFix imports\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nCleanup metrics setup not needed when we now use mocks for UTs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd docs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-01T00:02:22Z", "type": "commit"}, {"oid": "9078507933a6de4dbb0bc19dea13f3cad3d2aef8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9078507933a6de4dbb0bc19dea13f3cad3d2aef8", "message": "Add more metrics to our operators\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nCHANGELOG.md\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nFix checkstyleL\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nReview comments + timer\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd Connector metrics + Add MetricsProvider to mock metrics in tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nRemove histograms and quantiles, finish dashabord, add Prometheus integration (credit Standa)\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nFix imports\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nCleanup metrics setup not needed when we now use mocks for UTs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>\n\nAdd docs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-01T00:02:22Z", "type": "forcePushed"}, {"oid": "75bdeab8562442f55a0eb995a2b666bfbfe6992c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/75bdeab8562442f55a0eb995a2b666bfbfe6992c", "message": "Add Javadoc\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-01T07:54:26Z", "type": "commit"}, {"oid": "fe0e7d40c6fc38e2130109c7545c305d4ec47c4e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fe0e7d40c6fc38e2130109c7545c305d4ec47c4e", "message": "Improve the docs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-01T11:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMzY0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2737#discussion_r401633649", "bodyText": "Type \"Mircometer\" -> \"Micrometer\"", "author": "tomaley", "createdAt": "2020-04-01T13:54:28Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/MicrometerMetricsProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.common;\n+\n+import io.micrometer.core.instrument.Counter;\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tags;\n+import io.micrometer.core.instrument.Timer;\n+import io.vertx.micrometer.backends.BackendRegistries;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Wraps creation of Micrometer metrics.\n+ */\n+public class MicrometerMetricsProvider implements MetricsProvider {\n+    private final MeterRegistry metrics;\n+\n+    /**\n+     * Constructor of the Micrometer metrics provider\n+     */\n+    public MicrometerMetricsProvider() {\n+        this.metrics = BackendRegistries.getDefaultNow();\n+    }\n+\n+    /**\n+     * Returns the Mircometer MeterRegistry with all metrics", "originalCommit": "fe0e7d40c6fc38e2130109c7545c305d4ec47c4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c67c4224dab634af03f8d689dbf91027996eb73a", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/MicrometerMetricsProvider.java b/operator-common/src/main/java/io/strimzi/operator/common/MicrometerMetricsProvider.java\nindex d975d64c1..2b3db4a71 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/MicrometerMetricsProvider.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/MicrometerMetricsProvider.java\n\n@@ -27,7 +27,7 @@ public class MicrometerMetricsProvider implements MetricsProvider {\n     }\n \n     /**\n-     * Returns the Mircometer MeterRegistry with all metrics\n+     * Returns the Micrometer MeterRegistry with all metrics\n      *\n      * @return  MeterRegistry\n      */\n"}}, {"oid": "c67c4224dab634af03f8d689dbf91027996eb73a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c67c4224dab634af03f8d689dbf91027996eb73a", "message": "Fix typo in JavaDocs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-01T15:44:47Z", "type": "commit"}, {"oid": "ff2a93ca67b5ffd7d8ce579c62f5eb4bb87aad3e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ff2a93ca67b5ffd7d8ce579c62f5eb4bb87aad3e", "message": "Use constant in the metrics names\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-04-02T08:47:36Z", "type": "commit"}]}