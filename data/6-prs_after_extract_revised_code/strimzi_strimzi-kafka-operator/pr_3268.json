{"pr_number": 3268, "pr_title": "Sts diff comparing empty strings", "pr_createdAt": "2020-07-01T11:51:01Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268", "timeline": [{"oid": "c272f89b36c07f2b703ef764dc17ceeb18f947c2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c272f89b36c07f2b703ef764dc17ceeb18f947c2", "message": "Sts diff comparing empty strings\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-01T12:28:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448508643", "bodyText": "I'm not quite sure I understand this. isMissingNode() is the case where a property has the JSON value null.\nIf you were conflating null with the empty string, I could understand, but I think you're trying to say that the string containing two double quotes is the same as the empty string  and the same as null. I don't understand why that is necessarily true. Remember, you're changing this for all JsonNodes in an STS, so while it might be true for the value of a toleration, it might not be true elsewhere.", "author": "tombentley", "createdAt": "2020-07-01T17:20:27Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "originalCommit": "c272f89b36c07f2b703ef764dc17ceeb18f947c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNDc0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448804743", "bodyText": "The Kafka configuration mentioned above produces a STS like this\n      tolerations:\n      - effect: NoSchedule\n        key: kafkarole\n        operator: Equal\n\nnote that value is missing and thus it is null although it is set to empty value in the Kafka CR.\nI think it is kubernetes thing removing a property with no value.", "author": "sknot-rh", "createdAt": "2020-07-02T07:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4OTExMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448889112", "bodyText": "So why is the .replace(\"\\\"\", \"\") necessary then?", "author": "tombentley", "createdAt": "2020-07-02T09:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5OTkxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448899918", "bodyText": "If we set value: '' it is propagated as \"\", in Java string it is \"\\\"\\\"\" which is not equal to \"\" (empty string).", "author": "sknot-rh", "createdAt": "2020-07-02T10:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNjU2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448936567", "bodyText": "Per https://yaml.org/spec/1.2/spec.html#id2760844 YAML supports quoted scalars (using both \" and '). So if value: '' results in the operator seeing the String with contents \"\" I think that must be a bug somewhere (Jackson?).", "author": "tombentley", "createdAt": "2020-07-02T11:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NDA5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448964098", "bodyText": "@Test\n    public void test() throws JsonProcessingException {\n        JsonNode jsonNode = patchMapper().readTree(\"{\\\"effect\\\":\\\"NoSchedule\\\",\\\"value\\\":\\\"someValue\\\"}\");\n        System.out.println(jsonNode.path(\"value\"));\n    }\n\nprints \"someValue\". If we want just someValue, asText() method at the JsonNode object has to be called.\nI think it would be better to print JsonNodeType.STRING nodes without quotes.", "author": "sknot-rh", "createdAt": "2020-07-02T12:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwODY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0763ea8adc9144539be32117a2db7e117fdc9792", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\nindex ba4c3f678..3b6b428f6 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\n\n@@ -26,12 +26,11 @@ public abstract class AbstractResourceDiff {\n     }\n \n     /**\n-     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n      * @param node tested node\n      * @return true if node is empty or has empty value\n      */\n     protected boolean nodeMissingOrEmpty(JsonNode node) {\n-        return node.isMissingNode() || node.getNodeType() == JsonNodeType.STRING && node.asText().replace(\"\\\"\", \"\").isEmpty();\n+        return node.isMissingNode() || node.getNodeType() == JsonNodeType.STRING && node.textValue().isEmpty();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NDE2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448954167", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean nodeMissingOrEmpty(JsonNode node) {\n          \n          \n            \n                protected boolean isNodeMissingOrEmpty(JsonNode node) {", "author": "samuel-hawker", "createdAt": "2020-07-02T12:08:18Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java", "diffHunk": "@@ -24,6 +25,15 @@ protected JsonNode lookupPath(JsonNode source, String path) {\n         return s;\n     }\n \n+    /**\n+     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n+     * @param node tested node\n+     * @return true if node is empty or has empty value\n+     */\n+    protected boolean nodeMissingOrEmpty(JsonNode node) {", "originalCommit": "7f4f44b5258020657fcda7e4b55a7ed19688470a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0763ea8adc9144539be32117a2db7e117fdc9792", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\nindex ba4c3f678..3b6b428f6 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/operator/resource/AbstractResourceDiff.java\n\n@@ -26,12 +26,11 @@ public abstract class AbstractResourceDiff {\n     }\n \n     /**\n-     * Empty node can have a value \"\"\"\" which compared with \"\" is different but semantically they are the same\n      * @param node tested node\n      * @return true if node is empty or has empty value\n      */\n     protected boolean nodeMissingOrEmpty(JsonNode node) {\n-        return node.isMissingNode() || node.getNodeType() == JsonNodeType.STRING && node.asText().replace(\"\\\"\", \"\").isEmpty();\n+        return node.isMissingNode() || node.getNodeType() == JsonNodeType.STRING && node.textValue().isEmpty();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTI4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r448955281", "bodyText": "Maybe add a comment with the intent behind this condition, i.e.\n// If source and target are missing tolerations then continue because ...", "author": "samuel-hawker", "createdAt": "2020-07-02T12:10:22Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "diffHunk": "@@ -97,6 +98,14 @@ public StatefulSetDiff(StatefulSet current, StatefulSet desired) {\n                     }\n                 }\n             }\n+\n+            Matcher tolerationMatchers = TOLERATION_VALUE.matcher(pathValue);\n+            if (tolerationMatchers.matches()) {\n+                if (nodeMissingOrEmpty(lookupPath(source, pathValue)) && nodeMissingOrEmpty(lookupPath(target, pathValue))) {", "originalCommit": "7f4f44b5258020657fcda7e4b55a7ed19688470a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "565261b7b3e2b7baa93154cad636c0e208da1862", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\nindex 5b01c86f1..419130c5a 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\n\n@@ -98,14 +97,6 @@ public class StatefulSetDiff extends AbstractResourceDiff {\n                     }\n                 }\n             }\n-\n-            Matcher tolerationMatchers = TOLERATION_VALUE.matcher(pathValue);\n-            if (tolerationMatchers.matches()) {\n-                if (nodeMissingOrEmpty(lookupPath(source, pathValue)) && nodeMissingOrEmpty(lookupPath(target, pathValue))) {\n-                    continue;\n-                }\n-            }\n-\n             if (log.isDebugEnabled()) {\n                 ObjectMeta md = current.getMetadata();\n                 log.debug(\"StatefulSet {}/{} differs: {}\", md.getNamespace(), md.getName(), d);\n"}}, {"oid": "0763ea8adc9144539be32117a2db7e117fdc9792", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0763ea8adc9144539be32117a2db7e117fdc9792", "message": "prettier and less dumb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-02T12:16:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg4ODQyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r449888420", "bodyText": "Maybe you should call it TOLERATION_VALUE_PATH? The VALUE can be IMHO a bit confusing.", "author": "scholzj", "createdAt": "2020-07-05T15:14:20Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java", "diffHunk": "@@ -56,6 +56,7 @@\n \n     private static final Pattern RESOURCE_PATH = Pattern.compile(\"^/spec/template/spec/(?:initContainers|containers)/[0-9]+/resources/(?:limits|requests)/(memory|cpu)$\");\n     private static final Pattern VOLUME_SIZE = Pattern.compile(\"^/spec/volumeClaimTemplates/[0-9]+/spec/resources/.*$\");\n+    private static final Pattern TOLERATION_VALUE = Pattern.compile(\"^/spec/template/spec/tolerations/[0-9]+/value$\");", "originalCommit": "c914051c2b7bea0c9bbdf29c0c4756f4c6204fac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "565261b7b3e2b7baa93154cad636c0e208da1862", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\nindex 5f10a1a65..419130c5a 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/StatefulSetDiff.java\n\n@@ -56,7 +56,6 @@ public class StatefulSetDiff extends AbstractResourceDiff {\n \n     private static final Pattern RESOURCE_PATH = Pattern.compile(\"^/spec/template/spec/(?:initContainers|containers)/[0-9]+/resources/(?:limits|requests)/(memory|cpu)$\");\n     private static final Pattern VOLUME_SIZE = Pattern.compile(\"^/spec/volumeClaimTemplates/[0-9]+/spec/resources/.*$\");\n-    private static final Pattern TOLERATION_VALUE = Pattern.compile(\"^/spec/template/spec/tolerations/[0-9]+/value$\");\n \n     private static boolean equalsOrPrefix(String path, String pathValue) {\n         return pathValue.equals(path)\n"}}, {"oid": "565261b7b3e2b7baa93154cad636c0e208da1862", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/565261b7b3e2b7baa93154cad636c0e208da1862", "message": "different approach\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-07T09:57:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Mjc0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r450782746", "bodyText": "This is worth factoring into a method, I think.", "author": "tombentley", "createdAt": "2020-07-07T11:03:28Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java", "diffHunk": "@@ -198,16 +198,21 @@ public static EntityOperator fromCrd(Kafka kafkaAssembly, KafkaVersion.Lookup ve\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(EntityOperatorSpec entityOperatorSpec) {\n+        List<Toleration> tolerations;\n         if (entityOperatorSpec.getTemplate() != null\n                 && entityOperatorSpec.getTemplate().getPod() != null\n                 && entityOperatorSpec.getTemplate().getPod().getTolerations() != null) {\n             if (entityOperatorSpec.getTolerations() != null) {\n                 log.warn(\"Tolerations given on both spec.entityOperator.tolerations and spec.entityOperator.template.pod.tolerations; latter takes precedence\");\n             }\n-            return entityOperatorSpec.getTemplate().getPod().getTolerations();\n+            tolerations = entityOperatorSpec.getTemplate().getPod().getTolerations();\n         } else {\n-            return entityOperatorSpec.getTolerations();\n+            tolerations = entityOperatorSpec.getTolerations();\n         }\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));", "originalCommit": "565261b7b3e2b7baa93154cad636c0e208da1862", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb40a1610f1a426cf1f1eaed7920eb3314063ed6", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java\nindex 674b47ab6..145e3e3df 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/EntityOperator.java\n\n@@ -209,9 +209,8 @@ public class EntityOperator extends AbstractModel {\n         } else {\n             tolerations = entityOperatorSpec.getTolerations();\n         }\n-        if (tolerations != null) {\n-            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n-        }\n+\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerations);\n         return tolerations;\n     }\n \n"}}, {"oid": "eb40a1610f1a426cf1f1eaed7920eb3314063ed6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eb40a1610f1a426cf1f1eaed7920eb3314063ed6", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-08T06:44:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDY5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452044698", "bodyText": "We have this method 4 times... I wonder if we can factor out a method in ModelUtils which takes a PodTemplate and a List<Toleration> in order to simplify the call sites to something like:\nreturn ModelUtils.tolerations(\"spec.kafka.template.pod.tolerations\",\n                              kafkaClusterSpec.getTemplate() != null ? kafkaClusterSpec.getTemplate().getPod() : null,\n                              \"spec.kafka.tolerations\",\n                              kafkaClusterSpec.getTolerations());", "author": "tombentley", "createdAt": "2020-07-09T08:17:24Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -770,16 +770,19 @@ protected static void validateIntConfigProperty(String propertyName, KafkaCluste\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(KafkaClusterSpec kafkaClusterSpec) {\n+        List<Toleration> tolerations;\n         if (kafkaClusterSpec.getTemplate() != null\n                 && kafkaClusterSpec.getTemplate().getPod() != null\n                 && kafkaClusterSpec.getTemplate().getPod().getTolerations() != null) {\n             if (kafkaClusterSpec.getTolerations() != null) {\n                 log.warn(\"Tolerations given on both spec.kafka.tolerations and spec.kafka.template.pod.tolerations; latter takes precedence\");\n             }\n-            return kafkaClusterSpec.getTemplate().getPod().getTolerations();\n+            tolerations = kafkaClusterSpec.getTemplate().getPod().getTolerations();\n         } else {\n-            return kafkaClusterSpec.getTolerations();\n+            tolerations = kafkaClusterSpec.getTolerations();\n         }\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerations);\n+        return tolerations;\n     }", "originalCommit": "eb40a1610f1a426cf1f1eaed7920eb3314063ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NjQyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452046427", "bodyText": "I was thinking the same. Thanks for the confirmation.", "author": "sknot-rh", "createdAt": "2020-07-09T08:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NDY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "1659dca778808b773804e56853125b3c7e812291", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\nindex cd6fe5355..f855588e4 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\n\n@@ -770,19 +770,7 @@ public class KafkaCluster extends AbstractModel {\n \n     @SuppressWarnings(\"deprecation\")\n     static List<Toleration> tolerations(KafkaClusterSpec kafkaClusterSpec) {\n-        List<Toleration> tolerations;\n-        if (kafkaClusterSpec.getTemplate() != null\n-                && kafkaClusterSpec.getTemplate().getPod() != null\n-                && kafkaClusterSpec.getTemplate().getPod().getTolerations() != null) {\n-            if (kafkaClusterSpec.getTolerations() != null) {\n-                log.warn(\"Tolerations given on both spec.kafka.tolerations and spec.kafka.template.pod.tolerations; latter takes precedence\");\n-            }\n-            tolerations = kafkaClusterSpec.getTemplate().getPod().getTolerations();\n-        } else {\n-            tolerations = kafkaClusterSpec.getTolerations();\n-        }\n-        ModelUtils.removeEmptyValuesFromTolerations(tolerations);\n-        return tolerations;\n+        return ModelUtils.tolerations(\"spec.kafka.tolerations\", kafkaClusterSpec.getTolerations(), \"spec.kafka.template.pod.tolerations\", kafkaClusterSpec.getTemplate() == null ? null : kafkaClusterSpec.getTemplate().getPod());\n     }\n \n     @SuppressWarnings(\"deprecation\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452212669", "bodyText": "Think about the parameter order. Why is it sensible to put tolerations first and tolerationList last, when they're to do with the same thing (the former is describing the path at which we found the latter). They belong next to each other, imho.", "author": "tombentley", "createdAt": "2020-07-09T13:22:02Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, String templateTolerations, PodTemplate podTemplate, List<Toleration> tolerationList) {", "originalCommit": "65a5399c2baa1fee9ca1d745327229aab7f54069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjYyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452216625", "bodyText": "I wanted to couple String parameters which are used one right after the another one.", "author": "sknot-rh", "createdAt": "2020-07-09T13:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjU5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452222595", "bodyText": "When writing a method signature you should usually prioritise how it will look to the caller. The caller doesn't know (or care) in what order the parameters will be used. They just have some arguments, and it makes much more sense to them to pass the path and the value got from that path together.", "author": "tombentley", "createdAt": "2020-07-09T13:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1659dca778808b773804e56853125b3c7e812291", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\nindex f45761777..780b9769d 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n\n@@ -559,7 +559,7 @@ public class ModelUtils {\n         }\n     }\n \n-    public static List<Toleration> tolerations(String tolerations, String templateTolerations, PodTemplate podTemplate, List<Toleration> tolerationList) {\n+    public static List<Toleration> tolerations(String tolerations, List<Toleration> tolerationList, String templateTolerations, PodTemplate podTemplate) {\n         List<Toleration> tolerationsListLocal;\n         if (podTemplate != null && podTemplate.getTolerations() != null) {\n             if (tolerationList != null) {\n"}}, {"oid": "1659dca778808b773804e56853125b3c7e812291", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1659dca778808b773804e56853125b3c7e812291", "message": "just another parameters order\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-09T14:00:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNDYzMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452524633", "bodyText": "Javadocs please ... plus should this be really private? It does not seem to be used from anywhere else than tolerations(...).", "author": "scholzj", "createdAt": "2020-07-09T22:28:51Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {", "originalCommit": "1659dca778808b773804e56853125b3c7e812291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\nindex 780b9769d..9f38a7e87 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n\n@@ -553,12 +553,27 @@ public class ModelUtils {\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n \n+    /**\n+     * If the toleration.value is an empty string, set it to null. That solves an issue when built STS contains a filed\n+     * with an empty property value. K8s is removing properties like this and thus we cannot fetch an equal STS which was\n+     * created with (some) empty value.\n+     * @param tolerations tolerations list to check whether toleration.value is an empty string and eventually replace it by null\n+     */\n     public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n         if (tolerations != null) {\n             tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n         }\n     }\n \n+    /**\n+     * Checks whether tolerations and template.tolerations exits. If so, latter takes precedence. Entries like tolerations.value == \"\"\n+     * are replaced by tolerations.value = null\n+     * @param tolerations path to tolerations in CR\n+     * @param tolerationList tolerations\n+     * @param templateTolerations path to template.tolerations in CR\n+     * @param podTemplate pod template containing tolerations\n+     * @return adjusted list with tolerations\n+     */\n     public static List<Toleration> tolerations(String tolerations, List<Toleration> tolerationList, String templateTolerations, PodTemplate podTemplate) {\n         List<Toleration> tolerationsListLocal;\n         if (podTemplate != null && podTemplate.getTolerations() != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNTY4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r452525681", "bodyText": "Javadoc please", "author": "scholzj", "createdAt": "2020-07-09T22:31:54Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java", "diffHunk": "@@ -551,4 +552,24 @@ public static String getJavaSystemPropertiesToString(List<SystemProperty> javaSy\n         }\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n+\n+    public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n+        if (tolerations != null) {\n+            tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n+        }\n+    }\n+\n+    public static List<Toleration> tolerations(String tolerations, List<Toleration> tolerationList, String templateTolerations, PodTemplate podTemplate) {", "originalCommit": "1659dca778808b773804e56853125b3c7e812291", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\nindex 780b9769d..9f38a7e87 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/ModelUtils.java\n\n@@ -553,12 +553,27 @@ public class ModelUtils {\n         return String.join(\" \", javaSystemPropertiesList);\n     }\n \n+    /**\n+     * If the toleration.value is an empty string, set it to null. That solves an issue when built STS contains a filed\n+     * with an empty property value. K8s is removing properties like this and thus we cannot fetch an equal STS which was\n+     * created with (some) empty value.\n+     * @param tolerations tolerations list to check whether toleration.value is an empty string and eventually replace it by null\n+     */\n     public static void removeEmptyValuesFromTolerations(List<Toleration> tolerations) {\n         if (tolerations != null) {\n             tolerations.stream().filter(toleration -> toleration.getValue() != null && toleration.getValue().isEmpty()).forEach(emptyValTol -> emptyValTol.setValue(null));\n         }\n     }\n \n+    /**\n+     * Checks whether tolerations and template.tolerations exits. If so, latter takes precedence. Entries like tolerations.value == \"\"\n+     * are replaced by tolerations.value = null\n+     * @param tolerations path to tolerations in CR\n+     * @param tolerationList tolerations\n+     * @param templateTolerations path to template.tolerations in CR\n+     * @param podTemplate pod template containing tolerations\n+     * @return adjusted list with tolerations\n+     */\n     public static List<Toleration> tolerations(String tolerations, List<Toleration> tolerationList, String templateTolerations, PodTemplate podTemplate) {\n         List<Toleration> tolerationsListLocal;\n         if (podTemplate != null && podTemplate.getTolerations() != null) {\n"}}, {"oid": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "message": "wait for vertx\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-10T12:33:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwMzg4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455303888", "bodyText": "Maybe TolerationsIT?", "author": "scholzj", "createdAt": "2020-07-15T19:53:37Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {", "originalCommit": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c4803e12a4fe1a77f3c685591d3cc9b787a3531", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\ndeleted file mode 100644\nindex 0b3760525..000000000\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\n+++ /dev/null\n\n@@ -1,125 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.operator.cluster.operator.assembly;\n-\n-import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n-import io.fabric8.kubernetes.api.model.Toleration;\n-import io.fabric8.kubernetes.api.model.TolerationBuilder;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n-import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n-import io.fabric8.kubernetes.client.KubernetesClient;\n-import io.strimzi.operator.cluster.model.ModelUtils;\n-import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n-import io.strimzi.test.k8s.KubeClusterResource;\n-import io.vertx.core.Vertx;\n-import io.vertx.core.VertxOptions;\n-import io.vertx.junit5.Checkpoint;\n-import io.vertx.junit5.VertxExtension;\n-import io.vertx.junit5.VertxTestContext;\n-import io.vertx.micrometer.MicrometerMetricsOptions;\n-import io.vertx.micrometer.VertxPrometheusOptions;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-\n-@ExtendWith(VertxExtension.class)\n-public class KafkaIT {\n-\n-    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n-    private static Vertx vertx;\n-    private String namespace = \"kafka-it-2\";\n-\n-    @BeforeAll\n-    public static void before() {\n-        vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(\n-                new MicrometerMetricsOptions()\n-                        .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n-                        .setEnabled(true)\n-        ));\n-    }\n-\n-    @AfterAll\n-    public static void after(VertxTestContext context) {\n-        Checkpoint checkpoint = context.checkpoint();\n-        vertx.close(done -> {\n-            checkpoint.flag();\n-        });\n-    }\n-\n-    @BeforeEach\n-    public void beforeEach() throws IOException, InterruptedException {\n-        cluster.createNamespace(namespace);\n-    }\n-\n-    @AfterEach\n-    public void afterEach() {\n-        cluster.deleteNamespaces();\n-    }\n-\n-    @Test\n-    public void testEmptyStringValueIntoleration(VertxTestContext context) {\n-        Toleration t1 = new TolerationBuilder()\n-                .withEffect(\"NoSchedule\")\n-                .withValue(\"\")\n-                .build();\n-\n-        List<Toleration> tolerationList = new ArrayList<>();\n-        tolerationList.add(t1);\n-\n-        // CO does this over the generated STS\n-        ModelUtils.removeEmptyValuesFromTolerations(tolerationList);\n-\n-        StatefulSet ss = new StatefulSetBuilder()\n-                .withNewMetadata()\n-                .withNamespace(namespace)\n-                .withName(\"foo\")\n-                .endMetadata()\n-                .withNewSpec()\n-                    .withSelector(new LabelSelectorBuilder().withMatchLabels(Collections.singletonMap(\"app\", \"test\")).build())\n-                    .withNewTemplate()\n-                        .withNewMetadata()\n-                            .withLabels(Collections.singletonMap(\"app\", \"test\"))\n-                        .endMetadata()\n-                        .withNewSpec()\n-                            .withTolerations(tolerationList)\n-                        .withDnsPolicy(\"ClusterFirst\")\n-                        .withRestartPolicy(\"Always\")\n-                        .withSchedulerName(\"default-scheduler\")\n-                        .withSecurityContext(null)\n-                        .withTerminationGracePeriodSeconds(30L)\n-\n-                        .endSpec()\n-                    .endTemplate()\n-                .endSpec()\n-                .build();\n-\n-        KubernetesClient client = new DefaultKubernetesClient();\n-\n-        client.apps().statefulSets().inNamespace(namespace).create(ss);\n-        StatefulSet stsk8s = client.apps().statefulSets().inNamespace(namespace).withName(\"foo\").get();\n-        StatefulSetDiff diff = new StatefulSetDiff(ss, stsk8s);\n-        Checkpoint checkpoint = context.checkpoint();\n-        context.verify(() -> {\n-                assertThat(diff.changesSpecTemplate(), is(false));\n-                assertThat(stsk8s.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                assertThat(ss.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                checkpoint.flag();\n-            }\n-        );\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwNDU1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455304550", "bodyText": "Alignment and empty line.", "author": "scholzj", "createdAt": "2020-07-15T19:54:53Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {\n+\n+    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n+    private static Vertx vertx;\n+    private String namespace = \"kafka-it-2\";\n+\n+    @BeforeAll\n+    public static void before() {\n+        vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(\n+                new MicrometerMetricsOptions()\n+                        .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n+                        .setEnabled(true)\n+        ));\n+    }\n+\n+    @AfterAll\n+    public static void after(VertxTestContext context) {\n+        Checkpoint checkpoint = context.checkpoint();\n+        vertx.close(done -> {\n+            checkpoint.flag();\n+        });\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() throws IOException, InterruptedException {\n+        cluster.createNamespace(namespace);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        cluster.deleteNamespaces();\n+    }\n+\n+    @Test\n+    public void testEmptyStringValueIntoleration(VertxTestContext context) {\n+        Toleration t1 = new TolerationBuilder()\n+                .withEffect(\"NoSchedule\")\n+                .withValue(\"\")\n+                .build();\n+\n+        List<Toleration> tolerationList = new ArrayList<>();\n+        tolerationList.add(t1);\n+\n+        // CO does this over the generated STS\n+        ModelUtils.removeEmptyValuesFromTolerations(tolerationList);\n+\n+        StatefulSet ss = new StatefulSetBuilder()\n+                .withNewMetadata()\n+                .withNamespace(namespace)\n+                .withName(\"foo\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withSelector(new LabelSelectorBuilder().withMatchLabels(Collections.singletonMap(\"app\", \"test\")).build())\n+                    .withNewTemplate()\n+                        .withNewMetadata()\n+                            .withLabels(Collections.singletonMap(\"app\", \"test\"))\n+                        .endMetadata()\n+                        .withNewSpec()\n+                            .withTolerations(tolerationList)\n+                        .withDnsPolicy(\"ClusterFirst\")\n+                        .withRestartPolicy(\"Always\")\n+                        .withSchedulerName(\"default-scheduler\")\n+                        .withSecurityContext(null)\n+                        .withTerminationGracePeriodSeconds(30L)\n+", "originalCommit": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c4803e12a4fe1a77f3c685591d3cc9b787a3531", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\ndeleted file mode 100644\nindex 0b3760525..000000000\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\n+++ /dev/null\n\n@@ -1,125 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.operator.cluster.operator.assembly;\n-\n-import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n-import io.fabric8.kubernetes.api.model.Toleration;\n-import io.fabric8.kubernetes.api.model.TolerationBuilder;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n-import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n-import io.fabric8.kubernetes.client.KubernetesClient;\n-import io.strimzi.operator.cluster.model.ModelUtils;\n-import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n-import io.strimzi.test.k8s.KubeClusterResource;\n-import io.vertx.core.Vertx;\n-import io.vertx.core.VertxOptions;\n-import io.vertx.junit5.Checkpoint;\n-import io.vertx.junit5.VertxExtension;\n-import io.vertx.junit5.VertxTestContext;\n-import io.vertx.micrometer.MicrometerMetricsOptions;\n-import io.vertx.micrometer.VertxPrometheusOptions;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-\n-@ExtendWith(VertxExtension.class)\n-public class KafkaIT {\n-\n-    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n-    private static Vertx vertx;\n-    private String namespace = \"kafka-it-2\";\n-\n-    @BeforeAll\n-    public static void before() {\n-        vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(\n-                new MicrometerMetricsOptions()\n-                        .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n-                        .setEnabled(true)\n-        ));\n-    }\n-\n-    @AfterAll\n-    public static void after(VertxTestContext context) {\n-        Checkpoint checkpoint = context.checkpoint();\n-        vertx.close(done -> {\n-            checkpoint.flag();\n-        });\n-    }\n-\n-    @BeforeEach\n-    public void beforeEach() throws IOException, InterruptedException {\n-        cluster.createNamespace(namespace);\n-    }\n-\n-    @AfterEach\n-    public void afterEach() {\n-        cluster.deleteNamespaces();\n-    }\n-\n-    @Test\n-    public void testEmptyStringValueIntoleration(VertxTestContext context) {\n-        Toleration t1 = new TolerationBuilder()\n-                .withEffect(\"NoSchedule\")\n-                .withValue(\"\")\n-                .build();\n-\n-        List<Toleration> tolerationList = new ArrayList<>();\n-        tolerationList.add(t1);\n-\n-        // CO does this over the generated STS\n-        ModelUtils.removeEmptyValuesFromTolerations(tolerationList);\n-\n-        StatefulSet ss = new StatefulSetBuilder()\n-                .withNewMetadata()\n-                .withNamespace(namespace)\n-                .withName(\"foo\")\n-                .endMetadata()\n-                .withNewSpec()\n-                    .withSelector(new LabelSelectorBuilder().withMatchLabels(Collections.singletonMap(\"app\", \"test\")).build())\n-                    .withNewTemplate()\n-                        .withNewMetadata()\n-                            .withLabels(Collections.singletonMap(\"app\", \"test\"))\n-                        .endMetadata()\n-                        .withNewSpec()\n-                            .withTolerations(tolerationList)\n-                        .withDnsPolicy(\"ClusterFirst\")\n-                        .withRestartPolicy(\"Always\")\n-                        .withSchedulerName(\"default-scheduler\")\n-                        .withSecurityContext(null)\n-                        .withTerminationGracePeriodSeconds(30L)\n-\n-                        .endSpec()\n-                    .endTemplate()\n-                .endSpec()\n-                .build();\n-\n-        KubernetesClient client = new DefaultKubernetesClient();\n-\n-        client.apps().statefulSets().inNamespace(namespace).create(ss);\n-        StatefulSet stsk8s = client.apps().statefulSets().inNamespace(namespace).withName(\"foo\").get();\n-        StatefulSetDiff diff = new StatefulSetDiff(ss, stsk8s);\n-        Checkpoint checkpoint = context.checkpoint();\n-        context.verify(() -> {\n-                assertThat(diff.changesSpecTemplate(), is(false));\n-                assertThat(stsk8s.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                assertThat(ss.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                checkpoint.flag();\n-            }\n-        );\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMwNjMyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3268#discussion_r455306329", "bodyText": "What is Vertx used for? I do not see it in the code.", "author": "scholzj", "createdAt": "2020-07-15T19:58:04Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.operator.cluster.operator.assembly;\n+\n+import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.fabric8.kubernetes.api.model.TolerationBuilder;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n+import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n+import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.strimzi.operator.cluster.model.ModelUtils;\n+import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n+import io.strimzi.test.k8s.KubeClusterResource;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import io.vertx.junit5.Checkpoint;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+import io.vertx.micrometer.MicrometerMetricsOptions;\n+import io.vertx.micrometer.VertxPrometheusOptions;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@ExtendWith(VertxExtension.class)\n+public class KafkaIT {\n+\n+    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n+    private static Vertx vertx;", "originalCommit": "192a30cd3876d3b7d21ab6bb62f1e2fb8d5215ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c4803e12a4fe1a77f3c685591d3cc9b787a3531", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\ndeleted file mode 100644\nindex 0b3760525..000000000\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaIT.java\n+++ /dev/null\n\n@@ -1,125 +0,0 @@\n-/*\n- * Copyright Strimzi authors.\n- * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n- */\n-package io.strimzi.operator.cluster.operator.assembly;\n-\n-import io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\n-import io.fabric8.kubernetes.api.model.Toleration;\n-import io.fabric8.kubernetes.api.model.TolerationBuilder;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSet;\n-import io.fabric8.kubernetes.api.model.apps.StatefulSetBuilder;\n-import io.fabric8.kubernetes.client.DefaultKubernetesClient;\n-import io.fabric8.kubernetes.client.KubernetesClient;\n-import io.strimzi.operator.cluster.model.ModelUtils;\n-import io.strimzi.operator.cluster.operator.resource.StatefulSetDiff;\n-import io.strimzi.test.k8s.KubeClusterResource;\n-import io.vertx.core.Vertx;\n-import io.vertx.core.VertxOptions;\n-import io.vertx.junit5.Checkpoint;\n-import io.vertx.junit5.VertxExtension;\n-import io.vertx.junit5.VertxTestContext;\n-import io.vertx.micrometer.MicrometerMetricsOptions;\n-import io.vertx.micrometer.VertxPrometheusOptions;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-\n-@ExtendWith(VertxExtension.class)\n-public class KafkaIT {\n-\n-    protected KubeClusterResource cluster = KubeClusterResource.getInstance();\n-    private static Vertx vertx;\n-    private String namespace = \"kafka-it-2\";\n-\n-    @BeforeAll\n-    public static void before() {\n-        vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(\n-                new MicrometerMetricsOptions()\n-                        .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n-                        .setEnabled(true)\n-        ));\n-    }\n-\n-    @AfterAll\n-    public static void after(VertxTestContext context) {\n-        Checkpoint checkpoint = context.checkpoint();\n-        vertx.close(done -> {\n-            checkpoint.flag();\n-        });\n-    }\n-\n-    @BeforeEach\n-    public void beforeEach() throws IOException, InterruptedException {\n-        cluster.createNamespace(namespace);\n-    }\n-\n-    @AfterEach\n-    public void afterEach() {\n-        cluster.deleteNamespaces();\n-    }\n-\n-    @Test\n-    public void testEmptyStringValueIntoleration(VertxTestContext context) {\n-        Toleration t1 = new TolerationBuilder()\n-                .withEffect(\"NoSchedule\")\n-                .withValue(\"\")\n-                .build();\n-\n-        List<Toleration> tolerationList = new ArrayList<>();\n-        tolerationList.add(t1);\n-\n-        // CO does this over the generated STS\n-        ModelUtils.removeEmptyValuesFromTolerations(tolerationList);\n-\n-        StatefulSet ss = new StatefulSetBuilder()\n-                .withNewMetadata()\n-                .withNamespace(namespace)\n-                .withName(\"foo\")\n-                .endMetadata()\n-                .withNewSpec()\n-                    .withSelector(new LabelSelectorBuilder().withMatchLabels(Collections.singletonMap(\"app\", \"test\")).build())\n-                    .withNewTemplate()\n-                        .withNewMetadata()\n-                            .withLabels(Collections.singletonMap(\"app\", \"test\"))\n-                        .endMetadata()\n-                        .withNewSpec()\n-                            .withTolerations(tolerationList)\n-                        .withDnsPolicy(\"ClusterFirst\")\n-                        .withRestartPolicy(\"Always\")\n-                        .withSchedulerName(\"default-scheduler\")\n-                        .withSecurityContext(null)\n-                        .withTerminationGracePeriodSeconds(30L)\n-\n-                        .endSpec()\n-                    .endTemplate()\n-                .endSpec()\n-                .build();\n-\n-        KubernetesClient client = new DefaultKubernetesClient();\n-\n-        client.apps().statefulSets().inNamespace(namespace).create(ss);\n-        StatefulSet stsk8s = client.apps().statefulSets().inNamespace(namespace).withName(\"foo\").get();\n-        StatefulSetDiff diff = new StatefulSetDiff(ss, stsk8s);\n-        Checkpoint checkpoint = context.checkpoint();\n-        context.verify(() -> {\n-                assertThat(diff.changesSpecTemplate(), is(false));\n-                assertThat(stsk8s.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                assertThat(ss.getSpec().getTemplate().getSpec().getTolerations().get(0).getValue(), is(nullValue()));\n-                checkpoint.flag();\n-            }\n-        );\n-    }\n-}\n"}}, {"oid": "8c4803e12a4fe1a77f3c685591d3cc9b787a3531", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8c4803e12a4fe1a77f3c685591d3cc9b787a3531", "message": "Sts diff comparing empty strings\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "e3a6e89156b671a579538542f270b22aa6eb6aa8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e3a6e89156b671a579538542f270b22aa6eb6aa8", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "4b061c1e7f7c9e470c71daab0b71555a02d14ca1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4b061c1e7f7c9e470c71daab0b71555a02d14ca1", "message": "prettier and less dumb\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "568d92f10a1f1a54a37eb265a48b6cf59a109c9c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/568d92f10a1f1a54a37eb265a48b6cf59a109c9c", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "787855c84061e41549a6dd82366710b0b0571ed3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/787855c84061e41549a6dd82366710b0b0571ed3", "message": "rename var\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "e650a76722573a6f10fd402b886fe94f43f200dc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e650a76722573a6f10fd402b886fe94f43f200dc", "message": "different approach\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:11Z", "type": "commit"}, {"oid": "66b45351b77af4d3fadcd130a8aa8862b81ff415", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/66b45351b77af4d3fadcd130a8aa8862b81ff415", "message": "comment\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:51Z", "type": "commit"}, {"oid": "d1d210eba8a61b832eaffdbf3e553d8db0a66bf7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d1d210eba8a61b832eaffdbf3e553d8db0a66bf7", "message": "refactor\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:51Z", "type": "commit"}, {"oid": "838c1615dd8c88b6b1942e0be2926edb63bea3bb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/838c1615dd8c88b6b1942e0be2926edb63bea3bb", "message": "just another parameters order\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:58:51Z", "type": "commit"}, {"oid": "9f2af961b0c20c0f8bd9968cde6048c7c9d90f6d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9f2af961b0c20c0f8bd9968cde6048c7c9d90f6d", "message": "friday tests\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:59:33Z", "type": "commit"}, {"oid": "9fbcc7820321f7a5807323a5de0eef36b5b01035", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9fbcc7820321f7a5807323a5de0eef36b5b01035", "message": "wait for vertx\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T06:59:33Z", "type": "commit"}, {"oid": "d0ad34ffb480fc7a41b9a41777798eac1ac11f40", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d0ad34ffb480fc7a41b9a41777798eac1ac11f40", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T07:03:15Z", "type": "forcePushed"}, {"oid": "113f6b3788a451938490d7ec1de86a93a0d7d801", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/113f6b3788a451938490d7ec1de86a93a0d7d801", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T07:08:35Z", "type": "commit"}, {"oid": "113f6b3788a451938490d7ec1de86a93a0d7d801", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/113f6b3788a451938490d7ec1de86a93a0d7d801", "message": "rebase + comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-07-24T07:08:35Z", "type": "forcePushed"}]}