{"pr_number": 2992, "pr_title": "Improve exponential backoff", "pr_createdAt": "2020-05-11T13:39:53Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992", "timeline": [{"oid": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1de7ded7720ad6e9742ec671f543fd597bb02a9c", "message": "Improve exponential backoff\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-11T13:37:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MDAzMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423350032", "bodyText": "The lala probably shouldn't be here ;-)", "author": "scholzj", "createdAt": "2020-05-11T22:13:03Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -416,22 +448,64 @@ String podName(Integer podId) {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n+            restartContext.clearConnectionError();\n         } catch (ExecutionException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e.getCause());\n+            maybeTcpProbe(podId, e, restartContext);\n         } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n+            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);", "originalCommit": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex 6542bfb330..79add95254 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -455,10 +454,8 @@ public class KafkaRoller {\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n             restartContext.clearConnectionError();\n-        } catch (ExecutionException e) {\n+        } catch (ExecutionException | TimeoutException e) {\n             maybeTcpProbe(podId, e, restartContext);\n-        } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MDQyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423350428", "bodyText": "These debuug messages are probably also not supposed to be here ;-)", "author": "scholzj", "createdAt": "2020-05-11T22:14:05Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -416,22 +448,64 @@ String podName(Integer podId) {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n+            restartContext.clearConnectionError();\n         } catch (ExecutionException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e.getCause());\n+            maybeTcpProbe(podId, e, restartContext);\n         } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n+            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n         return id;\n     }\n \n+    /**\n+     * If we've already had trouble connecting to this broker try to probe whether the connection is\n+     * open on the broker; if it's not then maybe throw a ForceableProblem to immediately force a restart.\n+     * This is an optimization for brokers which don't seem to be running.\n+     */\n+    private void maybeTcpProbe(int podId, ExecutionException executionException, RestartContext restartContext) throws ForceableProblem {\n+        log.info(\"debuug1 {} {}\", restartContext.connectionError(), System.currentTimeMillis());\n+        if (restartContext.connectionError() + 120_000 >= System.currentTimeMillis()) {\n+            log.info(\"debuug2\");", "originalCommit": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex 6542bfb330..79add95254 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -455,10 +454,8 @@ public class KafkaRoller {\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n             restartContext.clearConnectionError();\n-        } catch (ExecutionException e) {\n+        } catch (ExecutionException | TimeoutException e) {\n             maybeTcpProbe(podId, e, restartContext);\n-        } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MTEwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423351101", "bodyText": "Do we need to pass both ctx.backOff.done() and ctx? Cant we pass just ctx and get ctx.backOff.done() from it later? Or does this have some meaning - e.g. in testing?", "author": "scholzj", "createdAt": "2020-05-11T22:15:40Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -193,7 +212,7 @@ public String toString() {\n         singleExecutor.schedule(() -> {\n             log.debug(\"Considering restart of pod {} after delay of {} {}\", podId, delay, unit);\n             try {\n-                restartIfNecessary(podId, ctx.backOff.done());\n+                restartIfNecessary(podId, ctx.backOff.done(), ctx);", "originalCommit": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex 6542bfb330..79add95254 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -212,7 +212,7 @@ public class KafkaRoller {\n         singleExecutor.schedule(() -> {\n             log.debug(\"Considering restart of pod {} after delay of {} {}\", podId, delay, unit);\n             try {\n-                restartIfNecessary(podId, ctx.backOff.done(), ctx);\n+                restartIfNecessary(podId, ctx);\n                 ctx.promise.complete();\n             } catch (InterruptedException e) {\n                 // Let the executor deal with interruption.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MTg5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423351891", "bodyText": "Why do we use this here and not for Timeout exception?", "author": "scholzj", "createdAt": "2020-05-11T22:17:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -416,22 +448,64 @@ String podName(Integer podId) {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n+            restartContext.clearConnectionError();\n         } catch (ExecutionException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e.getCause());\n+            maybeTcpProbe(podId, e, restartContext);", "originalCommit": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex 6542bfb330..79add95254 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -455,10 +454,8 @@ public class KafkaRoller {\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n             restartContext.clearConnectionError();\n-        } catch (ExecutionException e) {\n+        } catch (ExecutionException | TimeoutException e) {\n             maybeTcpProbe(podId, e, restartContext);\n-        } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MjEwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423352109", "bodyText": "Why 120_000 an not operationTimeoutMs?", "author": "scholzj", "createdAt": "2020-05-11T22:18:17Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -416,22 +448,64 @@ String podName(Integer podId) {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n+            restartContext.clearConnectionError();\n         } catch (ExecutionException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e.getCause());\n+            maybeTcpProbe(podId, e, restartContext);\n         } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n+            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n         return id;\n     }\n \n+    /**\n+     * If we've already had trouble connecting to this broker try to probe whether the connection is\n+     * open on the broker; if it's not then maybe throw a ForceableProblem to immediately force a restart.\n+     * This is an optimization for brokers which don't seem to be running.\n+     */\n+    private void maybeTcpProbe(int podId, ExecutionException executionException, RestartContext restartContext) throws ForceableProblem {\n+        log.info(\"debuug1 {} {}\", restartContext.connectionError(), System.currentTimeMillis());\n+        if (restartContext.connectionError() + 120_000 >= System.currentTimeMillis()) {", "originalCommit": "1de7ded7720ad6e9742ec671f543fd597bb02a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MjEyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r423482126", "bodyText": "It is related to AdminClient default timeout (1 minute) + some reasonable offset.", "author": "sknot-rh", "createdAt": "2020-05-12T06:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MjEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex 6542bfb330..79add95254 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -455,10 +454,8 @@ public class KafkaRoller {\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n             restartContext.clearConnectionError();\n-        } catch (ExecutionException e) {\n+        } catch (ExecutionException | TimeoutException e) {\n             maybeTcpProbe(podId, e, restartContext);\n-        } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"lala Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n"}}, {"oid": "ba8c17d3d7bd13beb24c72d731597239262cd4a9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ba8c17d3d7bd13beb24c72d731597239262cd4a9", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-12T07:16:32Z", "type": "commit"}, {"oid": "1b105873667aad8a3e40afea6d3416a623e1f912", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1b105873667aad8a3e40afea6d3416a623e1f912", "message": "fix build\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-13T10:41:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0MzMxMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r424343311", "bodyText": "Can we rename immediateForce to forceNow to match the field?", "author": "tombentley", "createdAt": "2020-05-13T10:44:17Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -295,13 +315,24 @@ private void closeLoggingAnyError(Admin adminClient) {\n         }\n     }\n \n-    /** Exceptions which we're prepared to ignore in the final attempt */\n+    /** Exceptions which we're prepared to ignore (thus forcing a restart) in some circumstances. */\n     static final class ForceableProblem extends Exception {\n+        final boolean forceNow;\n         ForceableProblem(String msg) {\n             this(msg, null);\n         }\n+\n         ForceableProblem(String msg, Throwable cause) {\n+            this(msg, cause, false);\n+        }\n+\n+        ForceableProblem(String msg, boolean forceNow) {\n+            this(msg, null, forceNow);\n+        }\n+\n+        ForceableProblem(String msg, Throwable cause, boolean immediateForce) {", "originalCommit": "1b105873667aad8a3e40afea6d3416a623e1f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "142745ab4aac6ebaa5505846291b3f461fd85158", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex d3dc3e0194..e40067dee9 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -330,9 +330,9 @@ public class KafkaRoller {\n             this(msg, null, forceNow);\n         }\n \n-        ForceableProblem(String msg, Throwable cause, boolean immediateForce) {\n+        ForceableProblem(String msg, Throwable cause, boolean forceNow) {\n             super(msg, cause);\n-            this.forceNow = immediateForce;\n+            this.forceNow = forceNow;\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NjUwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2992#discussion_r424346502", "bodyText": "If this tcpProbe() call does not throw an IOException then this method returns normally and we lose the fact that executionException was thrown and the caller will say the controller is -1. Is that correct, or should we rethrow executionException if no IOException was thrown?", "author": "tombentley", "createdAt": "2020-05-13T10:50:51Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -416,22 +447,55 @@ String podName(Integer podId) {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n-        } catch (ExecutionException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e.getCause());\n-        } catch (TimeoutException e) {\n-            throw new ForceableProblem(\"Error while trying to determine the cluster controller from pod \" + podName(podId), e);\n+            restartContext.clearConnectionError();\n+        } catch (ExecutionException | TimeoutException e) {\n+            maybeTcpProbe(podId, e, restartContext);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n         log.debug(\"controller is {}\", id);\n         return id;\n     }\n \n+    /**\n+     * If we've already had trouble connecting to this broker try to probe whether the connection is\n+     * open on the broker; if it's not then maybe throw a ForceableProblem to immediately force a restart.\n+     * This is an optimization for brokers which don't seem to be running.\n+     */\n+    private void maybeTcpProbe(int podId, Exception executionException, RestartContext restartContext) throws ForceableProblem {\n+        if (restartContext.connectionError() + numPods * 120_000L >= System.currentTimeMillis()) {\n+            try {\n+                log.debug(\"Probing TCP port due to previous problems connecting to pod {}\", podId);\n+                // do a tcp connect and close (with a short connect timeout)\n+                tcpProbe(podName(podId), KafkaCluster.REPLICATION_PORT);", "originalCommit": "1b105873667aad8a3e40afea6d3416a623e1f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "142745ab4aac6ebaa5505846291b3f461fd85158", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex d3dc3e0194..e40067dee9 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -447,14 +447,16 @@ public class KafkaRoller {\n      * @return A future which completes the the node id of the controller of the cluster,\n      * or -1 if there is not currently a controller.\n      */\n-    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws ForceableProblem, InterruptedException {\n+    int controller(int podId, Admin ac, long timeout, TimeUnit unit, RestartContext restartContext) throws Exception {\n         Node controllerNode = null;\n         try {\n             DescribeClusterResult describeClusterResult = ac.describeCluster();\n             KafkaFuture<Node> controller = describeClusterResult.controller();\n             controllerNode = controller.get(timeout, unit);\n             restartContext.clearConnectionError();\n-        } catch (ExecutionException | TimeoutException e) {\n+        } catch (ExecutionException e) {\n+            maybeTcpProbe(podId, e, restartContext);\n+        } catch (TimeoutException e) {\n             maybeTcpProbe(podId, e, restartContext);\n         }\n         int id = controllerNode == null || Node.noNode().equals(controllerNode) ? -1 : controllerNode.id();\n"}}, {"oid": "142745ab4aac6ebaa5505846291b3f461fd85158", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/142745ab4aac6ebaa5505846291b3f461fd85158", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-05-13T11:14:09Z", "type": "commit"}]}