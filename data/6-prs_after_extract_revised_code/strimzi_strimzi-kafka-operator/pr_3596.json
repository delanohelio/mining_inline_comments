{"pr_number": 3596, "pr_title": "[systemtest][connect] Add test for mounting secrets and config maps as volumes", "pr_createdAt": "2020-09-03T07:24:12Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482768236", "bodyText": "Maybe put password to some variable?", "author": "Frawless", "createdAt": "2020-09-03T07:34:35Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1000,69 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = Base64.getEncoder().encodeToString(\"password\".getBytes());", "originalCommit": "a75aec29d15b5a018f861653bb8a5e44071ac5d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzYwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482777606", "bodyText": "Yes sure :)", "author": "im-konge", "createdAt": "2020-09-03T07:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NzgwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482787808", "bodyText": "Done", "author": "im-konge", "createdAt": "2020-09-03T08:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "896201b13597c3f5a69a42cefcb0157a89f474ee", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\nindex 11a78b1e60..7d07e42e9a 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n\n@@ -1002,7 +1002,8 @@ class ConnectST extends AbstractST {\n \n     @Test\n     void testMountingSecretAndConfigMapAsVolumes() {\n-        String secretPassword = Base64.getEncoder().encodeToString(\"password\".getBytes());\n+        String secretPassword = \"password\";\n+        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n         String secretEnv = \"MY_CONNECTOR_SECRET\";\n         String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n \n"}}, {"oid": "896201b13597c3f5a69a42cefcb0157a89f474ee", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/896201b13597c3f5a69a42cefcb0157a89f474ee", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T08:23:15Z", "type": "forcePushed"}, {"oid": "01e5c9e5074bca147302d56eb80c7177154e43b3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/01e5c9e5074bca147302d56eb80c7177154e43b3", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T08:50:07Z", "type": "forcePushed"}, {"oid": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T09:10:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482921217", "bodyText": "You seem to use both here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testMountingSecretAndConfigMapAsVolumes() {\n          \n          \n            \n                void testMountingSecretAndConfigMapAsVolumesAndEnvVars() {", "author": "scholzj", "createdAt": "2020-09-03T11:56:14Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {", "originalCommit": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDE1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482944157", "bodyText": "Yes! Thanks :)", "author": "im-konge", "createdAt": "2020-09-03T12:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDA2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r483004060", "bodyText": "Done", "author": "im-konge", "createdAt": "2020-09-03T14:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "51ba1fd251f7458020aa7cea3be750e17f7dcd01", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\nindex 137738f02d..e6828a3565 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n\n@@ -1003,29 +968,26 @@ class ConnectST extends AbstractST {\n     }\n \n     @Test\n-    void testMountingSecretAndConfigMapAsVolumes() {\n-        String secretPassword = \"password\";\n-        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n-        String secretEnv = \"MY_CONNECTOR_SECRET\";\n-        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+    void testMountingSecretsAsVolumesForConnectorConfig() {\n+        Map<String, Object> config = new HashMap<>();\n+        config.put(\"config.providers\", \"file\");\n+        config.put(\"config.providers.file.class\", \"org.apache.kafka.common.config.provider.FileConfigProvider\");\n+\n+        String dbLogin = \"dbUsername: my-user \\n\" +\n+                         \"dbPassword: my-password\";\n+\n+        Map<String, String> connectorProps = new HashMap<>();\n+        connectorProps.put(\"connector.properties\", Base64.getEncoder().encodeToString(dbLogin.getBytes()));\n \n         Secret connectSecret = new SecretBuilder()\n             .withNewMetadata()\n                 .withName(\"my-secret\")\n             .endMetadata()\n             .withType(\"Opaque\")\n-            .addToData(\"my-secret-key\", encodedPassword)\n-            .build();\n-\n-        ConfigMap configMap = new ConfigMapBuilder()\n-            .editOrNewMetadata()\n-                .withName(\"my-config-map\")\n-            .endMetadata()\n-            .addToData(\"my-key\", \"my-value\")\n+            .addToData(connectorProps)\n             .build();\n \n         kubeClient().createSecret(connectSecret);\n-        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482921498", "bodyText": "You check just the env vars. Not the volumes. You should also check the volumes (e.g. cat ....)", "author": "scholzj", "createdAt": "2020-09-03T11:56:44Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java", "diffHunk": "@@ -992,6 +1002,80 @@ void testScaleConnectAndConnectorSubresource() {\n         }\n     }\n \n+    @Test\n+    void testMountingSecretAndConfigMapAsVolumes() {\n+        String secretPassword = \"password\";\n+        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n+        String secretEnv = \"MY_CONNECTOR_SECRET\";\n+        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+\n+        Secret connectSecret = new SecretBuilder()\n+            .withNewMetadata()\n+                .withName(\"my-secret\")\n+            .endMetadata()\n+            .withType(\"Opaque\")\n+            .addToData(\"my-secret-key\", encodedPassword)\n+            .build();\n+\n+        ConfigMap configMap = new ConfigMapBuilder()\n+            .editOrNewMetadata()\n+                .withName(\"my-config-map\")\n+            .endMetadata()\n+            .addToData(\"my-key\", \"my-value\")\n+            .build();\n+\n+        kubeClient().createSecret(connectSecret);\n+        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .editSpec()\n+                .withNewExternalConfiguration()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-secret\")\n+                        .withSecret(new SecretVolumeSourceBuilder().withSecretName(\"my-secret\").build())\n+                    .endVolume()\n+                    .addNewVolume()\n+                        .withNewName(\"connect-config-map\")\n+                        .withConfigMap(new ConfigMapVolumeSourceBuilder().withName(\"my-config-map\").build())\n+                    .endVolume()\n+                    .addNewEnv()\n+                        .withNewName(secretEnv)\n+                        .withNewValueFrom()\n+                            .withSecretKeyRef(\n+                                new SecretKeySelectorBuilder()\n+                                    .withKey(\"my-secret-key\")\n+                                    .withName(connectSecret.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                    .addNewEnv()\n+                        .withNewName(configMapEnv)\n+                        .withNewValueFrom()\n+                            .withConfigMapKeyRef(\n+                                new ConfigMapKeySelectorBuilder()\n+                                    .withKey(\"my-key\")\n+                                    .withName(configMap.getMetadata().getName())\n+                                    .withOptional(false)\n+                                    .build())\n+                        .endValueFrom()\n+                    .endEnv()\n+                .endExternalConfiguration()\n+            .endSpec()\n+            .done();\n+\n+        String connectPodName = kubeClient().listPods(Labels.STRIMZI_KIND_LABEL, KafkaConnect.RESOURCE_KIND).get(0).getMetadata().getName();\n+\n+        LOGGER.info(\"Check if the ENVs are correctly contains desired values\");\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + secretEnv).out().trim(), equalTo(secretPassword));\n+        assertThat(cmdKubeClient().execInPod(connectPodName, \"/bin/bash\", \"-c\", \"printenv \" + configMapEnv).out().trim(), equalTo(\"my-value\"));", "originalCommit": "9fb84ba8ff1e67e6aba6e91bc57708b77a69d7a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDIzMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r482944233", "bodyText": "Sure thing, thanks :)", "author": "im-konge", "createdAt": "2020-09-03T12:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDAxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3596#discussion_r483004013", "bodyText": "Done", "author": "im-konge", "createdAt": "2020-09-03T14:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "51ba1fd251f7458020aa7cea3be750e17f7dcd01", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\nindex 137738f02d..e6828a3565 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/connect/ConnectST.java\n\n@@ -1003,29 +968,26 @@ class ConnectST extends AbstractST {\n     }\n \n     @Test\n-    void testMountingSecretAndConfigMapAsVolumes() {\n-        String secretPassword = \"password\";\n-        String encodedPassword = Base64.getEncoder().encodeToString(secretPassword.getBytes());\n-        String secretEnv = \"MY_CONNECTOR_SECRET\";\n-        String configMapEnv = \"MY_CONNECT_CONFIG_MAP\";\n+    void testMountingSecretsAsVolumesForConnectorConfig() {\n+        Map<String, Object> config = new HashMap<>();\n+        config.put(\"config.providers\", \"file\");\n+        config.put(\"config.providers.file.class\", \"org.apache.kafka.common.config.provider.FileConfigProvider\");\n+\n+        String dbLogin = \"dbUsername: my-user \\n\" +\n+                         \"dbPassword: my-password\";\n+\n+        Map<String, String> connectorProps = new HashMap<>();\n+        connectorProps.put(\"connector.properties\", Base64.getEncoder().encodeToString(dbLogin.getBytes()));\n \n         Secret connectSecret = new SecretBuilder()\n             .withNewMetadata()\n                 .withName(\"my-secret\")\n             .endMetadata()\n             .withType(\"Opaque\")\n-            .addToData(\"my-secret-key\", encodedPassword)\n-            .build();\n-\n-        ConfigMap configMap = new ConfigMapBuilder()\n-            .editOrNewMetadata()\n-                .withName(\"my-config-map\")\n-            .endMetadata()\n-            .addToData(\"my-key\", \"my-value\")\n+            .addToData(connectorProps)\n             .build();\n \n         kubeClient().createSecret(connectSecret);\n-        kubeClient().getClient().configMaps().inNamespace(NAMESPACE).createOrReplace(configMap);\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n \n"}}, {"oid": "51ba1fd251f7458020aa7cea3be750e17f7dcd01", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51ba1fd251f7458020aa7cea3be750e17f7dcd01", "message": "add beginning of test for volumes\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:04:15Z", "type": "commit"}, {"oid": "c0eee5ebaec802d4a576707abeb9d510815bf103", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c0eee5ebaec802d4a576707abeb9d510815bf103", "message": "add test for mounting secret and cm\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:04:16Z", "type": "commit"}, {"oid": "b6ad813496f438f831a9bad01e1c589a2907602d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b6ad813496f438f831a9bad01e1c589a2907602d", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:04:16Z", "type": "commit"}, {"oid": "32d160732c31488cf9678bdacd991a4b2b572d2b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/32d160732c31488cf9678bdacd991a4b2b572d2b", "message": "scholz comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:04:16Z", "type": "commit"}, {"oid": "32d160732c31488cf9678bdacd991a4b2b572d2b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/32d160732c31488cf9678bdacd991a4b2b572d2b", "message": "scholz comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:04:16Z", "type": "forcePushed"}, {"oid": "2aac51f6686251c63555a3593c0ebc9f9fcc211c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2aac51f6686251c63555a3593c0ebc9f9fcc211c", "message": "fixup! scholz comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-09-03T14:24:42Z", "type": "commit"}]}