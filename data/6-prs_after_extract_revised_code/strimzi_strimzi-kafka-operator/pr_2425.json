{"pr_number": 2425, "pr_title": "Add list of connector plugins to Kafka Connect status", "pr_createdAt": "2020-01-18T19:04:10Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425", "timeline": [{"oid": "376ad95fa26f9f3115b1047600bd33560254a6af", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/376ad95fa26f9f3115b1047600bd33560254a6af", "message": "Add list of connector plugins to Kafka Connect status\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-18T18:00:30Z", "type": "commit"}, {"oid": "cc0b2c022d966564ba16d35f68f0eb37f2818d22", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cc0b2c022d966564ba16d35f68f0eb37f2818d22", "message": "Fix spotbugs\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-18T19:23:13Z", "type": "commit"}, {"oid": "af349b019bb93740eec9cb90906c437ad4ff535d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/af349b019bb93740eec9cb90906c437ad4ff535d", "message": "Fix tests\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-18T20:07:54Z", "type": "commit"}, {"oid": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75", "message": "Fix derived resources\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-18T20:45:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNDE0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368434147", "bodyText": "There's ConnectRestException which you should use here.", "author": "tombentley", "createdAt": "2020-01-20T09:09:46Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "diffHunk": "@@ -212,4 +215,37 @@ public KafkaConnectApiImpl(Vertx vertx) {\n                 .end();\n         return result;\n     }\n+\n+    @Override\n+    public Future<List<ConnectorPlugin>> listConnectorPlugins(String host, int port) {\n+        Future<List<ConnectorPlugin>> result = Future.future();\n+        HttpClientOptions options = new HttpClientOptions().setLogActivity(true);\n+        String path = \"/connector-plugins\";\n+        vertx.createHttpClient(options)\n+                .get(port, host, path, response -> {\n+                    response.exceptionHandler(error -> {\n+                        result.fail(error);\n+                    });\n+                    if (response.statusCode() == 200) {\n+                        response.bodyHandler(buffer -> {\n+                            ObjectMapper mapper = new ObjectMapper();\n+\n+                            try {\n+                                result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n+                            } catch (IOException e)  {\n+                                log.warn(\"Failed to parse list of connector plugins\");\n+                                result.fail(e);\n+                            }\n+                        });\n+                    } else {\n+                        result.fail(\"Unexpected status code \" + response.statusCode()", "originalCommit": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ef0460d80b8b5e82c2aa17546206c5eb7860d90", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\nindex c50200a411..ef5158f375 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\n\n@@ -233,13 +241,12 @@ class KafkaConnectApiImpl implements KafkaConnectApi {\n                             try {\n                                 result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n                             } catch (IOException e)  {\n-                                log.warn(\"Failed to parse list of connector plugins\");\n-                                result.fail(e);\n+                                log.warn(\"Failed to parse list of connector plugins\", e);\n+                                result.fail(new ConnectRestException(response, \"Failed to parse list of connector plugins\", e));\n                             }\n                         });\n                     } else {\n-                        result.fail(\"Unexpected status code \" + response.statusCode()\n-                                + \" for GET request to \" + host + \":\" + port + path);\n+                        result.fail(new ConnectRestException(response, \"Unexpected status code\"));\n                     }\n                 })\n                 .exceptionHandler(result::fail)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNTUxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368435516", "bodyText": "I wonder if you should use ConnectRestException here. Until now ConnectRestException has been for lower level errors in handling the HTTP. Here the HTTP worked but returned something that wasn't valid JSON, or was not the expected JSON.", "author": "tombentley", "createdAt": "2020-01-20T09:12:42Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java", "diffHunk": "@@ -212,4 +215,37 @@ public KafkaConnectApiImpl(Vertx vertx) {\n                 .end();\n         return result;\n     }\n+\n+    @Override\n+    public Future<List<ConnectorPlugin>> listConnectorPlugins(String host, int port) {\n+        Future<List<ConnectorPlugin>> result = Future.future();\n+        HttpClientOptions options = new HttpClientOptions().setLogActivity(true);\n+        String path = \"/connector-plugins\";\n+        vertx.createHttpClient(options)\n+                .get(port, host, path, response -> {\n+                    response.exceptionHandler(error -> {\n+                        result.fail(error);\n+                    });\n+                    if (response.statusCode() == 200) {\n+                        response.bodyHandler(buffer -> {\n+                            ObjectMapper mapper = new ObjectMapper();\n+\n+                            try {\n+                                result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n+                            } catch (IOException e)  {\n+                                log.warn(\"Failed to parse list of connector plugins\");\n+                                result.fail(e);", "originalCommit": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ef0460d80b8b5e82c2aa17546206c5eb7860d90", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\nindex c50200a411..ef5158f375 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApi.java\n\n@@ -233,13 +241,12 @@ class KafkaConnectApiImpl implements KafkaConnectApi {\n                             try {\n                                 result.complete(Arrays.asList(mapper.readValue(buffer.getBytes(), ConnectorPlugin[].class)));\n                             } catch (IOException e)  {\n-                                log.warn(\"Failed to parse list of connector plugins\");\n-                                result.fail(e);\n+                                log.warn(\"Failed to parse list of connector plugins\", e);\n+                                result.fail(new ConnectRestException(response, \"Failed to parse list of connector plugins\", e));\n                             }\n                         });\n                     } else {\n-                        result.fail(\"Unexpected status code \" + response.statusCode()\n-                                + \" for GET request to \" + host + \":\" + port + path);\n+                        result.fail(new ConnectRestException(response, \"Unexpected status code\"));\n                     }\n                 })\n                 .exceptionHandler(result::fail)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNjI4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2425#discussion_r368436289", "bodyText": "So we really want to assert on the exact version number? We'll end up having to do this every time we change the version of Kafka being used to run the test. I think it's enough to test non-emptiness.", "author": "tombentley", "createdAt": "2020-01-20T09:14:17Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java", "diffHunk": "@@ -96,7 +98,22 @@ public void after() {\n     public void test(VertxTestContext context) throws InterruptedException {\n         KafkaConnectApi client = new KafkaConnectApiImpl(vertx);\n         CountDownLatch async = new CountDownLatch(1);\n-        client.list(\"localhost\", PORT)\n+        client.listConnectorPlugins(\"localhost\", PORT)\n+            .compose(connectorPlugins -> {\n+                assertEquals(connectorPlugins.size(), 2);\n+\n+                ConnectorPlugin fileSink = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSinkConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n+                assertNotNull(fileSink);\n+                assertEquals(fileSink.getType(), \"sink\");\n+                assertEquals(fileSink.getVersion(), \"2.3.1\");\n+\n+                ConnectorPlugin fileSource = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSourceConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n+                assertNotNull(fileSource);\n+                assertEquals(fileSource.getType(), \"source\");\n+                assertEquals(fileSource.getVersion(), \"2.3.1\");", "originalCommit": "c1a24b4c04c22b85c8e4c8e8d1fe78087beb9d75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ef0460d80b8b5e82c2aa17546206c5eb7860d90", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java\nindex 4f55ff6846..7cab1a1a46 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectApiTest.java\n\n@@ -105,12 +106,14 @@ public class KafkaConnectApiTest {\n                 ConnectorPlugin fileSink = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSinkConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n                 assertNotNull(fileSink);\n                 assertEquals(fileSink.getType(), \"sink\");\n-                assertEquals(fileSink.getVersion(), \"2.3.1\");\n+                assertNotNull(fileSink.getVersion());\n+                assertFalse(fileSink.getVersion().isEmpty());\n \n                 ConnectorPlugin fileSource = connectorPlugins.stream().filter(connector -> \"org.apache.kafka.connect.file.FileStreamSourceConnector\".equals(connector.getConnectorClass())).findFirst().orElse(null);\n                 assertNotNull(fileSource);\n                 assertEquals(fileSource.getType(), \"source\");\n-                assertEquals(fileSource.getVersion(), \"2.3.1\");\n+                assertNotNull(fileSource.getVersion());\n+                assertFalse(fileSource.getVersion().isEmpty());\n \n                 return client.list(\"localhost\", PORT);\n             })\n"}}, {"oid": "6ef0460d80b8b5e82c2aa17546206c5eb7860d90", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6ef0460d80b8b5e82c2aa17546206c5eb7860d90", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-20T09:56:55Z", "type": "commit"}, {"oid": "26184efcceb3d37e544ab84f73c2ecfb365e27d9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/26184efcceb3d37e544ab84f73c2ecfb365e27d9", "message": "Merge branch 'master' into add-list-of-connector-plugins-to-kafka-connect-status", "committedDate": "2020-01-20T09:59:09Z", "type": "commit"}, {"oid": "da47f1d6a1cdf36cabd7ff2d30c85d1028096ab8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/da47f1d6a1cdf36cabd7ff2d30c85d1028096ab8", "message": "Merge branch 'master' into add-list-of-connector-plugins-to-kafka-connect-status", "committedDate": "2020-01-20T10:41:55Z", "type": "commit"}, {"oid": "c4b571fa6982098045ae620969d980eddcb4e2bd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c4b571fa6982098045ae620969d980eddcb4e2bd", "message": "Fix Connect S2I tests after connector reconciliation in S2I has been fixed\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-20T11:23:31Z", "type": "commit"}, {"oid": "3398b2b4f64cf7166ec563fa05a25f780a9b1c80", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3398b2b4f64cf7166ec563fa05a25f780a9b1c80", "message": "Fix checkstyle\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-01-20T13:12:26Z", "type": "commit"}]}