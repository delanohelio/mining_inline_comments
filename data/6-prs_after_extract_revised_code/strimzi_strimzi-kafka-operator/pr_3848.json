{"pr_number": 3848, "pr_title": "Fix kafka roller when kafka CR is fixed", "pr_createdAt": "2020-10-20T16:34:59Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848", "timeline": [{"oid": "28f27c855405ad19fca58caf7a8dd10882abcee7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/28f27c855405ad19fca58caf7a8dd10882abcee7", "message": "Fix kafka roller when kafka CR is fixed\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-20T16:31:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNDg3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r508804878", "bodyText": "The empty line is not needed I guess.", "author": "scholzj", "createdAt": "2020-10-20T20:05:10Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +217,69 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+", "originalCommit": "f746a6b41580950d2bef4b7da3aa42891ffb8af9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28e6604349fc7fcf4e408e73b2fdd4a3b237c908", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\nindex 965bda2af..ffae69351 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n\n@@ -218,8 +221,12 @@ class KafkaRollerST extends AbstractST {\n     }\n \n     @Test\n-\n     void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n+        // 2. wait for Kafka not ready\n+        // 3. fix the Kafka by updating pod template to existing node\n+        // 4. wait for Kafka ready\n         cmdKubeClient().exec(\"label\", \"nodes\", \"localhost\", \"dedicated=Kafka_correct\", \"--overwrite\");\n \n         NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwNTc5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r508805795", "bodyText": "Might be worth adding a comment to explain what and why is it testing.", "author": "scholzj", "createdAt": "2020-10-20T20:06:49Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +217,69 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+\n+    void testKafkaPodPendingDueToRack() {", "originalCommit": "f746a6b41580950d2bef4b7da3aa42891ffb8af9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28e6604349fc7fcf4e408e73b2fdd4a3b237c908", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\nindex 965bda2af..ffae69351 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n\n@@ -218,8 +221,12 @@ class KafkaRollerST extends AbstractST {\n     }\n \n     @Test\n-\n     void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n+        // 2. wait for Kafka not ready\n+        // 3. fix the Kafka by updating pod template to existing node\n+        // 4. wait for Kafka ready\n         cmdKubeClient().exec(\"label\", \"nodes\", \"localhost\", \"dedicated=Kafka_correct\", \"--overwrite\");\n \n         NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n"}}, {"oid": "28e6604349fc7fcf4e408e73b2fdd4a3b237c908", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/28e6604349fc7fcf4e408e73b2fdd4a3b237c908", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T06:47:45Z", "type": "forcePushed"}, {"oid": "5c2eec7fe1829a63297c41932b8a21db5bc28a9e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5c2eec7fe1829a63297c41932b8a21db5bc28a9e", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T06:48:47Z", "type": "commit"}, {"oid": "5c2eec7fe1829a63297c41932b8a21db5bc28a9e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5c2eec7fe1829a63297c41932b8a21db5bc28a9e", "message": "comments\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T06:48:47Z", "type": "forcePushed"}, {"oid": "3eaedfed33189a98ef7b83a51c6c16ec12df20c8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3eaedfed33189a98ef7b83a51c6c16ec12df20c8", "message": "multi/single node labelling\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T10:05:50Z", "type": "commit"}, {"oid": "20e28f7ad728e5715078d5fd6c9189bdac877f6e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20e28f7ad728e5715078d5fd6c9189bdac877f6e", "message": "apply Jakub's wisdom\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T10:43:02Z", "type": "commit"}, {"oid": "ab1a5f5e08a60dab03cac0b865602264b8af5519", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ab1a5f5e08a60dab03cac0b865602264b8af5519", "message": "cs\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T11:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzYxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509347610", "bodyText": "No need for this to return a Future. It could return a boolean just as well.", "author": "tombentley", "createdAt": "2020-10-21T14:41:32Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java", "diffHunk": "@@ -168,7 +168,17 @@ public KafkaRoller(Vertx vertx, Reconciliation reconciliation, PodOperator podOp\n     private ConcurrentHashMap<Integer, RestartContext> podToContext = new ConcurrentHashMap<>();\n     private Function<Pod, List<String>> podNeedsRestart;\n \n-    /**\n+    private Future<Void> initAdminClient() {", "originalCommit": "ab1a5f5e08a60dab03cac0b865602264b8af5519", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\nindex b5f1fe319..bc603e956 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/KafkaRoller.java\n\n@@ -168,15 +168,19 @@ public class KafkaRoller {\n     private ConcurrentHashMap<Integer, RestartContext> podToContext = new ConcurrentHashMap<>();\n     private Function<Pod, List<String>> podNeedsRestart;\n \n-    private Future<Void> initAdminClient() {\n+    /**\n+     * If allClient has not been initialized yet, does exactly that\n+     * @return true if the creation of AC succeeded, false otherwise\n+     */\n+    private boolean initAdminClient() {\n         if (this.allClient == null) {\n             try {\n                 this.allClient = adminClient(IntStream.range(0, numPods).boxed().collect(Collectors.toList()), false);\n             } catch (ForceableProblem | FatalProblem e) {\n-                return Future.failedFuture(e);\n+                return false;\n             }\n         }\n-        return Future.succeededFuture();\n+        return true;\n     }\n         /**\n      * Asynchronously perform a rolling restart of some subset of the pods,\n"}}, {"oid": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/31627c6c0de965ae486231a4a7e7fbe76dbf6a14", "message": "more correct return type\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T15:06:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3NzEwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509377108", "bodyText": "What state of pods is expect? You can add it to comment as well", "author": "Frawless", "createdAt": "2020-10-21T15:17:11Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +214,56 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+    void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)", "originalCommit": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14ddcf8807921d5e486d1e584fb26a6292a64ba7", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\nindex d95465170..9786168e7 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n\n@@ -217,10 +217,10 @@ class KafkaRollerST extends AbstractST {\n     @Test\n     void testKafkaPodPendingDueToRack() {\n         // Testing this scenario\n-        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n-        // 2. wait for Kafka not ready\n-        // 3. fix the Kafka CR\n-        // 4. wait for Kafka ready\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node) kafka pods should not exist\n+        // 2. wait for Kafka not ready, kafka pods should be in the pending state\n+        // 3. fix the Kafka CR, kafka pods should be in the pending state\n+        // 4. wait for Kafka ready, kafka pods should NOT be in the pending state\n \n         NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n                 .withKey(\"dedicated_test\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3OTE4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3848#discussion_r509379182", "bodyText": "Shouldn't we add some check that pods are in pending for some time?", "author": "Frawless", "createdAt": "2020-10-21T15:19:42Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java", "diffHunk": "@@ -205,6 +214,56 @@ void testKafkaPodPending() {\n         KafkaUtils.waitForKafkaReady(CLUSTER_NAME);\n     }\n \n+    @Test\n+    void testKafkaPodPendingDueToRack() {\n+        // Testing this scenario\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n+        // 2. wait for Kafka not ready\n+        // 3. fix the Kafka CR\n+        // 4. wait for Kafka ready\n+\n+        NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n+                .withKey(\"dedicated_test\")\n+                .withNewOperator(\"In\")\n+                .withValues(\"Kafka\")\n+                .build();\n+\n+        NodeSelectorTerm nst = new NodeSelectorTermBuilder()\n+                .withMatchExpressions(nsr)\n+                .build();\n+\n+        Affinity affinity = new AffinityBuilder()\n+                .withNewNodeAffinity()\n+                    .withNewRequiredDuringSchedulingIgnoredDuringExecution()\n+                        .withNodeSelectorTerms(nst)\n+                    .endRequiredDuringSchedulingIgnoredDuringExecution()\n+                .endNodeAffinity()\n+                .build();\n+\n+        PodTemplate pt = new PodTemplate();\n+        pt.setAffinity(affinity);\n+\n+        KafkaClusterTemplate kct = new KafkaClusterTemplateBuilder()\n+                .withPod(pt)\n+                .build();\n+\n+        KafkaResource.kafkaWithoutWait(KafkaResource.defaultKafka(CLUSTER_NAME, 3, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withTemplate(kct)\n+                    .endKafka()\n+                .endSpec()\n+                .build());\n+\n+        KafkaUtils.waitForKafkaNotReady(CLUSTER_NAME);", "originalCommit": "31627c6c0de965ae486231a4a7e7fbe76dbf6a14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14ddcf8807921d5e486d1e584fb26a6292a64ba7", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\nindex d95465170..9786168e7 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/rollingupdate/KafkaRollerST.java\n\n@@ -217,10 +217,10 @@ class KafkaRollerST extends AbstractST {\n     @Test\n     void testKafkaPodPendingDueToRack() {\n         // Testing this scenario\n-        // 1. deploy Kafka with wrong pod template (looking for nonexistent node)\n-        // 2. wait for Kafka not ready\n-        // 3. fix the Kafka CR\n-        // 4. wait for Kafka ready\n+        // 1. deploy Kafka with wrong pod template (looking for nonexistent node) kafka pods should not exist\n+        // 2. wait for Kafka not ready, kafka pods should be in the pending state\n+        // 3. fix the Kafka CR, kafka pods should be in the pending state\n+        // 4. wait for Kafka ready, kafka pods should NOT be in the pending state\n \n         NodeSelectorRequirement nsr = new NodeSelectorRequirementBuilder()\n                 .withKey(\"dedicated_test\")\n"}}, {"oid": "14ddcf8807921d5e486d1e584fb26a6292a64ba7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/14ddcf8807921d5e486d1e584fb26a6292a64ba7", "message": "Another Jakub's objections\n\nSigned-off-by: Stanislav Knot <sknot@redhat.com>", "committedDate": "2020-10-21T15:37:01Z", "type": "commit"}]}