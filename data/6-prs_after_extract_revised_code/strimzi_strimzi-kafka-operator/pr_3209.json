{"pr_number": 3209, "pr_title": "[systemtest] Add tests for scaling subresources", "pr_createdAt": "2020-06-17T20:11:35Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209", "timeline": [{"oid": "05f8dce82affcbee2d5dbccd5f120f61fd304ba2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/05f8dce82affcbee2d5dbccd5f120f61fd304ba2", "message": "add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-17T20:10:36Z", "type": "commit"}, {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bb8651ef69309296a8516cd53a8b5b63787f6774", "message": "fixup! add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-17T20:17:17Z", "type": "commit"}, {"oid": "bb8651ef69309296a8516cd53a8b5b63787f6774", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bb8651ef69309296a8516cd53a8b5b63787f6774", "message": "fixup! add tests for scaling subresources\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-17T20:17:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTU1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811550", "bodyText": "I think it might make sense to also check the tasksMax in .spec", "author": "scholzj", "createdAt": "2020-06-17T20:24:09Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+\n+        LOGGER.info(\"Check if taskMax is set to {}\", scaleTo);\n+        int tasksMax = KafkaConnectorResource.kafkaConnectorClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getTasksMax();", "originalCommit": "bb8651ef69309296a8516cd53a8b5b63787f6774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MDk4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442040986", "bodyText": "Yes, I was thinking about it, but then I decide to keep assertion this way. I'll add it ASAP :) Thanks Jakub", "author": "im-konge", "createdAt": "2020-06-18T08:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "463c4bf64b19c080bf3686053a17bee3619b94bf", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex d41bf360d4..cbfe7fa85f 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -976,9 +976,11 @@ class ConnectST extends BaseST {\n         cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n         DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n \n-        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n         List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n         assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n         assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n         for (String pod : connectPods) {\n             assertThat(pod.contains(connectGenName), is(true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMTgwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r441811805", "bodyText": "I think it might make sense to also check the replicas in .spec and .status. Same should apply to all tests I guess.", "author": "scholzj", "createdAt": "2020-06-17T20:24:40Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,53 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "originalCommit": "bb8651ef69309296a8516cd53a8b5b63787f6774", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "463c4bf64b19c080bf3686053a17bee3619b94bf", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex d41bf360d4..cbfe7fa85f 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -976,9 +976,11 @@ class ConnectST extends BaseST {\n         cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n         DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n \n-        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n         List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n         assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n         assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n         for (String pod : connectPods) {\n             assertThat(pod.contains(connectGenName), is(true));\n"}}, {"oid": "463c4bf64b19c080bf3686053a17bee3619b94bf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/463c4bf64b19c080bf3686053a17bee3619b94bf", "message": "comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-18T09:55:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NTUxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442155514", "bodyText": "I would be nice to have a comment why this assert pass", "author": "Frawless", "createdAt": "2020-06-18T11:24:39Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));", "originalCommit": "463c4bf64b19c080bf3686053a17bee3619b94bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a29dcab21d0d408302f70da9650011935ea04", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\nindex fc8df1ff32..2588d2cda6 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\n\n@@ -713,6 +713,10 @@ class ConnectS2IST extends BaseST {\n         assertThat(connectS2IPods.size(), is(4));\n         assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n         assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        /*\n+        observed generation should be higher than before scaling -> after change of spec and successful reconciliation,\n+        the observed generation is increased\n+        */\n         assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n         for (String pod : connectS2IPods) {\n             assertThat(pod.contains(connectS2IGenName), is(true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442156021", "bodyText": "is this rly needed? I assume the s2i pods will contain it for sure. I see you have it everywhere.  I don't say it's wrong, maybe I just don't see the value of it?", "author": "Frawless", "createdAt": "2020-06-18T11:25:42Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java", "diffHunk": "@@ -689,6 +689,36 @@ void testScaleConnectS2IWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectS2ISubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectS2IResource.kafkaConnectS2I(CLUSTER_NAME, CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect-s2i\")\n+            .endMetadata()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectS2IObsGen = KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectS2IGenName = kubeClient().listPods(\"type\", \"kafka-connect-s2i\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnectS2I subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnectS2I.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentConfigUtils.waitForDeploymentConfigAndPodsReady(KafkaConnectS2IResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, naming prefix should be same and observed generation higher\", scaleTo);\n+        List<String> connectS2IPods = kubeClient().listPodNames(\"type\", \"kafka-connect-s2i\");\n+        assertThat(connectS2IPods.size(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectS2IPods) {", "originalCommit": "463c4bf64b19c080bf3686053a17bee3619b94bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NDc5Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442164792", "bodyText": "The main thing why I add this to all tests is, that if you scale the replicas like earlier, you'll get completely different names, something like my-cluster-connect-45456a-asd456, my-cluster-connect-weq56a-asd456, but when you scale the sub-resources, the other replicas will have same generated name (this can be seen in the yaml of resource in field generateName: ...) so the result be like my-cluster-connect-45456a-asd456, my-cluster-connect-45456a-asd456 -> only the end will change. So I'm testing, that all replicas are really containing this generateName part.", "author": "im-konge", "createdAt": "2020-06-18T11:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1NjAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "101a29dcab21d0d408302f70da9650011935ea04", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\nindex fc8df1ff32..2588d2cda6 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectS2IST.java\n\n@@ -713,6 +713,10 @@ class ConnectS2IST extends BaseST {\n         assertThat(connectS2IPods.size(), is(4));\n         assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n         assertThat(KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        /*\n+        observed generation should be higher than before scaling -> after change of spec and successful reconciliation,\n+        the observed generation is increased\n+        */\n         assertThat(connectS2IObsGen < KafkaConnectS2IResource.kafkaConnectS2IClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n         for (String pod : connectS2IPods) {\n             assertThat(pod.contains(connectS2IGenName), is(true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442159459", "bodyText": "What about change max.tasks for one connect and see if everything is working and set properly?", "author": "Frawless", "createdAt": "2020-06-18T11:32:36Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -944,6 +946,56 @@ void testScaleConnectWithConnectorToZero() {\n         assertThat(connectorStatus.getConditions().stream().anyMatch(condition -> condition.getMessage().contains(\"has 0 replicas\")), is(true));\n     }\n \n+    @Test\n+    void testScaleConnectAndConnectorSubresource() {\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-connect\")\n+                .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+            .endMetadata()\n+            .done();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+            .editSpec()\n+                .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                .addToConfig(\"topics\", TOPIC_NAME)\n+            .endSpec()\n+            .done();\n+\n+        int scaleTo = 4;\n+        long connectObsGen = KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n+        String connectGenName = kubeClient().listPods(\"type\", \"kafka-connect\").get(0).getMetadata().getGenerateName();\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnect subresource <-------\");\n+        LOGGER.info(\"Scaling subresource replicas to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnect.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        DeploymentUtils.waitForDeploymentAndPodsReady(KafkaConnectResources.deploymentName(CLUSTER_NAME), scaleTo);\n+\n+        LOGGER.info(\"Check if replicas is set to {}, observed generation is higher - for spec and status - naming prefix should be same\", scaleTo);\n+        List<String> connectPods = kubeClient().listPodNames(\"type\", \"kafka-connect\");\n+        assertThat(connectPods.size(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n+        assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n+        for (String pod : connectPods) {\n+            assertThat(pod.contains(connectGenName), is(true));\n+        }\n+\n+        LOGGER.info(\"-------> Scaling KafkaConnector subresource <-------\");\n+        LOGGER.info(\"Scaling subresource task max to {}\", scaleTo);\n+        cmdKubeClient().scaleByName(KafkaConnector.RESOURCE_KIND, CLUSTER_NAME, scaleTo);\n+        KafkaConnectorUtils.waitForConnectorsTaskMaxChange(CLUSTER_NAME, scaleTo);", "originalCommit": "463c4bf64b19c080bf3686053a17bee3619b94bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2NTM1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3209#discussion_r442165356", "bodyText": "Yes, I can add it :) thanks", "author": "im-konge", "createdAt": "2020-06-18T11:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "101a29dcab21d0d408302f70da9650011935ea04", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex cbfe7fa85f..c8692f83f3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -981,6 +981,10 @@ class ConnectST extends BaseST {\n         assertThat(connectPods.size(), is(4));\n         assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getReplicas(), is(4));\n         assertThat(KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getReplicas(), is(4));\n+        /*\n+        observed generation should be higher than before scaling -> after change of spec and successful reconciliation,\n+        the observed generation is increased\n+        */\n         assertThat(connectObsGen < KafkaConnectResource.kafkaConnectClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration(), is(true));\n         for (String pod : connectPods) {\n             assertThat(pod.contains(connectGenName), is(true));\n"}}, {"oid": "101a29dcab21d0d408302f70da9650011935ea04", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/101a29dcab21d0d408302f70da9650011935ea04", "message": "comments vol.2\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-06-18T14:52:25Z", "type": "commit"}]}