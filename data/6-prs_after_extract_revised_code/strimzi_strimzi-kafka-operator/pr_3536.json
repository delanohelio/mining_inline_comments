{"pr_number": 3536, "pr_title": "Use client.rack property in kafka connect", "pr_createdAt": "2020-08-22T18:14:18Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTAxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r475119010", "bodyText": "I think the comment is a bit misleading. Maybe it should say something like Configuration of the node label which will be used as the client.rack consumer configuration.?", "author": "scholzj", "createdAt": "2020-08-22T18:45:14Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java", "diffHunk": "@@ -50,6 +54,26 @@ public void setConfig(Map<String, Object> config) {\n         this.config = config;\n     }\n \n+    @Description(\"The image of the init container used for initializing the `client.rack`.\")\n+    @JsonInclude(value = JsonInclude.Include.NON_NULL)\n+    public String getClientRackInitImage() {\n+        return clientRackInitImage;\n+    }\n+\n+    public void setClientRackInitImage(String brokerRackInitImage) {\n+        this.clientRackInitImage = brokerRackInitImage;\n+    }\n+\n+    @Description(\"Configuration of the `client.rack` consumer config.\")", "originalCommit": "a9f530164f6af66e985dca7eb802fd30a63d2c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\nindex 7b8db2093e..a8d724c20c 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\n\n@@ -64,8 +64,7 @@ public class KafkaConnectSpec extends AbstractKafkaConnectSpec {\n         this.clientRackInitImage = brokerRackInitImage;\n     }\n \n-    @Description(\"Configuration of the `client.rack` consumer config.\")\n-    @JsonProperty(\"rack\")\n+    @Description(\"Configuration of the node label which will be used as the client.rack consumer configuration.\")\n     @JsonInclude(value = JsonInclude.Include.NON_NULL)\n     public Rack getRack() {\n         return rack;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTA5Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r475119092", "bodyText": "I think this is not needed if it is the same name as the name in the method.", "author": "scholzj", "createdAt": "2020-08-22T18:46:19Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java", "diffHunk": "@@ -50,6 +54,26 @@ public void setConfig(Map<String, Object> config) {\n         this.config = config;\n     }\n \n+    @Description(\"The image of the init container used for initializing the `client.rack`.\")\n+    @JsonInclude(value = JsonInclude.Include.NON_NULL)\n+    public String getClientRackInitImage() {\n+        return clientRackInitImage;\n+    }\n+\n+    public void setClientRackInitImage(String brokerRackInitImage) {\n+        this.clientRackInitImage = brokerRackInitImage;\n+    }\n+\n+    @Description(\"Configuration of the `client.rack` consumer config.\")\n+    @JsonProperty(\"rack\")", "originalCommit": "a9f530164f6af66e985dca7eb802fd30a63d2c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "chunk": "diff --git a/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java b/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\nindex 7b8db2093e..a8d724c20c 100644\n--- a/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\n+++ b/api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java\n\n@@ -64,8 +64,7 @@ public class KafkaConnectSpec extends AbstractKafkaConnectSpec {\n         this.clientRackInitImage = brokerRackInitImage;\n     }\n \n-    @Description(\"Configuration of the `client.rack` consumer config.\")\n-    @JsonProperty(\"rack\")\n+    @Description(\"Configuration of the node label which will be used as the client.rack consumer configuration.\")\n     @JsonInclude(value = JsonInclude.Include.NON_NULL)\n     public Rack getRack() {\n         return rack;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTkyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r475119927", "bodyText": "I do not think we need this if block since the init container should be used only when the rack is configure (and not null). You call it from getInitContainers only when rack is already not null I think.", "author": "scholzj", "createdAt": "2020-08-22T18:56:13Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java", "diffHunk": "@@ -459,6 +505,51 @@ public Deployment generateDeployment(Map<String, String> annotations, boolean is\n         return containers;\n     }\n \n+    protected List<EnvVar> getInitContainerEnvVars() {\n+        List<EnvVar> varList = new ArrayList<>();\n+        varList.add(buildEnvVarFromFieldRef(ENV_VAR_KAFKA_INIT_NODE_NAME, \"spec.nodeName\"));\n+\n+        if (rack != null) {", "originalCommit": "a9f530164f6af66e985dca7eb802fd30a63d2c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\nindex f06b4d9c28..0277024daa 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\n\n@@ -509,9 +522,7 @@ public class KafkaConnectCluster extends AbstractModel {\n         List<EnvVar> varList = new ArrayList<>();\n         varList.add(buildEnvVarFromFieldRef(ENV_VAR_KAFKA_INIT_NODE_NAME, \"spec.nodeName\"));\n \n-        if (rack != null) {\n-            varList.add(buildEnvVar(ENV_VAR_KAFKA_INIT_RACK_TOPOLOGY_KEY, rack.getTopologyKey()));\n-        }\n+        varList.add(buildEnvVar(ENV_VAR_KAFKA_INIT_RACK_TOPOLOGY_KEY, rack.getTopologyKey()));\n \n         // Add shared environment variables used for all containers\n         varList.addAll(getSharedEnvVars());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEyMDM2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r475120362", "bodyText": "Should this be called from testGenerateDeploymentWithRack?", "author": "scholzj", "createdAt": "2020-08-22T19:00:52Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java", "diffHunk": "@@ -1346,4 +1337,93 @@ public void testNetworkPolicyWithoutConnectorOperator() {\n \n         assertThat(kc.generateNetworkPolicy(true, false), is(nullValue()));\n     }\n+\n+    @Test\n+    public void testClusterRoleBindingRack() {\n+        String testNamespace = \"other-namespace\";\n+\n+        KafkaConnect kafkaConnect = new KafkaConnectBuilder(this.resource)\n+                    .editOrNewMetadata()\n+                        .withNamespace(testNamespace)\n+                    .endMetadata()\n+                    .editOrNewSpec()\n+                        .withNewRack(\"my-topology-label\")\n+                    .endSpec()\n+                .build();\n+\n+        KafkaConnectCluster kafkaConnectCluster = KafkaConnectCluster.fromCrd(kafkaConnect, VERSIONS);\n+        ClusterRoleBinding crb = kafkaConnectCluster.generateClusterRoleBinding(testNamespace);\n+\n+        assertThat(crb.getMetadata().getName(), is(KafkaConnectCluster.initContainerClusterRoleBindingName(testNamespace, cluster)));\n+        assertThat(crb.getMetadata().getNamespace(), is(nullValue()));\n+        assertThat(crb.getSubjects().get(0).getNamespace(), is(testNamespace));\n+        assertThat(crb.getSubjects().get(0).getName(), is(KafkaConnectCluster.initContainerServiceAccountName(cluster)));\n+    }\n+\n+    @Test\n+    public void testNullClusterRoleBinding() {\n+        String testNamespace = \"other-namespace\";\n+\n+        KafkaConnect kafkaConnect = new KafkaConnectBuilder(this.resource)\n+                .editOrNewMetadata()\n+                    .withNamespace(testNamespace)\n+                .endMetadata()\n+                .build();\n+\n+        KafkaConnectCluster kafkaConnectCluster = KafkaConnectCluster.fromCrd(kafkaConnect, VERSIONS);\n+        ClusterRoleBinding crb = kafkaConnectCluster.generateClusterRoleBinding(testNamespace);\n+\n+        assertThat(crb, is(nullValue()));\n+    }\n+\n+    private void checkDeployment(Deployment dep, KafkaConnect resource) {\n+        assertThat(dep.getMetadata().getName(), is(KafkaConnectResources.deploymentName(cluster)));\n+        assertThat(dep.getMetadata().getNamespace(), is(namespace));\n+        Map<String, String> expectedDeploymentLabels = expectedLabels(KafkaConnectResources.deploymentName(cluster));\n+        assertThat(dep.getMetadata().getLabels(), is(expectedDeploymentLabels));\n+        assertThat(dep.getSpec().getSelector().getMatchLabels(), is(expectedSelectorLabels()));\n+        assertThat(dep.getSpec().getReplicas(), is(replicas));\n+        assertThat(dep.getSpec().getTemplate().getMetadata().getLabels(), is(expectedDeploymentLabels));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().size(), is(1));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getName(), is(KafkaConnectResources.deploymentName(this.cluster)));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getImage(), is(kc.image));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getEnv(), is(getExpectedEnvVars()));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getLivenessProbe().getInitialDelaySeconds(), is(healthDelay));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getLivenessProbe().getTimeoutSeconds(), is(healthTimeout));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getReadinessProbe().getInitialDelaySeconds(), is(healthDelay));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getReadinessProbe().getTimeoutSeconds(), is(healthTimeout));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts().size(), is(2));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts().get(0).getContainerPort(), is(KafkaConnectCluster.REST_API_PORT));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts().get(0).getName(), is(KafkaConnectCluster.REST_API_PORT_NAME));\n+        assertThat(dep.getSpec().getTemplate().getSpec().getContainers().get(0).getPorts().get(0).getProtocol(), is(\"TCP\"));\n+        assertThat(dep.getSpec().getStrategy().getType(), is(\"RollingUpdate\"));\n+        assertThat(dep.getSpec().getStrategy().getRollingUpdate().getMaxSurge().getIntVal(), is(1));\n+        assertThat(dep.getSpec().getStrategy().getRollingUpdate().getMaxUnavailable().getIntVal(), is(0));\n+        assertThat(AbstractModel.containerEnvVars(dep.getSpec().getTemplate().getSpec().getContainers().get(0)).get(KafkaConnectCluster.ENV_VAR_KAFKA_CONNECT_TLS), is(nullValue()));\n+        checkOwnerReference(kc.createOwnerReference(), dep);\n+        checkRack(dep, resource);\n+    }\n+\n+    private void checkOwnerReference(OwnerReference ownerRef, HasMetadata resource)  {\n+        assertThat(resource.getMetadata().getOwnerReferences().size(), is(1));\n+        assertThat(resource.getMetadata().getOwnerReferences().get(0), is(ownerRef));\n+    }\n+\n+    private void checkRack(Deployment deployment, KafkaConnect resource) {", "originalCommit": "a9f530164f6af66e985dca7eb802fd30a63d2c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjI4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r476686289", "bodyText": "I have already the test method with testGenerateDeploymentWithRack name. This is only assertion of the rack specific properties. I couldn't find the better name, and just to be consistent with other methods I use checkRack. Any suggestions ?", "author": "klalafaryan", "createdAt": "2020-08-25T19:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEyMDM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4ODUwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r476688509", "bodyText": "Never mind this comment. I thought it is never called form testGenerateDeploymentWithRack. But now I see it is called from checkDeployment which is called there. So just ignore this. Sorry.", "author": "scholzj", "createdAt": "2020-08-25T19:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEyMDM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "chunk": "diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\nindex 830d0b5677..c7ab477ef2 100644\n--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\n+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/model/KafkaConnectClusterTest.java\n\n@@ -1352,12 +1353,12 @@ public class KafkaConnectClusterTest {\n                 .build();\n \n         KafkaConnectCluster kafkaConnectCluster = KafkaConnectCluster.fromCrd(kafkaConnect, VERSIONS);\n-        ClusterRoleBinding crb = kafkaConnectCluster.generateClusterRoleBinding(testNamespace);\n+        ClusterRoleBinding crb = kafkaConnectCluster.generateClusterRoleBinding();\n \n         assertThat(crb.getMetadata().getName(), is(KafkaConnectCluster.initContainerClusterRoleBindingName(testNamespace, cluster)));\n         assertThat(crb.getMetadata().getNamespace(), is(nullValue()));\n         assertThat(crb.getSubjects().get(0).getNamespace(), is(testNamespace));\n-        assertThat(crb.getSubjects().get(0).getName(), is(KafkaConnectCluster.initContainerServiceAccountName(cluster)));\n+        assertThat(crb.getSubjects().get(0).getName(), is(kafkaConnectCluster.getServiceAccountName()));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEyMDYyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3536#discussion_r475120621", "bodyText": "I guess we need to add the Cluster role to the installation files? We will need to add it to install/ and for both Helm Charts.", "author": "scholzj", "createdAt": "2020-08-22T19:03:47Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java", "diffHunk": "@@ -682,4 +781,61 @@ public NetworkPolicy generateNetworkPolicy(boolean namespaceAndPodSelectorNetwor\n     public Tracing getTracing() {\n         return tracing;\n     }\n+\n+    /**\n+     * Get the name of the kafka connect service account given the name of the {@code kafkaResourceName}.\n+     *\n+     * @param resourceName The name of the Kafka connect resource.\n+     * @return The name of the ServiceAccount.\n+     */\n+    public static String initContainerServiceAccountName(String resourceName) {\n+        return KafkaConnectResources.deploymentName(resourceName);\n+    }\n+\n+    /**\n+     * Get the name of the kafka connect init container role binding given the name of the {@code namespace} and {@code cluster}.\n+     *\n+     * @param namespace The namespace.\n+     * @param cluster   The cluster name.\n+     * @return The name of the init container's cluster role binding.\n+     */\n+    public static String initContainerClusterRoleBindingName(String namespace, String cluster) {\n+        return \"strimzi-\" + namespace + \"-\" + cluster + \"-kafka-init\";\n+    }\n+\n+    /**\n+     * Creates the ClusterRoleBinding which is used to bind the Kafka Connect SA to the ClusterRole\n+     * which permissions the Kafka init container to access K8S nodes (necessary for rack-awareness).\n+     *\n+     * @param assemblyNamespace The namespace.\n+     * @return The cluster role binding.\n+     */\n+    public ClusterRoleBinding generateClusterRoleBinding(String assemblyNamespace) {\n+\n+        if (rack == null) {\n+            return null;\n+        }\n+\n+        Subject ks = new SubjectBuilder()\n+                .withKind(\"ServiceAccount\")\n+                .withName(initContainerServiceAccountName(cluster))\n+                .withNamespace(assemblyNamespace)\n+                .build();\n+\n+        RoleRef roleRef = new RoleRefBuilder()\n+                .withName(\"strimzi-kafka-client\")", "originalCommit": "a9f530164f6af66e985dca7eb802fd30a63d2c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\nindex f06b4d9c28..0277024daa 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaConnectCluster.java\n\n@@ -782,44 +799,22 @@ public class KafkaConnectCluster extends AbstractModel {\n         return tracing;\n     }\n \n-    /**\n-     * Get the name of the kafka connect service account given the name of the {@code kafkaResourceName}.\n-     *\n-     * @param resourceName The name of the Kafka connect resource.\n-     * @return The name of the ServiceAccount.\n-     */\n-    public static String initContainerServiceAccountName(String resourceName) {\n-        return KafkaConnectResources.deploymentName(resourceName);\n-    }\n-\n-    /**\n-     * Get the name of the kafka connect init container role binding given the name of the {@code namespace} and {@code cluster}.\n-     *\n-     * @param namespace The namespace.\n-     * @param cluster   The cluster name.\n-     * @return The name of the init container's cluster role binding.\n-     */\n-    public static String initContainerClusterRoleBindingName(String namespace, String cluster) {\n-        return \"strimzi-\" + namespace + \"-\" + cluster + \"-kafka-init\";\n-    }\n-\n     /**\n      * Creates the ClusterRoleBinding which is used to bind the Kafka Connect SA to the ClusterRole\n      * which permissions the Kafka init container to access K8S nodes (necessary for rack-awareness).\n      *\n-     * @param assemblyNamespace The namespace.\n      * @return The cluster role binding.\n      */\n-    public ClusterRoleBinding generateClusterRoleBinding(String assemblyNamespace) {\n+    public ClusterRoleBinding generateClusterRoleBinding() {\n \n-        if (rack == null) {\n+        if (rack != null) {\n             return null;\n         }\n \n-        Subject ks = new SubjectBuilder()\n+        Subject subject = new SubjectBuilder()\n                 .withKind(\"ServiceAccount\")\n-                .withName(initContainerServiceAccountName(cluster))\n-                .withNamespace(assemblyNamespace)\n+                .withName(getServiceAccountName())\n+                .withNamespace(namespace)\n                 .build();\n \n         RoleRef roleRef = new RoleRefBuilder()\n"}}, {"oid": "c2571247d19bc3a428d0705df1278a6f88a02165", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c2571247d19bc3a428d0705df1278a6f88a02165", "message": "Use client.rack property in kafka connect\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:25:49Z", "type": "commit"}, {"oid": "b0411be93c4a5ccf45eff947e1af694cabe14cd7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b0411be93c4a5ccf45eff947e1af694cabe14cd7", "message": "Update derived resources\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:25:49Z", "type": "commit"}, {"oid": "e41b420946f23743e6a34448ebb2c8e3ab1e5907", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e41b420946f23743e6a34448ebb2c8e3ab1e5907", "message": "Fix code review comments, and some other improvements\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:26:13Z", "type": "commit"}, {"oid": "4aebd612308d5d4cc225541f4b0d3aa9139fe8f6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4aebd612308d5d4cc225541f4b0d3aa9139fe8f6", "message": "Fix unit tests and update from master\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:26:13Z", "type": "commit"}, {"oid": "fb820ff8e31ac8ad87d402376df0feb5fdd3ef12", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fb820ff8e31ac8ad87d402376df0feb5fdd3ef12", "message": "Some further improvements\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:26:13Z", "type": "commit"}, {"oid": "a542ff6698dd794a9c33da57f168e452e5fe18b4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a542ff6698dd794a9c33da57f168e452e5fe18b4", "message": "some small improvements\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:26:13Z", "type": "commit"}, {"oid": "a542ff6698dd794a9c33da57f168e452e5fe18b4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a542ff6698dd794a9c33da57f168e452e5fe18b4", "message": "some small improvements\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-31T20:26:13Z", "type": "forcePushed"}]}