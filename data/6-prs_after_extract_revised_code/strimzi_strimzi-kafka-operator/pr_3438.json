{"pr_number": 3438, "pr_title": "[systemtest][mm] Add test for scaling mm to zero", "pr_createdAt": "2020-08-03T10:59:28Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438", "timeline": [{"oid": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736", "message": "add test for scaling mm to zero\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-03T10:53:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464363919", "bodyText": "How does this ensure that the previous status is not caught by this? I do not see any checks for observed generations etc.", "author": "scholzj", "createdAt": "2020-08-03T11:50:12Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);", "originalCommit": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NTE3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464365172", "bodyText": "Gonna add it, thanks", "author": "im-konge", "createdAt": "2020-08-03T11:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MTk2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464371962", "bodyText": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438/files#diff-22f8df9b640e22843eae57444b9be687R700", "author": "im-konge", "createdAt": "2020-08-03T12:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MjAyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464372023", "bodyText": "Check is added", "author": "im-konge", "createdAt": "2020-08-03T12:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3NjgxMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464376811", "bodyText": "So should this line be removed now?", "author": "scholzj", "createdAt": "2020-08-03T12:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MzkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fb521fc4e9302fa275b8b29238da33dafa636a1", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\nindex fe58c963f8..c74523e5b5 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\n\n@@ -680,6 +680,7 @@ public class MirrorMakerST extends AbstractST {\n             .endMetadata()\n             .done();\n \n+        long oldObsGen = KafkaMirrorMakerResource.kafkaMirrorMakerClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n         String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n         List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n         assertThat(mmPods.size(), is(3));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MDE0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464370145", "bodyText": "We maybe should take into consideration to create some Enum on CR type statuses. Would be better instead of hardcoding these values", "author": "see-quick", "createdAt": "2020-08-03T12:04:27Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java", "diffHunk": "@@ -663,6 +666,36 @@ void testScaleMirrorMakerSubresource() {\n             assertThat(pod.contains(mmGenName), is(true));\n         }\n     }\n+\n+    @Test\n+    void testScaleMirrorMakerToZero() {\n+        // Deploy source kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterSourceName, 1, 1).done();\n+        // Deploy target kafka\n+        KafkaResource.kafkaEphemeral(kafkaClusterTargetName, 1, 1).done();\n+\n+        KafkaMirrorMakerResource.kafkaMirrorMaker(CLUSTER_NAME, kafkaClusterTargetName, kafkaClusterSourceName, \"my-group\" + rng.nextInt(Integer.MAX_VALUE), 3, false)\n+            .editMetadata()\n+                .addToLabels(\"type\", \"kafka-mirror-maker\")\n+            .endMetadata()\n+            .done();\n+\n+        String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n+        List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        assertThat(mmPods.size(), is(3));\n+\n+        LOGGER.info(\"Scaling MirrorMaker to zero\");\n+        KafkaMirrorMakerResource.replaceMirrorMakerResource(CLUSTER_NAME, mm -> mm.getSpec().setReplicas(0));\n+\n+        KafkaMirrorMakerUtils.waitForKafkaMirrorMakerReady(CLUSTER_NAME);\n+        PodUtils.waitForPodsReady(kubeClient().getDeploymentSelectors(mmDepName), 0, true);\n+\n+        mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n+        KafkaMirrorMakerStatus mmStatus = KafkaMirrorMakerResource.kafkaMirrorMakerClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus();\n+\n+        assertThat(mmPods.size(), is(0));\n+        assertThat(mmStatus.getConditions().get(0).getType(), is(\"Ready\"));", "originalCommit": "d6c9cb587f2dc556f59e3cf3e0da9f88b0fdc736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MTg4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3438#discussion_r464371885", "bodyText": "I have it on the list, as many things, so I will do it in another PR as it's not related just to this test", "author": "im-konge", "createdAt": "2020-08-03T12:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM3MDE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0fb521fc4e9302fa275b8b29238da33dafa636a1", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\nindex fe58c963f8..c74523e5b5 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/mirrormaker/MirrorMakerST.java\n\n@@ -680,6 +680,7 @@ public class MirrorMakerST extends AbstractST {\n             .endMetadata()\n             .done();\n \n+        long oldObsGen = KafkaMirrorMakerResource.kafkaMirrorMakerClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getStatus().getObservedGeneration();\n         String mmDepName = KafkaMirrorMakerResources.deploymentName(CLUSTER_NAME);\n         List<String> mmPods = kubeClient().listPodNames(\"type\", \"kafka-mirror-maker\");\n         assertThat(mmPods.size(), is(3));\n"}}, {"oid": "0fb521fc4e9302fa275b8b29238da33dafa636a1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0fb521fc4e9302fa275b8b29238da33dafa636a1", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-03T12:05:29Z", "type": "commit"}, {"oid": "0fb521fc4e9302fa275b8b29238da33dafa636a1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0fb521fc4e9302fa275b8b29238da33dafa636a1", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-03T12:05:29Z", "type": "forcePushed"}, {"oid": "f70d7a102eb0fc1edf95e78183cca97d9158308e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f70d7a102eb0fc1edf95e78183cca97d9158308e", "message": "comment vol.2\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-04T08:29:31Z", "type": "commit"}, {"oid": "f70d7a102eb0fc1edf95e78183cca97d9158308e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f70d7a102eb0fc1edf95e78183cca97d9158308e", "message": "comment vol.2\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-04T08:29:31Z", "type": "forcePushed"}]}