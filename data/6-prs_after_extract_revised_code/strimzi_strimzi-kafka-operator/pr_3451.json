{"pr_number": 3451, "pr_title": "[systemtest][refactor] \"Generator\" for random consumer group names and cleanup", "pr_createdAt": "2020-08-04T22:06:10Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1ODAyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465358023", "bodyText": "Maybe add a comment explaining its format e.g. my-consumer-group-*-*", "author": "samuel-hawker", "createdAt": "2020-08-04T22:09:17Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -61,5 +63,11 @@ private static long timeoutForClientFinishJob(int messagesCount) {\n         // need to add at least 1-2minutes for finishing the job\n         return (long) messagesCount * 1000 + Duration.ofMinutes(2).toMillis();\n     }\n+\n+    public static String generateRandomConsumerGroup() {", "originalCommit": "8e6fd17909134862a1b65ed387336ea33f6d0e16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91ab0c3d86c8f851738349fdfcfde532911e2082", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\nindex 569029af92..37efaf0f22 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n\n@@ -64,8 +65,12 @@ public class ClientUtils {\n         return (long) messagesCount * 1000 + Duration.ofMinutes(2).toMillis();\n     }\n \n+    /**\n+     * Method which generates random consumer group name\n+     * @return consumer group name with pattern: my-consumer-group-*-*\n+     */\n     public static String generateRandomConsumerGroup() {\n-        String salt = new Random().nextInt(Integer.MAX_VALUE) + \"-\" + new Random().nextInt(Integer.MAX_VALUE);\n+        int salt = rng.nextInt(Integer.MAX_VALUE);\n \n         return CONSUMER_GROUP_NAME + salt;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTkxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465505916", "bodyText": "I had the same discussion with @see-quick about using two \"salts\" somehow. I don't think it's useful.\nThe Random class implements a PRNG (Pseudorandom number generator) so it means that when you use a nextXXX method, it's going to generate the next pseudorandom number in the \"sequence\", so every nextXXX in the same execution will return you a different number. There is no way it returns the same number as before.\nThe same sequence could be generated in two different runs of the tests if the \"seed\" used for initializing the pseudorandom sequence generation is the same. It doesn't happen with the default Random constructor because internally it uses system time as part of the seed, so it's different for every run so the generated sequence of random numbers is different every run.\nAnyway, I think that concatenating two random numbers is useless.\nAnother point is that you should define one Random instance in the class using it. Why creating a new instance every time generateRandomConsumerGroup is called? As I said, it provides you a sequence of random number so each call to nextXXX on the same Random instance cannot return an already generated random number.", "author": "ppatierno", "createdAt": "2020-08-05T06:40:15Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -61,5 +63,11 @@ private static long timeoutForClientFinishJob(int messagesCount) {\n         // need to add at least 1-2minutes for finishing the job\n         return (long) messagesCount * 1000 + Duration.ofMinutes(2).toMillis();\n     }\n+\n+    public static String generateRandomConsumerGroup() {\n+        String salt = new Random().nextInt(Integer.MAX_VALUE) + \"-\" + new Random().nextInt(Integer.MAX_VALUE);", "originalCommit": "8e6fd17909134862a1b65ed387336ea33f6d0e16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NDM1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465654359", "bodyText": "Thanks for this explanation, it makes more sense now for me.", "author": "im-konge", "createdAt": "2020-08-05T11:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "91ab0c3d86c8f851738349fdfcfde532911e2082", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\nindex 569029af92..37efaf0f22 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java\n\n@@ -64,8 +65,12 @@ public class ClientUtils {\n         return (long) messagesCount * 1000 + Duration.ofMinutes(2).toMillis();\n     }\n \n+    /**\n+     * Method which generates random consumer group name\n+     * @return consumer group name with pattern: my-consumer-group-*-*\n+     */\n     public static String generateRandomConsumerGroup() {\n-        String salt = new Random().nextInt(Integer.MAX_VALUE) + \"-\" + new Random().nextInt(Integer.MAX_VALUE);\n+        int salt = rng.nextInt(Integer.MAX_VALUE);\n \n         return CONSUMER_GROUP_NAME + salt;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzczNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465507735", "bodyText": "ditto as above, I see you have a rng instance, please use it to generated random numbers and not new instances of Random.", "author": "ppatierno", "createdAt": "2020-08-05T06:44:37Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/AbstractST.java", "diffHunk": "@@ -87,19 +88,22 @@\n     protected static final String TLS_SIDECAR_KAFKA_IMAGE = \"STRIMZI_DEFAULT_TLS_SIDECAR_KAFKA_IMAGE\";\n     protected static final String TLS_SIDECAR_EO_IMAGE = \"STRIMZI_DEFAULT_TLS_SIDECAR_ENTITY_OPERATOR_IMAGE\";\n     protected static final String TEST_TOPIC_NAME = \"test-topic\";\n-    protected static final String CONSUMER_GROUP_NAME = \"my-consumer-group\";\n \n     protected String testClass;\n     protected String testName;\n \n     protected Random rng = new Random();\n \n     public static final int MESSAGE_COUNT = 100;\n+\n     public static final String TOPIC_NAME = KafkaTopicUtils.generateRandomNameOfTopic();\n     public static final String EXAMPLE_TOPIC_NAME = \"my-topic\";\n-\n+    public static final String AVAILABILITY_TOPIC_SOURCE_NAME = \"availability-topic-source-\" + new Random().nextInt(Integer.MAX_VALUE);\n+    public static final String AVAILABILITY_TOPIC_TARGET_NAME = \"availability-topic-target-\" + new Random().nextInt(Integer.MAX_VALUE);", "originalCommit": "8e6fd17909134862a1b65ed387336ea33f6d0e16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91ab0c3d86c8f851738349fdfcfde532911e2082", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/AbstractST.java b/systemtest/src/test/java/io/strimzi/systemtest/AbstractST.java\nindex d7ea0960e9..d563048dd1 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/AbstractST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/AbstractST.java\n\n@@ -92,14 +92,14 @@ public abstract class AbstractST implements TestSeparator {\n     protected String testClass;\n     protected String testName;\n \n-    protected Random rng = new Random();\n+    public static Random rng = new Random();\n \n     public static final int MESSAGE_COUNT = 100;\n \n     public static final String TOPIC_NAME = KafkaTopicUtils.generateRandomNameOfTopic();\n     public static final String EXAMPLE_TOPIC_NAME = \"my-topic\";\n-    public static final String AVAILABILITY_TOPIC_SOURCE_NAME = \"availability-topic-source-\" + new Random().nextInt(Integer.MAX_VALUE);\n-    public static final String AVAILABILITY_TOPIC_TARGET_NAME = \"availability-topic-target-\" + new Random().nextInt(Integer.MAX_VALUE);\n+    public static final String AVAILABILITY_TOPIC_SOURCE_NAME = \"availability-topic-source-\" + rng.nextInt(Integer.MAX_VALUE);\n+    public static final String AVAILABILITY_TOPIC_TARGET_NAME = \"availability-topic-target-\" + rng.nextInt(Integer.MAX_VALUE);\n     public static final String USER_NAME = KafkaUserUtils.generateRandomNameOfKafkaUser();\n \n     public static final String CONSUMER_GROUP_NAME = ClientUtils.generateRandomConsumerGroup();\n"}}, {"oid": "5f7e212fe2c139afe6e64278dabadbad219270cb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5f7e212fe2c139afe6e64278dabadbad219270cb", "message": "add generator for consumer group names and refactor classes\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-05T11:11:21Z", "type": "commit"}, {"oid": "91ab0c3d86c8f851738349fdfcfde532911e2082", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/91ab0c3d86c8f851738349fdfcfde532911e2082", "message": "comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-05T12:04:27Z", "type": "commit"}, {"oid": "91ab0c3d86c8f851738349fdfcfde532911e2082", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/91ab0c3d86c8f851738349fdfcfde532911e2082", "message": "comments\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-05T12:04:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MzY2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465683661", "bodyText": "Please update also AbstractKafkaClient. There we are using the same method. So remove it  from AbstractKafkaClient and use this one from ClientUtils :)", "author": "see-quick", "createdAt": "2020-08-05T12:16:58Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/ClientUtils.java", "diffHunk": "@@ -61,5 +64,15 @@ private static long timeoutForClientFinishJob(int messagesCount) {\n         // need to add at least 1-2minutes for finishing the job\n         return (long) messagesCount * 1000 + Duration.ofMinutes(2).toMillis();\n     }\n+\n+    /**\n+     * Method which generates random consumer group name\n+     * @return consumer group name with pattern: my-consumer-group-*-*\n+     */\n+    public static String generateRandomConsumerGroup() {\n+        int salt = rng.nextInt(Integer.MAX_VALUE);\n+\n+        return CONSUMER_GROUP_NAME + salt;\n+    }", "originalCommit": "91ab0c3d86c8f851738349fdfcfde532911e2082", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwODUxMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3451#discussion_r465708512", "bodyText": "Yeah sure! Good point.", "author": "im-konge", "createdAt": "2020-08-05T13:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4MzY2MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a709a988d9a17deed652127f1403f807022184f3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a709a988d9a17deed652127f1403f807022184f3", "message": "comment\n\nSigned-off-by: Lukas Kral <lukywill16@gmail.com>", "committedDate": "2020-08-05T13:18:40Z", "type": "commit"}]}