{"pr_number": 3151, "pr_title": "[MO] - [keycloak] -> keycloak instance", "pr_createdAt": "2020-06-03T20:36:51Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151", "timeline": [{"oid": "c34aa6ebb98cec22eb8f3d0eb5d20315a93098e9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c34aa6ebb98cec22eb8f3d0eb5d20315a93098e9", "message": "[MO] - [kc instance + import] -> new\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-04T13:17:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NjMwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r438346303", "bodyText": "Why are we having some files locally and some files remotely? Wouldn't it be better to use just one?", "author": "scholzj", "createdAt": "2020-06-10T19:04:28Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.utils.FileUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.KeycloakUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.IOException;\n+\n+public class KeycloakResource {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KeycloakResource.class);\n+\n+    private static final String KEYCLOAK_OPERATOR_DEPLOYMENT_NAME = \"keycloak-operator\";\n+    private static final String KEYCLOAK_CUSTOM_RESOURCE_NAME = \"keycloak\";\n+    private static final String KEYCLOAK_POD_NAME = \"keycloak-0\";\n+\n+    public static void keycloakOperator(String namespace) {\n+\n+        LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n+\n+        LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());\n+\n+        TestUtils.waitFor(\"Keycloak Operator deployment creation\", Constants.GLOBAL_POLL_INTERVAL, Constants.TIMEOUT_FOR_RESOURCE_CREATION,\n+            () -> ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME) != null);\n+        String deploymentName = ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME).getMetadata().getName();\n+\n+        // schedule deletion after teardown\n+        ResourceManager.getPointerResources().push(() -> deleteKeycloakOperator(deploymentName, namespace));\n+        // Wait for operator creation\n+        waitForKeycloakOperator(deploymentName, namespace, 1);\n+    }\n+\n+    public static void deployKeycloak(String namespace) {\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/keycloak_instance.yaml\").getFile());\n+        waitForKeycloak(namespace);\n+\n+        // schedule deletion after teardown\n+        ResourceManager.getPointerResources().push(() -> deleteKeycloak(namespace));\n+    }\n+\n+    private static void deleteKeycloakOperator(String deploymentName, String namespace) {\n+\n+        try {\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n+\n+        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());", "originalCommit": "75d729293b99077480db45dc3879dfcc8c55ace0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEzMDE2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r454130163", "bodyText": "Hmmm, I think that I decided to this way because we are using a specific version of KO - olm-catalog/keycloak-operator/9.0.2. In that repository, they  have all these files for all versions and there could arise some inconsistency", "author": "see-quick", "createdAt": "2020-07-14T06:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NjMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxOTAyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472319023", "bodyText": "https://github.com/keycloak/keycloak-operator/blob/9.0.2/deploy/operator.yaml  hm?  You use 9.0.2 for all files, but master image in \"local\" operator data. I think we should use files from github if you don't need to change anything special here.", "author": "Frawless", "createdAt": "2020-08-18T16:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NjMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d708d641fc83cf60638cbb98809c0c218a246e44", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\nindex 84ee6b6406..95b7013104 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n\n@@ -5,38 +5,32 @@\n package io.strimzi.systemtest.resources;\n \n import io.strimzi.systemtest.Constants;\n-import io.strimzi.systemtest.utils.FileUtils;\n import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n-import io.strimzi.systemtest.utils.specific.KeycloakUtils;\n import io.strimzi.test.TestUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n-import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class KeycloakResource {\n \n     private static final Logger LOGGER = LogManager.getLogger(KeycloakResource.class);\n \n     private static final String KEYCLOAK_OPERATOR_DEPLOYMENT_NAME = \"keycloak-operator\";\n-    private static final String KEYCLOAK_CUSTOM_RESOURCE_NAME = \"keycloak\";\n-    private static final String KEYCLOAK_POD_NAME = \"keycloak-0\";\n+    private static final String KEYCLOAK_INSTANCE_NAME = \"keycloak\";\n \n     public static void keycloakOperator(String namespace) {\n \n         LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n \n-        try {\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/crds/keycloak.org_keycloakbackups_crd.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/crds/keycloak.org_keycloakclients_crd.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/crds/keycloak.org_keycloakrealms_crd.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/crds/keycloak.org_keycloaks_crd.yaml\").getFile());\n+        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/crds/keycloak.org_keycloakusers_crd.yaml\").getFile());\n \n         ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n         ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n"}}, {"oid": "2bd46da7829c643d10b17a4b20677606f0ff2b28", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2bd46da7829c643d10b17a4b20677606f0ff2b28", "message": "[MO] - [s] -> delete\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-07-14T06:29:33Z", "type": "forcePushed"}, {"oid": "c325fde94dde7caa3f7f8a7ac74fdf375b71bb37", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c325fde94dde7caa3f7f8a7ac74fdf375b71bb37", "message": "remove sso + rebase\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:11:59Z", "type": "forcePushed"}, {"oid": "d708d641fc83cf60638cbb98809c0c218a246e44", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d708d641fc83cf60638cbb98809c0c218a246e44", "message": "[MO] - [keycloak] -> keycloak resource\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:20Z", "type": "commit"}, {"oid": "0a08ee750346860777d133635b11d942feef966f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0a08ee750346860777d133635b11d942feef966f", "message": "[MO] - [kc instance + import] -> new\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:20Z", "type": "commit"}, {"oid": "93d6379d0b5b268f005e6af7af828188a7759a66", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/93d6379d0b5b268f005e6af7af828188a7759a66", "message": "[MO] - [yamls] -> use crds upstream instead local one\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:20Z", "type": "commit"}, {"oid": "8a962396801fc9f4d50fdb8d38c7ff40db0e75bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8a962396801fc9f4d50fdb8d38c7ff40db0e75bc", "message": "[MO] - update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "c1f7c84b613d341c1b41855acd1fb82f4a53dc85", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c1f7c84b613d341c1b41855acd1fb82f4a53dc85", "message": "update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "f0873aea915335b7052bca8e9d262d1a33a5ba44", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f0873aea915335b7052bca8e9d262d1a33a5ba44", "message": "[MO] - [update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "d29ed8355f8d39c2086a5e38240caa9b6dcd0466", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d29ed8355f8d39c2086a5e38240caa9b6dcd0466", "message": "fix;\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "7d6a7406de6d3e0a654ff5226faff0182d70d724", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7d6a7406de6d3e0a654ff5226faff0182d70d724", "message": "[MO] - [s] -> delete\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "8fa174b4416eeed91b062fb37c7ade0398881e02", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8fa174b4416eeed91b062fb37c7ade0398881e02", "message": "remove sso + rebase\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:27:21Z", "type": "commit"}, {"oid": "2500ba128c62b4c2696217a8031e96bb517f7398", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2500ba128c62b4c2696217a8031e96bb517f7398", "message": "cr\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:34:28Z", "type": "commit"}, {"oid": "2500ba128c62b4c2696217a8031e96bb517f7398", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2500ba128c62b4c2696217a8031e96bb517f7398", "message": "cr\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-18T13:34:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzMzOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472317339", "bodyText": "We should keep those URLs in some constants, since it's used on multiple places.", "author": "Frawless", "createdAt": "2020-08-18T16:16:04Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.utils.FileUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.KeycloakUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.IOException;\n+\n+import static io.strimzi.systemtest.resources.ResourceManager.CR_CREATION_TIMEOUT;\n+\n+public class KeycloakResource {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KeycloakResource.class);\n+\n+    private static final String KEYCLOAK_OPERATOR_DEPLOYMENT_NAME = \"keycloak-operator\";\n+    private static final String KEYCLOAK_CUSTOM_RESOURCE_NAME = \"keycloak\";\n+    private static final String KEYCLOAK_POD_NAME = \"keycloak-0\";\n+\n+    public static void keycloakOperator(String namespace) {\n+\n+        LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));", "originalCommit": "2500ba128c62b4c2696217a8031e96bb517f7398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNjc1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472336752", "bodyText": "and why we need CSV?", "author": "Frawless", "createdAt": "2020-08-18T16:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxNzMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4dea93530067700d25e55791b03f598840d5d2bc", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\nindex e95f6a08e0..8e6a318015 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n\n@@ -30,66 +30,81 @@ public class KeycloakResource {\n         LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n \n         try {\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloaks_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakusers_crd.yaml\"));\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/service_account.yaml\"));\n \n-        LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+            LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://github.com/keycloak/keycloak-operator/blob/11.0.0/deploy/operator.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n \n         TestUtils.waitFor(\"Keycloak Operator deployment creation\", Constants.GLOBAL_POLL_INTERVAL, CR_CREATION_TIMEOUT,\n             () -> ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME) != null);\n         String deploymentName = ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME).getMetadata().getName();\n \n         // schedule deletion after teardown\n-        ResourceManager.getPointerResources().push(() -> deleteKeycloakOperator(deploymentName, namespace));\n+        ResourceManager.getPointerResources().push(() -> deleteKeycloakOperator(deploymentName));\n         // Wait for operator creation\n         waitForKeycloakOperator(deploymentName, namespace, 1);\n     }\n \n     public static void deployKeycloak(String namespace) {\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/keycloak_instance.yaml\").getFile());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().namespace(namespace).apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/examples/keycloak/keycloak.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n         waitForKeycloak(namespace);\n \n         // schedule deletion after teardown\n         ResourceManager.getPointerResources().push(() -> deleteKeycloak(namespace));\n     }\n \n-    private static void deleteKeycloakOperator(String deploymentName, String namespace) {\n+    private static void deleteKeycloakOperator(String deploymentName) {\n \n         try {\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloaks_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakusers_crd.yaml\"));\n+\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/service_account.yaml\"));\n+\n+            LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://github.com/keycloak/keycloak-operator/blob/11.0.0/deploy/operator.yaml\"));\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n-\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());\n-\n         DeploymentUtils.waitForDeploymentDeletion(deploymentName);\n     }\n \n     private static void deleteKeycloak(String namespace) {\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/keycloak_instance.yaml\").getFile());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().namespace(namespace).delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/examples/keycloak/keycloak.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n \n         KeycloakUtils.waitUntilKeycloakCustomResourceDeletion(namespace, KEYCLOAK_CUSTOM_RESOURCE_NAME);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMDM4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472410382", "bodyText": "Why are we using OLM for this instead of regular installation files? It seems like that could only bring complications down the road. We should also not rely on master files but at least pull it from some tag or copy it locally to make sure it is stable.", "author": "scholzj", "createdAt": "2020-08-18T18:52:08Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.resources;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.utils.FileUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.KeycloakUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.IOException;\n+\n+import static io.strimzi.systemtest.resources.ResourceManager.CR_CREATION_TIMEOUT;\n+\n+public class KeycloakResource {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KeycloakResource.class);\n+\n+    private static final String KEYCLOAK_OPERATOR_DEPLOYMENT_NAME = \"keycloak-operator\";\n+    private static final String KEYCLOAK_CUSTOM_RESOURCE_NAME = \"keycloak\";\n+    private static final String KEYCLOAK_POD_NAME = \"keycloak-0\";\n+\n+    public static void keycloakOperator(String namespace) {\n+\n+        LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));", "originalCommit": "2500ba128c62b4c2696217a8031e96bb517f7398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNTY0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r473035644", "bodyText": "I have to change it to the 11 tag and normal instalation.", "author": "see-quick", "createdAt": "2020-08-19T13:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxMDM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4dea93530067700d25e55791b03f598840d5d2bc", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\nindex e95f6a08e0..8e6a318015 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/resources/KeycloakResource.java\n\n@@ -30,66 +30,81 @@ public class KeycloakResource {\n         LOGGER.info(\"Deploying CRDs for Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n \n         try {\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloaks_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakusers_crd.yaml\"));\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/service_account.yaml\"));\n \n-        LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+            LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());\n+            ResourceManager.cmdKubeClient().apply(FileUtils.downloadAndUnzip(\"https://github.com/keycloak/keycloak-operator/blob/11.0.0/deploy/operator.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n \n         TestUtils.waitFor(\"Keycloak Operator deployment creation\", Constants.GLOBAL_POLL_INTERVAL, CR_CREATION_TIMEOUT,\n             () -> ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME) != null);\n         String deploymentName = ResourceManager.kubeClient().getDeployment(KEYCLOAK_OPERATOR_DEPLOYMENT_NAME).getMetadata().getName();\n \n         // schedule deletion after teardown\n-        ResourceManager.getPointerResources().push(() -> deleteKeycloakOperator(deploymentName, namespace));\n+        ResourceManager.getPointerResources().push(() -> deleteKeycloakOperator(deploymentName));\n         // Wait for operator creation\n         waitForKeycloakOperator(deploymentName, namespace, 1);\n     }\n \n     public static void deployKeycloak(String namespace) {\n-        ResourceManager.cmdKubeClient().namespace(namespace).apply(KeycloakResource.class.getResource(\"/keycloak/keycloak_instance.yaml\").getFile());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().namespace(namespace).apply(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/examples/keycloak/keycloak.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n         waitForKeycloak(namespace);\n \n         // schedule deletion after teardown\n         ResourceManager.getPointerResources().push(() -> deleteKeycloak(namespace));\n     }\n \n-    private static void deleteKeycloakOperator(String deploymentName, String namespace) {\n+    private static void deleteKeycloakOperator(String deploymentName) {\n \n         try {\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloak-operator.v9.0.2.clusterserviceversion.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakbackups.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakclients.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakrealms.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloaks.keycloak.org.crd.yaml\"));\n-            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/master/deploy/olm-catalog/keycloak-operator/9.0.2/keycloakusers.keycloak.org.crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/cluster_roles/cluster_role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakbackups_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakclients_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloaks_crd.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/crds/keycloak.org_keycloakusers_crd.yaml\"));\n+\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/role_binding.yaml\"));\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/service_account.yaml\"));\n+\n+            LOGGER.info(\"Deploying Keycloak Operator in {} namespace\", ResourceManager.cmdKubeClient().namespace());\n+\n+            ResourceManager.cmdKubeClient().delete(FileUtils.downloadAndUnzip(\"https://github.com/keycloak/keycloak-operator/blob/11.0.0/deploy/operator.yaml\"));\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n \n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/role_binding.yaml\").getFile());\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/service_account.yaml\").getFile());\n-\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/operator.yaml\").getFile());\n-\n         DeploymentUtils.waitForDeploymentDeletion(deploymentName);\n     }\n \n     private static void deleteKeycloak(String namespace) {\n-        ResourceManager.cmdKubeClient().namespace(namespace).delete(KeycloakResource.class.getResource(\"/keycloak/keycloak_instance.yaml\").getFile());\n+\n+        try {\n+            ResourceManager.cmdKubeClient().namespace(namespace).delete(FileUtils.downloadAndUnzip(\"https://raw.githubusercontent.com/keycloak/keycloak-operator/11.0.0/deploy/examples/keycloak/keycloak.yaml\"));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n \n         KeycloakUtils.waitUntilKeycloakCustomResourceDeletion(namespace, KEYCLOAK_CUSTOM_RESOURCE_NAME);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNjEzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472416130", "bodyText": "Do we really need this?", "author": "scholzj", "createdAt": "2020-08-18T19:02:49Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/KeycloakUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.specific;\n+\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.ResourceManager;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeycloakUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(KeycloakUtils.class);\n+\n+    private KeycloakUtils() {}", "originalCommit": "2500ba128c62b4c2696217a8031e96bb517f7398", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgxNDcxMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472814712", "bodyText": "Yes, I am ensuring that object can not be created outside of class because it will be useless to just create object which has only static methods for my point of view.", "author": "see-quick", "createdAt": "2020-08-19T07:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNjEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NDk4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3151#discussion_r472854982", "bodyText": "I agree it is useless to instantiate this class. But not sure we really need the constructor. I think that we have a lot of *Utils classes in the code with static methods which don't do this.", "author": "scholzj", "createdAt": "2020-08-19T08:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNjEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "73401ffaf58654cf08ff3116442c5a0eaefba077", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/utils/specific/KeycloakUtils.java b/systemtest/src/main/java/io/strimzi/systemtest/utils/specific/KeycloakUtils.java\nindex f0da4dd806..adc41353f5 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/utils/specific/KeycloakUtils.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/utils/specific/KeycloakUtils.java\n\n@@ -16,6 +16,20 @@ public class KeycloakUtils {\n \n     private KeycloakUtils() {}\n \n+    public static void waitUntilKeycloakCustomResourceReady(String namespace, String customResourceName, String readyStatus) {\n+        TestUtils.waitFor(\"Keycloak CR will be ready\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+\n+            LOGGER.info(\"Keycloak logs: {}\", ResourceManager.cmdKubeClient().namespace(namespace).get(\"keycloak\", customResourceName));\n+\n+            if (ResourceManager.cmdKubeClient().namespace(namespace).get(\"keycloak\", customResourceName).contains(readyStatus)) {\n+                LOGGER.info(\"Keycloak custom resource is ready\");\n+                return true;\n+            }\n+            LOGGER.error(\"Keycloak custom resource is still not ready\");\n+            return false;\n+        });\n+    }\n+\n     public static void waitUntilKeycloakCustomResourceDeletion(String namespace, String customResourceName) {\n         TestUtils.waitFor(\"Wait for Keycloak CR will be deleted\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n \n"}}, {"oid": "4dea93530067700d25e55791b03f598840d5d2bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4dea93530067700d25e55791b03f598840d5d2bc", "message": "commends\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-19T07:44:48Z", "type": "commit"}, {"oid": "73401ffaf58654cf08ff3116442c5a0eaefba077", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/73401ffaf58654cf08ff3116442c5a0eaefba077", "message": "kafka doesnt work\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-20T11:54:03Z", "type": "commit"}, {"oid": "893daf54db79fe9b9fdefe352020a58258a0843c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/893daf54db79fe9b9fdefe352020a58258a0843c", "message": "removing operator just keycloak instance stays\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-21T08:52:25Z", "type": "commit"}, {"oid": "01913f70a22cabdbfe54bfa058261e1758ed4212", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/01913f70a22cabdbfe54bfa058261e1758ed4212", "message": "checkstyle\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-21T09:00:07Z", "type": "commit"}, {"oid": "b35e5ce1e4555f9946b38ccf63038e3a66bca4dc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b35e5ce1e4555f9946b38ccf63038e3a66bca4dc", "message": "check\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-08-21T13:45:48Z", "type": "commit"}]}