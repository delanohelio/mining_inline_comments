{"pr_number": 2730, "pr_title": "feat: Correct Kubernetes labels and labels refactor", "pr_createdAt": "2020-03-20T17:33:24Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730", "timeline": [{"oid": "9aa5e24eee61691ed87330e4bb5d45b59bb7fc3a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9aa5e24eee61691ed87330e4bb5d45b59bb7fc3a", "message": "feat: Correct Kubernetes labels and labels refactor\n\n- Modify the app.kubernetes.io/name label to reflect the\ncorrect apps for each component\nThese labels are queryable so that a user can see all 'kafka',\n'zookeeper' etc components in a cluster\n- Modify the app.kubernetes.io/part-of label to have a unique\nidentifier for each instance of a cluster\nThis is mostly for the openshift Ui which clusters applications\nbased on their part-of label\n- Refactored labels so that all models build up their labels\nin a similar fashion.\nMade explicit the subset of labels that constitute a strimzi  selector\nlabel this should assist in  avoiding breaking bugs in future\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>ase enter the commit message for your changes. Lines starting", "committedDate": "2020-03-20T19:25:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyOTk4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396829986", "bodyText": "BEfore we included here also the templateStatefulSetLabels. I'm sure that had some reason. Why don't we need it anymore?", "author": "scholzj", "createdAt": "2020-03-24T00:01:16Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -620,7 +612,8 @@ protected PersistentVolumeClaim createPersistentVolumeClaim(int podNumber, Strin\n                 .withNewMetadata()\n                     .withName(name)\n                     .withNamespace(namespace)\n-                    .withLabels(mergeLabelsOrAnnotations(getLabelsWithName(templateStatefulSetLabels), templatePersistentVolumeClaimLabels))\n+                    // labels with the Strimzi name set to that of the component\n+                    .withLabels(getLabelsWithStrimziName(this.name, templatePersistentVolumeClaimLabels).toMap())", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTIwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396981202", "bodyText": "We do need it, but I have moved the merge to arguably the correct place to put it, in each model when the labels are initially defined, I think merging the labels this late is an anti-pattern and causes more confusion.\nhttps://github.com/strimzi/strimzi-kafka-operator/pull/2730/files#diff-405b3358597333915e4058062355209aL656\nhttps://github.com/strimzi/strimzi-kafka-operator/pull/2730/files#diff-93b151183726e7a1a3e42dcffc82367bR320-R321", "author": "samuel-hawker", "createdAt": "2020-03-24T08:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyOTk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNDIyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397034224", "bodyText": "Ok, great. I didn't noticed that.", "author": "scholzj", "createdAt": "2020-03-24T10:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyOTk4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDY1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396830656", "bodyText": "Is there some object inheriting from AbtractModel which does not do this? If yes, why does it need to be separate method and not part of the constructor?", "author": "scholzj", "createdAt": "2020-03-24T00:03:46Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/JmxTrans.java", "diffHunk": "@@ -106,10 +106,11 @@ public static JmxTrans fromCrd(Kafka kafkaAssembly, KafkaVersion.Lookup versions\n                 throw new InvalidResourceException(error);\n             }\n             result = new JmxTrans(kafkaAssembly.getMetadata().getNamespace(),\n-                    kafkaAssembly.getMetadata().getName(),\n-                    Labels.fromResource(kafkaAssembly).withKind(kafkaAssembly.getKind()));\n+                    kafkaAssembly.getMetadata().getName());\n             result.isDeployed = true;\n \n+            result.setDefaultLabels(kafkaAssembly);", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MjE2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396982161", "bodyText": "So I had a long time thinking about this. Originally I didn't include it as I did not want to add a HasMetadata as an argument, but also it sort of made sense to me that since all other label set fields are defined outside of the constructor this one should be also...\nHappy to move it in if you disagree with this approach", "author": "samuel-hawker", "createdAt": "2020-03-24T08:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNjU0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397036544", "bodyText": "I can probably live with this if you think it is better. I there is a risk that one day someone will forget to add it to some new model. However, as for adding the HasMetadatato the constructor ... it seesm in most cases you call it anyway with something like this as parameters: kafkaAssembly.getMetadata().getNamespace(), kafkaAssembly.getMetadata().getName(). So maybe the constructor could have only HasMetadata and get the name, namespace and labels out of it on its own.", "author": "scholzj", "createdAt": "2020-03-24T10:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MzM3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397043372", "bodyText": "Another option would be to define an abstract getter in AbstractModel, forcing subclasses to override it. I actually think this is preferable, since there's no need for this property to be mutable AFAICT.", "author": "tombentley", "createdAt": "2020-03-24T10:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/JmxTrans.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/JmxTrans.java\nindex 789dd3a25b..c1ff41c35e 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/JmxTrans.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/JmxTrans.java\n\n@@ -105,12 +104,9 @@ public class JmxTrans extends AbstractModel {\n                 log.warn(error);\n                 throw new InvalidResourceException(error);\n             }\n-            result = new JmxTrans(kafkaAssembly.getMetadata().getNamespace(),\n-                    kafkaAssembly.getMetadata().getName());\n+            result = new JmxTrans(kafkaAssembly);\n             result.isDeployed = true;\n \n-            result.setDefaultLabels(kafkaAssembly);\n-\n             if (kafkaAssembly.getSpec().getKafka().getJmxOptions().getAuthentication() instanceof KafkaJmxAuthenticationPassword) {\n                 result.isJmxAuthenticated = true;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMTQ5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396831498", "bodyText": "I find it a bit weird that out of the 12 places where this is defined the comment is only here ;-)", "author": "scholzj", "createdAt": "2020-03-24T00:06:49Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -113,6 +113,9 @@\n \n @SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n public class KafkaCluster extends AbstractModel {\n+    // Name of component kafka", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MjUyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396982521", "bodyText": "Embarassing - originally only has these for kafka and zookeeper then saw the value in applying to them all.", "author": "samuel-hawker", "createdAt": "2020-03-24T08:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMTQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NDE1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397044154", "bodyText": "No worries.", "author": "scholzj", "createdAt": "2020-03-24T10:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\nindex c155acd2a2..04a5a79923 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java\n\n@@ -113,7 +114,6 @@ import static java.util.Collections.singletonMap;\n \n @SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n public class KafkaCluster extends AbstractModel {\n-    // Name of component kafka\n     protected static final String APPLICATION_NAME = \"kafka\";\n \n     protected static final String INIT_NAME = \"kafka-init\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMjgwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396832806", "bodyText": "If I read it corrctly, this seems to be called only from one place. Shouldn't we use the Labels.geenrateDefaultLabels() directly and remove this?", "author": "scholzj", "createdAt": "2020-03-24T00:11:09Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -247,39 +252,26 @@ public String getHeadlessServiceName() {\n      * @return The selector labels as an instance of the Labels object.\n      */\n     public Labels getSelectorLabels() {\n-        return labels.withName(name).strimziSelectorLabels();\n+        return getLabelsWithStrimziName(name, Collections.emptyMap()).strimziSelectorLabels();\n     }\n \n-    /**\n-     * @return The selector labels as Map.\n-     */\n-    public Map<String, String> getSelectorLabelsAsMap() {\n-        return getSelectorLabels().toMap();\n+    protected Labels getLabelsWithStrimziName(String name, Map<String, String> additionalLabels) {\n+        return labels.withStrimziName(name).withAdditionalLabels(additionalLabels);\n     }\n \n-    protected Map<String, String> getLabelsWithName() {\n-        return getLabelsWithName(name);\n+    protected Labels getLabelsWithNameAndDiscovery(String name, Map<String, String> additionalLabels) {\n+        return getLabelsWithStrimziName(name, additionalLabels).withStrimziDiscovery();\n     }\n \n-    protected Map<String, String> getLabelsWithName(Map<String, String> userLabels) {\n-        return getLabelsWithName(name, userLabels);\n-    }\n-\n-    protected Map<String, String> getLabelsWithName(String name) {\n-        return labels.withName(name).toMap();\n-    }\n-\n-    protected Map<String, String> getLabelsWithName(String name, Map<String, String> userLabels) {\n-        return labels.withName(name).withUserLabels(userLabels).toMap();\n+    /**\n+     * @param resource\n+     * @return The default Labels set\n+     */\n+    protected Labels generateDefaultLabels(HasMetadata resource) {", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MDMwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396980307", "bodyText": "You're absolutely right I will change this, I thought changing the signature would be useful but it wasn't", "author": "samuel-hawker", "createdAt": "2020-03-24T08:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex dd21c3b6d9..4a36cb293f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -263,15 +251,6 @@ public abstract class AbstractModel {\n         return getLabelsWithStrimziName(name, additionalLabels).withStrimziDiscovery();\n     }\n \n-    /**\n-     * @param resource\n-     * @return The default Labels set\n-     */\n-    protected Labels generateDefaultLabels(HasMetadata resource) {\n-        return Labels.generateDefaultLabels(resource, applicationName, STRIMZI_CLUSTER_OPERATOR_NAME);\n-    }\n-\n-\n \n     /**\n      * @return Whether metrics are enabled.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMzYyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396833624", "bodyText": "I think we need to sanitize this for length\nEDIT: I can see you do that in the with...() methods. That means it is done multiple times and here were are vulnerable to someone adding new label without sanitizing it. Maybe you have a reson to keep it in the with...() methods. But it might be good to leave here a comment or something.", "author": "scholzj", "createdAt": "2020-03-24T00:14:01Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -361,4 +393,24 @@ public int hashCode() {\n     public String toString() {\n         return \"Labels\" + labels;\n     }\n+\n+    /**\n+     * @param resource        a resource with metadata\n+     * @param applicationName the name of the application of the component\n+     * @param managedBy       a resource with meta\n+     * @return The default Labels set\n+     */\n+    public static Labels generateDefaultLabels(HasMetadata resource, String applicationName, String managedBy) {\n+        String instanceName = resource.getMetadata().getName();", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NjE0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396986144", "bodyText": "Some comment along the lines of :\n// This string may be truncated for sanitization purposes to be compatible with Kubernetes\n\n, or am I misunderstanding your suggestion?", "author": "samuel-hawker", "createdAt": "2020-03-24T08:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMzYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzMxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397033319", "bodyText": "I would maybe phrase it more as in instruction for the next developer:\n// When adding new labels, make sure the names of any resources are truncated for sanitization purposes to be compatible with Kubernetes => Labels can be only short", "author": "scholzj", "createdAt": "2020-03-24T10:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMzYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\nindex ba78fb6b9f..6ab2ea624e 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n\n@@ -395,6 +396,11 @@ public class Labels {\n     }\n \n     /**\n+     *\n+     * When adding new labels, ensure the names of any resources are truncated for sanitization purposes to be compatible with Kubernetes\n+     * Note: Valid label values must be a maximum length of 63 characters\n+     * https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set\n+     *\n      * @param resource        a resource with metadata\n      * @param applicationName the name of the application of the component\n      * @param managedBy       a resource with meta\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMzg4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396833881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> strimziSelectorLabels = new ArrayList<>();\n          \n          \n            \n                    List<String> strimziSelectorLabels = new ArrayList<>(3);", "author": "scholzj", "createdAt": "2020-03-24T00:15:00Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -316,29 +345,32 @@ public Labels withStatefulSetPod(String name) {\n      * @param cluster The cluster.\n      * @return A singleton instance with the given {@code cluster} for the {@code strimzi.io/cluster} key.\n      */\n-    public static Labels forCluster(String cluster) {\n+    public static Labels forStrimziCluster(String cluster) {\n         return new Labels(singletonMap(STRIMZI_CLUSTER_LABEL, cluster));\n     }\n \n     /**\n      * @param kind The kind.\n      * @return A singleton instance with the given {@code kind} for the {@code strimzi.io/kind} key.\n      */\n-    public static Labels forKind(String kind) {\n+    public static Labels forStrimziKind(String kind) {\n         return new Labels(singletonMap(STRIMZI_KIND_LABEL, kind));\n     }\n \n     /**\n-     * @return An instances containing just the strimzi.io labels present in this instance.\n+     * @return A new instances containing just the strimzi.io selector labels present in this instance.\n      */\n     public Labels strimziSelectorLabels() {\n         Map<String, String> newLabels = new HashMap<>(3);\n \n-        for (Map.Entry<String, String> entry : labels.entrySet()) {\n-            if (entry.getKey().startsWith(STRIMZI_DOMAIN) && !entry.getKey().equals(STRIMZI_DISCOVERY_LABEL)) {\n-                newLabels.put(entry.getKey(), entry.getValue());\n-            }\n-        }\n+        List<String> strimziSelectorLabels = new ArrayList<>();", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\nindex ba78fb6b9f..6ab2ea624e 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n\n@@ -363,7 +364,7 @@ public class Labels {\n     public Labels strimziSelectorLabels() {\n         Map<String, String> newLabels = new HashMap<>(3);\n \n-        List<String> strimziSelectorLabels = new ArrayList<>();\n+        List<String> strimziSelectorLabels = new ArrayList<>(3);\n         strimziSelectorLabels.add(STRIMZI_CLUSTER_LABEL);\n         strimziSelectorLabels.add(STRIMZI_NAME_LABEL);\n         strimziSelectorLabels.add(STRIMZI_KIND_LABEL);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzNDI4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396834289", "bodyText": "I think we normally have this on single line:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static String getOrValidInstanceLabelValue(String instance) {\n          \n          \n            \n                /*test*/ static String getOrValidInstanceLabelValue(String instance) {", "author": "scholzj", "createdAt": "2020-03-24T00:16:26Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -196,68 +215,74 @@ private Labels with(String label, String value) {\n \n     /**\n      * The same labels as this instance, but with the given {@code kind} for the {@code strimzi.io/kind} key.\n+     *\n      * @param kind The kind to add.\n      * @return A new instance with the given kind added.\n      */\n-    public Labels withKind(String kind) {\n+    public Labels withStrimziKind(String kind) {\n         return with(STRIMZI_KIND_LABEL, kind);\n     }\n \n \n     /**\n      * The same labels as this instance, but with the given {@code cluster} for the {@code strimzi.io/cluster} key.\n+     *\n      * @param cluster The cluster to add.\n      * @return A new instance with the given cluster added.\n      */\n-    public Labels withCluster(String cluster) {\n+    public Labels withStrimziCluster(String cluster) {\n         return with(STRIMZI_CLUSTER_LABEL, cluster);\n     }\n \n     /**\n      * The same labels as this instance, but with the application name {@code strimzi} for the {@code app.kubernetes.io/name} key.\n+     *\n+     * @param name The kubernetes name to add.\n      * @return A new instance with the given kubernetes application name added.\n      */\n-    public Labels withKubernetesName() {\n-        return with(Labels.KUBERNETES_NAME_LABEL, Labels.KUBERNETES_NAME);\n+    public Labels withKubernetesName(String name) {\n+        return with(Labels.KUBERNETES_NAME_LABEL, name);\n     }\n \n     /**\n      * The same labels as this instance, but with the given {@code instance} for the {@code app.kubernetes.io/instance} key.\n-     * @param instance The instance to add.\n+     *\n+     * @param instanceName The instance to add.\n      * @return A new instance with the given kubernetes application instance added.\n      */\n-    public Labels withKubernetesInstance(String instance) {\n-        return with(Labels.KUBERNETES_INSTANCE_LABEL, getOrValidInstanceLabelValue(instance));\n+    public Labels withKubernetesInstance(String instanceName) {\n+        return with(Labels.KUBERNETES_INSTANCE_LABEL, getOrValidInstanceLabelValue(instanceName));\n     }\n \n     /**\n      * The same labels as this instance, but with the given {@code part-of} for the {@code app.kubernetes.io/part-of} key.\n-     * @param partof The partof label to add.\n+     *\n+     * @param instanceName The instance used to generate the unique label to add composed with the application name.\n      * @return A new instance with the given kubernetes application part-of label added.\n      */\n-    public Labels withKubernetesPartOf(String partof) {\n-        return with(Labels.KUBERNETES_PART_OF_LABEL, getOrValidInstanceLabelValue(partof));\n+    public Labels withKubernetesPartOf(String instanceName) {\n+        return with(Labels.KUBERNETES_PART_OF_LABEL, getOrValidInstanceLabelValue(APPLICATION_NAME + \"-\" + instanceName));\n     }\n \n     /**\n      * Validates the instance name and if needed modifies it to make it a valid Label value:\n-     *   - (([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?\n-     *   - 63 characters max\n+     * - (([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?\n+     * - 63 characters max\n      * This method is written to handle instance names which are valid resource names, since they are derived from a\n      * custom resource. It does not modify arbitrary names as label values.\n      *\n-     *\n      * @param instance Theoriginal name of the instance\n      * @return Either the original instance name or a modified version to match label value criteria\n      */\n-    /*test*/ static String getOrValidInstanceLabelValue(String instance) {\n-        if (instance == null)   {\n+    /*test*/\n+    static String getOrValidInstanceLabelValue(String instance) {", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\nindex ba78fb6b9f..6ab2ea624e 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n\n@@ -274,8 +276,7 @@ public class Labels {\n      * @param instance Theoriginal name of the instance\n      * @return Either the original instance name or a modified version to match label value criteria\n      */\n-    /*test*/\n-    static String getOrValidInstanceLabelValue(String instance) {\n+    /*test*/ static String getOrValidInstanceLabelValue(String instance) {\n         if (instance == null) {\n             return \"\";\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzNDkwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396834909", "bodyText": "So I guess this is where it runs into #2743 and it is not clear to me how to deal with it.", "author": "scholzj", "createdAt": "2020-03-24T00:18:35Z", "path": "operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java", "diffHunk": "@@ -117,7 +136,7 @@ public static Labels userLabels(Map<String, String> userLabels) {\n         }\n \n         // Remove Kubernetes Domain specific labels\n-        Map<String, String> filteredLabels = userLabels\n+        Map<String, String> filteredLabels = additionalLabels", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NDAxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r396984013", "bodyText": "For the short term I think we should modify this filter to allow a few whitelisted labels to be applied\nhttps://github.com/strimzi/strimzi-kafka-operator/pull/2730/files#diff-6de62e326f52e6cc92e7ffd7e722e8f4R142\nI suggest we only allow the app.kubernetes.io/part-of label as this one is used to group resources together? Looking at the others it is unclear what value it would have to allow them to be modifiable.", "author": "samuel-hawker", "createdAt": "2020-03-24T08:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzNDkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjU5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397032590", "bodyText": "That sounds reasonable - I have only app.kubernetes.io/part-of so far reported as an issue.", "author": "scholzj", "createdAt": "2020-03-24T10:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzNDkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\nindex ba78fb6b9f..6ab2ea624e 100644\n--- a/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n+++ b/operator-common/src/main/java/io/strimzi/operator/common/model/Labels.java\n\n@@ -136,10 +136,12 @@ public class Labels {\n         }\n \n         // Remove Kubernetes Domain specific labels\n+        // Exceptions app.kubernetes.io/part-of\n         Map<String, String> filteredLabels = additionalLabels\n                 .entrySet()\n                 .stream()\n-                .filter(entryset -> !entryset.getKey().startsWith(Labels.KUBERNETES_DOMAIN))\n+                .filter(entryset ->\n+                        !entryset.getKey().startsWith(Labels.KUBERNETES_DOMAIN) || entryset.getKey().equals(KUBERNETES_PART_OF_LABEL))\n                 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n \n         return new Labels(filteredLabels);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDgyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397040827", "bodyText": "I think Javadoc to explain what discovery is in this context would be helpful.", "author": "tombentley", "createdAt": "2020-03-24T10:16:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -247,39 +252,26 @@ public String getHeadlessServiceName() {\n      * @return The selector labels as an instance of the Labels object.\n      */\n     public Labels getSelectorLabels() {\n-        return labels.withName(name).strimziSelectorLabels();\n+        return getLabelsWithStrimziName(name, Collections.emptyMap()).strimziSelectorLabels();\n     }\n \n-    /**\n-     * @return The selector labels as Map.\n-     */\n-    public Map<String, String> getSelectorLabelsAsMap() {\n-        return getSelectorLabels().toMap();\n+    protected Labels getLabelsWithStrimziName(String name, Map<String, String> additionalLabels) {\n+        return labels.withStrimziName(name).withAdditionalLabels(additionalLabels);\n     }\n \n-    protected Map<String, String> getLabelsWithName() {\n-        return getLabelsWithName(name);\n+    protected Labels getLabelsWithNameAndDiscovery(String name, Map<String, String> additionalLabels) {", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex dd21c3b6d9..4a36cb293f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -263,15 +251,6 @@ public abstract class AbstractModel {\n         return getLabelsWithStrimziName(name, additionalLabels).withStrimziDiscovery();\n     }\n \n-    /**\n-     * @param resource\n-     * @return The default Labels set\n-     */\n-    protected Labels generateDefaultLabels(HasMetadata resource) {\n-        return Labels.generateDefaultLabels(resource, applicationName, STRIMZI_CLUSTER_OPERATOR_NAME);\n-    }\n-\n-\n \n     /**\n      * @return Whether metrics are enabled.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDk3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2730#discussion_r397040976", "bodyText": "I think Javadoc to explain what a Strimzi name is in this context would be helpful.", "author": "tombentley", "createdAt": "2020-03-24T10:17:01Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java", "diffHunk": "@@ -247,39 +252,26 @@ public String getHeadlessServiceName() {\n      * @return The selector labels as an instance of the Labels object.\n      */\n     public Labels getSelectorLabels() {\n-        return labels.withName(name).strimziSelectorLabels();\n+        return getLabelsWithStrimziName(name, Collections.emptyMap()).strimziSelectorLabels();\n     }\n \n-    /**\n-     * @return The selector labels as Map.\n-     */\n-    public Map<String, String> getSelectorLabelsAsMap() {\n-        return getSelectorLabels().toMap();\n+    protected Labels getLabelsWithStrimziName(String name, Map<String, String> additionalLabels) {", "originalCommit": "799450a5b1e64adfa333908c452887aa09ded429", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "chunk": "diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\nindex dd21c3b6d9..4a36cb293f 100644\n--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/model/AbstractModel.java\n\n@@ -263,15 +251,6 @@ public abstract class AbstractModel {\n         return getLabelsWithStrimziName(name, additionalLabels).withStrimziDiscovery();\n     }\n \n-    /**\n-     * @param resource\n-     * @return The default Labels set\n-     */\n-    protected Labels generateDefaultLabels(HasMetadata resource) {\n-        return Labels.generateDefaultLabels(resource, applicationName, STRIMZI_CLUSTER_OPERATOR_NAME);\n-    }\n-\n-\n \n     /**\n      * @return Whether metrics are enabled.\n"}}, {"oid": "4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4b944a93f15c911e9286e8b8a4e83c4bfc6df61c", "message": "feat: Review comments\n\nChange constructor signatures\nseveral cleanups\ntest fixes\ncomment clarifications\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-24T21:51:37Z", "type": "forcePushed"}, {"oid": "4eb3fc27439df441403d6a0e019c055f1433ebc6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4eb3fc27439df441403d6a0e019c055f1433ebc6", "message": "Merge branch 'master' of https://github.com/strimzi/strimzi-kafka-operator into labels-refactor", "committedDate": "2020-03-25T09:53:17Z", "type": "forcePushed"}, {"oid": "e44129238d2ca8292388dceb734b020aee001ae5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e44129238d2ca8292388dceb734b020aee001ae5", "message": "feat: Correct Kubernetes labels and labels refactor\n\n- Modify the app.kubernetes.io/name label to reflect the\ncorrect apps for each component\nThese labels are queryable so that a user can see all 'kafka',\n'zookeeper' etc components in a cluster\n- Modify the app.kubernetes.io/part-of label to have a unique\nidentifier for each instance of a cluster\nThis is mostly for the openshift Ui which clusters applications\nbased on their part-of label\n- Refactored labels so that all models build up their labels\nin a similar fashion.\nMade explicit the subset of labels that constitute a strimzi  selector\nlabel this should assist in  avoiding breaking bugs in future\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-27T08:50:03Z", "type": "commit"}, {"oid": "1d00d44efb37d4ad331405b808c64220945292dc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d00d44efb37d4ad331405b808c64220945292dc", "message": "feat: Review comments\n\nChange constructor signatures\nseveral cleanups\ntest fixes\ncomment clarifications\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-27T08:50:27Z", "type": "commit"}, {"oid": "a44ad15ebaf0a26207eed1b1b48de26418eb05f1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a44ad15ebaf0a26207eed1b1b48de26418eb05f1", "message": "fix: lint\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-27T08:51:04Z", "type": "commit"}, {"oid": "ced34bd43f8f5ab494f354ebf27724d4e7472acd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ced34bd43f8f5ab494f354ebf27724d4e7472acd", "message": "feat: Add java doc to refactored Labels helpers\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-27T08:51:16Z", "type": "commit"}, {"oid": "ced34bd43f8f5ab494f354ebf27724d4e7472acd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ced34bd43f8f5ab494f354ebf27724d4e7472acd", "message": "feat: Add java doc to refactored Labels helpers\n\nSigned-off-by: Samuel Hawker <samuel.hawker@ibm.com>", "committedDate": "2020-03-27T08:51:16Z", "type": "forcePushed"}]}