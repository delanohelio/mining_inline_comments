{"pr_number": 3302, "pr_title": "ST: Add test for bridge metrics are exposed properly", "pr_createdAt": "2020-07-10T10:11:48Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453054123", "bodyText": "Should we have similar check for Kafka Producer and Kafka Consumer metrics?", "author": "scholzj", "createdAt": "2020-07-10T20:06:08Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));", "originalCommit": "acd01d9ba219a80778ec662bcdded852cc482b2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjA5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453066091", "bodyText": "Agreed", "author": "ppatierno", "createdAt": "2020-07-10T20:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MDY2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453190665", "bodyText": "I was able to see those metrics in grafana, but when I fetch metrics from bridge:8080/metrics I can see only this https://gist.github.com/Frawless/4d04010dd2e9d7dfbd3276f1ccf8f2a1, do I need update rules in CR as we have it for Kafka for example?", "author": "Frawless", "createdAt": "2020-07-11T12:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MjIzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453192235", "bodyText": "Yes you are right to see kafka consumer and producer metrics you need to start consumer/producer applications otherwise JMX doesn't collect/expose any metrics.", "author": "ppatierno", "createdAt": "2020-07-11T12:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMwNTM2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453305368", "bodyText": "Ah make sense. I will add it to the test. Thanks", "author": "Frawless", "createdAt": "2020-07-12T11:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex 996512bc4..07799e2da 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -291,14 +296,36 @@ public class MetricsST extends AbstractST {\n     }\n \n     @Test\n+    @Tag(BRIDGE)\n     void testKafkaBridgeMetrics() {\n-        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n-        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n-        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        String producerName = \"bridge-producer\";\n+        String consumerName = \"bridge-consumer\";\n+\n+        // Attach consumer before producer\n+        KafkaClientsResource.consumerStrimziBridge(consumerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+        KafkaClientsResource.producerStrimziBridge(producerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+\n+        TestUtils.waitFor(\"KafkaProducer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_producer_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern producerCountPattern = Pattern.compile(\"strimzi_bridge_kafka_producer_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> producerCountValues = MetricsUtils.collectSpecificMetric(producerCountPattern, kafkaBridgeMetricsData);\n+            return producerCountValues.stream().mapToDouble(i -> i).count() == (double) 1;\n+        });\n+\n+        TestUtils.waitFor(\"KafkaConsumer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_consumer_connection_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern consumerConnectionsPattern = Pattern.compile(\"strimzi_bridge_kafka_consumer_connection_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> consumerConnectionsValues = MetricsUtils.collectSpecificMetric(consumerConnectionsPattern, kafkaBridgeMetricsData);\n+            return consumerConnectionsValues.stream().mapToDouble(i -> i).count() > 0;\n+        });\n+\n         assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains strimzi metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));\n \n-        Pattern brdigeResponse = Pattern.compile(\"system_cpu_count ([\\\\d.][^\\\\n]+)\");\n-        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(brdigeResponse, kafkaBridgeMetricsData);\n+        Pattern bridgeResponse = Pattern.compile(\"system_cpu_count ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(bridgeResponse, kafkaBridgeMetricsData);\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NjA0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r453066043", "bodyText": "Let's remember that when the new bridge 0.18.0 will be out, the metrics will contain strimzi_bridge", "author": "ppatierno", "createdAt": "2020-07-10T20:37:42Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +290,18 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    void testKafkaBridgeMetrics() {\n+        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));", "originalCommit": "acd01d9ba219a80778ec662bcdded852cc482b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex 996512bc4..07799e2da 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -291,14 +296,36 @@ public class MetricsST extends AbstractST {\n     }\n \n     @Test\n+    @Tag(BRIDGE)\n     void testKafkaBridgeMetrics() {\n-        kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n-        assertThat(\"Collected KafkaBridge metrics are empty\", kafkaBridgeMetricsData.size() > 0);\n-        assertThat(\"Collected KafkaBridge metrics doesn't contains vertx metrics\", kafkaBridgeMetricsData.values().toString().contains(\"vertx\"));\n+        String producerName = \"bridge-producer\";\n+        String consumerName = \"bridge-consumer\";\n+\n+        // Attach consumer before producer\n+        KafkaClientsResource.consumerStrimziBridge(consumerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+        KafkaClientsResource.producerStrimziBridge(producerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+\n+        TestUtils.waitFor(\"KafkaProducer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_producer_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern producerCountPattern = Pattern.compile(\"strimzi_bridge_kafka_producer_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> producerCountValues = MetricsUtils.collectSpecificMetric(producerCountPattern, kafkaBridgeMetricsData);\n+            return producerCountValues.stream().mapToDouble(i -> i).count() == (double) 1;\n+        });\n+\n+        TestUtils.waitFor(\"KafkaConsumer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_consumer_connection_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern consumerConnectionsPattern = Pattern.compile(\"strimzi_bridge_kafka_consumer_connection_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> consumerConnectionsValues = MetricsUtils.collectSpecificMetric(consumerConnectionsPattern, kafkaBridgeMetricsData);\n+            return consumerConnectionsValues.stream().mapToDouble(i -> i).count() > 0;\n+        });\n+\n         assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains strimzi metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));\n \n-        Pattern brdigeResponse = Pattern.compile(\"system_cpu_count ([\\\\d.][^\\\\n]+)\");\n-        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(brdigeResponse, kafkaBridgeMetricsData);\n+        Pattern bridgeResponse = Pattern.compile(\"system_cpu_count ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(bridgeResponse, kafkaBridgeMetricsData);\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n"}}, {"oid": "2bd73ace9265093249a5af85a15e101534f1ea55", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2bd73ace9265093249a5af85a15e101534f1ea55", "message": "Add test for bridge metrics are exposed properly\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T08:13:33Z", "type": "commit"}, {"oid": "92f63c2fea4156c8070eb19d35662acc225bd086", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/92f63c2fea4156c8070eb19d35662acc225bd086", "message": "fixup! Add test for bridge metrics are exposed properly\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T08:13:33Z", "type": "commit"}, {"oid": "ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "message": "Attach clients to bridge metrics tests\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T08:13:33Z", "type": "commit"}, {"oid": "ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ffbd93ae4a4dfc3e3427845bacbd71c48e20ce60", "message": "Attach clients to bridge metrics tests\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T08:13:33Z", "type": "forcePushed"}, {"oid": "fcf50cdf66043feb28325efe463665385621958f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fcf50cdf66043feb28325efe463665385621958f", "message": "FIx soem asserts\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T09:17:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0MjM0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r454242347", "bodyText": "typo \"BRIDGE\"", "author": "ppatierno", "createdAt": "2020-07-14T09:57:12Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -77,6 +77,7 @@\n      */\n     String KAFKA_CLIENTS_LABEL_KEY = \"user-test-app\";\n     String KAFKA_CLIENTS_LABEL_VALUE = \"kafka-clients\";\n+    String KAFKA_BRDIGE_CLIENTS_LABEL_VALUE = \"kafka-clients\";", "originalCommit": "fcf50cdf66043feb28325efe463665385621958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ee06e86ca142e7429652b670318a79bae2be8b", "chunk": "diff --git a/systemtest/src/main/java/io/strimzi/systemtest/Constants.java b/systemtest/src/main/java/io/strimzi/systemtest/Constants.java\nindex 5a98eeffe..d8e80c686 100644\n--- a/systemtest/src/main/java/io/strimzi/systemtest/Constants.java\n+++ b/systemtest/src/main/java/io/strimzi/systemtest/Constants.java\n\n@@ -77,7 +77,7 @@ public interface Constants {\n      */\n     String KAFKA_CLIENTS_LABEL_KEY = \"user-test-app\";\n     String KAFKA_CLIENTS_LABEL_VALUE = \"kafka-clients\";\n-    String KAFKA_BRDIGE_CLIENTS_LABEL_VALUE = \"kafka-clients\";\n+    String KAFKA_BRIDGE_CLIENTS_LABEL_VALUE = \"kafka-clients\";\n \n     String KAFKA_CLIENTS = \"kafka-clients\";\n     String STRIMZI_DEPLOYMENT_NAME = \"strimzi-cluster-operator\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0NDkzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3302#discussion_r454244930", "bodyText": "\"HTTP metrics\"", "author": "ppatierno", "createdAt": "2020-07-14T10:01:48Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -286,6 +295,40 @@ void testMirrorMaker2Metrics() {\n         assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n     }\n \n+    @Test\n+    @Tag(BRIDGE)\n+    void testKafkaBridgeMetrics() {\n+        String producerName = \"bridge-producer\";\n+        String consumerName = \"bridge-consumer\";\n+\n+        // Attach consumer before producer\n+        KafkaClientsResource.consumerStrimziBridge(consumerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+        KafkaClientsResource.producerStrimziBridge(producerName, KafkaBridgeResources.serviceName(BRIDGE_CLUSTER), Constants.HTTP_BRIDGE_DEFAULT_PORT, bridgeTopic, 200).done();\n+\n+        TestUtils.waitFor(\"KafkaProducer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_producer_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern producerCountPattern = Pattern.compile(\"strimzi_bridge_kafka_producer_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> producerCountValues = MetricsUtils.collectSpecificMetric(producerCountPattern, kafkaBridgeMetricsData);\n+            return producerCountValues.stream().mapToDouble(i -> i).count() == (double) 1;\n+        });\n+\n+        TestUtils.waitFor(\"KafkaConsumer metrics will be available\", Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_TIMEOUT, () -> {\n+            LOGGER.info(\"Looking for 'strimzi_bridge_kafka_consumer_connection_count' in bridge metrics\");\n+            kafkaBridgeMetricsData = MetricsUtils.collectKafkaBridgePodMetrics(BRIDGE_CLUSTER);\n+            Pattern consumerConnectionsPattern = Pattern.compile(\"strimzi_bridge_kafka_consumer_connection_count\\\\{.*,} ([\\\\d.][^\\\\n]+)\");\n+            ArrayList<Double> consumerConnectionsValues = MetricsUtils.collectSpecificMetric(consumerConnectionsPattern, kafkaBridgeMetricsData);\n+            return consumerConnectionsValues.stream().mapToDouble(i -> i).count() > 0;\n+        });\n+\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains strimzi metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));", "originalCommit": "fcf50cdf66043feb28325efe463665385621958f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ee06e86ca142e7429652b670318a79bae2be8b", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\nindex 4f50184b3..d43733b03 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java\n\n@@ -322,7 +322,7 @@ public class MetricsST extends AbstractST {\n         });\n \n         assertThat(\"Collected KafkaBridge metrics doesn't contains jvm metrics\", kafkaBridgeMetricsData.values().toString().contains(\"jvm\"));\n-        assertThat(\"Collected KafkaBridge metrics doesn't contains strimzi metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));\n+        assertThat(\"Collected KafkaBridge metrics doesn't contains HTTP metrics\", kafkaBridgeMetricsData.values().toString().contains(\"strimzi_bridge_http_server\"));\n \n         Pattern bridgeResponse = Pattern.compile(\"system_cpu_count ([\\\\d.][^\\\\n]+)\");\n         ArrayList<Double> values = MetricsUtils.collectSpecificMetric(bridgeResponse, kafkaBridgeMetricsData);\n"}}, {"oid": "96ee06e86ca142e7429652b670318a79bae2be8b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/96ee06e86ca142e7429652b670318a79bae2be8b", "message": "Fix comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-07-14T10:22:31Z", "type": "commit"}]}