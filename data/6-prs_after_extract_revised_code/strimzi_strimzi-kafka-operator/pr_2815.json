{"pr_number": 2815, "pr_title": "[MO] - [system test] -> creating topics via adminclient", "pr_createdAt": "2020-04-09T16:07:39Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406316964", "bodyText": "why the admin client goes through an external listener? Can you use the internal plain port for this test?", "author": "ppatierno", "createdAt": "2020-04-09T16:12:07Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));", "originalCommit": "c5076cf5eb473d20b588a4df33acdf99f33b2424", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MTQxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406541410", "bodyText": "The client runs locally, or?", "author": "scholzj", "createdAt": "2020-04-10T00:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MDY4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r407960689", "bodyText": "The client runs locally. Is there some way to run client inside the cluster ?", "author": "see-quick", "createdAt": "2020-04-14T08:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNjk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "4588f590645bbf6e93d173f2fb98ff49f2dbe0d8", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nsimilarity index 69%\nrename from systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\nrename to systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nindex 67a63bc87a..8ba59d44a7 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n\n@@ -96,109 +94,33 @@ public class TopicST extends BaseST {\n \n         assertThat(\"Topic exists in Kafka itself\", hasTopicInKafka(newTopicName));\n         assertThat(\"Topic exists in Kafka CR (Kubernetes)\", hasTopicInCRK8s(kafkaTopic, newTopicName));\n-\n-        LOGGER.info(\"Delete topic {}\", newTopicName);\n-        cmdKubeClient().deleteByName(\"kafkatopic\", newTopicName);\n-        KafkaTopicUtils.waitForKafkaTopicDeletion(newTopicName);\n     }\n \n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaK8s() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n+    void testCreateTopicViaKafka() {\n         int topicPartitions = 3;\n \n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n+        LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", TOPIC_NAME, 3, topicPartitions);\n+        KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Creating topics via Kubernetes\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicResource.topic(CLUSTER_NAME, currentTopic, topicPartitions).done();\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicCreation(TOPIC_NAME);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        topicPartitions = 5;\n-        LOGGER.info(\"Editing topic via Kubernetes settings to partitions {}\", topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-\n-            KafkaTopicResource.replaceTopicResource(currentTopic, topic -> topic.getSpec().setPartitions(5));\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.info(\"Waiting for kafka topic {} will change partitions to {}\", currentTopic, topicPartitions);\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n-    }\n-\n-    @Tag(SCALABILITY)\n-    @Test\n-    void testBigAmountOfTopicsCreatingViaKafka() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n-        int topicPartitions = 3;\n-\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n-\n-        LOGGER.info(\"Creating topic {} with partitions {} via Kafka\", numberOfTopics, topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", currentTopic, 3, topicPartitions);\n-            KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicCreation(currentTopic);\n-            KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(currentTopic).get();\n-            verifyTopicViaKafkaTopicCRK8s(kafkaTopic, currentTopic, topicPartitions);\n-        }\n+        KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(TOPIC_NAME).get();\n+        verifyTopicViaKafkaTopicCRK8s(kafkaTopic, TOPIC_NAME, topicPartitions);\n \n         topicPartitions = 5;\n         LOGGER.info(\"Editing topic via Kafka, settings to partitions {}\", topicPartitions);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, currentTopic, topicPartitions);\n-            LOGGER.debug(\"Topic {} updated from {} to {} partitions\", currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n+        KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, topicPartitions);\n+        LOGGER.debug(\"Topic {} updated from {} to {} partitions\", TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicPartitionChange(TOPIC_NAME, topicPartitions);\n+        verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n     @Tag(NODEPORT_SUPPORTED)\n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n             .editSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxOTU3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406319572", "bodyText": "I would say \"Verify that corresponding {} KafkaTopic custom resources were created\"", "author": "ppatierno", "createdAt": "2020-04-09T16:16:30Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            for (int i = 0; i < NUMBER_OF_TOPICS; i++) {\n+                String topicName = TOPIC_NAME + \"-\" + i;\n+                LOGGER.debug(\"Creating async topic {} via Admin client\", topicName);\n+                CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(topicName, 1, (short) 1)));\n+                crt.all().get();\n+            }\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", NUMBER_OF_TOPICS);\n+            assertThat(topics.size(), is(NUMBER_OF_TOPICS));\n+        }\n+\n+        LOGGER.info(\"Verify that {} topics are inside Kubernetes CR\", NUMBER_OF_TOPICS);", "originalCommit": "c5076cf5eb473d20b588a4df33acdf99f33b2424", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4588f590645bbf6e93d173f2fb98ff49f2dbe0d8", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nsimilarity index 69%\nrename from systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\nrename to systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nindex 67a63bc87a..8ba59d44a7 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n\n@@ -96,109 +94,33 @@ public class TopicST extends BaseST {\n \n         assertThat(\"Topic exists in Kafka itself\", hasTopicInKafka(newTopicName));\n         assertThat(\"Topic exists in Kafka CR (Kubernetes)\", hasTopicInCRK8s(kafkaTopic, newTopicName));\n-\n-        LOGGER.info(\"Delete topic {}\", newTopicName);\n-        cmdKubeClient().deleteByName(\"kafkatopic\", newTopicName);\n-        KafkaTopicUtils.waitForKafkaTopicDeletion(newTopicName);\n     }\n \n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaK8s() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n+    void testCreateTopicViaKafka() {\n         int topicPartitions = 3;\n \n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n+        LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", TOPIC_NAME, 3, topicPartitions);\n+        KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Creating topics via Kubernetes\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicResource.topic(CLUSTER_NAME, currentTopic, topicPartitions).done();\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicCreation(TOPIC_NAME);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        topicPartitions = 5;\n-        LOGGER.info(\"Editing topic via Kubernetes settings to partitions {}\", topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-\n-            KafkaTopicResource.replaceTopicResource(currentTopic, topic -> topic.getSpec().setPartitions(5));\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.info(\"Waiting for kafka topic {} will change partitions to {}\", currentTopic, topicPartitions);\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n-    }\n-\n-    @Tag(SCALABILITY)\n-    @Test\n-    void testBigAmountOfTopicsCreatingViaKafka() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n-        int topicPartitions = 3;\n-\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n-\n-        LOGGER.info(\"Creating topic {} with partitions {} via Kafka\", numberOfTopics, topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", currentTopic, 3, topicPartitions);\n-            KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicCreation(currentTopic);\n-            KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(currentTopic).get();\n-            verifyTopicViaKafkaTopicCRK8s(kafkaTopic, currentTopic, topicPartitions);\n-        }\n+        KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(TOPIC_NAME).get();\n+        verifyTopicViaKafkaTopicCRK8s(kafkaTopic, TOPIC_NAME, topicPartitions);\n \n         topicPartitions = 5;\n         LOGGER.info(\"Editing topic via Kafka, settings to partitions {}\", topicPartitions);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, currentTopic, topicPartitions);\n-            LOGGER.debug(\"Topic {} updated from {} to {} partitions\", currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n+        KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, topicPartitions);\n+        LOGGER.debug(\"Topic {} updated from {} to {} partitions\", TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicPartitionChange(TOPIC_NAME, topicPartitions);\n+        verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n     @Tag(NODEPORT_SUPPORTED)\n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n             .editSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDExOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r406380118", "bodyText": "Is that single Zookeeper node?", "author": "scholzj", "createdAt": "2020-04-09T18:00:11Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/TopicST.java", "diffHunk": "@@ -181,6 +195,45 @@ void testBigAmountOfTopicsCreatingViaKafka() {\n         }\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n+    @Test\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)", "originalCommit": "c5076cf5eb473d20b588a4df33acdf99f33b2424", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MzgzOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r407963839", "bodyText": "Yes. Do i need more?", "author": "see-quick", "createdAt": "2020-04-14T08:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDExOA=="}], "type": "inlineReview", "revised_code": {"commit": "4588f590645bbf6e93d173f2fb98ff49f2dbe0d8", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nsimilarity index 69%\nrename from systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\nrename to systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nindex 67a63bc87a..8ba59d44a7 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/TopicST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n\n@@ -96,109 +94,33 @@ public class TopicST extends BaseST {\n \n         assertThat(\"Topic exists in Kafka itself\", hasTopicInKafka(newTopicName));\n         assertThat(\"Topic exists in Kafka CR (Kubernetes)\", hasTopicInCRK8s(kafkaTopic, newTopicName));\n-\n-        LOGGER.info(\"Delete topic {}\", newTopicName);\n-        cmdKubeClient().deleteByName(\"kafkatopic\", newTopicName);\n-        KafkaTopicUtils.waitForKafkaTopicDeletion(newTopicName);\n     }\n \n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaK8s() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n+    void testCreateTopicViaKafka() {\n         int topicPartitions = 3;\n \n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n+        LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", TOPIC_NAME, 3, topicPartitions);\n+        KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Creating topics via Kubernetes\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicResource.topic(CLUSTER_NAME, currentTopic, topicPartitions).done();\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicCreation(TOPIC_NAME);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        topicPartitions = 5;\n-        LOGGER.info(\"Editing topic via Kubernetes settings to partitions {}\", topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-\n-            KafkaTopicResource.replaceTopicResource(currentTopic, topic -> topic.getSpec().setPartitions(5));\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.info(\"Waiting for kafka topic {} will change partitions to {}\", currentTopic, topicPartitions);\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n-\n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n-    }\n-\n-    @Tag(SCALABILITY)\n-    @Test\n-    void testBigAmountOfTopicsCreatingViaKafka() {\n-        final String topicName = \"topic-example\";\n-        String currentTopic;\n-        int numberOfTopics = 50;\n-        int topicPartitions = 3;\n-\n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1).done();\n-\n-        LOGGER.info(\"Creating topic {} with partitions {} via Kafka\", numberOfTopics, topicPartitions);\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            LOGGER.debug(\"Creating topic {} with {} replicas and {} partitions\", currentTopic, 3, topicPartitions);\n-            KafkaCmdClient.createTopicUsingPodCli(CLUSTER_NAME, 0, currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicCreation(currentTopic);\n-            KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(currentTopic).get();\n-            verifyTopicViaKafkaTopicCRK8s(kafkaTopic, currentTopic, topicPartitions);\n-        }\n+        KafkaTopic kafkaTopic = KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).withName(TOPIC_NAME).get();\n+        verifyTopicViaKafkaTopicCRK8s(kafkaTopic, TOPIC_NAME, topicPartitions);\n \n         topicPartitions = 5;\n         LOGGER.info(\"Editing topic via Kafka, settings to partitions {}\", topicPartitions);\n \n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, currentTopic, topicPartitions);\n-            LOGGER.debug(\"Topic {} updated from {} to {} partitions\", currentTopic, 3, topicPartitions);\n-        }\n-\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            KafkaTopicUtils.waitForKafkaTopicPartitionChange(currentTopic, topicPartitions);\n-            verifyTopicViaKafka(currentTopic, topicPartitions);\n-        }\n+        KafkaCmdClient.updateTopicPartitionsCountUsingPodCli(CLUSTER_NAME, 0, TOPIC_NAME, topicPartitions);\n+        LOGGER.debug(\"Topic {} updated from {} to {} partitions\", TOPIC_NAME, 3, topicPartitions);\n \n-        LOGGER.info(\"Deleting all topics\");\n-        for (int i = 0; i < numberOfTopics; i++) {\n-            currentTopic = topicName + i;\n-            cmdKubeClient().deleteByName(\"kafkatopic\", currentTopic);\n-            KafkaTopicUtils.waitForKafkaTopicDeletion(currentTopic);\n-        }\n+        KafkaTopicUtils.waitForKafkaTopicPartitionChange(TOPIC_NAME, topicPartitions);\n+        verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n     @Tag(NODEPORT_SUPPORTED)\n-    @Tag(SCALABILITY)\n     @Test\n-    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n \n         KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n             .editSpec()\n"}}, {"oid": "4588f590645bbf6e93d173f2fb98ff49f2dbe0d8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4588f590645bbf6e93d173f2fb98ff49f2dbe0d8", "message": "[MO] - [system test] -> update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-21T10:18:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyODE3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r416328175", "bodyText": "asserThat it contains exactly TOPIC_NAME other than just the size?", "author": "ppatierno", "createdAt": "2020-04-28T05:01:52Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "diffHunk": "@@ -106,6 +118,41 @@ void testCreateTopicViaKafka() {\n         verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            LOGGER.info(\"Creating async topic {} via Admin client\", TOPIC_NAME);\n+            CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(TOPIC_NAME, 1, (short) 1)));\n+            crt.all().get();\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", 1);\n+            assertThat(topics.size(), is(1));", "originalCommit": "d9a9a6cf3cfe9dd65aea398d8b82440888932a99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21583edf6ca19bac8ed53e3f7e58358e5878bdd1", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nindex 891a6ae069..d4e2b1ed2e 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n\n@@ -119,10 +121,11 @@ public class TopicST extends BaseST {\n     }\n \n     @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n     @Test\n-    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n \n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n             .editSpec()\n                 .editKafka()\n                     .editListeners()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyODM2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2815#discussion_r416328360", "bodyText": "the same, assertThat the metadata.name is TOPIC_NAME?", "author": "ppatierno", "createdAt": "2020-04-28T05:02:31Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java", "diffHunk": "@@ -106,6 +118,41 @@ void testCreateTopicViaKafka() {\n         verifyTopicViaKafka(TOPIC_NAME, topicPartitions);\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Test\n+    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+            .editSpec()\n+                .editKafka()\n+                    .editListeners()\n+                        .withNewKafkaListenerExternalNodePort()\n+                            .withTls(false)\n+                        .endKafkaListenerExternalNodePort()\n+                    .endListeners()\n+                .endKafka()\n+            .endSpec()\n+            .done();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, AbstractKafkaClient.getExternalBootstrapConnect(NAMESPACE, CLUSTER_NAME));\n+\n+        try (AdminClient adminClient = AdminClient.create(properties)) {\n+\n+            LOGGER.info(\"Creating async topic {} via Admin client\", TOPIC_NAME);\n+            CreateTopicsResult crt = adminClient.createTopics(singletonList(new NewTopic(TOPIC_NAME, 1, (short) 1)));\n+            crt.all().get();\n+\n+            Set<String> topics = adminClient.listTopics().names().get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            LOGGER.info(\"Verify that in Kafka cluster contains {} topics\", 1);\n+            assertThat(topics.size(), is(1));\n+        }\n+\n+        LOGGER.info(\"Verify that corresponding {} KafkaTopic custom resources were created\", 1);\n+        assertThat(KafkaTopicResource.kafkaTopicClient().inNamespace(NAMESPACE).list().getItems().size(), is(1));", "originalCommit": "d9a9a6cf3cfe9dd65aea398d8b82440888932a99", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21583edf6ca19bac8ed53e3f7e58358e5878bdd1", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\nindex 891a6ae069..d4e2b1ed2e 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/topic/TopicST.java\n\n@@ -119,10 +121,11 @@ public class TopicST extends BaseST {\n     }\n \n     @Tag(NODEPORT_SUPPORTED)\n+    @Tag(SCALABILITY)\n     @Test\n-    void testCreateTopicViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n+    void testBigAmountOfTopicsCreatingViaAdminClient() throws ExecutionException, InterruptedException, TimeoutException {\n \n-        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 3)\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3, 1)\n             .editSpec()\n                 .editKafka()\n                     .editListeners()\n"}}, {"oid": "21583edf6ca19bac8ed53e3f7e58358e5878bdd1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/21583edf6ca19bac8ed53e3f7e58358e5878bdd1", "message": "[MO] - [system test] -> creating topics via adminclient\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T07:59:48Z", "type": "commit"}, {"oid": "91f496e541cb6dc0f6d88bbf4e3dd6e34a7c5026", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/91f496e541cb6dc0f6d88bbf4e3dd6e34a7c5026", "message": "[MO] - [paolo] -> commend\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T07:59:48Z", "type": "commit"}, {"oid": "3bcd465802ff986ed8dca6e0e1cd1b99a50379fd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3bcd465802ff986ed8dca6e0e1cd1b99a50379fd", "message": "[MO] - [system test] -> update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T07:59:48Z", "type": "commit"}, {"oid": "c4f97242c52972183c61ee02a71b3f3a31b32253", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c4f97242c52972183c61ee02a71b3f3a31b32253", "message": "[MO] - [jakub] -> commends\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T07:59:48Z", "type": "commit"}, {"oid": "17c3876d04eed7009a99e2239cf741fff45b902c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/17c3876d04eed7009a99e2239cf741fff45b902c", "message": "[MO] - [commends] -> done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T07:59:48Z", "type": "commit"}, {"oid": "74ee2be983d4e4bbec0f59f7776b87461bc7aa0a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/74ee2be983d4e4bbec0f59f7776b87461bc7aa0a", "message": "s;\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T08:29:18Z", "type": "commit"}, {"oid": "74ee2be983d4e4bbec0f59f7776b87461bc7aa0a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/74ee2be983d4e4bbec0f59f7776b87461bc7aa0a", "message": "s;\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T08:29:18Z", "type": "forcePushed"}, {"oid": "809371c765cc43852a15b314530daf653d779c98", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/809371c765cc43852a15b314530daf653d779c98", "message": "ss\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-28T12:34:50Z", "type": "commit"}]}