{"pr_number": 2816, "pr_title": "[systemtest] Weird usernames tests", "pr_createdAt": "2020-04-09T16:34:42Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816", "timeline": [{"oid": "c073a8bdeedf549919f6c186857e3e3ba6daa909", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c073a8bdeedf549919f6c186857e3e3ba6daa909", "message": "fixup! add tests for weird usernames of KafkaUsers", "committedDate": "2020-04-09T16:38:54Z", "type": "forcePushed"}, {"oid": "8403bfa86cf6982cb800fe23c376bd504acec3c1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/8403bfa86cf6982cb800fe23c376bd504acec3c1", "message": "fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-09T16:40:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjEyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r406646125", "bodyText": "as far as I can see this will use an external client which will try to connect to the external node port listener via TLS but in the above configuration such external node port listener doesn't have TLS enabled. What am I missing?", "author": "ppatierno", "createdAt": "2020-04-10T07:47:53Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +752,142 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectTlsAuthWithWeirdUserName() throws Exception {\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        String connectClusterName = \"connect-cluster\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewKafkaListenerExternalNodePort()\n+                            .endKafkaListenerExternalNodePort()\n+                            .withNewTls()\n+                            .endTls()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        // Initialize CertSecretSource with certificate and secret names for consumer\n+        CertSecretSource certSecret = new CertSecretSource();\n+        certSecret.setCertificate(\"ca.crt\");\n+        certSecret.setSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME));\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .editSpec()\n+                    .addToConfig(\"group.id\", connectClusterName)\n+                    .addToConfig(\"offset.storage.topic\", connectClusterName + \"-offsets\")\n+                    .addToConfig(\"config.storage.topic\", connectClusterName + \"-config\")\n+                    .addToConfig(\"status.storage.topic\", connectClusterName + \"-status\")\n+                    .withNewTls()\n+                        .withTrustedCertificates(certSecret)\n+                    .endTls()\n+                    .withBootstrapServers(CLUSTER_NAME + \"-kafka-bootstrap:9093\")\n+                .endSpec()\n+                .done();\n+\n+        testConnectAuthorizationWithWeirdUserName(weirdUserName, SecurityProtocol.SSL);", "originalCommit": "8403bfa86cf6982cb800fe23c376bd504acec3c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTU3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r407235575", "bodyText": "this is my fault, I'll take a look at it", "author": "im-konge", "createdAt": "2020-04-12T18:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNDk2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r408334968", "bodyText": "@ppatierno TLS is by default on true so I will not add that to external node port extra", "author": "im-konge", "createdAt": "2020-04-14T18:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NjEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ea5594adcde9a252caa361a53d529c3152e2476", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex 548a83c8d2..27f887390d 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -765,9 +763,8 @@ class ConnectST extends BaseST {\n                     .editKafka()\n                         .editListeners()\n                             .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationTls())\n                             .endKafkaListenerExternalNodePort()\n-                            .withNewTls()\n-                            .endTls()\n                         .endListeners()\n                     .endKafka()\n                 .endSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzQ0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r406647442", "bodyText": "actually it's not just SCRAM-SHA but you are using TLS as well, right? Should we have a test where just SASL is used instead of SALS_SSL?", "author": "ppatierno", "createdAt": "2020-04-10T07:51:50Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java", "diffHunk": "@@ -129,6 +129,59 @@ void testReceiveSimpleMessageTlsScramSha() throws Exception {\n         assertThat(deleteConsumer(bridgeHost, bridgePort, groupId, name), is(true));\n     }\n \n+    @Test\n+    void testScramShaAuthWithWeirdNamedUser() throws Exception {", "originalCommit": "8403bfa86cf6982cb800fe23c376bd504acec3c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNjEzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r408336130", "bodyText": "@ppatierno because we using TLS and SCRAM-SHA in whole HttpBridgeScramShaST i let it like that. We can add test with PLAINTEXT but I don't know if this is desired.", "author": "im-konge", "createdAt": "2020-04-14T18:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\nindex 0298589854..4b8eb62d92 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n\n@@ -170,7 +170,8 @@ class HttpBridgeScramShaST extends HttpBridgeBaseST {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        assertThat(basicExternalKafkaClient.sendMessagesTls(), is(MESSAGE_COUNT));\n+        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n+        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n         // Try to consume messages\n         JsonArray bridgeResponse = HttpUtils.receiveMessagesHttpRequest(bridgeHost, bridgePort, groupId, weirdUserName, client);\n         if (bridgeResponse.size() == 0) {\n"}}, {"oid": "0ea5594adcde9a252caa361a53d529c3152e2476", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0ea5594adcde9a252caa361a53d529c3152e2476", "message": "fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-14T20:27:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDE3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r408710176", "bodyText": "missing nodePort tag", "author": "Frawless", "createdAt": "2020-04-15T09:36:09Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +750,136 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(EXTERNAL_CLIENTS_USED)", "originalCommit": "0ea5594adcde9a252caa361a53d529c3152e2476", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex 27f887390d..fd2eee2de3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -763,8 +765,9 @@ class ConnectST extends BaseST {\n                     .editKafka()\n                         .editListeners()\n                             .withNewKafkaListenerExternalNodePort()\n-                                .withAuth(new KafkaListenerAuthenticationTls())\n                             .endKafkaListenerExternalNodePort()\n+                            .withNewTls()\n+                            .endTls()\n                         .endListeners()\n                     .endKafka()\n                 .endSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMTQ1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r408711457", "bodyText": "same as above", "author": "Frawless", "createdAt": "2020-04-15T09:38:15Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +750,136 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectTlsAuthWithWeirdUserName() throws Exception {\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        String connectClusterName = \"connect-cluster\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationTls())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        // Initialize CertSecretSource with certificate and secret names for consumer\n+        CertSecretSource certSecret = new CertSecretSource();\n+        certSecret.setCertificate(\"ca.crt\");\n+        certSecret.setSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME));\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .editSpec()\n+                    .addToConfig(\"group.id\", connectClusterName)\n+                    .addToConfig(\"offset.storage.topic\", connectClusterName + \"-offsets\")\n+                    .addToConfig(\"config.storage.topic\", connectClusterName + \"-config\")\n+                    .addToConfig(\"status.storage.topic\", connectClusterName + \"-status\")\n+                    .withNewTls()\n+                        .withTrustedCertificates(certSecret)\n+                    .endTls()\n+                    .withBootstrapServers(CLUSTER_NAME + \"-kafka-bootstrap:9093\")\n+                .endSpec()\n+                .done();\n+\n+        testConnectAuthorizationWithWeirdUserName(weirdUserName, SecurityProtocol.SSL);\n+    }\n+\n+    @Tag(EXTERNAL_CLIENTS_USED)", "originalCommit": "0ea5594adcde9a252caa361a53d529c3152e2476", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex 27f887390d..fd2eee2de3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -763,8 +765,9 @@ class ConnectST extends BaseST {\n                     .editKafka()\n                         .editListeners()\n                             .withNewKafkaListenerExternalNodePort()\n-                                .withAuth(new KafkaListenerAuthenticationTls())\n                             .endKafkaListenerExternalNodePort()\n+                            .withNewTls()\n+                            .endTls()\n                         .endListeners()\n                     .endKafka()\n                 .endSpec()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3ODk1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409378958", "bodyText": "Do we need this config?", "author": "see-quick", "createdAt": "2020-04-16T08:34:06Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +751,138 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectTlsAuthWithWeirdUserName() {\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        String connectClusterName = \"connect-cluster\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationTls())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        // Initialize CertSecretSource with certificate and secret names for consumer\n+        CertSecretSource certSecret = new CertSecretSource();\n+        certSecret.setCertificate(\"ca.crt\");\n+        certSecret.setSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME));\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .editSpec()\n+                    .addToConfig(\"group.id\", connectClusterName)\n+                    .addToConfig(\"offset.storage.topic\", connectClusterName + \"-offsets\")\n+                    .addToConfig(\"config.storage.topic\", connectClusterName + \"-config\")\n+                    .addToConfig(\"status.storage.topic\", connectClusterName + \"-status\")", "originalCommit": "5bb6845e834dcfa127b7a14bcc9d1e1b0ea5f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex aa0a6635a0..fd2eee2de3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -751,11 +752,10 @@ class ConnectST extends BaseST {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n-    @Tag(NODEPORT_SUPPORTED)\n     @Tag(EXTERNAL_CLIENTS_USED)\n     @Tag(CONNECTOR_OPERATOR)\n     @Test\n-    void testConnectTlsAuthWithWeirdUserName() {\n+    void testConnectTlsAuthWithWeirdUserName() throws Exception {\n         // Create weird named user with . and maximum of 64 chars -> TLS\n         String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n         String connectClusterName = \"connect-cluster\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4MDA0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409380041", "bodyText": "This property is redundant, you have already define it in the KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)", "author": "see-quick", "createdAt": "2020-04-16T08:35:53Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +751,138 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectTlsAuthWithWeirdUserName() {\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        String connectClusterName = \"connect-cluster\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationTls())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        // Initialize CertSecretSource with certificate and secret names for consumer\n+        CertSecretSource certSecret = new CertSecretSource();\n+        certSecret.setCertificate(\"ca.crt\");\n+        certSecret.setSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME));\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .editSpec()\n+                    .addToConfig(\"group.id\", connectClusterName)\n+                    .addToConfig(\"offset.storage.topic\", connectClusterName + \"-offsets\")\n+                    .addToConfig(\"config.storage.topic\", connectClusterName + \"-config\")\n+                    .addToConfig(\"status.storage.topic\", connectClusterName + \"-status\")\n+                    .withNewTls()\n+                        .withTrustedCertificates(certSecret)\n+                    .endTls()\n+                    .withBootstrapServers(CLUSTER_NAME + \"-kafka-bootstrap:9093\")\n+                .endSpec()\n+                .done();\n+\n+        testConnectAuthorizationWithWeirdUserName(weirdUserName, SecurityProtocol.SSL);\n+    }\n+\n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectScramShaAuthWithWeirdUserName() {\n+        // Create weird named user with . and more than 64 chars -> SCRAM-SHA\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasdsadasdasdasdasdgasgadfasdad\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .withNewTls()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n+                            .endTls()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.scramShaUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withBootstrapServers(KafkaResources.tlsBootstrapAddress(CLUSTER_NAME))\n+                    .withNewKafkaClientAuthenticationScramSha512()\n+                        .withNewUsername(weirdUserName)\n+                        .withPasswordSecret(new PasswordSecretSourceBuilder()\n+                            .withSecretName(weirdUserName)\n+                            .withPassword(\"password\")\n+                            .build())\n+                    .endKafkaClientAuthenticationScramSha512()\n+                    .addToConfig(\"key.converter.schemas.enable\", false)\n+                    .addToConfig(\"value.converter.schemas.enable\", false)\n+                    .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                    .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                    .withVersion(Environment.ST_KAFKA_VERSION)\n+                    .withReplicas(1)", "originalCommit": "5bb6845e834dcfa127b7a14bcc9d1e1b0ea5f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex aa0a6635a0..fd2eee2de3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -751,11 +752,10 @@ class ConnectST extends BaseST {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n-    @Tag(NODEPORT_SUPPORTED)\n     @Tag(EXTERNAL_CLIENTS_USED)\n     @Tag(CONNECTOR_OPERATOR)\n     @Test\n-    void testConnectTlsAuthWithWeirdUserName() {\n+    void testConnectTlsAuthWithWeirdUserName() throws Exception {\n         // Create weird named user with . and maximum of 64 chars -> TLS\n         String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n         String connectClusterName = \"connect-cluster\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4MTIyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409381228", "bodyText": "Please use only is(.....) without the prefix class. You will need to change the imports )", "author": "see-quick", "createdAt": "2020-04-16T08:37:45Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java", "diffHunk": "@@ -745,6 +751,138 @@ void testMultiNodeKafkaConnectWithConnectorCreation() {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectTlsAuthWithWeirdUserName() {\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        String connectClusterName = \"connect-cluster\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .editListeners()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationTls())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        // Initialize CertSecretSource with certificate and secret names for consumer\n+        CertSecretSource certSecret = new CertSecretSource();\n+        certSecret.setCertificate(\"ca.crt\");\n+        certSecret.setSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME));\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .editSpec()\n+                    .addToConfig(\"group.id\", connectClusterName)\n+                    .addToConfig(\"offset.storage.topic\", connectClusterName + \"-offsets\")\n+                    .addToConfig(\"config.storage.topic\", connectClusterName + \"-config\")\n+                    .addToConfig(\"status.storage.topic\", connectClusterName + \"-status\")\n+                    .withNewTls()\n+                        .withTrustedCertificates(certSecret)\n+                    .endTls()\n+                    .withBootstrapServers(CLUSTER_NAME + \"-kafka-bootstrap:9093\")\n+                .endSpec()\n+                .done();\n+\n+        testConnectAuthorizationWithWeirdUserName(weirdUserName, SecurityProtocol.SSL);\n+    }\n+\n+    @Tag(NODEPORT_SUPPORTED)\n+    @Tag(EXTERNAL_CLIENTS_USED)\n+    @Tag(CONNECTOR_OPERATOR)\n+    @Test\n+    void testConnectScramShaAuthWithWeirdUserName() {\n+        // Create weird named user with . and more than 64 chars -> SCRAM-SHA\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasdsadasdasdasdasdgasgadfasdad\";\n+\n+        KafkaResource.kafkaEphemeral(CLUSTER_NAME, 3)\n+                .editSpec()\n+                    .editKafka()\n+                        .withNewListeners()\n+                            .withNewTls()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n+                            .endTls()\n+                            .withNewKafkaListenerExternalNodePort()\n+                                .withAuth(new KafkaListenerAuthenticationScramSha512())\n+                            .endKafkaListenerExternalNodePort()\n+                        .endListeners()\n+                    .endKafka()\n+                .endSpec()\n+                .done();\n+\n+        KafkaUserResource.scramShaUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        KafkaConnectResource.kafkaConnect(CLUSTER_NAME, 1)\n+                .editMetadata()\n+                    .addToLabels(\"type\", \"kafka-connect\")\n+                    .addToAnnotations(Annotations.STRIMZI_IO_USE_CONNECTOR_RESOURCES, \"true\")\n+                .endMetadata()\n+                .withNewSpec()\n+                    .withBootstrapServers(KafkaResources.tlsBootstrapAddress(CLUSTER_NAME))\n+                    .withNewKafkaClientAuthenticationScramSha512()\n+                        .withNewUsername(weirdUserName)\n+                        .withPasswordSecret(new PasswordSecretSourceBuilder()\n+                            .withSecretName(weirdUserName)\n+                            .withPassword(\"password\")\n+                            .build())\n+                    .endKafkaClientAuthenticationScramSha512()\n+                    .addToConfig(\"key.converter.schemas.enable\", false)\n+                    .addToConfig(\"value.converter.schemas.enable\", false)\n+                    .addToConfig(\"key.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                    .addToConfig(\"value.converter\", \"org.apache.kafka.connect.storage.StringConverter\")\n+                    .withVersion(Environment.ST_KAFKA_VERSION)\n+                    .withReplicas(1)\n+                    .withNewTls()\n+                        .withTrustedCertificates(new CertSecretSourceBuilder()\n+                                .withCertificate(\"ca.crt\")\n+                                .withNewSecretName(KafkaResources.clusterCaCertificateSecretName(CLUSTER_NAME))\n+                                .build())\n+                    .endTls()\n+                .endSpec()\n+                .done();\n+\n+        testConnectAuthorizationWithWeirdUserName(weirdUserName, SecurityProtocol.SASL_SSL);\n+    }\n+\n+    void testConnectAuthorizationWithWeirdUserName(String userName, SecurityProtocol securityProtocol) {\n+        String topicName = TOPIC_NAME + rng.nextInt(Integer.MAX_VALUE);\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+        String connectorPodName = kubeClient().listPodsByPrefixInName(CLUSTER_NAME + \"-connect\").get(0).getMetadata().getName();\n+\n+        KafkaConnectorResource.kafkaConnector(CLUSTER_NAME)\n+                .editSpec()\n+                    .withClassName(\"org.apache.kafka.connect.file.FileStreamSinkConnector\")\n+                    .addToConfig(\"topics\", topicName)\n+                    .addToConfig(\"file\", Constants.DEFAULT_SINK_FILE_PATH)\n+                .endSpec().done();\n+\n+        BasicExternalKafkaClient basicExternalKafkaClient = new BasicExternalKafkaClient.Builder()\n+                .withNamespaceName(NAMESPACE)\n+                .withClusterName(CLUSTER_NAME)\n+                .withKafkaUsername(userName)\n+                .withMessageCount(MESSAGE_COUNT)\n+                .withConsumerGroupName(CONSUMER_GROUP_NAME + rng.nextInt(Integer.MAX_VALUE))\n+                .withSecurityProtocol(securityProtocol)\n+                .withTopicName(topicName)\n+                .build();\n+\n+        assertThat(basicExternalKafkaClient.sendMessagesTls(), CoreMatchers.is(MESSAGE_COUNT));", "originalCommit": "5bb6845e834dcfa127b7a14bcc9d1e1b0ea5f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\nindex aa0a6635a0..fd2eee2de3 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/ConnectST.java\n\n@@ -751,11 +752,10 @@ class ConnectST extends BaseST {\n         KafkaConnectUtils.waitForMessagesInKafkaConnectFileSink(connectorPodName, Constants.DEFAULT_SINK_FILE_PATH, \"99\");\n     }\n \n-    @Tag(NODEPORT_SUPPORTED)\n     @Tag(EXTERNAL_CLIENTS_USED)\n     @Tag(CONNECTOR_OPERATOR)\n     @Test\n-    void testConnectTlsAuthWithWeirdUserName() {\n+    void testConnectTlsAuthWithWeirdUserName() throws Exception {\n         // Create weird named user with . and maximum of 64 chars -> TLS\n         String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n         String connectClusterName = \"connect-cluster\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Mjg1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409382850", "bodyText": "indent in InteliJ set preferences -> editor -> code style -> java -> (set everything to 4 |tab size, indent, continuationn indent) to aviod all these 8's idents.", "author": "see-quick", "createdAt": "2020-04-16T08:40:16Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java", "diffHunk": "@@ -129,6 +129,59 @@ void testReceiveSimpleMessageTlsScramSha() throws Exception {\n         assertThat(deleteConsumer(bridgeHost, bridgePort, groupId, name), is(true));\n     }\n \n+    @Test\n+    void testScramShaAuthWithWeirdNamedUser() throws Exception {\n+        String topicName = \"topic\" + rng.nextInt(Integer.MAX_VALUE);\n+        String groupId = \"my-group-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        // Create weird named user with . and more than 64 chars -> SCRAM-SHA\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd.asdasidioiqweioqiweooioqieioqieoqieooi\";\n+\n+        // Create topic\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+        // Create user\n+        KafkaUserResource.scramShaUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        JsonObject config = new JsonObject();\n+        config.put(\"name\", weirdUserName);\n+        config.put(\"format\", \"json\");\n+        config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+\n+        // Create consumer\n+        JsonObject response = createBridgeConsumer(config, bridgeHost, bridgePort, groupId);\n+        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(weirdUserName));\n+\n+        // Create topics json\n+        JsonArray topic = new JsonArray();\n+        topic.add(topicName);\n+        JsonObject topics = new JsonObject();\n+        topics.put(\"topics\", topic);\n+\n+        // Subscribe\n+        assertThat(HttpUtils.subscribeHttpConsumer(topics, bridgeHost, bridgePort, groupId, weirdUserName, client), is(true));\n+\n+        BasicExternalKafkaClient basicExternalKafkaClient = new BasicExternalKafkaClient.Builder()\n+                .withTopicName(topicName)\n+                .withNamespaceName(NAMESPACE)\n+                .withClusterName(CLUSTER_NAME)\n+                .withMessageCount(MESSAGE_COUNT)\n+                .withSecurityProtocol(SecurityProtocol.SASL_SSL)\n+                .withKafkaUsername(weirdUserName)\n+                .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n+                .build();", "originalCommit": "5bb6845e834dcfa127b7a14bcc9d1e1b0ea5f2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ0MDIxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409440219", "bodyText": "thanks for tip :)", "author": "im-konge", "createdAt": "2020-04-16T10:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Mjg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\nindex 35b35bc202..4b8eb62d92 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n\n@@ -170,7 +170,8 @@ class HttpBridgeScramShaST extends HttpBridgeBaseST {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        assertThat(basicExternalKafkaClient.sendMessagesTls(), is(MESSAGE_COUNT));\n+        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n+        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n         // Try to consume messages\n         JsonArray bridgeResponse = HttpUtils.receiveMessagesHttpRequest(bridgeHost, bridgePort, groupId, weirdUserName, client);\n         if (bridgeResponse.size() == 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NDEwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409384106", "bodyText": "I know that you did not write it but is it needed to receive 2 times? @ppatierno  is this behaviour in the Bridge excepted?", "author": "see-quick", "createdAt": "2020-04-16T08:42:22Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java", "diffHunk": "@@ -125,6 +125,59 @@ void testReceiveSimpleMessageTls() throws Exception {\n         assertThat(deleteConsumer(bridgeHost, bridgePort, groupId, USER_NAME), is(true));\n     }\n \n+    @Test\n+    void testTlsAuthWithWeirdNamedUser() throws Exception {\n+        String topicName = \"topic\" + rng.nextInt(Integer.MAX_VALUE);\n+        String groupId = \"my-group-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+\n+        // Create topic\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+        // Create user\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        JsonObject config = new JsonObject();\n+        config.put(\"name\", weirdUserName);\n+        config.put(\"format\", \"json\");\n+        config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+\n+        // Create consumer\n+        JsonObject response = createBridgeConsumer(config, bridgeHost, bridgePort, groupId);\n+        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(weirdUserName));\n+\n+        // Create topics json\n+        JsonArray topic = new JsonArray();\n+        topic.add(topicName);\n+        JsonObject topics = new JsonObject();\n+        topics.put(\"topics\", topic);\n+\n+        // Subscribe\n+        assertThat(HttpUtils.subscribeHttpConsumer(topics, bridgeHost, bridgePort, groupId, weirdUserName, client), is(true));\n+\n+        BasicExternalKafkaClient basicExternalKafkaClient = new BasicExternalKafkaClient.Builder()\n+                .withTopicName(topicName)\n+                .withNamespaceName(NAMESPACE)\n+                .withClusterName(CLUSTER_NAME)\n+                .withMessageCount(MESSAGE_COUNT)\n+                .withSecurityProtocol(SecurityProtocol.SSL)\n+                .withKafkaUsername(weirdUserName)\n+                .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n+                .build();\n+\n+        assertThat(basicExternalKafkaClient.sendMessagesTls(), is(MESSAGE_COUNT));\n+        // Try to consume messages\n+        JsonArray bridgeResponse = HttpUtils.receiveMessagesHttpRequest(bridgeHost, bridgePort, groupId, weirdUserName, client);\n+        if (bridgeResponse.size() == 0) {\n+            // Real consuming\n+            bridgeResponse = HttpUtils.receiveMessagesHttpRequest(bridgeHost, bridgePort, groupId, weirdUserName, client);\n+        }", "originalCommit": "5bb6845e834dcfa127b7a14bcc9d1e1b0ea5f2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxOTExNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r409419115", "bodyText": "This question I had too. So I will be really glad for explanation.", "author": "im-konge", "createdAt": "2020-04-16T09:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NDEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\nindex 4ce41b6c90..45ec78092c 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\n\n@@ -166,7 +165,8 @@ class HttpBridgeTlsST extends HttpBridgeBaseST {\n                 .withConsumerGroupName(CONSUMER_GROUP_NAME + \"-\" + rng.nextInt(Integer.MAX_VALUE))\n                 .build();\n \n-        assertThat(basicExternalKafkaClient.sendMessagesTls(), is(MESSAGE_COUNT));\n+        Future<Integer> producer = basicExternalKafkaClient.sendMessagesTls();\n+        assertThat(producer.get(Constants.GLOBAL_CLIENTS_TIMEOUT, TimeUnit.MILLISECONDS), is(MESSAGE_COUNT));\n         // Try to consume messages\n         JsonArray bridgeResponse = HttpUtils.receiveMessagesHttpRequest(bridgeHost, bridgePort, groupId, weirdUserName, client);\n         if (bridgeResponse.size() == 0) {\n"}}, {"oid": "bb4606e1fc6ad0b7580cf740d4d4590486007a05", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bb4606e1fc6ad0b7580cf740d4d4590486007a05", "message": "add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T14:44:25Z", "type": "commit"}, {"oid": "fc3fd53bea5ad4a7b1dd3d2d2349ff0d65ec8873", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fc3fd53bea5ad4a7b1dd3d2d2349ff0d65ec8873", "message": "fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T14:44:25Z", "type": "commit"}, {"oid": "b85a5ce8664f60432589705bec1445b4c8550ea6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b85a5ce8664f60432589705bec1445b4c8550ea6", "message": "fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T14:44:25Z", "type": "commit"}, {"oid": "e5539f9a227b12b456158ca2bc578c6bfc1a183c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e5539f9a227b12b456158ca2bc578c6bfc1a183c", "message": "fixup! fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T14:44:25Z", "type": "commit"}, {"oid": "b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "message": "fixup! fixup! fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T16:41:14Z", "type": "commit"}, {"oid": "b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "message": "fixup! fixup! fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T16:41:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NjMxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r410376316", "bodyText": "I don't think it makes sense using the weirdUserName for creating a consumer on the bridge, it should be a different test. You are testing the how a KafkaUser username can be weird not the name of the consumer on the bridge. Just use a different simpler name here.", "author": "ppatierno", "createdAt": "2020-04-17T17:46:30Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java", "diffHunk": "@@ -129,6 +129,59 @@ void testReceiveSimpleMessageTlsScramSha() throws Exception {\n         assertThat(deleteConsumer(bridgeHost, bridgePort, groupId, name), is(true));\n     }\n \n+    @Test\n+    void testScramShaAuthWithWeirdNamedUser() throws Exception {\n+        String topicName = \"topic\" + rng.nextInt(Integer.MAX_VALUE);\n+        String groupId = \"my-group-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        // Create weird named user with . and more than 64 chars -> SCRAM-SHA\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd.asdasidioiqweioqiweooioqieioqieoqieooi\";\n+\n+        // Create topic\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+        // Create user\n+        KafkaUserResource.scramShaUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        JsonObject config = new JsonObject();\n+        config.put(\"name\", weirdUserName);", "originalCommit": "b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2616b0348335924442fe6d9fc0e3c543a34f58e", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\nindex 4a3fba875b..be1719e197 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeScramShaST.java\n\n@@ -136,20 +136,23 @@ class HttpBridgeScramShaST extends HttpBridgeBaseST {\n \n         // Create weird named user with . and more than 64 chars -> SCRAM-SHA\n         String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd.asdasidioiqweioqiweooioqieioqieoqieooi\";\n+        // Create user with normal name -> we don't need to set weird name for consumer\n+        String aliceUser = \"alice\";\n \n         // Create topic\n         KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n         // Create user\n         KafkaUserResource.scramShaUser(CLUSTER_NAME, weirdUserName).done();\n+        KafkaUserResource.scramShaUser(CLUSTER_NAME, aliceUser).done();\n \n         JsonObject config = new JsonObject();\n-        config.put(\"name\", weirdUserName);\n+        config.put(\"name\", aliceUser);\n         config.put(\"format\", \"json\");\n         config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n \n         // Create consumer\n         JsonObject response = createBridgeConsumer(config, bridgeHost, bridgePort, groupId);\n-        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(weirdUserName));\n+        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(aliceUser));\n \n         // Create topics json\n         JsonArray topic = new JsonArray();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NjM5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2816#discussion_r410376398", "bodyText": "Ditto as above.", "author": "ppatierno", "createdAt": "2020-04-17T17:46:39Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java", "diffHunk": "@@ -124,6 +125,59 @@ void testReceiveSimpleMessageTls() throws Exception {\n         assertThat(deleteConsumer(bridgeHost, bridgePort, groupId, USER_NAME), is(true));\n     }\n \n+    @Test\n+    void testTlsAuthWithWeirdNamedUser() throws Exception {\n+        String topicName = \"topic\" + rng.nextInt(Integer.MAX_VALUE);\n+        String groupId = \"my-group-\" + rng.nextInt(Integer.MAX_VALUE);\n+\n+        // Create weird named user with . and maximum of 64 chars -> TLS\n+        String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+\n+        // Create topic\n+        KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n+        // Create user\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+\n+        JsonObject config = new JsonObject();\n+        config.put(\"name\", weirdUserName);", "originalCommit": "b0d01a605145aeacdbca98d120a9746ecfdcf8f9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2616b0348335924442fe6d9fc0e3c543a34f58e", "chunk": "diff --git a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\nindex 0b40a23ff3..352152d868 100644\n--- a/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\n+++ b/systemtest/src/test/java/io/strimzi/systemtest/bridge/HttpBridgeTlsST.java\n\n@@ -132,20 +132,23 @@ class HttpBridgeTlsST extends HttpBridgeBaseST {\n \n         // Create weird named user with . and maximum of 64 chars -> TLS\n         String weirdUserName = \"jjglmahyijoambryleyxjjglmahy.ijoambryleyxjjglmahyijoambryleyxasd\";\n+        // Create user with normal name -> we don't need to set weird name for consumer\n+        String aliceUser = \"alice\";\n \n         // Create topic\n         KafkaTopicResource.topic(CLUSTER_NAME, topicName).done();\n         // Create user\n         KafkaUserResource.tlsUser(CLUSTER_NAME, weirdUserName).done();\n+        KafkaUserResource.tlsUser(CLUSTER_NAME, aliceUser).done();\n \n         JsonObject config = new JsonObject();\n-        config.put(\"name\", weirdUserName);\n+        config.put(\"name\", aliceUser);\n         config.put(\"format\", \"json\");\n         config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n \n         // Create consumer\n         JsonObject response = createBridgeConsumer(config, bridgeHost, bridgePort, groupId);\n-        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(weirdUserName));\n+        assertThat(\"Consumer wasn't created correctly\", response.getString(\"instance_id\"), is(aliceUser));\n \n         // Create topics json\n         JsonArray topic = new JsonArray();\n"}}, {"oid": "f2616b0348335924442fe6d9fc0e3c543a34f58e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f2616b0348335924442fe6d9fc0e3c543a34f58e", "message": "fixup! fixup! fixup! fixup! fixup! add tests for weird usernames of KafkaUsers\n\nSigned-off-by: Lukas Kral <lkral@redhat.com>", "committedDate": "2020-04-17T20:09:09Z", "type": "commit"}]}