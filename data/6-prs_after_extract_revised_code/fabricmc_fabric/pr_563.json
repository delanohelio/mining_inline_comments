{"pr_number": 563, "pr_title": "Add a hook for BuiltinModelItemRenderer", "pr_createdAt": "2020-04-10T22:12:24Z", "pr_url": "https://github.com/FabricMC/fabric/pull/563", "timeline": [{"oid": "fe53acce974b25dcfb493f880a99318964589357", "url": "https://github.com/FabricMC/fabric/commit/fe53acce974b25dcfb493f880a99318964589357", "message": "Add builtin item renderers\n\nCloses #488.", "committedDate": "2020-04-10T22:10:46Z", "type": "commit"}, {"oid": "71565c5db6cbc40da74bb99e68b555de3a457fef", "url": "https://github.com/FabricMC/fabric/commit/71565c5db6cbc40da74bb99e68b555de3a457fef", "message": "Bump fabric-rendering-v1 to 1.0.0", "committedDate": "2020-04-10T22:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjA4NQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966085", "bodyText": "I personally think this should be abstract but it won't break anything if it weren't.", "author": "i509VCB", "createdAt": "2020-04-10T22:17:55Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {", "originalCommit": "fe53acce974b25dcfb493f880a99318964589357", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\nindex 1e39a00e..512004b6 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\n\n@@ -14,13 +14,14 @@ import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n \n @Mixin(BuiltinModelItemRenderer.class)\n-class MixinBuiltinModelItemRenderer {\n-\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n \tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {\n \t\tBuiltinItemRenderer renderer = BuiltinItemRendererRegistryImpl.getRenderer(stack.getItem());\n \n \t\tif (renderer != null) {\n \t\t\trenderer.render(stack, matrices, vertexConsumers, light, overlay);\n+\t\t\tinfo.cancel();\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjI3Nw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966277", "bodyText": "The impl will throw an exception if the item render is already registered to the item. I would recommend documenting that functionality", "author": "i509VCB", "createdAt": "2020-04-10T22:18:49Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;\n+\n+\t/**\n+\t * Registers the renderer for the item.\n+\t *\n+\t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n+\t *\n+\t * @param item the item\n+\t * @param renderer the renderer\n+\t */\n+\tvoid register(Item item, BuiltinItemRenderer renderer);", "originalCommit": "fe53acce974b25dcfb493f880a99318964589357", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\nindex 63bb9395..66fbf5c4 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n\n@@ -18,8 +18,9 @@ public interface BuiltinItemRendererRegistry {\n \t *\n \t * <p>Note that the item's JSON model must also extend {@code minecraft:builtin/entity}.\n \t *\n-\t * @param item the item\n+\t * @param item     the item\n \t * @param renderer the renderer\n+\t * @throws IllegalArgumentException if the item already has a registered renderer\n \t */\n \tvoid register(Item item, BuiltinItemRenderer renderer);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966681", "bodyText": "I would recommend spitting out the Identifier this item is registered under rather than potentially having a jumbled mess.\nIf it isn't in the registry then obviously throw that as well", "author": "i509VCB", "createdAt": "2020-04-10T22:20:19Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");", "originalCommit": "71565c5db6cbc40da74bb99e68b555de3a457fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE2Mg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968162", "bodyText": "Item.toString() already gets the registry ID, though I guess make it get the ID directly.", "author": "Juuxel", "createdAt": "2020-04-10T22:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODI4Mg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968282", "bodyText": "Hmm if it does already then that is fine", "author": "i509VCB", "createdAt": "2020-04-10T22:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3ODk4Nw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406978987", "bodyText": "I made it use Registry.getId anyway because vanilla only returns the path for some reason.", "author": "Juuxel", "createdAt": "2020-04-10T23:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex 507e6ef4..ab196777 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -4,6 +4,7 @@ import java.util.HashMap;\n import java.util.Map;\n \n import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjkyNQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406966925", "bodyText": "We don't have annotations yet for nullability we agree on, so a simple /* NULLABLE */ comment would be nice for when we go back to manage these", "author": "i509VCB", "createdAt": "2020-04-10T22:21:31Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + item + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);\n+\t}\n+\n+\tpublic static BuiltinItemRenderer getRenderer(Item item) {", "originalCommit": "71565c5db6cbc40da74bb99e68b555de3a457fef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex 507e6ef4..ab196777 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -4,6 +4,7 @@ import java.util.HashMap;\n import java.util.Map;\n \n import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968156", "bodyText": "Hmm, should this injection be at head and return early instead? I don't see a point of having it in tail (i.e. waiting for all the vanilla if branch checks)", "author": "liach", "createdAt": "2020-04-10T22:26:19Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "originalCommit": "71565c5db6cbc40da74bb99e68b555de3a457fef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODUzNA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968534", "bodyText": "Yeah, that seems good.", "author": "Juuxel", "createdAt": "2020-04-10T22:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODU1OQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968559", "bodyText": "Well that definitely branches onto an argument of, what if someone wanted to replace a built-in renderer for vanilla items, i.e. change the shulker box model", "author": "i509VCB", "createdAt": "2020-04-10T22:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\nindex 1e39a00e..512004b6 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java\n\n@@ -14,13 +14,14 @@ import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n \n @Mixin(BuiltinModelItemRenderer.class)\n-class MixinBuiltinModelItemRenderer {\n-\t@Inject(method = \"render\", at = @At(\"RETURN\"))\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n \tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {\n \t\tBuiltinItemRenderer renderer = BuiltinItemRendererRegistryImpl.getRenderer(stack.getItem());\n \n \t\tif (renderer != null) {\n \t\t\trenderer.render(stack, matrices, vertexConsumers, light, overlay);\n+\t\t\tinfo.cancel();\n \t\t}\n \t}\n }\n"}}, {"oid": "b9703cf73c04c87d9aa845885bf2346b2b913685", "url": "https://github.com/FabricMC/fabric/commit/b9703cf73c04c87d9aa845885bf2346b2b913685", "message": "Code review", "committedDate": "2020-04-10T22:28:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODkxMg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406968912", "bodyText": "Oops license", "author": "liach", "createdAt": "2020-04-10T22:29:21Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;", "originalCommit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTg3Nw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969877", "bodyText": "Oh, oops... There are so many code style things when working with Fabric API \ud83d\ude04", "author": "Juuxel", "createdAt": "2020-04-10T22:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\nindex 644b0dc4..fe46b1a8 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\n\n@@ -17,5 +17,14 @@ import net.fabricmc.api.Environment;\n @Environment(EnvType.CLIENT)\n @FunctionalInterface\n public interface BuiltinItemRenderer {\n+\t/**\n+\t * Renders an item stack.\n+\t *\n+\t * @param stack           the rendered item stack\n+\t * @param matrices        the matrix stack\n+\t * @param vertexConsumers the vertex consumer provider\n+\t * @param light           the color light multiplier at the rendering position\n+\t * @param overlay         the overlay UV passed to {@link net.minecraft.client.render.VertexConsumer#overlay(int)}\n+\t */\n \tvoid render(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTA3Mw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969073", "bodyText": "Mind document this method (esp. parameters of light, overlay to show they are rgb)", "author": "liach", "createdAt": "2020-04-10T22:30:05Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {\n+\tvoid render(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay);", "originalCommit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\nindex 644b0dc4..fe46b1a8 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java\n\n@@ -17,5 +17,14 @@ import net.fabricmc.api.Environment;\n @Environment(EnvType.CLIENT)\n @FunctionalInterface\n public interface BuiltinItemRenderer {\n+\t/**\n+\t * Renders an item stack.\n+\t *\n+\t * @param stack           the rendered item stack\n+\t * @param matrices        the matrix stack\n+\t * @param vertexConsumers the vertex consumer provider\n+\t * @param light           the color light multiplier at the rendering position\n+\t * @param overlay         the overlay UV passed to {@link net.minecraft.client.render.VertexConsumer#overlay(int)}\n+\t */\n \tvoid render(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969209", "bodyText": "Maybe note that this is how to get a renderer (some people have asked such questions on discord before)", "author": "liach", "createdAt": "2020-04-10T22:30:36Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.item.Item;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+/**\n+ * This registry holds {@linkplain BuiltinItemRenderer builtin item renderers} for items.\n+ */\n+@Environment(EnvType.CLIENT)\n+public interface BuiltinItemRendererRegistry {\n+\tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;", "originalCommit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDMwNg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406970306", "bodyText": "It's not how to get a renderer, though; that's not exposed in the API.", "author": "Juuxel", "createdAt": "2020-04-10T22:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MDY2OA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406970668", "bodyText": "Oh, I mean how to get a renderer registry \ud83d\ude05", "author": "liach", "createdAt": "2020-04-10T22:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\nindex 66fbf5c4..c76751c7 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n\n@@ -11,6 +11,10 @@ import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl\n  */\n @Environment(EnvType.CLIENT)\n public interface BuiltinItemRendererRegistry {\n+\t/**\n+\t * The singleton instance of the renderer registry.\n+\t * Use this instance to call the methods in this interface.\n+\t */\n \tBuiltinItemRendererRegistry INSTANCE = BuiltinItemRendererRegistryImpl.INSTANCE;\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2OTQ3OA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r406969478", "bodyText": "Can just do\n\t\tif (RENDERERS.put(item, renderer) != null) {\n\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n\t\t}", "author": "liach", "createdAt": "2020-04-10T22:31:49Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tif (RENDERERS.containsKey(item)) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n+\t\t}\n+\n+\t\tRENDERERS.put(item, renderer);", "originalCommit": "b9703cf73c04c87d9aa845885bf2346b2b913685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e5f1d022ba820ea9a26f4348572324a8e247125", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex ab196777..9432fc3a 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -19,11 +19,9 @@ public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegist\n \n \t@Override\n \tpublic void register(Item item, BuiltinItemRenderer renderer) {\n-\t\tif (RENDERERS.containsKey(item)) {\n+\t\tif (RENDERERS.put(item, renderer) != null) {\n \t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n \t\t}\n-\n-\t\tRENDERERS.put(item, renderer);\n \t}\n \n \t/* @Nullable */\n"}}, {"oid": "d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "url": "https://github.com/FabricMC/fabric/commit/d5f1bf04a2a0b4a3f842e7b0c9facf5a9a931267", "message": "Add comments", "committedDate": "2020-04-10T22:45:32Z", "type": "commit"}, {"oid": "9e5f1d022ba820ea9a26f4348572324a8e247125", "url": "https://github.com/FabricMC/fabric/commit/9e5f1d022ba820ea9a26f4348572324a8e247125", "message": "Code review II\n\nCo-authored-by: liach <liach@users.noreply.github.com>", "committedDate": "2020-04-10T22:47:25Z", "type": "commit"}, {"oid": "1d88f325efc73f1334da19dc9e906dd25f3272ea", "url": "https://github.com/FabricMC/fabric/commit/1d88f325efc73f1334da19dc9e906dd25f3272ea", "message": "Add missing license headers", "committedDate": "2020-04-10T22:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODg3MQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098871", "bodyText": "Im really not a fan of using enums for singletons.", "author": "modmuss50", "createdAt": "2020-04-11T19:01:11Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tINSTANCE;", "originalCommit": "1d88f325efc73f1334da19dc9e906dd25f3272ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODk0Nw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r407098947", "bodyText": "It should be fine as this is an implementation detail (not exposed in the API)", "author": "liach", "createdAt": "2020-04-11T19:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fae020880680eafd6d241f51683c0ee7cc2fdef8", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex c5434085..f18647a5 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -28,11 +28,14 @@ import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n \n @Environment(EnvType.CLIENT)\n-public enum BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n-\tINSTANCE;\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n \n \tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n \n+\tprivate BuiltinItemRendererRegistryImpl() {\n+\t}\n+\n \t@Override\n \tpublic void register(Item item, BuiltinItemRenderer renderer) {\n \t\tif (RENDERERS.put(item, renderer) != null) {\n"}}, {"oid": "fae020880680eafd6d241f51683c0ee7cc2fdef8", "url": "https://github.com/FabricMC/fabric/commit/fae020880680eafd6d241f51683c0ee7cc2fdef8", "message": "Switch to ugly class singletons", "committedDate": "2020-04-12T00:07:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTUxMw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r408389513", "bodyText": "Would an IdentityHashMap do better over a hash map here? (unsure so some explanation would be nice)", "author": "i509VCB", "createdAt": "2020-04-14T19:42:19Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();", "originalCommit": "fae020880680eafd6d241f51683c0ee7cc2fdef8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMDgwOQ==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r408520809", "bodyText": "don't think identity matters that much here", "author": "liach", "createdAt": "2020-04-15T00:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4OTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "23d9eb8a60450751e99e9230db67effbe306094c", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex f18647a5..477e0cff 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -18,6 +18,7 @@ package net.fabricmc.fabric.impl.client.rendering;\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n \n import net.minecraft.item.Item;\n import net.minecraft.util.registry.Registry;\n"}}, {"oid": "23d9eb8a60450751e99e9230db67effbe306094c", "url": "https://github.com/FabricMC/fabric/commit/23d9eb8a60450751e99e9230db67effbe306094c", "message": "Add null checks to BuiltinItemRendererRegistry.register", "committedDate": "2020-04-22T10:13:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjQwNg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412876406", "bodyText": "Someone could deliberately overwrite one by catching the IllegalArgumentException. Maybe this is sensible, or maybe not. I would expect mods to be able to overwrite existing entries if they want to deliberately do that.", "author": "immibis", "createdAt": "2020-04-22T10:49:08Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.client.rendering;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import net.minecraft.item.Item;\n+import net.minecraft.util.registry.Registry;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;\n+\n+@Environment(EnvType.CLIENT)\n+public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {\n+\tpublic static final BuiltinItemRendererRegistryImpl INSTANCE = new BuiltinItemRendererRegistryImpl();\n+\n+\tprivate static final Map<Item, BuiltinItemRenderer> RENDERERS = new HashMap<>();\n+\n+\tprivate BuiltinItemRendererRegistryImpl() {\n+\t}\n+\n+\t@Override\n+\tpublic void register(Item item, BuiltinItemRenderer renderer) {\n+\t\tObjects.requireNonNull(item, \"item is null\");\n+\t\tObjects.requireNonNull(renderer, \"renderer is null\");\n+\n+\t\tif (RENDERERS.put(item, renderer) != null) {\n+\t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");", "originalCommit": "23d9eb8a60450751e99e9230db67effbe306094c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4ODEyNA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412888124", "bodyText": "I separated the check and put call.", "author": "Juuxel", "createdAt": "2020-04-22T11:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "c499b51a4e26f1ea1f26afd843838b07841447d1", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\nindex 477e0cff..348708a7 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java\n\n@@ -42,9 +42,11 @@ public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendere\n \t\tObjects.requireNonNull(item, \"item is null\");\n \t\tObjects.requireNonNull(renderer, \"renderer is null\");\n \n-\t\tif (RENDERERS.put(item, renderer) != null) {\n+\t\tif (RENDERERS.containsKey(item)) {\n \t\t\tthrow new IllegalArgumentException(\"Item \" + Registry.ITEM.getId(item) + \" already has a builtin renderer!\");\n \t\t}\n+\n+\t\tRENDERERS.put(item, renderer);\n \t}\n \n \t/* @Nullable */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877028", "bodyText": "The name \"builtin\" makes me think you are talking about vanilla rendering code. Like \"builtin\" vs \"modded\"", "author": "immibis", "createdAt": "2020-04-22T10:50:17Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRenderer.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+\n+/**\n+ * Builtin item renderers render items with custom code.\n+ * They allow using non-model rendering, such as BERs, for items.\n+ *\n+ * <p>An item with a builtin renderer must have a model extending {@code minecraft:builtin/entity}.\n+ * The renderers are registered with {@link BuiltinItemRendererRegistry#register}.\n+ */\n+@Environment(EnvType.CLIENT)\n+@FunctionalInterface\n+public interface BuiltinItemRenderer {", "originalCommit": "23d9eb8a60450751e99e9230db67effbe306094c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTYzNg==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412879636", "bodyText": "It comes from the Yarn name, which matches the model identifier builtin/entity.", "author": "Juuxel", "createdAt": "2020-04-22T10:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDI5Ng==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412880296", "bodyText": "Fair enough.", "author": "immibis", "createdAt": "2020-04-22T10:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzAyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzcyMw==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412877723", "bodyText": "I thought the purpose of Fabric API was to provide shared hooks where necessary to stop mods from conflicting or where mixins are impractical? This looks like an easy non-conflicting mixin for individual mods. Is it just for performance?", "author": "immibis", "createdAt": "2020-04-22T10:51:20Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/mixin/client/rendering/MixinBuiltinModelItemRenderer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.client.rendering;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.item.BuiltinModelItemRenderer;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.item.ItemStack;\n+\n+import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;\n+import net.fabricmc.fabric.impl.client.rendering.BuiltinItemRendererRegistryImpl;\n+\n+@Mixin(BuiltinModelItemRenderer.class)\n+abstract class MixinBuiltinModelItemRenderer {\n+\t@Inject(method = \"render\", at = @At(\"HEAD\"), cancellable = true)\n+\tprivate void fabric_onRender(ItemStack stack, MatrixStack matrices, VertexConsumerProvider vertexConsumers, int light, int overlay, CallbackInfo info) {", "originalCommit": "23d9eb8a60450751e99e9230db67effbe306094c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3OTQ3MA==", "url": "https://github.com/FabricMC/fabric/pull/563#discussion_r412879470", "bodyText": "Fabric API should also cater to cases that are required by a large number of mods.", "author": "modmuss50", "createdAt": "2020-04-22T10:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzcyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c499b51a4e26f1ea1f26afd843838b07841447d1", "url": "https://github.com/FabricMC/fabric/commit/c499b51a4e26f1ea1f26afd843838b07841447d1", "message": "Protect against overwriting others' renderers by catching exceptions", "committedDate": "2020-04-22T11:08:27Z", "type": "commit"}]}