{"pr_number": 828, "pr_title": "Add ability to define default attributes and spawn restirctions within the entity type builder.", "pr_createdAt": "2020-06-19T19:35:20Z", "pr_url": "https://github.com/FabricMC/fabric/pull/828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAxNTAwNA==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r443015004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>For your convenience, this can also be done on the {@link FabricEntityTypeBuilder} to simplify of the building process.\n          \n          \n            \n            \t * <p>For convenience, this can also be done on the {@link FabricEntityTypeBuilder} to simplify of the building process.", "author": "Pyrofab", "createdAt": "2020-06-19T19:41:33Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java", "diffHunk": "@@ -55,8 +57,11 @@\n \t * <p>If a registration overrides another, a debug log message will be emitted. Existing registrations\n \t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n \t *\n+\t * <p>For your convenience, this can also be done on the {@link FabricEntityTypeBuilder} to simplify of the building process.", "originalCommit": "14c11269c1c2d2b751042ae691519e4f2fec62d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "172d243536c5472502caa1cf1dfbb0f7d136712a", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java\nindex 364e2156..fbe64688 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java\n\n@@ -57,7 +57,7 @@ public final class FabricDefaultAttributeRegistry {\n \t * <p>If a registration overrides another, a debug log message will be emitted. Existing registrations\n \t * can be checked at {@link net.minecraft.entity.attribute.DefaultAttributeRegistry#hasDefinitionFor(EntityType)}.</p>\n \t *\n-\t * <p>For your convenience, this can also be done on the {@link FabricEntityTypeBuilder} to simplify of the building process.\n+\t * <p>For convenience, this can also be done on the {@link FabricEntityTypeBuilder} to simplify of the building process.\n \t *\n \t * @param type    the entity type\n \t * @param builder the builder that creates the default attribute\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAxNTMyMQ==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r443015321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p>This should not be called if your entity is not a {@link LivingEntity}.\n          \n          \n            \n            \t * <p>This should not be called if the entity type being built does not correspond to a {@link LivingEntity}.", "author": "Pyrofab", "createdAt": "2020-06-19T19:42:21Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java", "diffHunk": "@@ -148,6 +154,27 @@ protected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactor\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the default attributes for a type of living entity.\n+\t *\n+\t * <p>This should not be called if your entity is not a {@link LivingEntity}.", "originalCommit": "14c11269c1c2d2b751042ae691519e4f2fec62d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAxODAwMg==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r443018002", "bodyText": "does not correspond to does sound a bit odd to me but it's dictionary meaning here makes sense.", "author": "i509VCB", "createdAt": "2020-06-19T19:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAxNTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\nindex c0e3baa8..be9393b3 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n\n@@ -154,27 +239,6 @@ public class FabricEntityTypeBuilder<T extends Entity> {\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Sets the default attributes for a type of living entity.\n-\t *\n-\t * <p>This should not be called if your entity is not a {@link LivingEntity}.\n-\t *\n-\t * <p>This can be used in a fashion similar to this:\n-\t * <blockquote><pre>\n-\t * FabricEntityTypeBuilder.create(SpawnGroup.CREATURE, MyCreature::new)\n-\t * \t.defaultAttributes(LivingEntity::createLivingAttributes)\n-\t * \t...\n-\t * \t.build();\n-\t * </pre></blockquote>\n-\t *\n-\t * @param defaultAttributeBuilder a function to generate the default attribute builder from the entity type\n-\t * @return this builder for chaining\n-\t */\n-\tpublic FabricEntityTypeBuilder<T> defaultAttributes(Supplier<DefaultAttributeContainer.Builder> defaultAttributeBuilder) {\n-\t\tthis.defaultAttributeBuilder = defaultAttributeBuilder;\n-\t\treturn this;\n-\t}\n-\n \t/**\n \t * Creates the entity type.\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNTc0NA==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r443025744", "bodyText": "We really need some mechanism to properly handle registration of living vs non living entities.", "author": "liach", "createdAt": "2020-06-19T20:13:30Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java", "diffHunk": "@@ -148,6 +154,27 @@ protected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactor\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * Sets the default attributes for a type of living entity.\n+\t *\n+\t * <p>This should not be called if your entity is not a {@link LivingEntity}.\n+\t *\n+\t * <p>This can be used in a fashion similar to this:\n+\t * <blockquote><pre>\n+\t * FabricEntityTypeBuilder.create(SpawnGroup.CREATURE, MyCreature::new)\n+\t * \t.defaultAttributes(LivingEntity::createLivingAttributes)\n+\t * \t...\n+\t * \t.build();\n+\t * </pre></blockquote>\n+\t *\n+\t * @param defaultAttributeBuilder a function to generate the default attribute builder from the entity type\n+\t * @return this builder for chaining\n+\t */\n+\tpublic FabricEntityTypeBuilder<T> defaultAttributes(Supplier<DefaultAttributeContainer.Builder> defaultAttributeBuilder) {\n+\t\tthis.defaultAttributeBuilder = defaultAttributeBuilder;", "originalCommit": "e54dc80801a65e12cf0d27323d4818264f11aba9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNjgxNg==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r443026816", "bodyText": "Currently I don't register if they don't call this method.\nThe only ways I see being able to test this is creating a dummy world, creating a dummy entity and doing an instanceof or a bunch of reflection", "author": "i509VCB", "createdAt": "2020-06-19T20:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAyNTc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\nindex c0e3baa8..be9393b3 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n\n@@ -154,27 +239,6 @@ public class FabricEntityTypeBuilder<T extends Entity> {\n \t\treturn this;\n \t}\n \n-\t/**\n-\t * Sets the default attributes for a type of living entity.\n-\t *\n-\t * <p>This should not be called if your entity is not a {@link LivingEntity}.\n-\t *\n-\t * <p>This can be used in a fashion similar to this:\n-\t * <blockquote><pre>\n-\t * FabricEntityTypeBuilder.create(SpawnGroup.CREATURE, MyCreature::new)\n-\t * \t.defaultAttributes(LivingEntity::createLivingAttributes)\n-\t * \t...\n-\t * \t.build();\n-\t * </pre></blockquote>\n-\t *\n-\t * @param defaultAttributeBuilder a function to generate the default attribute builder from the entity type\n-\t * @return this builder for chaining\n-\t */\n-\tpublic FabricEntityTypeBuilder<T> defaultAttributes(Supplier<DefaultAttributeContainer.Builder> defaultAttributeBuilder) {\n-\t\tthis.defaultAttributeBuilder = defaultAttributeBuilder;\n-\t\treturn this;\n-\t}\n-\n \t/**\n \t * Creates the entity type.\n \t *\n"}}, {"oid": "e399c8dfe2334e5a3536202d185d6301fc994b41", "url": "https://github.com/FabricMC/fabric/commit/e399c8dfe2334e5a3536202d185d6301fc994b41", "message": "Add ability to define default attributes within the entity type builder.", "committedDate": "2020-06-26T02:34:55Z", "type": "commit"}, {"oid": "172d243536c5472502caa1cf1dfbb0f7d136712a", "url": "https://github.com/FabricMC/fabric/commit/172d243536c5472502caa1cf1dfbb0f7d136712a", "message": "Update fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricDefaultAttributeRegistry.java\n\nCo-authored-by: Pyrofab <redstoneinfire@gmail.com>", "committedDate": "2020-06-26T02:34:55Z", "type": "commit"}, {"oid": "f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "url": "https://github.com/FabricMC/fabric/commit/f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "message": "Add ability to specify spawn restriction. Add a Living and Mob builder to handle attributes and spawn restrictions seperately from default builder.", "committedDate": "2020-06-26T02:34:56Z", "type": "commit"}, {"oid": "f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "url": "https://github.com/FabricMC/fabric/commit/f41f1a73b5a1873c92c056db7c9509ab9e78ef21", "message": "Add ability to specify spawn restriction. Add a Living and Mob builder to handle attributes and spawn restrictions seperately from default builder.", "committedDate": "2020-06-26T02:34:56Z", "type": "forcePushed"}, {"oid": "ae14f8901a78de3f44e1dedef0b9089519d43af8", "url": "https://github.com/FabricMC/fabric/commit/ae14f8901a78de3f44e1dedef0b9089519d43af8", "message": "Let's not cast like a maniac", "committedDate": "2020-06-26T02:41:51Z", "type": "commit"}, {"oid": "a54748c9afc4f9fc544bfe4673a0a734eccdfe01", "url": "https://github.com/FabricMC/fabric/commit/a54748c9afc4f9fc544bfe4673a0a734eccdfe01", "message": "Add misc overloads for living builder", "committedDate": "2020-06-26T02:50:25Z", "type": "commit"}, {"oid": "2beee40c9d0626909182ef5743c7f7ec53494f83", "url": "https://github.com/FabricMC/fabric/commit/2beee40c9d0626909182ef5743c7f7ec53494f83", "message": "Add a few null checks", "committedDate": "2020-06-26T02:53:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODEwNw==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r448808107", "bodyText": "Is this a reasonable default ? It would probably lead to a lot of modded entities being unable to be summoned without authors realizing it.", "author": "Pyrofab", "createdAt": "2020-07-02T07:40:25Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java", "diffHunk": "@@ -63,7 +100,7 @@ protected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactor\n \t * @return a new entity type builder\n \t */\n \tpublic static <T extends Entity> FabricEntityTypeBuilder<T> create(SpawnGroup spawnGroup) {\n-\t\treturn new FabricEntityTypeBuilder<>(spawnGroup, (t, w) -> null);\n+\t\treturn create(spawnGroup, FabricEntityTypeBuilder::empty);", "originalCommit": "2beee40c9d0626909182ef5743c7f7ec53494f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyMDE1MA==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r448820150", "bodyText": "That's also the current behaviour of the method, so changing it could break existing mods.", "author": "Juuxel", "createdAt": "2020-07-02T08:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMDgxNQ==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r449120815", "bodyText": "I realize that, but maybe this PR is a good opportunity to deprecate this default.", "author": "Pyrofab", "createdAt": "2020-07-02T16:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "efff918932a474434f86c3cfa40d2b70564325ce", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\nindex d4379a57..77c06af5 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n\n@@ -107,13 +107,13 @@ public class FabricEntityTypeBuilder<T extends Entity> {\n \t * Creates an entity type builder.\n \t *\n \t * @param spawnGroup the entity spawn group\n-\t * @param function the entity function used to create this entity\n+\t * @param factory the entity factory used to create this entity\n \t * @param <T> the type of entity\n \t *\n \t * @return a new entity type builder\n \t */\n-\tpublic static <T extends Entity> FabricEntityTypeBuilder<T> create(SpawnGroup spawnGroup, EntityType.EntityFactory<T> function) {\n-\t\treturn new FabricEntityTypeBuilder<>(spawnGroup, function);\n+\tpublic static <T extends Entity> FabricEntityTypeBuilder<T> create(SpawnGroup spawnGroup, EntityType.EntityFactory<T> factory) {\n+\t\treturn new FabricEntityTypeBuilder<>(spawnGroup, factory);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwOTQ3Mw==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r454209473", "bodyText": "function -> factory\nSince this is for a builder, it is quite odd to have several overloads here. Is this a limitation of the vanilla API or can these extra properties be moved to the builders?", "author": "sfPlayer1", "createdAt": "2020-07-14T08:59:49Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java", "diffHunk": "@@ -54,6 +64,33 @@ protected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactor\n \t\tthis.spawnableFarFromPlayer = spawnGroup == SpawnGroup.CREATURE || spawnGroup == SpawnGroup.MISC;\n \t}\n \n+\t/**\n+\t * Creates an entity type builder.\n+\t *\n+\t * <p>This entity's spawn group will automatically be set to {@link SpawnGroup#MISC}.\n+\t *\n+\t * @param <T> the type of entity\n+\t *\n+\t * @return a new entity type builder\n+\t */\n+\tpublic static <T extends Entity> FabricEntityTypeBuilder<T> create() {\n+\t\treturn create(SpawnGroup.MISC);\n+\t}\n+\n+\t/**\n+\t * Creates an entity type builder.\n+\t *\n+\t * <p>This entity's spawn group will automatically be set to {@link SpawnGroup#MISC}.\n+\t *\n+\t * @param function the entity function used to create this entity\n+\t * @param <T> the type of entity\n+\t *\n+\t * @return a new entity type builder\n+\t */\n+\tpublic static <T extends Entity> FabricEntityTypeBuilder<T> create(EntityType.EntityFactory<T> function) {", "originalCommit": "2beee40c9d0626909182ef5743c7f7ec53494f83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc1OTgyMw==", "url": "https://github.com/FabricMC/fabric/pull/828#discussion_r454759823", "bodyText": "EntityFactory could probably be a builder method, will need to keep old options for deprecation of course", "author": "i509VCB", "createdAt": "2020-07-15T02:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwOTQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "efff918932a474434f86c3cfa40d2b70564325ce", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\nindex d4379a57..77c06af5 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/api/object/builder/v1/entity/FabricEntityTypeBuilder.java\n\n@@ -58,9 +58,9 @@ public class FabricEntityTypeBuilder<T extends Entity> {\n \tprivate EntityDimensions dimensions = EntityDimensions.changing(-1.0f, -1.0f);\n \tprivate ImmutableSet<Block> specificSpawnBlocks = ImmutableSet.of();\n \n-\tprotected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactory<T> function) {\n+\tprotected FabricEntityTypeBuilder(SpawnGroup spawnGroup, EntityType.EntityFactory<T> factory) {\n \t\tthis.spawnGroup = spawnGroup;\n-\t\tthis.function = function;\n+\t\tthis.factory = factory;\n \t\tthis.spawnableFarFromPlayer = spawnGroup == SpawnGroup.CREATURE || spawnGroup == SpawnGroup.MISC;\n \t}\n \n"}}, {"oid": "efff918932a474434f86c3cfa40d2b70564325ce", "url": "https://github.com/FabricMC/fabric/commit/efff918932a474434f86c3cfa40d2b70564325ce", "message": "Allow factory to be defined in builder", "committedDate": "2020-07-15T03:06:48Z", "type": "commit"}, {"oid": "75c96592e922d898d97a6acd5c5696a8463bef62", "url": "https://github.com/FabricMC/fabric/commit/75c96592e922d898d97a6acd5c5696a8463bef62", "message": "Make spawn group a builder parameter", "committedDate": "2020-08-03T02:19:48Z", "type": "commit"}]}