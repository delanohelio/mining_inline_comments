{"pr_number": 1108, "pr_title": "Cache the fuel time map in the fuel registry", "pr_createdAt": "2020-10-02T08:57:00Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1108", "timeline": [{"oid": "fb97ec351de751e914f23db533a4292aef553157", "url": "https://github.com/FabricMC/fabric/commit/fb97ec351de751e914f23db533a4292aef553157", "message": "Cache the fuel time map in the fuel registry", "committedDate": "2020-10-02T08:25:40Z", "type": "commit"}, {"oid": "d0a33bddf2924e76309146da9d6de04246e1f4e1", "url": "https://github.com/FabricMC/fabric/commit/d0a33bddf2924e76309146da9d6de04246e1f4e1", "message": "Use a faster map for the fuel times", "committedDate": "2020-10-02T08:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MTU3Mw==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498741573", "bodyText": "Have you tested if this event is emitted on a client when it receives the tags on game-join from the server?\n@i509VCB Since you are the event-master, do you know this off the top of your head?", "author": "shartte", "createdAt": "2020-10-02T10:28:12Z", "path": "fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/impl/content/registry/FuelRegistryImpl.java", "diffHunk": "@@ -36,12 +38,26 @@\n \tprivate static final Logger LOGGER = LogManager.getLogger();\n \tprivate final Object2IntMap<ItemConvertible> itemCookTimes = new Object2IntLinkedOpenHashMap<>();\n \tprivate final Object2IntMap<Tag<Item>> tagCookTimes = new Object2IntLinkedOpenHashMap<>();\n+\tprivate Object2IntMap<Item> fuelTimeMap;\n+\tprivate boolean fuelTimeMapNeedsUpdate = true;\n \n-\tpublic FuelRegistryImpl() { }\n+\tpublic FuelRegistryImpl() {\n+\t\tServerLifecycleEvents.END_DATA_PACK_RELOAD.register((server, serverResourceManager, success) -> {", "originalCommit": "d0a33bddf2924e76309146da9d6de04246e1f4e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MzM4NQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498783385", "bodyText": "It doesn't, but 824377e addresses this issue!", "author": "Technici4n", "createdAt": "2020-10-02T12:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MTU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "824377e72cd948a48c898e4ed584d17681d0ab25", "chunk": "diff --git a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/impl/content/registry/FuelRegistryImpl.java b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/impl/content/registry/FuelRegistryImpl.java\nindex 6a82bc22..40839720 100644\n--- a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/impl/content/registry/FuelRegistryImpl.java\n+++ b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/impl/content/registry/FuelRegistryImpl.java\n\n@@ -41,13 +40,7 @@ public class FuelRegistryImpl implements FuelRegistry {\n \tprivate Object2IntMap<Item> fuelTimeMap;\n \tprivate boolean fuelTimeMapNeedsUpdate = true;\n \n-\tpublic FuelRegistryImpl() {\n-\t\tServerLifecycleEvents.END_DATA_PACK_RELOAD.register((server, serverResourceManager, success) -> {\n-\t\t\tif (success) {\n-\t\t\t\tfuelTimeMapNeedsUpdate = true;\n-\t\t\t}\n-\t\t});\n-\t}\n+\tpublic FuelRegistryImpl() { }\n \n \t@Override\n \t@SuppressWarnings(\"deprecation\")\n"}}, {"oid": "824377e72cd948a48c898e4ed584d17681d0ab25", "url": "https://github.com/FabricMC/fabric/commit/824377e72cd948a48c898e4ed584d17681d0ab25", "message": "Rebuild the fuel times map on the client side too", "committedDate": "2020-10-02T12:12:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5ODE4NA==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498798184", "bodyText": "Can't all of these turn into 1 single mixin at AbstractFurnaceBlockEntity#createFuelTimeMap returning the cached map?", "author": "shedaniel", "createdAt": "2020-10-02T12:45:35Z", "path": "fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java", "diffHunk": "@@ -34,4 +36,19 @@\n \tprivate static void fuelTimeMapHook(CallbackInfoReturnable<Map<Item, Integer>> info) {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"canUseAsFuel\", cancellable = true)\n+\tprivate static void canUseAsFuelHook(ItemStack stack, CallbackInfoReturnable<Boolean> info) {\n+\t\tinfo.setReturnValue(FuelRegistry.INSTANCE.get(stack.getItem()) != null);\n+\t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"getFuelTime\", cancellable = true)\n+\tprotected void getFuelTimeHook(ItemStack fuel, CallbackInfoReturnable<Integer> info) {", "originalCommit": "824377e72cd948a48c898e4ed584d17681d0ab25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzQwOQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498817409", "bodyText": "It's a possibility. I'm not fond of it because it \"leaks\" an implementation detail (i.e. the cached map).", "author": "Technici4n", "createdAt": "2020-10-02T13:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5ODE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTgzMw==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r499175833", "bodyText": "We would have to return an immutable map in this case which may change the semantics of anyone using the furnace. As such I'd probably just add getters in the fuel registry", "author": "i509VCB", "createdAt": "2020-10-03T19:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5ODE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d0ce38b8e473bccf2071e89d9958252f348eca01", "chunk": "diff --git a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\nindex 4316ffc4..ce56ae44 100644\n--- a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n+++ b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n\n@@ -37,18 +36,25 @@ public class MixinAbstractFurnaceBlockEntity {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n \n-\t@Inject(at = @At(\"HEAD\"), method = \"canUseAsFuel\", cancellable = true)\n-\tprivate static void canUseAsFuelHook(ItemStack stack, CallbackInfoReturnable<Boolean> info) {\n-\t\tinfo.setReturnValue(FuelRegistry.INSTANCE.get(stack.getItem()) != null);\n+\t@Redirect(\n+\t\t\tmethod = \"canUseAsFuel\",\n+\t\t\tat = @At(\n+\t\t\t\tvalue = \"INVOKE\",\n+\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n+\t\t\t)\n+\t)\n+\tprivate static Map<Item, Integer> canUseAsFuelRedirect() {\n+\t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n \n-\t@Inject(at = @At(\"HEAD\"), method = \"getFuelTime\", cancellable = true)\n-\tprotected void getFuelTimeHook(ItemStack fuel, CallbackInfoReturnable<Integer> info) {\n-\t\tif (fuel.isEmpty()) {\n-\t\t\tinfo.setReturnValue(0);\n-\t\t} else {\n-\t\t\tInteger burnTime = FuelRegistry.INSTANCE.get(fuel.getItem());\n-\t\t\tinfo.setReturnValue(burnTime == null ? 0 : burnTime);\n-\t\t}\n+\t@Redirect(\n+\t\t\tmethod = \"getFuelTime\",\n+\t\t\tat = @At(\n+\t\t\t\tvalue = \"INVOKE\",\n+\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n+\t\t\t)\n+\t)\n+\tprivate Map<Item, Integer> getFuelTimeRedirect() {\n+\t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjQ4NA==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498916484", "bodyText": "This is effectively an overwrite, should be an inject", "author": "i509VCB", "createdAt": "2020-10-02T16:11:18Z", "path": "fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinTagManager.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.content.registry;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+\n+import net.minecraft.tag.TagManager;\n+\n+import net.fabricmc.fabric.impl.content.registry.FuelRegistryImpl;\n+\n+@Mixin(targets = \"net.minecraft.tag.TagManager$1\")\n+public abstract class MixinTagManager implements TagManager {\n+\tpublic void apply() {", "originalCommit": "824377e72cd948a48c898e4ed584d17681d0ab25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNjYyOQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498936629", "bodyText": "I don't think it's possible to inject here because the apply method is a default from an interface. I tried injecting there first, but injection into default interface methods is not supported yet AFAIK.", "author": "Technici4n", "createdAt": "2020-10-02T16:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NTg3NQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r499175875", "bodyText": "You are targeting an anonymous class? It should be possible to inject here I think. Of course I may be wrong", "author": "i509VCB", "createdAt": "2020-10-03T19:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NzMxMA==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r499847310", "bodyText": "So I injected into ClientNetworkPlayHandler and used the END_DATA_PACK_RELOAD event. That removes the need for the overwrite.", "author": "Technici4n", "createdAt": "2020-10-05T20:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "9c3bcf44eb68c55ff78c8cba2cdea78b25c43eaf", "chunk": "diff --git a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinTagManager.java b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/client/MixinClientPlayNetworkHandler.java\nsimilarity index 56%\nrename from fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinTagManager.java\nrename to fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/client/MixinClientPlayNetworkHandler.java\nindex 993ce15b..4f3aa3cd 100644\n--- a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinTagManager.java\n+++ b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/client/MixinClientPlayNetworkHandler.java\n\n@@ -14,18 +14,22 @@\n  * limitations under the License.\n  */\n \n-package net.fabricmc.fabric.mixin.content.registry;\n+package net.fabricmc.fabric.mixin.content.registry.client;\n \n import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n \n-import net.minecraft.tag.TagManager;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.network.packet.s2c.play.SynchronizeTagsS2CPacket;\n \n import net.fabricmc.fabric.impl.content.registry.FuelRegistryImpl;\n \n-@Mixin(targets = \"net.minecraft.tag.TagManager$1\")\n-public abstract class MixinTagManager implements TagManager {\n-\tpublic void apply() {\n-\t\tTagManager.super.apply();\n+@Mixin(ClientPlayNetworkHandler.class)\n+public abstract class MixinClientPlayNetworkHandler {\n+\t@Inject(at = @At(\"TAIL\"), method = \"onSynchronizeTags\")\n+\tprivate void onSynchronizeTagsHook(SynchronizeTagsS2CPacket packet, CallbackInfo info) {\n \t\tFuelRegistryImpl.INSTANCE.onTagsReloaded();\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzUwMQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498917501", "bodyText": "Both new injects are soft overwrites, any other mod injecting here will never be handled.", "author": "i509VCB", "createdAt": "2020-10-02T16:13:23Z", "path": "fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java", "diffHunk": "@@ -34,4 +36,19 @@\n \tprivate static void fuelTimeMapHook(CallbackInfoReturnable<Map<Item, Integer>> info) {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n+\n+\t@Inject(at = @At(\"HEAD\"), method = \"canUseAsFuel\", cancellable = true)\n+\tprivate static void canUseAsFuelHook(ItemStack stack, CallbackInfoReturnable<Boolean> info) {", "originalCommit": "824377e72cd948a48c898e4ed584d17681d0ab25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNzYzMg==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498937632", "bodyText": "Would it be better to inject just before createFuelTimeMap ? That should work too.", "author": "Technici4n", "createdAt": "2020-10-02T16:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NTAzMQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498955031", "bodyText": "But if I were to do that, any mod injecting at TAIL for example still wouldn't work I think. Is it really reasonable to expect mods to be injecting stuff in these two functions?", "author": "Technici4n", "createdAt": "2020-10-02T17:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTAwMw==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r498985003", "bodyText": "If you want I can lower the priority on the mixin itself... that works too, doesn't it?", "author": "Technici4n", "createdAt": "2020-10-02T18:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NzQ3Mg==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r499847472", "bodyText": "Resolved by d0ce38b.", "author": "Technici4n", "createdAt": "2020-10-05T20:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0ce38b8e473bccf2071e89d9958252f348eca01", "chunk": "diff --git a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\nindex 4316ffc4..ce56ae44 100644\n--- a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n+++ b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n\n@@ -37,18 +36,25 @@ public class MixinAbstractFurnaceBlockEntity {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n \n-\t@Inject(at = @At(\"HEAD\"), method = \"canUseAsFuel\", cancellable = true)\n-\tprivate static void canUseAsFuelHook(ItemStack stack, CallbackInfoReturnable<Boolean> info) {\n-\t\tinfo.setReturnValue(FuelRegistry.INSTANCE.get(stack.getItem()) != null);\n+\t@Redirect(\n+\t\t\tmethod = \"canUseAsFuel\",\n+\t\t\tat = @At(\n+\t\t\t\tvalue = \"INVOKE\",\n+\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n+\t\t\t)\n+\t)\n+\tprivate static Map<Item, Integer> canUseAsFuelRedirect() {\n+\t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n \n-\t@Inject(at = @At(\"HEAD\"), method = \"getFuelTime\", cancellable = true)\n-\tprotected void getFuelTimeHook(ItemStack fuel, CallbackInfoReturnable<Integer> info) {\n-\t\tif (fuel.isEmpty()) {\n-\t\t\tinfo.setReturnValue(0);\n-\t\t} else {\n-\t\t\tInteger burnTime = FuelRegistry.INSTANCE.get(fuel.getItem());\n-\t\t\tinfo.setReturnValue(burnTime == null ? 0 : burnTime);\n-\t\t}\n+\t@Redirect(\n+\t\t\tmethod = \"getFuelTime\",\n+\t\t\tat = @At(\n+\t\t\t\tvalue = \"INVOKE\",\n+\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n+\t\t\t)\n+\t)\n+\tprivate Map<Item, Integer> getFuelTimeRedirect() {\n+\t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n }\n"}}, {"oid": "d0ce38b8e473bccf2071e89d9958252f348eca01", "url": "https://github.com/FabricMC/fabric/commit/d0ce38b8e473bccf2071e89d9958252f348eca01", "message": "Use more compatible mixins", "committedDate": "2020-10-05T19:00:41Z", "type": "commit"}, {"oid": "9c3bcf44eb68c55ff78c8cba2cdea78b25c43eaf", "url": "https://github.com/FabricMC/fabric/commit/9c3bcf44eb68c55ff78c8cba2cdea78b25c43eaf", "message": "Replace a function overwrite by a TAIL inject", "committedDate": "2020-10-05T20:15:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNDg2NA==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r505234864", "bodyText": "I personally dislike it but modmuss wants the mixin annotations to be one line", "author": "i509VCB", "createdAt": "2020-10-15T07:02:09Z", "path": "fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java", "diffHunk": "@@ -34,4 +35,26 @@\n \tprivate static void fuelTimeMapHook(CallbackInfoReturnable<Map<Item, Integer>> info) {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n+\n+\t@Redirect(\n+\t\t\tmethod = \"canUseAsFuel\",\n+\t\t\tat = @At(\n+\t\t\t\tvalue = \"INVOKE\",\n+\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n+\t\t\t)\n+\t)", "originalCommit": "9c3bcf44eb68c55ff78c8cba2cdea78b25c43eaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI5MTU4OQ==", "url": "https://github.com/FabricMC/fabric/pull/1108#discussion_r505291589", "bodyText": "Aight", "author": "Technici4n", "createdAt": "2020-10-15T07:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNDg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9d141599824f7cdd0e107d0f130388345db0402a", "chunk": "diff --git a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\nindex ce56ae44..d9dbf854 100644\n--- a/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n+++ b/fabric-content-registries-v0/src/main/java/net/fabricmc/fabric/mixin/content/registry/MixinAbstractFurnaceBlockEntity.java\n\n@@ -36,24 +36,12 @@ public class MixinAbstractFurnaceBlockEntity {\n \t\tFuelRegistryImpl.INSTANCE.apply(info.getReturnValue());\n \t}\n \n-\t@Redirect(\n-\t\t\tmethod = \"canUseAsFuel\",\n-\t\t\tat = @At(\n-\t\t\t\tvalue = \"INVOKE\",\n-\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n-\t\t\t)\n-\t)\n+\t@Redirect(method = \"canUseAsFuel\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"))\n \tprivate static Map<Item, Integer> canUseAsFuelRedirect() {\n \t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n \n-\t@Redirect(\n-\t\t\tmethod = \"getFuelTime\",\n-\t\t\tat = @At(\n-\t\t\t\tvalue = \"INVOKE\",\n-\t\t\t\ttarget = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"\n-\t\t\t)\n-\t)\n+\t@Redirect(method = \"getFuelTime\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/block/entity/AbstractFurnaceBlockEntity;createFuelTimeMap()Ljava/util/Map;\"))\n \tprivate Map<Item, Integer> getFuelTimeRedirect() {\n \t\treturn FuelRegistryImpl.INSTANCE.getFuelTimes();\n \t}\n"}}, {"oid": "9d141599824f7cdd0e107d0f130388345db0402a", "url": "https://github.com/FabricMC/fabric/commit/9d141599824f7cdd0e107d0f130388345db0402a", "message": "Mixin formatting", "committedDate": "2020-10-15T07:51:47Z", "type": "commit"}, {"oid": "c1932d6cbb3292c9de4f925386bcaf6d9244e37a", "url": "https://github.com/FabricMC/fabric/commit/c1932d6cbb3292c9de4f925386bcaf6d9244e37a", "message": "Merge branch '1.16' into fuel-map-fix", "committedDate": "2020-11-23T09:53:09Z", "type": "commit"}, {"oid": "b1f254dc57dab82ee80f0a9f7c2e4b1d66f86fb0", "url": "https://github.com/FabricMC/fabric/commit/b1f254dc57dab82ee80f0a9f7c2e4b1d66f86fb0", "message": "Indentation", "committedDate": "2020-11-23T11:28:35Z", "type": "commit"}, {"oid": "f1c6b013a3d4ed7a9ef3ed6b6baac0886d899d5a", "url": "https://github.com/FabricMC/fabric/commit/f1c6b013a3d4ed7a9ef3ed6b6baac0886d899d5a", "message": "Make cache thread-safe, switch to boxed collection (IHM) since most\nuses yield boxed results, refactor cache clearing", "committedDate": "2020-11-27T01:19:47Z", "type": "commit"}, {"oid": "79eb0459b8f58e2e28b36937374b6ae7a45442fe", "url": "https://github.com/FabricMC/fabric/commit/79eb0459b8f58e2e28b36937374b6ae7a45442fe", "message": "fix import formatting", "committedDate": "2020-11-27T01:30:09Z", "type": "commit"}]}