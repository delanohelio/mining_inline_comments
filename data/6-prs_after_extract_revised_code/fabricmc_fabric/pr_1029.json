{"pr_number": 1029, "pr_title": "DynamicRegistryEvents", "pr_createdAt": "2020-08-19T16:45:03Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1029", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzA0NA==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473177044", "bodyText": "I'd say final class with private ctor here.", "author": "i509VCB", "createdAt": "2020-08-19T16:49:48Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.registry.sync;\n+\n+import java.util.Map;\n+\n+import com.google.common.collect.Maps;\n+\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.mixin.registry.sync.DynamicRegistryManagerAccessor;\n+\n+public abstract class DynamicRegistryEvents {", "originalCommit": "ce49f034e6c2469f257e9ec49c4e7995df14daeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTQ3Mg==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473189472", "bodyText": "ah yes, wasn't sure how java does this.", "author": "CheaterCodes", "createdAt": "2020-08-19T17:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "e5def8e7eb51f73e94afe7abbeac9cf2f58872c4", "chunk": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java\nindex b23f0efa9..e8827b160 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/impl/registry/sync/DynamicRegistryEvents.java\n\n@@ -28,9 +28,12 @@ import net.fabricmc.fabric.api.event.EventFactory;\n import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n import net.fabricmc.fabric.mixin.registry.sync.DynamicRegistryManagerAccessor;\n \n-public abstract class DynamicRegistryEvents {\n+public final class DynamicRegistryEvents {\n \tpublic static Map<RegistryKey<? extends Registry<?>>, Event<DynamicRegistryEntryAddedCallback>> ADD_ENTRY_EVENTS;\n \n+\tprivate DynamicRegistryEvents() {\n+\t}\n+\n \tstatic {\n \t\tADD_ENTRY_EVENTS = Maps.newLinkedHashMap();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473177421", "bodyText": "You may be able to pass the generic type here and on the interface.", "author": "i509VCB", "createdAt": "2020-08-19T16:50:31Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.MutableRegistry;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@FunctionalInterface\n+public interface DynamicRegistryEntryAddedCallback {\n+\tvoid onEntryAdded(int rawId, RegistryKey<?> key, Object object, MutableRegistry<?> registry);\n+\n+\tstatic Event<DynamicRegistryEntryAddedCallback> event(RegistryKey<? extends Registry<?>> registryKey) {", "originalCommit": "ce49f034e6c2469f257e9ec49c4e7995df14daeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxMTk4MQ==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473211981", "bodyText": "I can change it on the Interface without issues, but I get lots of problems in other classes.\nMaybe someone who knows more than I can fix it :)", "author": "CheaterCodes", "createdAt": "2020-08-19T17:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NTE2OA==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r473265168", "bodyText": "Nvm, figured it out, should be good now :)", "author": "CheaterCodes", "createdAt": "2020-08-19T19:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e30c893704ec31fb37f6dd265dbeeb92a9618a9", "chunk": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java\nindex 8363a4d2c..ad4f7d129 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistryEntryAddedCallback.java\n\n@@ -24,14 +24,15 @@ import net.fabricmc.fabric.api.event.Event;\n import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n \n @FunctionalInterface\n-public interface DynamicRegistryEntryAddedCallback {\n-\tvoid onEntryAdded(int rawId, RegistryKey<?> key, Object object, MutableRegistry<?> registry);\n+public interface DynamicRegistryEntryAddedCallback<T> {\n+\tvoid onEntryAdded(int rawId, RegistryKey<T> key, T object, MutableRegistry<T> registry);\n \n-\tstatic Event<DynamicRegistryEntryAddedCallback> event(RegistryKey<? extends Registry<?>> registryKey) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tstatic <T> Event<DynamicRegistryEntryAddedCallback<T>> event(RegistryKey<? extends Registry<T>> registryKey) {\n \t\tif (!DynamicRegistryEvents.ADD_ENTRY_EVENTS.containsKey(registryKey)) {\n \t\t\tthrow new IllegalArgumentException(\"Unsupported registry: \" + registryKey);\n \t\t}\n \n-\t\treturn DynamicRegistryEvents.ADD_ENTRY_EVENTS.get(registryKey);\n+\t\treturn (Event<DynamicRegistryEntryAddedCallback<T>>) DynamicRegistryEvents.ADD_ENTRY_EVENTS.get(registryKey);\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474236654", "bodyText": "Imo exposing a general event at this point like DynamicRegistrySetupEvent and letting users to register registry entry add callback etc. from this point on would be more useful.", "author": "liach", "createdAt": "2020-08-20T19:54:02Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.registry.sync;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.registry.DynamicRegistryEntryAddedCallback;\n+import net.fabricmc.fabric.api.event.registry.RegistryEntryAddedCallback;\n+import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n+\n+@Mixin(DynamicRegistryManager.class)\n+public class DynamicRegistryManagerMixin {\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n+\tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n+\t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {", "originalCommit": "d987f451045fd4079770f2007989f6c7601e6abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4OTI2NA==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474289264", "bodyText": "Hm... Good idea...\nI don't see a benefit for usage really, but it might make the code cleaner.\nI'd like to hear another vote or argument for this though. before I change something.", "author": "CheaterCodes", "createdAt": "2020-08-20T21:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTA2MQ==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474315061", "bodyText": "In that event, modders can not only add their entry add listeners but also remove listeners or other listeners on a registry. That is more extensible than your current setup.", "author": "liach", "createdAt": "2020-08-20T22:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MzE4Nw==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474643187", "bodyText": "I've given this some thought and I agree with you.\nI think it's a little more inconvenient to use but offers much more flexibility.\nI'll implement this today if I can find the time.", "author": "CheaterCodes", "createdAt": "2020-08-21T11:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTA1NA==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r474875054", "bodyText": "Done!", "author": "CheaterCodes", "createdAt": "2020-08-21T19:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNjY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e9c7de9661886e711590642132ee0fe0d66fb2b7", "chunk": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java\nindex 28ed013bd..95128b71d 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/mixin/registry/sync/DynamicRegistryManagerMixin.java\n\n@@ -35,14 +35,14 @@ import net.fabricmc.fabric.impl.registry.sync.DynamicRegistryEvents;\n \n @Mixin(DynamicRegistryManager.class)\n public class DynamicRegistryManagerMixin {\n-\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n \t@Inject(method = \"create\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/util/dynamic/RegistryOps$class_5506$class_5507;<init>()V\"), locals = LocalCapture.CAPTURE_FAILHARD)\n \tprivate static void onCreateImpl(CallbackInfoReturnable<DynamicRegistryManager.Impl> cir, DynamicRegistryManager.Impl registryManager) {\n-\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<?>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\tfor (Map.Entry<RegistryKey<? extends Registry<?>>, Event<DynamicRegistryEntryAddedCallback>> event : DynamicRegistryEvents.ADD_ENTRY_EVENTS.entrySet()) {\n+\t\t\t//noinspection unchecked\n \t\t\tRegistryKey<? extends Registry<Object>> registryKey = (RegistryKey<? extends Registry<Object>>) event.getKey();\n \t\t\tRegistryEntryAddedCallback.event(registryManager.get(registryKey)).register((rawId, id, object) -> {\n \t\t\t\tRegistryKey<?> key = RegistryKey.of(registryKey, id);\n-\t\t\t\t((DynamicRegistryEntryAddedCallback) event.getValue().invoker()).onEntryAdded(rawId, key, object, registryManager.get(registryKey));\n+\t\t\t\tevent.getValue().invoker().onEntryAdded(rawId, key, object, registryManager.get(registryKey));\n \t\t\t});\n \t\t}\n \t}\n"}}, {"oid": "e9c7de9661886e711590642132ee0fe0d66fb2b7", "url": "https://github.com/FabricMC/fabric/commit/e9c7de9661886e711590642132ee0fe0d66fb2b7", "message": "Added DynamicRegistryEntryAddedCallback", "committedDate": "2020-09-13T11:02:21Z", "type": "commit"}, {"oid": "e5def8e7eb51f73e94afe7abbeac9cf2f58872c4", "url": "https://github.com/FabricMC/fabric/commit/e5def8e7eb51f73e94afe7abbeac9cf2f58872c4", "message": "bumbed loader version, finalized DynamicRegistryEvents", "committedDate": "2020-09-13T11:02:21Z", "type": "commit"}, {"oid": "1e30c893704ec31fb37f6dd265dbeeb92a9618a9", "url": "https://github.com/FabricMC/fabric/commit/1e30c893704ec31fb37f6dd265dbeeb92a9618a9", "message": "Fixed some generics", "committedDate": "2020-09-13T11:02:21Z", "type": "commit"}, {"oid": "5610e94af4bc10f1c18daa247027ce91b36eb889", "url": "https://github.com/FabricMC/fabric/commit/5610e94af4bc10f1c18daa247027ce91b36eb889", "message": "Changed the event to a more generic one", "committedDate": "2020-09-13T11:02:21Z", "type": "commit"}, {"oid": "a0c9b80ef4ebc50cb2992c95ce11e5e3cae81cab", "url": "https://github.com/FabricMC/fabric/commit/a0c9b80ef4ebc50cb2992c95ce11e5e3cae81cab", "message": "Added some javadoc and the license header", "committedDate": "2020-09-13T11:02:21Z", "type": "commit"}, {"oid": "d932d0ccc12a55dbfd9d3bc5841dbcea194b9598", "url": "https://github.com/FabricMC/fabric/commit/d932d0ccc12a55dbfd9d3bc5841dbcea194b9598", "message": "increased gradle memory in the hope it fixes the github action fail", "committedDate": "2020-09-13T11:02:22Z", "type": "commit"}, {"oid": "a46b0be60a9f04de1ab9f9cb866358ed6149d06d", "url": "https://github.com/FabricMC/fabric/commit/a46b0be60a9f04de1ab9f9cb866358ed6149d06d", "message": "Added DynamicRegistryEntryAddedCallback", "committedDate": "2020-09-13T11:03:53Z", "type": "commit"}, {"oid": "7953e09bd8de9547510ba73db6b3cdc47b1ec802", "url": "https://github.com/FabricMC/fabric/commit/7953e09bd8de9547510ba73db6b3cdc47b1ec802", "message": "bumbed loader version, finalized DynamicRegistryEvents", "committedDate": "2020-09-13T11:03:53Z", "type": "commit"}, {"oid": "1d8aa64520908e8e8e97024684a4fe474539040b", "url": "https://github.com/FabricMC/fabric/commit/1d8aa64520908e8e8e97024684a4fe474539040b", "message": "Fixed some generics", "committedDate": "2020-09-13T11:04:16Z", "type": "commit"}, {"oid": "ea60ad8ae6c153c63609e59bb9914db9a25839f4", "url": "https://github.com/FabricMC/fabric/commit/ea60ad8ae6c153c63609e59bb9914db9a25839f4", "message": "Changed the event to a more generic one", "committedDate": "2020-09-13T11:04:59Z", "type": "commit"}, {"oid": "ea60ad8ae6c153c63609e59bb9914db9a25839f4", "url": "https://github.com/FabricMC/fabric/commit/ea60ad8ae6c153c63609e59bb9914db9a25839f4", "message": "Changed the event to a more generic one", "committedDate": "2020-09-13T11:04:59Z", "type": "forcePushed"}, {"oid": "825410cfbc8642c926d4c6679d290a4364664d8d", "url": "https://github.com/FabricMC/fabric/commit/825410cfbc8642c926d4c6679d290a4364664d8d", "message": "reverted memory change", "committedDate": "2020-09-13T11:10:16Z", "type": "commit"}, {"oid": "002bec9c0567fef2b47f11c1a43df88be43a0623", "url": "https://github.com/FabricMC/fabric/commit/002bec9c0567fef2b47f11c1a43df88be43a0623", "message": "updated mixin for new mappings", "committedDate": "2020-09-13T11:17:51Z", "type": "commit"}, {"oid": "bf575bf0131fed526ddf2a2203e5a83673cd64dd", "url": "https://github.com/FabricMC/fabric/commit/bf575bf0131fed526ddf2a2203e5a83673cd64dd", "message": "Merge branch '1.16' into dynregman", "committedDate": "2020-10-01T20:54:51Z", "type": "commit"}, {"oid": "811b763fc3ea42364f080c83297901df02429219", "url": "https://github.com/FabricMC/fabric/commit/811b763fc3ea42364f080c83297901df02429219", "message": "removed redundant supressions", "committedDate": "2020-10-01T20:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDg5Ng==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r498524896", "bodyText": "-> onRegistrySetup to be consistent with everything else and standard naming conventions", "author": "sfPlayer1", "createdAt": "2020-10-01T21:35:09Z", "path": "fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.event.registry;\n+\n+import net.minecraft.util.registry.DynamicRegistryManager;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * This event gets triggered when a new {@link DynamicRegistryManager} gets created, but before it gets filled.\n+ * Therefore, this is the ideal place to register callbacks to dynamic registries.\n+ * For example, the following code is used to register a callback that gets triggered for any registered Biome, both JSON and code defined.\n+ *\n+ * <pre>\n+ * {@code\n+ * DynamicRegistrySetupCallback.EVENT.register(registryManager -> {\n+ *     Registry<Biome> biomes = registryManager.get(Registry.BIOME_KEY);\n+ *     RegistryEntryAddedCallback.event(biomes).register((rawId, id, object) -> {\n+ *         // Do something\n+ *     });\n+ * });\n+ * }\n+ * </pre>\n+ */\n+@FunctionalInterface\n+public interface DynamicRegistrySetupCallback {\n+\tvoid onSetupRegistry(DynamicRegistryManager registryManager);", "originalCommit": "811b763fc3ea42364f080c83297901df02429219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNjAwMw==", "url": "https://github.com/FabricMC/fabric/pull/1029#discussion_r498526003", "bodyText": "Done!", "author": "CheaterCodes", "createdAt": "2020-10-01T21:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNDg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "888073d094f731c6a4519ef6b5eb3479ae746e41", "chunk": "diff --git a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java\nindex d71526081..d16aea52e 100644\n--- a/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java\n+++ b/fabric-registry-sync-v0/src/main/java/net/fabricmc/fabric/api/event/registry/DynamicRegistrySetupCallback.java\n\n@@ -39,13 +39,13 @@ import net.fabricmc.fabric.api.event.EventFactory;\n  */\n @FunctionalInterface\n public interface DynamicRegistrySetupCallback {\n-\tvoid onSetupRegistry(DynamicRegistryManager registryManager);\n+\tvoid onRegistrySetup(DynamicRegistryManager registryManager);\n \n \tEvent<DynamicRegistrySetupCallback> EVENT = EventFactory.createArrayBacked(\n \t\t\tDynamicRegistrySetupCallback.class,\n \t\t\tcallbacks -> registryManager -> {\n \t\t\t\tfor (DynamicRegistrySetupCallback callback : callbacks) {\n-\t\t\t\t\tcallback.onSetupRegistry(registryManager);\n+\t\t\t\t\tcallback.onRegistrySetup(registryManager);\n \t\t\t\t}\n \t\t\t}\n \t);\n"}}, {"oid": "888073d094f731c6a4519ef6b5eb3479ae746e41", "url": "https://github.com/FabricMC/fabric/commit/888073d094f731c6a4519ef6b5eb3479ae746e41", "message": "renamed event method", "committedDate": "2020-10-01T21:37:40Z", "type": "commit"}]}