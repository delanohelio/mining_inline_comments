{"pr_number": 1234, "pr_title": "Fabric API Lookup", "pr_createdAt": "2020-12-21T01:21:27Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1234", "timeline": [{"oid": "c38d0755522faaf8719c21b26a55f84fbc185cbf", "url": "https://github.com/FabricMC/fabric/commit/c38d0755522faaf8719c21b26a55f84fbc185cbf", "message": "Implement the item and block providers for provider api.\n\nYes it builds :)", "committedDate": "2020-10-25T21:45:04Z", "type": "commit"}, {"oid": "7a1ab867990635b893cd358dd6106c536eeffb75", "url": "https://github.com/FabricMC/fabric/commit/7a1ab867990635b893cd358dd6106c536eeffb75", "message": "NotNull is implicit; so remove instances of it", "committedDate": "2020-10-25T22:05:34Z", "type": "commit"}, {"oid": "e1f0ed2cf75b61a9d1aa2ebd640d8c7e51cb44a5", "url": "https://github.com/FabricMC/fabric/commit/e1f0ed2cf75b61a9d1aa2ebd640d8c7e51cb44a5", "message": "Some javadoc for context key", "committedDate": "2020-10-25T22:09:45Z", "type": "commit"}, {"oid": "a9ba2a43902253aabcb8939c1ea060baf3072f5f", "url": "https://github.com/FabricMC/fabric/commit/a9ba2a43902253aabcb8939c1ea060baf3072f5f", "message": "Inline some api lookup return values", "committedDate": "2020-10-25T22:28:15Z", "type": "commit"}, {"oid": "3bd4cde57dd80b89abec67772e71712d8ba1c39b", "url": "https://github.com/FabricMC/fabric/commit/3bd4cde57dd80b89abec67772e71712d8ba1c39b", "message": "Add first iteration of provider api test mod", "committedDate": "2020-10-26T18:56:47Z", "type": "commit"}, {"oid": "85e56eb9a29115565b4be0badf13502f41bbf6b7", "url": "https://github.com/FabricMC/fabric/commit/85e56eb9a29115565b4be0badf13502f41bbf6b7", "message": "Reorder no context field so static block is not needed.", "committedDate": "2020-10-26T19:02:46Z", "type": "commit"}, {"oid": "91980b62562c12170b8779018889482dacf5504e", "url": "https://github.com/FabricMC/fabric/commit/91980b62562c12170b8779018889482dacf5504e", "message": "Fix a bug related to testmod block entity not checking if it has a world\n\nAlso includes stuff related to the util classes", "committedDate": "2020-10-26T23:53:13Z", "type": "commit"}, {"oid": "8b480984213662378164de5ac2193a7eee6ed570", "url": "https://github.com/FabricMC/fabric/commit/8b480984213662378164de5ac2193a7eee6ed570", "message": "Add block entity caches", "committedDate": "2020-11-21T18:27:38Z", "type": "commit"}, {"oid": "77d882103164aefd13758504b6e7fc57b3d3ac90", "url": "https://github.com/FabricMC/fabric/commit/77d882103164aefd13758504b6e7fc57b3d3ac90", "message": "Add fallback providers", "committedDate": "2020-11-24T21:43:23Z", "type": "commit"}, {"oid": "10881ca0e6288401378e9517e400fca4f482b3d9", "url": "https://github.com/FabricMC/fabric/commit/10881ca0e6288401378e9517e400fca4f482b3d9", "message": "Merge branch '1.16' into api-provider", "committedDate": "2020-11-25T11:08:15Z", "type": "commit"}, {"oid": "0aa755e6f9d8085b48ec2c4a9ae87d407a2eacf9", "url": "https://github.com/FabricMC/fabric/commit/0aa755e6f9d8085b48ec2c4a9ae87d407a2eacf9", "message": "Inline ContextKey, remove ApiLookup, add Class<T> and Class<C> parameters", "committedDate": "2020-11-26T09:47:11Z", "type": "commit"}, {"oid": "fa81038b13fb8367e3b5fc8fe4001dc094ca9cd5", "url": "https://github.com/FabricMC/fabric/commit/fa81038b13fb8367e3b5fc8fe4001dc094ca9cd5", "message": "Add item fallback providers", "committedDate": "2020-11-26T09:53:24Z", "type": "commit"}, {"oid": "fd6314743f3d6772ea7bfdcbaac346321ac4c390", "url": "https://github.com/FabricMC/fabric/commit/fd6314743f3d6772ea7bfdcbaac346321ac4c390", "message": "Add javadoc for BlockApiLookup", "committedDate": "2020-11-26T16:47:58Z", "type": "commit"}, {"oid": "64c61d8e99760e11b118eb7670b0ed1f8c62c840", "url": "https://github.com/FabricMC/fabric/commit/64c61d8e99760e11b118eb7670b0ed1f8c62c840", "message": "Javadoc fixes, build.gradle update and version bump", "committedDate": "2020-11-26T16:58:39Z", "type": "commit"}, {"oid": "58a1cb0d56eef63cd9ac1e95c5ceb646b84a7a4f", "url": "https://github.com/FabricMC/fabric/commit/58a1cb0d56eef63cd9ac1e95c5ceb646b84a7a4f", "message": "Add a BlockState parameter to BlockApiProvider", "committedDate": "2020-12-02T18:36:48Z", "type": "commit"}, {"oid": "4f149eb809043f26e968630aec69f9060d75dc25", "url": "https://github.com/FabricMC/fabric/commit/4f149eb809043f26e968630aec69f9060d75dc25", "message": "Bye items \ud83e\udd80", "committedDate": "2020-12-13T20:41:08Z", "type": "commit"}, {"oid": "8d20007ae27b6bd0979d614ee8dd2583b1611b6b", "url": "https://github.com/FabricMC/fabric/commit/8d20007ae27b6bd0979d614ee8dd2583b1611b6b", "message": "Rename to fabric-api-lookup-api-v1 and add package-info.java", "committedDate": "2020-12-17T23:58:01Z", "type": "commit"}, {"oid": "d3b050d4f5daf0b5675f7ac94c292a60802f978c", "url": "https://github.com/FabricMC/fabric/commit/d3b050d4f5daf0b5675f7ac94c292a60802f978c", "message": "Document all api classes, and fix the memory leak in the cache", "committedDate": "2020-12-20T00:59:04Z", "type": "commit"}, {"oid": "ed5f62686ddc8087df842c223cb51d8da65f17c4", "url": "https://github.com/FabricMC/fabric/commit/ed5f62686ddc8087df842c223cb51d8da65f17c4", "message": "Make docs a bit less insane", "committedDate": "2020-12-21T00:28:42Z", "type": "commit"}, {"oid": "0cd4e3674bb93fe1af9c6d8df5191b54bbe97673", "url": "https://github.com/FabricMC/fabric/commit/0cd4e3674bb93fe1af9c6d8df5191b54bbe97673", "message": "Revert build.gradle changes", "committedDate": "2020-12-21T00:35:16Z", "type": "commit"}, {"oid": "da3072b37bb09ea103ac882431ea6eeb521798b9", "url": "https://github.com/FabricMC/fabric/commit/da3072b37bb09ea103ac882431ea6eeb521798b9", "message": "Add example code to javadoc", "committedDate": "2020-12-21T19:53:12Z", "type": "commit"}, {"oid": "3c3b8bbeb902eb3c93be4ae5159a4ae73540232e", "url": "https://github.com/FabricMC/fabric/commit/3c3b8bbeb902eb3c93be4ae5159a4ae73540232e", "message": "Write README, document what BlockApiCache does, fix checkstyle", "committedDate": "2020-12-22T00:11:42Z", "type": "commit"}, {"oid": "30d45b640027415da3c9b0f65ea0bdcd937aa72f", "url": "https://github.com/FabricMC/fabric/commit/30d45b640027415da3c9b0f65ea0bdcd937aa72f", "message": "Add @Nullable BlockState and BlockEntity parameters where applicable, pass BlockState and BlockEntity to fallback providers, and reduce insanity overall", "committedDate": "2020-12-22T20:27:32Z", "type": "commit"}, {"oid": "5477c43058321d086032a52d5cbc28873d73be01", "url": "https://github.com/FabricMC/fabric/commit/5477c43058321d086032a52d5cbc28873d73be01", "message": "Fix checkstyle", "committedDate": "2020-12-22T23:38:59Z", "type": "commit"}, {"oid": "dee0ad256764ac2f095af748d2dfc7d6108e5f28", "url": "https://github.com/FabricMC/fabric/commit/dee0ad256764ac2f095af748d2dfc7d6108e5f28", "message": "Some javadoc cleanup and slight tweaks in impl", "committedDate": "2020-12-23T20:45:29Z", "type": "commit"}, {"oid": "cb61f6d8f5b3bcc60830b8b115aebeb8fe3dfc00", "url": "https://github.com/FabricMC/fabric/commit/cb61f6d8f5b3bcc60830b8b115aebeb8fe3dfc00", "message": "Fix ApiLookupMapImpl bug and add a relevant unit test in the testmod, minor tweaks", "committedDate": "2020-12-25T12:53:03Z", "type": "commit"}, {"oid": "047fe88d687a2a688e86dc90c40a002787c72f0e", "url": "https://github.com/FabricMC/fabric/commit/047fe88d687a2a688e86dc90c40a002787c72f0e", "message": "Javadoc formatting.", "committedDate": "2021-01-11T23:01:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556284396", "bodyText": "Would adding a String name to this logger make it clearer for the user where the error came from?", "author": "PepperCode1", "createdAt": "2021-01-13T06:13:26Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.block.entity.BlockEntityType;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.World;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiProviderMap;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+import net.fabricmc.fabric.mixin.lookup.BlockEntityTypeAccessor;\n+\n+public final class BlockApiLookupImpl<T, C> implements BlockApiLookup<T, C> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger();", "originalCommit": "047fe88d687a2a688e86dc90c40a002787c72f0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxMTg3NA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556311874", "bodyText": "IMO BlockApiLookupImpl links the log messages to the module pretty well with Lookup in the name, but using the module ID could also be good (I've done that in the screen handler API).", "author": "Juuxel", "createdAt": "2021-01-13T07:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk0Mjg2Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556942866", "bodyText": "Let's go for fabric-api-lookup-api-v1.", "author": "Technici4n", "createdAt": "2021-01-13T23:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java\nindex 652f6c27..d61b7e8c 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiLookupImpl.java\n\n@@ -37,7 +37,7 @@ import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n import net.fabricmc.fabric.mixin.lookup.BlockEntityTypeAccessor;\n \n public final class BlockApiLookupImpl<T, C> implements BlockApiLookup<T, C> {\n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate static final Logger LOGGER = LogManager.getLogger(\"fabric-api-lookup-api-v1\");\n \tprivate final ApiProviderMap<Block, BlockApiProvider<T, C>> providerMap = ApiProviderMap.create();\n \tprivate final List<FallbackApiProvider<T, C>> fallbackProviders = new CopyOnWriteArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NTYyMA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556285620", "bodyText": "This is the only occurrence of <br>. Is it necessary for formatting or can it be replaced with a <p> for consistency?", "author": "PepperCode1", "createdAt": "2021-01-13T06:17:14Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.block;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiCacheImpl;\n+import net.fabricmc.fabric.impl.lookup.block.BlockApiLookupImpl;\n+\n+/**\n+ * A {@link BlockApiLookup} bound to a {@link ServerWorld} and a position, providing much faster Api access.\n+ * Refer to {@link BlockApiLookup} for example code.\n+ *\n+ * <p>{@link BlockApiLookup#get(World, BlockPos, BlockState, BlockEntity, Object) BlockApiLookup#get()} looks up\n+ * the block state, the block entity, and the Api provider registered for the target block.\n+ *\n+ * <br>This object caches the block entity at the target position, and the last used Api provider, removing those queries.", "originalCommit": "047fe88d687a2a688e86dc90c40a002787c72f0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk0MjU0Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r556942546", "bodyText": "Thanks!", "author": "Technici4n", "createdAt": "2021-01-13T23:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI4NTYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\nindex 4d22f61a..a224da0d 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\n\n@@ -36,7 +36,7 @@ import net.fabricmc.fabric.impl.lookup.block.BlockApiLookupImpl;\n  * <p>{@link BlockApiLookup#get(World, BlockPos, BlockState, BlockEntity, Object) BlockApiLookup#get()} looks up\n  * the block state, the block entity, and the Api provider registered for the target block.\n  *\n- * <br>This object caches the block entity at the target position, and the last used Api provider, removing those queries.\n+ * <p>This object caches the block entity at the target position, and the last used Api provider, removing those queries.\n  * If a block entity is available or if the block state is passed as a parameter, the block state doesn't have to be looked up either.\n  *\n  * @see BlockApiLookup\n"}}, {"oid": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "url": "https://github.com/FabricMC/fabric/commit/eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "message": "Module name in logger, remove inconsistent <br> tag", "committedDate": "2021-01-13T23:21:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557695986", "bodyText": "Unless im missing something I dont see these 2 interfaces needing to be exposed as API? They seem to be related to impl details?", "author": "modmuss50", "createdAt": "2021-01-14T21:00:49Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.ApiLookupMapImpl;\n+\n+/**\n+ * Access to generic Api lookup instances. This is is meant to be used by implementors of Api lookup registries.\n+ *\n+ * <p>Note: To store a lookup class with type parameters {@code <T, C>}, it is recommended to store it as {@code <?, ?>} and perform an unchecked cast on queries internally.\n+ *\n+ * @param <L> The type of the lookup.\n+ */\n+public interface ApiLookupMap<L> extends Iterable<L> {", "originalCommit": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwODI0Mg==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557708242", "bodyText": "They are indeed implementation details, but they are provided to accelerate implementations of other types of api lookups.\nSee for example the third-party https://github.com/Technici4n/FastTransferLib/blob/transactions/src/main/java/dev/technici4n/fasttransferlib/impl/item/ItemKeyApiLookupRegistryImpl.java and https://github.com/Technici4n/FastTransferLib/blob/transactions/src/main/java/dev/technici4n/fasttransferlib/impl/item/ItemKeyApiLookupImpl.java for an example of how it can be used by other mods.\nThe plan is to add item and entity api lookups as well in later PRs, but this could still be useful in other contexts, basically any time you want to convert a game object to some type T. For example, someone might want to expose a WorldApiLookup.", "author": "Technici4n", "createdAt": "2021-01-14T21:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxMzA1MA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557713050", "bodyText": "Ok that\u2019s cool. Just don\u2019t want to expose something for the sake of it, but this is fine.", "author": "modmuss50", "createdAt": "2021-01-14T21:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5NTk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1928ea30b697254606c6b9be4ff2c9f5ab3f51e2", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\nsimilarity index 63%\nrename from fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java\nrename to fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\nindex 5fd4fc5e..5075a55a 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/ApiLookupMap.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\n\n@@ -14,29 +14,37 @@\n  * limitations under the License.\n  */\n \n-package net.fabricmc.fabric.api.lookup.v1;\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n \n import java.util.Objects;\n-import java.util.function.Supplier;\n+\n+import org.jetbrains.annotations.ApiStatus;\n \n import net.minecraft.util.Identifier;\n \n-import net.fabricmc.fabric.impl.lookup.ApiLookupMapImpl;\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n \n /**\n- * Access to generic Api lookup instances. This is is meant to be used by implementors of Api lookup registries.\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <pre>{@code\n+ *\n+ * }</pre>\n  *\n- * <p>Note: To store a lookup class with type parameters {@code <T, C>}, it is recommended to store it as {@code <?, ?>} and perform an unchecked cast on queries internally.\n+ * <p>Note: To store a lookup class with type parameters <code>&lt;A, C&gt;</code>,\n+ * it is recommended to store it as <code>&lt;?, ?&gt;</code> and perform an unchecked cast on queries internally.\n  *\n- * @param <L> The type of the lookup.\n+ * @param <L> The type of the lookup, similar to the existing .\n  */\n+@ApiStatus.NonExtendable\n public interface ApiLookupMap<L> extends Iterable<L> {\n \t/**\n \t * Create a new instance.\n \t *\n \t * @param lookupFactory The factory for the Api lookups.\n \t */\n-\tstatic <L> ApiLookupMap<L> create(Supplier<L> lookupFactory) {\n+\tstatic <L> ApiLookupMap<L> create(LookupFactory<L> lookupFactory) {\n \t\tObjects.requireNonNull(lookupFactory, \"Lookup factory cannot be null\");\n \n \t\treturn new ApiLookupMapImpl<>(lookupFactory);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557703852", "bodyText": "What happens if you try to cache something that isnt a BE? registred via registerForBlocks.", "author": "modmuss50", "createdAt": "2021-01-14T21:16:16Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup.block;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerBlockEntityEvents;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiCache;\n+import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n+\n+public final class BlockApiCacheImpl<T, C> implements BlockApiCache<T, C> {\n+\tprivate final BlockApiLookupImpl<T, C> lookup;\n+\tprivate final ServerWorld world;\n+\tprivate final BlockPos pos;\n+\t/**\n+\t * We always cache the block entity, even if it's null. We rely on BE load and unload events to invalidate the cache when necessary.", "originalCommit": "eaba1d7096af8a44f385fc059d2bc78bb9bf93b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxNDUxNw==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557714517", "bodyText": "If there is no block entity at the target position, the following should happen, matching the behavior of BlockApiLookup:\n\nIf the block state is not provided to the cache it will be queried in the world.\nIf the provider for the block state is a WrappedBlockEntityProvider, which is not supposed to happen, it should probably log an error and not pass a null BE. (I should change that). Otherwise, the provider will receive (world, pos, state, context).\nThe fallback providers will receive a null block entity instance.\n\nNot sure if that's the explanation you expected. If needed, I can probably explain better on Discord, just ping me.", "author": "Technici4n", "createdAt": "2021-01-14T21:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcyMDEwMg==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r557720102", "bodyText": "I really need to boot it up and play with it. Easier to find out that way :)", "author": "modmuss50", "createdAt": "2021-01-14T21:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1928ea30b697254606c6b9be4ff2c9f5ab3f51e2", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java\nindex 2b666bf6..aa4f9013 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/block/BlockApiCacheImpl.java\n\n@@ -27,8 +27,8 @@ import net.fabricmc.fabric.api.event.lifecycle.v1.ServerBlockEntityEvents;\n import net.fabricmc.fabric.api.lookup.v1.block.BlockApiCache;\n import net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup;\n \n-public final class BlockApiCacheImpl<T, C> implements BlockApiCache<T, C> {\n-\tprivate final BlockApiLookupImpl<T, C> lookup;\n+public final class BlockApiCacheImpl<A, C> implements BlockApiCache<A, C> {\n+\tprivate final BlockApiLookupImpl<A, C> lookup;\n \tprivate final ServerWorld world;\n \tprivate final BlockPos pos;\n \t/**\n"}}, {"oid": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93", "url": "https://github.com/FabricMC/fabric/commit/8f91dfb62b469222a1d5f4db738a7bcc8f97ae93", "message": "Add module lifecyle", "committedDate": "2021-01-19T20:25:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566838404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static class StoredLookup<L> {\n          \n          \n            \n            \t\tprivate final L lookup;\n          \n          \n            \n            \t\tprivate final Class<?> apiClass;\n          \n          \n            \n            \t\tprivate final Class<?> contextClass;\n          \n          \n            \n            \n          \n          \n            \n            \t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n          \n          \n            \n            \tprivate static final class StoredLookup<L> {\n          \n          \n            \n            \t\tfinal L lookup;\n          \n          \n            \n            \t\tfinal Class<?> apiClass;\n          \n          \n            \n            \t\tfinal Class<?> contextClass;\n          \n          \n            \n            \n          \n          \n            \n            \t\tStoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n          \n      \n    \n    \n  \n\nThis ain't java 11, no nest host yet", "author": "liach", "createdAt": "2021-01-29T13:56:48Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.lookup;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.lookup.v1.ApiLookupMap;\n+\n+public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n+\tprivate final Map<Identifier, StoredLookup<L>> lookups = new HashMap<>();\n+\tprivate final Supplier<L> lookupFactory;\n+\n+\tpublic ApiLookupMapImpl(Supplier<L> lookupFactory) {\n+\t\tthis.lookupFactory = lookupFactory;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized L getLookup(Identifier lookupId, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup<L> storedLookup = lookups.computeIfAbsent(lookupId, id -> new StoredLookup<>(lookupFactory.get(), apiClass, contextClass));\n+\n+\t\tif (storedLookup.apiClass == apiClass && storedLookup.contextClass == contextClass) {\n+\t\t\treturn storedLookup.lookup;\n+\t\t}\n+\n+\t\tfinal String errorMessage = String.format(\n+\t\t\t\t\"Lookup with id %s is already registered with api class %s and context class %s. It can't be registered with api class %s and context class %s.\",\n+\t\t\t\tlookupId,\n+\t\t\t\tstoredLookup.apiClass.getCanonicalName(),\n+\t\t\t\tstoredLookup.contextClass.getCanonicalName(),\n+\t\t\t\tapiClass.getCanonicalName(),\n+\t\t\t\tcontextClass.getCanonicalName()\n+\t\t);\n+\n+\t\tthrow new IllegalArgumentException(errorMessage);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized Iterator<L> iterator() {\n+\t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n+\t}\n+\n+\tprivate static class StoredLookup<L> {\n+\t\tprivate final L lookup;\n+\t\tprivate final Class<?> apiClass;\n+\t\tprivate final Class<?> contextClass;\n+\n+\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {", "originalCommit": "8f91dfb62b469222a1d5f4db738a7bcc8f97ae93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg1NTU2Nw==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566855567", "bodyText": "No idea what the difference is. I don't think final is important for an impl class?", "author": "Technici4n", "createdAt": "2021-01-29T14:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkxMDY1OA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r566910658", "bodyText": "final on classes can make jvm better optimize pojos\nRemoving private from inner class members (not class itself, as the class modifiers are effectively package and public) allows the compiler to not generate bridge methods for each place where the private field is accessed or the private constructor is called. fyi the accessor in compiled java looks like access$$0 something, while the constructors have some useless arguments inserted by compiler to avoid descriptor conflicts (all constructors are named <init>, so descriptors are their only difference).\n\nIn Java 11, the accessor problem is gone as jvm would recognize nest mates for private access and compiler no longer has to generate bridges. But remember, we are on Java 8", "author": "liach", "createdAt": "2021-01-29T15:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMDM2MA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r567220360", "bodyText": "I'm pretty sure the JVM already recognizes effectively final classes, but this change can't hurt anyway, and sure it's a good idea to remove synthetic methods as well. :)", "author": "Technici4n", "createdAt": "2021-01-30T08:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgzODQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "03a8b15acff8687fba70e2fc65c6af75eddb5fa4", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java\nindex edddc4e4..8b7bd6d6 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/impl/lookup/ApiLookupMapImpl.java\n\n@@ -59,12 +59,12 @@ public final class ApiLookupMapImpl<L> implements ApiLookupMap<L> {\n \t\treturn lookups.values().stream().map(storedLookup -> storedLookup.lookup).collect(Collectors.toList()).iterator();\n \t}\n \n-\tprivate static class StoredLookup<L> {\n-\t\tprivate final L lookup;\n-\t\tprivate final Class<?> apiClass;\n-\t\tprivate final Class<?> contextClass;\n+\tprivate static final class StoredLookup<L> {\n+\t\tfinal L lookup;\n+\t\tfinal Class<?> apiClass;\n+\t\tfinal Class<?> contextClass;\n \n-\t\tprivate StoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n+\t\tStoredLookup(L lookup, Class<?> apiClass, Class<?> contextClass) {\n \t\t\tthis.lookup = lookup;\n \t\t\tthis.apiClass = apiClass;\n \t\t\tthis.contextClass = contextClass;\n"}}, {"oid": "03a8b15acff8687fba70e2fc65c6af75eddb5fa4", "url": "https://github.com/FabricMC/fabric/commit/03a8b15acff8687fba70e2fc65c6af75eddb5fa4", "message": "Add final, remove synthetic methods", "committedDate": "2021-01-30T08:57:46Z", "type": "commit"}, {"oid": "1928ea30b697254606c6b9be4ff2c9f5ab3f51e2", "url": "https://github.com/FabricMC/fabric/commit/1928ea30b697254606c6b9be4ff2c9f5ab3f51e2", "message": "Big refactor - code part", "committedDate": "2021-02-21T21:59:11Z", "type": "commit"}, {"oid": "3a111356677cb11e8534e748764c0fa09e5823ee", "url": "https://github.com/FabricMC/fabric/commit/3a111356677cb11e8534e748764c0fa09e5823ee", "message": "Big refactor - (mostly) doc part", "committedDate": "2021-02-21T23:59:36Z", "type": "commit"}, {"oid": "5d4dc7627836be462e19fc4fc93fc096b334bdd8", "url": "https://github.com/FabricMC/fabric/commit/5d4dc7627836be462e19fc4fc93fc096b334bdd8", "message": "Documentation updates", "committedDate": "2021-02-22T00:11:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579888966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param context Additional context for the query, defined by type parameter C.\n          \n          \n            \n            \t * @return The retrieved API, or {@code null} if no API was found.\n          \n          \n            \n            \t * @param context additional context for the query\n          \n          \n            \n            \t * @return the retrieved API, or {@code null} if no API was found\n          \n      \n    \n    \n  \n\nImo you should move the description of type C to the @param tags for class doc\nI think we are more inclined to use sentence fragments for the param and return tags than full sentences. This just serves as an example.", "author": "liach", "createdAt": "2021-02-22T00:02:03Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java", "diffHunk": "@@ -40,25 +40,30 @@\n @ApiStatus.NonExtendable\n public interface BlockApiCache<A, C> {\n \t/**\n-\t * Retrieve an Api from a block in the world, using the world and the position passed at creation time.\n+\t * Attempt to retrieve an API from a block in the world, using the world and the position passed at creation time.\n \t *\n-\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#get(BlockState, Object)}.\n+\t * <p>Note: If the block state is known, it is more efficient to use {@link BlockApiCache#find(BlockState, Object)}.\n+\t *\n+\t * @param context Additional context for the query, defined by type parameter C.\n+\t * @return The retrieved API, or {@code null} if no API was found.", "originalCommit": "3a111356677cb11e8534e748764c0fa09e5823ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MDg0OQ==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579890849", "bodyText": "I find context additional context for the query much harder to parse than context Additional context for the query, defined by type parameter C. as it's harder to directly tell where the parameter name ends and where the description starts.", "author": "Technici4n", "createdAt": "2021-02-22T00:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTA2Nw==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891067", "bodyText": "Also, the whole PR is consistent with itself and it's an entirely new module - nobody complained the first time and I really don't feel like going through all of the very extensive javadoc one more time to make it less readable in the end.", "author": "Technici4n", "createdAt": "2021-02-22T00:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTI5NQ==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891295", "bodyText": "You should just document what C is in class's javadoc. You have the C as parameter type, so people already know it's C", "author": "liach", "createdAt": "2021-02-22T00:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MTc4Ng==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579891786", "bodyText": "In this particular case, the parameters are not documented in BlockApiCache because they are the same as those of BlockApiLookup, and the cache already refers to it. I added this comment in BlockApiCache to be consistent with BlockApiLookup#find where it's imo necessary anyway due to find being one of the API entrypoints, and people might miss the @param <C> at the end of the huge javadoc.", "author": "Technici4n", "createdAt": "2021-02-22T00:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5Mjk3MQ==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892971", "bodyText": "might miss the @param <C> at the end of the huge javadoc\n\nAll parameters are generated alike as they are block tags whose contents are appended to end of member output. Per your argument, you shouldn't add param tags for method parameters because they might be missed.\nImo it's still best to document them in class. If you document the params, javadoc will generate the link for param C so when you click the clickable C in method parameter types, you will be redirected to the definition of the type parameter at the top of the class", "author": "liach", "createdAt": "2021-02-22T00:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5NTM1Nw==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579895357", "bodyText": "IntelliJ does not seem to link the class directly, so I kept that comment in the javadoc of the find methods, but I also added the params to BlockApiCache for extra clarity and for web browser javadoc users. Hope that works for you.", "author": "Technici4n", "createdAt": "2021-02-22T00:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4ODk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "74b89fb2ff28a6e3450dd67e8ab7cdb8392f8bbf", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\nindex fe045d2f..8a6ff939 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/block/BlockApiCache.java\n\n@@ -35,6 +35,8 @@ import net.fabricmc.fabric.impl.lookup.block.BlockApiLookupImpl;\n  * <p>This object caches the block entity at the target position, and the last used API provider, removing those queries.\n  * If a block entity is available or if the block state is passed as a parameter, the block state doesn't have to be looked up either.\n  *\n+ * @param <A> The type of the API.\n+ * @param <C> The type of the additional context object.\n  * @see BlockApiLookup\n  */\n @ApiStatus.NonExtendable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892422", "bodyText": "the reason checkstyle complained here is you need to use the html entity codes for < and >", "author": "i509VCB", "createdAt": "2021-02-22T00:26:22Z", "path": "fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.lookup.v1.custom;\n+\n+import java.util.Objects;\n+\n+import org.jetbrains.annotations.ApiStatus;\n+\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.impl.lookup.custom.ApiLookupMapImpl;\n+\n+//CHECKSTYLE.OFF: JavadocStyle - Checkstyle didn't like <A, C>, even though {@code ... } already escapes it.\n+/**\n+ * A a map meant to be used as the backing storage for custom {@code ApiLookup} instances,\n+ * to implement a custom equivalent of {@link net.fabricmc.fabric.api.lookup.v1.block.BlockApiLookup#get BlockApiLookup#get}.\n+ *\n+ * <p><h3>Usage Example</h3>\n+ * We will be implementing the following simplified version of an API lookup interface for item stacks\n+ * to illustrate how to use {@link ApiLookupMap} and {@link ApiProviderMap}.\n+ * <pre>{@code\n+ * public interface ItemStackApiLookup<A, C> {\n+ *     static <A, C> ItemStackApiLookup<A, C> get(Identifier lookupId, Class<A> apiClass, Class<C> contextClass) {\n+ *         return ItemStackApiLookupImpl.get(lookupId, apiClass, contextClass);\n+ *     }\n+ *     // Find an API instance.\n+ *     \uff20Nullable\n+ *     A find(ItemStack stack, C context);\n+ *     // Expose the API for some item.\n+ *     void register(ItemStackApiProvider<A, C> provider, Item item);", "originalCommit": "5d4dc7627836be462e19fc4fc93fc096b334bdd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjcxNA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892714", "bodyText": "Then it fails to render correctly as the {@code} tag already escapes them, I tried that first...", "author": "Technici4n", "createdAt": "2021-02-22T00:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjgwOA==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579892808", "bodyText": "It won't render in IDE but the doclet will render it", "author": "i509VCB", "createdAt": "2021-02-22T00:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MzI1Mg==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579893252", "bodyText": "gradlew javadoc was unable to render them correctly when I tried on my laptop - just disable the inspection and be done with it, there are more important things in life and javadoc escaping is weird anyway. :P", "author": "Technici4n", "createdAt": "2021-02-22T00:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5NjQ1Nw==", "url": "https://github.com/FabricMC/fabric/pull/1234#discussion_r579896457", "bodyText": "Fun fact: the \uff20 symbol in the javadoc is not a regular @ \ud83d\ude06 (https://stackoverflow.com/a/46332643/13567109).", "author": "Technici4n", "createdAt": "2021-02-22T00:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5MjQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "80a0ea336f8fe4f07a70c7012266a71577a64e34", "chunk": "diff --git a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\nindex cc42bdbd..d1c4804b 100644\n--- a/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\n+++ b/fabric-api-lookup-api-v1/src/main/java/net/fabricmc/fabric/api/lookup/v1/custom/ApiLookupMap.java\n\n@@ -100,7 +100,7 @@ public interface ApiLookupMap<L> extends Iterable<L> {\n \t * @param lookupFactory The factory that is used to create API lookup instances.\n \t */\n \tstatic <L> ApiLookupMap<L> create(LookupFactory<L> lookupFactory) {\n-\t\tObjects.requireNonNull(lookupFactory, \"Lookup factory cannot be null\");\n+\t\tObjects.requireNonNull(lookupFactory, \"Lookup factory may not be null.\");\n \n \t\treturn new ApiLookupMapImpl<>(lookupFactory);\n \t}\n"}}, {"oid": "74b89fb2ff28a6e3450dd67e8ab7cdb8392f8bbf", "url": "https://github.com/FabricMC/fabric/commit/74b89fb2ff28a6e3450dd67e8ab7cdb8392f8bbf", "message": "Documentation fixes", "committedDate": "2021-02-22T00:37:35Z", "type": "commit"}, {"oid": "bbac8fdb4116de2a35378ebcc27f49c59980ce50", "url": "https://github.com/FabricMC/fabric/commit/bbac8fdb4116de2a35378ebcc27f49c59980ce50", "message": "Fix checkstyle.xml typo", "committedDate": "2021-03-02T09:47:50Z", "type": "commit"}, {"oid": "4c5cead071a5b7db1e9e58a04c6fb0de64389293", "url": "https://github.com/FabricMC/fabric/commit/4c5cead071a5b7db1e9e58a04c6fb0de64389293", "message": "Slightly improve non-nullability checks", "committedDate": "2021-03-04T14:11:40Z", "type": "commit"}, {"oid": "80a0ea336f8fe4f07a70c7012266a71577a64e34", "url": "https://github.com/FabricMC/fabric/commit/80a0ea336f8fe4f07a70c7012266a71577a64e34", "message": "Tidy null checks.\n\n* Use \"may not\" instead of \"cannot\", and end sentences with a period.\n* Remove null checks for vararg parameters: passing a null vararg is unlikely and will cause an NPE directly anyway.", "committedDate": "2021-03-04T21:10:28Z", "type": "commit"}, {"oid": "01a003588b3966964ead0fae59bd3c25d5bd5661", "url": "https://github.com/FabricMC/fabric/commit/01a003588b3966964ead0fae59bd3c25d5bd5661", "message": "Fix tiny javadoc mistake", "committedDate": "2021-03-08T19:33:06Z", "type": "commit"}]}