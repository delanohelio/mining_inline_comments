{"pr_number": 641, "pr_title": "Create Game Rule API", "pr_createdAt": "2020-05-26T02:50:08Z", "pr_url": "https://github.com/FabricMC/fabric/pull/641", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NzA5OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430177099", "bodyText": "This shouldn't exist, should just use MinecraftClient.getInstance()", "author": "shedaniel", "createdAt": "2020-05-26T06:14:49Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/ScreenAccessor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.gamerule.client;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.Screen;\n+\n+@Mixin(Screen.class)\n+public interface ScreenAccessor {\n+\t@Accessor(\"client\")\n+\tMinecraftClient getClient();", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MTUwNQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430181505", "bodyText": "Though the client is a singleton, I don't think referring to the singleton would be great if mojang next snapshot decides the client is no longer a singleton. Plus in a screen assuming you aren't accessing it from outside, would you use the field/getter or the singleton call", "author": "i509VCB", "createdAt": "2020-05-26T06:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NzA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4MjgxMQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430182811", "bodyText": "There are 212 usages of MinecraftClient.getInstance() and that includes things like AbstractButtonWidget using that to get the sound manager, a lot more things would break before yours imo.\nAlso Mojang even uses that in non-static inner class of screens", "author": "shedaniel", "createdAt": "2020-05-26T06:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NzA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/ScreenAccessor.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/ScreenAccessor.java\ndeleted file mode 100644\nindex 8120890b..00000000\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/ScreenAccessor.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.mixin.gamerule.client;\n-\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.gen.Accessor;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.gui.screen.Screen;\n-\n-@Mixin(Screen.class)\n-public interface ScreenAccessor {\n-\t@Accessor(\"client\")\n-\tMinecraftClient getClient();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MTczOA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430271738", "bodyText": "Why is there no getter here?", "author": "ChloeDawn", "createdAt": "2020-05-26T09:17:09Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n+ */\n+public final class CustomGameRuleCategory {\n+\tpublic static CustomGameRuleCategory of(Identifier id, Text name) {\n+\t\treturn new CustomGameRuleCategory(id, name);\n+\t}\n+\n+\tprivate final Identifier id;", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NTcwOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430575709", "bodyText": "I don't really expose a way to get the custom category from the rule currently. Which would probably make sense in that case.", "author": "i509VCB", "createdAt": "2020-05-26T17:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nsimilarity index 88%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nindex cb056aaa..07ac7720 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n\n@@ -23,14 +23,10 @@ import net.minecraft.util.Identifier;\n  * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n  */\n public final class CustomGameRuleCategory {\n-\tpublic static CustomGameRuleCategory of(Identifier id, Text name) {\n-\t\treturn new CustomGameRuleCategory(id, name);\n-\t}\n-\n \tprivate final Identifier id;\n \tprivate final Text name;\n \n-\tprivate CustomGameRuleCategory(Identifier id, Text name) {\n+\tpublic CustomGameRuleCategory(Identifier id, Text name) {\n \t\tthis.id = id;\n \t\tthis.name = name;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MjYwMA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430272600", "bodyText": "Why is this needed? RuleTypeConsumer is generic, it supports any rule implementations", "author": "ChloeDawn", "createdAt": "2020-05-26T09:18:34Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n+\n+/**\n+ * An extended RuleTypeConsumer which supports fabric's own rule types.\n+ */\n+public interface FabricRuleTypeConsumer extends GameRules.RuleTypeConsumer {", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NTMxMg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430575312", "bodyText": "Required due to the RuleAcceptor which is used to make the widgets on the screen.", "author": "i509VCB", "createdAt": "2020-05-26T17:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MjYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\nsimilarity index 70%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\nindex 58a2bf41..148cc8f7 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n\n@@ -25,13 +25,13 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n /**\n  * An extended RuleTypeConsumer which supports fabric's own rule types.\n  */\n-public interface FabricRuleTypeConsumer extends GameRules.RuleTypeConsumer {\n-\tdefault void acceptDoubleRule(GameRules.RuleKey<DoubleRule> key, GameRules.RuleType<DoubleRule> type) {\n+public interface FabricRuleTypeConsumer extends GameRules.TypeConsumer {\n+\tdefault void acceptDoubleRule(GameRules.Key<DoubleRule> key, GameRules.Type<DoubleRule> type) {\n \t}\n \n-\tdefault void acceptFloatRule(GameRules.RuleKey<FloatRule> key, GameRules.RuleType<FloatRule> type) {\n+\tdefault void acceptFloatRule(GameRules.Key<FloatRule> key, GameRules.Type<FloatRule> type) {\n \t}\n \n-\tdefault <E extends Enum<E>> void acceptEnumRule(GameRules.RuleKey<EnumRule<E>> key, GameRules.RuleType<EnumRule<E>> type) {\n+\tdefault <E extends Enum<E>> void acceptEnumRule(GameRules.Key<EnumRule<E>> key, GameRules.Type<EnumRule<E>> type) {\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mjk0NA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430272944", "bodyText": "Invokers with return values should use call not invoke imo", "author": "ChloeDawn", "createdAt": "2020-05-26T09:19:13Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n+import net.fabricmc.fabric.mixin.gamerule.GameRulesAccessor;\n+\n+public final class GameRuleRegistry {\n+\tprivate GameRuleRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a {@link GameRules.Rule}.\n+\t *\n+\t * @param name   the name of the rule\n+\t * @param category the category of this rule\n+\t * @param type the rule type\n+\t * @param <T>  the type of rule\n+\t * @return a rule key which can be used to query the value of the rule\n+\t * @throws IllegalStateException if a rule of the same name already exists\n+\t */\n+\tpublic static <T extends GameRules.Rule<T>> GameRules.RuleKey<T> register(String name, GameRules.RuleCategory category, GameRules.RuleType<T> type) {\n+\t\treturn GameRulesAccessor.invokeRegister(name, category, type);", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3Mzk0OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430573949", "bodyText": "I can garuntee there is no standard for this. All the more reason for conventions.", "author": "i509VCB", "createdAt": "2020-05-26T17:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mjk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nsimilarity index 88%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nindex 054dc06f..20d10575 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\n\n@@ -36,7 +36,7 @@ public final class GameRuleRegistry {\n \t * @throws IllegalStateException if a rule of the same name already exists\n \t */\n \tpublic static <T extends GameRules.Rule<T>> GameRules.RuleKey<T> register(String name, GameRules.RuleCategory category, GameRules.RuleType<T> type) {\n-\t\treturn GameRulesAccessor.invokeRegister(name, category, type);\n+\t\treturn GameRulesAccessor.callRegister(name, category, type);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzMwOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430273309", "bodyText": "exists/isRegistered?", "author": "ChloeDawn", "createdAt": "2020-05-26T09:19:52Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n+import net.fabricmc.fabric.mixin.gamerule.GameRulesAccessor;\n+\n+public final class GameRuleRegistry {\n+\tprivate GameRuleRegistry() {\n+\t}\n+\n+\t/**\n+\t * Registers a {@link GameRules.Rule}.\n+\t *\n+\t * @param name   the name of the rule\n+\t * @param category the category of this rule\n+\t * @param type the rule type\n+\t * @param <T>  the type of rule\n+\t * @return a rule key which can be used to query the value of the rule\n+\t * @throws IllegalStateException if a rule of the same name already exists\n+\t */\n+\tpublic static <T extends GameRules.Rule<T>> GameRules.RuleKey<T> register(String name, GameRules.RuleCategory category, GameRules.RuleType<T> type) {\n+\t\treturn GameRulesAccessor.invokeRegister(name, category, type);\n+\t}\n+\n+\t/**\n+\t * Registers a {@link GameRules.Rule} with a custom category.\n+\t *\n+\t * @param name \tthe name of the rule\n+\t * @param category the category of this rule\n+\t * @param type the rule type\n+\t * @param <T>  the type of rule\n+\t * @return a rule key which can be used to query the value of the rule\n+\t * @throws IllegalStateException if a rule of the same name already exists\n+\t */\n+\tpublic static <T extends GameRules.Rule<T>> GameRules.RuleKey<T> register(String name, CustomGameRuleCategory category, GameRules.RuleType<T> type) {\n+\t\tfinal GameRules.RuleKey<T> key = GameRulesAccessor.invokeRegister(name, GameRules.RuleCategory.MISC, type);\n+\t\t((RuleKeyInternals) (Object) key).fabric_setCustomCategory(category);\n+\t\treturn key;\n+\t}\n+\n+\t/**\n+\t * Checks if a name for a rule is already being used.\n+\t *\n+\t * @param ruleName the rule name to test\n+\t * @return true if the name is taken.\n+\t */\n+\tpublic static boolean isRuleNameUsed(String ruleName) {", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nsimilarity index 88%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\nindex 054dc06f..20d10575 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleRegistry.java\n\n@@ -36,7 +36,7 @@ public final class GameRuleRegistry {\n \t * @throws IllegalStateException if a rule of the same name already exists\n \t */\n \tpublic static <T extends GameRules.Rule<T>> GameRules.RuleKey<T> register(String name, GameRules.RuleCategory category, GameRules.RuleType<T> type) {\n-\t\treturn GameRulesAccessor.invokeRegister(name, category, type);\n+\t\treturn GameRulesAccessor.callRegister(name, category, type);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mzg2Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430273866", "bodyText": "Missing command result", "author": "ChloeDawn", "createdAt": "2020-05-26T09:20:45Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double lowerBound;\n+\tprivate final double upperBound;\n+\tprivate double value;\n+\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.RuleType<DoubleRule> type, double value, double lowerBound, double upperBound) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.lowerBound = lowerBound;\n+\t\tthis.upperBound = upperBound;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);\n+\n+\t\tif (this.lowerBound > d || this.upperBound < d) {\n+\t\t\tLOGGER.warn(\"Failed to parse double {}. Was out of bounds {} - {}\", value, this.lowerBound, this.upperBound);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.value = d;\n+\t}\n+\n+\tprivate static double parseDouble(String string) {\n+\t\tif (!string.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn Double.parseDouble(string);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse double {}\", string);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn 0.0D;\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn Double.toString(this.value);\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn 0;", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nsimilarity index 98%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex e1ba317d..95a0eb27 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -33,6 +33,9 @@ public class DoubleRule extends GameRules.Rule<DoubleRule> implements Validateab\n \tprivate final double upperBound;\n \tprivate double value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic DoubleRule(GameRules.RuleType<DoubleRule> type, double value, double lowerBound, double upperBound) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDA2OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430274069", "bodyText": "Missing command result", "author": "ChloeDawn", "createdAt": "2020-05-26T09:21:06Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn 0;", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nsimilarity index 97%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 68f749ba..1a6c20d8 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -38,11 +38,17 @@ public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprotected final Collection<E> supportedValues;\n \tprotected E value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n \t\tthis(type, value, Arrays.asList(supportedValues));\n \t}\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDM3OA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430274378", "bodyText": "What is the purpose of this? Why does it need to be part of this object?", "author": "ChloeDawn", "createdAt": "2020-05-26T09:21:35Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn 0;\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> getThis() {\n+\t\treturn this;\n+\t}\n+\n+\tpublic Class<E> getEnumClass() {\n+\t\treturn this.classType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.value.toString();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> copy() {\n+\t\treturn new EnumRule<E>(this.type, this.value, this.supportedValues);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(EnumRule<E> rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;\n+\t\tthis.changed(minecraftServer);\n+\t}\n+\n+\tpublic E get() {\n+\t\treturn this.value;\n+\t}\n+\n+\tpublic E cycle(E start) {", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2ODkzMw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430568933", "bodyText": "Used to cycle the value within the list of supported values on the gamerules screen.", "author": "i509VCB", "createdAt": "2020-05-26T17:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nsimilarity index 97%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 68f749ba..1a6c20d8 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -38,11 +38,17 @@ public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprotected final Collection<E> supportedValues;\n \tprotected E value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n \t\tthis(type, value, Arrays.asList(supportedValues));\n \t}\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDc2MQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430274761", "bodyText": "Missing command result", "author": "ChloeDawn", "createdAt": "2020-05-26T09:22:13Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final float lowerBound;\n+\tprivate final float upperBound;\n+\tprivate float value;\n+\n+\t@Deprecated\n+\tpublic FloatRule(GameRules.RuleType<FloatRule> type, float value, float lowerBound, float upperBound) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.lowerBound = lowerBound;\n+\t\tthis.upperBound = upperBound;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Float.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal float f = FloatRule.parseFloat(value);\n+\n+\t\tif (this.lowerBound > f || this.upperBound < f) {\n+\t\t\tLOGGER.warn(\"Failed to parse float {}. Was out of bounds {} - {}\", value, this.lowerBound, this.upperBound);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.value = f;\n+\t}\n+\n+\tprivate static float parseFloat(String string) {\n+\t\tif (!string.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn Float.parseFloat(string);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse float {}\", string);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn 0.0F;\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn Float.toString(this.value);\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn 0;", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\nsimilarity index 98%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\nindex c1fd16fe..fb703283 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n\n@@ -33,6 +33,9 @@ public class FloatRule extends GameRules.Rule<FloatRule> implements Validateable\n \tprivate final float upperBound;\n \tprivate float value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic FloatRule(GameRules.RuleType<FloatRule> type, float value, float lowerBound, float upperBound) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NTM5Nw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430275397", "bodyText": "The namespacing on these methods are not needed as the method descriptors contain a unique type", "author": "ChloeDawn", "createdAt": "2020-05-26T09:23:17Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n+\n+public interface RuleKeyInternals {\n+\t/* @Nullable */\n+\tCustomGameRuleCategory fabric_getCustomCategory();", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNDQyNw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430634427", "bodyText": "As far as I can tell, the prefixing on internal methods is standard in Fabric API.", "author": "Pyrofab", "createdAt": "2020-05-26T18:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NTM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nsimilarity index 95%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nindex 97777864..7c5bbcd7 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\n\n@@ -18,7 +18,7 @@ package net.fabricmc.fabric.impl.gamerule;\n \n import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n \n-public interface RuleKeyInternals {\n+public interface RuleKeyExtensions {\n \t/* @Nullable */\n \tCustomGameRuleCategory fabric_getCustomCategory();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Njc0Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430276743", "bodyText": "Inconsistency with other accessors\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthrow new AssertionError(\"Untransformed accessor\");\n          \n          \n            \n            \t\tthrow new AssertionError(\"This shouldn't happen!\");", "author": "ChloeDawn", "createdAt": "2020-05-26T09:25:35Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.gamerule;\n+\n+import java.util.function.BiConsumer;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+@Mixin(GameRules.BooleanRule.class)\n+public interface BooleanRuleAccessor {\n+\t@Invoker\n+\tstatic GameRules.RuleType<GameRules.BooleanRule> invokeCreate(boolean initialValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changeCallback) {\n+\t\tthrow new AssertionError(\"Untransformed accessor\");", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NzQzMw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430577433", "bodyText": "It's inconsistent everywhere to be fair.", "author": "i509VCB", "createdAt": "2020-05-26T17:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Njc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nsimilarity index 95%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nindex 34e9145d..54407c95 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\n\n@@ -28,6 +28,6 @@ import net.minecraft.world.GameRules;\n public interface BooleanRuleAccessor {\n \t@Invoker\n \tstatic GameRules.RuleType<GameRules.BooleanRule> invokeCreate(boolean initialValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changeCallback) {\n-\t\tthrow new AssertionError(\"Untransformed accessor\");\n+\t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzk5Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430277993", "bodyText": "This can be replaced with a Guava ArrayListMultimap", "author": "ChloeDawn", "createdAt": "2020-05-26T09:27:32Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.gamerule.client;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n+import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n+\n+@Mixin(EditGameRulesScreen.RuleListWidget.class)\n+public abstract class RuleListWidgetMixin extends net.minecraft.client.gui.widget.EntryListWidget<EditGameRulesScreen.AbstractRuleWidget> {\n+\t@Unique\n+\tprivate final Map<CustomGameRuleCategory, ArrayList<EditGameRulesScreen.AbstractRuleWidget>> fabricCategories = new HashMap<>();", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0NTAxMw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430645013", "bodyText": "If we do keep the current Map, it should probably be a Map<CustomGameRuleCategory, List<EditGameRulesScreen.AbstractRuleWidget>>", "author": "Pyrofab", "createdAt": "2020-05-26T19:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MTQ3Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430651476", "bodyText": "I'd probably keep it as a regular Map<Cate, List<RuleWidget>>. Multimaps are gonna require some hackery anyways.", "author": "i509VCB", "createdAt": "2020-05-26T19:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\nsimilarity index 94%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\nindex 6d3a90d3..f231f50a 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\n\n@@ -18,6 +18,7 @@ package net.fabricmc.fabric.mixin.gamerule.client;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.spongepowered.asm.mixin.Mixin;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4Mjk4OA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430282988", "bodyText": "This should ensure the passed value is non-null before calling getDeclaredClass, to avoid an NPE and instead provide a more contextual IllegalArgumentException", "author": "ChloeDawn", "createdAt": "2020-05-26T09:35:45Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNTU3NA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430635574", "bodyText": "NullPointerException due to null arguments is standard, although it could be thrown manually to provide context.", "author": "Pyrofab", "createdAt": "2020-05-26T18:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4Mjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NDgyMw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430654823", "bodyText": "Plus these constructors are deprecated since you should not be calling them. Unless we want to result to mixins into the api itself to expose the ctors,\nThen again we should be null checking in the rule factories.", "author": "i509VCB", "createdAt": "2020-05-26T19:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4Mjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nsimilarity index 97%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 68f749ba..1a6c20d8 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -38,11 +38,17 @@ public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprotected final Collection<E> supportedValues;\n \tprotected E value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n \t\tthis(type, value, Arrays.asList(supportedValues));\n \t}\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4NDYwNA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430284604", "bodyText": "The API should require the enum class Class<E> explicitly", "author": "ChloeDawn", "createdAt": "2020-05-26T09:38:28Z", "path": "fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {", "originalCommit": "e3d18f1f7b2e55151eb68b2b81020e2133198ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MDI0Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430570246", "bodyText": "Unessecary imo, you can derive it from the default value.", "author": "i509VCB", "createdAt": "2020-05-26T17:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4NDYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "chunk": "diff --git a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nsimilarity index 97%\nrename from fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 68f749ba..1a6c20d8 100644\n--- a/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -38,11 +38,17 @@ public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprotected final Collection<E> supportedValues;\n \tprotected E value;\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, E[] supportedValues) {\n \t\tthis(type, value, Arrays.asList(supportedValues));\n \t}\n \n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n \t@Deprecated\n \tpublic EnumRule(GameRules.RuleType<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n \t\tsuper(type);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNDUyOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r430704529", "bodyText": "Why, just use the constructor", "author": "liach", "createdAt": "2020-05-26T20:59:27Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n+ */\n+public final class CustomGameRuleCategory {\n+\tpublic static CustomGameRuleCategory of(Identifier id, Text name) {", "originalCommit": "2dc9d5e7a0e044d22154d6dfdd6d07be6ed635a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nindex cb056aaa..07ac7720 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n\n@@ -23,14 +23,10 @@ import net.minecraft.util.Identifier;\n  * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n  */\n public final class CustomGameRuleCategory {\n-\tpublic static CustomGameRuleCategory of(Identifier id, Text name) {\n-\t\treturn new CustomGameRuleCategory(id, name);\n-\t}\n-\n \tprivate final Identifier id;\n \tprivate final Text name;\n \n-\tprivate CustomGameRuleCategory(Identifier id, Text name) {\n+\tpublic CustomGameRuleCategory(Identifier id, Text name) {\n \t\tthis.id = id;\n \t\tthis.name = name;\n \t}\n"}}, {"oid": "6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "url": "https://github.com/FabricMC/fabric/commit/6f613113b1152e0345f1e4bcf74e1ac7be0f0ce9", "message": "Fix translation keys and update to 20w22a", "committedDate": "2020-06-03T07:08:24Z", "type": "forcePushed"}, {"oid": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "url": "https://github.com/FabricMC/fabric/commit/ab6cf760e7a051f2c010b297414d08e36dadbe05", "message": "Update to 1.16-pre1", "committedDate": "2020-06-04T20:53:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjA5Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546093", "bodyText": "shouldn't Identifier be public, or have a getter", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:00:28Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.text.Text;\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n+ */\n+public final class CustomGameRuleCategory {\n+\tprivate final Identifier id;", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nindex 07ac7720..894d2ac3 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n\n@@ -16,8 +16,13 @@\n \n package net.fabricmc.fabric.api.gamerule.v1;\n \n+import java.util.Optional;\n+\n import net.minecraft.text.Text;\n import net.minecraft.util.Identifier;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n \n /**\n  * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjE4NQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546185", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:00:39Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1NTM0Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435555343", "bodyText": "license is not my concern, different PR for that", "author": "i509VCB", "createdAt": "2020-06-04T21:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\nindex 148cc8f7..27b6ef6c 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n\n@@ -23,7 +23,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n \n /**\n- * An extended RuleTypeConsumer which supports fabric's own rule types.\n+ * An extended RuleTypeConsumer which supports Fabric's own rule types.\n  */\n public interface FabricRuleTypeConsumer extends GameRules.TypeConsumer {\n \tdefault void acceptDoubleRule(GameRules.Key<DoubleRule> key, GameRules.Type<DoubleRule> type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjIyOA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546228", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:00:44Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\nindex 07ac7720..894d2ac3 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/CustomGameRuleCategory.java\n\n@@ -16,8 +16,13 @@\n \n package net.fabricmc.fabric.api.gamerule.v1;\n \n+import java.util.Optional;\n+\n import net.minecraft.text.Text;\n import net.minecraft.util.Identifier;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n \n /**\n  * Utility class for registering GameRule objects with custom categories outside of the categories Minecraft provides.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjY0Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546643", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:01:38Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\nindex b364d8eb..baf8e948 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\n\n@@ -85,12 +85,12 @@ public final class RuleFactory {\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound) {\n-\t\treturn createDoubleRule(defaultValue, lowerBound, Integer.MAX_VALUE, (server, rule) -> {\n+\t\treturn createDoubleRule(defaultValue, lowerBound, Double.MAX_VALUE, (server, rule) -> {\n \t\t});\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound, BiConsumer<MinecraftServer, DoubleRule> changedCallback) {\n-\t\treturn createDoubleRule(defaultValue, lowerBound, Integer.MAX_VALUE, changedCallback);\n+\t\treturn createDoubleRule(defaultValue, lowerBound, Double.MAX_VALUE, changedCallback);\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound, double upperBound) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjgxMQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546811", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:02:00Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 4ad6eaf1..48467819 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -26,7 +26,7 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final double lowerBound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NjkxOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435546919", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:02:13Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 93ff13d2..86adcfa3 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -31,12 +31,12 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+public final class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final Class<E> classType;\n-\tprotected final Collection<E> supportedValues;\n-\tprotected E value;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n \n \t/**\n \t * You should not be calling this constructor!\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzA2OA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547068", "bodyText": "if those 2 are protected, why isn't the classType protected", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:02:33Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1NTgzOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435555839", "bodyText": "Since there is a getter for class type. The supportedValues and value thing can probably be made private", "author": "i509VCB", "createdAt": "2020-06-04T21:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 93ff13d2..86adcfa3 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -31,12 +31,12 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+public final class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final Class<E> classType;\n-\tprotected final Collection<E> supportedValues;\n-\tprotected E value;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n \n \t/**\n \t * You should not be calling this constructor!\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzE1Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547152", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:02:43Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\nindex 1d82630a..08fcc8ba 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n\n@@ -26,7 +26,7 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n+public final class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final float lowerBound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzM1Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547353", "bodyText": "if all the fields are private, is this supposed to be a final class", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:09Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\nindex 1d82630a..08fcc8ba 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n\n@@ -26,7 +26,7 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n+public final class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final float lowerBound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzQxMA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547410", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:16Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/LiteralRule.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/LiteralRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/LiteralRule.java\nindex 8de1ea3f..c930540c 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/LiteralRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/LiteralRule.java\n\n@@ -21,13 +21,18 @@ import com.mojang.brigadier.context.CommandContext;\n import net.minecraft.server.command.ServerCommandSource;\n import net.minecraft.world.GameRules;\n \n-public abstract class LiteralRule<T extends GameRules.Rule<T>> extends GameRules.Rule<T> {\n+/**\n+ * Represents a game rule which uses literals for the argument in commands.\n+ *\n+ * @param <T> the type of rule\n+ */\n+public abstract class LiteralRule<T extends LiteralRule<T>> extends GameRules.Rule<T> {\n \tprotected LiteralRule(GameRules.Type<T> type) {\n \t\tsuper(type);\n \t}\n \n \t@Override\n \tprotected final void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n-\t\t// Do nothing. We use a different system for application\n+\t\t// Do nothing. We use a different system for application with literals\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzUwOA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547508", "bodyText": "mm yes predicates are gone crab", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:28Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+public interface ValidateableRule {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\nindex 0a431063..a306f987 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\n\n@@ -16,6 +16,16 @@\n \n package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n+/**\n+ * Represents a type of game rule which can validate an input.\n+ * This can be used to enforce syntax or clamp values.\n+ */\n public interface ValidateableRule {\n+\t/**\n+\t * Validates if a rule can accept the input.\n+\t *\n+\t * @param value the value to validate\n+\t * @return true if the value can be accepted.\n+\t */\n \tboolean validate(String value);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzU1Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547552", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:32Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\nindex 0a431063..a306f987 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/ValidateableRule.java\n\n@@ -16,6 +16,16 @@\n \n package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n+/**\n+ * Represents a type of game rule which can validate an input.\n+ * This can be used to enforce syntax or clamp values.\n+ */\n public interface ValidateableRule {\n+\t/**\n+\t * Validates if a rule can accept the input.\n+\t *\n+\t * @param value the value to validate\n+\t * @return true if the value can be accepted.\n+\t */\n \tboolean validate(String value);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzU5OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547599", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:36Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleCommand.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleCommand.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleCommand.java\nindex 31e4cbf9..20eab9d5 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleCommand.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleCommand.java\n\n@@ -16,6 +16,9 @@\n \n package net.fabricmc.fabric.impl.gamerule;\n \n+import static net.minecraft.server.command.CommandManager.literal;\n+\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n import com.mojang.brigadier.context.CommandContext;\n import com.mojang.brigadier.exceptions.CommandSyntaxException;\n import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0Nzc2OA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547768", "bodyText": "same here, should this be final or the fields protected", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:03:56Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleType.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule;\n+\n+import static net.minecraft.server.command.CommandManager.literal;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+import com.mojang.brigadier.tree.LiteralCommandNode;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+\n+public class EnumRuleType<E extends Enum<E>> extends LiteralRuleType<EnumRule<E>> {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleType.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleType.java\nindex 5d7b7a5f..b5b5dd9f 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleType.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/EnumRuleType.java\n\n@@ -30,7 +30,7 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n \n-public class EnumRuleType<E extends Enum<E>> extends LiteralRuleType<EnumRule<E>> {\n+public final class EnumRuleType<E extends Enum<E>> extends LiteralRuleType<EnumRule<E>> {\n \tprivate final E[] supportedValues;\n \n \tpublic EnumRuleType(Function<GameRules.Type<EnumRule<E>>, EnumRule<E>> ruleFactory, BiConsumer<MinecraftServer, EnumRule<E>> changeCallback, E[] supportedValues, GameRules.Acceptor<EnumRule<E>> acceptor) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzgxMA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547810", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:04:02Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\nindex 56f299f7..bcd90e86 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\n\n@@ -27,6 +27,9 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.LiteralRule;\n import net.fabricmc.fabric.mixin.gamerule.GameRuleCommandAccessor;\n \n public final class LiteralRuleCommand {\n+\tprivate LiteralRuleCommand() {\n+\t}\n+\n \tpublic static <T extends LiteralRule<T>> void register(LiteralArgumentBuilder<ServerCommandSource> literalArgumentBuilder, GameRules.Key<T> key, LiteralRuleType<T> type) {\n \t\tliteralArgumentBuilder.then(literal(key.getName())\n \t\t\t\t.executes(context -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0Nzg0MQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547841", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:04:07Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleType.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleType.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleType.java\ndeleted file mode 100644\nindex b5cf53cb..00000000\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleType.java\n+++ /dev/null\n\n@@ -1,48 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.impl.gamerule;\n-\n-import java.util.function.BiConsumer;\n-import java.util.function.Function;\n-import java.util.function.Supplier;\n-\n-import com.mojang.brigadier.arguments.ArgumentType;\n-import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n-import com.mojang.brigadier.builder.RequiredArgumentBuilder;\n-\n-import net.minecraft.server.MinecraftServer;\n-import net.minecraft.server.command.ServerCommandSource;\n-import net.minecraft.world.GameRules;\n-\n-import net.fabricmc.fabric.api.gamerule.v1.rule.LiteralRule;\n-\n-public abstract class LiteralRuleType<T extends LiteralRule<T>> extends GameRules.Type<T> {\n-\tpublic LiteralRuleType(Supplier<ArgumentType<?>> argumentType, Function<GameRules.Type<T>, T> ruleFactory, BiConsumer<MinecraftServer, T> changeCallback, GameRules.Acceptor<T> acceptor) {\n-\t\tsuper(argumentType, ruleFactory, changeCallback, acceptor);\n-\t}\n-\n-\t@Override\n-\t@Deprecated\n-\tpublic final RequiredArgumentBuilder<ServerCommandSource, ?> argument(String name) {\n-\t\treturn super.argument(name);\n-\t}\n-\n-\t/**\n-\t * Literal Rule types should implement this method in order to register their nodes on the GameRule command.\n-\t */\n-\tpublic abstract void register(LiteralArgumentBuilder<ServerCommandSource> literalArgumentBuilder, GameRules.Key<T> key);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NzkwOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435547909", "bodyText": "gib private ctor", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:04:16Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule;\n+\n+import static net.minecraft.server.command.CommandManager.literal;\n+\n+import com.mojang.brigadier.builder.LiteralArgumentBuilder;\n+\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.LiteralRule;\n+import net.fabricmc.fabric.mixin.gamerule.GameRuleCommandAccessor;\n+\n+public final class LiteralRuleCommand {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\nindex 56f299f7..bcd90e86 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/LiteralRuleCommand.java\n\n@@ -27,6 +27,9 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.LiteralRule;\n import net.fabricmc.fabric.mixin.gamerule.GameRuleCommandAccessor;\n \n public final class LiteralRuleCommand {\n+\tprivate LiteralRuleCommand() {\n+\t}\n+\n \tpublic static <T extends LiteralRule<T>> void register(LiteralArgumentBuilder<ServerCommandSource> literalArgumentBuilder, GameRules.Key<T> key, LiteralRuleType<T> type) {\n \t\tliteralArgumentBuilder.then(literal(key.getName())\n \t\t\t\t.executes(context -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODAyNA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548024", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:04:29Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nsimilarity index 95%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nindex 97777864..7c5bbcd7 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\n\n@@ -18,7 +18,7 @@ package net.fabricmc.fabric.impl.gamerule;\n \n import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n \n-public interface RuleKeyInternals {\n+public interface RuleKeyExtensions {\n \t/* @Nullable */\n \tCustomGameRuleCategory fabric_getCustomCategory();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODI5Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548292", "bodyText": "\ud83d\udeb2 \ud83c\udfe0 secretly add intellij annotations /s, replace it with a doc for now I guess", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:05Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n+\n+public interface RuleKeyInternals {\n+\t/* @Nullable */", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1Nzk0Mw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435557943", "bodyText": "different pr will handle annotations. This is a marker for that PR", "author": "i509VCB", "createdAt": "2020-06-04T21:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nsimilarity index 95%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\nindex 97777864..7c5bbcd7 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyInternals.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/RuleKeyExtensions.java\n\n@@ -18,7 +18,7 @@ package net.fabricmc.fabric.impl.gamerule;\n \n import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n \n-public interface RuleKeyInternals {\n+public interface RuleKeyExtensions {\n \t/* @Nullable */\n \tCustomGameRuleCategory fabric_getCustomCategory();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODM0MQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548341", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:11Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\nindex 62259459..8044ca9a 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\n\n@@ -26,7 +26,7 @@ import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n import net.fabricmc.fabric.mixin.gamerule.IntRuleAccessor;\n \n-public class BoundedIntRule extends GameRules.IntRule {\n+public final class BoundedIntRule extends GameRules.IntRule {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final int lowerBound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODQ1NA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548454", "bodyText": "parameter protected or final class", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:29Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.rule;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+import net.fabricmc.fabric.mixin.gamerule.IntRuleAccessor;\n+\n+public class BoundedIntRule extends GameRules.IntRule {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1NjY2NQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435556665", "bodyText": "This is a special case, as it extends an already existing rule. Could make it final likely", "author": "i509VCB", "createdAt": "2020-06-04T21:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\nindex 62259459..8044ca9a 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/rule/BoundedIntRule.java\n\n@@ -26,7 +26,7 @@ import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n import net.fabricmc.fabric.mixin.gamerule.IntRuleAccessor;\n \n-public class BoundedIntRule extends GameRules.IntRule {\n+public final class BoundedIntRule extends GameRules.IntRule {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final int lowerBound;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODQ5MA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548490", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:33Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nindex 009e2d57..8d5a3555 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n\n@@ -34,7 +34,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n \tprivate final Text name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODUzMg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548532", "bodyText": "parameter protected or final class", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:39Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.widget;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import net.minecraft.class_5348;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.client.gui.widget.TextFieldWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+\n+@Environment(EnvType.CLIENT)\n+public class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nindex 009e2d57..8d5a3555 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n\n@@ -34,7 +34,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n \tprivate final Text name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODU2NQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548565", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:44Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\nindex ee059c15..0ffb8c86 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\n\n@@ -36,7 +36,7 @@ import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n \n @Environment(EnvType.CLIENT)\n-public class EnumRuleWidget<E extends Enum<E>> extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class EnumRuleWidget<E extends Enum<E>> extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final ButtonWidget buttonWidget;\n \tprivate final String rootTranslationKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODYwMA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548600", "bodyText": "parameter protected or final class", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:49Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.widget;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import net.minecraft.class_5348;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.client.gui.widget.ButtonWidget;\n+import net.minecraft.client.resource.language.I18n;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.text.Text;\n+import net.minecraft.text.TranslatableText;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+\n+@Environment(EnvType.CLIENT)\n+public class EnumRuleWidget<E extends Enum<E>> extends EditGameRulesScreen.AbstractRuleWidget {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\nindex ee059c15..0ffb8c86 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/EnumRuleWidget.java\n\n@@ -36,7 +36,7 @@ import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n \n @Environment(EnvType.CLIENT)\n-public class EnumRuleWidget<E extends Enum<E>> extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class EnumRuleWidget<E extends Enum<E>> extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final ButtonWidget buttonWidget;\n \tprivate final String rootTranslationKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODY0NQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548645", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:54Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\nindex eac92a3f..4047d1af 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\n\n@@ -34,7 +34,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public class FloatRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class FloatRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n \tprivate final Text name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODY3Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548676", "bodyText": "parameter protected or final class", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:05:59Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.widget;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import net.minecraft.class_5348;\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.Element;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.client.gui.widget.TextFieldWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n+import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+\n+@Environment(EnvType.CLIENT)\n+public class FloatRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\nindex eac92a3f..4047d1af 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/FloatRuleWidget.java\n\n@@ -34,7 +34,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public class FloatRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+public final class FloatRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n \tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n \tprivate final Text name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODczMQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548731", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:05Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nsimilarity index 82%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\nindex a928d024..34e9145d 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/BooleanRuleAccessor.java\n\n@@ -27,7 +27,7 @@ import net.minecraft.world.GameRules;\n @Mixin(GameRules.BooleanRule.class)\n public interface BooleanRuleAccessor {\n \t@Invoker\n-\tstatic GameRules.Type<GameRules.BooleanRule> invokeCreate(boolean initialValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changeCallback) {\n-\t\tthrow new AssertionError(\"This shouldn't happen!\");\n+\tstatic GameRules.RuleType<GameRules.BooleanRule> invokeCreate(boolean initialValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changeCallback) {\n+\t\tthrow new AssertionError(\"Untransformed accessor\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODc3OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548779", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:09Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nsimilarity index 89%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nindex 74f8399b..40d52125 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\n\n@@ -27,12 +27,12 @@ import net.minecraft.world.GameRules;\n @Mixin(GameRuleCommand.class)\n public interface GameRuleCommandAccessor {\n \t@Invoker\n-\tstatic <T extends GameRules.Rule<T>> int invokeExecuteSet(CommandContext<ServerCommandSource> commandContext, GameRules.Key<T> ruleKey) {\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteSet(CommandContext<ServerCommandSource> commandContext, GameRules.RuleKey<T> ruleKey) {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n \n \t@Invoker\n-\tstatic <T extends GameRules.Rule<T>> int invokeExecuteQuery(ServerCommandSource serverCommandSource, GameRules.Key<T> ruleKey) {\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteQuery(ServerCommandSource serverCommandSource, GameRules.RuleKey<T> ruleKey) {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODgxMg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548812", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:15Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandRuleConsumerMixin.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandRuleConsumerMixin.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandVisitorMixin.java\nsimilarity index 73%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandRuleConsumerMixin.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandVisitorMixin.java\nindex 08e86932..1f99be0e 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandRuleConsumerMixin.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandVisitorMixin.java\n\n@@ -26,20 +26,20 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import net.minecraft.server.command.ServerCommandSource;\n import net.minecraft.world.GameRules;\n \n-import net.fabricmc.fabric.impl.gamerule.LiteralRuleCommand;\n-import net.fabricmc.fabric.impl.gamerule.LiteralRuleType;\n+import net.fabricmc.fabric.impl.gamerule.EnumRuleCommand;\n+import net.fabricmc.fabric.impl.gamerule.EnumRuleType;\n \n @Mixin(targets = \"net/minecraft/server/command/GameRuleCommand$1\")\n-public abstract class GameRuleCommandRuleConsumerMixin {\n+public abstract class GameRuleCommandVisitorMixin {\n \t@Shadow\n \tprivate LiteralArgumentBuilder<ServerCommandSource> field_19419;\n \n-\t@Inject(at = @At(\"HEAD\"), method = \"accept(Lnet/minecraft/world/GameRules$Key;Lnet/minecraft/world/GameRules$Type;)V\", cancellable = true)\n+\t@Inject(at = @At(\"HEAD\"), method = \"visit(Lnet/minecraft/world/GameRules$Key;Lnet/minecraft/world/GameRules$Type;)V\", cancellable = true)\n \tprivate <T extends GameRules.Rule<T>> void onRegisterCommand(GameRules.Key<T> key, GameRules.Type<T> type, CallbackInfo ci) {\n-\t\t// Check if our type is a LiteralRuleType\n-\t\tif (type instanceof LiteralRuleType) {\n+\t\t// Check if our type is a EnumRuleType\n+\t\tif (type instanceof EnumRuleType) {\n \t\t\t//noinspection rawtypes,unchecked\n-\t\t\tLiteralRuleCommand.register(this.field_19419, (GameRules.Key) key, (LiteralRuleType) type);\n+\t\t\tEnumRuleCommand.register(this.field_19419, (GameRules.Key) key, (EnumRuleType) type);\n \t\t\tci.cancel();\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODkxNA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548914", "bodyText": "native good and best in game", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:28Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.gamerule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.server.command.GameRuleCommand;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+@Mixin(GameRuleCommand.class)\n+public interface GameRuleCommandAccessor {\n+\t@Invoker\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteSet(CommandContext<ServerCommandSource> commandContext, GameRules.Key<T> ruleKey) {\n+\t\tthrow new AssertionError(\"This shouldn't happen!\");\n+\t}\n+\n+\t@Invoker\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteQuery(ServerCommandSource serverCommandSource, GameRules.Key<T> ruleKey) {\n+\t\tthrow new AssertionError(\"This shouldn't happen!\");", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1Njk1Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435556956", "bodyText": "no", "author": "i509VCB", "createdAt": "2020-06-04T21:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MDY4Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435560686", "bodyText": "irritatered", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nsimilarity index 89%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\nindex 74f8399b..40d52125 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRuleCommandAccessor.java\n\n@@ -27,12 +27,12 @@ import net.minecraft.world.GameRules;\n @Mixin(GameRuleCommand.class)\n public interface GameRuleCommandAccessor {\n \t@Invoker\n-\tstatic <T extends GameRules.Rule<T>> int invokeExecuteSet(CommandContext<ServerCommandSource> commandContext, GameRules.Key<T> ruleKey) {\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteSet(CommandContext<ServerCommandSource> commandContext, GameRules.RuleKey<T> ruleKey) {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n \n \t@Invoker\n-\tstatic <T extends GameRules.Rule<T>> int invokeExecuteQuery(ServerCommandSource serverCommandSource, GameRules.Key<T> ruleKey) {\n+\tstatic <T extends GameRules.Rule<T>> int invokeExecuteQuery(ServerCommandSource serverCommandSource, GameRules.RuleKey<T> ruleKey) {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0ODk0OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435548949", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:33Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java\nsimilarity index 81%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java\nindex b0537b93..4f2e8c54 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/GameRulesAccessor.java\n\n@@ -26,13 +26,13 @@ import net.minecraft.world.GameRules;\n \n @Mixin(GameRules.class)\n public interface GameRulesAccessor {\n-\t@Invoker(\"register\")\n-\tstatic <T extends GameRules.Rule<T>> GameRules.Key<T> callRegister(String name, GameRules.Category category, GameRules.Type<T> type) {\n+\t@Invoker\n+\tstatic <T extends GameRules.Rule<T>> GameRules.RuleKey<T> invokeRegister(String name, GameRules.RuleCategory category, GameRules.RuleType<T> type) {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n \n \t@Accessor(\"RULE_TYPES\")\n-\tstatic Map<GameRules.Key<?>, GameRules.Type<?>> getRuleTypes() {\n+\tstatic Map<GameRules.RuleKey<?>, GameRules.RuleType<?>> getRuleTypes() {\n \t\tthrow new AssertionError(\"This shouldn't happen!\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTA3Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435549076", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:49Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/EditGameRulesScreenAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTExOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435549119", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:06:54Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\nindex 3e20a543..70e9beb0 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetMixin.java\n\n@@ -32,7 +32,6 @@ import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n-import net.fabricmc.fabric.impl.gamerule.RuleKeyInternals;\n \n @Mixin(EditGameRulesScreen.RuleListWidget.class)\n public abstract class RuleListWidgetMixin extends net.minecraft.client.gui.widget.EntryListWidget<EditGameRulesScreen.AbstractRuleWidget> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTI2OQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435549269", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:07:14Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetRuleTypeConsumerMixin.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetRuleTypeConsumerMixin.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetVisitorMixin.java\nsimilarity index 77%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetRuleTypeConsumerMixin.java\nrename to fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetVisitorMixin.java\nindex 4ba0cf78..03a4b0be 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetRuleTypeConsumerMixin.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/client/RuleListWidgetVisitorMixin.java\n\n@@ -30,39 +30,30 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n-import net.fabricmc.fabric.api.gamerule.v1.FabricRuleTypeConsumer;\n+import net.fabricmc.fabric.api.gamerule.v1.FabricGameRuleVisitor;\n import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n-import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n import net.fabricmc.fabric.impl.gamerule.widget.DoubleRuleWidget;\n import net.fabricmc.fabric.impl.gamerule.widget.EnumRuleWidget;\n-import net.fabricmc.fabric.impl.gamerule.widget.FloatRuleWidget;\n \n @Environment(EnvType.CLIENT)\n @Mixin(targets = \"net/minecraft/client/gui/screen/world/EditGameRulesScreen$RuleListWidget$1\")\n-public abstract class RuleListWidgetRuleTypeConsumerMixin implements GameRules.TypeConsumer, FabricRuleTypeConsumer {\n+public abstract class RuleListWidgetVisitorMixin implements GameRules.Visitor, FabricGameRuleVisitor {\n \t@Final\n \t@Shadow\n \tprivate EditGameRulesScreen field_24314;\n \t@Shadow\n-\tprotected abstract <T extends GameRules.Rule<T>> void createRuleWidget(GameRules.Key<T> key, EditGameRulesScreen.RuleWidgetFactory<T> ruleWidgetFactory); // createRuleWidget\n+\tprotected abstract <T extends GameRules.Rule<T>> void createRuleWidget(GameRules.Key<T> key, EditGameRulesScreen.RuleWidgetFactory<T> ruleWidgetFactory);\n \n \t@Override\n-\tpublic void acceptDoubleRule(GameRules.Key<DoubleRule> key, GameRules.Type<DoubleRule> type) {\n+\tpublic void visitDouble(GameRules.Key<DoubleRule> key, GameRules.Type<DoubleRule> type) {\n \t\tthis.createRuleWidget(key, (name, description, ruleName, rule) -> {\n \t\t\treturn new DoubleRuleWidget(this.field_24314, name, description, ruleName, rule);\n \t\t});\n \t}\n \n \t@Override\n-\tpublic void acceptFloatRule(GameRules.Key<FloatRule> key, GameRules.Type<FloatRule> type) {\n-\t\tthis.createRuleWidget(key, (name, description, ruleName, rule) -> {\n-\t\t\treturn new FloatRuleWidget(this.field_24314, name, description, ruleName, rule);\n-\t\t});\n-\t}\n-\n-\t@Override\n-\tpublic <E extends Enum<E>> void acceptEnumRule(GameRules.Key<EnumRule<E>> key, GameRules.Type<EnumRule<E>> type) {\n+\tpublic <E extends Enum<E>> void visitEnum(GameRules.Key<EnumRule<E>> key, GameRules.Type<EnumRule<E>> type) {\n \t\tthis.createRuleWidget(key, (name, description, ruleName, rule) -> {\n \t\t\treturn new EnumRuleWidget<>(this.field_24314, name, description, ruleName, rule, key.getTranslationKey());\n \t\t});\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTgxOA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r435549818", "bodyText": "2020", "author": "Devan-Kerman", "createdAt": "2020-06-04T21:08:26Z", "path": "fabric-game-rule-api-v1/src/testmod/java/net/fabricmc/fabric/test/gamerule/GameRulesTestMod.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC", "originalCommit": "ab6cf760e7a051f2c010b297414d08e36dadbe05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/testmod/java/net/fabricmc/fabric/test/gamerule/GameRulesTestMod.java b/fabric-game-rule-api-v1/src/testmod/java/net/fabricmc/fabric/test/gamerule/GameRulesTestMod.java\nindex f9a1b73c..822bbd0f 100644\n--- a/fabric-game-rule-api-v1/src/testmod/java/net/fabricmc/fabric/test/gamerule/GameRulesTestMod.java\n+++ b/fabric-game-rule-api-v1/src/testmod/java/net/fabricmc/fabric/test/gamerule/GameRulesTestMod.java\n\n@@ -34,13 +34,12 @@ import net.minecraft.util.math.Direction;\n import net.minecraft.world.GameRules;\n \n import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.event.server.ServerStartCallback;\n+import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;\n import net.fabricmc.fabric.api.gamerule.v1.CustomGameRuleCategory;\n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n-import net.fabricmc.fabric.api.gamerule.v1.RuleFactory;\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleFactory;\n import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n-import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n \n public class GameRulesTestMod implements ModInitializer {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRulesTestMod.class);\n"}}, {"oid": "3c2cb4c01a332ab343bd53b735639057277c1884", "url": "https://github.com/FabricMC/fabric/commit/3c2cb4c01a332ab343bd53b735639057277c1884", "message": "Update to 1.16-pre1", "committedDate": "2020-06-05T18:49:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyNTU0MA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r436725540", "bodyText": "suggestion\n\nAn extended RuleTypeConsumer which supports Fabric's own rule types.", "author": "natanfudge", "createdAt": "2020-06-08T13:56:55Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n+\n+/**\n+ * An extended RuleTypeConsumer which supports fabric's own rule types.", "originalCommit": "3c2cb4c01a332ab343bd53b735639057277c1884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyNTU0Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r436825542", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An extended RuleTypeConsumer which supports fabric's own rule types.\n          \n          \n            \n             * An extended RuleTypeConsumer which supports Fabric's own rule types.", "author": "liach", "createdAt": "2020-06-08T16:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyNTU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\nindex 148cc8f7..27b6ef6c 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n\n@@ -23,7 +23,7 @@ import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n \n /**\n- * An extended RuleTypeConsumer which supports fabric's own rule types.\n+ * An extended RuleTypeConsumer which supports Fabric's own rule types.\n  */\n public interface FabricRuleTypeConsumer extends GameRules.TypeConsumer {\n \tdefault void acceptDoubleRule(GameRules.Key<DoubleRule> key, GameRules.Type<DoubleRule> type) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMjU1MA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r437122550", "bodyText": "Change this to a single line return with a ternary operator?\nreturn iterator.hasNext() ? iterator.next() : values.iterator().next();", "author": "Geometrically", "createdAt": "2020-06-09T03:51:08Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprotected final Collection<E> supportedValues;\n+\tprotected E value;\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\t// For now we are gonna use the ordinal as the command result. Could be changed or set to relate to something else entirely.\n+\t\treturn this.value.ordinal();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> getThis() {\n+\t\treturn this;\n+\t}\n+\n+\tpublic Class<E> getEnumClass() {\n+\t\treturn this.classType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.value.toString();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> copy() {\n+\t\treturn new EnumRule<E>(this.type, this.value, this.supportedValues);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(EnumRule<E> rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;\n+\t\tthis.changed(minecraftServer);\n+\t}\n+\n+\tpublic E get() {\n+\t\treturn this.value;\n+\t}\n+\n+\tpublic E cycle(E start) {\n+\t\tif (this.supportedValues.size() > 1) {\n+\t\t\tE value = getNext(this.supportedValues, start);\n+\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\treturn start;\n+\t}\n+\n+\tprotected static <T> T getNext(Collection<T> values, T value) {\n+\t\tIterator<T> iterator = values.iterator();\n+\n+\t\tdo {\n+\t\t\tif (!iterator.hasNext()) {\n+\t\t\t\treturn iterator.next();\n+\t\t\t}\n+\t\t} while (!iterator.next().equals(value));\n+\n+\t\tif (iterator.hasNext()) {\n+\t\t\treturn iterator.next();\n+\t\t} else {\n+\t\t\treturn values.iterator().next();\n+\t\t}\n+\t}", "originalCommit": "f569d5350e835dcca2fdf42c2c69650ed85ed1e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMDc1NA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r437130754", "bodyText": "At least there shouldn't be an else statement after a return statement", "author": "liach", "createdAt": "2020-06-09T04:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMjU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMDk4NQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r437130985", "bodyText": "Yea, I've collapsed it to the ternary operator", "author": "i509VCB", "createdAt": "2020-06-09T04:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMjU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "77ab83c97da0a257e3640445b93e773e1884c548", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 93ff13d2..86adcfa3 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -31,12 +31,12 @@ import net.minecraft.world.GameRules;\n \n import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n \n-public class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n+public final class EnumRule<E extends Enum<E>> extends LiteralRule<EnumRule<E>> {\n \tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n \n \tprivate final Class<E> classType;\n-\tprotected final Collection<E> supportedValues;\n-\tprotected E value;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n \n \t/**\n \t * You should not be calling this constructor!\n"}}, {"oid": "77ab83c97da0a257e3640445b93e773e1884c548", "url": "https://github.com/FabricMC/fabric/commit/77ab83c97da0a257e3640445b93e773e1884c548", "message": "I like final things", "committedDate": "2020-06-10T18:52:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1NDI2Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r438454262", "bodyText": "Hmm I need to fix these (Shouldn't be integer max here)", "author": "i509VCB", "createdAt": "2020-06-10T23:05:14Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.function.BiConsumer;\n+\n+import com.mojang.brigadier.arguments.DoubleArgumentType;\n+import com.mojang.brigadier.arguments.FloatArgumentType;\n+import com.mojang.brigadier.arguments.IntegerArgumentType;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n+import net.fabricmc.fabric.impl.gamerule.EnumRuleType;\n+import net.fabricmc.fabric.impl.gamerule.rule.BoundedIntRule;\n+import net.fabricmc.fabric.mixin.gamerule.BooleanRuleAccessor;\n+\n+public final class RuleFactory {\n+\tprivate RuleFactory() {\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.BooleanRule> createBooleanRule(boolean defaultValue) {\n+\t\treturn createBooleanRule(defaultValue, (server, rule) -> {\n+\t\t});\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.BooleanRule> createBooleanRule(boolean defaultValue, BiConsumer<MinecraftServer, GameRules.BooleanRule> changedCallback) {\n+\t\treturn BooleanRuleAccessor.invokeCreate(defaultValue, changedCallback);\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue) {\n+\t\treturn createIntRule(defaultValue, (server, rule) -> {\n+\t\t});\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue, int lowerBound) {\n+\t\treturn createIntRule(defaultValue, lowerBound, Integer.MAX_VALUE, (server, rule) -> {\n+\t\t});\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue, int lowerBound, BiConsumer<MinecraftServer, GameRules.IntRule> changedCallback) {\n+\t\treturn createIntRule(defaultValue, lowerBound, Integer.MAX_VALUE, changedCallback);\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue, int lowerBound, int upperBound) {\n+\t\treturn createIntRule(defaultValue, lowerBound, upperBound, (server, rule) -> {\n+\t\t});\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue, BiConsumer<MinecraftServer, GameRules.IntRule> changedCallback) {\n+\t\treturn createIntRule(defaultValue, Integer.MIN_VALUE, Integer.MAX_VALUE, changedCallback);\n+\t}\n+\n+\tpublic static GameRules.Type<GameRules.IntRule> createIntRule(int defaultValue, int lowerBound, int upperBound, /* @Nullable */ BiConsumer<MinecraftServer, GameRules.IntRule> changedCallback) {\n+\t\treturn new GameRules.Type<>(\n+\t\t\t\t() -> IntegerArgumentType.integer(lowerBound, upperBound),\n+\t\t\t\ttype -> new BoundedIntRule(type, defaultValue, lowerBound, upperBound), // Internally use a bounded int rule\n+\t\t\t\tchangedCallback,\n+\t\t\t\tGameRules.TypeConsumer::acceptInt\n+\t\t);\n+\t}\n+\n+\tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue) {\n+\t\treturn createDoubleRule(defaultValue, (server, rule) -> {\n+\t\t});\n+\t}\n+\n+\tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound) {\n+\t\treturn createDoubleRule(defaultValue, lowerBound, Integer.MAX_VALUE, (server, rule) -> {", "originalCommit": "48fd3aa016e80de33935c11e25cba88397cdc03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\nindex b364d8eb..baf8e948 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/RuleFactory.java\n\n@@ -85,12 +85,12 @@ public final class RuleFactory {\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound) {\n-\t\treturn createDoubleRule(defaultValue, lowerBound, Integer.MAX_VALUE, (server, rule) -> {\n+\t\treturn createDoubleRule(defaultValue, lowerBound, Double.MAX_VALUE, (server, rule) -> {\n \t\t});\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound, BiConsumer<MinecraftServer, DoubleRule> changedCallback) {\n-\t\treturn createDoubleRule(defaultValue, lowerBound, Integer.MAX_VALUE, changedCallback);\n+\t\treturn createDoubleRule(defaultValue, lowerBound, Double.MAX_VALUE, changedCallback);\n \t}\n \n \tpublic static GameRules.Type<DoubleRule> createDoubleRule(double defaultValue, double lowerBound, double upperBound) {\n"}}, {"oid": "3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "url": "https://github.com/FabricMC/fabric/commit/3f8bc5052aca30d0e0f1e300fbadc7f4847a23fc", "message": "Document LiteralRule, clarify generics", "committedDate": "2020-06-11T22:29:49Z", "type": "forcePushed"}, {"oid": "607685a8b2d30d3460af714f984839caa2d644e0", "url": "https://github.com/FabricMC/fabric/commit/607685a8b2d30d3460af714f984839caa2d644e0", "message": "Document LiteralRule, clarify generics", "committedDate": "2020-06-12T17:28:33Z", "type": "forcePushed"}, {"oid": "d84e6606904509d067262bec918176940f27274c", "url": "https://github.com/FabricMC/fabric/commit/d84e6606904509d067262bec918176940f27274c", "message": "Document LiteralRule, clarify generics", "committedDate": "2020-06-15T18:55:36Z", "type": "forcePushed"}, {"oid": "1cd025a085c1f5345a7e23491a9650ff64012e60", "url": "https://github.com/FabricMC/fabric/commit/1cd025a085c1f5345a7e23491a9650ff64012e60", "message": "Update to 20w27a", "committedDate": "2020-07-01T21:38:04Z", "type": "forcePushed"}, {"oid": "cf547cd02d5caf7f256414d356ee241285c9324b", "url": "https://github.com/FabricMC/fabric/commit/cf547cd02d5caf7f256414d356ee241285c9324b", "message": "Update to 20w27a", "committedDate": "2020-07-08T20:51:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxNTgyMg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454215822", "bodyText": "typo \"ofa\"", "author": "sfPlayer1", "createdAt": "2020-07-14T09:10:54Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleFactory.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.function.BiConsumer;\n+\n+import com.mojang.brigadier.arguments.DoubleArgumentType;\n+import com.mojang.brigadier.arguments.FloatArgumentType;\n+import com.mojang.brigadier.arguments.IntegerArgumentType;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.EnumRule;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.FloatRule;\n+import net.fabricmc.fabric.impl.gamerule.EnumRuleType;\n+import net.fabricmc.fabric.impl.gamerule.rule.BoundedIntRule;\n+import net.fabricmc.fabric.mixin.gamerule.BooleanRuleAccessor;\n+\n+/**\n+ * A utility class containing factory methods to create game rule types.\n+ * A game rule is a persisted, per server data value which may control gameplay aspects.\n+ *\n+ * <p>Some factory methods allow specification ofa callback that is invoked when the value of a game rule has changed.", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleFactory.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleFactory.java\nindex 7885d17c..31f6c737 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleFactory.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/GameRuleFactory.java\n\n@@ -21,7 +21,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n import java.util.function.BiConsumer;\n \n import com.mojang.brigadier.arguments.DoubleArgumentType;\n-import com.mojang.brigadier.arguments.FloatArgumentType;\n import com.mojang.brigadier.arguments.IntegerArgumentType;\n \n import net.minecraft.server.MinecraftServer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyMDQ4OA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454220488", "bodyText": "return d >= minimumValue && d <= maximumValue, cleaner and rejects NaN", "author": "sfPlayer1", "createdAt": "2020-07-14T09:18:58Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.minimumValue = minimumValue;\n+\t\tthis.maximumValue = maximumValue;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);\n+\n+\t\tif (this.minimumValue > d || this.maximumValue < d) {\n+\t\t\tLOGGER.warn(\"Failed to parse double {}. Was out of bounds {} - {}\", value, this.minimumValue, this.maximumValue);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.value = d;\n+\t}\n+\n+\tprivate static double parseDouble(String string) {\n+\t\tif (!string.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn Double.parseDouble(string);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse double {}\", string);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn 0.0D;\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn Double.toString(this.value);\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn Double.compare(this.value, 0.0);\n+\t}\n+\n+\t@Override\n+\tprotected DoubleRule getThis() {\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tprotected DoubleRule copy() {\n+\t\treturn new DoubleRule(this.type, this.value, this.minimumValue, this.maximumValue);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(DoubleRule rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;\n+\t\tthis.changed(minecraftServer);\n+\t}\n+\n+\t@Override\n+\tpublic boolean validate(String value) {\n+\t\ttry {\n+\t\t\tfinal double d = Double.parseDouble(value);\n+\n+\t\t\treturn !(this.minimumValue > d) && !(this.maximumValue < d);", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyNjk2Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454226962", "bodyText": "Checking Double.isInfinity and Double.isNan here for value and both bounds sounds like something we should do?", "author": "sfPlayer1", "createdAt": "2020-07-14T09:30:05Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyNzI5Mg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454227292", "bodyText": "this accepts Nan (comparing to NaN is always false). This wouldn't:\nif (d >= minimumValue && d <= maximumValue) { // rejects NaN\n  this.value = d;\n} else {\n  LOGGER.warn(\"Failed to parse double {}. Was out of bounds {} - {}\", value, this.minimumValue, this.maximumValue);\n  return;\n}", "author": "sfPlayer1", "createdAt": "2020-07-14T09:30:36Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.minimumValue = minimumValue;\n+\t\tthis.maximumValue = maximumValue;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);\n+\n+\t\tif (this.minimumValue > d || this.maximumValue < d) {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMDQwMA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454230400", "bodyText": "supportedValues is private, no need to wrap this way. I'd turn it into ArrayList if it isn't a List already instead, which simplifies the other methods.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:36:03Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class EnumRule<E extends Enum<E>> extends GameRules.Rule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 42fa5d94..4267f603 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -18,10 +18,10 @@ package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.util.List;\n \n import com.mojang.brigadier.context.CommandContext;\n import org.apache.logging.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMDcyNA==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454230724", "bodyText": "return supportedValues.contains(value);", "author": "sfPlayer1", "createdAt": "2020-07-14T09:36:36Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class EnumRule<E extends Enum<E>> extends GameRules.Rule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\t// Do nothing. We use a different system for application with literals\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\t// For now we are gonna use the ordinal as the command result. Could be changed or set to relate to something else entirely.\n+\t\treturn this.value.ordinal();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> getThis() {\n+\t\treturn this;\n+\t}\n+\n+\tpublic Class<E> getEnumClass() {\n+\t\treturn this.classType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.value.toString();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> copy() {\n+\t\treturn new EnumRule<>(this.type, this.value, this.supportedValues);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(EnumRule<E> rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;\n+\t\tthis.changed(minecraftServer);\n+\t}\n+\n+\tpublic E get() {\n+\t\treturn this.value;\n+\t}\n+\n+\tpublic E cycle(E start) {\n+\t\tif (this.supportedValues.size() > 1) {\n+\t\t\treturn getNext(this.supportedValues, start);\n+\t\t}\n+\n+\t\treturn start;\n+\t}\n+\n+\tprotected static <T> T getNext(Collection<T> values, T value) {\n+\t\tIterator<T> iterator = values.iterator();\n+\n+\t\tdo {\n+\t\t\tif (!iterator.hasNext()) {\n+\t\t\t\treturn iterator.next();\n+\t\t\t}\n+\t\t} while (!iterator.next().equals(value));\n+\n+\t\treturn iterator.hasNext() ? iterator.next() : values.iterator().next();\n+\t}\n+\n+\tpublic boolean supports(E value) {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 42fa5d94..4267f603 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -18,10 +18,10 @@ package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.util.List;\n \n import com.mojang.brigadier.context.CommandContext;\n import org.apache.logging.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzMTMwNg==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454231306", "bodyText": "Validate if value is in supportedValues? This also implicitly rejects empty supportedValues.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:37:38Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class EnumRule<E extends Enum<E>> extends GameRules.Rule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 42fa5d94..4267f603 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -18,10 +18,10 @@ package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.util.List;\n \n import com.mojang.brigadier.context.CommandContext;\n import org.apache.logging.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNDIyOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454234229", "bodyText": "If supportedValues was a List, this could be implemented as easily as\nint idx = supportedValues.indexOf(start);\nif (idx < 0) throw new IllegalArgumentException(\"invalid value: \"+start);\n\nreturn supportedValues.get((idx + 1) % supportedValues.size());", "author": "sfPlayer1", "createdAt": "2020-07-14T09:42:46Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class EnumRule<E extends Enum<E>> extends GameRules.Rule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\t// Do nothing. We use a different system for application with literals\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\t// For now we are gonna use the ordinal as the command result. Could be changed or set to relate to something else entirely.\n+\t\treturn this.value.ordinal();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> getThis() {\n+\t\treturn this;\n+\t}\n+\n+\tpublic Class<E> getEnumClass() {\n+\t\treturn this.classType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.value.toString();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> copy() {\n+\t\treturn new EnumRule<>(this.type, this.value, this.supportedValues);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(EnumRule<E> rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;\n+\t\tthis.changed(minecraftServer);\n+\t}\n+\n+\tpublic E get() {\n+\t\treturn this.value;\n+\t}\n+\n+\tpublic E cycle(E start) {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 42fa5d94..4267f603 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -18,10 +18,10 @@ package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.util.List;\n \n import com.mojang.brigadier.context.CommandContext;\n import org.apache.logging.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNjUzNQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454236535", "bodyText": "There is no validation that the supplied rule is compatible with this one, should check if rule.value is in supportedValues", "author": "sfPlayer1", "createdAt": "2020-07-14T09:46:47Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class EnumRule<E extends Enum<E>> extends GameRules.Rule<EnumRule<E>> {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final Class<E> classType;\n+\tprivate final Collection<E> supportedValues;\n+\tprivate E value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, E[] supportedValues) {\n+\t\tthis(type, value, Arrays.asList(supportedValues));\n+\t}\n+\n+\t/**\n+\t * You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic EnumRule(GameRules.Type<EnumRule<E>> type, E value, Collection<E> supportedValues) {\n+\t\tsuper(type);\n+\t\tthis.classType = value.getDeclaringClass();\n+\t\tthis.value = value;\n+\t\tthis.supportedValues = Collections.unmodifiableCollection(supportedValues);\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\t// Do nothing. We use a different system for application with literals\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\ttry {\n+\t\t\tfinal E deserialized = Enum.valueOf(this.classType, value);\n+\n+\t\t\tif (!this.supports(deserialized)) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}. Since the value {}, is unsupported.\", value, this.classType, value);\n+\t\t\t}\n+\n+\t\t\tthis.set(deserialized, null);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tLOGGER.warn(\"Failed to parse rule of value {} for rule of type {}\", value, this.classType);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn this.value.name();\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\t// For now we are gonna use the ordinal as the command result. Could be changed or set to relate to something else entirely.\n+\t\treturn this.value.ordinal();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> getThis() {\n+\t\treturn this;\n+\t}\n+\n+\tpublic Class<E> getEnumClass() {\n+\t\treturn this.classType;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn this.value.toString();\n+\t}\n+\n+\t@Override\n+\tprotected EnumRule<E> copy() {\n+\t\treturn new EnumRule<>(this.type, this.value, this.supportedValues);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(EnumRule<E> rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\nindex 42fa5d94..4267f603 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/EnumRule.java\n\n@@ -18,10 +18,10 @@ package net.fabricmc.fabric.api.gamerule.v1.rule;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n+import java.util.List;\n \n import com.mojang.brigadier.context.CommandContext;\n import org.apache.logging.log4j.LogManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNjkzOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454236939", "bodyText": "There is no validation that rule.value respects the same bounds.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:47:29Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.minimumValue = minimumValue;\n+\t\tthis.maximumValue = maximumValue;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);\n+\n+\t\tif (this.minimumValue > d || this.maximumValue < d) {\n+\t\t\tLOGGER.warn(\"Failed to parse double {}. Was out of bounds {} - {}\", value, this.minimumValue, this.maximumValue);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.value = d;\n+\t}\n+\n+\tprivate static double parseDouble(String string) {\n+\t\tif (!string.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn Double.parseDouble(string);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tLOGGER.warn(\"Failed to parse double {}\", string);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn 0.0D;\n+\t}\n+\n+\t@Override\n+\tpublic String serialize() {\n+\t\treturn Double.toString(this.value);\n+\t}\n+\n+\t@Override\n+\tpublic int getCommandResult() {\n+\t\treturn Double.compare(this.value, 0.0);\n+\t}\n+\n+\t@Override\n+\tprotected DoubleRule getThis() {\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tprotected DoubleRule copy() {\n+\t\treturn new DoubleRule(this.type, this.value, this.minimumValue, this.maximumValue);\n+\t}\n+\n+\t@Override\n+\tpublic void setValue(DoubleRule rule, MinecraftServer minecraftServer) {\n+\t\tthis.value = rule.value;", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzODg1Nw==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454238857", "bodyText": "Review comments from DoubleRule apply. I'm not 100% sure if it makes sense to have FloatRule though, DoubleRule is just a cast and reasonable bounds selection away from serving practically the same purpose.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:50:54Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\ndeleted file mode 100644\nindex 0f981cc7..00000000\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/FloatRule.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.gamerule.v1.rule;\n-\n-import com.mojang.brigadier.context.CommandContext;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import net.minecraft.server.MinecraftServer;\n-import net.minecraft.server.command.ServerCommandSource;\n-import net.minecraft.world.GameRules;\n-\n-import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n-\n-public final class FloatRule extends GameRules.Rule<FloatRule> implements ValidateableRule {\n-\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n-\n-\tprivate final float minimumValue;\n-\tprivate final float maximumValue;\n-\tprivate float value;\n-\n-\t/**\n-\t * @deprecated You should not be calling this constructor!\n-\t */\n-\t@Deprecated\n-\tpublic FloatRule(GameRules.Type<FloatRule> type, float value, float minimumValue, float maximumValue) {\n-\t\tsuper(type);\n-\t\tthis.value = value;\n-\t\tthis.minimumValue = minimumValue;\n-\t\tthis.maximumValue = maximumValue;\n-\t}\n-\n-\t@Override\n-\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n-\t\tthis.value = context.getArgument(name, Float.class);\n-\t}\n-\n-\t@Override\n-\tprotected void deserialize(String value) {\n-\t\tfinal float f = FloatRule.parseFloat(value);\n-\n-\t\tif (this.minimumValue > f || this.maximumValue < f) {\n-\t\t\tLOGGER.warn(\"Failed to parse float {}. Was out of bounds {} - {}\", value, this.minimumValue, this.maximumValue);\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tthis.value = f;\n-\t}\n-\n-\tprivate static float parseFloat(String string) {\n-\t\tif (!string.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\treturn Float.parseFloat(string);\n-\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\tLOGGER.warn(\"Failed to parse float {}\", string);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn 0.0F;\n-\t}\n-\n-\t@Override\n-\tpublic String serialize() {\n-\t\treturn Float.toString(this.value);\n-\t}\n-\n-\t@Override\n-\tpublic int getCommandResult() {\n-\t\treturn Float.compare(this.value, 0.0F);\n-\t}\n-\n-\t@Override\n-\tprotected FloatRule getThis() {\n-\t\treturn this;\n-\t}\n-\n-\t@Override\n-\tprotected FloatRule copy() {\n-\t\treturn new FloatRule(this.type, this.value, this.minimumValue, this.maximumValue);\n-\t}\n-\n-\t@Override\n-\tpublic void setValue(FloatRule rule, MinecraftServer minecraftServer) {\n-\t\tthis.value = rule.value;\n-\t\tthis.changed(minecraftServer);\n-\t}\n-\n-\t@Override\n-\tpublic boolean validate(String value) {\n-\t\ttry {\n-\t\t\tfinal float f = Float.parseFloat(value);\n-\n-\t\t\treturn !(this.minimumValue > f) && !(this.maximumValue < f);\n-\t\t} catch (NumberFormatException ignored) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic float get() {\n-\t\treturn this.value;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0MTE5Ng==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454241196", "bodyText": "DoubleRule.parseDouble confused me at the first look, I didn't expect it to specify the class for a local call and read Double.parseDouble instead.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:55:06Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.minimumValue = minimumValue;\n+\t\tthis.maximumValue = maximumValue;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI0MzU4MQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r454243581", "bodyText": "This is a single-use utility method that also changes how the implementation deals with invalid values. EnumRule does nothing for deserialize(invalid), while this one sets the value to 0 unless it happened to be outside the valid range. So either a surprising 0-value or a 2nd redundant warning.", "author": "sfPlayer1", "createdAt": "2020-07-14T09:59:26Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.gamerule.v1.rule;\n+\n+import com.mojang.brigadier.context.CommandContext;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.command.ServerCommandSource;\n+import net.minecraft.world.GameRules;\n+\n+import net.fabricmc.fabric.api.gamerule.v1.GameRuleRegistry;\n+\n+public final class DoubleRule extends GameRules.Rule<DoubleRule> implements ValidateableRule {\n+\tprivate static final Logger LOGGER = LogManager.getLogger(GameRuleRegistry.class);\n+\n+\tprivate final double minimumValue;\n+\tprivate final double maximumValue;\n+\tprivate double value;\n+\n+\t/**\n+\t * @deprecated You should not be calling this constructor!\n+\t */\n+\t@Deprecated\n+\tpublic DoubleRule(GameRules.Type<DoubleRule> type, double value, double minimumValue, double maximumValue) {\n+\t\tsuper(type);\n+\t\tthis.value = value;\n+\t\tthis.minimumValue = minimumValue;\n+\t\tthis.maximumValue = maximumValue;\n+\t}\n+\n+\t@Override\n+\tprotected void setFromArgument(CommandContext<ServerCommandSource> context, String name) {\n+\t\tthis.value = context.getArgument(name, Double.class);\n+\t}\n+\n+\t@Override\n+\tprotected void deserialize(String value) {\n+\t\tfinal double d = DoubleRule.parseDouble(value);\n+\n+\t\tif (this.minimumValue > d || this.maximumValue < d) {\n+\t\t\tLOGGER.warn(\"Failed to parse double {}. Was out of bounds {} - {}\", value, this.minimumValue, this.maximumValue);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.value = d;\n+\t}\n+\n+\tprivate static double parseDouble(String string) {", "originalCommit": "5b1de0ab9ee628a230a145ee5bb1ec61b703e2d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\nindex 6c79904c..223265c8 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/rule/DoubleRule.java\n\n@@ -42,6 +42,18 @@ public final class DoubleRule extends GameRules.Rule<DoubleRule> implements Vali\n \t\tthis.value = value;\n \t\tthis.minimumValue = minimumValue;\n \t\tthis.maximumValue = maximumValue;\n+\n+\t\tif (Double.isInfinite(value) || Double.isNaN(value)) {\n+\t\t\tthrow new IllegalArgumentException(\"Value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(minimumValue) || Double.isNaN(minimumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Minimum value cannot be infinite or NaN\");\n+\t\t}\n+\n+\t\tif (Double.isInfinite(maximumValue) || Double.isNaN(maximumValue)) {\n+\t\t\tthrow new IllegalArgumentException(\"Maximum value cannot be infinite or NaN\");\n+\t\t}\n \t}\n \n \t@Override\n"}}, {"oid": "5bfa53d20744789391b70cc27af164de1ca8e54a", "url": "https://github.com/FabricMC/fabric/commit/5bfa53d20744789391b70cc27af164de1ca8e54a", "message": "Update to 20w29a, drop float rule", "committedDate": "2020-07-15T22:26:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5ODI2MQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r455598261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthis.textFieldWidget.setEditableColor(14737632);\n          \n          \n            \n            \t\t\t\tthis.textFieldWidget.setEditableColor(0xE0E0E0);", "author": "JamiesWhiteShirt", "createdAt": "2020-07-16T08:07:49Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.widget;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.client.gui.widget.TextFieldWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.StringRenderable;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+\n+@Environment(EnvType.CLIENT)\n+public final class DoubleRuleWidget extends EditGameRulesScreen.NamedRuleWidget {\n+\tprivate final TextFieldWidget textFieldWidget;\n+\n+\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<StringRenderable> description, final String ruleName, DoubleRule rule) {\n+\t\tgameRuleScreen.super(description, name);\n+\t\tEditGameRulesScreenAccessor accessor = (EditGameRulesScreenAccessor) gameRuleScreen;\n+\n+\t\tthis.textFieldWidget = new TextFieldWidget(MinecraftClient.getInstance().textRenderer, 10, 5, 42, 20,\n+\t\t\t\tname.shallowCopy()\n+\t\t\t\t.append(\"\\n\")\n+\t\t\t\t.append(ruleName)\n+\t\t\t\t.append(\"\\n\")\n+\t\t);\n+\n+\t\tthis.textFieldWidget.setText(Double.toString(rule.get()));\n+\t\tthis.textFieldWidget.setChangedListener(value -> {\n+\t\t\tif (rule.validate(value)) {\n+\t\t\t\tthis.textFieldWidget.setEditableColor(14737632);", "originalCommit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nsimilarity index 59%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nindex 45fa3d66..38044a8d 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n\n@@ -18,27 +18,35 @@ package net.fabricmc.fabric.impl.gamerule.widget;\n \n import java.util.List;\n \n-import net.minecraft.client.MinecraftClient;\n+import com.google.common.collect.ImmutableList;\n+\n+import net.minecraft.client.gui.Element;\n import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n import net.minecraft.client.gui.widget.TextFieldWidget;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.text.StringRenderable;\n import net.minecraft.text.Text;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+import net.fabricmc.fabric.mixin.gamerule.client.ScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public final class DoubleRuleWidget extends EditGameRulesScreen.NamedRuleWidget {\n+public class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+\tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n+\tprivate final Text name;\n+\tprivate final EditGameRulesScreen screen;\n \n-\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<StringRenderable> description, final String ruleName, DoubleRule rule) {\n-\t\tgameRuleScreen.super(description, name);\n+\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<Text> description, final String ruleName, DoubleRule rule) {\n+\t\tgameRuleScreen.super(description);\n+\t\tthis.screen = gameRuleScreen;\n \t\tEditGameRulesScreenAccessor accessor = (EditGameRulesScreenAccessor) gameRuleScreen;\n+\t\tScreenAccessor screenAccessor = (ScreenAccessor) gameRuleScreen;\n+\t\tthis.name = name;\n \n-\t\tthis.textFieldWidget = new TextFieldWidget(MinecraftClient.getInstance().textRenderer, 10, 5, 42, 20,\n+\t\tthis.textFieldWidget = new TextFieldWidget(screenAccessor.getClient().textRenderer, 10, 5, 42, 20,\n \t\t\t\tname.shallowCopy()\n \t\t\t\t.append(\"\\n\")\n \t\t\t\t.append(ruleName)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5ODYzOQ==", "url": "https://github.com/FabricMC/fabric/pull/641#discussion_r455598639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthis.textFieldWidget.setEditableColor(16711680);\n          \n          \n            \n            \t\t\t\tthis.textFieldWidget.setEditableColor(0xFF0000);", "author": "JamiesWhiteShirt", "createdAt": "2020-07-16T08:08:17Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.gamerule.widget;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n+import net.minecraft.client.gui.widget.TextFieldWidget;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.text.StringRenderable;\n+import net.minecraft.text.Text;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n+import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+\n+@Environment(EnvType.CLIENT)\n+public final class DoubleRuleWidget extends EditGameRulesScreen.NamedRuleWidget {\n+\tprivate final TextFieldWidget textFieldWidget;\n+\n+\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<StringRenderable> description, final String ruleName, DoubleRule rule) {\n+\t\tgameRuleScreen.super(description, name);\n+\t\tEditGameRulesScreenAccessor accessor = (EditGameRulesScreenAccessor) gameRuleScreen;\n+\n+\t\tthis.textFieldWidget = new TextFieldWidget(MinecraftClient.getInstance().textRenderer, 10, 5, 42, 20,\n+\t\t\t\tname.shallowCopy()\n+\t\t\t\t.append(\"\\n\")\n+\t\t\t\t.append(ruleName)\n+\t\t\t\t.append(\"\\n\")\n+\t\t);\n+\n+\t\tthis.textFieldWidget.setText(Double.toString(rule.get()));\n+\t\tthis.textFieldWidget.setChangedListener(value -> {\n+\t\t\tif (rule.validate(value)) {\n+\t\t\t\tthis.textFieldWidget.setEditableColor(14737632);\n+\t\t\t\taccessor.callMarkValid(this);\n+\t\t\t} else {\n+\t\t\t\tthis.textFieldWidget.setEditableColor(16711680);", "originalCommit": "5bfa53d20744789391b70cc27af164de1ca8e54a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nsimilarity index 59%\nrename from fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nrename to fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\nindex 45fa3d66..38044a8d 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n+++ b/fabric-gamerule-api-v1/src/main/java/net/fabricmc/fabric/impl/gamerule/widget/DoubleRuleWidget.java\n\n@@ -18,27 +18,35 @@ package net.fabricmc.fabric.impl.gamerule.widget;\n \n import java.util.List;\n \n-import net.minecraft.client.MinecraftClient;\n+import com.google.common.collect.ImmutableList;\n+\n+import net.minecraft.client.gui.Element;\n import net.minecraft.client.gui.screen.world.EditGameRulesScreen;\n import net.minecraft.client.gui.widget.TextFieldWidget;\n import net.minecraft.client.util.math.MatrixStack;\n-import net.minecraft.text.StringRenderable;\n import net.minecraft.text.Text;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n import net.fabricmc.fabric.api.gamerule.v1.rule.DoubleRule;\n import net.fabricmc.fabric.mixin.gamerule.client.EditGameRulesScreenAccessor;\n+import net.fabricmc.fabric.mixin.gamerule.client.ScreenAccessor;\n \n @Environment(EnvType.CLIENT)\n-public final class DoubleRuleWidget extends EditGameRulesScreen.NamedRuleWidget {\n+public class DoubleRuleWidget extends EditGameRulesScreen.AbstractRuleWidget {\n+\tprivate final List<? extends Element> children;\n \tprivate final TextFieldWidget textFieldWidget;\n+\tprivate final Text name;\n+\tprivate final EditGameRulesScreen screen;\n \n-\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<StringRenderable> description, final String ruleName, DoubleRule rule) {\n-\t\tgameRuleScreen.super(description, name);\n+\tpublic DoubleRuleWidget(EditGameRulesScreen gameRuleScreen, Text name, List<Text> description, final String ruleName, DoubleRule rule) {\n+\t\tgameRuleScreen.super(description);\n+\t\tthis.screen = gameRuleScreen;\n \t\tEditGameRulesScreenAccessor accessor = (EditGameRulesScreenAccessor) gameRuleScreen;\n+\t\tScreenAccessor screenAccessor = (ScreenAccessor) gameRuleScreen;\n+\t\tthis.name = name;\n \n-\t\tthis.textFieldWidget = new TextFieldWidget(MinecraftClient.getInstance().textRenderer, 10, 5, 42, 20,\n+\t\tthis.textFieldWidget = new TextFieldWidget(screenAccessor.getClient().textRenderer, 10, 5, 42, 20,\n \t\t\t\tname.shallowCopy()\n \t\t\t\t.append(\"\\n\")\n \t\t\t\t.append(ruleName)\n"}}, {"oid": "732428b0ae501621ef1a4915cdf6a3b39201adf3", "url": "https://github.com/FabricMC/fabric/commit/732428b0ae501621ef1a4915cdf6a3b39201adf3", "message": "Create GameRule API", "committedDate": "2020-07-22T20:39:00Z", "type": "commit"}, {"oid": "747ce7a3d5b3d5f9727447db188b08030ba23857", "url": "https://github.com/FabricMC/fabric/commit/747ce7a3d5b3d5f9727447db188b08030ba23857", "message": "Some tweaks", "committedDate": "2020-07-22T20:39:00Z", "type": "commit"}, {"oid": "0c5c13f1017e19a023aea82257ce8a453218f995", "url": "https://github.com/FabricMC/fabric/commit/0c5c13f1017e19a023aea82257ce8a453218f995", "message": "gamerule -> game-rule", "committedDate": "2020-07-22T20:39:00Z", "type": "commit"}, {"oid": "b471dc7af92a5a47c0f7f68c18915fbbd0fd6c0f", "url": "https://github.com/FabricMC/fabric/commit/b471dc7af92a5a47c0f7f68c18915fbbd0fd6c0f", "message": "Fix translation keys and update to 20w22a", "committedDate": "2020-07-22T20:39:00Z", "type": "commit"}, {"oid": "0d2abd217969c82119ea775e02b4998faf010577", "url": "https://github.com/FabricMC/fabric/commit/0d2abd217969c82119ea775e02b4998faf010577", "message": "Command results and remove unnessecary factory method", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "64418eb5ae92048efe5e1a6ca99f611716d18002", "url": "https://github.com/FabricMC/fabric/commit/64418eb5ae92048efe5e1a6ca99f611716d18002", "message": "Update to 1.16-pre1", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "0d2eb827e16bc00d20d847f09b6d1815854c6d6c", "url": "https://github.com/FabricMC/fabric/commit/0d2eb827e16bc00d20d847f09b6d1815854c6d6c", "message": "Update fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/api/gamerule/v1/FabricRuleTypeConsumer.java\n\nCo-authored-by: liach <7806504+liach@users.noreply.github.com>", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "59b4b299c24b7b058687eb4f4511b05f00ac6620", "url": "https://github.com/FabricMC/fabric/commit/59b4b299c24b7b058687eb4f4511b05f00ac6620", "message": "I like final things", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "d49243a9660b781d91378ccc55eee51965e6bc15", "url": "https://github.com/FabricMC/fabric/commit/d49243a9660b781d91378ccc55eee51965e6bc15", "message": "Update to 1.16-pre3, change enum button style", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "ec777bfe7c3c9060ed1d9b83b5f6d0b08dc878b8", "url": "https://github.com/FabricMC/fabric/commit/ec777bfe7c3c9060ed1d9b83b5f6d0b08dc878b8", "message": "checkstyle", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "9f935a55589db5b12c4fb8c97a66cad617a5c6c8", "url": "https://github.com/FabricMC/fabric/commit/9f935a55589db5b12c4fb8c97a66cad617a5c6c8", "message": "use right min values", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "7b88099b5e4a7b09b25d886f20eca6d338d48692", "url": "https://github.com/FabricMC/fabric/commit/7b88099b5e4a7b09b25d886f20eca6d338d48692", "message": "Document ValidatableRule", "committedDate": "2020-07-22T20:39:01Z", "type": "commit"}, {"oid": "ca11ad32d4ddf33a8c446aa2144d4b27d1aaad45", "url": "https://github.com/FabricMC/fabric/commit/ca11ad32d4ddf33a8c446aa2144d4b27d1aaad45", "message": "Document LiteralRule, clarify generics", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "99012a80c0ec6395762ce1cffcf3e19f6f10451e", "url": "https://github.com/FabricMC/fabric/commit/99012a80c0ec6395762ce1cffcf3e19f6f10451e", "message": "Update to 20w27a", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "e9a04e0733b1f5acf76d078fb7b00b5e35b372b8", "url": "https://github.com/FabricMC/fabric/commit/e9a04e0733b1f5acf76d078fb7b00b5e35b372b8", "message": "Rename some parts to compensate for future yarn renames.\n\nFlatten some logic related to EnumRules", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "851b8f485050c7c7375b2b4cf6e3296e43574c9a", "url": "https://github.com/FabricMC/fabric/commit/851b8f485050c7c7375b2b4cf6e3296e43574c9a", "message": "forgot one", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "475c4bfba72e6b6b440984483464887c7e45db49", "url": "https://github.com/FabricMC/fabric/commit/475c4bfba72e6b6b440984483464887c7e45db49", "message": "javadoc galore", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "a3482b622dc653a2966fb9def3aced928fbcaf78", "url": "https://github.com/FabricMC/fabric/commit/a3482b622dc653a2966fb9def3aced928fbcaf78", "message": "finish javadoc", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "1b3406430b93e9198334e68ff3d9f0b4ba4af02e", "url": "https://github.com/FabricMC/fabric/commit/1b3406430b93e9198334e68ff3d9f0b4ba4af02e", "message": "Start things", "committedDate": "2020-07-22T20:39:02Z", "type": "commit"}, {"oid": "c561c2fe2796f032914b6308de2df2020ba300c3", "url": "https://github.com/FabricMC/fabric/commit/c561c2fe2796f032914b6308de2df2020ba300c3", "message": "Update to 20w29a, drop float rule", "committedDate": "2020-07-22T20:39:03Z", "type": "commit"}, {"oid": "ffcaef4f30a65e71d1f3bc63971f63a4db245fd6", "url": "https://github.com/FabricMC/fabric/commit/ffcaef4f30a65e71d1f3bc63971f63a4db245fd6", "message": "Make cycle naming more accurate", "committedDate": "2020-07-22T20:39:03Z", "type": "commit"}, {"oid": "6126a5b1df77f501d2f75fd2aa3424abfa6ed9ff", "url": "https://github.com/FabricMC/fabric/commit/6126a5b1df77f501d2f75fd2aa3424abfa6ed9ff", "message": "Convert colors to hex\n\nCo-authored-by: Erlend \u00c5mdal <erlend@aamdal.com>", "committedDate": "2020-07-22T20:39:03Z", "type": "commit"}, {"oid": "8c0680ea7596d31da97e4a1cd765c4a52cda1bac", "url": "https://github.com/FabricMC/fabric/commit/8c0680ea7596d31da97e4a1cd765c4a52cda1bac", "message": "Update to 20w30a", "committedDate": "2020-07-22T20:49:43Z", "type": "commit"}, {"oid": "8c0680ea7596d31da97e4a1cd765c4a52cda1bac", "url": "https://github.com/FabricMC/fabric/commit/8c0680ea7596d31da97e4a1cd765c4a52cda1bac", "message": "Update to 20w30a", "committedDate": "2020-07-22T20:49:43Z", "type": "forcePushed"}, {"oid": "641ac848818ee60e89b208fd0339fd9994ff95e1", "url": "https://github.com/FabricMC/fabric/commit/641ac848818ee60e89b208fd0339fd9994ff95e1", "message": "imports again", "committedDate": "2020-07-22T20:55:26Z", "type": "commit"}]}