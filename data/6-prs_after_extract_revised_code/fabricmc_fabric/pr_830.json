{"pr_number": 830, "pr_title": "End Biomes Api [1.16]", "pr_createdAt": "2020-06-21T02:12:36Z", "pr_url": "https://github.com/FabricMC/fabric/pull/830", "timeline": [{"oid": "4d1736fad99e1be0921ef92d9576e8f503e64be4", "url": "https://github.com/FabricMC/fabric/commit/4d1736fad99e1be0921ef92d9576e8f503e64be4", "message": "Create EndBiomes.java", "committedDate": "2020-06-20T23:18:25Z", "type": "commit"}, {"oid": "673c508d825a0eb095f94ff9b5cb88d1b77e395c", "url": "https://github.com/FabricMC/fabric/commit/673c508d825a0eb095f94ff9b5cb88d1b77e395c", "message": "Revert \"Create EndBiomes.java\"\n\nThis reverts commit 4d1736fad99e1be0921ef92d9576e8f503e64be4.", "committedDate": "2020-06-20T23:18:39Z", "type": "commit"}, {"oid": "521333033d63d8e1fd85d29d2dea0ba657474194", "url": "https://github.com/FabricMC/fabric/commit/521333033d63d8e1fd85d29d2dea0ba657474194", "message": "Revert \"Revert \"Create EndBiomes.java\"\"\n\nThis reverts commit 673c508d825a0eb095f94ff9b5cb88d1b77e395c.", "committedDate": "2020-06-20T23:19:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTU1OQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static void addMidlandsiome(Biome biome, double weight) {\n          \n          \n            \n            \tpublic static void addMidlandsBiome(Biome biome, double weight) {", "author": "i509VCB", "createdAt": "2020-06-21T02:38:31Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biomes.v1;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.minecraft.world.biome.Biome;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+\n+/**\n+ * API that allows for adding biomes to the biome source for The End.\n+ */\n+public final class EndBiomes {\n+\tprivate EndBiomes() { }\n+\n+\t/**\n+\t * Ands the biome with the specified weight to the main end island region; note that this includes the main island and some of the land encircling the empty space.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addMainIslandBiome(Biome biome, double weight) {\n+\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n+\t}\n+\n+\t/**\n+\t * Ands the biome to with the specified weight to the end highlands regions which correspond to the End Highlands biome.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addHighlandsBiome(Biome biome, double weight) {\n+\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n+\t}\n+\n+\t/**\n+\t * Ands the biome to with the specified weight to the end midlands regions which correspond to the End Midlands biome.\n+\t *\n+\t * @param biome the biome to be added\n+\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n+\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n+\t * Vanilla biomes have a weight of 1.0\n+\t */\n+\tpublic static void addMidlandsiome(Biome biome, double weight) {", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\nindex 19089f7e..33c36681 100644\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\n+++ b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\n\n@@ -1,102 +1,4 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package net.fabricmc.fabric.api.biomes.v1;\n \n-import net.fabricmc.fabric.impl.biome.EndRegion;\n-import net.minecraft.world.biome.Biome;\n-\n-import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n-\n-/**\n- * API that allows for adding biomes to the biome source for The End.\n- */\n public final class EndBiomes {\n-\tprivate EndBiomes() { }\n-\n-\t/**\n-\t * Ands the biome with the specified weight to the main end island region; note that this includes the main island and some of the land encircling the empty space.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addMainIslandBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end highlands regions which correspond to the End Highlands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addHighlandsBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end midlands regions which correspond to the End Midlands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addMidlandsiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end barrens regions which correspond to the End Barrens biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addBarrensBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the small end island regions which correspond to the Small End Islands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addSmallIslandsBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to the specified end region with the specified weight.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param region The region of the end this biome is added to.\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addBiome(Biome biome, EndRegion region, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, region, weight);\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTU5MQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175591", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n          \n          \n            \n            \t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (got %s)\", weight);", "author": "i509VCB", "createdAt": "2020-06-21T02:39:19Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -131,6 +133,13 @@ public static void addNetherBiome(Biome biome) {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n+\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n+\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n+\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n+\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\nindex 88ca85ca..01ca6855 100644\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n+++ b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n\n@@ -133,13 +131,6 @@ public final class InternalBiomeData {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n-\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n-\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n-\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n-\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n-\t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);\n-\t}\n-\n \tpublic static Set<Biome> getSpawnBiomes() {\n \t\treturn SPAWN_BIOMES;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTYxNg==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);\n          \n          \n            \n            \t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, key -> new WeightedBiomePicker()).addBiome(biome, weight);", "author": "i509VCB", "createdAt": "2020-06-21T02:39:42Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -131,6 +133,13 @@ public static void addNetherBiome(Biome biome) {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n+\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n+\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n+\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n+\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n+\t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\nindex 88ca85ca..01ca6855 100644\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n+++ b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n\n@@ -133,13 +131,6 @@ public final class InternalBiomeData {\n \t\tNETHER_BIOMES.add(biome);\n \t}\n \n-\tpublic static void addEndBiome(Biome biome, EndRegion region, double weight) {\n-\t\tPreconditions.checkArgument(biome != null, \"Biome is null\");\n-\t\tPreconditions.checkArgument(region != null, \"EndRegion is null\");\n-\t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (%s)\", weight);\n-\t\tEND_REGION_BIOME_PICKERS.computeIfAbsent(region, region1 -> new WeightedBiomePicker()).addBiome(biome, weight);\n-\t}\n-\n \tpublic static Set<Biome> getSpawnBiomes() {\n \t\treturn SPAWN_BIOMES;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTY3Ng==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175676", "bodyText": "Mark this @Unique", "author": "i509VCB", "createdAt": "2020-06-21T02:40:56Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\ndeleted file mode 100644\nindex f84c8587..00000000\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.mixin.biome;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.spongepowered.asm.mixin.Final;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n-\n-import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n-import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n-import net.minecraft.world.biome.source.TheEndBiomeSource;\n-\n-import net.fabricmc.fabric.impl.biome.EndRegion;\n-import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n-import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n-import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n-\n-@Mixin(TheEndBiomeSource.class)\n-public class MixinTheEndBiomeSource {\n-\t@Shadow\n-\t@Final\n-\tprivate long field_24731;\n-\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n-\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);\n-\n-\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n-\tprivate void fabric_addDefaultEndBiomes(long l, CallbackInfo ci) {\n-\t\tBIOME_REGION_MAP.put(Biomes.THE_END, EndRegion.MAIN_ISLAND);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_HIGHLANDS, EndRegion.HIGHLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_MIDLANDS, EndRegion.MIDLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_BARRENS, EndRegion.BARRENS);\n-\t\tBIOME_REGION_MAP.put(Biomes.SMALL_END_ISLANDS, EndRegion.SMALL_ISLANDS);\n-\n-\t\tfor (Map.Entry<Biome, EndRegion> entry : BIOME_REGION_MAP.entrySet()) {\n-\t\t\tBiome biome = entry.getKey();\n-\t\t\tEndRegion region = entry.getValue();\n-\t\t\tInternalBiomeData.addEndBiome(biome, region, 1.0);\n-\t\t}\n-\t}\n-\n-\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n-\t\tBiome vanillaBiome = cir.getReturnValue();\n-\n-\t\tif (BIOME_REGION_MAP.containsKey(vanillaBiome)) {\n-\t\t\tEndRegion region = BIOME_REGION_MAP.get(vanillaBiome);\n-\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndRegionBiomePickers().get(region);\n-\n-\t\t\tcir.setReturnValue(picker.pickFromNoise(randomnessSource, biomeX/16.0, 0, biomeZ/16.0));\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTY4MQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175681", "bodyText": "Mark this @Unique", "author": "i509VCB", "createdAt": "2020-06-21T02:41:04Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n+\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\ndeleted file mode 100644\nindex f84c8587..00000000\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.mixin.biome;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.spongepowered.asm.mixin.Final;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n-\n-import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n-import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n-import net.minecraft.world.biome.source.TheEndBiomeSource;\n-\n-import net.fabricmc.fabric.impl.biome.EndRegion;\n-import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n-import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n-import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n-\n-@Mixin(TheEndBiomeSource.class)\n-public class MixinTheEndBiomeSource {\n-\t@Shadow\n-\t@Final\n-\tprivate long field_24731;\n-\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n-\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);\n-\n-\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n-\tprivate void fabric_addDefaultEndBiomes(long l, CallbackInfo ci) {\n-\t\tBIOME_REGION_MAP.put(Biomes.THE_END, EndRegion.MAIN_ISLAND);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_HIGHLANDS, EndRegion.HIGHLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_MIDLANDS, EndRegion.MIDLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_BARRENS, EndRegion.BARRENS);\n-\t\tBIOME_REGION_MAP.put(Biomes.SMALL_END_ISLANDS, EndRegion.SMALL_ISLANDS);\n-\n-\t\tfor (Map.Entry<Biome, EndRegion> entry : BIOME_REGION_MAP.entrySet()) {\n-\t\t\tBiome biome = entry.getKey();\n-\t\t\tEndRegion region = entry.getValue();\n-\t\t\tInternalBiomeData.addEndBiome(biome, region, 1.0);\n-\t\t}\n-\t}\n-\n-\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n-\t\tBiome vanillaBiome = cir.getReturnValue();\n-\n-\t\tif (BIOME_REGION_MAP.containsKey(vanillaBiome)) {\n-\t\t\tEndRegion region = BIOME_REGION_MAP.get(vanillaBiome);\n-\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndRegionBiomePickers().get(region);\n-\n-\t\t\tcir.setReturnValue(picker.pickFromNoise(randomnessSource, biomeX/16.0, 0, biomeZ/16.0));\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n          \n          \n            \n            \n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nSo checkstyle builds", "author": "i509VCB", "createdAt": "2020-06-21T02:42:24Z", "path": "fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java", "diffHunk": "@@ -31,8 +33,15 @@\n \t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n \t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n \t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n \t}\n \n \tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n \t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n+\n+\t}", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NjUwNQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443176505", "bodyText": "That doesn't prevent it from building.", "author": "RedstoneParadox", "createdAt": "2020-06-21T02:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NjU1Mw==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443176553", "bodyText": "must have been mistaken. I'd say then to be consistent with the other test class", "author": "i509VCB", "createdAt": "2020-06-21T02:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java b/fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java\nindex fb1be070..3efce621 100644\n--- a/fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java\n+++ b/fabric-biomes-v1/src/testmod/java/net/fabricmc/fabric/test/biome/FabricBiomeTest.java\n\n@@ -33,15 +31,8 @@ public class FabricBiomeTest implements ModInitializer {\n \t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n \t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n \t\tNetherBiomes.addNetherBiome(biome);\n-\n-\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n-\t\tEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n \t}\n \n \tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n \t}\n-\n-\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n-\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NTk3OQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443175979", "bodyText": "TheEndBiomes imo", "author": "Prospector", "createdAt": "2020-06-21T02:47:07Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.biomes.v1;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.minecraft.world.biome.Biome;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+\n+/**\n+ * API that allows for adding biomes to the biome source for The End.\n+ */\n+public final class EndBiomes {", "originalCommit": "1bd9a647015155822785fd7a2def345da1d560c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\nindex 19089f7e..33c36681 100644\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\n+++ b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/api/biomes/v1/EndBiomes.java\n\n@@ -1,102 +1,4 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package net.fabricmc.fabric.api.biomes.v1;\n \n-import net.fabricmc.fabric.impl.biome.EndRegion;\n-import net.minecraft.world.biome.Biome;\n-\n-import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n-\n-/**\n- * API that allows for adding biomes to the biome source for The End.\n- */\n public final class EndBiomes {\n-\tprivate EndBiomes() { }\n-\n-\t/**\n-\t * Ands the biome with the specified weight to the main end island region; note that this includes the main island and some of the land encircling the empty space.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addMainIslandBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end highlands regions which correspond to the End Highlands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addHighlandsBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end midlands regions which correspond to the End Midlands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addMidlandsiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the end barrens regions which correspond to the End Barrens biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addBarrensBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to with the specified weight to the small end island regions which correspond to the Small End Islands biome.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addSmallIslandsBiome(Biome biome, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, EndRegion.MAIN_ISLAND, weight);\n-\t}\n-\n-\t/**\n-\t * Ands the biome to the specified end region with the specified weight.\n-\t *\n-\t * @param biome the biome to be added\n-\t * @param region The region of the end this biome is added to.\n-\t * @param weight the weight of the entry. The weight in this method corresponds to its selection likelihood, with\n-\t * heavier biomes being more likely to be selected and lighter biomes being selected with less likelihood.\n-\t * Vanilla biomes have a weight of 1.0\n-\t */\n-\tpublic static void addBiome(Biome biome, EndRegion region, double weight) {\n-\t\tInternalBiomeData.addEndBiome(biome, region, weight);\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDUxNg==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();\n          \n          \n            \n            \tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new EnumMap<>();", "author": "liach", "createdAt": "2020-06-21T05:50:22Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -51,6 +51,8 @@ private InternalBiomeData() { }\n \n \tprivate static final Set<Biome> NETHER_BIOMES = new HashSet<>();\n \n+\tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();", "originalCommit": "9dc36ef24c8ba207c2b3f464048beb1502852957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDgxMw==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184813", "bodyText": "Don't just apply this change, you need to add import in addition", "author": "liach", "createdAt": "2020-06-21T05:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\nindex 3565eeb9..01ca6855 100644\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n+++ b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n\n@@ -51,8 +51,6 @@ public final class InternalBiomeData {\n \n \tprivate static final Set<Biome> NETHER_BIOMES = new HashSet<>();\n \n-\tprivate static final Map<EndRegion, WeightedBiomePicker> END_REGION_BIOME_PICKERS = new HashMap<>();\n-\n \tprivate static final Set<Biome> SPAWN_BIOMES = new HashSet<>();\n \n \tprivate static Method injectBiomeMethod = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDU4MQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184581", "bodyText": "Is it intentional that the calls on the sampler doesn't affect the calls on nextInt in this implementation?", "author": "liach", "createdAt": "2020-06-21T05:51:36Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.biome;\n+\n+import java.util.Random;\n+\n+import net.minecraft.util.math.noise.PerlinNoiseSampler;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+\n+public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n+\tprivate final long seed;\n+\tprivate final Random random;\n+\tprivate final PerlinNoiseSampler sampler;\n+\n+\tpublic SimpleLayerRandomnessSource(long seed) {\n+\t\tthis.seed = seed;\n+\t\tthis.random = new Random(seed);\n+\t\tthis.sampler = new PerlinNoiseSampler(new Random(seed));", "originalCommit": "9dc36ef24c8ba207c2b3f464048beb1502852957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java\ndeleted file mode 100644\nindex 3c00cafb..00000000\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java\n+++ /dev/null\n\n@@ -1,44 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.impl.biome;\n-\n-import java.util.Random;\n-\n-import net.minecraft.util.math.noise.PerlinNoiseSampler;\n-import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n-\n-public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n-\tprivate final long seed;\n-\tprivate final Random random;\n-\tprivate final PerlinNoiseSampler sampler;\n-\n-\tpublic SimpleLayerRandomnessSource(long seed) {\n-\t\tthis.seed = seed;\n-\t\tthis.random = new Random(seed);\n-\t\tthis.sampler = new PerlinNoiseSampler(new Random(seed));\n-\t}\n-\n-\t@Override\n-\tpublic int nextInt(int bound) {\n-\t\treturn random.nextInt(bound);\n-\t}\n-\n-\t@Override\n-\tpublic PerlinNoiseSampler getNoiseSampler() {\n-\t\treturn sampler;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NDY4OQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r443184689", "bodyText": "Maybe comment that picker won't be null as you've populated all the 5 end regions above, so if npe arises below it'd be easier to debug", "author": "liach", "createdAt": "2020-06-21T05:53:12Z", "path": "fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.EndRegion;\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate long field_24731;\n+\t@Unique\n+\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n+\t@Unique\n+\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);\n+\n+\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+\tprivate void fabric_addDefaultEndBiomes(long l, CallbackInfo ci) {\n+\t\tBIOME_REGION_MAP.put(Biomes.THE_END, EndRegion.MAIN_ISLAND);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_HIGHLANDS, EndRegion.HIGHLANDS);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_MIDLANDS, EndRegion.MIDLANDS);\n+\t\tBIOME_REGION_MAP.put(Biomes.END_BARRENS, EndRegion.BARRENS);\n+\t\tBIOME_REGION_MAP.put(Biomes.SMALL_END_ISLANDS, EndRegion.SMALL_ISLANDS);\n+\n+\t\tfor (Map.Entry<Biome, EndRegion> entry : BIOME_REGION_MAP.entrySet()) {\n+\t\t\tBiome biome = entry.getKey();\n+\t\t\tEndRegion region = entry.getValue();\n+\t\t\tInternalBiomeData.addEndBiome(biome, region, 1.0);\n+\t\t}\n+\t}\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\tif (BIOME_REGION_MAP.containsKey(vanillaBiome)) {\n+\t\t\tEndRegion region = BIOME_REGION_MAP.get(vanillaBiome);\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndRegionBiomePickers().get(region);", "originalCommit": "9dc36ef24c8ba207c2b3f464048beb1502852957", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "chunk": "diff --git a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java b/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\ndeleted file mode 100644\nindex efa6d5f9..00000000\n--- a/fabric-biomes-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.mixin.biome;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.spongepowered.asm.mixin.Final;\n-import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.asm.mixin.Shadow;\n-import org.spongepowered.asm.mixin.Unique;\n-import org.spongepowered.asm.mixin.injection.At;\n-import org.spongepowered.asm.mixin.injection.Inject;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n-import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n-\n-import net.minecraft.world.biome.Biome;\n-import net.minecraft.world.biome.Biomes;\n-import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n-import net.minecraft.world.biome.source.TheEndBiomeSource;\n-\n-import net.fabricmc.fabric.impl.biome.EndRegion;\n-import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n-import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n-import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n-\n-@Mixin(TheEndBiomeSource.class)\n-public class MixinTheEndBiomeSource {\n-\t@Shadow\n-\t@Final\n-\tprivate long field_24731;\n-\t@Unique\n-\tprivate final Map<Biome, EndRegion> BIOME_REGION_MAP = new HashMap<>();\n-\t@Unique\n-\tprivate final LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(field_24731);\n-\n-\t@Inject(method = \"<init>\", at = @At(\"TAIL\"))\n-\tprivate void fabric_addDefaultEndBiomes(long l, CallbackInfo ci) {\n-\t\tBIOME_REGION_MAP.put(Biomes.THE_END, EndRegion.MAIN_ISLAND);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_HIGHLANDS, EndRegion.HIGHLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_MIDLANDS, EndRegion.MIDLANDS);\n-\t\tBIOME_REGION_MAP.put(Biomes.END_BARRENS, EndRegion.BARRENS);\n-\t\tBIOME_REGION_MAP.put(Biomes.SMALL_END_ISLANDS, EndRegion.SMALL_ISLANDS);\n-\n-\t\tfor (Map.Entry<Biome, EndRegion> entry : BIOME_REGION_MAP.entrySet()) {\n-\t\t\tBiome biome = entry.getKey();\n-\t\t\tEndRegion region = entry.getValue();\n-\t\t\tInternalBiomeData.addEndBiome(biome, region, 1.0);\n-\t\t}\n-\t}\n-\n-\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n-\t\tBiome vanillaBiome = cir.getReturnValue();\n-\n-\t\tif (BIOME_REGION_MAP.containsKey(vanillaBiome)) {\n-\t\t\tEndRegion region = BIOME_REGION_MAP.get(vanillaBiome);\n-\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndRegionBiomePickers().get(region);\n-\n-\t\t\tcir.setReturnValue(picker.pickFromNoise(randomnessSource, biomeX/16.0, 0, biomeZ/16.0));\n-\t\t}\n-\t}\n-}\n"}}, {"oid": "f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "url": "https://github.com/FabricMC/fabric/commit/f2bdf2a37a09c35bd1f187d91d78b279dea0d633", "message": "Merge branch '1.16' of https://github.com/FabricMC/fabric into 1.16", "committedDate": "2020-06-26T04:23:05Z", "type": "commit"}, {"oid": "b778e31a5a773ff6f2a140c7a2b550f4b316ae59", "url": "https://github.com/FabricMC/fabric/commit/b778e31a5a773ff6f2a140c7a2b550f4b316ae59", "message": "Merge branch '1.16' of https://github.com/FabricMC/fabric into 1.16", "committedDate": "2020-10-03T22:49:46Z", "type": "commit"}, {"oid": "aa08619070ec766d3d881fd91e43638b491adefd", "url": "https://github.com/FabricMC/fabric/commit/aa08619070ec766d3d881fd91e43638b491adefd", "message": "Rename ContinentalBiomeEntry to WeightedBiomeEntry", "committedDate": "2020-10-03T23:28:51Z", "type": "commit"}, {"oid": "dd4dd52f4a4ee095e7c2568ca38c0bc8e42f1564", "url": "https://github.com/FabricMC/fabric/commit/dd4dd52f4a4ee095e7c2568ca38c0bc8e42f1564", "message": "Complete API for adding biomes to the end", "committedDate": "2020-10-03T23:29:03Z", "type": "commit"}, {"oid": "b2dbef80c2ac428b2c35e3a1ef6fe32a9dd4f021", "url": "https://github.com/FabricMC/fabric/commit/b2dbef80c2ac428b2c35e3a1ef6fe32a9dd4f021", "message": "Mixin to end biome source", "committedDate": "2020-10-03T23:30:03Z", "type": "commit"}, {"oid": "37bc61b04410ea8f176b4c894a30418127922f3f", "url": "https://github.com/FabricMC/fabric/commit/37bc61b04410ea8f176b4c894a30418127922f3f", "message": "Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\n\nThis reverts commit 849197e15d18c26af2a6f2aa1766b7d73d9a7144.", "committedDate": "2020-10-03T23:41:18Z", "type": "commit"}, {"oid": "5513cf9403495b71111b77dcf8e95a8c3331a135", "url": "https://github.com/FabricMC/fabric/commit/5513cf9403495b71111b77dcf8e95a8c3331a135", "message": "Revert \"Revert \"Rename ContinentalBiomeEntry to WeightedBiomeEntry\"\"\n\nThis reverts commit c2aa4ab097eb3daed71e82d4e77142671ed04316.", "committedDate": "2020-10-03T23:41:33Z", "type": "commit"}, {"oid": "bb6bd75209f94fa6fe8be9950810888499b81c64", "url": "https://github.com/FabricMC/fabric/commit/bb6bd75209f94fa6fe8be9950810888499b81c64", "message": "Create SimpleLayerRandomnessSource for use with end biome source mixin", "committedDate": "2020-10-03T23:41:46Z", "type": "commit"}, {"oid": "beb99dbef909f27c24827c8c4675e698155b1f9e", "url": "https://github.com/FabricMC/fabric/commit/beb99dbef909f27c24827c8c4675e698155b1f9e", "message": "Renamed MAIN region to MAIN_ISLANDS", "committedDate": "2020-10-03T23:41:46Z", "type": "commit"}, {"oid": "dac6a24b2d13201b8c01050d4673dcbee3084041", "url": "https://github.com/FabricMC/fabric/commit/dac6a24b2d13201b8c01050d4673dcbee3084041", "message": "Create test mod", "committedDate": "2020-10-03T23:42:18Z", "type": "commit"}, {"oid": "4b72dc34b355f7ce33a53c1cf97434c0c2c474e6", "url": "https://github.com/FabricMC/fabric/commit/4b72dc34b355f7ce33a53c1cf97434c0c2c474e6", "message": "Added pickFromNoise method to WeightedBiomePicker", "committedDate": "2020-10-03T23:42:18Z", "type": "commit"}, {"oid": "28bcdf626278c274b6cf63b9b06ddae944de05bc", "url": "https://github.com/FabricMC/fabric/commit/28bcdf626278c274b6cf63b9b06ddae944de05bc", "message": "Javadoc and licensing info", "committedDate": "2020-10-03T23:42:18Z", "type": "commit"}, {"oid": "528be401f21064e65f0e9427693fc1b8feecf794", "url": "https://github.com/FabricMC/fabric/commit/528be401f21064e65f0e9427693fc1b8feecf794", "message": "Comply with checkstyle", "committedDate": "2020-10-03T23:42:33Z", "type": "commit"}, {"oid": "2cdb514de4cf715b34ef09eacf09f0586a31be1c", "url": "https://github.com/FabricMC/fabric/commit/2cdb514de4cf715b34ef09eacf09f0586a31be1c", "message": "Internalize EndRegion", "committedDate": "2020-10-04T02:11:30Z", "type": "commit"}, {"oid": "fbeab4bacb872d3dd075d91b1d3736f595478aaa", "url": "https://github.com/FabricMC/fabric/commit/fbeab4bacb872d3dd075d91b1d3736f595478aaa", "message": "Added stretching when getting the biome for the end", "committedDate": "2020-10-04T02:11:36Z", "type": "commit"}, {"oid": "630643f07c481a2fe6c58e8efaa628500ca78ce3", "url": "https://github.com/FabricMC/fabric/commit/630643f07c481a2fe6c58e8efaa628500ca78ce3", "message": "Rename EndBiomes to TheEndBiomes to be consistent with yarn mappings", "committedDate": "2020-10-04T02:12:38Z", "type": "commit"}, {"oid": "3a64d80811acb7553a868dd5262f82607cc1fc39", "url": "https://github.com/FabricMC/fabric/commit/3a64d80811acb7553a868dd5262f82607cc1fc39", "message": "Fix typo\r\n\r\nCourtesy of i509VBC\n\nCo-authored-by: i509VCB <i509vcb@gmail.com>", "committedDate": "2020-10-04T02:12:38Z", "type": "commit"}, {"oid": "1f862d86233bf685dc00ad0559e49c87616e6a91", "url": "https://github.com/FabricMC/fabric/commit/1f862d86233bf685dc00ad0559e49c87616e6a91", "message": "Add @Unique to private fields in MixinTheEndBiomeSource", "committedDate": "2020-10-04T02:12:52Z", "type": "commit"}, {"oid": "c24979f490e14d4991ae3bd7e99a2d72ba22da8c", "url": "https://github.com/FabricMC/fabric/commit/c24979f490e14d4991ae3bd7e99a2d72ba22da8c", "message": "Made end test biome consistent in style with previous test\r\n\r\nCourtesy of i509VBC\n\nCo-authored-by: i509VCB <i509vcb@gmail.com>", "committedDate": "2020-10-04T02:12:52Z", "type": "commit"}, {"oid": "da315f275ff3d0be5445e677b496df99cc9922c1", "url": "https://github.com/FabricMC/fabric/commit/da315f275ff3d0be5445e677b496df99cc9922c1", "message": "Fix imports", "committedDate": "2020-10-04T02:12:52Z", "type": "commit"}, {"oid": "18b267b102e5d30e28289cc56353cc2fcd1ed45d", "url": "https://github.com/FabricMC/fabric/commit/18b267b102e5d30e28289cc56353cc2fcd1ed45d", "message": "Didn't know test mods needed to follow the checkstyle", "committedDate": "2020-10-04T02:13:17Z", "type": "commit"}, {"oid": "5bae20c1047844ededc2a364a64041b477300e13", "url": "https://github.com/FabricMC/fabric/commit/5bae20c1047844ededc2a364a64041b477300e13", "message": "SimpleLayerRandomnessSource's random is now use to instantiate its noise sampler", "committedDate": "2020-10-04T02:13:17Z", "type": "commit"}, {"oid": "e915ed76e917904ae233bcefbfb6b454a04db4b7", "url": "https://github.com/FabricMC/fabric/commit/e915ed76e917904ae233bcefbfb6b454a04db4b7", "message": "A very important note", "committedDate": "2020-10-04T02:13:20Z", "type": "commit"}, {"oid": "d8eb8a48721a1fe436e5ab694659ee2680aef0f2", "url": "https://github.com/FabricMC/fabric/commit/d8eb8a48721a1fe436e5ab694659ee2680aef0f2", "message": "Update javadoc for adding biomes to the Main Island region", "committedDate": "2020-10-04T02:13:20Z", "type": "commit"}, {"oid": "f3d162b9110364412a47a3d9661e1f8bb286841d", "url": "https://github.com/FabricMC/fabric/commit/f3d162b9110364412a47a3d9661e1f8bb286841d", "message": "Remove method that is leftover from when EndRegion was part of the API", "committedDate": "2020-10-04T02:13:20Z", "type": "commit"}, {"oid": "583ce9bdb8b6e6ca04836420c7bd6cff1636a8c7", "url": "https://github.com/FabricMC/fabric/commit/583ce9bdb8b6e6ca04836420c7bd6cff1636a8c7", "message": "Ported 1.16.1 biomes-api-v1 to 1.16.2.\nPublic API changes:\n- Removed flagging biomes as suitable for player spawns since that is now handled in the Biome Builder.\n- Changed API over to RegistryKey's, not because it's necessary, but because it is more ergonomic since Vanilla Biomes in BuiltInBiomes are now all exposed as keys, rather than instances.", "committedDate": "2020-10-04T02:21:02Z", "type": "commit"}, {"oid": "8367c781bf98d763d5bcc1b6661bd2efb2fc6791", "url": "https://github.com/FabricMC/fabric/commit/8367c781bf98d763d5bcc1b6661bd2efb2fc6791", "message": "Increase memory size to fix build failures.", "committedDate": "2020-10-04T02:21:02Z", "type": "commit"}, {"oid": "685e731861572d280861d5ce605f913f50f70bb2", "url": "https://github.com/FabricMC/fabric/commit/685e731861572d280861d5ce605f913f50f70bb2", "message": "Add the ability to add modded dimensions to the regions of the end.", "committedDate": "2020-10-04T02:25:08Z", "type": "commit"}, {"oid": "685e731861572d280861d5ce605f913f50f70bb2", "url": "https://github.com/FabricMC/fabric/commit/685e731861572d280861d5ce605f913f50f70bb2", "message": "Add the ability to add modded dimensions to the regions of the end.", "committedDate": "2020-10-04T02:25:08Z", "type": "forcePushed"}, {"oid": "c75e7d621032432655970f8cfefde0b4f4bd64e5", "url": "https://github.com/FabricMC/fabric/commit/c75e7d621032432655970f8cfefde0b4f4bd64e5", "message": "Hopefully fixed everything that went wrong during the rebase", "committedDate": "2020-10-24T22:26:17Z", "type": "commit"}, {"oid": "cd5a9430d3b94a1d9e693f41014375c53f2f6816", "url": "https://github.com/FabricMC/fabric/commit/cd5a9430d3b94a1d9e693f41014375c53f2f6816", "message": "Update fabric-biome-api-v1.mixins.json", "committedDate": "2020-10-24T22:35:11Z", "type": "commit"}, {"oid": "d42a80ae52d6c11ffe004ad7ff3d197d8aa69996", "url": "https://github.com/FabricMC/fabric/commit/d42a80ae52d6c11ffe004ad7ff3d197d8aa69996", "message": "Finally got custom end biomes to generate", "committedDate": "2020-10-24T23:06:19Z", "type": "commit"}, {"oid": "4ff73241e0f26b445457a155961d74e42dfa75dd", "url": "https://github.com/FabricMC/fabric/commit/4ff73241e0f26b445457a155961d74e42dfa75dd", "message": "Thanks for nothing, GitHub Desktop", "committedDate": "2020-10-24T23:17:14Z", "type": "commit"}, {"oid": "e2d3515202b57dbf060669effbe21934160d50a4", "url": "https://github.com/FabricMC/fabric/commit/e2d3515202b57dbf060669effbe21934160d50a4", "message": "Bad GitHub Desktop", "committedDate": "2020-10-24T23:24:35Z", "type": "commit"}, {"oid": "89a874b96f00733f38689f2c50b78b23ff145df5", "url": "https://github.com/FabricMC/fabric/commit/89a874b96f00733f38689f2c50b78b23ff145df5", "message": "Bad newline no cookie", "committedDate": "2020-10-24T23:25:55Z", "type": "commit"}, {"oid": "a464bac675d53fbbe551658998f49259c8d09d7d", "url": "https://github.com/FabricMC/fabric/commit/a464bac675d53fbbe551658998f49259c8d09d7d", "message": "Got everything to follow the checkstyle", "committedDate": "2020-10-25T04:38:14Z", "type": "commit"}, {"oid": "dc471062410ec2de0899a7520584b16f5ddb88f1", "url": "https://github.com/FabricMC/fabric/commit/dc471062410ec2de0899a7520584b16f5ddb88f1", "message": "Bring branch up-to-date with main repo (#11)", "committedDate": "2020-10-25T04:45:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0OTAxMg==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r511549012", "bodyText": "this should be variant is null", "author": "OroArmor", "createdAt": "2020-10-25T05:17:41Z", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java", "diffHunk": "@@ -142,6 +161,13 @@ public static void addNetherBiome(RegistryKey<Biome> biome, Biome.MixedNoisePoin\n \t\tNETHER_BIOME_NOISE_POINTS.put(biome, spawnNoisePoint);\n \t}\n \n+\tpublic static void addEndBiomeReplacement(RegistryKey<Biome> replaced, RegistryKey<Biome> variant, double weight) {\n+\t\tPreconditions.checkNotNull(replaced, \"replaced is null\");\n+\t\tPreconditions.checkNotNull(variant, \"replaced is null\");", "originalCommit": "dc471062410ec2de0899a7520584b16f5ddb88f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13d04965ec6ddd6bad2d1d2958c88e40293c47a6", "chunk": "diff --git a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\nindex 91dd44dc..f77dbf46 100644\n--- a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n+++ b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/InternalBiomeData.java\n\n@@ -162,8 +162,8 @@ public final class InternalBiomeData {\n \t}\n \n \tpublic static void addEndBiomeReplacement(RegistryKey<Biome> replaced, RegistryKey<Biome> variant, double weight) {\n-\t\tPreconditions.checkNotNull(replaced, \"replaced is null\");\n-\t\tPreconditions.checkNotNull(variant, \"replaced is null\");\n+\t\tPreconditions.checkNotNull(replaced, \"replaced biome is null\");\n+\t\tPreconditions.checkNotNull(variant, \"variant biome is null\");\n \t\tPreconditions.checkArgument(weight > 0.0, \"Weight is less than or equal to 0.0 (got %s)\", weight);\n \t\tEND_VARIANTS.computeIfAbsent(replaced, key -> new WeightedBiomePicker()).addBiome(variant, weight);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0OTIyNg==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r511549226", "bodyText": "uh is git being weird... This is in the wrong module, It should be in the biomes module, but it is in the Items module.", "author": "OroArmor", "createdAt": "2020-10-25T05:21:18Z", "path": "fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java", "diffHunk": "@@ -16,20 +16,31 @@\n \n package net.fabricmc.fabric.test.item;\n \n-import net.minecraft.entity.EquipmentSlot;\n-import net.minecraft.item.Item;\n-import net.minecraft.item.ItemGroup;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.Registry;\n+import net.minecraft.world.biome.Biomes;\n+import net.minecraft.world.biome.CrimsonForestBiome;\n+import net.minecraft.world.biome.EndHighlandsBiome;\n \n+import net.fabricmc.fabric.api.biomes.v1.TheEndBiomes;\n import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.item.v1.FabricItemSettings;\n-\n-public class FabricItemSettingsTests implements ModInitializer {\n-\t@Override\n-\tpublic void onInitialize() {\n-\t\t// Registers an item with a custom equipment slot.\n-\t\tItem testItem = new Item(new FabricItemSettings().group(ItemGroup.MISC).equipmentSlot(stack -> EquipmentSlot.CHEST));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-item-api-v1-testmod\", \"test_item\"), testItem);\n+import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n+\n+public class FabricBiomeTest implements ModInitializer {\n+\tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n+\n+\t@Override public void onInitialize() {\n+\t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n+\t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n+\t\tNetherBiomes.addNetherBiome(biome);\n+\n+\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n+\t\tTheEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n+\t}\n+\n+\tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n+\t}\n+\n+\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n \t}\n }", "originalCommit": "dc471062410ec2de0899a7520584b16f5ddb88f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5dcb66a232154fe728ef13552836fc96274880c4", "chunk": "diff --git a/fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java b/fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java\nindex 036bd737..aa5c0fb4 100644\n--- a/fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java\n+++ b/fabric-item-api-v1/src/testmod/java/net/fabricmc/fabric/test/item/FabricItemSettingsTests.java\n\n@@ -16,31 +16,20 @@\n \n package net.fabricmc.fabric.test.item;\n \n+import net.minecraft.entity.EquipmentSlot;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemGroup;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.Registry;\n-import net.minecraft.world.biome.Biomes;\n-import net.minecraft.world.biome.CrimsonForestBiome;\n-import net.minecraft.world.biome.EndHighlandsBiome;\n \n-import net.fabricmc.fabric.api.biomes.v1.TheEndBiomes;\n import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.biomes.v1.NetherBiomes;\n-\n-public class FabricBiomeTest implements ModInitializer {\n-\tpublic static final String MOD_ID = \"fabric-biome-api-v1-testmod\";\n-\n-\t@Override public void onInitialize() {\n-\t\tTestCrimsonForestBiome biome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_crimson_forest\"), new TestCrimsonForestBiome());\n-\t\tNetherBiomes.addNetherBiome(Biomes.BEACH);\n-\t\tNetherBiomes.addNetherBiome(biome);\n-\n-\t\tTestEndHighlandsBiome testEndBiome = Registry.register(Registry.BIOME, new Identifier(MOD_ID, \"test_end_highlands\"), new TestEndHighlandsBiome());\n-\t\tTheEndBiomes.addHighlandsBiome(testEndBiome, 5.0);\n-\t}\n-\n-\tpublic class TestCrimsonForestBiome extends CrimsonForestBiome {\n-\t}\n-\n-\tpublic class TestEndHighlandsBiome extends EndHighlandsBiome {\n+import net.fabricmc.fabric.api.item.v1.FabricItemSettings;\n+\n+public class FabricItemSettingsTests implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// Registers an item with a custom equipment slot.\n+\t\tItem testItem = new Item(new FabricItemSettings().group(ItemGroup.MISC).equipmentSlot(stack -> EquipmentSlot.CHEST));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-item-api-v1-testmod\", \"test_item\"), testItem);\n \t}\n }\n"}}, {"oid": "f3dfd093d662c21789a6c0d62d3d4f19bafb83ba", "url": "https://github.com/FabricMC/fabric/commit/f3dfd093d662c21789a6c0d62d3d4f19bafb83ba", "message": "Revert \"Bring branch up-to-date with main repo (#11)\"\n\nThis reverts commit dc471062410ec2de0899a7520584b16f5ddb88f1.", "committedDate": "2020-10-25T18:48:57Z", "type": "commit"}, {"oid": "8e84da51e30f237f59610502c015d19964ae13a8", "url": "https://github.com/FabricMC/fabric/commit/8e84da51e30f237f59610502c015d19964ae13a8", "message": "Remove some stuff that's not supposed to be there", "committedDate": "2020-10-25T18:53:16Z", "type": "commit"}, {"oid": "5dcb66a232154fe728ef13552836fc96274880c4", "url": "https://github.com/FabricMC/fabric/commit/5dcb66a232154fe728ef13552836fc96274880c4", "message": "Fix git silliness", "committedDate": "2020-10-25T18:56:22Z", "type": "commit"}, {"oid": "749451acd75fc7dae7644dd09f54819798a68ba2", "url": "https://github.com/FabricMC/fabric/commit/749451acd75fc7dae7644dd09f54819798a68ba2", "message": "Merge pull request #12 from FabricMC/1.16\n\nMerge recent Fabric 1.16 commits, take 2", "committedDate": "2020-10-25T18:58:41Z", "type": "commit"}, {"oid": "8a8700d949871e2d9351a8eea279566957b3ba79", "url": "https://github.com/FabricMC/fabric/commit/8a8700d949871e2d9351a8eea279566957b3ba79", "message": "Update FabricBiomeTest.java", "committedDate": "2020-10-25T19:02:13Z", "type": "commit"}, {"oid": "d8a05c5a7799aaed44a7fdb2b589243885fe1bc2", "url": "https://github.com/FabricMC/fabric/commit/d8a05c5a7799aaed44a7fdb2b589243885fe1bc2", "message": "TheEndBiomes is now Deprecated to match OverworldBiomes and NetherBiomes", "committedDate": "2020-10-25T19:02:46Z", "type": "commit"}, {"oid": "13d04965ec6ddd6bad2d1d2958c88e40293c47a6", "url": "https://github.com/FabricMC/fabric/commit/13d04965ec6ddd6bad2d1d2958c88e40293c47a6", "message": "Update some checkNotNull messages", "committedDate": "2020-10-25T19:04:10Z", "type": "commit"}, {"oid": "a4dd57fc3a4e8ee3979f1aa36ead1c3a1d2bb04d", "url": "https://github.com/FabricMC/fabric/commit/a4dd57fc3a4e8ee3979f1aa36ead1c3a1d2bb04d", "message": "Change the noise scale when replacing end biomes", "committedDate": "2020-10-25T19:12:05Z", "type": "commit"}, {"oid": "d01234ebf478d644d825cdf375b3482d71e12b4e", "url": "https://github.com/FabricMC/fabric/commit/d01234ebf478d644d825cdf375b3482d71e12b4e", "message": "Bad space no cookie", "committedDate": "2020-10-25T19:12:15Z", "type": "commit"}, {"oid": "d89e3615a8a163f82bb9b7137d7a9d721f97ecd7", "url": "https://github.com/FabricMC/fabric/commit/d89e3615a8a163f82bb9b7137d7a9d721f97ecd7", "message": "Remove unnecessary code", "committedDate": "2020-10-25T19:18:28Z", "type": "commit"}, {"oid": "70b97b6eff5900dffd66c611823bc1b22ff42c33", "url": "https://github.com/FabricMC/fabric/commit/70b97b6eff5900dffd66c611823bc1b22ff42c33", "message": "Remove unused imports", "committedDate": "2020-10-25T19:29:52Z", "type": "commit"}, {"oid": "8a203297d36499791489b25920851bd284c772f6", "url": "https://github.com/FabricMC/fabric/commit/8a203297d36499791489b25920851bd284c772f6", "message": "Set up InternalBiomeData to treat End Midlands and End Barrens as border biomes", "committedDate": "2020-10-28T20:43:13Z", "type": "commit"}, {"oid": "90cae7ac8ba3afe034c1df4dbc578f0a2f18d55c", "url": "https://github.com/FabricMC/fabric/commit/90cae7ac8ba3afe034c1df4dbc578f0a2f18d55c", "message": "Changed the API to reflect midlands and barrens biomes being considered border biomes", "committedDate": "2020-10-28T20:47:24Z", "type": "commit"}, {"oid": "0038f8dbf87db6e03206b4d5416d41857814e999", "url": "https://github.com/FabricMC/fabric/commit/0038f8dbf87db6e03206b4d5416d41857814e999", "message": "Start work on getting the new system fully working", "committedDate": "2020-10-28T20:53:40Z", "type": "commit"}, {"oid": "e4cd3dc62cea36b344ed1f408f07ec28fa8c86c1", "url": "https://github.com/FabricMC/fabric/commit/e4cd3dc62cea36b344ed1f408f07ec28fa8c86c1", "message": "Finally got everything working and cleaned up the Javadoc", "committedDate": "2020-11-01T22:06:27Z", "type": "commit"}, {"oid": "5d6bbb11b321fa746bf825c5a378089f2a5dc73f", "url": "https://github.com/FabricMC/fabric/commit/5d6bbb11b321fa746bf825c5a378089f2a5dc73f", "message": "Fixed checkstyle violations", "committedDate": "2020-11-01T22:20:05Z", "type": "commit"}, {"oid": "2e3e92a22fa1a568d38e68d0181305df5a733c67", "url": "https://github.com/FabricMC/fabric/commit/2e3e92a22fa1a568d38e68d0181305df5a733c67", "message": "Merge branch '1.16' into end-biomes-api", "committedDate": "2020-11-01T22:22:11Z", "type": "commit"}, {"oid": "24968ce2bf0120f59bfa9e3336e408e7b1fa6782", "url": "https://github.com/FabricMC/fabric/commit/24968ce2bf0120f59bfa9e3336e408e7b1fa6782", "message": "Fix checkstyle violations again", "committedDate": "2020-11-01T22:28:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDYzOA==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r516414638", "bodyText": "the fabric_ prefix can be dropped", "author": "i509VCB", "createdAt": "2020-11-03T03:49:03Z", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {", "originalCommit": "24968ce2bf0120f59bfa9e3336e408e7b1fa6782", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d379a07d881d52a465cc85ea6988c43eb05fbcfd", "chunk": "diff --git a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\nindex 42243372..859fba62 100644\n--- a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\n+++ b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java\n\n@@ -47,7 +47,7 @@ public class MixinTheEndBiomeSource {\n \tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n \n \t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n-\tprivate void fabric_getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\tprivate void getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n \t\tBiome vanillaBiome = cir.getReturnValue();\n \n \t\t// Since all vanilla biomes are added to the registry, this will never fail.\n"}}, {"oid": "d379a07d881d52a465cc85ea6988c43eb05fbcfd", "url": "https://github.com/FabricMC/fabric/commit/d379a07d881d52a465cc85ea6988c43eb05fbcfd", "message": "Drop fabric_ prefix", "committedDate": "2020-11-03T04:10:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519056705", "bodyText": "One thing that was never actually addressed was whether or not this stretch value of 64 was good for biome sampling. Since TheEndBiomeSource is very simplistic, there isn't actually anything to base this value off of and was something I came up with. Perhaps 128 or 256 would be better?", "author": "RedstoneParadox", "createdAt": "2020-11-06T23:39:24Z", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/mixin/biome/MixinTheEndBiomeSource.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.biome;\n+\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+\n+import net.minecraft.world.biome.BiomeKeys;\n+import net.minecraft.world.biome.Biome;\n+import net.minecraft.util.registry.Registry;\n+import net.minecraft.util.registry.RegistryKey;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+import net.minecraft.world.biome.source.TheEndBiomeSource;\n+\n+import net.fabricmc.fabric.impl.biome.InternalBiomeData;\n+import net.fabricmc.fabric.impl.biome.SimpleLayerRandomnessSource;\n+import net.fabricmc.fabric.impl.biome.WeightedBiomePicker;\n+\n+@Mixin(TheEndBiomeSource.class)\n+public class MixinTheEndBiomeSource {\n+\t@Shadow\n+\t@Final\n+\tprivate Registry<Biome> biomeRegistry;\n+\t@Shadow\n+\t@Final\n+\tprivate long seed;\n+\t@Unique\n+\tprivate LayerRandomnessSource randomnessSource = new SimpleLayerRandomnessSource(seed);\n+\n+\t@Inject(method = \"getBiomeForNoiseGen\", at = @At(\"RETURN\"), cancellable = true)\n+\tprivate void getWeightedEndBiome(int biomeX, int biomeY, int biomeZ, CallbackInfoReturnable<Biome> cir) {\n+\t\tBiome vanillaBiome = cir.getReturnValue();\n+\n+\t\t// Since all vanilla biomes are added to the registry, this will never fail.\n+\t\t// If not all vanilla biomes are added to the registry, this code will fail\n+\t\t// either way.\n+\t\tRegistryKey<Biome> vanillaKey = biomeRegistry.getKey(vanillaBiome).get();\n+\t\tRegistryKey<Biome> replacementKey;\n+\n+\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS || vanillaKey == BiomeKeys.END_BARRENS) {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker highlandsPicker = InternalBiomeData.getEndBiomesMap().get(BiomeKeys.END_HIGHLANDS);\n+\t\t\tRegistryKey<Biome> highlandsKey = highlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\n+\t\t\tif (vanillaKey == BiomeKeys.END_MIDLANDS) {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker midlandsPicker = InternalBiomeData.getEndMidlandsMap().get(highlandsKey);\n+\t\t\t\treplacementKey = midlandsPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t} else {\n+\t\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\t\tWeightedBiomePicker barrensPicker = InternalBiomeData.getEndBarrensMap().get(highlandsKey);\n+\t\t\t\treplacementKey = barrensPicker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Since the pickers are statically populated by InternalBiomeData, picker will never be null.\n+\t\t\tWeightedBiomePicker picker = InternalBiomeData.getEndBiomesMap().get(vanillaKey);\n+\t\t\treplacementKey = picker.pickFromNoise(randomnessSource, biomeX/64.0, 0, biomeZ/64.0);", "originalCommit": "d379a07d881d52a465cc85ea6988c43eb05fbcfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyNTUwOQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r521525509", "bodyText": "I did some testing and it's very difficult to find a custom biome when the stretch is 128, so I'm just going to leave it as is.", "author": "RedstoneParadox", "createdAt": "2020-11-11T17:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNTEyNQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r521535125", "bodyText": "It would be nice if you throw a comment there explaining why 64 is the best value for say", "author": "i509VCB", "createdAt": "2020-11-11T17:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NjcwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwNzM5NQ==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519207395", "bodyText": "Don't use Java's random here. It'll cause issues. Instead, the layer random should be re-initialized with the x/z coords and world seed. (nextInt() is not used anywhere here, but it's important enough to point out. Alternatively, throw an unsupported operation exception in nextInt.)", "author": "SuperCoder7979", "createdAt": "2020-11-07T19:02:23Z", "path": "fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.biome;\n+\n+import java.util.Random;\n+\n+import net.minecraft.util.math.noise.PerlinNoiseSampler;\n+import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n+\n+public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n+\tprivate final long seed;\n+\tprivate final Random random;\n+\tprivate final PerlinNoiseSampler sampler;\n+\n+\tpublic SimpleLayerRandomnessSource(long seed) {\n+\t\tthis.seed = seed;\n+\t\tthis.random = new Random(seed);", "originalCommit": "d379a07d881d52a465cc85ea6988c43eb05fbcfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxMDMwNA==", "url": "https://github.com/FabricMC/fabric/pull/830#discussion_r519210304", "bodyText": "But then what do I pass to the PerlinNoiseSampler?", "author": "RedstoneParadox", "createdAt": "2020-11-07T19:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwNzM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "468d91da98ef5364f6be5bc09e5a9b58c7e2cd5b", "chunk": "diff --git a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java\nindex 086152c6..8d792503 100644\n--- a/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java\n+++ b/fabric-biome-api-v1/src/main/java/net/fabricmc/fabric/impl/biome/SimpleLayerRandomnessSource.java\n\n@@ -22,19 +22,16 @@ import net.minecraft.util.math.noise.PerlinNoiseSampler;\n import net.minecraft.world.biome.layer.util.LayerRandomnessSource;\n \n public class SimpleLayerRandomnessSource implements LayerRandomnessSource {\n-\tprivate final long seed;\n-\tprivate final Random random;\n \tprivate final PerlinNoiseSampler sampler;\n \n \tpublic SimpleLayerRandomnessSource(long seed) {\n-\t\tthis.seed = seed;\n-\t\tthis.random = new Random(seed);\n+\t\tRandom random = new Random(seed);\n \t\tthis.sampler = new PerlinNoiseSampler(random);\n \t}\n \n \t@Override\n \tpublic int nextInt(int bound) {\n-\t\treturn random.nextInt(bound);\n+\t\tthrow new UnsupportedOperationException(\"SimpleLayerRandomnessSource does not support calling nextInt(int).\");\n \t}\n \n \t@Override\n"}}, {"oid": "468d91da98ef5364f6be5bc09e5a9b58c7e2cd5b", "url": "https://github.com/FabricMC/fabric/commit/468d91da98ef5364f6be5bc09e5a9b58c7e2cd5b", "message": "Calling SimpleLayerRandomnessSource#nextInt() now throws an exception", "committedDate": "2020-11-08T06:40:44Z", "type": "commit"}]}