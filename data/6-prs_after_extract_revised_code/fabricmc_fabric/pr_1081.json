{"pr_number": 1081, "pr_title": "Fabric Networking API V1", "pr_createdAt": "2020-09-13T09:14:06Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1081", "timeline": [{"oid": "a92f8ebb4714a6dcd90d4fcdb451cbe6ad31e547", "url": "https://github.com/FabricMC/fabric/commit/a92f8ebb4714a6dcd90d4fcdb451cbe6ad31e547", "message": "tab", "committedDate": "2020-09-19T20:02:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTQ2MA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r502811460", "bodyText": "This might just be my computer but it looks like this indent is different then below?", "author": "RDIL", "createdAt": "2020-10-10T17:13:51Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on a logical client.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientConnectionEvents {\n+\t/**\n+\t * An event for the initialization of the client play network handler.\n+\t *\n+\t * <p>At this stage, the network handler is ready to send packets to the server.\n+\t * Use {@link ClientNetworking#getPlaySender(ClientPlayNetworkHandler)} to obtain the packet sender in the callback.\n+\t */\n+\tpublic static final Event<PlayInitialized> PLAY_INITIALIZED = EventFactory.createArrayBacked(PlayInitialized.class, callbacks -> (handler, client, sender) -> {\n+\t\tfor (PlayInitialized callback : callbacks) {\n+\t\t\tcallback.onPlayInitialized(handler, client, sender);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the disconnection of the client play network handler.\n+\t *\n+\t * <p>No packets should be sent when this event is invoked.\n+\t */\n+\tpublic static final Event<PlayDisconnected> PLAY_DISCONNECTED = EventFactory.createArrayBacked(PlayDisconnected.class, callbacks -> (handler, client) -> {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTYxMA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r502811610", "bodyText": "I think GH is funky with tabs sometimes", "author": "i509VCB", "createdAt": "2020-10-10T17:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMTQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "2a369dd2398dc0f6783f076e6b96e0784c88e547", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientPlayConnectionEvents.java\nsimilarity index 58%\nrename from fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java\nrename to fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientPlayConnectionEvents.java\nindex bd8fffce..411d68d5 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientConnectionEvents.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientPlayConnectionEvents.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package net.fabricmc.fabric.api.networking.v1;\n+package net.fabricmc.fabric.api.client.networking.v1;\n \n import net.minecraft.client.MinecraftClient;\n import net.minecraft.client.network.ClientPlayNetworkHandler;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjkwMw==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512386903", "bodyText": "this method should return {@code false} because ultimately implementation details can't definitively be known by interface exposure, but we can suggest that would be the norm", "author": "Vaerian", "createdAt": "2020-10-27T02:56:30Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Associates packets to individual packet reception handlers by channel.\n+ *\n+ * @param <H> the channel handler type\n+ */\n+public interface ChannelHandlerRegistry<H> extends ChannelRegistry {\n+\t/**\n+\t * Registers a handler to a channel.\n+\t *\n+\t * <p>If a handler is already registered to the {@code channel}, this method will return {@code false}, and no change will be made.", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzkxNA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r513093914", "bodyText": "Imo specifying semantics are fine in javadoc for an interface", "author": "i509VCB", "createdAt": "2020-10-27T23:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NjkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java\nindex 8f829336..ae5880fe 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ChannelHandlerRegistry.java\n\n@@ -34,7 +34,7 @@ public interface ChannelHandlerRegistry<H> extends ChannelRegistry {\n \t *\n \t * @param channel the id of the channel\n \t * @param handler the handler\n-\t * @return whether the handler is registered\n+\t * @return false if a handler is already registered to the channel\n \t */\n \tboolean register(Identifier channel, H handler);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTQ5Mg==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389492", "bodyText": "This could be further clarified. At first glance understanding what this does is a little difficult. Like when exactly does this trigger.", "author": "Vaerian", "createdAt": "2020-10-27T03:05:59Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\nindex da85bd57..f7de72c9 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\n\n@@ -34,6 +34,7 @@ import net.fabricmc.fabric.api.event.EventFactory;\n public final class ClientChannelEvents {\n \t/**\n \t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t * This event may be invoked at any time after login and up to disconnection.\n \t *\n \t * @see PlayPacketSender#hasChannel(Identifier)\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTUxNQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389515", "bodyText": "Same here", "author": "Vaerian", "createdAt": "2020-10-27T03:06:04Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a client-side network handler.\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientChannelEvents {\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, client, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, client, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the client play network handler receiving an update indicating the connected server's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\nindex da85bd57..f7de72c9 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientChannelEvents.java\n\n@@ -34,6 +34,7 @@ import net.fabricmc.fabric.api.event.EventFactory;\n public final class ClientChannelEvents {\n \t/**\n \t * An event for the client play network handler receiving an update indicating the connected server's ability to receive packets in certain channels.\n+\t * This event may be invoked at any time after login and up to disconnection.\n \t *\n \t * @see PlayPacketSender#hasChannel(Identifier)\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4OTk5NQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512389995", "bodyText": "I might change this to getPlayReceivers to clarify that this isn't returning one specific play receiver but a registry of play receivers", "author": "Vaerian", "createdAt": "2020-10-27T03:08:10Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\nindex 3c653738..d069f04a 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n\n@@ -16,6 +16,7 @@\n \n package net.fabricmc.fabric.api.networking.v1;\n \n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDA3Ng==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390076", "bodyText": "Same here getLoginReceivers", "author": "Vaerian", "createdAt": "2020-10-27T03:08:28Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\nindex 3c653738..d069f04a 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n\n@@ -16,6 +16,7 @@\n \n package net.fabricmc.fabric.api.networking.v1;\n \n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDQyOQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390429", "bodyText": "Doesn't this have the opportunity to throw an exception? If so, that should be mentioned in the javadoc.", "author": "Vaerian", "createdAt": "2020-10-27T03:09:40Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\nindex 3c653738..d069f04a 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n\n@@ -16,6 +16,7 @@\n \n package net.fabricmc.fabric.api.networking.v1;\n \n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MDgxOA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512390818", "bodyText": "Also maybe there should be a method similar to getPlaySender(ClientPlayNetworkHandler handler) and getPlaySender() throws IllegalStateException that is send(ClientPlayNetworkHandler handler, Identifier channel, PacketByteBuf buf)", "author": "Vaerian", "createdAt": "2020-10-27T03:10:56Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\nindex 3c653738..d069f04a 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n\n@@ -16,6 +16,7 @@\n \n package net.fabricmc.fabric.api.networking.v1;\n \n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTA3Mw==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391073", "bodyText": "Where did the rest of this sentence go. I'm dying to know what it says", "author": "Vaerian", "createdAt": "2020-10-27T03:12:07Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.jetbrains.annotations.Nullable;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+import net.minecraft.client.network.ClientPlayNetworkHandler;\n+import net.minecraft.client.network.ClientPlayerEntity;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.impl.networking.client.ClientNetworkingDetails;\n+\n+/**\n+ * Offers access to client-side networking functionalities.\n+ *\n+ * <p>Client-side networking functionalities include receiving clientbound packets,\n+ * sending serverbound packets, and events related to client-side network handlers.</p>\n+ *\n+ * <p>This class should be only used on the physical client and for the logical client.</p>\n+ *\n+ * @see ServerNetworking\n+ */\n+@Environment(EnvType.CLIENT)\n+public final class ClientNetworking {\n+\t/**\n+\t * Returns the packet sender for the current client player.\n+\t *\n+\t * <p>This is a shortcut method for getting a sender.\n+\t * When a client play network handler is available, {@link #getPlaySender(ClientPlayNetworkHandler)} is preferred.\n+\t *\n+\t * @return the packet sender for the current client player\n+\t * @throws IllegalStateException if the client's player is {@code null}\n+\t */\n+\tpublic static PlayPacketSender getPlaySender() throws IllegalStateException {\n+\t\tClientPlayerEntity player = MinecraftClient.getInstance().player;\n+\n+\t\tif (player == null) {\n+\t\t\tthrow new IllegalStateException(\"Cannot get packet sender when not in game!\");\n+\t\t}\n+\n+\t\treturn getPlaySender(player.networkHandler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet sender for a client play network handler.\n+\t *\n+\t * @param handler a client play network handler\n+\t * @return the associated packet sender\n+\t */\n+\tpublic static PlayPacketSender getPlaySender(ClientPlayNetworkHandler handler) {\n+\t\treturn ClientNetworkingDetails.getAddon(handler);\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client play network handlers, receiving {@link net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket server to client custom payload packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<PlayChannelHandler> getPlayReceiver() {\n+\t\treturn ClientNetworkingDetails.PLAY;\n+\t}\n+\n+\t/**\n+\t * Returns the packet receiver for channel handler registration on client login network handlers, receiving {@link net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket login query request packets}.\n+\t */\n+\tpublic static ChannelHandlerRegistry<LoginChannelHandler> getLoginReceiver() {\n+\t\treturn ClientNetworkingDetails.LOGIN;\n+\t}\n+\n+\t/**\n+\t * Sends a packet to the connected server.\n+\t *\n+\t * @param channel the channel of the packet\n+\t * @param buf the payload of the packet\n+\t */\n+\tpublic static void send(Identifier channel, PacketByteBuf buf) {\n+\t\tgetPlaySender().sendPacket(channel, buf);\n+\t}\n+\n+\t@Environment(EnvType.CLIENT)\n+\t@FunctionalInterface\n+\tpublic interface PlayChannelHandler {\n+\t\t/**\n+\t\t * Handles an incoming packet.\n+\t\t *\n+\t\t * <p>This method is executed on {@linkplain io.netty.channel.EventLoop netty's event loops}.\n+\t\t * Modification to the game should be {@linkplain net.minecraft.util.thread.ThreadExecutor#submit(Runnable) scheduled} using the provided Minecraft client instance.\n+\t\t *\n+\t\t * <p>An example usage of this is to display a", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\nindex 3c653738..d069f04a 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ClientNetworking.java\n\n@@ -16,6 +16,7 @@\n \n package net.fabricmc.fabric.api.networking.v1;\n \n+import java.util.Objects;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTYyOQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391629", "bodyText": "Just highlighting this as something that is on the to-do list for others looking at this review to get a synopsis", "author": "Vaerian", "createdAt": "2020-10-27T03:14:13Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import net.minecraft.util.Identifier;\n+\n+/**\n+ * Supports sending packets to channels in the play network handlers.\n+ *\n+ * <p>Compared to a simple packet sender, the play packet sender is informed if its connected recipient may {@link #hasChannel(Identifier) accept packets in certain channels}.\n+ * <!--TODO: Implement use of system property-->", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a369dd2398dc0f6783f076e6b96e0784c88e547", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java\ndeleted file mode 100644\nindex 8d452cad..00000000\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayPacketSender.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.networking.v1;\n-\n-import net.minecraft.util.Identifier;\n-\n-/**\n- * Supports sending packets to channels in the play network handlers.\n- *\n- * <p>Compared to a simple packet sender, the play packet sender is informed if its connected recipient may {@link #hasChannel(Identifier) accept packets in certain channels}.\n- * <!--TODO: Implement use of system property-->\n- * When the {@code fabric-networking-api-v1.warnUnregisteredPackets} system property is absent or set to {@code true} and the recipient did not declare its ability to receive packets in a channel a packet was sent in, a warning is logged.</p>\n- */\n-public interface PlayPacketSender extends PacketSender, ChannelRegistry {\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTg4NQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391885", "bodyText": "Similar to the comment I made on the client side, more specifics about when this occurs would be good in the javadoc", "author": "Vaerian", "createdAt": "2020-10-27T03:15:08Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */\n+\tpublic static final Event<Registered> REGISTERED = EventFactory.createArrayBacked(Registered.class, callbacks -> (handler, server, sender, channels) -> {\n+\t\tfor (Registered callback : callbacks) {\n+\t\t\tcallback.onChannelRegistered(handler, server, sender, channels);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's lack of ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\nindex af16acbe..4a4659cb 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\n\n@@ -31,6 +31,7 @@ import net.fabricmc.fabric.api.event.EventFactory;\n public final class ServerChannelEvents {\n \t/**\n \t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t * This event may be invoked at any time after login and up to disconnection.\n \t *\n \t * @see PlayPacketSender#hasChannel(Identifier)\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTkxMA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512391910", "bodyText": "Same here see below", "author": "Vaerian", "createdAt": "2020-10-27T03:15:15Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.List;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayNetworkHandler;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the registration of network channels for a server-side network handler.\n+ */\n+public final class ServerChannelEvents {\n+\t/**\n+\t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t *\n+\t * @see PlayPacketSender#hasChannel(Identifier)\n+\t */", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\nindex af16acbe..4a4659cb 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/ServerChannelEvents.java\n\n@@ -31,6 +31,7 @@ import net.fabricmc.fabric.api.event.EventFactory;\n public final class ServerChannelEvents {\n \t/**\n \t * An event for the server play network handler receiving an update indicating the connected client's ability to receive packets in certain channels.\n+\t * This event may be invoked at any time after login and up to disconnection.\n \t *\n \t * @see PlayPacketSender#hasChannel(Identifier)\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MjM4MQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512392381", "bodyText": "What's this comment for?", "author": "Vaerian", "createdAt": "2020-10-27T03:17:11Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.netty.util.AsciiString;\n+\n+import net.minecraft.network.ClientConnection;\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.InvalidIdentifierException;\n+\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PlayPacketSender;\n+\n+// play", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java\nindex c0e46df8..48fc7062 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/AbstractChanneledNetworkAddon.java\n\n@@ -25,6 +25,7 @@ import java.util.List;\n import java.util.Set;\n \n import io.netty.util.AsciiString;\n+import org.jetbrains.annotations.Nullable;\n \n import net.minecraft.network.ClientConnection;\n import net.minecraft.network.PacketByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjcyOQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512396729", "bodyText": "This is definitely me missing the point, but what is this for exactly?", "author": "Vaerian", "createdAt": "2020-10-27T03:34:28Z", "path": "fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.network.C2SPacketTypeCallback;\n+import net.fabricmc.fabric.api.networking.v1.ServerChannelEvents;\n+\n+public final class OldNetworkingHooks implements ModInitializer {", "originalCommit": "ef0d10e127bdc088b8723e4877a6cabc2967b9e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMzYxOA==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r512403618", "bodyText": "That class implements the old PacketType events using the new ClientChannelEvents and ServerChannelEvents", "author": "i509VCB", "createdAt": "2020-10-27T04:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NjcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a369dd2398dc0f6783f076e6b96e0784c88e547", "chunk": "diff --git a/fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java b/fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java\nindex f1ba39d5..ba0898ea 100644\n--- a/fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java\n+++ b/fabric-networking-v0/src/main/java/net/fabricmc/fabric/impl/networking/OldNetworkingHooks.java\n\n@@ -18,18 +18,16 @@ package net.fabricmc.fabric.impl.networking;\n \n import net.fabricmc.api.ModInitializer;\n import net.fabricmc.fabric.api.event.network.C2SPacketTypeCallback;\n-import net.fabricmc.fabric.api.networking.v1.ServerChannelEvents;\n+import net.fabricmc.fabric.api.networking.v1.ServerPlayChannelEvents;\n \n public final class OldNetworkingHooks implements ModInitializer {\n \t@Override\n \tpublic void onInitialize() {\n \t\t// Must be lambdas below\n-\t\tServerChannelEvents.REGISTERED.register((handler, server, sender, channels) -> {\n-\t\t\tSystem.out.println(handler);\n-\t\t\tSystem.out.println(handler.player);\n+\t\tServerPlayChannelEvents.REGISTER.register((handler, server, sender, channels) -> {\n \t\t\tC2SPacketTypeCallback.REGISTERED.invoker().accept(handler.player, channels);\n \t\t});\n-\t\tServerChannelEvents.UNREGISTERED.register((handler, server, sender, channels) -> {\n+\t\tServerPlayChannelEvents.UNREGISTER.register((handler, server, sender, channels) -> {\n \t\t\tC2SPacketTypeCallback.UNREGISTERED.invoker().accept(handler.player, channels);\n \t\t});\n \t}\n"}}, {"oid": "f0efb180ef0b1fe0cdc7c32669d9ba5ad94a3f3c", "url": "https://github.com/FabricMC/fabric/commit/f0efb180ef0b1fe0cdc7c32669d9ba5ad94a3f3c", "message": "Mark all client side stuff client only, move client mixins", "committedDate": "2020-10-27T22:46:56Z", "type": "forcePushed"}, {"oid": "ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "url": "https://github.com/FabricMC/fabric/commit/ba51574ba6b427ca958109d704b50a3f9a0a8dd0", "message": "Add a missing FunctionalInterface annotation", "committedDate": "2020-10-29T23:36:40Z", "type": "forcePushed"}, {"oid": "2a369dd2398dc0f6783f076e6b96e0784c88e547", "url": "https://github.com/FabricMC/fabric/commit/2a369dd2398dc0f6783f076e6b96e0784c88e547", "message": "Start reimplementing global receivers. Still very hacky solution.", "committedDate": "2020-11-03T04:31:52Z", "type": "forcePushed"}, {"oid": "a9522e87f9656ad080dbba6bc698fbeec0261821", "url": "https://github.com/FabricMC/fabric/commit/a9522e87f9656ad080dbba6bc698fbeec0261821", "message": "thisening", "committedDate": "2020-11-14T07:38:11Z", "type": "forcePushed"}, {"oid": "c4fabf0d840e554af90ead0bf3e94126a794e1f9", "url": "https://github.com/FabricMC/fabric/commit/c4fabf0d840e554af90ead0bf3e94126a794e1f9", "message": "buildscript update to upstream", "committedDate": "2020-11-15T23:51:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNjU3Ng==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524026576", "bodyText": "This (and its inner classes) should be annotated with @Environment(EnvType.CLIENT)", "author": "shedaniel", "createdAt": "2020-11-16T09:33:11Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.networking.v1;\n+\n+import net.minecraft.client.MinecraftClient;\n+import net.minecraft.client.network.ClientLoginNetworkHandler;\n+\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Offers access to events related to the connection to a server on the client while the server is processing the client's login request.\n+ */\n+public final class ClientLoginConnectionEvents {", "originalCommit": "b6991c3121b94eae120dcd025e9fa6148ae63079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java\ndeleted file mode 100644\nindex 7ebf8816..00000000\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/client/networking/v1/ClientLoginConnectionEvents.java\n+++ /dev/null\n\n@@ -1,99 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.client.networking.v1;\n-\n-import net.minecraft.client.MinecraftClient;\n-import net.minecraft.client.network.ClientLoginNetworkHandler;\n-\n-import net.fabricmc.fabric.api.event.Event;\n-import net.fabricmc.fabric.api.event.EventFactory;\n-\n-/**\n- * Offers access to events related to the connection to a server on the client while the server is processing the client's login request.\n- */\n-public final class ClientLoginConnectionEvents {\n-\t/**\n-\t * An event for when the client's login process has begun.\n-\t * This event may be used by mods to prepare their client side state.\n-\t * This event does not guarantee that a login attempt will be successful.\n-\t *\n-\t * <p>No packets should be sent when this event is invoked.\n-\t */\n-\tpublic static final Event<LoginInit> LOGIN_INIT = EventFactory.createArrayBacked(LoginInit.class, callbacks -> (handler, client) -> {\n-\t\tfor (LoginInit callback : callbacks) {\n-\t\t\tcallback.onLoginStart(handler, client);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event for when the client has started receiving login queries.\n-\t * A client can only start receiving login queries when a server has sent the first login query.\n-\t * Vanilla servers will typically never make the client enter this login phase, but it is not a guarantee that the\n-\t * connected server is a vanilla server since a modded server or proxy may have no login queries to send to the client\n-\t * and therefore bypass the login query phase.\n-\t * If this event is fired then it is a sign that a server is not a vanilla server or the server is behind a proxy which\n-\t * is capable of handling login queries.\n-\t *\n-\t * <p>This event may be used to {@link ClientLoginNetworking.LoginQueryRequestHandler register login query handlers}\n-\t * which may be used to send a response to a server.\n-\t *\n-\t * <p>No packets should be sent when this event is invoked.\n-\t */\n-\tpublic static final Event<LoginQueryStart> LOGIN_QUERY_START = EventFactory.createArrayBacked(LoginQueryStart.class, callbacks -> (handler, client) -> {\n-\t\tfor (LoginQueryStart callback : callbacks) {\n-\t\t\tcallback.onLoginQueryStart(handler, client);\n-\t\t}\n-\t});\n-\n-\t/**\n-\t * An event for when the client's login process has ended due to disconnection.\n-\t *\n-\t * <p>No packets should be sent when this event is invoked.\n-\t */\n-\tpublic static final Event<LoginDisconnect> LOGIN_DISCONNECT = EventFactory.createArrayBacked(LoginDisconnect.class, callbacks -> (handler, client) -> {\n-\t\tfor (LoginDisconnect callback : callbacks) {\n-\t\t\tcallback.onLoginDisconnect(handler, client);\n-\t\t}\n-\t});\n-\n-\tprivate ClientLoginConnectionEvents() {\n-\t}\n-\n-\t/**\n-\t * @see ClientLoginConnectionEvents#LOGIN_INIT\n-\t */\n-\t@FunctionalInterface\n-\tpublic interface LoginInit {\n-\t\tvoid onLoginStart(ClientLoginNetworkHandler handler, MinecraftClient client);\n-\t}\n-\n-\t/**\n-\t * @see ClientLoginConnectionEvents#LOGIN_QUERY_START\n-\t */\n-\t@FunctionalInterface\n-\tpublic interface LoginQueryStart {\n-\t\tvoid onLoginQueryStart(ClientLoginNetworkHandler handler, MinecraftClient client);\n-\t}\n-\n-\t/**\n-\t * @see ClientLoginConnectionEvents#LOGIN_DISCONNECT\n-\t */\n-\t@FunctionalInterface\n-\tpublic interface LoginDisconnect {\n-\t\tvoid onLoginDisconnect(ClientLoginNetworkHandler handler, MinecraftClient client);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNTEzMw==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524035133", "bodyText": "Would returning an Iterable or Iterator be sufficient in order to not creating a list?", "author": "shedaniel", "createdAt": "2020-11-16T09:40:42Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.networking.v1;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.world.ServerChunkManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.server.world.ThreadedAnvilChunkStorage;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.ChunkPos;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.util.math.Vec3i;\n+import net.minecraft.world.chunk.ChunkManager;\n+\n+import net.fabricmc.fabric.impl.networking.ThreadedAnvilChunkStorageTrackingExtensions;\n+\n+/**\n+ * For example, a block entity may use the methods in this class to send a packet to all clients which can see the block entity in order notify clients about a change.\n+ *\n+ * <p>The word \"tracking\" means that an entity/chunk on the server is known to a player's client (within in view distance) and the (block) entity should notify tracking clients of changes.\n+ *\n+ * <p>These methods should only be called on the server thread and only be used on logical a server.\n+ */\n+public final class PlayerLookup {\n+\t/**\n+\t * Gets all the players on the minecraft server.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param server the server\n+\t * @return all players on the server\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> all(MinecraftServer server) {\n+\t\tObjects.requireNonNull(server, \"The server cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\tif (server.getPlayerManager() != null) {\n+\t\t\treturn Collections.unmodifiableCollection(server.getPlayerManager().getPlayerList());\n+\t\t}\n+\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t/**\n+\t * Gets all the players in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * @param world the server world\n+\t * @return the players in the server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> world(ServerWorld world) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\n+\t\t// return an immutable collection to guard against accidental removals.\n+\t\treturn Collections.unmodifiableCollection(world.getPlayers());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a chunk in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the chunk in question\n+\t * @return the players tracking the chunk\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, ChunkPos pos) {\n+\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n+\t\tObjects.requireNonNull(pos, \"The chunk pos cannot be null\");\n+\n+\t\treturn world.getChunkManager().threadedAnvilChunkStorage.getPlayersWatchingChunk(pos, false).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking an entity in a server world.\n+\t *\n+\t * <p>The returned collection is immutable.\n+\t *\n+\t * <p><b>Warning</b>: If the provided entity is a player, it is not\n+\t * guaranteed by the contract that said player is included in the\n+\t * resulting stream.\n+\t *\n+\t * @param entity the entity being tracked\n+\t * @return the players tracking the entity\n+\t * @throws IllegalArgumentException if the entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(Entity entity) {\n+\t\tObjects.requireNonNull(entity, \"Entity cannot be null\");\n+\t\tChunkManager manager = entity.world.getChunkManager();\n+\n+\t\tif (manager instanceof ServerChunkManager) {\n+\t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n+\n+\t\t\t// return an immutable collection to guard against accidental removals.\n+\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n+\t\t}\n+\n+\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block entity in a server world.\n+\t *\n+\t * @param blockEntity the block entity\n+\t * @return the players tracking the block position\n+\t * @throws IllegalArgumentException if the block entity is not in a server world\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(BlockEntity blockEntity) {\n+\t\tObjects.requireNonNull(blockEntity, \"BlockEntity cannot be null\");\n+\n+\t\t//noinspection ConstantConditions - IJ intrinsics don't know hasWorld == true will result in no null\n+\t\tif (!blockEntity.hasWorld() || blockEntity.getWorld().isClient()) {\n+\t\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n+\t\t}\n+\n+\t\treturn tracking((ServerWorld) blockEntity.getWorld(), blockEntity.getPos());\n+\t}\n+\n+\t/**\n+\t * Gets all players tracking a block position in a server world.\n+\t *\n+\t * @param world the server world\n+\t * @param pos   the block position\n+\t * @return the players tracking the block position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, BlockPos pos) {\n+\t\tObjects.requireNonNull(pos, \"BlockPos cannot be null\");\n+\n+\t\treturn tracking(world, new ChunkPos(pos));\n+\t}\n+\n+\t/**\n+\t * Gets all players around a position in a world.\n+\t *\n+\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n+\t *\n+\t * @param world  the world\n+\t * @param pos the position\n+\t * @param radius the maximum distance from the position in blocks\n+\t * @return the players around the position\n+\t */\n+\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3d pos, double radius) {\n+\t\tdouble radiusSq = radius * radius;\n+\n+\t\treturn world(world)\n+\t\t\t\t.stream()\n+\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos) <= radiusSq)\n+\t\t\t\t.collect(Collectors.toList());", "originalCommit": "b6991c3121b94eae120dcd025e9fa6148ae63079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA0NTg0NQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r524045845", "bodyText": "Having the size is quite nice and it needs to create something, the (Array)List should be one of the cheapest options.", "author": "sfPlayer1", "createdAt": "2020-11-16T09:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzNTEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java\ndeleted file mode 100644\nindex 8ffcc372..00000000\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/v1/PlayerLookup.java\n+++ /dev/null\n\n@@ -1,193 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.api.networking.v1;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n-import net.minecraft.block.entity.BlockEntity;\n-import net.minecraft.entity.Entity;\n-import net.minecraft.server.MinecraftServer;\n-import net.minecraft.server.network.ServerPlayerEntity;\n-import net.minecraft.server.world.ServerChunkManager;\n-import net.minecraft.server.world.ServerWorld;\n-import net.minecraft.server.world.ThreadedAnvilChunkStorage;\n-import net.minecraft.util.math.BlockPos;\n-import net.minecraft.util.math.ChunkPos;\n-import net.minecraft.util.math.Vec3d;\n-import net.minecraft.util.math.Vec3i;\n-import net.minecraft.world.chunk.ChunkManager;\n-\n-import net.fabricmc.fabric.impl.networking.ThreadedAnvilChunkStorageTrackingExtensions;\n-\n-/**\n- * For example, a block entity may use the methods in this class to send a packet to all clients which can see the block entity in order notify clients about a change.\n- *\n- * <p>The word \"tracking\" means that an entity/chunk on the server is known to a player's client (within in view distance) and the (block) entity should notify tracking clients of changes.\n- *\n- * <p>These methods should only be called on the server thread and only be used on logical a server.\n- */\n-public final class PlayerLookup {\n-\t/**\n-\t * Gets all the players on the minecraft server.\n-\t *\n-\t * <p>The returned collection is immutable.\n-\t *\n-\t * @param server the server\n-\t * @return all players on the server\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> all(MinecraftServer server) {\n-\t\tObjects.requireNonNull(server, \"The server cannot be null\");\n-\n-\t\t// return an immutable collection to guard against accidental removals.\n-\t\tif (server.getPlayerManager() != null) {\n-\t\t\treturn Collections.unmodifiableCollection(server.getPlayerManager().getPlayerList());\n-\t\t}\n-\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\t/**\n-\t * Gets all the players in a server world.\n-\t *\n-\t * <p>The returned collection is immutable.\n-\t *\n-\t * @param world the server world\n-\t * @return the players in the server world\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> world(ServerWorld world) {\n-\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n-\n-\t\t// return an immutable collection to guard against accidental removals.\n-\t\treturn Collections.unmodifiableCollection(world.getPlayers());\n-\t}\n-\n-\t/**\n-\t * Gets all players tracking a chunk in a server world.\n-\t *\n-\t * @param world the server world\n-\t * @param pos   the chunk in question\n-\t * @return the players tracking the chunk\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, ChunkPos pos) {\n-\t\tObjects.requireNonNull(world, \"The world cannot be null\");\n-\t\tObjects.requireNonNull(pos, \"The chunk pos cannot be null\");\n-\n-\t\treturn world.getChunkManager().threadedAnvilChunkStorage.getPlayersWatchingChunk(pos, false).collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Gets all players tracking an entity in a server world.\n-\t *\n-\t * <p>The returned collection is immutable.\n-\t *\n-\t * <p><b>Warning</b>: If the provided entity is a player, it is not\n-\t * guaranteed by the contract that said player is included in the\n-\t * resulting stream.\n-\t *\n-\t * @param entity the entity being tracked\n-\t * @return the players tracking the entity\n-\t * @throws IllegalArgumentException if the entity is not in a server world\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> tracking(Entity entity) {\n-\t\tObjects.requireNonNull(entity, \"Entity cannot be null\");\n-\t\tChunkManager manager = entity.world.getChunkManager();\n-\n-\t\tif (manager instanceof ServerChunkManager) {\n-\t\t\tThreadedAnvilChunkStorage storage = ((ServerChunkManager) manager).threadedAnvilChunkStorage;\n-\n-\t\t\t// return an immutable collection to guard against accidental removals.\n-\t\t\treturn Collections.unmodifiableCollection(((ThreadedAnvilChunkStorageTrackingExtensions) storage).fabric_getTrackingPlayers(entity));\n-\t\t}\n-\n-\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n-\t}\n-\n-\t/**\n-\t * Gets all players tracking a block entity in a server world.\n-\t *\n-\t * @param blockEntity the block entity\n-\t * @return the players tracking the block position\n-\t * @throws IllegalArgumentException if the block entity is not in a server world\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> tracking(BlockEntity blockEntity) {\n-\t\tObjects.requireNonNull(blockEntity, \"BlockEntity cannot be null\");\n-\n-\t\t//noinspection ConstantConditions - IJ intrinsics don't know hasWorld == true will result in no null\n-\t\tif (!blockEntity.hasWorld() || blockEntity.getWorld().isClient()) {\n-\t\t\tthrow new IllegalArgumentException(\"Only supported on server worlds!\");\n-\t\t}\n-\n-\t\treturn tracking((ServerWorld) blockEntity.getWorld(), blockEntity.getPos());\n-\t}\n-\n-\t/**\n-\t * Gets all players tracking a block position in a server world.\n-\t *\n-\t * @param world the server world\n-\t * @param pos   the block position\n-\t * @return the players tracking the block position\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> tracking(ServerWorld world, BlockPos pos) {\n-\t\tObjects.requireNonNull(pos, \"BlockPos cannot be null\");\n-\n-\t\treturn tracking(world, new ChunkPos(pos));\n-\t}\n-\n-\t/**\n-\t * Gets all players around a position in a world.\n-\t *\n-\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n-\t *\n-\t * @param world  the world\n-\t * @param pos the position\n-\t * @param radius the maximum distance from the position in blocks\n-\t * @return the players around the position\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3d pos, double radius) {\n-\t\tdouble radiusSq = radius * radius;\n-\n-\t\treturn world(world)\n-\t\t\t\t.stream()\n-\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos) <= radiusSq)\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\t/**\n-\t * Gets all players around a position in a world.\n-\t *\n-\t * <p>The distance check is done in the three-dimensional space instead of in the horizontal plane.\n-\t *\n-\t * @param world  the world\n-\t * @param pos    the position (can be a block pos)\n-\t * @param radius the maximum distance from the position in blocks\n-\t * @return the players around the position\n-\t */\n-\tpublic static Collection<ServerPlayerEntity> around(ServerWorld world, Vec3i pos, double radius) {\n-\t\tdouble radiusSq = radius * radius;\n-\n-\t\treturn world(world)\n-\t\t\t\t.stream()\n-\t\t\t\t.filter((p) -> p.squaredDistanceTo(pos.getX(), pos.getY(), pos.getZ()) <= radiusSq)\n-\t\t\t\t.collect(Collectors.toList());\n-\t}\n-\n-\tprivate PlayerLookup() {\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODMwNg==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328306", "bodyText": "Disable this by default, its a fine test just dont really want this all the time when using the test mods :D", "author": "modmuss50", "createdAt": "2020-11-22T12:28:19Z", "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.login;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.FutureTask;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerLoginNetworkHandler;\n+import net.minecraft.util.Util;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginConnectionEvents;\n+import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerLoginNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+import net.fabricmc.fabric.test.networking.play.NetworkingPlayPacketTest;\n+\n+public final class NetworkingLoginQueryTest implements ModInitializer {\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::onLoginStart);\n+\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::delaySimply);\n+\n+\t\t// login delaying example\n+\t\tServerLoginNetworking.registerGlobalReceiver(NetworkingPlayPacketTest.TEST_CHANNEL, (server, handler, understood, buf, synchronizer, sender) -> {\n+\t\t\tif (understood) {\n+\t\t\t\tFutureTask<?> future = new FutureTask<>(() -> {\n+\t\t\t\t\tfor (int i = 0; i <= 10; i++) {\n+\t\t\t\t\t\tThread.sleep(300);\n+\t\t\t\t\t\tNetworkingTestmods.LOGGER.info(\"Delayed login for number {} 300 milliseconds\", i);", "originalCommit": "215f2f909cf6da420b030cb1e4bea8b2f1359295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "chunk": "diff --git a/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java b/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java\ndeleted file mode 100644\nindex b4e35ec9b..000000000\n--- a/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/login/NetworkingLoginQueryTest.java\n+++ /dev/null\n\n@@ -1,76 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.test.networking.login;\n-\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.FutureTask;\n-\n-import net.minecraft.server.MinecraftServer;\n-import net.minecraft.server.network.ServerLoginNetworkHandler;\n-import net.minecraft.util.Util;\n-\n-import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.networking.v1.ServerLoginConnectionEvents;\n-import net.fabricmc.fabric.api.networking.v1.PacketByteBufs;\n-import net.fabricmc.fabric.api.networking.v1.PacketSender;\n-import net.fabricmc.fabric.api.networking.v1.ServerLoginNetworking;\n-import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n-import net.fabricmc.fabric.test.networking.play.NetworkingPlayPacketTest;\n-\n-public final class NetworkingLoginQueryTest implements ModInitializer {\n-\t@Override\n-\tpublic void onInitialize() {\n-\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::onLoginStart);\n-\t\tServerLoginConnectionEvents.LOGIN_QUERY_START.register(this::delaySimply);\n-\n-\t\t// login delaying example\n-\t\tServerLoginNetworking.registerGlobalReceiver(NetworkingPlayPacketTest.TEST_CHANNEL, (server, handler, understood, buf, synchronizer, sender) -> {\n-\t\t\tif (understood) {\n-\t\t\t\tFutureTask<?> future = new FutureTask<>(() -> {\n-\t\t\t\t\tfor (int i = 0; i <= 10; i++) {\n-\t\t\t\t\t\tThread.sleep(300);\n-\t\t\t\t\t\tNetworkingTestmods.LOGGER.info(\"Delayed login for number {} 300 milliseconds\", i);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\treturn null;\n-\t\t\t\t});\n-\n-\t\t\t\t// Execute the task on a worker thread as not to block the server thread\n-\t\t\t\tUtil.getMainWorkerExecutor().execute(future);\n-\t\t\t\tsynchronizer.waitFor(future);\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tprivate void delaySimply(ServerLoginNetworkHandler handler, MinecraftServer server, PacketSender sender, ServerLoginNetworking.LoginSynchronizer synchronizer) {\n-\t\tsynchronizer.waitFor(CompletableFuture.runAsync(() -> {\n-\t\t\tNetworkingTestmods.LOGGER.info(\"Starting simple delay task for 3000 milliseconds\");\n-\n-\t\t\ttry {\n-\t\t\t\tThread.sleep(3000);\n-\t\t\t\tNetworkingTestmods.LOGGER.info(\"Simple delay task completed\");\n-\t\t\t} catch (InterruptedException e) {\n-\t\t\t\tNetworkingTestmods.LOGGER.error(\"Delay task caught exception\", e);\n-\t\t\t}\n-\t\t}));\n-\t}\n-\n-\tprivate void onLoginStart(ServerLoginNetworkHandler networkHandler, MinecraftServer server, PacketSender sender, ServerLoginNetworking.LoginSynchronizer synchronizer) {\n-\t\t// Send a dummy query when the client starts accepting queries.\n-\t\tsender.sendPacket(NetworkingPlayPacketTest.TEST_CHANNEL, PacketByteBufs.empty()); // dummy packet\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODgzNQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528328835", "bodyText": "Need fixing apparenly.", "author": "modmuss50", "createdAt": "2020-11-22T12:32:23Z", "path": "fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.networking.keybindreciever;\n+\n+import net.minecraft.network.PacketByteBuf;\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.text.KeybindText;\n+import net.minecraft.text.LiteralText;\n+import net.minecraft.util.Formatting;\n+import net.minecraft.util.Identifier;\n+\n+import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.networking.v1.PacketSender;\n+import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;\n+import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n+\n+// Listens for a packet from the client which is sent to the server when a keybinding is pressed.\n+// In response the server will send a message containing the keybind text letting the client know it pressed that key.\n+public final class NetworkingKeybindPacketTest implements ModInitializer {\n+\tpublic static final Identifier KEYBINDING_PACKET_ID = NetworkingTestmods.id(\"keybind_press_test\");\n+\n+\tprivate static void receive(MinecraftServer server, ServerPlayerEntity player, PacketByteBuf buf, PacketSender responseSender) {\n+\t\t// TODO: Can we send chat off the server thread?\n+\t\tserver.execute(() -> {\n+\t\t\tplayer.sendMessage(new LiteralText(\"So you pressed \").append(new KeybindText(\"fabric-networking-api-v1-testmod-keybind\").styled(style -> style.withFormatting(Formatting.BLUE))), false);\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void onInitialize() {\n+\t\t// FIXME: DO NOT LET ME PR THIS BEFORE FIXING IT", "originalCommit": "215f2f909cf6da420b030cb1e4bea8b2f1359295", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "chunk": "diff --git a/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java b/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java\ndeleted file mode 100644\nindex f99f3e405..000000000\n--- a/fabric-networking-api-v1/src/testmod/java/net/fabricmc/fabric/test/networking/keybindreciever/NetworkingKeybindPacketTest.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-/*\n- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package net.fabricmc.fabric.test.networking.keybindreciever;\n-\n-import net.minecraft.network.PacketByteBuf;\n-import net.minecraft.server.MinecraftServer;\n-import net.minecraft.server.network.ServerPlayerEntity;\n-import net.minecraft.text.KeybindText;\n-import net.minecraft.text.LiteralText;\n-import net.minecraft.util.Formatting;\n-import net.minecraft.util.Identifier;\n-\n-import net.fabricmc.api.ModInitializer;\n-import net.fabricmc.fabric.api.networking.v1.PacketSender;\n-import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;\n-import net.fabricmc.fabric.test.networking.NetworkingTestmods;\n-\n-// Listens for a packet from the client which is sent to the server when a keybinding is pressed.\n-// In response the server will send a message containing the keybind text letting the client know it pressed that key.\n-public final class NetworkingKeybindPacketTest implements ModInitializer {\n-\tpublic static final Identifier KEYBINDING_PACKET_ID = NetworkingTestmods.id(\"keybind_press_test\");\n-\n-\tprivate static void receive(MinecraftServer server, ServerPlayerEntity player, PacketByteBuf buf, PacketSender responseSender) {\n-\t\t// TODO: Can we send chat off the server thread?\n-\t\tserver.execute(() -> {\n-\t\t\tplayer.sendMessage(new LiteralText(\"So you pressed \").append(new KeybindText(\"fabric-networking-api-v1-testmod-keybind\").styled(style -> style.withFormatting(Formatting.BLUE))), false);\n-\t\t});\n-\t}\n-\n-\t@Override\n-\tpublic void onInitialize() {\n-\t\t// FIXME: DO NOT LET ME PR THIS BEFORE FIXING IT\n-\t\t//  VERIFY REG IN PLAY INIT PROPAGATES TO S2C packet\n-\t\t//ServerPlayConnectionEvents.PLAY_INIT.register((handler, sender, server) -> {\n-\t\t//\tServerPlayNetworking.register(handler, KEYBINDING_PACKET_ID, NetworkingKeybindPacketTest::receive);\n-\t\t//});\n-\n-\t\tServerPlayNetworking.registerGlobalReceiver(KEYBINDING_PACKET_ID, (server, player, handler, buf, responseSender) -> receive(server, player, buf, responseSender));\n-\t}\n-}\n"}}, {"oid": "7866409d201dbc357dfce21a5ebb05ebd3eff796", "url": "https://github.com/FabricMC/fabric/commit/7866409d201dbc357dfce21a5ebb05ebd3eff796", "message": "Networking api v1\n\n\n\n\nSome final docs?\n\n\nLicenses and testmod\n\n\nFix a bunch o imports and make things work for v1 (v0 is bork)\n\n\nMake the testmod pass checkstyle and work\n\n\nDocs for v1", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "cb38e9756b94c8b7f63a3683cc2c7932cfaf6370", "url": "https://github.com/FabricMC/fabric/commit/cb38e9756b94c8b7f63a3683cc2c7932cfaf6370", "message": "Deprecate v0 and implement using v1", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "821449aaf1b0c8c001d0346db0444e86addd8e0c", "url": "https://github.com/FabricMC/fabric/commit/821449aaf1b0c8c001d0346db0444e86addd8e0c", "message": "Drop files down one package due to package check error", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "74a5192f424e4d7a0b14459a5653334bb42ef804", "url": "https://github.com/FabricMC/fabric/commit/74a5192f424e4d7a0b14459a5653334bb42ef804", "message": "Fix issue with channel registration, add another testmod", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "0f248a0efd43806a18ac0adc7cbbe4a2658f4e91", "url": "https://github.com/FabricMC/fabric/commit/0f248a0efd43806a18ac0adc7cbbe4a2658f4e91", "message": "jaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaavadoc", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "42b360bb9bb42dcdfaf997299b7002b24382693a", "url": "https://github.com/FabricMC/fabric/commit/42b360bb9bb42dcdfaf997299b7002b24382693a", "message": "Make javadoc use `code`, move impl interface to package access", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "ad73875b92ae72c74898ca51007d66261d86bca0", "url": "https://github.com/FabricMC/fabric/commit/ad73875b92ae72c74898ca51007d66261d86bca0", "message": "this things", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "91711353e7ff2642352aa40f3261d8a40c25a37c", "url": "https://github.com/FabricMC/fabric/commit/91711353e7ff2642352aa40f3261d8a40c25a37c", "message": "Rename a few internal methods", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "45fe5ca44ed571decbd4869f00d1377d8991c6e3", "url": "https://github.com/FabricMC/fabric/commit/45fe5ca44ed571decbd4869f00d1377d8991c6e3", "message": "Mark all client side stuff client only, move client mixins", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "e76709b01877153ed9b14b7ac24922916c99269f", "url": "https://github.com/FabricMC/fabric/commit/e76709b01877153ed9b14b7ac24922916c99269f", "message": "Add null checks around the place, clarify some javadoc and method names", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "97dafb849135e79b3e5cf13ae4e415069e0678ca", "url": "https://github.com/FabricMC/fabric/commit/97dafb849135e79b3e5cf13ae4e415069e0678ca", "message": "Make FutureListeners uninstantiable", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "a57967059594bc4e105d522dd606ade19c56ed55", "url": "https://github.com/FabricMC/fabric/commit/a57967059594bc4e105d522dd606ade19c56ed55", "message": "Some internal nullable annotations", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "648e3c619ab304a374fdeebb623fabfe9a311af5", "url": "https://github.com/FabricMC/fabric/commit/648e3c619ab304a374fdeebb623fabfe9a311af5", "message": "An impl class I forgot to rename", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "14ed357c337b01fd2171e055d88c205d3834aedf", "url": "https://github.com/FabricMC/fabric/commit/14ed357c337b01fd2171e055d88c205d3834aedf", "message": "Some comments and clarify some client login handler javadoc", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "9ec39a467ed84b3be2927900ee99ada2d4db9520", "url": "https://github.com/FabricMC/fabric/commit/9ec39a467ed84b3be2927900ee99ada2d4db9520", "message": "Add a missing FunctionalInterface annotation", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "db4ee6b5b3e5db37cd89831e8549f416c16032ea", "url": "https://github.com/FabricMC/fabric/commit/db4ee6b5b3e5db37cd89831e8549f416c16032ea", "message": "Split play and login, move client stuff to right package", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "4b839e27491f6b96da5401f9710e4720682ed4fa", "url": "https://github.com/FabricMC/fabric/commit/4b839e27491f6b96da5401f9710e4720682ed4fa", "message": "No interface left behind", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "0f0c378f2a18f01cf7aec103488bcf2dd8c9502f", "url": "https://github.com/FabricMC/fabric/commit/0f0c378f2a18f01cf7aec103488bcf2dd8c9502f", "message": "Inline channel registries in api", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b38787dd688e75c13a8cf8f1dc53b5d58a5f08ec", "url": "https://github.com/FabricMC/fabric/commit/b38787dd688e75c13a8cf8f1dc53b5d58a5f08ec", "message": "Login and play subpackages not needed", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "5f4403d3850e2b8863f2757d31372861693c87d8", "url": "https://github.com/FabricMC/fabric/commit/5f4403d3850e2b8863f2757d31372861693c87d8", "message": "Add helper method to create play custom packets", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "16b99901261a52737fa4d535906a3e9c28832958", "url": "https://github.com/FabricMC/fabric/commit/16b99901261a52737fa4d535906a3e9c28832958", "message": "hasGlobalChannel -> hasGlobalReceiver", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b575fed32e809d007427f5e5670fcb5d4efd8645", "url": "https://github.com/FabricMC/fabric/commit/b575fed32e809d007427f5e5670fcb5d4efd8645", "message": "Just rename the collection method for now", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "fad4ad3b29334ed9dd6960d707c6295917d87fdc", "url": "https://github.com/FabricMC/fabric/commit/fad4ad3b29334ed9dd6960d707c6295917d87fdc", "message": "Inline PlayPacketSender into static methods", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "1f7a25a3608300224b0122b67e8674fc9f2b4f82", "url": "https://github.com/FabricMC/fabric/commit/1f7a25a3608300224b0122b67e8674fc9f2b4f82", "message": "Start on testmod idea for verifying dynamic registration", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "2fd50e8d3433f72a495f465c837fc6ceb4e47842", "url": "https://github.com/FabricMC/fabric/commit/2fd50e8d3433f72a495f465c837fc6ceb4e47842", "message": "Add client login events", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "6af53ffafd12a99c1cb80bec970024ae093596c9", "url": "https://github.com/FabricMC/fabric/commit/6af53ffafd12a99c1cb80bec970024ae093596c9", "message": "You don't say hello when talking to yourself.\n\nAlso more testmod stuff", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "61c01adb3f01bd02f7dc8b22c8e22c9a03933d79", "url": "https://github.com/FabricMC/fabric/commit/61c01adb3f01bd02f7dc8b22c8e22c9a03933d79", "message": "Make event names present tense", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "6f903dd407ddf01cea0fe024a1039d834dcccc1e", "url": "https://github.com/FabricMC/fabric/commit/6f903dd407ddf01cea0fe024a1039d834dcccc1e", "message": "Some javadoc and impl interface rename", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "30d49b147b1a7ab4ffbd5449f7a79937e8e1322c", "url": "https://github.com/FabricMC/fabric/commit/30d49b147b1a7ab4ffbd5449f7a79937e8e1322c", "message": "Change the test keybinding", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "7932d89b61558502618b77ad2428e96cd4c0a4e5", "url": "https://github.com/FabricMC/fabric/commit/7932d89b61558502618b77ad2428e96cd4c0a4e5", "message": "Begin working on dynamic reg", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "de15bf06ac36d43771ad1cfb599ff3b0e95a770a", "url": "https://github.com/FabricMC/fabric/commit/de15bf06ac36d43771ad1cfb599ff3b0e95a770a", "message": "Dynamic reg works, just need a lot of cleanup and reimpling global", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "cebf6a90eee75017e9252969b26120847ef996d5", "url": "https://github.com/FabricMC/fabric/commit/cebf6a90eee75017e9252969b26120847ef996d5", "message": "A few renames, readd global methods", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "646843dc1880715107ccf2eaf45539885bd75afd", "url": "https://github.com/FabricMC/fabric/commit/646843dc1880715107ccf2eaf45539885bd75afd", "message": "Try to reduce the amount of duplicate registration logic", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "ba29bc14e30742d1c530afd14be1ea09e51df834", "url": "https://github.com/FabricMC/fabric/commit/ba29bc14e30742d1c530afd14be1ea09e51df834", "message": "Reimplement dynamic accessors", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "3b62ee09e42a71cabb59cc58bf5708155e118c04", "url": "https://github.com/FabricMC/fabric/commit/3b62ee09e42a71cabb59cc58bf5708155e118c04", "message": "More impl", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "dae9571693644266d37b56244fa1dee042c953d3", "url": "https://github.com/FabricMC/fabric/commit/dae9571693644266d37b56244fa1dee042c953d3", "message": "Start reimplementing global receivers. Still very hacky solution.", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "83adfe8436379d18e26ee7bbf43744907fd2cf37", "url": "https://github.com/FabricMC/fabric/commit/83adfe8436379d18e26ee7bbf43744907fd2cf37", "message": "Reimplement some server global reciever stuff", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "0d4b2c68b597a2173fc2be0dc699c17196bb0023", "url": "https://github.com/FabricMC/fabric/commit/0d4b2c68b597a2173fc2be0dc699c17196bb0023", "message": "Add login init event for server login.", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "8191936e063210aaf15e05fb9c6c7c346ada0a17", "url": "https://github.com/FabricMC/fabric/commit/8191936e063210aaf15e05fb9c6c7c346ada0a17", "message": "Implement client login query start event", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "2db146120676e3289c2cbb2bba02fc43c3a03688", "url": "https://github.com/FabricMC/fabric/commit/2db146120676e3289c2cbb2bba02fc43c3a03688", "message": "Move event invocations into addon, don't dual register global recievers", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "18f8695ae9fbd7dd07f2981c64997723fc40ae86", "url": "https://github.com/FabricMC/fabric/commit/18f8695ae9fbd7dd07f2981c64997723fc40ae86", "message": "Finally reimplement global recievers for all networking phases", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "a1526649357bbe41981e1e835c3a33c312230d01", "url": "https://github.com/FabricMC/fabric/commit/a1526649357bbe41981e1e835c3a33c312230d01", "message": "A revelation: Send packets properly\n\nThis also finds the issue with screen getting the proper S2C channels, current on TODO list.", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "dcd140d822e93381b096a948020e09c39131ebbd", "url": "https://github.com/FabricMC/fabric/commit/dcd140d822e93381b096a948020e09c39131ebbd", "message": "Disconnect event does not need a packet sender", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "8075e8997b19061747afb7d428c7310548092f53", "url": "https://github.com/FabricMC/fabric/commit/8075e8997b19061747afb7d428c7310548092f53", "message": "Clarify, add methods to get channels net handler can recieve on client", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "f3729f23eec152b6f684681c84a2868b27daa87e", "url": "https://github.com/FabricMC/fabric/commit/f3729f23eec152b6f684681c84a2868b27daa87e", "message": "Unregister actually works now", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "0c284f9875b7858eac531ebe73aca310b279e104", "url": "https://github.com/FabricMC/fabric/commit/0c284f9875b7858eac531ebe73aca310b279e104", "message": "Bunch of null checks, add simpler login delay test for vanilla clients", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "76486cd8041deedc369ce0dc4daeccfd4de7e08e", "url": "https://github.com/FabricMC/fabric/commit/76486cd8041deedc369ce0dc4daeccfd4de7e08e", "message": "Add some debug logging entries, fix unregister on client's session reg", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "908ea36b719d899ab97558621984539537c0e301", "url": "https://github.com/FabricMC/fabric/commit/908ea36b719d899ab97558621984539537c0e301", "message": "Play channel event javadoc and rename login query handlers", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "3a8f6c172d4bbf80e8da51dec9451f441dae5534", "url": "https://github.com/FabricMC/fabric/commit/3a8f6c172d4bbf80e8da51dec9451f441dae5534", "message": "More channel -> channelName", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "a537a5f92ee1c596ef884ff8a407fafa9107b2f1", "url": "https://github.com/FabricMC/fabric/commit/a537a5f92ee1c596ef884ff8a407fafa9107b2f1", "message": "thisening", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "9da01cbb47723c16cbf4ba4af0e85363494bfcd5", "url": "https://github.com/FabricMC/fabric/commit/9da01cbb47723c16cbf4ba4af0e85363494bfcd5", "message": "Introduce the basics infrastructure for tracking global receivers", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "40eb739636ed79e3c4bfe7a037d03c46143629d6", "url": "https://github.com/FabricMC/fabric/commit/40eb739636ed79e3c4bfe7a037d03c46143629d6", "message": "Add more substantial javadoc to login connection events", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "0a6d3f94ed65d0bcb593af049b63f022c806db2b", "url": "https://github.com/FabricMC/fabric/commit/0a6d3f94ed65d0bcb593af049b63f022c806db2b", "message": "Javadoc, reimplement unreg methods on v0, 1 impl fix", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "95ffc88c5190992fd067d97d758528650e3361ab", "url": "https://github.com/FabricMC/fabric/commit/95ffc88c5190992fd067d97d758528650e3361ab", "message": "Implement tracking for global recievers", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "8e57219e6c445570971325c79c6f0bdf4a6e934e", "url": "https://github.com/FabricMC/fabric/commit/8e57219e6c445570971325c79c6f0bdf4a6e934e", "message": "Dont forget to start tracked sessions in 3/4 cases", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "436027b84caa6246102e1efef648b8746c70e4bc", "url": "https://github.com/FabricMC/fabric/commit/436027b84caa6246102e1efef648b8746c70e4bc", "message": "Global receiver docs and move methods in classes", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "8ccd753add3a6d3382b3e3967063bd5e045d5a77", "url": "https://github.com/FabricMC/fabric/commit/8ccd753add3a6d3382b3e3967063bd5e045d5a77", "message": "Complete null checks", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "8f9889ffcb250e186deea5ece25c5c15b17abc84", "url": "https://github.com/FabricMC/fabric/commit/8f9889ffcb250e186deea5ece25c5c15b17abc84", "message": "big boi javadoc part 1", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "be0c0ff3042323db38fae64dc13406a85e140648", "url": "https://github.com/FabricMC/fabric/commit/be0c0ff3042323db38fae64dc13406a85e140648", "message": "Finish the main javadoc, usage javadoc is left", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b1db30b28e25af4802b7a3f8f7cc14d542f24cc6", "url": "https://github.com/FabricMC/fabric/commit/b1db30b28e25af4802b7a3f8f7cc14d542f24cc6", "message": "Set so has method is not needed", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "18dc03a2681908125ef5df25b0f2d6b6ae9c5fd7", "url": "https://github.com/FabricMC/fabric/commit/18dc03a2681908125ef5df25b0f2d6b6ae9c5fd7", "message": "Rename receiveable and sendable methods", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "849ec645d880b1191a735e8bd64d846516470b39", "url": "https://github.com/FabricMC/fabric/commit/849ec645d880b1191a735e8bd64d846516470b39", "message": "Add the two missing private ctors", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b6d60cf27c97223a0b9e3490defb270e432f7544", "url": "https://github.com/FabricMC/fabric/commit/b6d60cf27c97223a0b9e3490defb270e432f7544", "message": "buildscript update to upstream", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "06b751eb650e94e89bafa48b81d8c44c12d697d9", "url": "https://github.com/FabricMC/fabric/commit/06b751eb650e94e89bafa48b81d8c44c12d697d9", "message": "Split out player finding stuff to networking player tracking API v1\n\nSigned-off-by: liach <liach@users.noreply.github.com>\n\nForward v0 PlayerStream to new module, add entity track events\n\nRename module to player tracking\n\nWell javadoc can make sense\n\nDecide on tracking for the name\n\nUpdate fabric-player-tracking-api-v1/src/main/java/net/fabricmc/fabric/api/networking/player/tracking/v1/package-info.java\n\nCo-authored-by: Erlend \u00c5mdal <erlend@aamdal.com>\nRemove exceptions from javadoc that are not thrown\n\njavadoc fix again\n\nHandle a case where the player manager happens to be null\n\nrename player tracking to player lookup\n\nYeet", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "d13fa65ecb24abe78ee5c1837326b147b83a62fa", "url": "https://github.com/FabricMC/fabric/commit/d13fa65ecb24abe78ee5c1837326b147b83a62fa", "message": "Cherrypick #1092", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "ac405a543379ce3a7f3b1d03118a8b902ca726d9", "url": "https://github.com/FabricMC/fabric/commit/ac405a543379ce3a7f3b1d03118a8b902ca726d9", "message": "Remove some redundant client networking methods, rename `(un)register` to `(un)registerReceiver`", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "36b242846f67a3b5754d96928168994e351eebd4", "url": "https://github.com/FabricMC/fabric/commit/36b242846f67a3b5754d96928168994e351eebd4", "message": "Simplify access to dynamic reg on client", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "4a85d377355bc8f7fe9bb566a366529b3a45a859", "url": "https://github.com/FabricMC/fabric/commit/4a85d377355bc8f7fe9bb566a366529b3a45a859", "message": "Param shifting, let users get sender.", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b4889bef9b306cae6875463b4fc2fce0ee034798", "url": "https://github.com/FabricMC/fabric/commit/b4889bef9b306cae6875463b4fc2fce0ee034798", "message": "Warning about time and distance units", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "d8fd70578cdc56fe6c37e3dfd56587fb2e09e54f", "url": "https://github.com/FabricMC/fabric/commit/d8fd70578cdc56fe6c37e3dfd56587fb2e09e54f", "message": "Make sure these are client only", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "b0ac2ecb5a8683e27e6127adf3d409e7eba1cfe6", "url": "https://github.com/FabricMC/fabric/commit/b0ac2ecb5a8683e27e6127adf3d409e7eba1cfe6", "message": "Fix control flow in ClientPlayNetworking#send", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "6ae6fcdf3aadbdabb0c2321c4424050f782563d3", "url": "https://github.com/FabricMC/fabric/commit/6ae6fcdf3aadbdabb0c2321c4424050f782563d3", "message": "Correct example code javadoc", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "572cfca40233145cc169402249adc0e546b15035", "url": "https://github.com/FabricMC/fabric/commit/572cfca40233145cc169402249adc0e546b15035", "message": "javadoc correction in server login", "committedDate": "2020-11-22T20:13:46Z", "type": "commit"}, {"oid": "572cfca40233145cc169402249adc0e546b15035", "url": "https://github.com/FabricMC/fabric/commit/572cfca40233145cc169402249adc0e546b15035", "message": "javadoc correction in server login", "committedDate": "2020-11-22T20:13:46Z", "type": "forcePushed"}, {"oid": "60f142cc691c359acf93671e6bfea4593759fb7b", "url": "https://github.com/FabricMC/fabric/commit/60f142cc691c359acf93671e6bfea4593759fb7b", "message": "Put login delay tests behind system property\n\nAlso remove unnecessary junk added by old module that was merged together.", "committedDate": "2020-11-22T20:20:35Z", "type": "commit"}, {"oid": "a8676f67f2a0d545dd8d98db2a9c8ccd8426f925", "url": "https://github.com/FabricMC/fabric/commit/a8676f67f2a0d545dd8d98db2a9c8ccd8426f925", "message": "Fix ordering so channel registrations during `PHASE`_INIT work", "committedDate": "2020-11-22T21:25:28Z", "type": "commit"}, {"oid": "753b29b5adc9df0bd724f27bbe1c02e0f06c2444", "url": "https://github.com/FabricMC/fabric/commit/753b29b5adc9df0bd724f27bbe1c02e0f06c2444", "message": "Fix prod bug and an oversight", "committedDate": "2020-11-22T23:23:15Z", "type": "commit"}, {"oid": "c2fbc5a0de538cb2fbf24019447e922441b73e4c", "url": "https://github.com/FabricMC/fabric/commit/c2fbc5a0de538cb2fbf24019447e922441b73e4c", "message": "Fix login when connecting to dedicated server", "committedDate": "2020-11-23T00:41:57Z", "type": "commit"}, {"oid": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1", "url": "https://github.com/FabricMC/fabric/commit/1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1", "message": "Update registry sync to v0 to prevent issue with reg sync hanging client", "committedDate": "2020-11-23T01:12:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxOTAzNQ==", "url": "https://github.com/FabricMC/fabric/pull/1081#discussion_r528519035", "bodyText": "Is already done? Should remove", "author": "FlashyReese", "createdAt": "2020-11-23T07:57:20Z", "path": "fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.impl.networking.server;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Tracks the current query id used for login query responses.\n+ */\n+interface QueryIdFactory {\n+\tstatic QueryIdFactory create() {\n+\t\t// todo incremental ids or randomized", "originalCommit": "1a06c8f96dcef64c5f2b0457da522e5b3d82e0a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca", "chunk": "diff --git a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java\nindex 3134398eb..bf1e1bb2f 100644\n--- a/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java\n+++ b/fabric-networking-api-v1/src/main/java/net/fabricmc/fabric/impl/networking/server/QueryIdFactory.java\n\n@@ -23,7 +23,6 @@ import java.util.concurrent.atomic.AtomicInteger;\n  */\n interface QueryIdFactory {\n \tstatic QueryIdFactory create() {\n-\t\t// todo incremental ids or randomized\n \t\treturn new QueryIdFactory() {\n \t\t\tprivate final AtomicInteger currentId = new AtomicInteger();\n \n"}}, {"oid": "1c931c76571a5b888b1a8fe7f9546f26d6bd03ca", "url": "https://github.com/FabricMC/fabric/commit/1c931c76571a5b888b1a8fe7f9546f26d6bd03ca", "message": "this is done", "committedDate": "2020-11-27T21:36:53Z", "type": "commit"}]}