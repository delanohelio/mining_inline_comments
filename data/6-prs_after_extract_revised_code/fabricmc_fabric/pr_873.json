{"pr_number": 873, "pr_title": "Add callback to allow registration of feature renderers.", "pr_createdAt": "2020-07-08T03:03:15Z", "pr_url": "https://github.com/FabricMC/fabric/pull/873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451464426", "bodyText": "can we create a local generic like <T extends LivingEntity> to simplify and guarantee some generics here", "author": "liach", "createdAt": "2020-07-08T11:13:54Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendering.v1;\n+\n+import java.util.function.Consumer;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ * \t}\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\tvoid registerFeatureRenderers(LivingEntityRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>> entityRenderer, Consumer<FeatureRenderer<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>>> acceptor);", "originalCommit": "d63eef8a7c67660b49d5e5f984260a4d8f0a62b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1ODQwMA==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451658400", "bodyText": "Compiler does not let you do that, it complains that the method is generic", "author": "i509VCB", "createdAt": "2020-07-08T16:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTc0MA==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r451681740", "bodyText": "Really No for this?\n<T extends LivingEntity, M extends EntityModel<T>> void registerFeatureRenderers(LivingEntityRenderer<T, M> entityRenderer, Consumer<FeatureRenderer<T, M>> acceptor);", "author": "liach", "createdAt": "2020-07-08T16:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2NDQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "9e1c9c314da9fab91f8f409b1bf850e6aaa3e8b5", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java\nindex f005c5e8..a2bdf58f 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/RegisterFeatureRendererCallback.java\n\n@@ -19,10 +19,7 @@ package net.fabricmc.fabric.api.client.rendering.v1;\n import java.util.function.Consumer;\n \n import net.minecraft.client.render.entity.LivingEntityRenderer;\n-import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n import net.minecraft.client.render.entity.feature.FeatureRenderer;\n-import net.minecraft.client.render.entity.model.EntityModel;\n-import net.minecraft.entity.LivingEntity;\n \n import net.fabricmc.api.EnvType;\n import net.fabricmc.api.Environment;\n"}}, {"oid": "9e1c9c314da9fab91f8f409b1bf850e6aaa3e8b5", "url": "https://github.com/FabricMC/fabric/commit/9e1c9c314da9fab91f8f409b1bf850e6aaa3e8b5", "message": "Add callback to allow registration of feature renderers.", "committedDate": "2020-07-08T20:50:19Z", "type": "commit"}, {"oid": "f8d51d05c1a2472d92aca1d976c67b091d757d24", "url": "https://github.com/FabricMC/fabric/commit/f8d51d05c1a2472d92aca1d976c67b091d757d24", "message": "Laymans terms for those who don't map yarn for a living.", "committedDate": "2020-07-08T20:50:20Z", "type": "commit"}, {"oid": "42de8c2287fd24d2134b500caed6fe85c6075fae", "url": "https://github.com/FabricMC/fabric/commit/42de8c2287fd24d2134b500caed6fe85c6075fae", "message": "Be a little less generic", "committedDate": "2020-07-08T20:50:20Z", "type": "commit"}, {"oid": "88deb88648f81a6e2aa38f1da4a8edbd76d121f1", "url": "https://github.com/FabricMC/fabric/commit/88deb88648f81a6e2aa38f1da4a8edbd76d121f1", "message": "Dispatch events in a better spot, play with generics again, move to renderer-registries.\n\nAlso move this to render registries", "committedDate": "2020-07-08T20:50:20Z", "type": "commit"}, {"oid": "8e33549c6821b9fde79c6e0f29c312a13ecfeca3", "url": "https://github.com/FabricMC/fabric/commit/8e33549c6821b9fde79c6e0f29c312a13ecfeca3", "message": "Handle players as well", "committedDate": "2020-07-08T20:50:20Z", "type": "commit"}, {"oid": "8e33549c6821b9fde79c6e0f29c312a13ecfeca3", "url": "https://github.com/FabricMC/fabric/commit/8e33549c6821b9fde79c6e0f29c312a13ecfeca3", "message": "Handle players as well", "committedDate": "2020-07-08T20:50:20Z", "type": "forcePushed"}, {"oid": "cbe32c8f418afa6fad315f1251f232507ede48bb", "url": "https://github.com/FabricMC/fabric/commit/cbe32c8f418afa6fad315f1251f232507ede48bb", "message": "Tweak generics", "committedDate": "2020-07-10T01:10:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452585028", "bodyText": "imo you should just make this an interface and the impl creates an instance of FeatureAcceptor when it calls the event instead.", "author": "liach", "createdAt": "2020-07-10T02:11:47Z", "path": "fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.api.client.rendereregistry.v1;\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.model.EntityModel;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+\n+import net.fabricmc.api.EnvType;\n+import net.fabricmc.api.Environment;\n+import net.fabricmc.fabric.api.event.Event;\n+import net.fabricmc.fabric.api.event.EventFactory;\n+\n+/**\n+ * Called when {@link FeatureRenderer feature renderers} for a {@link LivingEntityRenderer living entity renderer} are registered.\n+ *\n+ * <p>Feature renderers are typically used for rendering additional objects on an entity, such as armor, an elytra or {@link Deadmau5FeatureRenderer Deadmau5's ears}.\n+ * This callback lets developers add additional feature renderers for use in entity rendering.\n+ * Listeners should filter out the specific entity renderer they want to hook into, usually through {@code instanceof} checks.\n+ * Once listeners find a suitable entity renderer, they should register their feature renderer via the acceptor.\n+ *\n+ * <p>For example, to register a feature renderer for a player model, the example below may used:\n+ * <blockquote><pre>\n+ * RegisterFeatureRendererCallback.EVENT.register((entityType, entityRenderer, acceptor) -> {\n+ * \tif (entityRenderer instanceof PlayerEntityModel) {\n+ * \t\tacceptor.accept(new MyFeatureRenderer((PlayerEntityModel) entityRenderer));\n+ *    }\n+ * });\n+ * </pre></blockquote>\n+ */\n+@FunctionalInterface\n+@Environment(EnvType.CLIENT)\n+public interface RegisterFeatureRendererCallback {\n+\tEvent<RegisterFeatureRendererCallback> EVENT = EventFactory.createArrayBacked(RegisterFeatureRendererCallback.class, callbacks -> (entityType, entityRenderer, acceptor) -> {\n+\t\tfor (RegisterFeatureRendererCallback callback : callbacks) {\n+\t\t\tcallback.registerFeatureRenderers(entityType, entityRenderer, acceptor);\n+\t\t}\n+\t});\n+\n+\t/**\n+\t * Called when feature renderers may be registered.\n+\t *\n+\t * @param entityType     the entity type of the renderer\n+\t * @param entityRenderer the entity renderer\n+\t * @param acceptor       the accepted used to register feature renderers\n+\t */\n+\tvoid registerFeatureRenderers(EntityType<? extends LivingEntity> entityType, LivingEntityRenderer<?, ?> entityRenderer, FeatureAcceptor acceptor);\n+\n+\tfinal class FeatureAcceptor {", "originalCommit": "cbe32c8f418afa6fad315f1251f232507ede48bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU5OTYxMg==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452599612", "bodyText": "I'll consider it. Could even implement it onto living entity renderer itself if I went for an interface (but that would not be part of docs and an impl detail", "author": "i509VCB", "createdAt": "2020-07-10T03:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMDg2OQ==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r452600869", "bodyText": "Exposing this in the api defeats the point of abstraction; users don't need to know how this interface is implemented.", "author": "liach", "createdAt": "2020-07-10T03:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4NTAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0f0e7e5aee01a7e64434425370fe27424f3e7f54", "chunk": "diff --git a/fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java b/fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java\nindex 9ddbe42b..bb7573f3 100644\n--- a/fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java\n+++ b/fabric-renderer-registries-v1/src/main/java/net/fabricmc/fabric/api/client/rendereregistry/v1/RegisterFeatureRendererCallback.java\n\n@@ -16,9 +16,6 @@\n \n package net.fabricmc.fabric.api.client.rendereregistry.v1;\n \n-import java.util.Objects;\n-import java.util.function.Function;\n-\n import net.minecraft.client.render.entity.LivingEntityRenderer;\n import net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer;\n import net.minecraft.client.render.entity.feature.FeatureRenderer;\n"}}, {"oid": "0f0e7e5aee01a7e64434425370fe27424f3e7f54", "url": "https://github.com/FabricMC/fabric/commit/0f0e7e5aee01a7e64434425370fe27424f3e7f54", "message": "Hide acceptor impl", "committedDate": "2020-07-14T05:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNjg5Mw==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r460516893", "bodyText": "Unless im blind I dont see this being added to the test mod json?", "author": "modmuss50", "createdAt": "2020-07-26T11:44:36Z", "path": "fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.test.renderer.registry;\n+\n+import net.minecraft.client.network.AbstractClientPlayerEntity;\n+import net.minecraft.client.render.VertexConsumerProvider;\n+import net.minecraft.client.render.entity.ArmorStandEntityRenderer;\n+import net.minecraft.client.render.entity.BipedEntityRenderer;\n+import net.minecraft.client.render.entity.LivingEntityRenderer;\n+import net.minecraft.client.render.entity.PlayerEntityRenderer;\n+import net.minecraft.client.render.entity.feature.ElytraFeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRenderer;\n+import net.minecraft.client.render.entity.feature.FeatureRendererContext;\n+import net.minecraft.client.render.entity.feature.HeldItemFeatureRenderer;\n+import net.minecraft.client.render.entity.model.ArmorStandArmorEntityModel;\n+import net.minecraft.client.render.entity.model.PlayerEntityModel;\n+import net.minecraft.client.util.math.MatrixStack;\n+import net.minecraft.entity.EntityType;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.decoration.ArmorStandEntity;\n+\n+import net.fabricmc.api.ClientModInitializer;\n+import net.fabricmc.fabric.api.client.rendereregistry.v1.RegisterFeatureRendererCallback;\n+\n+public class FeatureRendererTests implements ClientModInitializer {", "originalCommit": "0f0e7e5aee01a7e64434425370fe27424f3e7f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NTc1Mg==", "url": "https://github.com/FabricMC/fabric/pull/873#discussion_r460545752", "bodyText": "This testmod was primarily designed for testing generics on the methods. I'll hook up an actual simple feature to render in a bit.", "author": "i509VCB", "createdAt": "2020-07-26T16:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxNjg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "daa25c37855b465a86e50e71e5ce3b1c0d767e7a", "chunk": "diff --git a/fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java b/fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererGenericTests.java\nsimilarity index 70%\nrename from fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java\nrename to fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererGenericTests.java\nindex 5da735b0..fe987db8 100644\n--- a/fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererTests.java\n+++ b/fabric-renderer-registries-v1/src/testmod/java/net/fabricmc/fabric/test/renderer/registry/FeatureRendererGenericTests.java\n\n@@ -16,6 +16,10 @@\n \n package net.fabricmc.fabric.test.renderer.registry;\n \n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+\n import net.minecraft.client.network.AbstractClientPlayerEntity;\n import net.minecraft.client.render.VertexConsumerProvider;\n import net.minecraft.client.render.entity.ArmorStandEntityRenderer;\n"}}, {"oid": "daa25c37855b465a86e50e71e5ce3b1c0d767e7a", "url": "https://github.com/FabricMC/fabric/commit/daa25c37855b465a86e50e71e5ce3b1c0d767e7a", "message": "Add actual testmod, fix where player events are fired, Simplify to returning a list.", "committedDate": "2020-07-30T22:56:40Z", "type": "commit"}, {"oid": "de8f1f5cb6cc259e7c4fac4e4fd58849b36db03e", "url": "https://github.com/FabricMC/fabric/commit/de8f1f5cb6cc259e7c4fac4e4fd58849b36db03e", "message": "the old style worked fine", "committedDate": "2020-07-30T23:20:59Z", "type": "commit"}, {"oid": "5d717ef118be04cbbc88cfedf1960e138078da41", "url": "https://github.com/FabricMC/fabric/commit/5d717ef118be04cbbc88cfedf1960e138078da41", "message": "registerRenderers", "committedDate": "2020-07-30T23:24:35Z", "type": "commit"}, {"oid": "8376037751cdc5041548b8ab298084eae9923192", "url": "https://github.com/FabricMC/fabric/commit/8376037751cdc5041548b8ab298084eae9923192", "message": "Rename the event interface", "committedDate": "2020-07-30T23:39:15Z", "type": "commit"}, {"oid": "f8cfe005401f516cf31bf3fe806d9fb25ef2c5db", "url": "https://github.com/FabricMC/fabric/commit/f8cfe005401f516cf31bf3fe806d9fb25ef2c5db", "message": "Javadoc fixes", "committedDate": "2020-07-31T00:29:27Z", "type": "commit"}]}