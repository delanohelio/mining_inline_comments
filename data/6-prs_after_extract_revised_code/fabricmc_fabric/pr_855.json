{"pr_number": 855, "pr_title": "Fix tool attributes mining levels", "pr_createdAt": "2020-06-30T01:03:02Z", "pr_url": "https://github.com/FabricMC/fabric/pull/855", "timeline": [{"oid": "7b85d3c9220e06230aeaa3bc910269aba5076f59", "url": "https://github.com/FabricMC/fabric/commit/7b85d3c9220e06230aeaa3bc910269aba5076f59", "message": "Decoupled effective checks and mining speed", "committedDate": "2020-06-30T00:48:51Z", "type": "commit"}, {"oid": "d8a9adc20c8397f914d0070abae2914ceaa8726f", "url": "https://github.com/FabricMC/fabric/commit/d8a9adc20c8397f914d0070abae2914ceaa8726f", "message": "Fixed typo", "committedDate": "2020-06-30T00:49:05Z", "type": "commit"}, {"oid": "8b2465337dc95efa928ba31cce1cbecfffc46bb9", "url": "https://github.com/FabricMC/fabric/commit/8b2465337dc95efa928ba31cce1cbecfffc46bb9", "message": "Bump major for method sig change", "committedDate": "2020-06-30T01:19:00Z", "type": "commit"}, {"oid": "1a6818c8f88b4c9b81e5dfcbdab870ddc3b2aa9a", "url": "https://github.com/FabricMC/fabric/commit/1a6818c8f88b4c9b81e5dfcbdab870ddc3b2aa9a", "message": "Fix semvar", "committedDate": "2020-06-30T01:19:40Z", "type": "commit"}, {"oid": "48a85620cae6630e3fe85833ba9a8ce378d5f821", "url": "https://github.com/FabricMC/fabric/commit/48a85620cae6630e3fe85833ba9a8ce378d5f821", "message": "Re-add original API method", "committedDate": "2020-06-30T20:31:37Z", "type": "commit"}, {"oid": "72b37cba8ee05d4ff8425f3cf106405817533998", "url": "https://github.com/FabricMC/fabric/commit/72b37cba8ee05d4ff8425f3cf106405817533998", "message": "Extend test mod", "committedDate": "2020-07-01T08:40:13Z", "type": "commit"}, {"oid": "9d2468989372e5cc48f2413bb92f36a0ef9ae095", "url": "https://github.com/FabricMC/fabric/commit/9d2468989372e5cc48f2413bb92f36a0ef9ae095", "message": "Fix bug discovered by testing", "committedDate": "2020-07-01T08:40:26Z", "type": "commit"}, {"oid": "3dc2c5ecb3373ef4f3c23e57bc4eee21dc7e5afa", "url": "https://github.com/FabricMC/fabric/commit/3dc2c5ecb3373ef4f3c23e57bc4eee21dc7e5afa", "message": "Change current to vanillaResult, update doc for postProcessMiningSpeed", "committedDate": "2020-07-09T22:37:32Z", "type": "commit"}, {"oid": "eba9186182bb1398ca84f2b39262dfb106c24752", "url": "https://github.com/FabricMC/fabric/commit/eba9186182bb1398ca84f2b39262dfb106c24752", "message": "Remove </p> tag", "committedDate": "2020-07-09T22:41:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMDI1OQ==", "url": "https://github.com/FabricMC/fabric/pull/855#discussion_r452710259", "bodyText": "minor bikeshed but probably want to use the normal names? such as gravelBlock", "author": "shedaniel", "createdAt": "2020-07-10T08:47:55Z", "path": "fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java", "diffHunk": "@@ -18,63 +18,122 @@\n \n import net.minecraft.block.Block;\n import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.Material;\n import net.minecraft.block.MaterialColor;\n import net.minecraft.entity.LivingEntity;\n import net.minecraft.item.BlockItem;\n import net.minecraft.item.Item;\n import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.item.ToolItem;\n import net.minecraft.server.MinecraftServer;\n import net.minecraft.sound.BlockSoundGroup;\n import net.minecraft.tag.Tag;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.server.ServerTickCallback;\n import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;\n import net.fabricmc.fabric.api.object.builder.v1.block.FabricMaterialBuilder;\n import net.fabricmc.fabric.api.tool.attribute.v1.DynamicAttributeTool;\n import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n-import net.fabricmc.fabric.api.event.server.ServerTickCallback;\n \n public class ToolAttributeTest implements ModInitializer {\n-\tprivate boolean hasValidatedTags = false;\n+\tprivate static final float DEFAULT_BREAK_SPEED = 1.0F;\n+\tprivate static final float TOOL_BREAK_SPEED = 10.0F;\n+\n+\tprivate boolean hasValidated = false;\n+\n+\tBlock gravel_block;", "originalCommit": "eba9186182bb1398ca84f2b39262dfb106c24752", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1OTA2OA==", "url": "https://github.com/FabricMC/fabric/pull/855#discussion_r452759068", "bodyText": "Yeah, can't remember why I did that so I've changed to match the standard.", "author": "Snakefangox", "createdAt": "2020-07-10T10:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxMDI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a868a6922b182d3e3e90f2105aff5a10349c2fc", "chunk": "diff --git a/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java b/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\nindex 848313aa..f1866260 100644\n--- a/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\n+++ b/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\n\n@@ -46,33 +46,33 @@ public class ToolAttributeTest implements ModInitializer {\n \n \tprivate boolean hasValidated = false;\n \n-\tBlock gravel_block;\n-\tBlock stone_block;\n-\tItem test_shovel;\n-\tItem test_pickaxe;\n+\tBlock gravelBlock;\n+\tBlock stoneBlock;\n+\tItem testShovel;\n+\tItem testPickaxe;\n \n \t@Override\n \tpublic void onInitialize() {\n \t\t// Register a custom shovel that has a mining level of 2 (iron) dynamically.\n-\t\ttest_shovel = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestTool(new Item.Settings(), FabricToolTags.SHOVELS));\n+\t\ttestShovel = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestTool(new Item.Settings(), FabricToolTags.SHOVELS));\n \t\t//Register a custom pickaxe that has a mining level of 2 (iron) dynamically.\n-\t\ttest_pickaxe = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_pickaxe\"), new TestTool(new Item.Settings(), FabricToolTags.PICKAXES));\n+\t\ttestPickaxe = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_pickaxe\"), new TestTool(new Item.Settings(), FabricToolTags.PICKAXES));\n \t\t// Register a block that requires a shovel that is as strong or stronger than an iron one.\n-\t\tgravel_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"),\n+\t\tgravelBlock = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"),\n \t\t\t\tnew Block(FabricBlockSettings.of(new FabricMaterialBuilder(MaterialColor.SAND).build(), MaterialColor.STONE)\n \t\t\t\t\t\t.breakByTool(FabricToolTags.SHOVELS, 2)\n \t\t\t\t\t\t.requiresTool()\n \t\t\t\t\t\t.strength(0.6F)\n \t\t\t\t\t\t.sounds(BlockSoundGroup.GRAVEL)));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"), new BlockItem(gravel_block, new Item.Settings()));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"), new BlockItem(gravelBlock, new Item.Settings()));\n \t\t// Register a block that requires a pickaxe that is as strong or stronger than an iron one.\n-\t\tstone_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"),\n+\t\tstoneBlock = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"),\n \t\t\t\tnew Block(FabricBlockSettings.of(Material.STONE, MaterialColor.STONE)\n \t\t\t\t\t\t.breakByTool(FabricToolTags.PICKAXES, 2)\n \t\t\t\t\t\t.requiresTool()\n \t\t\t\t\t\t.strength(0.6F)\n \t\t\t\t\t\t.sounds(BlockSoundGroup.STONE)));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"), new BlockItem(stone_block, new Item.Settings()));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"), new BlockItem(stoneBlock, new Item.Settings()));\n \n \t\tServerTickCallback.EVENT.register(this::validate);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzE5Mw==", "url": "https://github.com/FabricMC/fabric/pull/855#discussion_r452723193", "bodyText": "possibly want to test for vanilla tools for vanilla blocks", "author": "shedaniel", "createdAt": "2020-07-10T09:11:10Z", "path": "fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java", "diffHunk": "@@ -18,63 +18,122 @@\n \n import net.minecraft.block.Block;\n import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.block.Material;\n import net.minecraft.block.MaterialColor;\n import net.minecraft.entity.LivingEntity;\n import net.minecraft.item.BlockItem;\n import net.minecraft.item.Item;\n import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.item.ToolItem;\n import net.minecraft.server.MinecraftServer;\n import net.minecraft.sound.BlockSoundGroup;\n import net.minecraft.tag.Tag;\n import net.minecraft.util.Identifier;\n import net.minecraft.util.registry.Registry;\n \n import net.fabricmc.api.ModInitializer;\n+import net.fabricmc.fabric.api.event.server.ServerTickCallback;\n import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;\n import net.fabricmc.fabric.api.object.builder.v1.block.FabricMaterialBuilder;\n import net.fabricmc.fabric.api.tool.attribute.v1.DynamicAttributeTool;\n import net.fabricmc.fabric.api.tool.attribute.v1.FabricToolTags;\n-import net.fabricmc.fabric.api.event.server.ServerTickCallback;\n \n public class ToolAttributeTest implements ModInitializer {\n-\tprivate boolean hasValidatedTags = false;\n+\tprivate static final float DEFAULT_BREAK_SPEED = 1.0F;\n+\tprivate static final float TOOL_BREAK_SPEED = 10.0F;\n+\n+\tprivate boolean hasValidated = false;\n+\n+\tBlock gravel_block;\n+\tBlock stone_block;\n+\tItem test_shovel;\n+\tItem test_pickaxe;\n \n \t@Override\n \tpublic void onInitialize() {\n \t\t// Register a custom shovel that has a mining level of 2 (iron) dynamically.\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestShovel(new Item.Settings()));\n+\t\ttest_shovel = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestTool(new Item.Settings(), FabricToolTags.SHOVELS));\n+\t\t//Register a custom pickaxe that has a mining level of 2 (iron) dynamically.\n+\t\ttest_pickaxe = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_pickaxe\"), new TestTool(new Item.Settings(), FabricToolTags.PICKAXES));\n \t\t// Register a block that requires a shovel that is as strong or stronger than an iron one.\n-\t\tBlock block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_block\"),\n+\t\tgravel_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"),\n \t\t\t\tnew Block(FabricBlockSettings.of(new FabricMaterialBuilder(MaterialColor.SAND).build(), MaterialColor.STONE)\n \t\t\t\t\t\t.breakByTool(FabricToolTags.SHOVELS, 2)\n \t\t\t\t\t\t.requiresTool()\n \t\t\t\t\t\t.strength(0.6F)\n \t\t\t\t\t\t.sounds(BlockSoundGroup.GRAVEL)));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_block\"), new BlockItem(block, new Item.Settings()));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"), new BlockItem(gravel_block, new Item.Settings()));\n+\t\t// Register a block that requires a pickaxe that is as strong or stronger than an iron one.\n+\t\tstone_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"),\n+\t\t\t\tnew Block(FabricBlockSettings.of(Material.STONE, MaterialColor.STONE)\n+\t\t\t\t\t\t.breakByTool(FabricToolTags.PICKAXES, 2)\n+\t\t\t\t\t\t.requiresTool()\n+\t\t\t\t\t\t.strength(0.6F)\n+\t\t\t\t\t\t.sounds(BlockSoundGroup.STONE)));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"), new BlockItem(stone_block, new Item.Settings()));\n \n-\t\tServerTickCallback.EVENT.register(this::validateTags);\n+\t\tServerTickCallback.EVENT.register(this::validate);\n \t}\n \n-\tprivate void validateTags(MinecraftServer server) {\n-\t\tif (hasValidatedTags) {\n+\tprivate void validate(MinecraftServer server) {\n+\t\tif (hasValidated) {\n \t\t\treturn;\n \t\t}\n \n-\t\thasValidatedTags = true;\n+\t\thasValidated = true;\n \n \t\tif (FabricToolTags.PICKAXES.values().isEmpty()) {\n \t\t\tthrow new AssertionError(\"Failed to load tool tags\");\n \t\t}\n+\n+\t\t//Test vanilla tools don't bypass fabric mining levels", "originalCommit": "eba9186182bb1398ca84f2b39262dfb106c24752", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1OTMwMA==", "url": "https://github.com/FabricMC/fabric/pull/855#discussion_r452759300", "bodyText": "Good idea, I've added all vanilla test cases.", "author": "Snakefangox", "createdAt": "2020-07-10T10:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMzE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0a868a6922b182d3e3e90f2105aff5a10349c2fc", "chunk": "diff --git a/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java b/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\nindex 848313aa..f1866260 100644\n--- a/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\n+++ b/fabric-tool-attribute-api-v1/src/testmod/java/net/fabricmc/fabric/test/tool/attribute/ToolAttributeTest.java\n\n@@ -46,33 +46,33 @@ public class ToolAttributeTest implements ModInitializer {\n \n \tprivate boolean hasValidated = false;\n \n-\tBlock gravel_block;\n-\tBlock stone_block;\n-\tItem test_shovel;\n-\tItem test_pickaxe;\n+\tBlock gravelBlock;\n+\tBlock stoneBlock;\n+\tItem testShovel;\n+\tItem testPickaxe;\n \n \t@Override\n \tpublic void onInitialize() {\n \t\t// Register a custom shovel that has a mining level of 2 (iron) dynamically.\n-\t\ttest_shovel = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestTool(new Item.Settings(), FabricToolTags.SHOVELS));\n+\t\ttestShovel = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_shovel\"), new TestTool(new Item.Settings(), FabricToolTags.SHOVELS));\n \t\t//Register a custom pickaxe that has a mining level of 2 (iron) dynamically.\n-\t\ttest_pickaxe = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_pickaxe\"), new TestTool(new Item.Settings(), FabricToolTags.PICKAXES));\n+\t\ttestPickaxe = Registry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"test_pickaxe\"), new TestTool(new Item.Settings(), FabricToolTags.PICKAXES));\n \t\t// Register a block that requires a shovel that is as strong or stronger than an iron one.\n-\t\tgravel_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"),\n+\t\tgravelBlock = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"),\n \t\t\t\tnew Block(FabricBlockSettings.of(new FabricMaterialBuilder(MaterialColor.SAND).build(), MaterialColor.STONE)\n \t\t\t\t\t\t.breakByTool(FabricToolTags.SHOVELS, 2)\n \t\t\t\t\t\t.requiresTool()\n \t\t\t\t\t\t.strength(0.6F)\n \t\t\t\t\t\t.sounds(BlockSoundGroup.GRAVEL)));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"), new BlockItem(gravel_block, new Item.Settings()));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_gravel_block\"), new BlockItem(gravelBlock, new Item.Settings()));\n \t\t// Register a block that requires a pickaxe that is as strong or stronger than an iron one.\n-\t\tstone_block = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"),\n+\t\tstoneBlock = Registry.register(Registry.BLOCK, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"),\n \t\t\t\tnew Block(FabricBlockSettings.of(Material.STONE, MaterialColor.STONE)\n \t\t\t\t\t\t.breakByTool(FabricToolTags.PICKAXES, 2)\n \t\t\t\t\t\t.requiresTool()\n \t\t\t\t\t\t.strength(0.6F)\n \t\t\t\t\t\t.sounds(BlockSoundGroup.STONE)));\n-\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"), new BlockItem(stone_block, new Item.Settings()));\n+\t\tRegistry.register(Registry.ITEM, new Identifier(\"fabric-tool-attribute-api-v1-testmod\", \"hardened_stone_block\"), new BlockItem(stoneBlock, new Item.Settings()));\n \n \t\tServerTickCallback.EVENT.register(this::validate);\n \t}\n"}}, {"oid": "0a868a6922b182d3e3e90f2105aff5a10349c2fc", "url": "https://github.com/FabricMC/fabric/commit/0a868a6922b182d3e3e90f2105aff5a10349c2fc", "message": "Add vanilla tests and rename vars", "committedDate": "2020-07-10T10:22:25Z", "type": "commit"}]}