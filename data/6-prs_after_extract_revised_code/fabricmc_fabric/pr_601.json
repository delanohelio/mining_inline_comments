{"pr_number": 601, "pr_title": "Add fabric model predicate provider registry", "pr_createdAt": "2020-05-01T00:27:05Z", "pr_url": "https://github.com/FabricMC/fabric/pull/601", "timeline": [{"oid": "cb23408a6bf725cf33b74b3b6b5c8addfa4bd4fc", "url": "https://github.com/FabricMC/fabric/commit/cb23408a6bf725cf33b74b3b6b5c8addfa4bd4fc", "message": "Add fabric model predicate provider registry\n\nSigned-off-by: liach <liach@users.noreply.github.com>", "committedDate": "2020-05-01T00:14:59Z", "type": "commit"}, {"oid": "bd742239c604a0ab912bb65a2e155a719fdec513", "url": "https://github.com/FabricMC/fabric/commit/bd742239c604a0ab912bb65a2e155a719fdec513", "message": "Fix jd with new mappings\n\nSigned-off-by: liach <liach@users.noreply.github.com>", "committedDate": "2020-05-01T00:26:26Z", "type": "commit"}, {"oid": "97a5091c875215cf853d4e3b787fb536b48ffa82", "url": "https://github.com/FabricMC/fabric/commit/97a5091c875215cf853d4e3b787fb536b48ffa82", "message": "Bump module version\n\nSigned-off-by: liach <liach@users.noreply.github.com>", "committedDate": "2020-05-01T00:27:54Z", "type": "commit"}, {"oid": "3460667308d799e89377d515372660017ef64f6b", "url": "https://github.com/FabricMC/fabric/commit/3460667308d799e89377d515372660017ef64f6b", "message": "Remove redundant line", "committedDate": "2020-05-01T00:36:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418365359", "bodyText": "Aren't inner class mixins prohibited by mixin?\nI'd try launching the game here", "author": "i509VCB", "createdAt": "2020-05-01T00:41:05Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistryAccessor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.object.builder;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.client.item.ModelPredicateProvider;\n+import net.minecraft.client.item.ModelPredicateProviderRegistry;\n+import net.minecraft.item.Item;\n+import net.minecraft.util.Identifier;\n+\n+@Mixin(ModelPredicateProviderRegistry.class)\n+public interface ModelPredicateProviderRegistryAccessor {\n+\t@Invoker\n+\tstatic ModelPredicateProvider callRegister(Identifier id, ModelPredicateProvider provider) {\n+\t\tthrow new AssertionError(\"mixin dummy\");\n+\t}\n+\n+\t// mixin doesn't care about descriptor, must put two \"register\" accessors in different places\n+\t@Mixin(ModelPredicateProviderRegistry.class)\n+\tinterface Specific {", "originalCommit": "3460667308d799e89377d515372660017ef64f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTk1Ng==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418365956", "bodyText": "Not if they're also mixins, they aren't.", "author": "LemmaEOF", "createdAt": "2020-05-01T00:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2ODUwMw==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418368503", "bodyText": "inner class mixins are like compile to class files, and if mixin can find the class file mixin should be able to handle it. I recall resource loader uses inner class based mixin as well, such as \n  \n    \n      fabric/fabric-resource-loader-v0/src/main/java/net/fabricmc/fabric/mixin/resource/loader/MixinKeyedResourceReloadListener.java\n    \n    \n         Line 50\n      in\n      304e48e\n    \n    \n    \n    \n\n        \n          \n           public abstract static class Client implements IdentifiableResourceReloadListener {", "author": "liach", "createdAt": "2020-05-01T00:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2OTI5Nw==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418369297", "bodyText": "It's really only local classes which it can't do. Anonymous classes and lambdas are both explicitly supported, whilst static classes are only handled as they effectively compile as if they were in a separate file anyway.", "author": "Chocohead", "createdAt": "2020-05-01T00:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MjI3OQ==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418372279", "bodyText": "Local classes can be like Outer$1Local names, so those classes theoretically can be supported. Proguard convert those local classes to a$b fyi.", "author": "liach", "createdAt": "2020-05-01T01:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NTIyMQ==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r418375221", "bodyText": "Mixin can certainly inject into them, the problem is having a local class in a mixin. Because being local it captures the (static) parent class you end up with a situation where the local class is then capturing a Mixin type which could of course necessitate classloading it. This could be worked around as it is for lambdas and anonymous classes but really isn't worth the effort given people shouldn't be making their Mixins bigger than necessary to start with.", "author": "Chocohead", "createdAt": "2020-05-01T01:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTU3NA==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419015574", "bodyText": "Might be easier to just give this another name, the api to the mod dev will be the same", "author": "modmuss50", "createdAt": "2020-05-02T22:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNTA3OQ==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419025079", "bodyText": "@modmuss50 It is impossible.\nMixin accessors are weird in that their methods' mapping to target accessed methods only respect method name and totally disregards method descriptors. As a result, both methods will have \"register\" as key in mixin refmap if they are to be in the same mixin class, and hence they cannot exist in the same mixin class due to refmap key clash and must be present in different classes. Renaming the methods does not resolve the refmap clash.", "author": "liach", "createdAt": "2020-05-03T00:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyNzU3OA==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419027578", "bodyText": "Moved to outer class.", "author": "liach", "createdAt": "2020-05-03T00:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "818ac8a0abf7bc76fd77597509e28db8d726b038", "chunk": "diff --git a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistryAccessor.java b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistryAccessor.java\nindex defeab08..d33a122e 100644\n--- a/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistryAccessor.java\n+++ b/fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistryAccessor.java\n\n@@ -21,7 +21,6 @@ import org.spongepowered.asm.mixin.gen.Invoker;\n \n import net.minecraft.client.item.ModelPredicateProvider;\n import net.minecraft.client.item.ModelPredicateProviderRegistry;\n-import net.minecraft.item.Item;\n import net.minecraft.util.Identifier;\n \n @Mixin(ModelPredicateProviderRegistry.class)\n"}}, {"oid": "818ac8a0abf7bc76fd77597509e28db8d726b038", "url": "https://github.com/FabricMC/fabric/commit/818ac8a0abf7bc76fd77597509e28db8d726b038", "message": "Move inner class accessor to outer class", "committedDate": "2020-05-03T00:44:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNTIyMw==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419135223", "bodyText": "If Mixin is ignoring the descriptors then why does putting these in two different classes solve the problem?", "author": "immibis", "createdAt": "2020-05-03T17:38:11Z", "path": "fabric-object-builder-api-v1/src/main/java/net/fabricmc/fabric/mixin/object/builder/ModelPredicateProviderRegistrySpecificAccessor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package net.fabricmc.fabric.mixin.object.builder;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.gen.Invoker;\n+\n+import net.minecraft.client.item.ModelPredicateProvider;\n+import net.minecraft.client.item.ModelPredicateProviderRegistry;\n+import net.minecraft.item.Item;\n+import net.minecraft.util.Identifier;\n+\n+// mixin doesn't care about descriptor, must put two \"register\" accessors in different places", "originalCommit": "818ac8a0abf7bc76fd77597509e28db8d726b038", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNTcxNg==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419135716", "bodyText": "Because refmap entries in each class are stored in separate subobjects like https://gist.github.com/46d619f045e5da96ffa28a9d20366d5d\nso when the two registers are in two different classes they won't clash as they are in different json objects", "author": "liach", "createdAt": "2020-05-03T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNTIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNjAzOQ==", "url": "https://github.com/FabricMC/fabric/pull/601#discussion_r419136039", "bodyText": "makes sense. that's a bit stupid of the refmap system", "author": "immibis", "createdAt": "2020-05-03T17:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNTIyMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cbd523123c5c9fdb8c6ace3ed34cb374e88340e3", "url": "https://github.com/FabricMC/fabric/commit/cbd523123c5c9fdb8c6ace3ed34cb374e88340e3", "message": "Merge branch '1.16' into feature/model-predicate", "committedDate": "2020-05-06T19:41:13Z", "type": "commit"}]}