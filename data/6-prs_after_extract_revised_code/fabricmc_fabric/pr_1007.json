{"pr_number": 1007, "pr_title": "Add @Nullable and friends", "pr_createdAt": "2020-08-12T01:07:20Z", "pr_url": "https://github.com/FabricMC/fabric/pull/1007", "timeline": [{"oid": "9b909dd2e51dd7a11dea750693768858bc71ad9d", "url": "https://github.com/FabricMC/fabric/commit/9b909dd2e51dd7a11dea750693768858bc71ad9d", "message": "Boost to Loom 0.5\nAdd null related annotations", "committedDate": "2020-08-12T01:01:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNDI2MA==", "url": "https://github.com/FabricMC/fabric/pull/1007#discussion_r470004260", "bodyText": "am I the only one who likes to sort their annotations from shortest to largest? even intellij defaults to reverse order and it makes me iritat", "author": "Devan-Kerman", "createdAt": "2020-08-13T14:42:01Z", "path": "fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/RuleKeyMixin.java", "diffHunk": "@@ -26,7 +27,7 @@\n \n @Mixin(GameRules.Key.class)\n public abstract class RuleKeyMixin implements RuleKeyExtensions {\n-\t/* @Nullable */\n+\t@Nullable", "originalCommit": "9b909dd2e51dd7a11dea750693768858bc71ad9d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b5b37f0739db098fe03e6125ae3e28eebd69169", "chunk": "diff --git a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/RuleKeyMixin.java b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/RuleKeyMixin.java\nindex b2e57851..dbe3ecbd 100644\n--- a/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/RuleKeyMixin.java\n+++ b/fabric-game-rule-api-v1/src/main/java/net/fabricmc/fabric/mixin/gamerule/RuleKeyMixin.java\n\n@@ -27,8 +27,8 @@ import net.fabricmc.fabric.impl.gamerule.RuleKeyExtensions;\n \n @Mixin(GameRules.Key.class)\n public abstract class RuleKeyMixin implements RuleKeyExtensions {\n-\t@Nullable\n \t@Unique\n+\t@Nullable\n \tprivate CustomGameRuleCategory customCategory;\n \n \t@Override\n"}}, {"oid": "06a37ccbf5521edf18ee8685bab40bcc69683c54", "url": "https://github.com/FabricMC/fabric/commit/06a37ccbf5521edf18ee8685bab40bcc69683c54", "message": "Rearrange nullable to be overline", "committedDate": "2020-08-13T15:43:30Z", "type": "commit"}, {"oid": "8b5b37f0739db098fe03e6125ae3e28eebd69169", "url": "https://github.com/FabricMC/fabric/commit/8b5b37f0739db098fe03e6125ae3e28eebd69169", "message": "Fix anno sorting for picky", "committedDate": "2020-08-13T15:44:32Z", "type": "commit"}, {"oid": "17a3ba299bc7b731f98bc7e2529a642a6f62c70e", "url": "https://github.com/FabricMC/fabric/commit/17a3ba299bc7b731f98bc7e2529a642a6f62c70e", "message": "Merge branch '1.16' of https://github.com/FabricMC/fabric into 1.16-nullification\n\n# Conflicts:\n#\tbuild.gradle\n#\tfabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n#\tfabric-rendering-v1/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java", "committedDate": "2020-09-11T21:45:04Z", "type": "commit"}, {"oid": "47e1958c60c6a4b9f0c4b4cf8215036a7db16793", "url": "https://github.com/FabricMC/fabric/commit/47e1958c60c6a4b9f0c4b4cf8215036a7db16793", "message": "Add imports", "committedDate": "2020-09-11T21:52:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjQ4NA==", "url": "https://github.com/FabricMC/fabric/pull/1007#discussion_r487786484", "bodyText": "Is this really needed since the parameter is a primitive (int)?", "author": "NinjaPhenix", "createdAt": "2020-09-14T09:47:46Z", "path": "fabric-renderer-api-v1/src/main/java/net/fabricmc/fabric/api/renderer/v1/model/ModelHelper.java", "diffHunk": "@@ -56,6 +57,7 @@ public static int toFaceIndex(Direction face) {\n \t * optionally including the null face. (Use &lt; or  &lt;= {@link #NULL_FACE_ID}\n \t * to exclude or include the null value, respectively.)\n \t */\n+\t@Contract(\"null -> null\")", "originalCommit": "47e1958c60c6a4b9f0c4b4cf8215036a7db16793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDg0MQ==", "url": "https://github.com/FabricMC/fabric/pull/1007#discussion_r487800841", "bodyText": "If it was important enough to address in the JD, the anno is warranted.\nNull int is 0, so maybe that is a better boundary to use? I don't know the details of the rendering API well enough to say.", "author": "dexman545", "createdAt": "2020-09-14T10:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjQ4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTM2Mg==", "url": "https://github.com/FabricMC/fabric/pull/1007#discussion_r487789362", "bodyText": "@Nullable on user, not the method.", "author": "NinjaPhenix", "createdAt": "2020-09-14T09:52:27Z", "path": "fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/tool/attribute/ToolManagerImpl.java", "diffHunk": "@@ -167,7 +169,7 @@ public static void registerBreakByTool(Block block, Tag<Item> tag, int miningLev\n \t/**\n \t * Hook for ItemStack.isEffectiveOn and similar methods.\n \t */\n-\t//TODO: nullable on user once we have an official @Nullable annotation in", "originalCommit": "47e1958c60c6a4b9f0c4b4cf8215036a7db16793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f2b37876221941a7f8e4bd800e0cd1c1b767abb", "chunk": "diff --git a/fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/tool/attribute/ToolManagerImpl.java b/fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/tool/attribute/ToolManagerImpl.java\nindex 517dd8e4..eec09827 100644\n--- a/fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/tool/attribute/ToolManagerImpl.java\n+++ b/fabric-tool-attribute-api-v1/src/main/java/net/fabricmc/fabric/impl/tool/attribute/ToolManagerImpl.java\n\n@@ -169,8 +169,7 @@ public final class ToolManagerImpl {\n \t/**\n \t * Hook for ItemStack.isEffectiveOn and similar methods.\n \t */\n-\t@Nullable\n-\tpublic static boolean handleIsEffectiveOnIgnoresVanilla(BlockState state, ItemStack stack, LivingEntity user, boolean vanillaResult) {\n+\tpublic static boolean handleIsEffectiveOnIgnoresVanilla(BlockState state, ItemStack stack, @Nullable LivingEntity user, boolean vanillaResult) {\n \t\tfor (Map.Entry<Tag<Item>, Event<ToolHandler>> eventEntry : HANDLER_MAP.entrySet()) {\n \t\t\tif (stack.getItem().isIn(eventEntry.getKey())) {\n \t\t\t\tActionResult effective = eventEntry.getValue().invoker().isEffectiveOn(eventEntry.getKey(), state, stack, user);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDk1MA==", "url": "https://github.com/FabricMC/fabric/pull/1007#discussion_r487790950", "bodyText": "@NotNull on ItemConvertible and DynamicItemRenderer might be better than a @Contract annotation.", "author": "NinjaPhenix", "createdAt": "2020-09-14T09:54:57Z", "path": "fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java", "diffHunk": "@@ -76,6 +78,7 @@\n \t * @throws IllegalArgumentException if the item already has a registered renderer\n \t * @throws NullPointerException if either the item or the renderer is null\n \t */\n+\t@Contract(\"null, _ -> fail; _, null -> fail\")", "originalCommit": "47e1958c60c6a4b9f0c4b4cf8215036a7db16793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f2b37876221941a7f8e4bd800e0cd1c1b767abb", "chunk": "diff --git a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\nindex 9efb105c..1a5729f5 100644\n--- a/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n+++ b/fabric-rendering-v1/src/main/java/net/fabricmc/fabric/api/client/rendering/v1/BuiltinItemRendererRegistry.java\n\n@@ -78,8 +79,7 @@ public interface BuiltinItemRendererRegistry {\n \t * @throws IllegalArgumentException if the item already has a registered renderer\n \t * @throws NullPointerException if either the item or the renderer is null\n \t */\n-\t@Contract(\"null, _ -> fail; _, null -> fail\")\n-\tvoid register(ItemConvertible item, DynamicItemRenderer renderer);\n+\tvoid register(@NotNull ItemConvertible item, @NotNull DynamicItemRenderer renderer);\n \n \t/**\n \t * Dynamic item renderers render items with custom code.\n"}}, {"oid": "0f2b37876221941a7f8e4bd800e0cd1c1b767abb", "url": "https://github.com/FabricMC/fabric/commit/0f2b37876221941a7f8e4bd800e0cd1c1b767abb", "message": "Address feedback", "committedDate": "2020-09-14T10:09:50Z", "type": "commit"}, {"oid": "e85bde112aac5f03dbba567f176c92de4e71d40b", "url": "https://github.com/FabricMC/fabric/commit/e85bde112aac5f03dbba567f176c92de4e71d40b", "message": "Fix import", "committedDate": "2020-09-14T10:33:04Z", "type": "commit"}]}