{"pr_number": 1295, "pr_title": "JWT-Auth for native-image.", "pr_createdAt": "2020-01-13T23:23:05Z", "pr_url": "https://github.com/oracle/helidon/pull/1295", "timeline": [{"oid": "62933e855c355d55a3f996be4bb785a801dfb214", "url": "https://github.com/oracle/helidon/commit/62933e855c355d55a3f996be4bb785a801dfb214", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-13T23:29:04Z", "type": "forcePushed"}, {"oid": "50c59429a369b21a1396bddc2b1442d78eacfd8b", "url": "https://github.com/oracle/helidon/commit/50c59429a369b21a1396bddc2b1442d78eacfd8b", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-14T00:15:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0OTgxOQ==", "url": "https://github.com/oracle/helidon/pull/1295#discussion_r366249819", "bodyText": "subjectMappingProvider.isEmpty()", "author": "danielkec", "createdAt": "2020-01-14T10:08:29Z", "path": "security/security/src/main/java/io/helidon/security/Security.java", "diffHunk": "@@ -1100,10 +1108,47 @@ private boolean notReservedProviderKey(Config config) {\n \n         /**\n          * Check whether any provider is configured.\n+         * @param providerClass type of provider of interest (can be {@link io.helidon.security.spi.AuthenticationProvider} and\n+         *                      other interfaces implementing {@link io.helidon.security.spi.SecurityProvider})\n          * @return {@code true} if no provider is configured, {@code false} if there is at least one provider configured\n          */\n-        public boolean noProvider() {\n+        public boolean noProvider(Class<? extends SecurityProvider> providerClass) {\n+            if (providerClass.equals(AuthenticationProvider.class)) {\n+                return atnProviders.isEmpty();\n+            }\n+            if (providerClass.equals(AuthorizationProvider.class)) {\n+                return atzProviders.isEmpty();\n+            }\n+            if (providerClass.equals(OutboundSecurityProvider.class)) {\n+                return outboundProviders.isEmpty();\n+            }\n+            if (providerClass.equals(AuditProvider.class)) {\n+                return auditProviders.isEmpty();\n+            }\n+            if (providerClass.equals(SubjectMappingProvider.class)) {\n+                return subjectMappingProvider == null;\n+            }", "originalCommit": "50c59429a369b21a1396bddc2b1442d78eacfd8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI3NDYzNA==", "url": "https://github.com/oracle/helidon/pull/1295#discussion_r366274634", "bodyText": "It is not Optional in Builder, only in Security. This method is on Builder", "author": "tomas-langer", "createdAt": "2020-01-14T10:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0OTgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI3NzAxOA==", "url": "https://github.com/oracle/helidon/pull/1295#discussion_r366277018", "bodyText": "My bad sorry", "author": "danielkec", "createdAt": "2020-01-14T11:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0OTgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a00c9c1dc05ec56bb6d50acc2a0a23e65e3a170e", "url": "https://github.com/oracle/helidon/commit/a00c9c1dc05ec56bb6d50acc2a0a23e65e3a170e", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-14T11:03:21Z", "type": "forcePushed"}, {"oid": "5b2e212cd817820d82dae561c578b0a75a9498ec", "url": "https://github.com/oracle/helidon/commit/5b2e212cd817820d82dae561c578b0a75a9498ec", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-14T16:24:23Z", "type": "forcePushed"}, {"oid": "0632e63009c51d6d8d88923cf1066adbec6f949e", "url": "https://github.com/oracle/helidon/commit/0632e63009c51d6d8d88923cf1066adbec6f949e", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-14T16:36:48Z", "type": "forcePushed"}, {"oid": "35390f69a0c6b5fe37deb6116d08048c59984d40", "url": "https://github.com/oracle/helidon/commit/35390f69a0c6b5fe37deb6116d08048c59984d40", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-14T17:03:04Z", "type": "forcePushed"}, {"oid": "9374909646291cf025c8be112592c193eb9d46ba", "url": "https://github.com/oracle/helidon/commit/9374909646291cf025c8be112592c193eb9d46ba", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-16T10:45:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjQ5MA==", "url": "https://github.com/oracle/helidon/pull/1295#discussion_r367366490", "bodyText": "I would say, that this check should be right after obtaining security. That mean somewhere around line 171.", "author": "Verdent", "createdAt": "2020-01-16T11:26:32Z", "path": "microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java", "diffHunk": "@@ -139,13 +150,47 @@ public void registerClaimProducers(@Observes AfterBeanDiscovery abd, BeanManager\n      *\n      * @param add event from CDI container\n      */\n-    public void validate(@Observes AfterDeploymentValidation add) {\n+    void validate(@Observes AfterDeploymentValidation add) {\n         qualifiers.forEach(q -> {\n             ClaimLiteral claimLiteral = q.getQualifier();\n             validate(claimLiteral);\n         });\n     }\n \n+    void configured(@Observes @RuntimeStart Config config) {\n+        this.config = config;\n+    }\n+\n+    void registerProvider(@Observes\n+                          @Initialized(ApplicationScoped.class)\n+                          @Priority(PLATFORM_BEFORE + 5) Object event,\n+                          BeanManager bm) {\n+        // I need the JAX-RS extension and the Security extension\n+        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n+        SecurityCdiExtension security = bm.getExtension(SecurityCdiExtension.class);\n+\n+        boolean notNeeded = jaxrs.applicationsToRun()\n+                .stream()\n+                .map(JaxRsApplication::applicationClass)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(clazz -> clazz.getAnnotation(LoginConfig.class))\n+                .filter(Objects::nonNull)\n+                .map(LoginConfig::authMethod)\n+                .noneMatch(\"MP-JWT\"::equals);\n+\n+        if (notNeeded) {\n+            return;\n+        }\n+\n+        if (security.securityBuilder().hasProvider(\"mp-jwt-auth\")) {\n+            return;\n+        }", "originalCommit": "9374909646291cf025c8be112592c193eb9d46ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "chunk": "diff --git a/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java b/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\nindex a77545ff0..0496ddc16 100644\n--- a/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\n+++ b/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\n\n@@ -165,10 +165,15 @@ public class JwtAuthCdiExtension implements Extension {\n                           @Initialized(ApplicationScoped.class)\n                           @Priority(PLATFORM_BEFORE + 5) Object event,\n                           BeanManager bm) {\n-        // I need the JAX-RS extension and the Security extension\n-        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n+        // Security extension to update and check builder\n         SecurityCdiExtension security = bm.getExtension(SecurityCdiExtension.class);\n \n+        if (security.securityBuilder().hasProvider(\"mp-jwt-auth\")) {\n+            return;\n+        }\n+\n+        // JAX-RS extension to get to applications to see if we are needed\n+        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n         boolean notNeeded = jaxrs.applicationsToRun()\n                 .stream()\n                 .map(JaxRsApplication::applicationClass)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NzA2Mw==", "url": "https://github.com/oracle/helidon/pull/1295#discussion_r367367063", "bodyText": "\"mp-jwt-auth\" should be as constant.", "author": "Verdent", "createdAt": "2020-01-16T11:27:51Z", "path": "microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java", "diffHunk": "@@ -139,13 +150,47 @@ public void registerClaimProducers(@Observes AfterBeanDiscovery abd, BeanManager\n      *\n      * @param add event from CDI container\n      */\n-    public void validate(@Observes AfterDeploymentValidation add) {\n+    void validate(@Observes AfterDeploymentValidation add) {\n         qualifiers.forEach(q -> {\n             ClaimLiteral claimLiteral = q.getQualifier();\n             validate(claimLiteral);\n         });\n     }\n \n+    void configured(@Observes @RuntimeStart Config config) {\n+        this.config = config;\n+    }\n+\n+    void registerProvider(@Observes\n+                          @Initialized(ApplicationScoped.class)\n+                          @Priority(PLATFORM_BEFORE + 5) Object event,\n+                          BeanManager bm) {\n+        // I need the JAX-RS extension and the Security extension\n+        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n+        SecurityCdiExtension security = bm.getExtension(SecurityCdiExtension.class);\n+\n+        boolean notNeeded = jaxrs.applicationsToRun()\n+                .stream()\n+                .map(JaxRsApplication::applicationClass)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .map(clazz -> clazz.getAnnotation(LoginConfig.class))\n+                .filter(Objects::nonNull)\n+                .map(LoginConfig::authMethod)\n+                .noneMatch(\"MP-JWT\"::equals);\n+\n+        if (notNeeded) {\n+            return;\n+        }\n+\n+        if (security.securityBuilder().hasProvider(\"mp-jwt-auth\")) {\n+            return;\n+        }\n+\n+        security.securityBuilder()\n+                .addProvider(JwtAuthProvider.create(config), \"mp-jwt-auth\");", "originalCommit": "9374909646291cf025c8be112592c193eb9d46ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "chunk": "diff --git a/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java b/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\nindex a77545ff0..0496ddc16 100644\n--- a/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\n+++ b/microprofile/jwt-auth/src/main/java/io/helidon/microprofile/jwt/auth/JwtAuthCdiExtension.java\n\n@@ -165,10 +165,15 @@ public class JwtAuthCdiExtension implements Extension {\n                           @Initialized(ApplicationScoped.class)\n                           @Priority(PLATFORM_BEFORE + 5) Object event,\n                           BeanManager bm) {\n-        // I need the JAX-RS extension and the Security extension\n-        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n+        // Security extension to update and check builder\n         SecurityCdiExtension security = bm.getExtension(SecurityCdiExtension.class);\n \n+        if (security.securityBuilder().hasProvider(\"mp-jwt-auth\")) {\n+            return;\n+        }\n+\n+        // JAX-RS extension to get to applications to see if we are needed\n+        JaxRsCdiExtension jaxrs = bm.getExtension(JaxRsCdiExtension.class);\n         boolean notNeeded = jaxrs.applicationsToRun()\n                 .stream()\n                 .map(JaxRsApplication::applicationClass)\n"}}, {"oid": "b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "url": "https://github.com/oracle/helidon/commit/b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-16T11:39:13Z", "type": "commit"}, {"oid": "b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "url": "https://github.com/oracle/helidon/commit/b77a7590dd9e669ac7ff15df0937e3e95ddb8921", "message": "JWT-Auth for native-image.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-01-16T11:39:13Z", "type": "forcePushed"}]}