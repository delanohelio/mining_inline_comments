{"pr_number": 2523, "pr_title": "Json stream writers", "pr_createdAt": "2020-11-12T09:20:45Z", "pr_url": "https://github.com/oracle/helidon/pull/2523", "timeline": [{"oid": "27c2017c69300837ae1bd824dc7274dac5840a0e", "url": "https://github.com/oracle/helidon/commit/27c2017c69300837ae1bd824dc7274dac5840a0e", "message": "json stream writers added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-10T09:06:00Z", "type": "commit"}, {"oid": "a399716da68868d8dfb6d28ac5768035cacb0bca", "url": "https://github.com/oracle/helidon/commit/a399716da68868d8dfb6d28ac5768035cacb0bca", "message": "tmp\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-10T11:27:31Z", "type": "commit"}, {"oid": "7b301e919447b094777589c650ba11d7f8a60f23", "url": "https://github.com/oracle/helidon/commit/7b301e919447b094777589c650ba11d7f8a60f23", "message": "Accessor methods created.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-10T14:02:01Z", "type": "commit"}, {"oid": "d97b35614c7e5c317c4154518b42fd9f3fcffc79", "url": "https://github.com/oracle/helidon/commit/d97b35614c7e5c317c4154518b42fd9f3fcffc79", "message": "Select conditions updated\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-11T15:07:43Z", "type": "commit"}, {"oid": "799195fe2402d4b75468f4dfa432976399ad042a", "url": "https://github.com/oracle/helidon/commit/799195fe2402d4b75468f4dfa432976399ad042a", "message": "stream writer ordering changed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-11T16:12:57Z", "type": "commit"}, {"oid": "c294d4361ae7e5c93c7df181339ce4ae562e1faa", "url": "https://github.com/oracle/helidon/commit/c294d4361ae7e5c93c7df181339ce4ae562e1faa", "message": "content type propagation\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T09:10:55Z", "type": "commit"}, {"oid": "0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "url": "https://github.com/oracle/helidon/commit/0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "message": "Checkstyle fixes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T09:30:40Z", "type": "commit"}, {"oid": "0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "url": "https://github.com/oracle/helidon/commit/0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "message": "Checkstyle fixes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T09:30:40Z", "type": "forcePushed"}, {"oid": "552eb623509dce9112f1c2a11fb69f10cf5588ed", "url": "https://github.com/oracle/helidon/commit/552eb623509dce9112f1c2a11fb69f10cf5588ed", "message": "event stream condition fixed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T09:59:51Z", "type": "commit"}, {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "url": "https://github.com/oracle/helidon/commit/3aee9b7bd438200deb9dc1b178522a5755166bb4", "message": "Jsonp ES body stream writer structure fixed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T10:09:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5Njc1NA==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522096754", "bodyText": "Why defer?", "author": "danielkec", "createdAt": "2020-11-12T13:15:37Z", "path": "media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jackson;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Message body stream writer supporting object binding with Jackson.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JacksonEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private JacksonEsBodyStreamWriter(ObjectMapper objectMapper) {\n+        this.objectMapper = Objects.requireNonNull(objectMapper);\n+    }\n+\n+    static JacksonEsBodyStreamWriter create(ObjectMapper objectMapper) {\n+        return new JacksonEsBodyStreamWriter(objectMapper);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        JacksonBodyWriter.ObjectToChunks objectToChunks = new JacksonBodyWriter.ObjectToChunks(objectMapper, context.charset());\n+        return Multi.defer(() -> publisher)", "originalCommit": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTQ1MA==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522159450", "bodyText": "I forgot to change it. Thanks.", "author": "Verdent", "createdAt": "2020-11-12T14:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5Njc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "chunk": "diff --git a/media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java b/media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java\nindex 6a56a44b4..a7fdfe513 100644\n--- a/media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java\n+++ b/media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java\n\n@@ -52,10 +52,12 @@ class JacksonEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n \n     @Override\n     public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        if (CharSequence.class.isAssignableFrom(type.rawType())) {\n+            return PredicateResult.NOT_SUPPORTED;\n+        }\n         return context.contentType()\n                 .or(() -> findMediaType(context))\n                 .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n-                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n                 .map(it -> PredicateResult.COMPATIBLE)\n                 .orElse(PredicateResult.NOT_SUPPORTED);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTA1NA==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522109054", "bodyText": "Moving the type check could save actual finding of media type in some cases\n        if(CharSequence.class.isAssignableFrom(type.rawType())) return PredicateResult.NOT_SUPPORTED;\n        return context.contentType()\n                .or(() -> findMediaType(context))\n                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n                .map(it -> PredicateResult.COMPATIBLE)\n                .orElse(PredicateResult.NOT_SUPPORTED);", "author": "danielkec", "createdAt": "2020-11-12T13:35:27Z", "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);", "originalCommit": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTA2Mw==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522159063", "bodyText": "Good point.", "author": "Verdent", "createdAt": "2020-11-12T14:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "chunk": "diff --git a/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java b/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\nindex 991bca238..9c7c42e34 100644\n--- a/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\n+++ b/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\n\n@@ -52,10 +52,12 @@ class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n \n     @Override\n     public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        if (CharSequence.class.isAssignableFrom(type.rawType())) {\n+            return PredicateResult.NOT_SUPPORTED;\n+        }\n         return context.contentType()\n                 .or(() -> findMediaType(context))\n                 .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n-                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n                 .map(it -> PredicateResult.COMPATIBLE)\n                 .orElse(PredicateResult.NOT_SUPPORTED);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMDM1MQ==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522120351", "bodyText": "Defer is meant for supplying new publisher for every subscribe, not sure if its practical here, as we don't know if upstream can handle multiple subscribers:\n        Multi<Integer> defered = Multi.defer(() -> Multi.just(1, 2, 3));\n        Multi.concat(defered, defered)\n                .collectList()\n                .forSingle(System.out::println);\n>[1, 2, 3, 1, 2, 3]", "author": "danielkec", "createdAt": "2020-11-12T13:52:41Z", "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        return Multi.defer(() -> publisher)", "originalCommit": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "chunk": "diff --git a/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java b/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\nindex 991bca238..9c7c42e34 100644\n--- a/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\n+++ b/media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java\n\n@@ -52,10 +52,12 @@ class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n \n     @Override\n     public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        if (CharSequence.class.isAssignableFrom(type.rawType())) {\n+            return PredicateResult.NOT_SUPPORTED;\n+        }\n         return context.contentType()\n                 .or(() -> findMediaType(context))\n                 .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n-                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n                 .map(it -> PredicateResult.COMPATIBLE)\n                 .orElse(PredicateResult.NOT_SUPPORTED);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMjM4Nw==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522122387", "bodyText": "Moving type check before finding media type can save few instructions", "author": "danielkec", "createdAt": "2020-11-12T13:55:24Z", "path": "media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonp;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.JsonStructure;\n+import javax.json.JsonWriterFactory;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+import io.helidon.media.jsonp.JsonpBodyWriter.JsonStructureToChunks;\n+\n+/**\n+ * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonpEsBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final JsonWriterFactory jsonWriterFactory;\n+\n+    JsonpEsBodyStreamWriter(JsonWriterFactory jsonWriterFactory) {\n+        this.jsonWriterFactory = Objects.requireNonNull(jsonWriterFactory);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .map(it -> PredicateResult.supports(JsonStructure.class, type))", "originalCommit": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "864ac1d7f955a46488099903d42b17f36441ac7b", "chunk": "diff --git a/media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java b/media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java\nindex 0f9d44c1c..495049de1 100644\n--- a/media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java\n+++ b/media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java\n\n@@ -50,10 +50,13 @@ class JsonpEsBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure>\n \n     @Override\n     public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        if (!JsonStructure.class.isAssignableFrom(type.rawType())) {\n+            return PredicateResult.NOT_SUPPORTED;\n+        }\n         return context.contentType()\n                 .or(() -> findMediaType(context))\n                 .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n-                .map(it -> PredicateResult.supports(JsonStructure.class, type))\n+                .map(it -> PredicateResult.COMPATIBLE)\n                 .orElse(PredicateResult.NOT_SUPPORTED);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTYwNg==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522125606", "bodyText": "assert something?", "author": "danielkec", "createdAt": "2020-11-12T13:59:55Z", "path": "examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java", "diffHunk": "@@ -74,6 +74,16 @@ public static void stopServer() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testQuery() {\n+        JsonObject response = webClient\n+                .get()\n+                .uri(\"http://localhost:\" + webServer.port() + \"/greet\")\n+                .queryParam(\"query\", \"{hello}\")\n+                .request(JsonObject.class)\n+                .await(10, TimeUnit.SECONDS);", "originalCommit": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2MDAxOA==", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522160018", "bodyText": "ehm... leftover ... :D This will be removed", "author": "Verdent", "createdAt": "2020-11-12T14:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "chunk": "diff --git a/examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java b/examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java\nindex ec5feeb09..62204ee7b 100644\n--- a/examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java\n+++ b/examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java\n\n@@ -74,16 +74,6 @@ public class MainTest {\n         }\n     }\n \n-    @Test\n-    public void testQuery() {\n-        JsonObject response = webClient\n-                .get()\n-                .uri(\"http://localhost:\" + webServer.port() + \"/greet\")\n-                .queryParam(\"query\", \"{hello}\")\n-                .request(JsonObject.class)\n-                .await(10, TimeUnit.SECONDS);\n-    }\n-\n     @Test\n     public void testHelloWorld() throws Exception {\n         webClient.get()\n"}}, {"oid": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "url": "https://github.com/oracle/helidon/commit/7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "message": "Changes implemented\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T14:51:28Z", "type": "commit"}, {"oid": "864ac1d7f955a46488099903d42b17f36441ac7b", "url": "https://github.com/oracle/helidon/commit/864ac1d7f955a46488099903d42b17f36441ac7b", "message": "Changes implemented 2\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-12T14:54:02Z", "type": "commit"}, {"oid": "2f84730f006cf59982f5d8a6bd2a451fd803973a", "url": "https://github.com/oracle/helidon/commit/2f84730f006cf59982f5d8a6bd2a451fd803973a", "message": "ndJson support added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-11-18T10:45:58Z", "type": "commit"}]}