{"pr_number": 1830, "pr_title": "BufferedEmittingPublisher as replacement for OriginThreadPublisher", "pr_createdAt": "2020-05-19T19:31:01Z", "pr_url": "https://github.com/oracle/helidon/pull/1830", "timeline": [{"oid": "d77b9f54cbde461935a0093071b284c6a84c9671", "url": "https://github.com/oracle/helidon/commit/d77b9f54cbde461935a0093071b284c6a84c9671", "message": "BufferedEmittingPublisher as replacement for OriginThreadPublisher\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-19T19:30:04Z", "type": "commit"}, {"oid": "bed4825c9bc61839264064a76cfb626b21b913ce", "url": "https://github.com/oracle/helidon/commit/bed4825c9bc61839264064a76cfb626b21b913ce", "message": "Cleanup\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T09:45:24Z", "type": "commit"}, {"oid": "49c2177dc8d367276dbe0d21e9c99b4e597a1567", "url": "https://github.com/oracle/helidon/commit/49c2177dc8d367276dbe0d21e9c99b4e597a1567", "message": "Align with OTP use-cases\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T11:21:33Z", "type": "commit"}, {"oid": "035083a9d295ed912535270ef5a925089cb409cb", "url": "https://github.com/oracle/helidon/commit/035083a9d295ed912535270ef5a925089cb409cb", "message": "Switch webclient to new OTP replacement\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T11:27:53Z", "type": "commit"}, {"oid": "a298a01fbef2b850852b86e218c6785c67207814", "url": "https://github.com/oracle/helidon/commit/a298a01fbef2b850852b86e218c6785c67207814", "message": "Noop emit for webclient workaround\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T12:28:31Z", "type": "commit"}, {"oid": "aac0d2c443b422e152d1c6daf609c9e0dff5d75a", "url": "https://github.com/oracle/helidon/commit/aac0d2c443b422e152d1c6daf609c9e0dff5d75a", "message": "Javadoc fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T12:30:13Z", "type": "commit"}, {"oid": "30fcc8ee232c709756c51753fd415329a9247c15", "url": "https://github.com/oracle/helidon/commit/30fcc8ee232c709756c51753fd415329a9247c15", "message": "Noop emit for webclient workaround\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T12:30:27Z", "type": "commit"}, {"oid": "f5f17a18dbff54de25ab2d7d4de562832f469920", "url": "https://github.com/oracle/helidon/commit/f5f17a18dbff54de25ab2d7d4de562832f469920", "message": "Javadoc fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T12:58:23Z", "type": "commit"}, {"oid": "34260917e90928a05ade689f0d69fa96943aebea", "url": "https://github.com/oracle/helidon/commit/34260917e90928a05ade689f0d69fa96943aebea", "message": "Switch webserver to new OTP replacement\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T15:07:10Z", "type": "commit"}, {"oid": "8bf8560559e98633de583722b6a6407557973201", "url": "https://github.com/oracle/helidon/commit/8bf8560559e98633de583722b6a6407557973201", "message": "OTP in webserver Jersey test fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T18:33:40Z", "type": "commit"}, {"oid": "183fe7387df9f7ca30927661400adf1a0ceb903a", "url": "https://github.com/oracle/helidon/commit/183fe7387df9f7ca30927661400adf1a0ceb903a", "message": "Performance boost for unbounded use-cases\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-20T20:44:51Z", "type": "commit"}, {"oid": "a1f2f2991c57ec107e7d1e8280d7577f0daa4c70", "url": "https://github.com/oracle/helidon/commit/a1f2f2991c57ec107e7d1e8280d7577f0daa4c70", "message": "Another performance boost\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-21T08:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzOTM4Nw==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428539387", "bodyText": "Do not use public methods in package local classes", "author": "tomas-langer", "createdAt": "2020-05-21T09:15:32Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.ArrayList;\n+import java.util.function.BiConsumer;\n+\n+class BiConsumerChain<T, S>\n+        extends ArrayList<BiConsumer<? super T, ? super S>>\n+        implements BiConsumer<T, S> {\n+\n+    @Override\n+    public void accept(T t, S s) {\n+        for (BiConsumer<? super T, ? super S> inner : this) {\n+            inner.accept(t, s);\n+        }\n+    }\n+\n+    public BiConsumerChain<T, S> combineWith(BiConsumer<? super T, ? super S> another) {", "originalCommit": "a1f2f2991c57ec107e7d1e8280d7577f0daa4c70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcxODAyOA==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428718028", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-05-21T15:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzOTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9eeab8c2d43739e4f1eef97feb5ff83fe4f8187d", "chunk": "diff --git a/common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java b/common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java\nindex 12e66dbc4..5d9bae1bf 100644\n--- a/common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java\n+++ b/common/reactive/src/main/java/io/helidon/common/reactive/BiConsumerChain.java\n\n@@ -30,14 +30,14 @@ class BiConsumerChain<T, S>\n         }\n     }\n \n-    public BiConsumerChain<T, S> combineWith(BiConsumer<? super T, ? super S> another) {\n+    BiConsumerChain<T, S> combineWith(BiConsumer<? super T, ? super S> another) {\n         BiConsumerChain<T, S> newChain = new BiConsumerChain<>();\n         newChain.addAll(this);\n         newChain.add(another);\n         return newChain;\n     }\n \n-    public static <T, S> BiConsumer<T, S> combine(\n+    static <T, S> BiConsumer<T, S> combine(\n             BiConsumer<T, S> current,\n             BiConsumer<T, S> another) {\n         if (current == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MjI0MQ==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428542241", "bodyText": "Please remove public modifier from methods in package local classes", "author": "tomas-langer", "createdAt": "2020-05-21T09:21:36Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Holds a list of {@link Runnable}s to flatten out a call chain of them.\n+ */\n+class RunnableChain extends ArrayList<Runnable> implements Runnable {\n+    @Override\n+    public void run() {\n+        for (Runnable inner : this) {\n+            inner.run();\n+        }\n+    }\n+\n+    public RunnableChain combineWith(Runnable another) {", "originalCommit": "a1f2f2991c57ec107e7d1e8280d7577f0daa4c70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcxODEwOQ==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428718109", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-05-21T15:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MjI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9eeab8c2d43739e4f1eef97feb5ff83fe4f8187d", "chunk": "diff --git a/common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java b/common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java\nindex 97190fdf9..a0558739f 100644\n--- a/common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java\n+++ b/common/reactive/src/main/java/io/helidon/common/reactive/RunnableChain.java\n\n@@ -29,14 +29,14 @@ class RunnableChain extends ArrayList<Runnable> implements Runnable {\n         }\n     }\n \n-    public RunnableChain combineWith(Runnable another) {\n+    RunnableChain combineWith(Runnable another) {\n         RunnableChain newChain = new RunnableChain();\n         newChain.addAll(this);\n         newChain.add(another);\n         return newChain;\n     }\n \n-    public static Runnable combine(Runnable current, Runnable another) {\n+    static Runnable combine(Runnable current, Runnable another) {\n         if (current == null) {\n             return another;\n         }\n"}}, {"oid": "9eeab8c2d43739e4f1eef97feb5ff83fe4f8187d", "url": "https://github.com/oracle/helidon/commit/9eeab8c2d43739e4f1eef97feb5ff83fe4f8187d", "message": "Cleanup and review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-21T15:11:11Z", "type": "commit"}, {"oid": "ea9da46dceef61a25bd55e31fd13d41a6cff6cbe", "url": "https://github.com/oracle/helidon/commit/ea9da46dceef61a25bd55e31fd13d41a6cff6cbe", "message": "Kafka connector with new emitter\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-21T16:28:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjI0NA==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428916244", "bodyText": "How about having support for onEmit callbacks ?", "author": "romain-grecourt", "createdAt": "2020-05-21T21:09:59Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Emitting publisher for manual publishing with built-in buffer for handling backpressure.\n+ *\n+ * <p>\n+ * <strong>This publisher allows only a single subscriber</strong>.\n+ * </p>\n+ *\n+ * @param <T> type of emitted item\n+ */\n+public class BufferedEmittingPublisher<T> implements Flow.Publisher<T> {\n+\n+    private final AtomicReference<State> state = new AtomicReference<>(State.READY_TO_EMIT);\n+    private final ConcurrentLinkedQueue<T> buffer = new ConcurrentLinkedQueue<>();\n+    private final EmittingPublisher<T> emitter = new EmittingPublisher<>();\n+    private final AtomicBoolean draining = new AtomicBoolean(false);\n+    private final AtomicBoolean emitting = new AtomicBoolean(false);\n+    private final AtomicReference<Throwable> error = new AtomicReference<>();\n+    private BiConsumer<Long, Long> requestCallback = (n, r) -> {};\n+\n+    protected BufferedEmittingPublisher() {\n+    }\n+\n+    /**\n+     * Create new {@link BufferedEmittingPublisher}.\n+     *\n+     * @param <T> type of emitted item\n+     * @return new instance of BufferedEmittingPublisher\n+     */\n+    public static <T> BufferedEmittingPublisher<T> create() {\n+        return new BufferedEmittingPublisher<T>();\n+    }\n+\n+    @Override\n+    public void subscribe(final Flow.Subscriber<? super T> subscriber) {\n+        emitter.onSubscribe(() -> state.get().drain(this));\n+        emitter.onRequest((n, cnt) -> {\n+            requestCallback.accept(n, cnt);\n+            state.get().drain(this);\n+        });\n+        emitter.onCancel(() -> state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED));\n+        emitter.subscribe(subscriber);\n+    }\n+\n+    /**\n+     * Callback executed when request signal from downstream arrive.\n+     * <ul>\n+     * <li><b>param</b> {@code n} the requested count.</li>\n+     * <li><b>param</b> {@code result} the current total cumulative requested count, ranges between [0, {@link Long#MAX_VALUE}]\n+     * where the max indicates that this publisher is unbounded.</li>\n+     * </ul>\n+     *\n+     * @param requestCallback to be executed\n+     */\n+    public void onRequest(BiConsumer<Long, Long> requestCallback) {\n+        this.requestCallback = BiConsumerChain.combine(this.requestCallback, requestCallback);\n+    }\n+", "originalCommit": "ea9da46dceef61a25bd55e31fd13d41a6cff6cbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNzE4OQ==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r429207189", "bodyText": "Would be sufficient to invoke such callback right after emit invocation? To keep request counting isolated in EmittingPublisher the BufferedEmittingPublisher never know in advance if emit will be successful", "author": "danielkec", "createdAt": "2020-05-22T12:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzNzUzOQ==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r429337539", "bodyText": "What you did seems sufficient to me.", "author": "romain-grecourt", "createdAt": "2020-05-22T16:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "3163b4dab92542ce56a7fc107b69abf2826e2474", "chunk": "diff --git a/common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java b/common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java\nindex 8156eef63..f3fff7aa8 100644\n--- a/common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java\n+++ b/common/reactive/src/main/java/io/helidon/common/reactive/BufferedEmittingPublisher.java\n\n@@ -40,7 +40,8 @@ public class BufferedEmittingPublisher<T> implements Flow.Publisher<T> {\n     private final AtomicBoolean draining = new AtomicBoolean(false);\n     private final AtomicBoolean emitting = new AtomicBoolean(false);\n     private final AtomicReference<Throwable> error = new AtomicReference<>();\n-    private BiConsumer<Long, Long> requestCallback = (n, r) -> {};\n+    private BiConsumer<Long, Long> requestCallback = null;\n+    private Consumer<? super T> onEmitCallback = null;\n \n     protected BufferedEmittingPublisher() {\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzI5NA==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r428917294", "bodyText": "The subscriber reference is not released when completed.\nOne way of fixing it would be to add EmittingPublisher.this.subscriber = null; here", "author": "romain-grecourt", "createdAt": "2020-05-21T21:12:16Z", "path": "common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java", "diffHunk": "@@ -0,0 +1,334 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+\n+/**\n+ * Emitting publisher for manual publishing on the same thread.\n+ * {@link EmittingPublisher} doesn't have any buffering capability and propagates backpressure\n+ * directly by returning {@code false} from {@link EmittingPublisher#emit(Object)} in case there\n+ * is no demand, or {@code cancel} signal has been received.\n+ * <p>\n+ *     For publishing with buffering in case of backpressure use {@link BufferedEmittingPublisher}.\n+ * </p>\n+ *\n+ * <p>\n+ * <strong>This publisher allows only a single subscriber</strong>.\n+ * </p>\n+ *\n+ * @param <T> type of emitted item\n+ */\n+public class EmittingPublisher<T> implements Flow.Publisher<T> {\n+    private Flow.Subscriber<? super T> subscriber;\n+    private final AtomicReference<State> state = new AtomicReference<>(State.NOT_REQUESTED_YET);\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicBoolean emitting = new AtomicBoolean(false);\n+    private final AtomicBoolean subscribed = new AtomicBoolean(false);\n+    private final CompletableFuture<Void> deferredComplete = new CompletableFuture<>();\n+    private BiConsumer<Long, Long> requestCallback = (n, r) -> {};\n+    private Runnable onSubscribeCallback = () -> {};\n+    private Runnable cancelCallback = () -> {};\n+\n+    EmittingPublisher() {\n+    }\n+\n+    /**\n+     * Create new {@code EmittingPublisher}.\n+     *\n+     * @param <T> type of emitted item\n+     * @return brand new {@code EmittingPublisher}\n+     */\n+    public static <T> EmittingPublisher<T> create() {\n+        return new EmittingPublisher<>();\n+    }\n+\n+    @Override\n+    public void subscribe(final Flow.Subscriber<? super T> subscriber) {\n+        Objects.requireNonNull(subscriber, \"subscriber is null\");\n+\n+        if (!subscribed.compareAndSet(false, true)) {\n+            subscriber.onSubscribe(SubscriptionHelper.CANCELED);\n+            subscriber.onError(new IllegalStateException(\"Only single subscriber is allowed!\"));\n+            return;\n+        }\n+\n+        this.subscriber = subscriber;\n+\n+        onSubscribeCallback.run();\n+        subscriber.onSubscribe(new Flow.Subscription() {\n+            @Override\n+            public void request(final long n) {\n+                if (state.get() == State.CANCELLED) {\n+                    return;\n+                }\n+                if (n < 1) {\n+                    fail(new IllegalArgumentException(\"Rule \u00a73.9 violated: non-positive request amount is forbidden\"));\n+                    return;\n+                }\n+                requested.updateAndGet(r -> Long.MAX_VALUE - r > n ? n + r : Long.MAX_VALUE);\n+                state.compareAndSet(State.NOT_REQUESTED_YET, State.READY_TO_EMIT);\n+                requestCallback.accept(n, requested.get());\n+            }\n+\n+            @Override\n+            public void cancel() {\n+                if (state.compareAndSet(State.NOT_REQUESTED_YET, State.CANCELLED)\n+                        || state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED)) {\n+                    cancelCallback.run();\n+                    EmittingPublisher.this.subscriber = null;\n+                }\n+            }\n+\n+        });\n+        deferredComplete.complete(null);\n+    }\n+\n+    /**\n+     * Properly fail the stream, set publisher to cancelled state and send {@code onError} signal downstream.\n+     * Signal {@code onError} is sent only once, any other call to this method is no-op.\n+     *\n+     * @param throwable Sent as {@code onError} signal\n+     */\n+    public void fail(Throwable throwable) {\n+        if (deferredComplete.isDone()) {\n+            signalOnError(throwable);\n+        } else {\n+            deferredComplete.thenRun(() -> signalOnError(throwable));\n+        }\n+    }\n+\n+    /**\n+     * Properly complete the stream, set publisher to completed state and send {@code onComplete} signal downstream.\n+     * Signal {@code onComplete} is sent only once, any other call to this method is no-op.\n+     */\n+    public void complete() {\n+        deferredComplete.thenRun(this::signalOnComplete);\n+    }\n+\n+    private void signalOnError(Throwable throwable) {\n+        if (state.compareAndSet(State.NOT_REQUESTED_YET, State.FAILED)\n+                || state.compareAndSet(State.READY_TO_EMIT, State.FAILED)) {\n+            for (;;) {\n+                try {\n+                    if (emitting.getAndSet(true)) {\n+                        continue;\n+                    }\n+                    this.subscriber.onError(throwable);\n+                    return;\n+                } catch (Throwable t) {\n+                    throw new IllegalStateException(\"On error threw an exception!\", t);\n+                } finally {\n+                    emitting.set(false);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void signalOnComplete() {\n+        if (state.compareAndSet(State.NOT_REQUESTED_YET, State.COMPLETED)\n+                || state.compareAndSet(State.READY_TO_EMIT, State.COMPLETED)) {\n+            for (;;) {\n+                try {\n+                    if (emitting.getAndSet(true)) {\n+                        continue;\n+                    }\n+                    this.subscriber.onComplete();\n+                    return;", "originalCommit": "ea9da46dceef61a25bd55e31fd13d41a6cff6cbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMzMxMw==", "url": "https://github.com/oracle/helidon/pull/1830#discussion_r429203313", "bodyText": "Uf thx for that, there was also possible NPE if emit started right before READY_TO_EMIT -> CANCELLED state transition, but invoked onNext after reference release", "author": "danielkec", "createdAt": "2020-05-22T11:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8916de6bd54bef6dce8b5ac6111dd090244e5961", "chunk": "diff --git a/common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java b/common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java\nindex c25ae37ff..cd7730420 100644\n--- a/common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java\n+++ b/common/reactive/src/main/java/io/helidon/common/reactive/EmittingPublisher.java\n\n@@ -41,7 +41,7 @@ import java.util.function.BiConsumer;\n  * @param <T> type of emitted item\n  */\n public class EmittingPublisher<T> implements Flow.Publisher<T> {\n-    private Flow.Subscriber<? super T> subscriber;\n+    private volatile Flow.Subscriber<? super T> subscriber;\n     private final AtomicReference<State> state = new AtomicReference<>(State.NOT_REQUESTED_YET);\n     private final AtomicLong requested = new AtomicLong();\n     private final AtomicBoolean emitting = new AtomicBoolean(false);\n"}}, {"oid": "8916de6bd54bef6dce8b5ac6111dd090244e5961", "url": "https://github.com/oracle/helidon/commit/8916de6bd54bef6dce8b5ac6111dd090244e5961", "message": "Release subscriber reference on complete/error\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-22T11:18:24Z", "type": "commit"}, {"oid": "3163b4dab92542ce56a7fc107b69abf2826e2474", "url": "https://github.com/oracle/helidon/commit/3163b4dab92542ce56a7fc107b69abf2826e2474", "message": "OnEmit callback\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-05-22T13:36:36Z", "type": "commit"}]}