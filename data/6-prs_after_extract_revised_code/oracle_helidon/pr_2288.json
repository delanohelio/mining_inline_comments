{"pr_number": 2288, "pr_title": "Allow cancellation of Future's wrapped in Single's and vice versa", "pr_createdAt": "2020-08-26T15:20:13Z", "pr_url": "https://github.com/oracle/helidon/pull/2288", "timeline": [{"oid": "ec682ce63f91204f5adb5213d00aebd7d4843e9c", "url": "https://github.com/oracle/helidon/commit/ec682ce63f91204f5adb5213d00aebd7d4843e9c", "message": "Allow cancellation of Future's wrapped in Single's and vice versa.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-08-26T15:18:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4OTY5NA==", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477389694", "bodyText": "Just for the clarity could there be single.onCancel(() -> cancelled.set(true)); ?", "author": "danielkec", "createdAt": "2020-08-26T15:27:26Z", "path": "common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+/**\n+ * Tests cancellation of {@code Future} and {@code Single}.\n+ */\n+public class CancellationTest {\n+\n+    /**\n+     * Test cancellation of underlying {@code CompletableFuture} when wrapped\n+     * by a {@code Single}.\n+     */\n+    @Test\n+    public void testCompletableFutureCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        CompletableFuture<Object> future = new CompletableFuture<>();\n+        Single<Object> single = Single.create(future, true);\n+        future.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });\n+        single.cancel();        // should cancel future\n+        assertThat(cancelled.get(), is(true));\n+    }\n+\n+    /**\n+     * Test cancellation of {@code Single} after it has been converted to\n+     * a {@code CompletableFuture}.\n+     */\n+    @Test\n+    public void testSingleCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        Single<Object> single = Single.create(new CompletableFuture<>());\n+        CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n+        single.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });", "originalCommit": "ec682ce63f91204f5adb5213d00aebd7d4843e9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzY4MQ==", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477433681", "bodyText": "Sure", "author": "spericas", "createdAt": "2020-08-26T16:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4OTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0539181491e71037beba00e614067774cb026d25", "chunk": "diff --git a/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java b/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\nindex 38a632803..11c1fe010 100644\n--- a/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\n+++ b/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\n\n@@ -57,11 +57,7 @@ public class CancellationTest {\n         AtomicBoolean cancelled = new AtomicBoolean(false);\n         Single<Object> single = Single.create(new CompletableFuture<>());\n         CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n-        single.whenComplete((o, t) -> {\n-            if (t instanceof CancellationException) {\n-                cancelled.set(true);\n-            }\n-        });\n+        single.onCancel(() -> cancelled.set(true));\n         single.cancel();\n         future.cancel(true);        // should cancel single\n         assertThat(cancelled.get(), is(true));\n"}}, {"oid": "0539181491e71037beba00e614067774cb026d25", "url": "https://github.com/oracle/helidon/commit/0539181491e71037beba00e614067774cb026d25", "message": "Use onCancel on Single for readability.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-08-26T16:33:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMzM3Nw==", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477533377", "bodyText": "Sorry I didn't notice first time, future.cancel(true); should be enough single.cancel(); makes the test inconclusive", "author": "danielkec", "createdAt": "2020-08-26T19:18:48Z", "path": "common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+/**\n+ * Tests cancellation of {@code Future} and {@code Single}.\n+ */\n+public class CancellationTest {\n+\n+    /**\n+     * Test cancellation of underlying {@code CompletableFuture} when wrapped\n+     * by a {@code Single}.\n+     */\n+    @Test\n+    public void testCompletableFutureCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        CompletableFuture<Object> future = new CompletableFuture<>();\n+        Single<Object> single = Single.create(future, true);\n+        future.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });\n+        single.cancel();        // should cancel future\n+        assertThat(cancelled.get(), is(true));\n+    }\n+\n+    /**\n+     * Test cancellation of {@code Single} after it has been converted to\n+     * a {@code CompletableFuture}.\n+     */\n+    @Test\n+    public void testSingleCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        Single<Object> single = Single.create(new CompletableFuture<>());\n+        CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n+        single.onCancel(() -> cancelled.set(true));\n+        single.cancel();\n+        future.cancel(true);        // should cancel single", "originalCommit": "0539181491e71037beba00e614067774cb026d25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU0Njg1OA==", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477546858", "bodyText": "Good catch, had to do some manual copy/paste :(", "author": "spericas", "createdAt": "2020-08-26T19:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMzM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2e583e35768429500737ac824619c9aae4fd5ada", "chunk": "diff --git a/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java b/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\nindex 11c1fe010..36af73a99 100644\n--- a/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\n+++ b/common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java\n\n@@ -58,7 +58,6 @@ public class CancellationTest {\n         Single<Object> single = Single.create(new CompletableFuture<>());\n         CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n         single.onCancel(() -> cancelled.set(true));\n-        single.cancel();\n         future.cancel(true);        // should cancel single\n         assertThat(cancelled.get(), is(true));\n     }\n"}}, {"oid": "2e583e35768429500737ac824619c9aae4fd5ada", "url": "https://github.com/oracle/helidon/commit/2e583e35768429500737ac824619c9aae4fd5ada", "message": "Removed unwanted line.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-08-26T19:55:12Z", "type": "commit"}]}