{"pr_number": 2241, "pr_title": "Support for bean producers in different package than beans that have \u2026", "pr_createdAt": "2020-08-07T12:51:25Z", "pr_url": "https://github.com/oracle/helidon/pull/2241", "timeline": [{"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897", "url": "https://github.com/oracle/helidon/commit/9658ed2716e377da03bf07b8e5b08ff2a7c12897", "message": "Support for bean producers in different package than beans that have package local methods.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-07T12:50:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTk3OA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467089978", "bodyText": "Maybe refactor so this statement happens only once instead of twice, so something like:\ntry {\n    return defineClassSamePackage()...\n} catch (Exception e) {\n    if (samePackage(originalClass, className)) {\n        throw e or wrapped e;\n    } else {\n        // carry on\n    }\n}", "author": "ljnelson", "createdAt": "2020-08-07T14:50:45Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -75,8 +76,17 @@ public boolean supportsClassDefining() {\n             // classloader, preventing it from seeing these fields/methods\n             return defineClassSamePackage(originalClass, className, classBytes, off, len);\n         } else {\n-            // use a custom classloader to define classes in a new package\n-            return wrapCl(originalClass.getClassLoader()).doDefineClass(originalClass, className, classBytes, off, len);\n+            // try to use same package approach (maybe in same module?) to support package local methods\n+            try {\n+                return defineClassSamePackage(originalClass, className, classBytes, off, len);", "originalCommit": "9658ed2716e377da03bf07b8e5b08ff2a7c12897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5ODM4NQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467098385", "bodyText": "Fixed", "author": "tomas-langer", "createdAt": "2020-08-07T15:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "161d526a6d4133e765c838fc9e2cd7dc361921da", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 76e234b5c..b23ba94b3 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -70,20 +70,20 @@ class HelidonProxyServices implements ProxyServices {\n     public Class<?> defineClass(Class<?> originalClass, String className, byte[] classBytes, int off, int len)\n             throws ClassFormatError {\n \n-        if (samePackage(originalClass, className)) {\n-            // when we need to define a class in the same package (to see package local fields and methods)\n-            // we cannot use a classloader, as the new class would be in the same package, but in a different\n-            // classloader, preventing it from seeing these fields/methods\n-            return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-        } else {\n-            // try to use same package approach (maybe in same module?) to support package local methods\n-            try {\n-                return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-            } catch (Exception e) {\n+        // always try to define in private lookup, if fails (and not same package), try using a different classloader\n+        try {\n+            return defineClassPrivateLookup(originalClass, className, classBytes, off, len);\n+        } catch (Exception e) {\n+            if (samePackage(originalClass, className)) {\n+                // when same package, we must use private lookup (as we may use package local)\n+                throw e;\n+            } else {\n                 LOGGER.log(Level.FINEST,\n                            \"Failed to create class \" + className + \" in same classloader. Will use a different one\",\n                            e);\n-                // use a custom classloader to define classes in a new package\n+\n+                // other cases (except for a few edge cases, such as producer in a different package and usage\n+                // of bean in the same package) we can live with a different classloader to hold the proxy class\n                 return wrapCl(originalClass.getClassLoader())\n                         .doDefineClass(originalClass, className, classBytes, off, len);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDA4NA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467090084", "bodyText": "Same as above", "author": "ljnelson", "createdAt": "2020-08-07T14:50:57Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -91,8 +101,17 @@ public boolean supportsClassDefining() {\n         if (samePackage(originalClass, className)) {\n             return defineClassSamePackage(originalClass, className, classBytes, off, len);\n         } else {\n-            return wrapCl(originalClass.getClassLoader())\n-                    .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n+            // try to use same package approach (maybe in same module?) to support package local methods\n+            try {\n+                return defineClassSamePackage(originalClass, className, classBytes, off, len);", "originalCommit": "9658ed2716e377da03bf07b8e5b08ff2a7c12897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5ODQ0NA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467098444", "bodyText": "Fixed", "author": "tomas-langer", "createdAt": "2020-08-07T15:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "161d526a6d4133e765c838fc9e2cd7dc361921da", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 76e234b5c..b23ba94b3 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -98,17 +98,20 @@ class HelidonProxyServices implements ProxyServices {\n                                 int len,\n                                 ProtectionDomain protectionDomain) throws ClassFormatError {\n \n-        if (samePackage(originalClass, className)) {\n-            return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-        } else {\n-            // try to use same package approach (maybe in same module?) to support package local methods\n-            try {\n-                return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-            } catch (Exception e) {\n+        // always try to define in private lookup, if fails (and not same package), try using a different classloader\n+        try {\n+            return defineClassPrivateLookup(originalClass, className, classBytes, off, len);\n+        } catch (Exception e) {\n+            if (samePackage(originalClass, className)) {\n+                // when same package, we must use private lookup (as we may use package local)\n+                throw e;\n+            } else {\n                 LOGGER.log(Level.FINEST,\n                            \"Failed to create class \" + className + \" in same classloader. Will use a different one\",\n                            e);\n \n+                // other cases (except for a few edge cases, such as producer in a different package and usage\n+                // of bean in the same package) we can live with a different classloader to hold the proxy class\n                 return wrapCl(originalClass.getClassLoader())\n                         .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n             }\n"}}, {"oid": "161d526a6d4133e765c838fc9e2cd7dc361921da", "url": "https://github.com/oracle/helidon/commit/161d526a6d4133e765c838fc9e2cd7dc361921da", "message": "Refactor to call each method just once.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-07T15:04:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467099721", "bodyText": "Thinking about it, this worries me.  If I have a nested class, won't this chop off the nested class name?  e.g. com.foo.Bar$Baz$various$proxy$related$bits: you'll conclude here that the proxied class name is com.foo.Bar, which is incorrect.  Or maybe this is intentional in some way, as the outer class (Bar) will of course be in the same package as the nested (and proxied) class (Bar$Baz) so it doesn't matter in practice?  Maybe a comment to further clarify here what you're doing?", "author": "ljnelson", "createdAt": "2020-08-07T15:07:28Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -117,8 +136,20 @@ public boolean supportsClassDefining() {\n                 // it also needs to open the package we are doing the lookup in\n                 myModule.addReads(classModule);\n             }\n+\n+            // I would like to create a private lookup in the same package as the proxied class, so let's\n+            // try to load it\n+            String proxiedClassName = className.substring(0, className.indexOf('$'));", "originalCommit": "9658ed2716e377da03bf07b8e5b08ff2a7c12897", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwNzA5Nw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467107097", "bodyText": "This is really to get a private lookup - so either you get the actual class, or the enclosing class - in both cases the private lookup should work", "author": "tomas-langer", "createdAt": "2020-08-07T15:20:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwNzc5MA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467107790", "bodyText": "Problem is that we only have a class that produces the bean, which is absolutely useless when in a different package.\nI need to get a class that allows me to obtain the private lookup - this seemed to be the easiest approach, as it should work both for class itself or inner class.", "author": "tomas-langer", "createdAt": "2020-08-07T15:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwNzg4Mw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467107883", "bodyText": "Then maybe the name is at fault?  Shouldn't it be privateLookupClassName or something?", "author": "ljnelson", "createdAt": "2020-08-07T15:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwODAxOA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467108018", "bodyText": "And if the class is not valid (e.g. we cannot load it), I fall back to the producer class", "author": "tomas-langer", "createdAt": "2020-08-07T15:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczNTQ5NA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467735494", "bodyText": "Also the method name is now defineClassPrivateLookup which is exactly what it does - it defines a class using a private lookup.\nThe name is related to how the lookup is used, not how it is obtained.", "author": "tomas-langer", "createdAt": "2020-08-10T07:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MDM0OQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468040349", "bodyText": "But isn't proxiedClassName the name of the lookup class, not the name of the class being proxied?  See line 148.", "author": "ljnelson", "createdAt": "2020-08-10T16:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5MDg4OQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468790889", "bodyText": "Refactored the whole thing, closing this discussion. I hope the new approach is correctly named (and documented).", "author": "tomas-langer", "createdAt": "2020-08-11T18:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "117ad853feaef30e9ee12cfa888fe0380143b0de", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 76e234b5c..300c0fcb5 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -138,13 +141,15 @@ class HelidonProxyServices implements ProxyServices {\n             }\n \n             // I would like to create a private lookup in the same package as the proxied class, so let's\n-            // try to load it\n-            String proxiedClassName = className.substring(0, className.indexOf('$'));\n+            // try to load it - I load the enclosing class (or the proxied class if not inner) to have\n+            // a lookup in the correct package/class\n+            String lookupClassName = className.substring(0, className.indexOf('$'));\n             Class<?> lookupClass;\n             try {\n-                lookupClass = originalClass.getClassLoader().loadClass(proxiedClassName);\n+                lookupClass = originalClass.getClassLoader().loadClass(lookupClassName);\n             } catch (Throwable e) {\n-                LOGGER.log(Level.FINEST, \"Cannot load proxied class: \" + proxiedClassName, e);\n+                LOGGER.log(Level.FINEST, \"Cannot load class to create private lookup: \" + lookupClassName, e);\n+                // fallback to the producer class, as we cannot load the enclosing class of the proxy\n                 lookupClass = originalClass;\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0ODM0MQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468048341", "bodyText": "I don't know enough about this to have a strong opinion, but let's say the private lookup fails.  Shouldn't we still endeavor to use MethodHandles.Lookup#defineClass(byte[]) to define the class instead of widening the access of ClassLoader#defineClass(byte[])?  Maybe using a public lookup rather than a private one?", "author": "ljnelson", "createdAt": "2020-08-10T17:00:18Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -88,11 +98,23 @@ public boolean supportsClassDefining() {\n                                 int len,\n                                 ProtectionDomain protectionDomain) throws ClassFormatError {\n \n-        if (samePackage(originalClass, className)) {\n-            return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-        } else {\n-            return wrapCl(originalClass.getClassLoader())\n-                    .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n+        // always try to define in private lookup, if fails (and not same package), try using a different classloader\n+        try {\n+            return defineClassPrivateLookup(originalClass, className, classBytes, off, len);\n+        } catch (Exception e) {\n+            if (samePackage(originalClass, className)) {\n+                // when same package, we must use private lookup (as we may use package local)\n+                throw e;\n+            } else {\n+                LOGGER.log(Level.FINEST,\n+                           \"Failed to create class \" + className + \" in same classloader. Will use a different one\",\n+                           e);\n+\n+                // other cases (except for a few edge cases, such as producer in a different package and usage\n+                // of bean in the same package) we can live with a different classloader to hold the proxy class\n+                return wrapCl(originalClass.getClassLoader())\n+                        .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);", "originalCommit": "161d526a6d4133e765c838fc9e2cd7dc361921da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTQzMQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468089431", "bodyText": "Will try", "author": "tomas-langer", "createdAt": "2020-08-10T18:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0ODM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc5Mjk5Ng==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468792996", "bodyText": "PublicLookup is not useful, as it does not have the PACKAGE right, so we cannot define classes using it.\nI have changed the code to work as follows:\n\nWeld specific packages (weldx, weld.lang) use the original classloader based approach\nall other beans use private lookup\n\nIf the private lookup fails, the bean class creation fails as well with appropriate message.\nThere may be some edge cases not covered by this approach, though our repository does not contain any such case.", "author": "tomas-langer", "createdAt": "2020-08-11T18:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0ODM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "34e9e501b2cff07d7c1ba3721b1a2597dae8cf12", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex b23ba94b3..321875937 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -98,23 +100,20 @@ class HelidonProxyServices implements ProxyServices {\n                                 int len,\n                                 ProtectionDomain protectionDomain) throws ClassFormatError {\n \n-        // always try to define in private lookup, if fails (and not same package), try using a different classloader\n+        if (weldInternalProxyClassName(className)) {\n+            // this is special case - these classes are defined in a non-existent package\n+            // and we need to use a classloader (public lookup will not allow this, and private lookup is not\n+            // possible for an empty package)\n+            return wrapCl(originalClass.getClassLoader())\n+                    .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n+        }\n+        // any other class should be defined using a private lookup\n         try {\n             return defineClassPrivateLookup(originalClass, className, classBytes, off, len);\n         } catch (Exception e) {\n-            if (samePackage(originalClass, className)) {\n-                // when same package, we must use private lookup (as we may use package local)\n-                throw e;\n-            } else {\n-                LOGGER.log(Level.FINEST,\n-                           \"Failed to create class \" + className + \" in same classloader. Will use a different one\",\n-                           e);\n-\n-                // other cases (except for a few edge cases, such as producer in a different package and usage\n-                // of bean in the same package) we can live with a different classloader to hold the proxy class\n-                return wrapCl(originalClass.getClassLoader())\n-                        .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n-            }\n+            LOGGER.log(Level.FINEST, \"Failed to create class \" + className + \" using private lookup\", e);\n+\n+            throw e;\n         }\n     }\n \n"}}, {"oid": "117ad853feaef30e9ee12cfa888fe0380143b0de", "url": "https://github.com/oracle/helidon/commit/117ad853feaef30e9ee12cfa888fe0380143b0de", "message": "Review comments.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-10T17:47:28Z", "type": "commit"}, {"oid": "34e9e501b2cff07d7c1ba3721b1a2597dae8cf12", "url": "https://github.com/oracle/helidon/commit/34e9e501b2cff07d7c1ba3721b1a2597dae8cf12", "message": "Update to proxy services\n- name is generated with super interface first\n- proxy classes are defined using private lookup when in original package\n- proxy classes are defined using a class loader for weld specific packages\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-11T18:44:06Z", "type": "commit"}, {"oid": "74bfb48cd9c2f6008cd85f20181e6d02eaeec603", "url": "https://github.com/oracle/helidon/commit/74bfb48cd9c2f6008cd85f20181e6d02eaeec603", "message": "Update to proxy services\n- name is generated with super interface first\n- proxy classes are defined using private lookup when in original package\n- proxy classes are defined using a class loader for weld specific packages\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-11T20:26:15Z", "type": "commit"}, {"oid": "561734815864a068cb6a90562d102b8ebedbedf0", "url": "https://github.com/oracle/helidon/commit/561734815864a068cb6a90562d102b8ebedbedf0", "message": "Adding opens statements for Helidon cdi module\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-11T20:39:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMzEwNw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468903107", "bodyText": "Is there any reason not to just go with this strategy?  That is, is anything gained by first trying lookupClassName?  My understanding is that a lookup class with respect to MethodHandles.Lookup is used only for its package and module\u2014and an enclosing or top level class should be fine here.", "author": "ljnelson", "createdAt": "2020-08-11T22:36:47Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +135,91 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name based on full class name (e.g. for inner classes)\n+            String lookupClassName;\n+            // lookup class name based on the first class in the name\n+            String fallbackLookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // fallback is the package + first name in the compound proxy class name\n+                fallbackLookupClassName = className.substring(0, className.indexOf('$'));", "originalCommit": "561734815864a068cb6a90562d102b8ebedbedf0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzMzAxNA==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469133014", "bodyText": "You are right, this is too complicated and most likely useless. Simplified.", "author": "tomas-langer", "createdAt": "2020-08-12T09:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMzEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "92f89db999e9ae8d627e3c5314a5450f8185e7f7", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 54491bd9e..27f9bf228 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -138,43 +136,27 @@ class HelidonProxyServices implements ProxyServices {\n         MethodHandles.Lookup lookup;\n \n         try {\n-            // lookup class name based on full class name (e.g. for inner classes)\n+            // lookup class name \"guessed\" from the class name of the proxy\n             String lookupClassName;\n-            // lookup class name based on the first class in the name\n-            String fallbackLookupClassName;\n \n             if (className.contains(\"$\")) {\n-                // fallback is the package + first name in the compound proxy class name\n-                fallbackLookupClassName = className.substring(0, className.indexOf('$'));\n+                // package + first name in the compound proxy class name\n+                lookupClassName = className.substring(0, className.indexOf('$'));\n             } else {\n-                fallbackLookupClassName = className;\n+                lookupClassName = className;\n             }\n \n-            // Let's try to get the actual class of the proxy\n-            // the name ends with $$Proxy$_$$_WeldClientProxy or $$Proxy$_$$_Weld$Proxy$\n-            if (className.endsWith(CLIENT_PROXY_SUFFIX)) {\n-                lookupClassName = className.substring(0, className.length() - CLIENT_PROXY_SUFFIX.length());\n-            } else if (className.endsWith(PROXY_SUFFIX)) {\n-                lookupClassName = className.substring(0, className.length() - PROXY_SUFFIX.length());\n-            } else {\n-                lookupClassName = fallbackLookupClassName;\n-            }\n-\n-            // I would like to create a private lookup in the same package as the proxied class, so let's\n-\n+            // I would like to create a private lookup in the same package as the proxied class, so let's do it\n             // first if the producer class and the lookup class name is the same, just use the existing class\n             Class<?> lookupClass = lookupClassName.equals(originalClass.getName()) ? originalClass : null;\n \n             ClassLoader cl = originalClass.getClassLoader();\n \n             if (null == lookupClass) {\n-                // try to load the full class name (may contain additional interfaces, so easily invalid)\n+                // try to load the full class name\n                 lookupClass = tryLoading(cl, lookupClassName);\n             }\n-            if (null == lookupClass && !lookupClassName.equals(fallbackLookupClassName)) {\n-                // fallback to the simple class name until the first $ sign\n-                lookupClass = tryLoading(cl, fallbackLookupClassName);\n-            }\n+\n             if (null == lookupClass) {\n                 // and if that fails, just use the bean producer class\n                 lookupClass = originalClass;\n"}}, {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7", "url": "https://github.com/oracle/helidon/commit/92f89db999e9ae8d627e3c5314a5450f8185e7f7", "message": "Simplify private lookup\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-12T09:35:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjEzNg==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469576136", "bodyText": "contains effectively does an indexOf; no need to do indexOf again.  I'd rewrite this block something like this:\nfinal int index = className.indexOf('$');\nlookupClassName = index < 0 ? className : className.substring(0, index);", "author": "ljnelson", "createdAt": "2020-08-12T22:13:26Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,75 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            String lookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // package + first name in the compound proxy class name\n+                lookupClassName = className.substring(0, className.indexOf('$'));", "originalCommit": "92f89db999e9ae8d627e3c5314a5450f8185e7f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwODk1OQ==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469808959", "bodyText": "Changed.", "author": "tomas-langer", "createdAt": "2020-08-13T09:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 27f9bf228..1f190ae73 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -137,29 +137,18 @@ class HelidonProxyServices implements ProxyServices {\n \n         try {\n             // lookup class name \"guessed\" from the class name of the proxy\n-            String lookupClassName;\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n \n-            if (className.contains(\"$\")) {\n-                // package + first name in the compound proxy class name\n-                lookupClassName = className.substring(0, className.indexOf('$'));\n-            } else {\n-                lookupClassName = className;\n-            }\n-\n-            // I would like to create a private lookup in the same package as the proxied class, so let's do it\n-            // first if the producer class and the lookup class name is the same, just use the existing class\n-            Class<?> lookupClass = lookupClassName.equals(originalClass.getName()) ? originalClass : null;\n-\n-            ClassLoader cl = originalClass.getClassLoader();\n-\n-            if (null == lookupClass) {\n-                // try to load the full class name\n-                lookupClass = tryLoading(cl, lookupClassName);\n-            }\n-\n-            if (null == lookupClass) {\n-                // and if that fails, just use the bean producer class\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n                 lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n             }\n \n             Module lookupClassModule = lookupClass.getModule();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjgzMg==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469576832", "bodyText": "Similarly, I think this can all be simplified based on whether index < 0.  So:\nfinal Class<?> lookupClass = index < 0 ? originalClass : tryLoading(cl, lookupClassName);", "author": "ljnelson", "createdAt": "2020-08-12T22:15:07Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,75 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            String lookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // package + first name in the compound proxy class name\n+                lookupClassName = className.substring(0, className.indexOf('$'));\n+            } else {\n+                lookupClassName = className;\n+            }\n+\n+            // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+            // first if the producer class and the lookup class name is the same, just use the existing class\n+            Class<?> lookupClass = lookupClassName.equals(originalClass.getName()) ? originalClass : null;\n+\n+            ClassLoader cl = originalClass.getClassLoader();\n+\n+            if (null == lookupClass) {\n+                // try to load the full class name\n+                lookupClass = tryLoading(cl, lookupClassName);\n+            }\n+\n+            if (null == lookupClass) {\n+                // and if that fails, just use the bean producer class\n+                lookupClass = originalClass;\n+            }", "originalCommit": "92f89db999e9ae8d627e3c5314a5450f8185e7f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwOTAyNw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469809027", "bodyText": "Changed.", "author": "tomas-langer", "createdAt": "2020-08-13T09:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 27f9bf228..1f190ae73 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -137,29 +137,18 @@ class HelidonProxyServices implements ProxyServices {\n \n         try {\n             // lookup class name \"guessed\" from the class name of the proxy\n-            String lookupClassName;\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n \n-            if (className.contains(\"$\")) {\n-                // package + first name in the compound proxy class name\n-                lookupClassName = className.substring(0, className.indexOf('$'));\n-            } else {\n-                lookupClassName = className;\n-            }\n-\n-            // I would like to create a private lookup in the same package as the proxied class, so let's do it\n-            // first if the producer class and the lookup class name is the same, just use the existing class\n-            Class<?> lookupClass = lookupClassName.equals(originalClass.getName()) ? originalClass : null;\n-\n-            ClassLoader cl = originalClass.getClassLoader();\n-\n-            if (null == lookupClass) {\n-                // try to load the full class name\n-                lookupClass = tryLoading(cl, lookupClassName);\n-            }\n-\n-            if (null == lookupClass) {\n-                // and if that fails, just use the bean producer class\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n                 lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n             }\n \n             Module lookupClassModule = lookupClass.getModule();\n"}}, {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "url": "https://github.com/oracle/helidon/commit/60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "message": "Review comment.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-13T10:15:59Z", "type": "commit"}, {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "url": "https://github.com/oracle/helidon/commit/60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "message": "Review comment.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-13T10:15:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDU5Mw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r470050593", "bodyText": "tiny nit: you already stored index; just reuse it instead of className.indexOf('$') again", "author": "ljnelson", "createdAt": "2020-08-13T15:47:44Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,65 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n+\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n+                lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));", "originalCommit": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 1f190ae73..67031991e 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -143,12 +143,12 @@ class HelidonProxyServices implements ProxyServices {\n             Class<?> lookupClass;\n             if (index < 0) {\n                 LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n-                                      + \" original class name: \" + originalClass.getName());\n+                        + \" original class name: \" + originalClass.getName());\n                 lookupClass = originalClass;\n             } else {\n                 // I would like to create a private lookup in the same package as the proxied class, so let's do it\n                 // use the \"extracted\" lookup class name, if that fails, use the original class\n-                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n+                lookupClass = tryLoading(originalClass, className.substring(0, index));\n             }\n \n             Module lookupClassModule = lookupClass.getModule();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTQzNw==", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r470051437", "bodyText": "Nit: just do return originalClass.getClassLoader().loadClass(className); no need to define a local variable.", "author": "ljnelson", "createdAt": "2020-08-13T15:49:01Z", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,65 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n+\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n+                lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n+            }\n+\n+            Module lookupClassModule = lookupClass.getModule();\n+            if (!myModule.canRead(lookupClassModule)) {\n                 // we need to read the module to be able to create a private lookup in it\n                 // it also needs to open the package we are doing the lookup in\n-                myModule.addReads(classModule);\n+                myModule.addReads(lookupClassModule);\n             }\n+\n             // next line would fail if the module does not open its package, with a very meaningful error message\n-            MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(originalClass, MethodHandles.lookup());\n-            if (classBytes.length == len) {\n-                return lookup.defineClass(classBytes);\n-            } else {\n-                byte[] bytes = new byte[len];\n-                System.arraycopy(classBytes, off, bytes, 0, len);\n-                return lookup.defineClass(bytes);\n-            }\n+            lookup = MethodHandles.privateLookupIn(lookupClass, MethodHandles.lookup());\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(\"Failed to define class \" + className, e);\n         }\n+\n+        return defineClass(lookup, className, classBytes, off, len);\n     }\n \n-    private boolean samePackage(Class<?> originalClass, String className) {\n-        String origPackage = originalClass.getPackageName();\n-        String newPackage = packageName(className);\n-        return newPackage.equals(origPackage);\n+    private Class<?> tryLoading(Class<?> originalClass, String className) {\n+        try {\n+            ClassLoader cl = originalClass.getClassLoader();\n+            return cl.loadClass(className);", "originalCommit": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "chunk": "diff --git a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\nindex 1f190ae73..67031991e 100644\n--- a/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n+++ b/microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java\n\n@@ -143,12 +143,12 @@ class HelidonProxyServices implements ProxyServices {\n             Class<?> lookupClass;\n             if (index < 0) {\n                 LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n-                                      + \" original class name: \" + originalClass.getName());\n+                        + \" original class name: \" + originalClass.getName());\n                 lookupClass = originalClass;\n             } else {\n                 // I would like to create a private lookup in the same package as the proxied class, so let's do it\n                 // use the \"extracted\" lookup class name, if that fails, use the original class\n-                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n+                lookupClass = tryLoading(originalClass, className.substring(0, index));\n             }\n \n             Module lookupClassModule = lookupClass.getModule();\n"}}, {"oid": "0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "url": "https://github.com/oracle/helidon/commit/0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "message": "Review comment again.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-08-13T15:58:28Z", "type": "commit"}]}