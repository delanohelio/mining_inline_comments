{"pr_number": 2091, "pr_title": "Support for SE mappers in MP.", "pr_createdAt": "2020-06-24T14:07:24Z", "pr_url": "https://github.com/oracle/helidon/pull/2091", "timeline": [{"oid": "bd3945c6ff254ab0fa616104ec30ab8742adffe8", "url": "https://github.com/oracle/helidon/commit/bd3945c6ff254ab0fa616104ec30ab8742adffe8", "message": "Support for SE mappers in MP.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-24T14:02:43Z", "type": "commit"}, {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "url": "https://github.com/oracle/helidon/commit/48c9efbd60512c451ecfa05debb8ffa8bc93837e", "message": "Removed mandatory use of object mapping from security providers.\nUse direct APIs to retrieve booleans.\nFixes to object mapping support in MP.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-24T23:13:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445250289", "bodyText": "Consider replacing with just:\nIterator<ConfigSource> iterator = mpConfig.getConfigSources().iterator();\nConfigSource first = iterator.hasNext() ? iterator.next() : null;\nif (!iterator.hasNext() && first instanceof MpHelidonConfigSource) {\n   return ((MpHelidonConfigSource) first).unwrap();\n}\n\nLess code and fewer object allocations.  (Obviously check my syntax as I haven't proofed it but you should get the idea.)", "author": "ljnelson", "createdAt": "2020-06-25T00:56:57Z", "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "diffHunk": "@@ -40,12 +44,32 @@ private MpConfig() {\n      * @param mpConfig MP Config instance\n      * @return a new Helidon config using only the mpConfig as its config source\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n         if (mpConfig instanceof io.helidon.config.Config) {\n             return (io.helidon.config.Config) mpConfig;\n         }\n \n+        // If the mpConfig is based on an SE config (such as when we use meta configuration)\n+        // we must reuse that se config instance\n+        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n+        List<ConfigSource> allSources = new LinkedList<>();\n+        for (ConfigSource source : configSources) {\n+            allSources.add(source);\n+            if (allSources.size() > 1) {\n+                // we only care about first or first two\n+                break;\n+            }\n+        }\n+\n+        if (allSources.size() == 1) {\n+            ConfigSource first = allSources.get(0);\n+            if (first instanceof MpHelidonConfigSource) {\n+                // we only have Helidon SE config as a source - let's just use it\n+                return ((MpHelidonConfigSource) first).unwrap();\n+            }\n+        }", "originalCommit": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2NjU4MA==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445366580", "bodyText": "Can be even shorter\n    public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n\n        if (mpConfig instanceof io.helidon.config.Config) {\n            return (io.helidon.config.Config) mpConfig;\n        }\n\n        return StreamSupport.stream(config.getConfigSources().spliterator(), false)\n                .filter(MpHelidonConfigSource.class::isInstance)\n                .findFirst()\n                .map(MpHelidonConfigSource.class::cast)\n                .map(MpHelidonConfigSource::unwrap)\n                // we use Helidon SE config to handle object mapping (and possible other mappers on classpath)\n                .orElseGet(() -> new SeConfig(io.helidon.config.Config.builder()\n                        .sources(ConfigSources.empty())\n                        .overrides(OverrideSources.empty())\n                        .disableEnvironmentVariablesSource()\n                        .disableSystemPropertiesSource()\n                        .disableParserServices()\n                        .disableFilterServices()\n                        .disableCaching()\n                        .disableValueResolving()\n                        .changesExecutor(command -> {\n                        })\n                        .build(), mpConfig));\n    }", "author": "danielkec", "createdAt": "2020-06-25T07:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTU0Nw==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381547", "bodyText": "Fixed", "author": "tomas-langer", "createdAt": "2020-06-25T08:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "800590ba22d9732b0c052d6e21b350f2b970b41e", "chunk": "diff --git a/config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java b/config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java\nindex 99655868c..6cb51ed93 100644\n--- a/config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java\n+++ b/config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java\n\n@@ -51,22 +50,11 @@ public final class MpConfig {\n \n         // If the mpConfig is based on an SE config (such as when we use meta configuration)\n         // we must reuse that se config instance\n-        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n-        List<ConfigSource> allSources = new LinkedList<>();\n-        for (ConfigSource source : configSources) {\n-            allSources.add(source);\n-            if (allSources.size() > 1) {\n-                // we only care about first or first two\n-                break;\n-            }\n-        }\n-\n-        if (allSources.size() == 1) {\n-            ConfigSource first = allSources.get(0);\n-            if (first instanceof MpHelidonConfigSource) {\n-                // we only have Helidon SE config as a source - let's just use it\n-                return ((MpHelidonConfigSource) first).unwrap();\n-            }\n+        Iterator<ConfigSource> configSources = mpConfig.getConfigSources().iterator();\n+        ConfigSource first = configSources.hasNext() ? configSources.next() : null;\n+        if (!configSources.hasNext() && first instanceof MpHelidonConfigSource) {\n+            // we only have Helidon SE config as a source - let's just use it\n+            return ((MpHelidonConfigSource) first).unwrap();\n         }\n \n         // we use Helidon SE config to handle object mapping (and possible other mappers on classpath)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTAwNg==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251006", "bodyText": "Just checking (not familiar with the complexities of Helidon Config): is this truly supposed to be a string, \"0\"?", "author": "ljnelson", "createdAt": "2020-06-25T00:59:46Z", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){", "originalCommit": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzODE5NA==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445338194", "bodyText": "Yes - if there is an array in configuration, it uses index. I am just checking that there is a subkey with the first index.\nlist.0=first\nlist.1=second\nobjectlist.0.name=first\nobjectlist.0.value=first value\nobjectlist.1.name=second\nobjectlist.1.value=second value", "author": "tomas-langer", "createdAt": "2020-06-25T06:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "800590ba22d9732b0c052d6e21b350f2b970b41e", "chunk": "diff --git a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\nindex 360034fb0..97895b2bf 100644\n--- a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\n+++ b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\n\n@@ -386,11 +389,11 @@ class SeConfig implements Config {\n                     break;\n                 }\n             }\n-            return new SeConfigValue<>(key, result);\n+            return result;\n         } else {\n             // and further still we may have a list of objects\n             if (get(\"0\").type() == Type.MISSING){\n-                return ConfigValues.empty();\n+                throw MissingValueException.create(key);\n             }\n             // there are objects here, let's do that\n             List<T> result = new LinkedList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251368", "bodyText": "Do you need equals and hashCode overrides for these ConfigValue implementations?  Or no?", "author": "ljnelson", "createdAt": "2020-06-25T01:01:20Z", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config.mp;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigMappingException;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.config.MissingValueException;\n+\n+class SeConfigValue<T> implements ConfigValue<T> {", "originalCommit": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0MTgzNg==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445341836", "bodyText": "Yes...", "author": "tomas-langer", "createdAt": "2020-06-25T06:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTc0NQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381745", "bodyText": "Fixed", "author": "tomas-langer", "createdAt": "2020-06-25T08:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "800590ba22d9732b0c052d6e21b350f2b970b41e", "chunk": "diff --git a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java\nindex 319c9d6f2..cd26a1611 100644\n--- a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java\n+++ b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java\n\n@@ -16,6 +16,7 @@\n \n package io.helidon.config.mp;\n \n+import java.util.Objects;\n import java.util.Optional;\n import java.util.function.Function;\n import java.util.function.Supplier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445380249", "bodyText": "Could be done without recursion, but not sure if its nicer:\n    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n        if (type() == Type.MISSING) {\n            return Stream.of();\n        }\n        return config.asNodeList()\n                .map(list -> list.stream()\n                        .filter(predicate)\n                        .flatMap(node -> node.type().isLeaf()\n                                ? Stream.of(node)\n                                : node.asNodeList()\n                                      .orElseThrow(MissingValueException.createSupplier(key()))\n                                      .stream()\n                                      .filter(predicate)\n                        ))\n                .orElseThrow(MissingValueException.createSupplier(key()));", "author": "danielkec", "createdAt": "2020-06-25T08:05:59Z", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "originalCommit": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTEyOQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381129", "bodyText": "aa its not, missing type check needs to be even in the flatMap", "author": "danielkec", "createdAt": "2020-06-25T08:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4NTYyOQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445385629", "bodyText": "or does it?", "author": "danielkec", "createdAt": "2020-06-25T08:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NzEzNg==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445677136", "bodyText": "I don't feel like changing this right now. If you feel this is a problem, let's do a follow up issue.", "author": "tomas-langer", "createdAt": "2020-06-25T16:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "800590ba22d9732b0c052d6e21b350f2b970b41e", "url": "https://github.com/oracle/helidon/commit/800590ba22d9732b0c052d6e21b350f2b970b41e", "message": "Review fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-25T08:08:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445383675", "bodyText": "Magic number", "author": "danielkec", "createdAt": "2020-06-25T08:11:57Z", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){\n+                return ConfigValues.empty();\n+            }\n+            // there are objects here, let's do that\n+            List<T> result = new LinkedList<>();\n+\n+            for (int i = 0; i < 1000; i++) {\n+                Config config = get(String.valueOf(i));\n+                if (config.type() == Type.MISSING) {\n+                    break;\n+                }\n+                result.add(config.as(typeArg).get());\n+            }", "originalCommit": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDQ0Ng==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445554446", "bodyText": "very magical, but documented", "author": "tomas-langer", "createdAt": "2020-06-25T13:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjM3Mw==", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445572373", "bodyText": "Fixed anyway", "author": "tomas-langer", "createdAt": "2020-06-25T13:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d46a7a347dda12f9750b7c8aeff95957b624763c", "chunk": "diff --git a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\nindex 360034fb0..68ceb005c 100644\n--- a/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\n+++ b/config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java\n\n@@ -385,30 +389,33 @@ class SeConfig implements Config {\n                     // finish the iteration on first missing index\n                     break;\n                 }\n+                i++;\n             }\n-            return new SeConfigValue<>(key, result);\n+            return result;\n         } else {\n             // and further still we may have a list of objects\n             if (get(\"0\").type() == Type.MISSING){\n-                return ConfigValues.empty();\n+                throw MissingValueException.create(key);\n             }\n             // there are objects here, let's do that\n             List<T> result = new LinkedList<>();\n \n-            for (int i = 0; i < 1000; i++) {\n+            int i = 0;\n+            while(true) {\n                 Config config = get(String.valueOf(i));\n                 if (config.type() == Type.MISSING) {\n                     break;\n                 }\n                 result.add(config.as(typeArg).get());\n+                i++;\n             }\n-            return new SeConfigValue<>(key, result);\n+            return result;\n         }\n     }\n \n-    private <T> List<T> toList(String configKey,\n-                               String stringValue,\n-                               Class<T> typeArg) {\n+    private <T> List<T> valueToList(String configKey,\n+                                    String stringValue,\n+                                    Class<T> typeArg) {\n         if (stringValue.isEmpty()) {\n             return List.of();\n         }\n"}}, {"oid": "d46a7a347dda12f9750b7c8aeff95957b624763c", "url": "https://github.com/oracle/helidon/commit/d46a7a347dda12f9750b7c8aeff95957b624763c", "message": "Removed magical number, support unlimited lists.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-25T13:48:56Z", "type": "commit"}, {"oid": "60f0a68b726577bb250485bf4e69fd7daf261f10", "url": "https://github.com/oracle/helidon/commit/60f0a68b726577bb250485bf4e69fd7daf261f10", "message": "Checkstyle fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-25T13:59:06Z", "type": "commit"}]}