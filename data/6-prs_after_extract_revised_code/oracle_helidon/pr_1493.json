{"pr_number": 1493, "pr_title": "Support multiple apps in OpenAPI document", "pr_createdAt": "2020-03-11T17:57:48Z", "pr_url": "https://github.com/oracle/helidon/pull/1493", "timeline": [{"oid": "3190fcd84f083ace5361a4021f15a9d2478be733", "url": "https://github.com/oracle/helidon/commit/3190fcd84f083ace5361a4021f15a9d2478be733", "message": "Initial commit of changes to support multiple apps", "committedDate": "2020-03-10T23:50:49Z", "type": "commit"}, {"oid": "260809e448a16545e1521cdc908d6e622308146c", "url": "https://github.com/oracle/helidon/commit/260809e448a16545e1521cdc908d6e622308146c", "message": "Use multiple FilteredIndexViews to scan then build and merge OpenAPI models for each app", "committedDate": "2020-03-11T17:20:05Z", "type": "commit"}, {"oid": "029e03df4862883ca3078e4661333b752fe50756", "url": "https://github.com/oracle/helidon/commit/029e03df4862883ca3078e4661333b752fe50756", "message": "Concurrent changes", "committedDate": "2020-03-11T17:22:34Z", "type": "commit"}, {"oid": "14338ccd7d69fc15f9d14795546114fa62a1b04a", "url": "https://github.com/oracle/helidon/commit/14338ccd7d69fc15f9d14795546114fa62a1b04a", "message": "Remove 'All rights reserved' from pom; update a comment", "committedDate": "2020-03-11T17:37:51Z", "type": "commit"}, {"oid": "b2b19ac1077d1b75495aa73b47c04e5a35fed36b", "url": "https://github.com/oracle/helidon/commit/b2b19ac1077d1b75495aa73b47c04e5a35fed36b", "message": "Handle the 'synthetic application' case from JaxRsCdiExtension", "committedDate": "2020-03-11T20:03:26Z", "type": "commit"}, {"oid": "1cd492639eaa7574a8f6ec05aea07fbd9a7ec223", "url": "https://github.com/oracle/helidon/commit/1cd492639eaa7574a8f6ec05aea07fbd9a7ec223", "message": "No need to instantiate JAX-RS apps to invoke getClasses and getSingletons because they come from JaxRsCdiExtension in the server component which already provides instances", "committedDate": "2020-03-12T20:11:09Z", "type": "commit"}, {"oid": "969f5f58451c9be0e6be098736c3b8f6db0e7516", "url": "https://github.com/oracle/helidon/commit/969f5f58451c9be0e6be098736c3b8f6db0e7516", "message": "Revise synthetic app detection", "committedDate": "2020-03-13T00:21:43Z", "type": "commit"}, {"oid": "1913a15fc73ddcc4e6c67c967d03cde43be40976", "url": "https://github.com/oracle/helidon/commit/1913a15fc73ddcc4e6c67c967d03cde43be40976", "message": "Emphasize per-app use of FilteredIndexViews; compartmentalize detection of synthetic apps", "committedDate": "2020-03-13T15:01:53Z", "type": "commit"}, {"oid": "cff03663b4474ec829a971042426605f30b8017b", "url": "https://github.com/oracle/helidon/commit/cff03663b4474ec829a971042426605f30b8017b", "message": "Add explicit indication that JaxRsApplication is/is not synthetic", "committedDate": "2020-03-13T18:00:24Z", "type": "commit"}, {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096", "url": "https://github.com/oracle/helidon/commit/1975c60737bb9b9ed1d964ef14f68b82311b9096", "message": "Use explicit indicator if app is synthetic; also handle case in which the JaxRsApplication already has an app instance (and therefore we do not need to instantiate the class)", "committedDate": "2020-03-13T18:01:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTY3OA==", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529678", "bodyText": "Please replace with\nreturn jaxRsApp.applicationClass()\n                .flatMap(MPOpenAPIBuilder::instantiate);\n\nAnd remove the Optional<Class> parameter from instantiate methods. Using Optional as a parameter is generally not recommended.", "author": "tomas-langer", "createdAt": "2020-03-17T09:02:14Z", "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -30,15 +44,106 @@\n \n     private Optional<OpenApiConfig> openAPIConfig;\n     private Optional<IndexView> indexView;\n+    private List<FilteredIndexView> perAppFilteredIndexViews = null;\n+    private Config mpConfig;\n \n     @Override\n     public OpenApiConfig openAPIConfig() {\n         return openAPIConfig.get();\n     }\n \n     @Override\n-    public IndexView indexView() {\n-        return indexView.get();\n+    public synchronized List<FilteredIndexView> perAppFilteredIndexViews() {\n+        if (perAppFilteredIndexViews == null) {\n+            perAppFilteredIndexViews = buildPerAppFilteredIndexViews();\n+        }\n+        return perAppFilteredIndexViews;\n+    }\n+\n+    private List<FilteredIndexView> buildPerAppFilteredIndexViews() {\n+        /*\n+         * The JaxRsCdiExtension knows about all the apps in the system. For each app find out the classes related to that\n+         * app -- the application class itself and any resource classes reported by its getClasses() or getSingletons()\n+         * methods -- and create a FilteredIndexView that will be used to restrict scanning to only those classes for that app.\n+         */\n+        JaxRsCdiExtension ext = CDI.current()\n+                .getBeanManager()\n+                .getExtension(JaxRsCdiExtension.class);\n+\n+        /*\n+         * There are two cases that return a default filtered index view. Don't create it yet, just declare a supplier for it.\n+         */\n+        Supplier<List<FilteredIndexView>> defaultResultSupplier = () -> List.of(new FilteredIndexView(indexView.get(),\n+                openAPIConfig.get()));\n+\n+        /*\n+         * Each set in the list holds the classes related to one app.\n+         */\n+        List<JaxRsApplication> appsToRun = ext.applicationsToRun();\n+        if (appsToRun.size() <= 1) {\n+            return defaultResultSupplier.get();\n+        }\n+        /*\n+         * Some JaxRsApplication instances might have an application instance already associated with them. Others might not in\n+         * which case we'll try to instantiate them ourselves (unless they are synthetic apps or lack no-args constructors).\n+         */\n+        List<Set<Class<?>>> appClassesToScan = appsToRun.stream()\n+                .filter(MPOpenAPIBuilder::isNonSynthetic)\n+                .map(this::appInstance)\n+                .flatMap(Optional::stream)\n+                .map(this::classesToScanForApp)\n+                .collect(Collectors.toList());\n+\n+        if (appClassesToScan.size() <= 1) {\n+            /*\n+             * Use normal scanning with a FilteredIndexView containing no class restrictions (beyond what might already be in\n+             * the configuration).\n+             */\n+            return defaultResultSupplier.get();\n+        }\n+        return appClassesToScan.stream()\n+                .map(this::appRelatedClassesToFilteredIndexView)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static boolean isNonSynthetic(JaxRsApplication jaxRsApp) {\n+        return !jaxRsApp.synthetic();\n+    }\n+\n+    private Optional<? extends Application> appInstance(JaxRsApplication jaxRsApp) {\n+        Application preexistingApp = jaxRsApp.resourceConfig().getApplication();\n+        if (preexistingApp != null) {\n+            return Optional.of(preexistingApp);\n+        }\n+        return instantiate(jaxRsApp.applicationClass());", "originalCommit": "1975c60737bb9b9ed1d964ef14f68b82311b9096", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9566bd8acae2bd469e435c00eb65130c0b6e06d", "chunk": "diff --git a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\nindex fad345c02..72faab7c3 100644\n--- a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n+++ b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n\n@@ -112,10 +112,9 @@ public final class MPOpenAPIBuilder extends OpenAPISupport.Builder {\n \n     private Optional<? extends Application> appInstance(JaxRsApplication jaxRsApp) {\n         Application preexistingApp = jaxRsApp.resourceConfig().getApplication();\n-        if (preexistingApp != null) {\n-            return Optional.of(preexistingApp);\n-        }\n-        return instantiate(jaxRsApp.applicationClass());\n+        return preexistingApp != null ? Optional.of(preexistingApp)\n+                : jaxRsApp.applicationClass()\n+                        .flatMap(MPOpenAPIBuilder::instantiate);\n     }\n \n     private <T extends Application> Set<Class<?>> classesToScanForApp(Application app) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTk4MQ==", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529981", "bodyText": "To work with my above note, replace with\n    private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n        try {\n            return Optional.of(appClass.getConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(e);\n        } catch (NoSuchMethodException e) {\n            // Wrapper app does not have a no-args constructor so we canont instantiate it.\n            return Optional.empty();\n        }\n    }", "author": "tomas-langer", "createdAt": "2020-03-17T09:02:47Z", "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -48,11 +153,34 @@ public IndexView indexView() {\n      * @param config {@link OpenApiConfig} instance to control OpenAPI behavior\n      * @return updated builder instance\n      */\n-    public MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n+    private MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n         this.openAPIConfig = Optional.of(config);\n         return this;\n     }\n \n+    MPOpenAPIBuilder config(Config mpConfig) {\n+        this.mpConfig = mpConfig;\n+        openAPIConfig(new OpenApiConfigImpl(mpConfig));\n+        return this;\n+    }\n+\n+    private static Optional<? extends Application> instantiate(Optional<Class<? extends Application>> optionalAppClass) {", "originalCommit": "1975c60737bb9b9ed1d964ef14f68b82311b9096", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9566bd8acae2bd469e435c00eb65130c0b6e06d", "chunk": "diff --git a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\nindex fad345c02..72faab7c3 100644\n--- a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n+++ b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n\n@@ -164,15 +163,9 @@ public final class MPOpenAPIBuilder extends OpenAPISupport.Builder {\n         return this;\n     }\n \n-    private static Optional<? extends Application> instantiate(Optional<Class<? extends Application>> optionalAppClass) {\n+    private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n         try {\n-            if (optionalAppClass.isPresent()) {\n-                return Optional.of(optionalAppClass.get()\n-                        .getConstructor()\n-                        .newInstance());\n-            } else {\n-                return Optional.empty();\n-            }\n+            return Optional.of(appClass.getConstructor().newInstance());\n         } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n             throw new RuntimeException(e);\n         } catch (NoSuchMethodException e) {\n"}}, {"oid": "d9566bd8acae2bd469e435c00eb65130c0b6e06d", "url": "https://github.com/oracle/helidon/commit/d9566bd8acae2bd469e435c00eb65130c0b6e06d", "message": "Adopt review suggestions", "committedDate": "2020-03-17T17:59:53Z", "type": "commit"}, {"oid": "69c98fe4cdb825aab0540d1395bce82a8b52dcec", "url": "https://github.com/oracle/helidon/commit/69c98fe4cdb825aab0540d1395bce82a8b52dcec", "message": "Concurrent changes", "committedDate": "2020-03-17T20:48:45Z", "type": "commit"}, {"oid": "ffc9cfb7ec4d2a4ae4e03848adfd73dc96012a6d", "url": "https://github.com/oracle/helidon/commit/ffc9cfb7ec4d2a4ae4e03848adfd73dc96012a6d", "message": "Resolve merge conflicts", "committedDate": "2020-03-17T20:49:29Z", "type": "commit"}]}