{"pr_number": 1912, "pr_title": "Container startup issue fixed.", "pr_createdAt": "2020-06-01T19:18:21Z", "pr_url": "https://github.com/oracle/helidon/pull/1912", "timeline": [{"oid": "f8123066538c7e5d8752e5314c334c3ab21663da", "url": "https://github.com/oracle/helidon/commit/f8123066538c7e5d8752e5314c334c3ab21663da", "message": "Container startup issue fixed.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-01T19:17:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2NzYxNw==", "url": "https://github.com/oracle/helidon/pull/1912#discussion_r433467617", "bodyText": "This logic sets IN_PROGRESS_OR_RUNNING to false only if it was true at the start of the method. Could there be a race condition here in which an (incorrect) second attempt to start the server concurrently occurred after isRunning is assigned false (and that parallel start-up would set IN_PROGRESS_OR_RUNNING to true), the doStop actually does the shutdown, but because isRunning is not true then IN_PROGRESS_OR_RUNNING is not set to false? So the server would be stopped but IN_PROGRESS_OR_RUNNING incorrectly says true.\nMaybe this cannot happen in practice because of other reasons?", "author": "tjquinno", "createdAt": "2020-06-01T20:20:59Z", "path": "microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java", "diffHunk": "@@ -216,6 +228,17 @@ private void registerClasspathStaticContent(Config config) {\n     }\n \n     private void stopServer(@Observes @Priority(PLATFORM_BEFORE) @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        boolean isRunning = IN_PROGRESS_OR_RUNNING.get();\n+        try {\n+            doStop(event);\n+        } finally {\n+            if (isRunning) {\n+                IN_PROGRESS_OR_RUNNING.set(false);\n+            }", "originalCommit": "f8123066538c7e5d8752e5314c334c3ab21663da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTcxMw==", "url": "https://github.com/oracle/helidon/pull/1912#discussion_r433531713", "bodyText": "There was a problem with this. Fixing.", "author": "tomas-langer", "createdAt": "2020-06-01T22:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2NzYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMzMwNA==", "url": "https://github.com/oracle/helidon/pull/1912#discussion_r433533304", "bodyText": "Fixing this uncovered other issues with correct shutdown. Fixed them as well.", "author": "tomas-langer", "createdAt": "2020-06-01T23:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2NzYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "25157d5bfd8940faa2762326947ca5d46b538a24", "chunk": "diff --git a/microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java b/microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java\nindex b12be1f89..8fc6d8e51 100644\n--- a/microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java\n+++ b/microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java\n\n@@ -228,29 +228,42 @@ public class ServerCdiExtension implements Extension {\n     }\n \n     private void stopServer(@Observes @Priority(PLATFORM_BEFORE) @BeforeDestroyed(ApplicationScoped.class) Object event) {\n-        boolean isRunning = IN_PROGRESS_OR_RUNNING.get();\n-        try {\n-            doStop(event);\n-        } finally {\n-            if (isRunning) {\n+        // we set running for a short duration of this call\n+        // in case somebody calls this method on a stopped server, and attempts to start another instance at exactly\n+        // the same time, they may get a parallel running exception - this is a case that does not make sense, so\n+        // as these are lifecycle methods of CDI, you would need to explicitly fire these events to achieve this\n+        boolean wasInProgress = IN_PROGRESS_OR_RUNNING.getAndSet(true);\n+\n+        if (started) {\n+            // we own the in progress marker\n+            try {\n+                doStop(event);\n+            } finally {\n+                IN_PROGRESS_OR_RUNNING.set(false);\n+            }\n+        } else {\n+            if (!wasInProgress) {\n+                // if it was not in progress, we need to set it back to that state\n                 IN_PROGRESS_OR_RUNNING.set(false);\n             }\n+            // otherwise it was in progress and we were not started, so this instance did not own\n+            // the progress\n         }\n     }\n \n     private void doStop(Object event) {\n-        if (null == webserver) {\n+        if (null == webserver || !started) {\n             // nothing to do\n             return;\n         }\n         long beforeT = System.nanoTime();\n \n-        System.out.println(\"Stopping WebServer for \" + event);\n         try {\n             webserver.shutdown()\n                     .toCompletableFuture()\n                     .get();\n \n+            started = false;\n             jerseySupports.forEach(JerseySupport::close);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.log(Level.SEVERE, \"Failed to stop web server\", e);\n"}}, {"oid": "25157d5bfd8940faa2762326947ca5d46b538a24", "url": "https://github.com/oracle/helidon/commit/25157d5bfd8940faa2762326947ca5d46b538a24", "message": "Making the shutdown/startup checking more robust.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-01T22:59:27Z", "type": "commit"}, {"oid": "3b1e39f5e21e3d822d2426d5bb963c816bfebebc", "url": "https://github.com/oracle/helidon/commit/3b1e39f5e21e3d822d2426d5bb963c816bfebebc", "message": "Making the shutdown/startup checking more robust 2.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-01T23:29:16Z", "type": "commit"}]}