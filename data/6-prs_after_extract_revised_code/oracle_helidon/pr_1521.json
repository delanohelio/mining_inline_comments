{"pr_number": 1521, "pr_title": "Openapi custom context root 2.x", "pr_createdAt": "2020-03-16T16:31:14Z", "pr_url": "https://github.com/oracle/helidon/pull/1521", "timeline": [{"oid": "1da61c7e3b5b05d4ef5c787af1a6622d72442e9d", "url": "https://github.com/oracle/helidon/commit/1da61c7e3b5b05d4ef5c787af1a6622d72442e9d", "message": "Support custom context root for OpenAPI endpoint in MP", "committedDate": "2020-03-16T15:50:13Z", "type": "commit"}, {"oid": "357a2588e053f2aa37aa30e6aa0b5b20a38f234f", "url": "https://github.com/oracle/helidon/commit/357a2588e053f2aa37aa30e6aa0b5b20a38f234f", "message": "Work around config collision that Tomas found", "committedDate": "2020-03-16T16:17:58Z", "type": "commit"}, {"oid": "65a3f468c172f04b46d9a3ddb01f39d03f8db2b8", "url": "https://github.com/oracle/helidon/commit/65a3f468c172f04b46d9a3ddb01f39d03f8db2b8", "message": "Copyrights", "committedDate": "2020-03-16T17:19:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMjYwOQ==", "url": "https://github.com/oracle/helidon/pull/1521#discussion_r393532609", "bodyText": "You should not use the  CONFIG_PREFIX - the config should be on the node of openapi. Microprofile component configuring this class should request that node before calling this method.\nThe method should be called config - that is the rule for any builder in any Helidon component.", "author": "tomas-langer", "createdAt": "2020-03-17T09:07:17Z", "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -620,6 +623,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@link OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "originalCommit": "65a3f468c172f04b46d9a3ddb01f39d03f8db2b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6e526c95cc41809ac51fd9becc02a450821266", "chunk": "diff --git a/openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java b/openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java\nindex 27127b9e7..524d2a7bf 100644\n--- a/openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java\n+++ b/openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java\n\n@@ -626,19 +629,18 @@ public class OpenAPISupport implements Service {\n         /**\n          * Set various builder attributes from the specified {@code Config} object.\n          * <p>\n-         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n-         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * The {@code Config} object can specify web-context and static-file in addition to settings\n          * supported by {@link OpenAPIConfigImpl.Builder}.\n          *\n-         * @param config the {@code Config} object possibly containing settings\n+         * @param config the openapi {@code Config} object possibly containing settings\n          * @exception NullPointerException if the provided {@code Config} is null\n          * @return updated builder instance\n          */\n-        public Builder helidonConfig(Config config) {\n-            config.get(CONFIG_PREFIX + \".web-context\")\n+        public Builder config(Config config) {\n+            config.get(\"web-context\")\n                     .asString()\n                     .ifPresent(this::webContext);\n-            config.get(CONFIG_PREFIX + \".static-file\")\n+            config.get(\"static-file\")\n                     .asString()\n                     .ifPresent(this::staticFile);\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMjkyNw==", "url": "https://github.com/oracle/helidon/pull/1521#discussion_r393532927", "bodyText": "Method should be called config", "author": "tomas-langer", "createdAt": "2020-03-17T09:07:55Z", "path": "openapi/src/main/java/io/helidon/openapi/SEOpenAPISupportBuilder.java", "diffHunk": "@@ -49,8 +48,7 @@\n      * @return updated builder instance\n      */\n     public SEOpenAPISupportBuilder helidonConfig(Config config) {\n-        config.get(CONFIG_PREFIX + \".web-context\").asString().ifPresent(this::webContext);\n-        config.get(CONFIG_PREFIX + \".static-file\").asString().ifPresent(this::staticFile);\n+        super.helidonConfig(config);", "originalCommit": "65a3f468c172f04b46d9a3ddb01f39d03f8db2b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec6e526c95cc41809ac51fd9becc02a450821266", "chunk": "diff --git a/openapi/src/main/java/io/helidon/openapi/SEOpenAPISupportBuilder.java b/openapi/src/main/java/io/helidon/openapi/SEOpenAPISupportBuilder.java\nindex 688f6543e..0b2233120 100644\n--- a/openapi/src/main/java/io/helidon/openapi/SEOpenAPISupportBuilder.java\n+++ b/openapi/src/main/java/io/helidon/openapi/SEOpenAPISupportBuilder.java\n\n@@ -37,18 +37,17 @@ public final class SEOpenAPISupportBuilder extends OpenAPISupport.Builder {\n     private final OpenAPIConfigImpl.Builder apiConfigBuilder = OpenAPIConfigImpl.builder();\n \n     /**\n-     * Set various builder attributes from the specified {@code Config} object.\n+     * Set various builder attributes from the specified openapi {@code Config} object.\n      * <p>\n-     * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n-     * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+     * The {@code Config} object can specify web-context and static-file in addition to settings\n      * supported by {@link OpenAPIConfigImpl.Builder}.\n      *\n-     * @param config the {@code Config} object possibly containing settings\n+     * @param config the OpenAPI {@code Config} object possibly containing settings\n      * @exception NullPointerException if the provided {@code Config} is null\n      * @return updated builder instance\n      */\n-    public SEOpenAPISupportBuilder helidonConfig(Config config) {\n-        super.helidonConfig(config);\n+    public SEOpenAPISupportBuilder config(Config config) {\n+        super.config(config);\n         apiConfigBuilder.config(config);\n         return this;\n     }\n"}}, {"oid": "ec6e526c95cc41809ac51fd9becc02a450821266", "url": "https://github.com/oracle/helidon/commit/ec6e526c95cc41809ac51fd9becc02a450821266", "message": "Review comments: change method name from helidonConfig -> config, and accept not the top-level config node but the openapi one", "committedDate": "2020-03-17T14:27:29Z", "type": "commit"}, {"oid": "0ed8342d56f9897999f220c61b3a9032077b4f73", "url": "https://github.com/oracle/helidon/commit/0ed8342d56f9897999f220c61b3a9032077b4f73", "message": "Fix example so it now passes the openapi config node, not the top-level, to OpenAPISupport.create", "committedDate": "2020-03-17T16:28:22Z", "type": "commit"}]}