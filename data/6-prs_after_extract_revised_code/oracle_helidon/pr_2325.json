{"pr_number": 2325, "pr_title": "Use CDI to instantiate Application classes to invoke getClasses", "pr_createdAt": "2020-09-03T22:55:57Z", "pr_url": "https://github.com/oracle/helidon/pull/2325", "timeline": [{"oid": "3b92c307ca08eac1b4b461bfff7ea23a160e0170", "url": "https://github.com/oracle/helidon/commit/3b92c307ca08eac1b4b461bfff7ea23a160e0170", "message": "Use CDI (instead of simple instantiation) to instantiate and inject Application instances during OpenAPI processing\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-09-03T22:47:12Z", "type": "commit"}, {"oid": "08a4c740f7ccb74a8bbda44c884343753317ebd0", "url": "https://github.com/oracle/helidon/commit/08a4c740f7ccb74a8bbda44c884343753317ebd0", "message": "Remove unused import", "committedDate": "2020-09-03T22:50:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzMwOQ==", "url": "https://github.com/oracle/helidon/pull/2325#discussion_r483297309", "bodyText": "Since disposal will do nothing, this is probably OK, but it looks weird.  I wonder if you can move this Unmanaged stuff elsewhere, like where you call something like getClasses() on the Application instance, and do the disposal afterwards.  Like up around line 123 or so for example.", "author": "ljnelson", "createdAt": "2020-09-03T23:01:45Z", "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -172,14 +172,11 @@ MPOpenAPIBuilder config(Config mpConfig) {\n     }\n \n     private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n-        try {\n-            return Optional.of(appClass.getConstructor().newInstance());\n-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n-            throw new RuntimeException(e);\n-        } catch (NoSuchMethodException e) {\n-            // Wrapper app does not have a no-args constructor so we canont instantiate it.\n-            return Optional.empty();\n-        }\n+        Unmanaged<? extends Application> unmanagedApp = new Unmanaged<>(appClass);\n+        Unmanaged.UnmanagedInstance<? extends Application> unmanagedInstance = unmanagedApp.newInstance();\n+        Application app = unmanagedInstance.produce().inject().postConstruct().get();\n+        unmanagedInstance.preDestroy().dispose();\n+        return Optional.of(app);", "originalCommit": "08a4c740f7ccb74a8bbda44c884343753317ebd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjIxNw==", "url": "https://github.com/oracle/helidon/pull/2325#discussion_r483312217", "bodyText": "It sounds as if your concern is that the use of the instance (the app) outlives the unmanagedInstance that gave rise to it.\nI see how that does look a bit odd. But the app instance also outlives the code around line 123 and in fact is used not only in the same MPOpenAPIBuilder but also in a separate class OpenApiCdiExtension.\nI'll take a look at refactoring things to address that admittedly odd-looking code without altering too much the way the consuming code operates. Thanks for the catch.", "author": "tjquinno", "createdAt": "2020-09-03T23:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjg4Nw==", "url": "https://github.com/oracle/helidon/pull/2325#discussion_r483312887", "bodyText": "Yeah, the main problem is that dependent objects that may get injected into the Application instance (and of course it's user-supplied so you don't have any control over it) may get flushed/released/disposed when that dispose() call is made.  So you don't want them to go away obviously while the Application instance is in use somewhere.", "author": "ljnelson", "createdAt": "2020-09-03T23:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzcwODQ0Ng==", "url": "https://github.com/oracle/helidon/pull/2325#discussion_r483708446", "bodyText": "The latest push rearranges the code so it uses any unmanaged instance as much as needed, and only then disposes of it.", "author": "tjquinno", "createdAt": "2020-09-04T15:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "57a4e022cc4b0b39c754320389392bf1aceb33a0", "chunk": "diff --git a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\nindex 22021cc2c..396d9b875 100644\n--- a/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n+++ b/microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java\n\n@@ -171,14 +205,6 @@ public final class MPOpenAPIBuilder extends OpenAPISupport.Builder {\n         return this;\n     }\n \n-    private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n-        Unmanaged<? extends Application> unmanagedApp = new Unmanaged<>(appClass);\n-        Unmanaged.UnmanagedInstance<? extends Application> unmanagedInstance = unmanagedApp.newInstance();\n-        Application app = unmanagedInstance.produce().inject().postConstruct().get();\n-        unmanagedInstance.preDestroy().dispose();\n-        return Optional.of(app);\n-    }\n-\n     /**\n      * Sets the IndexView instance to be passed to the smallrye OpenApi impl for\n      * annotation analysis.\n"}}, {"oid": "57a4e022cc4b0b39c754320389392bf1aceb33a0", "url": "https://github.com/oracle/helidon/commit/57a4e022cc4b0b39c754320389392bf1aceb33a0", "message": "Rearrange some code so, when we use Unmanaged to instantiate the Application class, we use the instance as much as we need and then dispose of it", "committedDate": "2020-09-04T15:49:43Z", "type": "commit"}]}