{"pr_number": 2605, "pr_title": "2592 Chunk leak", "pr_createdAt": "2020-12-14T17:49:58Z", "pr_url": "https://github.com/oracle/helidon/pull/2605", "timeline": [{"oid": "6ebcde3ac8b5716fe3ffed636e1e20956ce1ca7e", "url": "https://github.com/oracle/helidon/commit/6ebcde3ac8b5716fe3ffed636e1e20956ce1ca7e", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:53:56Z", "type": "forcePushed"}, {"oid": "3d664f9abbe340ac2579dd50f584692677480f46", "url": "https://github.com/oracle/helidon/commit/3d664f9abbe340ac2579dd50f584692677480f46", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:55:58Z", "type": "forcePushed"}, {"oid": "df964749fdcce895d3e5b41af45d413c7e485f49", "url": "https://github.com/oracle/helidon/commit/df964749fdcce895d3e5b41af45d413c7e485f49", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:58:20Z", "type": "commit"}, {"oid": "3a1de02f1ccba52cd9a7d5b2eada995ddbea956b", "url": "https://github.com/oracle/helidon/commit/3a1de02f1ccba52cd9a7d5b2eada995ddbea956b", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:58:30Z", "type": "forcePushed"}, {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f", "url": "https://github.com/oracle/helidon/commit/4b6a8047885b3edf8fb40c56ab82508e276ffb3f", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:59:29Z", "type": "commit"}, {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f", "url": "https://github.com/oracle/helidon/commit/4b6a8047885b3edf8fb40c56ab82508e276ffb3f", "message": "Request chunks release fix #2592\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T17:59:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542594827", "bodyText": "\"ByteBuf.release() was not called before it was garbage collected\"", "author": "ljnelson", "createdAt": "2020-12-14T18:05:46Z", "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "originalCommit": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgwOTAzNA==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542809034", "bodyText": "This is an assertion for a log message emitted by Netty, see https://github.com/netty/netty/blob/44f85bba5f47df885dbbe5243d008220bfbab5ca/common/src/main/java/io/netty/util/ResourceLeakDetector.java#L320", "author": "romain-grecourt", "createdAt": "2020-12-14T21:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NTY2OA==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542845668", "bodyText": "Oh! I see; @danielkec I suppose you should revert the change then.", "author": "ljnelson", "createdAt": "2020-12-14T22:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDkyOA==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543304928", "bodyText": "Need for better commentary empirically verified \ud83d\ude04", "author": "danielkec", "createdAt": "2020-12-15T12:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNDUwMw==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543324503", "bodyText": "Added better description, the test is more complicated than I would like it to be, I just didn't found any nicer way to do it without heavy mocking.", "author": "danielkec", "createdAt": "2020-12-15T13:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "cce629566212838e6ee50562e155c41ba30eb6d3", "chunk": "diff --git a/webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java b/webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java\nindex 0c07ab6ad..5ce4f0cc1 100644\n--- a/webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java\n+++ b/webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java\n\n@@ -54,11 +54,13 @@ public class DataChunkReleaseTest {\n     private static final Handler testHandler = new Handler() {\n         @Override\n         public void publish(final LogRecord record) {\n+            // look for ByteBufRequestChunk's leak detection records\n             if (record.getLevel() == Level.WARNING &&\n                     record.getMessage()\n                             .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n                 leakIntercepted = true;\n             }\n+            // look for Netty ResourceLeakDetector's records\n             if (record.getLevel() == Level.SEVERE &&\n                     record.getMessage()\n                             .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {\n"}}, {"oid": "5f0810e22f88f097229a34ca02e45a5a80cef5d2", "url": "https://github.com/oracle/helidon/commit/5f0810e22f88f097229a34ca02e45a5a80cef5d2", "message": "Checkstyle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-14T18:09:35Z", "type": "commit"}, {"oid": "cce629566212838e6ee50562e155c41ba30eb6d3", "url": "https://github.com/oracle/helidon/commit/cce629566212838e6ee50562e155c41ba30eb6d3", "message": "Second subscribe attempt\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-12-15T12:57:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NTkyMg==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543585922", "bodyText": "This one I assume needs to be the same as line 66?", "author": "ljnelson", "createdAt": "2020-12-15T18:30:55Z", "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            // look for ByteBufRequestChunk's leak detection records\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {", "originalCommit": "cce629566212838e6ee50562e155c41ba30eb6d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NDc2MA==", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r544194760", "bodyText": "No its different check and it has its own message, They just happens to have very similar but not exactly same messages. I am tracking both to be extra safe", "author": "danielkec", "createdAt": "2020-12-16T10:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NTkyMg=="}], "type": "inlineReview", "revised_code": null}]}