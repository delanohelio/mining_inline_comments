{"pr_number": 2507, "pr_title": "Add vetoed-bean support to metrics CDI extension", "pr_createdAt": "2020-11-05T19:35:02Z", "pr_url": "https://github.com/oracle/helidon/pull/2507", "timeline": [{"oid": "c51ff7f0efbd6306293c96463a9134718cca5f93", "url": "https://github.com/oracle/helidon/commit/c51ff7f0efbd6306293c96463a9134718cca5f93", "message": "Convert tests to use the new infrastructure\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-11-03T23:05:29Z", "type": "commit"}, {"oid": "3510d82e9d852c7edc939bd5a96ccfa4bab1ae41", "url": "https://github.com/oracle/helidon/commit/3510d82e9d852c7edc939bd5a96ccfa4bab1ae41", "message": "Remove unused imports", "committedDate": "2020-11-03T23:35:39Z", "type": "commit"}, {"oid": "44a71292a320e2caa54f247ca3f2931a2691a172", "url": "https://github.com/oracle/helidon/commit/44a71292a320e2caa54f247ca3f2931a2691a172", "message": "Fix scope of Helidon test JUnit5 artifact", "committedDate": "2020-11-04T13:42:50Z", "type": "commit"}, {"oid": "972d40fb18e55ec792e8e3f459271664010eb1d9", "url": "https://github.com/oracle/helidon/commit/972d40fb18e55ec792e8e3f459271664010eb1d9", "message": "Use ProcessManagedBean instead of ProcessAnnotatedType to actually define metrics", "committedDate": "2020-11-04T17:23:43Z", "type": "commit"}, {"oid": "d9e069bce7bf19fa6a8612cc2330423e82c569db", "url": "https://github.com/oracle/helidon/commit/d9e069bce7bf19fa6a8612cc2330423e82c569db", "message": "Convert tests to use the new infrastructure\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-11-05T18:46:15Z", "type": "commit"}, {"oid": "694d0fe0c46fb4c8da17d5a8a064ca6c7529e207", "url": "https://github.com/oracle/helidon/commit/694d0fe0c46fb4c8da17d5a8a064ca6c7529e207", "message": "Remove unused imports", "committedDate": "2020-11-05T18:46:16Z", "type": "commit"}, {"oid": "6798546e4e869d4c3e2d65de5d8fcfccd1587b8b", "url": "https://github.com/oracle/helidon/commit/6798546e4e869d4c3e2d65de5d8fcfccd1587b8b", "message": "Use ProcessManagedBean instead of ProcessAnnotatedType to actually define metrics", "committedDate": "2020-11-05T18:46:16Z", "type": "commit"}, {"oid": "5b25769eda5825e7b6104e375416b1bde4a3424b", "url": "https://github.com/oracle/helidon/commit/5b25769eda5825e7b6104e375416b1bde4a3424b", "message": "Concurrent changes", "committedDate": "2020-11-05T18:46:57Z", "type": "commit"}, {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "url": "https://github.com/oracle/helidon/commit/4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "message": "Report ignored (vetoed) classes, if any, at FINE level\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-11-05T19:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMjgyNw==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518322827", "bodyText": "Need to adjust this comment to match the code below it.", "author": "ljnelson", "createdAt": "2020-11-05T19:47:44Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -297,61 +310,124 @@ void before(@Observes BeforeBeanDiscovery discovery) {\n         discovery.addAnnotatedType(RestEndpointMetricsInfo.class, RestEndpointMetricsInfo.class.getSimpleName());\n     }\n \n+    private void clearAnnotationInfo(@Observes AfterDeploymentValidation adv) {\n+        if (LOGGER.isLoggable(Level.FINE)) {\n+            Set<Class<?>> metricsAnnotatedClassesIgnored = new HashSet<>(metricsAnnotatedClasses);\n+            metricsAnnotatedClassesIgnored.removeAll(metricsAnnotatedClassesProcessed);\n+            if (!metricsAnnotatedClassesIgnored.isEmpty()) {\n+                LOGGER.log(Level.FINE, () ->\n+                        \"Classes originally found with metrics annotations that were not processed (probably \"\n+                                + \"because they were vetoed:\" + metricsAnnotatedClassesIgnored.toString());\n+            }\n+        }\n+        metricsAnnotatedClasses.clear();\n+        metricsAnnotatedClassesProcessed.clear();\n+        methodsWithSyntheticSimplyTimer.clear();\n+    }\n+\n     /**\n-     * Observes sites annotated with the metrics annotations.\n+     * Records Java classes with a metrics annotation somewhere.\n+     *\n+     * By recording the classes here, we let CDI optimize its invocations of this observer method. Later, when we\n+     * observe managed beans (which CDI invokes for all managed beans) where we also have to examine each method and\n+     * constructor, we can quickly eliminate from consideration any classes we have not recorded here.\n      *\n-     * @param pat annotated type instance being processed\n+     * @param pat ProcessAnnotatedType event\n      */\n-    private void registerMetrics(@Observes @WithAnnotations({Counted.class, Metered.class, Timed.class,\n-                                                                    ConcurrentGauge.class, SimplyTimed.class})\n-                                         ProcessAnnotatedType<?> pat) {\n-        // Filter out interceptors\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n-        Interceptor annot = type.getAnnotation(Interceptor.class);\n-        if (annot != null) {\n-            return;\n-        }\n-\n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + pat.getAnnotatedType().getJavaClass().getName());\n+    private void recordMetricAnnotatedClass(@Observes\n+    @WithAnnotations({Counted.class, Metered.class, Timed.class, ConcurrentGauge.class,\n+            SimplyTimed.class}) ProcessAnnotatedType<?> pat) {\n+        checkAndRecordCandidateMetricClass(pat);\n+    }\n \n-        // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n+    /**\n+     * Checks to make sure the annotated type is not abstract and is not an interceptor.\n+     *\n+     * @param pat {@code ProcessAnnotatedType} event\n+     * @return true if the annotated type should be kept for potential processing later; false otherwise\n+     */\n+    private boolean checkCandidateMetricClass(ProcessAnnotatedType<?> pat) {\n+        AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n+        Class<?> clazz = annotatedType.getJavaClass();\n \n         // If abstract class, then handled by concrete subclasses", "originalCommit": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODQwMw==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518398403", "bodyText": "Done.", "author": "tjquinno", "createdAt": "2020-11-05T22:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMjgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "chunk": "diff --git a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\nindex 090d6e213..af57fc974 100644\n--- a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n+++ b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n\n@@ -350,7 +349,7 @@ public class MetricsCdiExtension implements Extension {\n         AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n         Class<?> clazz = annotatedType.getJavaClass();\n \n-        // If abstract class, then handled by concrete subclasses\n+        // Abstract classes are handled when we deal with a concrete subclass. Also, ignore if @Interceptor is present.\n         if (annotatedType.isAnnotationPresent(Interceptor.class)\n                 || Modifier.isAbstract(clazz.getModifiers())) {\n             LOGGER.log(Level.FINER, () -> \"Ignoring \" + clazz.getName()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMzE2NQ==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518323165", "bodyText": "Strictly speaking this is not reliable as other observers can add the @Interceptor annotation programmatically later.", "author": "ljnelson", "createdAt": "2020-11-05T19:48:28Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -297,61 +310,124 @@ void before(@Observes BeforeBeanDiscovery discovery) {\n         discovery.addAnnotatedType(RestEndpointMetricsInfo.class, RestEndpointMetricsInfo.class.getSimpleName());\n     }\n \n+    private void clearAnnotationInfo(@Observes AfterDeploymentValidation adv) {\n+        if (LOGGER.isLoggable(Level.FINE)) {\n+            Set<Class<?>> metricsAnnotatedClassesIgnored = new HashSet<>(metricsAnnotatedClasses);\n+            metricsAnnotatedClassesIgnored.removeAll(metricsAnnotatedClassesProcessed);\n+            if (!metricsAnnotatedClassesIgnored.isEmpty()) {\n+                LOGGER.log(Level.FINE, () ->\n+                        \"Classes originally found with metrics annotations that were not processed (probably \"\n+                                + \"because they were vetoed:\" + metricsAnnotatedClassesIgnored.toString());\n+            }\n+        }\n+        metricsAnnotatedClasses.clear();\n+        metricsAnnotatedClassesProcessed.clear();\n+        methodsWithSyntheticSimplyTimer.clear();\n+    }\n+\n     /**\n-     * Observes sites annotated with the metrics annotations.\n+     * Records Java classes with a metrics annotation somewhere.\n+     *\n+     * By recording the classes here, we let CDI optimize its invocations of this observer method. Later, when we\n+     * observe managed beans (which CDI invokes for all managed beans) where we also have to examine each method and\n+     * constructor, we can quickly eliminate from consideration any classes we have not recorded here.\n      *\n-     * @param pat annotated type instance being processed\n+     * @param pat ProcessAnnotatedType event\n      */\n-    private void registerMetrics(@Observes @WithAnnotations({Counted.class, Metered.class, Timed.class,\n-                                                                    ConcurrentGauge.class, SimplyTimed.class})\n-                                         ProcessAnnotatedType<?> pat) {\n-        // Filter out interceptors\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n-        Interceptor annot = type.getAnnotation(Interceptor.class);\n-        if (annot != null) {\n-            return;\n-        }\n-\n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + pat.getAnnotatedType().getJavaClass().getName());\n+    private void recordMetricAnnotatedClass(@Observes\n+    @WithAnnotations({Counted.class, Metered.class, Timed.class, ConcurrentGauge.class,\n+            SimplyTimed.class}) ProcessAnnotatedType<?> pat) {\n+        checkAndRecordCandidateMetricClass(pat);\n+    }\n \n-        // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n+    /**\n+     * Checks to make sure the annotated type is not abstract and is not an interceptor.\n+     *\n+     * @param pat {@code ProcessAnnotatedType} event\n+     * @return true if the annotated type should be kept for potential processing later; false otherwise\n+     */\n+    private boolean checkCandidateMetricClass(ProcessAnnotatedType<?> pat) {\n+        AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n+        Class<?> clazz = annotatedType.getJavaClass();\n \n         // If abstract class, then handled by concrete subclasses\n-        if (Modifier.isAbstract(clazz.getModifiers())) {\n+        if (annotatedType.isAnnotationPresent(Interceptor.class)", "originalCommit": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODY3Mg==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518398672", "bodyText": "I've left that but added a second check in the ProcessManagedBean observer, just in case.", "author": "tjquinno", "createdAt": "2020-11-05T22:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMzE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "chunk": "diff --git a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\nindex 090d6e213..af57fc974 100644\n--- a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n+++ b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n\n@@ -350,7 +349,7 @@ public class MetricsCdiExtension implements Extension {\n         AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n         Class<?> clazz = annotatedType.getJavaClass();\n \n-        // If abstract class, then handled by concrete subclasses\n+        // Abstract classes are handled when we deal with a concrete subclass. Also, ignore if @Interceptor is present.\n         if (annotatedType.isAnnotationPresent(Interceptor.class)\n                 || Modifier.isAbstract(clazz.getModifiers())) {\n             LOGGER.log(Level.FINER, () -> \"Ignoring \" + clazz.getName()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNDIzNw==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518324237", "bodyText": "Oh, interesting; I guess Jandex takes meta-annotations into account?", "author": "ljnelson", "createdAt": "2020-11-05T19:50:17Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -364,65 +440,55 @@ private void processInjectionPoints(@Observes ProcessInjectionPoint<?, ?> pip) {\n     }\n \n     /**\n-     * Records the need to add a {@code SyntheticSimplyTimed} annotation to each JAX-RS endpoint method.\n+     * Adds a {@code SyntheticSimplyTimed} annotation to each JAX-RS endpoint method.\n      *\n      * @param pat the {@code ProcessAnnotatedType} for the type containing the JAX-RS annotated methods\n      */\n     private void recordSimplyTimedForRestResources(@Observes\n-                                                   @WithAnnotations({GET.class, PUT.class, POST.class, HEAD.class, OPTIONS.class,\n-                                                                            DELETE.class, PATCH.class})\n+                                                   @WithAnnotations({HttpMethod.class})", "originalCommit": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODg1NA==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518398854", "bodyText": "I've switched back just in case there is some oddness that hasn't surfaced in the testing so far.", "author": "tjquinno", "createdAt": "2020-11-05T22:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "chunk": "diff --git a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\nindex 090d6e213..af57fc974 100644\n--- a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n+++ b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n\n@@ -445,7 +450,8 @@ public class MetricsCdiExtension implements Extension {\n      * @param pat the {@code ProcessAnnotatedType} for the type containing the JAX-RS annotated methods\n      */\n     private void recordSimplyTimedForRestResources(@Observes\n-                                                   @WithAnnotations({HttpMethod.class})\n+                                                   @WithAnnotations({GET.class, PUT.class, POST.class, HEAD.class, OPTIONS.class,\n+                                                           DELETE.class, PATCH.class})\n                                                            ProcessAnnotatedType<?> pat) {\n \n         /// Ignore abstract classes or interceptors. Make sure synthetic SimpleTimer creation is enabled, and if so record the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTMxNg==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518325316", "bodyText": "Better to use pmb.getBean().getScope() unless I'm missing something.", "author": "ljnelson", "createdAt": "2020-11-05T19:52:20Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -643,53 +726,51 @@ private static boolean chooseRestEndpointsSetting(Config metricsConfig) {\n         return MetricType.from(clazz == null ? metric.getClass() : clazz);\n     }\n \n-    private void recordAnnotatedGaugeSite(@Observes @WithAnnotations(Gauge.class) ProcessAnnotatedType<?> pat) {\n-        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + pat.getAnnotatedType().getJavaClass());\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n+    private void recordAnnotatedGaugeSite(@Observes ProcessManagedBean<?> pmb) {\n+        AnnotatedType<?> type = pmb.getAnnotatedBeanClass();\n+        Class<?> clazz = type.getJavaClass();\n \n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + type.getJavaClass().getName());\n+        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + clazz);\n+        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + clazz.getName());\n \n         // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n-\n         // If abstract class, then handled by concrete subclasses\n         if (Modifier.isAbstract(clazz.getModifiers())) {\n             return;\n         }\n \n-        Annotation annotation = type.getAnnotation(RequestScoped.class);\n-        if (annotation != null) {\n-            errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n-            return;\n-        }\n-\n-        if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n-            if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n-                LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n-                                       + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n-                                       + \" You may set 'metrics.warn-dependent' configuration option to 'false' to remove \"\n-                                       + \"this warning.\");\n+        // Process @Gauge methods keeping non-private declared on this class\n+        for (AnnotatedMethod method : type.getMethods()) {\n+            Method javaMethod = method.getJavaMember();\n+            if (!javaMethod.getDeclaringClass().equals(clazz)\n+                    || Modifier.isPrivate(javaMethod.getModifiers())\n+                    || !method.isAnnotationPresent(Gauge.class)) {\n+                continue;\n             }\n+            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);", "originalCommit": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODkzNw==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518398937", "bodyText": "Done.", "author": "tjquinno", "createdAt": "2020-11-05T22:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "chunk": "diff --git a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\nindex 090d6e213..af57fc974 100644\n--- a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n+++ b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n\n@@ -747,12 +753,12 @@ public class MetricsCdiExtension implements Extension {\n                     || !method.isAnnotationPresent(Gauge.class)) {\n                 continue;\n             }\n-            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);\n-            if (requestScopedAnnotation != null) {\n+            Class<? extends Annotation> scopeAnnotation = pmb.getBean().getScope();\n+            if (scopeAnnotation == RequestScoped.class) {\n                 errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n                 return;\n             }\n-            if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n+            if (scopeAnnotation != ApplicationScoped.class && type.getAnnotation(Singleton.class) == null) {\n                 if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n                     LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n                             + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTQzNg==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518325436", "bodyText": "See above", "author": "ljnelson", "createdAt": "2020-11-05T19:52:33Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -643,53 +726,51 @@ private static boolean chooseRestEndpointsSetting(Config metricsConfig) {\n         return MetricType.from(clazz == null ? metric.getClass() : clazz);\n     }\n \n-    private void recordAnnotatedGaugeSite(@Observes @WithAnnotations(Gauge.class) ProcessAnnotatedType<?> pat) {\n-        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + pat.getAnnotatedType().getJavaClass());\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n+    private void recordAnnotatedGaugeSite(@Observes ProcessManagedBean<?> pmb) {\n+        AnnotatedType<?> type = pmb.getAnnotatedBeanClass();\n+        Class<?> clazz = type.getJavaClass();\n \n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + type.getJavaClass().getName());\n+        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + clazz);\n+        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + clazz.getName());\n \n         // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n-\n         // If abstract class, then handled by concrete subclasses\n         if (Modifier.isAbstract(clazz.getModifiers())) {\n             return;\n         }\n \n-        Annotation annotation = type.getAnnotation(RequestScoped.class);\n-        if (annotation != null) {\n-            errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n-            return;\n-        }\n-\n-        if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n-            if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n-                LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n-                                       + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n-                                       + \" You may set 'metrics.warn-dependent' configuration option to 'false' to remove \"\n-                                       + \"this warning.\");\n+        // Process @Gauge methods keeping non-private declared on this class\n+        for (AnnotatedMethod method : type.getMethods()) {\n+            Method javaMethod = method.getJavaMember();\n+            if (!javaMethod.getDeclaringClass().equals(clazz)\n+                    || Modifier.isPrivate(javaMethod.getModifiers())\n+                    || !method.isAnnotationPresent(Gauge.class)) {\n+                continue;\n             }\n+            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);\n+            if (requestScopedAnnotation != null) {\n+                errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n+                return;\n+            }\n+            if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {", "originalCommit": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODk4MA==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518398980", "bodyText": "Done.", "author": "tjquinno", "createdAt": "2020-11-05T22:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "chunk": "diff --git a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\nindex 090d6e213..af57fc974 100644\n--- a/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n+++ b/microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java\n\n@@ -747,12 +753,12 @@ public class MetricsCdiExtension implements Extension {\n                     || !method.isAnnotationPresent(Gauge.class)) {\n                 continue;\n             }\n-            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);\n-            if (requestScopedAnnotation != null) {\n+            Class<? extends Annotation> scopeAnnotation = pmb.getBean().getScope();\n+            if (scopeAnnotation == RequestScoped.class) {\n                 errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n                 return;\n             }\n-            if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n+            if (scopeAnnotation != ApplicationScoped.class && type.getAnnotation(Singleton.class) == null) {\n                 if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n                     LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n                             + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n"}}, {"oid": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "url": "https://github.com/oracle/helidon/commit/0e6c27822da962c0b43bf60efe5340f6cda6891f", "message": "Adjustments due to review comments", "committedDate": "2020-11-05T22:05:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDkyOQ==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518400929", "bodyText": "(This is fine; when I commented on this previously, I didn't mean necessarily to remove the HttpMethod annotation and replace it with the list of options\u2014it was more just that I was surprised that a meta-annotation like that would be processed by @WithAnnotations.)", "author": "ljnelson", "createdAt": "2020-11-05T22:11:37Z", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -445,7 +450,8 @@ private void processInjectionPoints(@Observes ProcessInjectionPoint<?, ?> pip) {\n      * @param pat the {@code ProcessAnnotatedType} for the type containing the JAX-RS annotated methods\n      */\n     private void recordSimplyTimedForRestResources(@Observes\n-                                                   @WithAnnotations({HttpMethod.class})\n+                                                   @WithAnnotations({GET.class, PUT.class, POST.class, HEAD.class, OPTIONS.class,", "originalCommit": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMTgzMA==", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518401830", "bodyText": "Yeah, the original code had the list of individual annotations and that worked fine. I happened to see @HttpMethod in the def for Get (I think) and thought I'd try it and it seemed to work. But that is not related to the functional change at the heart of this PR so it's probably best to not make that change...at least now.", "author": "tjquinno", "createdAt": "2020-11-05T22:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDkyOQ=="}], "type": "inlineReview", "revised_code": null}]}