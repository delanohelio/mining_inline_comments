{"pr_number": 1861, "pr_title": "Service loader added to MediaContext", "pr_createdAt": "2020-05-25T11:24:56Z", "pr_url": "https://github.com/oracle/helidon/pull/1861", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzMyOQ==", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953329", "bodyText": "please do not use from classpath anywhere. Use from Java Service Loader", "author": "tomas-langer", "createdAt": "2020-05-25T14:06:07Z", "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.", "originalCommit": "2758f244d5c084313e2303fc72886ad75c458567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODUxMA==", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429958510", "bodyText": "updated", "author": "Verdent", "createdAt": "2020-05-25T14:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "chunk": "diff --git a/media/common/src/main/java/io/helidon/media/common/MediaContext.java b/media/common/src/main/java/io/helidon/media/common/MediaContext.java\nindex f3af6382f..a1a2899a3 100644\n--- a/media/common/src/main/java/io/helidon/media/common/MediaContext.java\n+++ b/media/common/src/main/java/io/helidon/media/common/MediaContext.java\n\n@@ -140,159 +132,116 @@ public final class MediaContext {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>register-defaults</td>\n-         *     <td>Whether to register default reader and writers</td>\n-         * </tr>\n-         * <tr>\n-         *     <td>discover-services</td>\n-         *     <td>Whether to discover services via service loader</td>\n-         * </tr>\n-         * <tr>\n-         *     <td>filter-services</td>\n-         *     <td>Whether to filter discovered services by service names in services section</td>\n+         *     <td>server-errors-include-stack-traces</td>\n+         *     <td>Whether stack traces should be included in the response (server only)</td>\n          * </tr>\n          * <tr>\n-         *     <td>services</td>\n-         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n-         *     It is also used for filtering of loaded services.</td>\n+         *     <td>register-defaults</td>\n+         *     <td>Whether to register default reader and writers</td>\n          * </tr>\n          * </table>\n-         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n+            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n-            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n-            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n-            config.get(\"services\")\n-                    .asNodeList()\n-                    .ifPresent(it -> it.forEach(serviceConfig -> {\n-                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n-                        servicesConfig.merge(name,\n-                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n-                                             (first, second) -> {\n-                                                 HashMap<String, String> result = new HashMap<>(first);\n-                                                 result.putAll(second);\n-                                                 return result;\n-                                             });\n-                    }));\n+            this.config = config;\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupports.add(mediaSupport);\n+            mediaSupport.register(readerContext, writerContext);\n             return this;\n         }\n \n-        /**\n-         * Adds new instance of {@link MediaSupport} with specific priority.\n-         *\n-         * @param mediaSupport media support\n-         * @param priority priority\n-         * @return updated instance of the builder\n-         */\n         public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n-            Objects.requireNonNull(mediaSupport);\n             services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            builderReaders.add(reader);\n+            readerContext.registerReader(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            builderStreamReaders.add(streamReader);\n+            readerContext.registerReader(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            builderWriters.add(writer);\n+            writerContext.registerWriter(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            builderStreamWriter.add(streamWriter);\n+            writerContext.registerWriter(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n-         *\n-         * @param registerDefaults register defaults\n+         * Register a new stream reader.\n+         * @param reader reader to register\n          * @return this builder instance\n          */\n-        public Builder registerDefaults(boolean registerDefaults) {\n-            this.registerDefaults = registerDefaults;\n+        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n+            readerContext.registerReader(reader);\n             return this;\n         }\n \n         /**\n-         * Whether stack traces should be included in response.\n-         *\n-         * This is server side setting.\n-         *\n-         * @param includeStackTraces include stack traces\n+         * Register a new stream writer.\n+         * @param writer writer to register\n          * @return this builder instance\n          */\n-        public Builder includeStackTraces(boolean includeStackTraces) {\n-            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n-                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n+        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n+            writerContext.registerWriter(writer);\n             return this;\n         }\n \n         /**\n-         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n+         * Whether defaults should be included.\n          *\n-         * @param discoverServices use system loader\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder discoverServices(boolean discoverServices) {\n-            this.discoverServices = discoverServices;\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Whether services loaded by system loader should be filtered.\n-         * All of the services which should pass the filter, have to be present under {@code services} section of configuration.\n+         * Whether stack traces should be included in response.\n          *\n-         * @param filterServices filter services\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder filterServices(boolean filterServices) {\n-            this.filterServices = filterServices;\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            this.includeStackTraces = includeStackTraces;\n             return this;\n         }\n \n         @Override\n         public MediaContext build() {\n-            //Remove all service names from the obtained service configurations\n-            servicesConfig.forEach((key, values) -> values.remove(SERVICE_NAME));\n-            if (filterServices) {\n-                this.services.useSystemServiceLoader(false);\n-                filterClassPath();\n-            } else {\n-                this.services.useSystemServiceLoader(discoverServices);\n-            }\n             if (registerDefaults) {\n-                this.services.addService(new DefaultsProvider(), DEFAULTS_PRIORITY);\n+                addMediaSupport(DefaultMediaSupport.create(includeStackTraces), DEFAULTS_PRIORITY);\n             }\n-            this.services.defaultPriority(LOADER_PRIORITY)\n+            services.useSystemServiceLoader(true)\n+                    .defaultPriority(LOADER_PRIORITY)\n                     .addService(config -> new MediaSupport() {\n                         @Override\n                         public void register(MessageBodyReaderContext readerContext, MessageBodyWriterContext writerContext) {\n                             builderReaders.forEach(readerContext::registerReader);\n-                            builderStreamReaders.forEach(readerContext::registerReader);\n                             builderWriters.forEach(writerContext::registerWriter);\n-                            builderStreamWriter.forEach(writerContext::registerWriter);\n                         }\n                     }, BUILDER_PRIORITY)\n                     .addService(config -> new MediaSupport() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzUyOQ==", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953529", "bodyText": "Similar - it is not \"system loader\", it is \"Java Service Loader\"", "author": "tomas-langer", "createdAt": "2020-05-25T14:06:31Z", "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n          *\n-         * @param registerDefaults register defaults\n+         * @param discoverServices use system loader", "originalCommit": "2758f244d5c084313e2303fc72886ad75c458567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODU2Nw==", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429958567", "bodyText": "updated", "author": "Verdent", "createdAt": "2020-05-25T14:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "chunk": "diff --git a/media/common/src/main/java/io/helidon/media/common/MediaContext.java b/media/common/src/main/java/io/helidon/media/common/MediaContext.java\nindex f3af6382f..a1a2899a3 100644\n--- a/media/common/src/main/java/io/helidon/media/common/MediaContext.java\n+++ b/media/common/src/main/java/io/helidon/media/common/MediaContext.java\n\n@@ -140,159 +132,116 @@ public final class MediaContext {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>register-defaults</td>\n-         *     <td>Whether to register default reader and writers</td>\n-         * </tr>\n-         * <tr>\n-         *     <td>discover-services</td>\n-         *     <td>Whether to discover services via service loader</td>\n-         * </tr>\n-         * <tr>\n-         *     <td>filter-services</td>\n-         *     <td>Whether to filter discovered services by service names in services section</td>\n+         *     <td>server-errors-include-stack-traces</td>\n+         *     <td>Whether stack traces should be included in the response (server only)</td>\n          * </tr>\n          * <tr>\n-         *     <td>services</td>\n-         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n-         *     It is also used for filtering of loaded services.</td>\n+         *     <td>register-defaults</td>\n+         *     <td>Whether to register default reader and writers</td>\n          * </tr>\n          * </table>\n-         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n+            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n-            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n-            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n-            config.get(\"services\")\n-                    .asNodeList()\n-                    .ifPresent(it -> it.forEach(serviceConfig -> {\n-                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n-                        servicesConfig.merge(name,\n-                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n-                                             (first, second) -> {\n-                                                 HashMap<String, String> result = new HashMap<>(first);\n-                                                 result.putAll(second);\n-                                                 return result;\n-                                             });\n-                    }));\n+            this.config = config;\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupports.add(mediaSupport);\n+            mediaSupport.register(readerContext, writerContext);\n             return this;\n         }\n \n-        /**\n-         * Adds new instance of {@link MediaSupport} with specific priority.\n-         *\n-         * @param mediaSupport media support\n-         * @param priority priority\n-         * @return updated instance of the builder\n-         */\n         public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n-            Objects.requireNonNull(mediaSupport);\n             services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            builderReaders.add(reader);\n+            readerContext.registerReader(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            builderStreamReaders.add(streamReader);\n+            readerContext.registerReader(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            builderWriters.add(writer);\n+            writerContext.registerWriter(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            builderStreamWriter.add(streamWriter);\n+            writerContext.registerWriter(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n-         *\n-         * @param registerDefaults register defaults\n+         * Register a new stream reader.\n+         * @param reader reader to register\n          * @return this builder instance\n          */\n-        public Builder registerDefaults(boolean registerDefaults) {\n-            this.registerDefaults = registerDefaults;\n+        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n+            readerContext.registerReader(reader);\n             return this;\n         }\n \n         /**\n-         * Whether stack traces should be included in response.\n-         *\n-         * This is server side setting.\n-         *\n-         * @param includeStackTraces include stack traces\n+         * Register a new stream writer.\n+         * @param writer writer to register\n          * @return this builder instance\n          */\n-        public Builder includeStackTraces(boolean includeStackTraces) {\n-            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n-                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n+        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n+            writerContext.registerWriter(writer);\n             return this;\n         }\n \n         /**\n-         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n+         * Whether defaults should be included.\n          *\n-         * @param discoverServices use system loader\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder discoverServices(boolean discoverServices) {\n-            this.discoverServices = discoverServices;\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Whether services loaded by system loader should be filtered.\n-         * All of the services which should pass the filter, have to be present under {@code services} section of configuration.\n+         * Whether stack traces should be included in response.\n          *\n-         * @param filterServices filter services\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder filterServices(boolean filterServices) {\n-            this.filterServices = filterServices;\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            this.includeStackTraces = includeStackTraces;\n             return this;\n         }\n \n         @Override\n         public MediaContext build() {\n-            //Remove all service names from the obtained service configurations\n-            servicesConfig.forEach((key, values) -> values.remove(SERVICE_NAME));\n-            if (filterServices) {\n-                this.services.useSystemServiceLoader(false);\n-                filterClassPath();\n-            } else {\n-                this.services.useSystemServiceLoader(discoverServices);\n-            }\n             if (registerDefaults) {\n-                this.services.addService(new DefaultsProvider(), DEFAULTS_PRIORITY);\n+                addMediaSupport(DefaultMediaSupport.create(includeStackTraces), DEFAULTS_PRIORITY);\n             }\n-            this.services.defaultPriority(LOADER_PRIORITY)\n+            services.useSystemServiceLoader(true)\n+                    .defaultPriority(LOADER_PRIORITY)\n                     .addService(config -> new MediaSupport() {\n                         @Override\n                         public void register(MessageBodyReaderContext readerContext, MessageBodyWriterContext writerContext) {\n                             builderReaders.forEach(readerContext::registerReader);\n-                            builderStreamReaders.forEach(readerContext::registerReader);\n                             builderWriters.forEach(writerContext::registerWriter);\n-                            builderStreamWriter.forEach(writerContext::registerWriter);\n                         }\n                     }, BUILDER_PRIORITY)\n                     .addService(config -> new MediaSupport() {\n"}}, {"oid": "cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "url": "https://github.com/oracle/helidon/commit/cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "message": "merge finished\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T08:59:14Z", "type": "commit"}, {"oid": "36ac50b6c375c6ee63840ba8876e42b9bede6483", "url": "https://github.com/oracle/helidon/commit/36ac50b6c375c6ee63840ba8876e42b9bede6483", "message": "Media support now loadable via class loader\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:09Z", "type": "commit"}, {"oid": "394c232e69abf23f8b29a951480d5c6359859341", "url": "https://github.com/oracle/helidon/commit/394c232e69abf23f8b29a951480d5c6359859341", "message": "checkstyle fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:10Z", "type": "commit"}, {"oid": "618624f2486d436487aa1775d115586f2b4258f3", "url": "https://github.com/oracle/helidon/commit/618624f2486d436487aa1775d115586f2b4258f3", "message": "minor changes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:11Z", "type": "commit"}, {"oid": "318d78c55f82a44f6c1c12cba87de6226361ea57", "url": "https://github.com/oracle/helidon/commit/318d78c55f82a44f6c1c12cba87de6226361ea57", "message": "another javadoc fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:11Z", "type": "commit"}, {"oid": "34ce8ebf651115f4b603d13326d2c6d192711339", "url": "https://github.com/oracle/helidon/commit/34ce8ebf651115f4b603d13326d2c6d192711339", "message": "change\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:11Z", "type": "commit"}, {"oid": "2eafc9150fa1e177d108fa5657b9a57dfa7be607", "url": "https://github.com/oracle/helidon/commit/2eafc9150fa1e177d108fa5657b9a57dfa7be607", "message": "method name change\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:12Z", "type": "commit"}, {"oid": "f91cb21bb2dd3ac9f9983da4fcd23193cb1d6537", "url": "https://github.com/oracle/helidon/commit/f91cb21bb2dd3ac9f9983da4fcd23193cb1d6537", "message": "name reader changed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:12Z", "type": "commit"}, {"oid": "47907f7f573d8d57df2bc16072048dc9c1c42a1c", "url": "https://github.com/oracle/helidon/commit/47907f7f573d8d57df2bc16072048dc9c1c42a1c", "message": "config name updated\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:02:12Z", "type": "commit"}, {"oid": "31e9ed591de6f49793ccf50d14c0f1614d52b4e9", "url": "https://github.com/oracle/helidon/commit/31e9ed591de6f49793ccf50d14c0f1614d52b4e9", "message": "iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:03:15Z", "type": "commit"}, {"oid": "77487b41929e5285af4ec19399ca936b339dcf9d", "url": "https://github.com/oracle/helidon/commit/77487b41929e5285af4ec19399ca936b339dcf9d", "message": "MessageBodyOperators iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:03:16Z", "type": "commit"}, {"oid": "77487b41929e5285af4ec19399ca936b339dcf9d", "url": "https://github.com/oracle/helidon/commit/77487b41929e5285af4ec19399ca936b339dcf9d", "message": "MessageBodyOperators iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:03:16Z", "type": "forcePushed"}, {"oid": "edfb9a3bb5d24c8bb4ee9ec58cfc5752ded3223a", "url": "https://github.com/oracle/helidon/commit/edfb9a3bb5d24c8bb4ee9ec58cfc5752ded3223a", "message": "Multipart merge\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>", "committedDate": "2020-05-27T09:26:43Z", "type": "commit"}]}