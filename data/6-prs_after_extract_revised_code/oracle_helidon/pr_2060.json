{"pr_number": 2060, "pr_title": "SE Config can be created from MP Config ", "pr_createdAt": "2020-06-19T00:53:27Z", "pr_url": "https://github.com/oracle/helidon/pull/2060", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3MDM2MQ==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442670361", "bodyText": "Maybe we could add some disableMutableSources or something similar in the future", "author": "danielkec", "createdAt": "2020-06-19T07:11:11Z", "path": "config/config/src/main/java/io/helidon/config/BuilderImpl.java", "diffHunk": "@@ -605,6 +584,7 @@ private EmptyConfigHolder() {\n                 .disableSystemPropertiesSource()\n                 .disableParserServices()\n                 .disableFilterServices()\n+                .changesExecutor(command -> {})", "originalCommit": "968aa6d58241ed134975b23bfd72dcc82dbf31dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e23c4774f4f50fddf52ee63667a924cf8598329", "chunk": "diff --git a/config/config/src/main/java/io/helidon/config/BuilderImpl.java b/config/config/src/main/java/io/helidon/config/BuilderImpl.java\nindex cb50591d9..ad7007235 100644\n--- a/config/config/src/main/java/io/helidon/config/BuilderImpl.java\n+++ b/config/config/src/main/java/io/helidon/config/BuilderImpl.java\n\n@@ -584,7 +605,6 @@ class BuilderImpl implements Config.Builder {\n                 .disableSystemPropertiesSource()\n                 .disableParserServices()\n                 .disableFilterServices()\n-                .changesExecutor(command -> {})\n                 .build();\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDk4OA==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442680988", "bodyText": "Can we assert those resolved PATH values equals with System.getenv(\"PATH\")?", "author": "danielkec", "createdAt": "2020-06-19T07:35:17Z", "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);\n+\n+            io.helidon.config.Config helidonConfig = (io.helidon.config.Config) myConfig;\n+            // should work if we use it as SE as well\n+            helidonConfig.get(\"path\").asString().get();", "originalCommit": "968aa6d58241ed134975b23bfd72dcc82dbf31dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDc5Ng==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730796", "bodyText": "Using custom env var, validating content.", "author": "tomas-langer", "createdAt": "2020-06-19T09:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "chunk": "diff --git a/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java b/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\nindex e76208b68..bb173362a 100644\n--- a/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\n+++ b/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\n\n@@ -290,11 +290,13 @@ public class MpConfigTest {\n             Config myConfig = instance.getConfig(myCl);\n             // this must not throw an exception - path should be on any environment\n             // and the MP env var processing should make it available\n-            String path = myConfig.getValue(\"path\", String.class);\n+            String fooBar = myConfig.getValue(\"foo.bar\", String.class);\n+            assertThat(fooBar, is(\"mapped-env-value\"));\n \n             io.helidon.config.Config helidonConfig = (io.helidon.config.Config) myConfig;\n             // should work if we use it as SE as well\n-            helidonConfig.get(\"path\").asString().get();\n+            fooBar = helidonConfig.get(\"foo.bar\").asString().get();\n+            assertThat(fooBar, is(\"mapped-env-value\"));\n         } finally {\n             instance.registerConfig(current, myCl);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442687556", "bodyText": "Failing on windows java.util.NoSuchElementException: Property \"path\" is not available in configuration", "author": "danielkec", "createdAt": "2020-06-19T07:48:58Z", "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);", "originalCommit": "968aa6d58241ed134975b23bfd72dcc82dbf31dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4OTk0Mw==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442689943", "bodyText": "Because its Path", "author": "danielkec", "createdAt": "2020-06-19T07:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDQxOA==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730418", "bodyText": "Using an env var configured in pom.xml now.", "author": "tomas-langer", "createdAt": "2020-06-19T09:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "chunk": "diff --git a/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java b/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\nindex e76208b68..bb173362a 100644\n--- a/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\n+++ b/config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java\n\n@@ -290,11 +290,13 @@ public class MpConfigTest {\n             Config myConfig = instance.getConfig(myCl);\n             // this must not throw an exception - path should be on any environment\n             // and the MP env var processing should make it available\n-            String path = myConfig.getValue(\"path\", String.class);\n+            String fooBar = myConfig.getValue(\"foo.bar\", String.class);\n+            assertThat(fooBar, is(\"mapped-env-value\"));\n \n             io.helidon.config.Config helidonConfig = (io.helidon.config.Config) myConfig;\n             // should work if we use it as SE as well\n-            helidonConfig.get(\"path\").asString().get();\n+            fooBar = helidonConfig.get(\"foo.bar\").asString().get();\n+            assertThat(fooBar, is(\"mapped-env-value\"));\n         } finally {\n             instance.registerConfig(current, myCl);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjM4MQ==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442712381", "bodyText": "io.helidon.config.mp.MpConfigProviderResolver#registerConfig has no defense against null and registered config is stored in io.helidon.config.mp.MpConfigProviderResolver#CONFIGS map with null key, but that Config is not acessible any more because getConfig has defense against null\n    public Config getConfig(ClassLoader loader) {\n        if (null == loader) {\n            loader = ClassLoader.getSystemClassLoader();\n        }", "author": "danielkec", "createdAt": "2020-06-19T08:39:25Z", "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java", "diffHunk": "@@ -76,6 +132,38 @@ void customValueOverride() {\n         assertThat(c.getValue(TEST_KEY, String.class), is(TEST_TOPIC_CUSTOM));\n     }\n \n+    @Test\n+    void putAllTestMp() {\n+        Map<String, String> propMap = Map.of(\n+                \"mp.messaging.outcoming.test-channel.\" + TEST_KEY, TEST_TOPIC_CONFIG\n+        );\n+\n+        Map<String, String> propMap2 = Map.of(\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_1, ADDITION_ATTR_1_VALUE,\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_2, ADDITION_ATTR_2_VALUE\n+        );\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap))\n+                                        .build(), null);\n+\n+        Config config = (Config) resolver.getConfig();\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap2))\n+                                        .build(), null);", "originalCommit": "968aa6d58241ed134975b23bfd72dcc82dbf31dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDY0MA==", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730640", "bodyText": "Fixed all instances to work the same - if loader is null, use context class loader.", "author": "tomas-langer", "createdAt": "2020-06-19T09:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "chunk": "diff --git a/microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java b/microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java\nindex dca68aa19..8df9dca43 100644\n--- a/microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java\n+++ b/microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java\n\n@@ -145,15 +145,15 @@ class AdHocConfigBuilderTest {\n \n         resolver.registerConfig(resolver.getBuilder()\n                                         .withSources(MpConfigSources.create(propMap))\n-                                        .build(), null);\n+                                        .build(), cl);\n \n-        Config config = (Config) resolver.getConfig();\n+        Config config = (Config) resolver.getConfig(cl);\n \n         resolver.registerConfig(resolver.getBuilder()\n                                         .withSources(MpConfigSources.create(propMap2))\n-                                        .build(), null);\n+                                        .build(), cl);\n \n-        Config config2 = (Config) resolver.getConfig();\n+        Config config2 = (Config) resolver.getConfig(cl);\n \n         org.eclipse.microprofile.config.Config c = AdHocConfigBuilder\n                 .from(config.get(\"mp.messaging.outcoming.test-channel\"))\n"}}, {"oid": "7e23c4774f4f50fddf52ee63667a924cf8598329", "url": "https://github.com/oracle/helidon/commit/7e23c4774f4f50fddf52ee63667a924cf8598329", "message": "MP to SE config now works including environment variables.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "f0f4b762e1c1e8a2f8d3091714571d7e2e884372", "url": "https://github.com/oracle/helidon/commit/f0f4b762e1c1e8a2f8d3091714571d7e2e884372", "message": "Unused fields removed\nEmpty config now does not create an executor service.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "4694753afdcf5e98079760e9251e7a95611e36e0", "url": "https://github.com/oracle/helidon/commit/4694753afdcf5e98079760e9251e7a95611e36e0", "message": "Only mapper services enabled for mapper config.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "69a6198acb7f75a027334f3fc9e30ddb027760f7", "url": "https://github.com/oracle/helidon/commit/69a6198acb7f75a027334f3fc9e30ddb027760f7", "message": "Fix spotbugs error", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "d1ef6b050c556bb626493f65d6c1fbc08ff83128", "url": "https://github.com/oracle/helidon/commit/d1ef6b050c556bb626493f65d6c1fbc08ff83128", "message": "Fix imports", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "bec5ec6739b05a1f04a699b497e612998efd990a", "url": "https://github.com/oracle/helidon/commit/bec5ec6739b05a1f04a699b497e612998efd990a", "message": "Fix import", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "url": "https://github.com/oracle/helidon/commit/a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "message": "Using the same classloader when null is sent in MP config.\nAdded env var test.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T11:53:29Z", "type": "commit"}, {"oid": "a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "url": "https://github.com/oracle/helidon/commit/a5b20644f9c7fe17e3a5fa8b8906a8d42ba6034a", "message": "Using the same classloader when null is sent in MP config.\nAdded env var test.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T11:53:29Z", "type": "forcePushed"}, {"oid": "3cf55b91c963de7dabb45611c9ca004c5ea08b71", "url": "https://github.com/oracle/helidon/commit/3cf55b91c963de7dabb45611c9ca004c5ea08b71", "message": "Ensure the reference config uses its own configuration (intermitent failure fix)\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-19T13:05:18Z", "type": "commit"}]}