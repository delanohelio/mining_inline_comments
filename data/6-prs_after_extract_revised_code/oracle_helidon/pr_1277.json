{"pr_number": 1277, "pr_title": "gRPC minor enhancements", "pr_createdAt": "2020-01-08T14:04:03Z", "pr_url": "https://github.com/oracle/helidon/pull/1277", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4NTc4OA==", "url": "https://github.com/oracle/helidon/pull/1277#discussion_r365985788", "bodyText": "If this is optional, than you should return Optional<String> - Helidon APIs should not return (or accept) null.", "author": "tomas-langer", "createdAt": "2020-01-13T19:29:00Z", "path": "grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java", "diffHunk": "@@ -70,6 +78,33 @@ public int port() {\n         return port;\n     }\n \n+    /**\n+     * Get the optional target string to use to resolve channel addresses.\n+     *\n+     * @return the optional target string to use to resolve channel addresses\n+     */\n+    public String target() {", "originalCommit": "bb570ca0f9071709e10b93da693133399e2e665c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "chunk": "diff --git a/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java b/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\nindex a94add6f7..4c7ab9e42 100644\n--- a/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\n+++ b/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\n\n@@ -83,37 +85,43 @@ public class GrpcChannelDescriptor {\n      *\n      * @return the optional target string to use to resolve channel addresses\n      */\n-    public String target() {\n-        return target;\n+    public Optional<String> target() {\n+        return Optional.ofNullable(target);\n     }\n \n     /**\n      * Get the default load balancer policy to use.\n      *\n-     * @return the default load balancer policy to use\n+     * @return the optional default load balancer policy to use\n      */\n-    public String loadBalancerPolicy() {\n-        return loadBalancerPolicy;\n+    public Optional<String> loadBalancerPolicy() {\n+        return Optional.ofNullable(loadBalancerPolicy);\n     }\n \n     /**\n-     * Get the default load balancer policy to use.\n+     * Get the {@link NameResolver.Factory} to use.\n      *\n-     * @return the default load balancer policy to use\n+     * @return the optional {@link NameResolver.Factory} to use\n      */\n-    public NameResolver.Factory nameResolverFactory() {\n-        return nameResolver;\n+    public Optional<NameResolver.Factory> nameResolverFactory() {\n+        return Optional.ofNullable(nameResolver);\n     }\n \n     /**\n      * Get the {@link io.helidon.grpc.core.GrpcTlsDescriptor}. If this method returns null or\n      * if {@code tlsDescriptor.isEnabled()} is false, then no TLS will be used (and none of the other configuration\n      * values from {@code tlsDescriptor} will be used).\n+     * <p>\n+     * If the {@link GrpcTlsDescriptor} has been set but the value of {@link io.helidon.grpc.core.GrpcTlsDescriptor#isEnabled()}\n+     * returns {@code false} then an empty {@link Optional} will be returned.\n      *\n-     * @return the {@link io.helidon.grpc.core.GrpcTlsDescriptor} instance (or {@code null} if no configuration was specified)\n+     * @return the optional {@link io.helidon.grpc.core.GrpcTlsDescriptor}\n      */\n-    public GrpcTlsDescriptor tlsDescriptor() {\n-        return tlsDescriptor;\n+    public Optional<GrpcTlsDescriptor> tlsDescriptor() {\n+        if (tlsDescriptor != null && tlsDescriptor.isEnabled()) {\n+            return Optional.of(tlsDescriptor);\n+        }\n+        return Optional.empty();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4NzQ1OQ==", "url": "https://github.com/oracle/helidon/pull/1277#discussion_r365987459", "bodyText": "copy paste from loadBalancerPolicy", "author": "tomas-langer", "createdAt": "2020-01-13T19:32:16Z", "path": "grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java", "diffHunk": "@@ -70,6 +78,33 @@ public int port() {\n         return port;\n     }\n \n+    /**\n+     * Get the optional target string to use to resolve channel addresses.\n+     *\n+     * @return the optional target string to use to resolve channel addresses\n+     */\n+    public String target() {\n+        return target;\n+    }\n+\n+    /**\n+     * Get the default load balancer policy to use.\n+     *\n+     * @return the default load balancer policy to use\n+     */\n+    public String loadBalancerPolicy() {\n+        return loadBalancerPolicy;\n+    }\n+\n+    /**\n+     * Get the default load balancer policy to use.\n+     *\n+     * @return the default load balancer policy to use", "originalCommit": "bb570ca0f9071709e10b93da693133399e2e665c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "chunk": "diff --git a/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java b/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\nindex a94add6f7..4c7ab9e42 100644\n--- a/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\n+++ b/grpc/client/src/main/java/io/helidon/grpc/client/GrpcChannelDescriptor.java\n\n@@ -83,37 +85,43 @@ public class GrpcChannelDescriptor {\n      *\n      * @return the optional target string to use to resolve channel addresses\n      */\n-    public String target() {\n-        return target;\n+    public Optional<String> target() {\n+        return Optional.ofNullable(target);\n     }\n \n     /**\n      * Get the default load balancer policy to use.\n      *\n-     * @return the default load balancer policy to use\n+     * @return the optional default load balancer policy to use\n      */\n-    public String loadBalancerPolicy() {\n-        return loadBalancerPolicy;\n+    public Optional<String> loadBalancerPolicy() {\n+        return Optional.ofNullable(loadBalancerPolicy);\n     }\n \n     /**\n-     * Get the default load balancer policy to use.\n+     * Get the {@link NameResolver.Factory} to use.\n      *\n-     * @return the default load balancer policy to use\n+     * @return the optional {@link NameResolver.Factory} to use\n      */\n-    public NameResolver.Factory nameResolverFactory() {\n-        return nameResolver;\n+    public Optional<NameResolver.Factory> nameResolverFactory() {\n+        return Optional.ofNullable(nameResolver);\n     }\n \n     /**\n      * Get the {@link io.helidon.grpc.core.GrpcTlsDescriptor}. If this method returns null or\n      * if {@code tlsDescriptor.isEnabled()} is false, then no TLS will be used (and none of the other configuration\n      * values from {@code tlsDescriptor} will be used).\n+     * <p>\n+     * If the {@link GrpcTlsDescriptor} has been set but the value of {@link io.helidon.grpc.core.GrpcTlsDescriptor#isEnabled()}\n+     * returns {@code false} then an empty {@link Optional} will be returned.\n      *\n-     * @return the {@link io.helidon.grpc.core.GrpcTlsDescriptor} instance (or {@code null} if no configuration was specified)\n+     * @return the optional {@link io.helidon.grpc.core.GrpcTlsDescriptor}\n      */\n-    public GrpcTlsDescriptor tlsDescriptor() {\n-        return tlsDescriptor;\n+    public Optional<GrpcTlsDescriptor> tlsDescriptor() {\n+        if (tlsDescriptor != null && tlsDescriptor.isEnabled()) {\n+            return Optional.of(tlsDescriptor);\n+        }\n+        return Optional.empty();\n     }\n \n     /**\n"}}, {"oid": "dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "url": "https://github.com/oracle/helidon/commit/dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "message": "Minor gRPC changes: The helidon-microprofile-grpc-metrics module dependency on helidon-microprofile-metrics should have a scope of provided. Allow a gRPC service descriptors to be created without needing a BeanManager. Support creating gRPC Channels configured for a target URI in addition to a host and port.", "committedDate": "2020-01-14T19:24:13Z", "type": "commit"}, {"oid": "dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "url": "https://github.com/oracle/helidon/commit/dfe62fe897f02104a5a8bbdd8edeebf12f64f1dd", "message": "Minor gRPC changes: The helidon-microprofile-grpc-metrics module dependency on helidon-microprofile-metrics should have a scope of provided. Allow a gRPC service descriptors to be created without needing a BeanManager. Support creating gRPC Channels configured for a target URI in addition to a host and port.", "committedDate": "2020-01-14T19:24:13Z", "type": "forcePushed"}]}