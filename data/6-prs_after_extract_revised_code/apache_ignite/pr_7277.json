{"pr_number": 7277, "pr_title": "IGNITE-12549 fix mapping queries on replication cache during rebalance", "pr_createdAt": "2020-01-21T11:26:21Z", "pr_url": "https://github.com/apache/ignite/pull/7277", "timeline": [{"oid": "f7b2bb5a0dc14ec78e2c016decef09f4c635a8fd", "url": "https://github.com/apache/ignite/commit/f7b2bb5a0dc14ec78e2c016decef09f4c635a8fd", "message": "IGNITE-12549 fix mapping queries on replication cache during rebalance", "committedDate": "2020-01-21T11:18:10Z", "type": "commit"}, {"oid": "f3e513013f4b8e3afd49e58e6adb88e6ab3c0e7c", "url": "https://github.com/apache/ignite/commit/f3e513013f4b8e3afd49e58e6adb88e6ab3c0e7c", "message": "IGNITE-12549 fix code style", "committedDate": "2020-01-21T11:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r369557244", "bodyText": "I worry about a case when there is no node OWNING all partitions (i.e. actually some partitions are lost). In a such case we will use all affinity nodes for a query execution. And duplicates seems possible. I suggest at least resort to any (single) affinity node in such case. And it looks like the previous behavior was the same.", "author": "pavlukhin", "createdAt": "2020-01-22T13:27:21Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +655,22 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode())\n+                if (cctx.affinityNode() && !cctx.topology().localPartitionMap().hasMovingPartitions())\n                     return Collections.singletonList(cctx.localNode());\n \n                 Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n-                return affNodes.isEmpty() ? affNodes : Collections.singletonList(F.rand(affNodes));\n+                List<ClusterNode> nodes = new ArrayList<>(affNodes);\n+\n+                Collections.shuffle(nodes);\n+\n+                for (ClusterNode node : nodes) {\n+                    if (!cctx.topology().partitions(node.id()).hasMovingPartitions()) {", "originalCommit": "f3e513013f4b8e3afd49e58e6adb88e6ab3c0e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3OTgyOA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r369579828", "bodyText": "Why do you think it will cause duplicates?\nI supposed if I return all affinity nodes it will try to use only primary partitions in this case, like if we worked with PARTITIONED cache, correct me if I'm wrong.", "author": "macrergate", "createdAt": "2020-01-22T14:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NzcwMA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r369597700", "bodyText": "I meant for each partition distributed query manager will choose only primary node for this partition, thus no duplicate results possible. Otherwise if I'll return one affinity node in such case, it certainly will lead to incomplete results. Do you agree?", "author": "macrergate", "createdAt": "2020-01-22T14:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAwMzg3Ng==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r370003876", "bodyText": "I can see from GridCacheQueryManager#scanIterator backup partitions will be always scanned for REPLICATED caches. And I still think that it should be evident from code that only one node is used for query execution against REPLICATED cache.", "author": "pavlukhin", "createdAt": "2020-01-23T09:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAwODgwMg==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r370008802", "bodyText": "Also I dug a little bit deeper and found some more problems.\nFirst, there is a race between getting nodes and inspecting partitions. Consequently cctx.topology().partitions(node.id()) can return null here. I suppose using single topology version here can help.\nSecond, LOST partitions are not handled properly. It is possible that hasMovingPartitions returns false when there are LOST partitions. Unpleasant, but in my mind can be fixed in a separate ticket about ScanQuery and LOST partitions.\nGood news here are that if there is no LOST partitions it seems there is an invariant for REPLICATED caches that on a specific topology version at least one node owns all partitions.", "author": "pavlukhin", "createdAt": "2020-01-23T09:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2NTQ0Mg==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r379365442", "bodyText": "Hi, Ivan. I agree LOST partitions case better to solve in another ticket.\nAbout the race - I did not realize how to use topology version here, but it looks like I solved the race with topology.readLock(), how do you like it?", "author": "macrergate", "createdAt": "2020-02-14T10:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU1NzI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "70a04c96259e7ace7df4a733daccc59353de67e4", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\nindex e12c7a875a..2ae5a42561 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n\n@@ -655,22 +656,30 @@ public class GridCacheQueryAdapter<T> implements CacheQuery<T> {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode() && !cctx.topology().localPartitionMap().hasMovingPartitions())\n-                    return Collections.singletonList(cctx.localNode());\n+                GridDhtPartitionTopology topology = cctx.topology();\n \n-                Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+                topology.readLock();\n \n-                List<ClusterNode> nodes = new ArrayList<>(affNodes);\n+                try {\n+                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                        return Collections.singletonList(cctx.localNode());\n+\n+                    Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+\n+                    List<ClusterNode> nodes = new ArrayList<>(affNodes);\n \n-                Collections.shuffle(nodes);\n+                    Collections.shuffle(nodes);\n \n-                for (ClusterNode node : nodes) {\n-                    if (!cctx.topology().partitions(node.id()).hasMovingPartitions()) {\n-                        return Collections.singletonList(node);\n+                    for (ClusterNode node : nodes) {\n+                        if (!topology.partitions(node.id()).hasMovingPartitions()) {\n+                            return Collections.singletonList(node);\n+                        }\n                     }\n-                }\n \n-                return affNodes;\n+                    return affNodes;\n+                } finally {\n+                    topology.readUnlock();\n+                }\n \n             case PARTITIONED:\n                 return nodes(cctx, prj, part);\n"}}, {"oid": "70a04c96259e7ace7df4a733daccc59353de67e4", "url": "https://github.com/apache/ignite/commit/70a04c96259e7ace7df4a733daccc59353de67e4", "message": "IGNITE-12549 fix race on topology", "committedDate": "2020-02-14T10:29:53Z", "type": "commit"}, {"oid": "6053a8b756d88af71cdab1ba40a1bec08345f4a8", "url": "https://github.com/apache/ignite/commit/6053a8b756d88af71cdab1ba40a1bec08345f4a8", "message": "Merge branch 'master' of https://github.com/apache/ignite into ignite-12549", "committedDate": "2020-02-14T10:31:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MDc3OA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r382670778", "bodyText": "Does the case with explicit partition work correctly after made changes? Previously we had a single node projection for REPLICATED caches, but now not.", "author": "pavlukhin", "createdAt": "2020-02-21T16:14:06Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +656,30 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);", "originalCommit": "6053a8b756d88af71cdab1ba40a1bec08345f4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwOTM0MQ==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r385209341", "bodyText": "I've added check for query by partition in the test. It works.", "author": "macrergate", "createdAt": "2020-02-27T16:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MDc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "504a35271d3fde6a98277a88a4c1cae3ba696f97", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\nindex 2ae5a42561..ee43a609da 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n\n@@ -658,11 +658,12 @@ public class GridCacheQueryAdapter<T> implements CacheQuery<T> {\n \n                 GridDhtPartitionTopology topology = cctx.topology();\n \n+                if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                    return Collections.singletonList(cctx.localNode());\n+\n                 topology.readLock();\n \n                 try {\n-                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n-                        return Collections.singletonList(cctx.localNode());\n \n                     Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MTg2OA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r382671868", "bodyText": "I suppose we can evaluate this branch without holding a topology read lock, cannot we?", "author": "pavlukhin", "createdAt": "2020-02-21T16:16:02Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +656,30 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode())\n-                    return Collections.singletonList(cctx.localNode());\n+                GridDhtPartitionTopology topology = cctx.topology();\n \n-                Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+                topology.readLock();\n \n-                return affNodes.isEmpty() ? affNodes : Collections.singletonList(F.rand(affNodes));\n+                try {\n+                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())", "originalCommit": "6053a8b756d88af71cdab1ba40a1bec08345f4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5Mzc1NA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r385193754", "bodyText": "Agree, done.", "author": "macrergate", "createdAt": "2020-02-27T15:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MTg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "504a35271d3fde6a98277a88a4c1cae3ba696f97", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\nindex 2ae5a42561..ee43a609da 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n\n@@ -658,11 +658,12 @@ public class GridCacheQueryAdapter<T> implements CacheQuery<T> {\n \n                 GridDhtPartitionTopology topology = cctx.topology();\n \n+                if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                    return Collections.singletonList(cctx.localNode());\n+\n                 topology.readLock();\n \n                 try {\n-                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n-                        return Collections.singletonList(cctx.localNode());\n \n                     Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MjgxMw==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r382672813", "bodyText": "Code style: no curly braces for single-line if statements.", "author": "pavlukhin", "createdAt": "2020-02-21T16:17:45Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +656,30 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode())\n-                    return Collections.singletonList(cctx.localNode());\n+                GridDhtPartitionTopology topology = cctx.topology();\n \n-                Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+                topology.readLock();\n \n-                return affNodes.isEmpty() ? affNodes : Collections.singletonList(F.rand(affNodes));\n+                try {\n+                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                        return Collections.singletonList(cctx.localNode());\n+\n+                    Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+\n+                    List<ClusterNode> nodes = new ArrayList<>(affNodes);\n+\n+                    Collections.shuffle(nodes);\n+\n+                    for (ClusterNode node : nodes) {\n+                        if (!topology.partitions(node.id()).hasMovingPartitions()) {", "originalCommit": "6053a8b756d88af71cdab1ba40a1bec08345f4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5Mzg5NQ==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r385193895", "bodyText": "Done.", "author": "macrergate", "createdAt": "2020-02-27T15:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MjgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "504a35271d3fde6a98277a88a4c1cae3ba696f97", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\nindex 2ae5a42561..ee43a609da 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n\n@@ -658,11 +658,12 @@ public class GridCacheQueryAdapter<T> implements CacheQuery<T> {\n \n                 GridDhtPartitionTopology topology = cctx.topology();\n \n+                if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                    return Collections.singletonList(cctx.localNode());\n+\n                 topology.readLock();\n \n                 try {\n-                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n-                        return Collections.singletonList(cctx.localNode());\n \n                     Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MzAzNg==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r382673036", "bodyText": "Code style: finally should go from a new line.", "author": "pavlukhin", "createdAt": "2020-02-21T16:18:11Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +656,30 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode())\n-                    return Collections.singletonList(cctx.localNode());\n+                GridDhtPartitionTopology topology = cctx.topology();\n \n-                Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+                topology.readLock();\n \n-                return affNodes.isEmpty() ? affNodes : Collections.singletonList(F.rand(affNodes));\n+                try {\n+                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                        return Collections.singletonList(cctx.localNode());\n+\n+                    Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n+\n+                    List<ClusterNode> nodes = new ArrayList<>(affNodes);\n+\n+                    Collections.shuffle(nodes);\n+\n+                    for (ClusterNode node : nodes) {\n+                        if (!topology.partitions(node.id()).hasMovingPartitions()) {\n+                            return Collections.singletonList(node);\n+                        }\n+                    }\n+\n+                    return affNodes;\n+                } finally {", "originalCommit": "6053a8b756d88af71cdab1ba40a1bec08345f4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE5NDEzNA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r385194134", "bodyText": "Done.", "author": "macrergate", "createdAt": "2020-02-27T15:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MzAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "504a35271d3fde6a98277a88a4c1cae3ba696f97", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\nindex 2ae5a42561..ee43a609da 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java\n\n@@ -658,11 +658,12 @@ public class GridCacheQueryAdapter<T> implements CacheQuery<T> {\n \n                 GridDhtPartitionTopology topology = cctx.topology();\n \n+                if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n+                    return Collections.singletonList(cctx.localNode());\n+\n                 topology.readLock();\n \n                 try {\n-                    if (cctx.affinityNode() && !topology.localPartitionMap().hasMovingPartitions())\n-                        return Collections.singletonList(cctx.localNode());\n \n                     Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n"}}, {"oid": "3b17f9024b434eac7bd3d9ad1d0da2351f590cc3", "url": "https://github.com/apache/ignite/commit/3b17f9024b434eac7bd3d9ad1d0da2351f590cc3", "message": "Merge branch 'master' of https://github.com/apache/ignite into ignite-12549", "committedDate": "2020-02-27T15:49:56Z", "type": "commit"}, {"oid": "504a35271d3fde6a98277a88a4c1cae3ba696f97", "url": "https://github.com/apache/ignite/commit/504a35271d3fde6a98277a88a4c1cae3ba696f97", "message": "IGNITE-12549 fixed codestyle, added test for scan query by partition", "committedDate": "2020-02-27T16:01:31Z", "type": "commit"}, {"oid": "c9fda76ed422f20ecd020ba70a464cb6b765b42c", "url": "https://github.com/apache/ignite/commit/c9fda76ed422f20ecd020ba70a464cb6b765b42c", "message": "IGNITE-12549 removed wrong changes(another issue)", "committedDate": "2020-02-27T16:06:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r459864407", "bodyText": "!cctx.topology().partitions(node.id()).hasMovingPartitions() is throwing Nullpointer exception at runtime for non-pationed Cache and the Cluster starts without any Cache and then Cline Node join and populate the Cache. cctx.topology().partitions(node.id()) is returning null", "author": "sumanentc", "createdAt": "2020-07-24T05:55:15Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java", "diffHunk": "@@ -654,12 +655,22 @@ private boolean isSafeLossPolicy() {\n                 if (prj != null || part != null)\n                     return nodes(cctx, prj, part);\n \n-                if (cctx.affinityNode())\n+                if (cctx.affinityNode() && !cctx.topology().localPartitionMap().hasMovingPartitions())\n                     return Collections.singletonList(cctx.localNode());\n \n                 Collection<ClusterNode> affNodes = nodes(cctx, null, null);\n \n-                return affNodes.isEmpty() ? affNodes : Collections.singletonList(F.rand(affNodes));\n+                List<ClusterNode> nodes = new ArrayList<>(affNodes);\n+\n+                Collections.shuffle(nodes);\n+\n+                for (ClusterNode node : nodes) {\n+                    if (!cctx.topology().partitions(node.id()).hasMovingPartitions()) {", "originalCommit": "f3e513013f4b8e3afd49e58e6adb88e6ab3c0e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5MjgxOA==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r459892818", "bodyText": "Hi @sumanentc , do you encounter NullPointerException with running Ignite? Feel free to report an issue in https://issues.apache.org/jira/projects/IGNITE/issues", "author": "pavlukhin", "createdAt": "2020-07-24T07:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4MTg1OQ==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r463581859", "bodyText": "Yes , I get the issue when the client node tries to fetch the Cache data from the Cluster.", "author": "sumanentc", "createdAt": "2020-07-31T12:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5MzYwNg==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r463593606", "bodyText": "Still I suppose that reporting an issue in https://issues.apache.org/jira/projects/IGNITE/issues is a proper option. If you would like to contribute a fix it would be awesome. Unfortunately I will not have a time to fix this problem in near future, sorry for that.", "author": "pavlukhin", "createdAt": "2020-07-31T12:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2NjIwNQ==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r463966205", "bodyText": "raised ticket for the same: https://issues.apache.org/jira/browse/IGNITE-13317", "author": "sumanentc", "createdAt": "2020-08-01T14:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4NDA5Ng==", "url": "https://github.com/apache/ignite/pull/7277#discussion_r463984096", "bodyText": "Thank you!", "author": "pavlukhin", "createdAt": "2020-08-01T17:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDQwNw=="}], "type": "inlineReview", "revised_code": null}]}