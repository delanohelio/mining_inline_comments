{"pr_number": 7647, "pr_title": "IGNITE-12879 Refactors test configuration of discovery messages interceptors.", "pr_createdAt": "2020-04-09T09:05:47Z", "pr_url": "https://github.com/apache/ignite/pull/7647", "timeline": [{"oid": "5949c0fa49285b20de741043280ff2f46081ff69", "url": "https://github.com/apache/ignite/commit/5949c0fa49285b20de741043280ff2f46081ff69", "message": "IGNITE-12879 Refactors test configuration of discovery messages interception.", "committedDate": "2020-04-09T13:58:22Z", "type": "forcePushed"}, {"oid": "f342e41600f7e14ad94d502618013dc0c8f1d4b1", "url": "https://github.com/apache/ignite/commit/f342e41600f7e14ad94d502618013dc0c8f1d4b1", "message": "IGNITE-12879 Refactors test configuration of discovery messages interceptors.", "committedDate": "2020-04-09T14:16:10Z", "type": "commit"}, {"oid": "f342e41600f7e14ad94d502618013dc0c8f1d4b1", "url": "https://github.com/apache/ignite/commit/f342e41600f7e14ad94d502618013dc0c8f1d4b1", "message": "IGNITE-12879 Refactors test configuration of discovery messages interceptors.", "committedDate": "2020-04-09T14:16:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTM1OA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406285358", "bodyText": "Why array needed?", "author": "NSAmelchev", "createdAt": "2020-04-09T15:24:22Z", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +52,19 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoveryHooks == null ? lsnr : wrap(lsnr, discoveryHooks));\n+    }\n+\n+    /**\n+     * Sets interceptors of discovery messages.\n+     *\n+     * @param discoveryHooks Interceptors of discovery messages.\n+     */\n+    @SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\")\n+    public void discoveryHooks(DiscoveryHook... discoveryHooks) {", "originalCommit": "f342e41600f7e14ad94d502618013dc0c8f1d4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "334947ce74434f1501d8e95a4c4d5a723f6f35db", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\nindex 8e8385c32b..c40283bf15 100644\n--- a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n+++ b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n\n@@ -59,12 +60,15 @@ public class TestTcpDiscoverySpi extends TcpDiscoverySpi {\n     }\n \n     /**\n-     * Sets interceptors of discovery messages.\n+     * Sets interceptors of discovery messages. Note that {@link DiscoveryHook}s must be setted before\n+     * {@link GridDiscoveryManager} start. Otherwise, this method call will take no effect.\n      *\n      * @param discoveryHooks Interceptors of discovery messages.\n      */\n     @SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\")\n     public void discoveryHooks(DiscoveryHook... discoveryHooks) {\n+        assert lsnr == null;\n+\n         this.discoveryHooks = discoveryHooks;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NTAwNg==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406295006", "bodyText": "I think we should add javadoc and assert that hook should be set before Discovery started.", "author": "NSAmelchev", "createdAt": "2020-04-09T15:38:11Z", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +52,19 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoveryHooks == null ? lsnr : wrap(lsnr, discoveryHooks));\n+    }\n+\n+    /**\n+     * Sets interceptors of discovery messages.", "originalCommit": "f342e41600f7e14ad94d502618013dc0c8f1d4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "334947ce74434f1501d8e95a4c4d5a723f6f35db", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\nindex 8e8385c32b..c40283bf15 100644\n--- a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n+++ b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n\n@@ -59,12 +60,15 @@ public class TestTcpDiscoverySpi extends TcpDiscoverySpi {\n     }\n \n     /**\n-     * Sets interceptors of discovery messages.\n+     * Sets interceptors of discovery messages. Note that {@link DiscoveryHook}s must be setted before\n+     * {@link GridDiscoveryManager} start. Otherwise, this method call will take no effect.\n      *\n      * @param discoveryHooks Interceptors of discovery messages.\n      */\n     @SuppressWarnings(\"AssignmentOrReturnOfFieldWithMutableType\")\n     public void discoveryHooks(DiscoveryHook... discoveryHooks) {\n+        assert lsnr == null;\n+\n         this.discoveryHooks = discoveryHooks;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMzA0OQ==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406303049", "bodyText": "I think we should provide customMsg as argument  (or instead of DiscoverySpiCustomMessage msg) and do not duplicate:\nDiscoveryCustomMessage customMsg = msg == null ?\n    null : (DiscoveryCustomMessage)IgniteUtils.field(msg, \"delegate\");", "author": "NSAmelchev", "createdAt": "2020-04-09T15:50:03Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java", "diffHunk": "@@ -57,11 +55,26 @@\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n         IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n \n-        TestDiscoverySpi discoSpi = new TestDiscoverySpi();\n+        TestTcpDiscoverySpi discoSpi = (TestTcpDiscoverySpi)cfg.getDiscoverySpi();\n \n-        discoSpi.setIpFinder(IP_FINDER);\n+        DiscoveryHook discoveryHook = new DiscoveryHook() {\n+            @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n+                DiscoveryCustomMessage customMsg = msg == null ?", "originalCommit": "f342e41600f7e14ad94d502618013dc0c8f1d4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "334947ce74434f1501d8e95a4c4d5a723f6f35db", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java b/modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java\nindex 4de431b889..99dd4696c8 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/processors/continuous/IgniteContinuousQueryMetadataUpdateTest.java\n\n@@ -57,11 +56,8 @@ public class IgniteContinuousQueryMetadataUpdateTest extends GridCommonAbstractT\n \n         TestTcpDiscoverySpi discoSpi = (TestTcpDiscoverySpi)cfg.getDiscoverySpi();\n \n-        DiscoveryHook discoveryHook = new DiscoveryHook() {\n-            @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n-                DiscoveryCustomMessage customMsg = msg == null ?\n-                    null : (DiscoveryCustomMessage)IgniteUtils.field(msg, \"delegate\");\n-\n+        DiscoveryHook discoveryHook = new DiscoveryCustomMessageHook() {\n+            @Override public void beforeDiscovery(DiscoveryCustomMessage customMsg) {\n                 if (customMsg instanceof MetadataUpdateAcceptedMessage) {\n                     try {\n                         U.sleep(50);\n"}}, {"oid": "334947ce74434f1501d8e95a4c4d5a723f6f35db", "url": "https://github.com/apache/ignite/commit/334947ce74434f1501d8e95a4c4d5a723f6f35db", "message": "IGNITE-12879 Adds extended DiscoveryHook for custom discovery messages.", "committedDate": "2020-04-09T18:07:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMzM5MA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r406403390", "bodyText": "The afterDiscovery will be called not after discovery notifing listeners. delegate.onDiscovery is async.", "author": "NSAmelchev", "createdAt": "2020-04-09T18:41:25Z", "path": "modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java", "diffHunk": "@@ -164,32 +169,89 @@ public void ignite(IgniteEx ignite) {\n         }\n     }\n \n+    /**\n+     * Extended {@link DiscoveryHook} for {@link DiscoveryCustomMessage} interception.\n+     */\n+    public static class DiscoveryCustomMessageHook extends DiscoveryHook {\n+        /** {@inheritDoc} */\n+        @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n+            if (!(msg instanceof CustomMessageWrapper))\n+                return;\n+\n+            beforeDiscovery(unwrap((CustomMessageWrapper)msg));\n+        }\n+\n+        /**\n+         * Handles {@link DiscoveryCustomMessage}.\n+         *\n+         * @param customMsg Intercepted {@link DiscoveryCustomMessage}.\n+         */\n+        public void beforeDiscovery(DiscoveryCustomMessage customMsg) {\n+            // No-op.\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void afterDiscovery(DiscoverySpiCustomMessage msg) {\n+            if (!(msg instanceof CustomMessageWrapper))\n+                return;\n+\n+            afterDiscovery(unwrap((CustomMessageWrapper)msg));\n+        }\n+\n+        /**\n+         * Handles {@link DiscoveryCustomMessage}.\n+         *\n+         * @param customMsg Intercepted {@link DiscoveryCustomMessage}.\n+         */\n+        public void afterDiscovery(DiscoveryCustomMessage customMsg) {\n+            // No-op.\n+        }\n+\n+        /**\n+         * Obtains {@link DiscoveryCustomMessage} from {@link CustomMessageWrapper}.\n+         *\n+         * @param wrapper Wrapper of {@link DiscoveryCustomMessage}.\n+         */\n+        private DiscoveryCustomMessage unwrap(CustomMessageWrapper wrapper) {\n+            return U.field(wrapper, \"delegate\");\n+        }\n+    }\n+\n     /**\n      * Injects {@link DiscoveryHook} into handling logic.\n      */\n     public static final class DiscoverySpiListenerWrapper implements DiscoverySpiListener {\n         /** */\n         private final DiscoverySpiListener delegate;\n \n-        /** */\n-        private final DiscoveryHook hook;\n+        /** Interceptors of discovery messages. */\n+        private final DiscoveryHook[] hooks;\n \n         /**\n          * @param delegate Delegate.\n-         * @param hook Hook.\n+         * @param hooks Interceptors of discovery messages.\n          */\n-        private DiscoverySpiListenerWrapper(DiscoverySpiListener delegate, DiscoveryHook hook) {\n-            this.hook = hook;\n+        private DiscoverySpiListenerWrapper(DiscoverySpiListener delegate, DiscoveryHook[] hooks) {\n+            this.hooks = hooks;\n             this.delegate = delegate;\n         }\n \n         /** {@inheritDoc} */\n-        @Override public IgniteFuture<?> onDiscovery(int type, long topVer, ClusterNode node, Collection<ClusterNode> topSnapshot, @Nullable Map<Long, Collection<ClusterNode>> topHist, @Nullable DiscoverySpiCustomMessage spiCustomMsg) {\n-            hook.handleDiscoveryMessage(spiCustomMsg);\n+        @Override public IgniteFuture<?> onDiscovery(\n+            int type,\n+            long topVer,\n+            ClusterNode node,\n+            Collection<ClusterNode> topSnapshot,\n+            @Nullable Map<Long, Collection<ClusterNode>> topHist,\n+            @Nullable DiscoverySpiCustomMessage spiCustomMsg\n+        ) {\n+            for (DiscoveryHook hook : hooks)\n+                hook.beforeDiscovery(spiCustomMsg);\n \n             IgniteFuture<?> fut = delegate.onDiscovery(type, topVer, node, topSnapshot, topHist, spiCustomMsg);\n \n-            hook.afterDiscovery(spiCustomMsg);\n+            for (DiscoveryHook hook : hooks)\n+                hook.afterDiscovery(spiCustomMsg);", "originalCommit": "334947ce74434f1501d8e95a4c4d5a723f6f35db", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "884b87c5a0d90acfd47f144b80ccab5b98597e31", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java b/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java\nindex 5f3c93ae05..c4b4446a35 100644\n--- a/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java\n+++ b/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java\n\n@@ -149,32 +149,6 @@ public final class GridTestUtils {\n          * @param msg Intercepted discovery message.\n          */\n         public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n-            // No-op.\n-        }\n-\n-        /**\n-         * Handles discovery message after {@link DiscoverySpiListener#onDiscovery} completion.\n-         *\n-         * @param msg Intercepted discovery message.\n-         */\n-        public void afterDiscovery(DiscoverySpiCustomMessage msg) {\n-            // No-op.\n-        }\n-\n-        /**\n-         * @param ignite Ignite.\n-         */\n-        public void ignite(IgniteEx ignite) {\n-            // No-op.\n-        }\n-    }\n-\n-    /**\n-     * Extended {@link DiscoveryHook} for {@link DiscoveryCustomMessage} interception.\n-     */\n-    public static class DiscoveryCustomMessageHook extends DiscoveryHook {\n-        /** {@inheritDoc} */\n-        @Override public void beforeDiscovery(DiscoverySpiCustomMessage msg) {\n             if (!(msg instanceof CustomMessageWrapper))\n                 return;\n \n"}}, {"oid": "884b87c5a0d90acfd47f144b80ccab5b98597e31", "url": "https://github.com/apache/ignite/commit/884b87c5a0d90acfd47f144b80ccab5b98597e31", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T19:42:04Z", "type": "forcePushed"}, {"oid": "d28b939303d88e1bfbf312a32ee1414a2caad1d2", "url": "https://github.com/apache/ignite/commit/d28b939303d88e1bfbf312a32ee1414a2caad1d2", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T19:48:32Z", "type": "forcePushed"}, {"oid": "3c2569c1ec5803c4c8f93cc5b8675f757e6c274c", "url": "https://github.com/apache/ignite/commit/3c2569c1ec5803c4c8f93cc5b8675f757e6c274c", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T19:49:54Z", "type": "forcePushed"}, {"oid": "84e255d1362662ce25ffa53f7ae37edd33bd965c", "url": "https://github.com/apache/ignite/commit/84e255d1362662ce25ffa53f7ae37edd33bd965c", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T20:10:06Z", "type": "forcePushed"}, {"oid": "2d2c5f33e9586ac93297f322e530781531a6980c", "url": "https://github.com/apache/ignite/commit/2d2c5f33e9586ac93297f322e530781531a6980c", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T20:44:37Z", "type": "forcePushed"}, {"oid": "f4760d50329c783a7d62b1e4ee90f22473fe6e5e", "url": "https://github.com/apache/ignite/commit/f4760d50329c783a7d62b1e4ee90f22473fe6e5e", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-09T20:46:15Z", "type": "forcePushed"}, {"oid": "62050f2b84bae86faae6c190d1fa7fa9423fbebe", "url": "https://github.com/apache/ignite/commit/62050f2b84bae86faae6c190d1fa7fa9423fbebe", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-10T05:08:27Z", "type": "forcePushed"}, {"oid": "84e4947099fe545b2cfe8d419ab1db02c0fcdf98", "url": "https://github.com/apache/ignite/commit/84e4947099fe545b2cfe8d419ab1db02c0fcdf98", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-10T05:20:59Z", "type": "commit"}, {"oid": "84e4947099fe545b2cfe8d419ab1db02c0fcdf98", "url": "https://github.com/apache/ignite/commit/84e4947099fe545b2cfe8d419ab1db02c0fcdf98", "message": "IGNITE-12879 Fixes premature afterDiscovery calling.", "committedDate": "2020-04-10T05:20:59Z", "type": "forcePushed"}, {"oid": "fe2ad0366ffa7e9032cd669dc3da01fe190c4249", "url": "https://github.com/apache/ignite/commit/fe2ad0366ffa7e9032cd669dc3da01fe190c4249", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-10T16:15:06Z", "type": "commit"}, {"oid": "fe2ad0366ffa7e9032cd669dc3da01fe190c4249", "url": "https://github.com/apache/ignite/commit/fe2ad0366ffa7e9032cd669dc3da01fe190c4249", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-10T16:15:06Z", "type": "forcePushed"}, {"oid": "c04bd7be256a3616349d95b82877076a19b33186", "url": "https://github.com/apache/ignite/commit/c04bd7be256a3616349d95b82877076a19b33186", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-13T07:58:58Z", "type": "commit"}, {"oid": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "url": "https://github.com/apache/ignite/commit/5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-13T10:23:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4ODczNA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409388734", "bodyText": "Why this deletion?", "author": "nizhikov", "createdAt": "2020-04-16T08:49:23Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/BinaryMetadataUpdatesFlowTest.java", "diffHunk": "@@ -209,10 +197,7 @@ public void testFlowNoConflictsWithClients() throws Exception {\n             return;\n \n         discoveryHook = new DiscoveryHook() {\n-            @Override public void handleDiscoveryMessage(DiscoverySpiCustomMessage msg) {\n-                DiscoveryCustomMessage customMsg = msg == null ? null", "originalCommit": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MzIyOA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409393228", "bodyText": "This logic was moved to DiscoveryHook class  to avoid duplication.", "author": "ololo3000", "createdAt": "2020-04-16T08:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4ODczNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTA3Ng==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409389076", "bodyText": "Why this deletion?", "author": "nizhikov", "createdAt": "2020-04-16T08:49:57Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/binary/GridCacheBinaryObjectMetadataExchangeMultinodeTest.java", "diffHunk": "@@ -129,13 +115,10 @@ public void testReadRequestBlockedOnUpdatingMetadata() throws Exception {\n         discoveryHook = new DiscoveryHook() {\n             private volatile IgniteEx ignite;\n \n-            @Override public void handleDiscoveryMessage(DiscoverySpiCustomMessage msg) {\n+            @Override public void beforeDiscovery(DiscoveryCustomMessage customMsg) {\n                 if (finishFut.isDone())\n                     return;\n \n-                DiscoveryCustomMessage customMsg = msg == null ? null", "originalCommit": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409393898", "bodyText": "Is the following flow possible? If no, why?\n\naddDiscoveryHook\nsetListener\naddDiscoveryHook <- this hook will be ignored.", "author": "nizhikov", "createdAt": "2020-04-16T08:57:16Z", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -44,4 +54,24 @@\n     @Override public void simulateNodeFailure() {\n         super.simulateNodeFailure();\n     }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n+    @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n+        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?", "originalCommit": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjIyNQ==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409396225", "bodyText": "It seems to me that we can just pass discoHooks into the listener.\nTherefore list always be up to date inside the listener.", "author": "nizhikov", "createdAt": "2020-04-16T09:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDcxMg==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409404712", "bodyText": "addDiscoveryHook method asserts that it must be called only before TcpDiscoverySpi start. So it's impossible to use addDiscoveryHook after listener is set.", "author": "ololo3000", "createdAt": "2020-04-16T09:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyMzAzMA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409423030", "bodyText": "OK then.", "author": "nizhikov", "createdAt": "2020-04-16T09:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNjc5OQ==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409426799", "bodyText": "It seems to me that we can just pass discoHooks into the listener.\nTherefore list always be up to date inside the listener.\n\nIt's not clear for me in what cases hooks are needed to be modified after SPI start. I think that the current approach is more robust.", "author": "ololo3000", "createdAt": "2020-04-16T09:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5Mzg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "358509270ccb5587fce418f48699e6910b5f59b9", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\nindex 1454bf336e..f0d4929320 100644\n--- a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n+++ b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n\n@@ -58,7 +58,7 @@ public class TestTcpDiscoverySpi extends TcpDiscoverySpi {\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"ZeroLengthArrayAllocation\")\n     @Override public void setListener(@Nullable DiscoverySpiListener lsnr) {\n-        super.setListener(lsnr ==  null || discoHooks.isEmpty() ?\n+        super.setListener(lsnr == null || discoHooks == null ?\n             lsnr : wrap(lsnr, discoHooks.toArray(new DiscoveryHook[0])));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NDYyNA==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409394624", "bodyText": "Let's allocate discoHooks on the first hook addition.", "author": "nizhikov", "createdAt": "2020-04-16T08:58:15Z", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java", "diffHunk": "@@ -31,6 +38,9 @@\n     /** */\n     public boolean ignorePingResponse;\n \n+    /** Interceptors of discovery messages. */\n+    private List<DiscoveryHook> discoHooks = new ArrayList<>();", "originalCommit": "5e428d1c1b0e735be80d6d486f22d3f1d0de0ebb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNjc2Nw==", "url": "https://github.com/apache/ignite/pull/7647#discussion_r409426767", "bodyText": "Thanks. Done.", "author": "ololo3000", "createdAt": "2020-04-16T09:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NDYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "358509270ccb5587fce418f48699e6910b5f59b9", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\nindex 1454bf336e..f0d4929320 100644\n--- a/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n+++ b/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TestTcpDiscoverySpi.java\n\n@@ -39,7 +39,7 @@ public class TestTcpDiscoverySpi extends TcpDiscoverySpi {\n     public boolean ignorePingResponse;\n \n     /** Interceptors of discovery messages. */\n-    private List<DiscoveryHook> discoHooks = new ArrayList<>();\n+    private List<DiscoveryHook> discoHooks;\n \n     /** {@inheritDoc} */\n     @Override protected void writeToSocket(Socket sock, OutputStream out, TcpDiscoveryAbstractMessage msg, long timeout) throws IOException,\n"}}, {"oid": "358509270ccb5587fce418f48699e6910b5f59b9", "url": "https://github.com/apache/ignite/commit/358509270ccb5587fce418f48699e6910b5f59b9", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-16T09:34:00Z", "type": "commit"}, {"oid": "64578ba1f0f5c101ae283649f550eeaf47fba153", "url": "https://github.com/apache/ignite/commit/64578ba1f0f5c101ae283649f550eeaf47fba153", "message": "IGNITE-12879 Fixes minor issues.", "committedDate": "2020-04-16T10:28:11Z", "type": "commit"}]}