{"pr_number": 8489, "pr_title": "IGNITE-13714 [ML]: Add catboost inference integration", "pr_createdAt": "2020-11-24T08:56:49Z", "pr_url": "https://github.com/apache/ignite/pull/8489", "timeline": [{"oid": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "url": "https://github.com/apache/ignite/commit/064eff4fbb64cb5acde0cf1a85777dc93983490d", "message": "IGNITE-13714 Add catboost inference integration", "committedDate": "2020-11-24T18:40:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MTYxNA==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r533191614", "bodyText": "Remove blank line", "author": "zaleslaw", "createdAt": "2020-12-01T09:10:48Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostRegressionModel.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.Model;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * CatboostRegressionModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n+ */\n+public class CatboostRegressionModel implements Model<NamedVector, Double> {\n+  /** Logger. */\n+  private static final Logger logger = LoggerFactory.getLogger(CatboostRegressionModel.class);\n+\n+  /** Catboost model. */\n+  private final CatBoostModel model;\n+\n+  /**\n+   * Constructs a new instance of Catboost model wrapper.\n+   *\n+   * @param model Catboost Model\n+   */\n+  public CatboostRegressionModel(CatBoostModel model) {\n+    this.model = model;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override public Double predict(NamedVector input) {\n+    float[] floatInput = new float[input.size()];\n+    int index = 0;\n+    for (String key: model.getFeatureNames()) {\n+      floatInput[index] = (float) input.get(key);\n+      index++;\n+    }\n+\n+    try {\n+      return model.predict(floatInput, model.getFeatureNames()).get(0, 0);\n+    } catch (CatBoostError e) {\n+      throw new RuntimeException(e.getMessage());\n+    }\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override public void close() {\n+    try {\n+      model.close();\n+    } catch (CatBoostError e) {\n+      logger.error(e.getMessage());\n+    }\n+  }\n+", "originalCommit": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzM4NQ==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r535933385", "bodyText": "Fixed", "author": "mrk-andreev", "createdAt": "2020-12-04T08:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MTYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "chunk": "diff --git a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostRegressionModel.java b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostRegressionModel.java\nindex ee2323e29f..bc9d7b6d39 100644\n--- a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostRegressionModel.java\n+++ b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostRegressionModel.java\n\n@@ -28,44 +28,44 @@ import org.slf4j.LoggerFactory;\n  * CatboostRegressionModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n  */\n public class CatboostRegressionModel implements Model<NamedVector, Double> {\n-  /** Logger. */\n-  private static final Logger logger = LoggerFactory.getLogger(CatboostRegressionModel.class);\n+    /** Logger. */\n+    private static final Logger logger = LoggerFactory.getLogger(CatboostRegressionModel.class);\n \n-  /** Catboost model. */\n-  private final CatBoostModel model;\n+    /** Catboost model. */\n+    private final CatBoostModel model;\n \n-  /**\n-   * Constructs a new instance of Catboost model wrapper.\n-   *\n-   * @param model Catboost Model\n-   */\n-  public CatboostRegressionModel(CatBoostModel model) {\n+    /**\n+     * Constructs a new instance of Catboost model wrapper.\n+     *\n+     * @param model Catboost Model\n+     */\n+    public CatboostRegressionModel(CatBoostModel model) {\n     this.model = model;\n   }\n \n-  /** {@inheritDoc} */\n-  @Override public Double predict(NamedVector input) {\n-    float[] floatInput = new float[input.size()];\n-    int index = 0;\n-    for (String key: model.getFeatureNames()) {\n-      floatInput[index] = (float) input.get(key);\n-      index++;\n-    }\n+    /** {@inheritDoc} */\n+    @Override public Double predict(NamedVector input) {\n+        float[] floatInput = new float[input.size()];\n+        int index = 0;\n+        for (String key: model.getFeatureNames()) {\n+            floatInput[index] = (float) input.get(key);\n+            index++;\n+        }\n \n-    try {\n-      return model.predict(floatInput, model.getFeatureNames()).get(0, 0);\n-    } catch (CatBoostError e) {\n-      throw new RuntimeException(e.getMessage());\n+        try {\n+            return model.predict(floatInput, model.getFeatureNames())\n+                .get(0, 0);\n+        } catch (CatBoostError e) {\n+          throw new RuntimeException(e.getMessage());\n+        }\n     }\n-  }\n \n-  /** {@inheritDoc} */\n-  @Override public void close() {\n-    try {\n-      model.close();\n-    } catch (CatBoostError e) {\n-      logger.error(e.getMessage());\n+    /** {@inheritDoc} */\n+    @Override public void close() {\n+        try {\n+            model.close();\n+        } catch (CatBoostError e) {\n+            logger.error(e.getMessage());\n+        }\n     }\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MjIzOQ==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r533192239", "bodyText": "Add more comments about CatBoost model, maybe copy some javadaoc from CatBoost", "author": "zaleslaw", "createdAt": "2020-12-01T09:11:18Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.Model;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * CatboostClassificationModel imported and wrapped to be compatible with Apache Ignite infrastructure.", "originalCommit": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMDQzNQ==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r535920435", "bodyText": "Original javadoc is not so useful:\n\nCatBoost model, supports basic model application.", "author": "mrk-andreev", "createdAt": "2020-12-04T08:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5MjIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "chunk": "diff --git a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\nindex feb9c12e7a..674cb1fcbb 100644\n--- a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\n+++ b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\n\n@@ -28,50 +28,46 @@ import org.slf4j.LoggerFactory;\n  * CatboostClassificationModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n  */\n public class CatboostClassificationModel implements Model<NamedVector, Double> {\n-  /** Logger. */\n-  private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n+    /** Logger. */\n+    private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n \n-  /** Catboost model. */\n-  private final CatBoostModel model;\n+    /** Catboost model. */\n+    private final CatBoostModel model;\n \n-  /**\n-   * Constructs a new instance of Catboost model wrapper.\n-   *\n-   * @param model Catboost Model\n-   */\n-  public CatboostClassificationModel(CatBoostModel model) {\n-    this.model = model;\n-  }\n-\n-  /** {@inheritDoc} */\n-  @Override public Double predict(NamedVector input) {\n-    float[] floatInput = new float[input.size()];\n-    int index = 0;\n-    for (String key: model.getFeatureNames()) {\n-      floatInput[index] = (float) input.get(key);\n-      index++;\n+    /**\n+     * Constructs a new instance of Catboost model wrapper.\n+     *\n+     * @param model Catboost Model\n+     */\n+    public CatboostClassificationModel(CatBoostModel model) {\n+        this.model = model;\n     }\n \n-    try {\n-      double predict = model.predict(\n-          floatInput,\n-          model.getFeatureNames()\n-      ).get(0, 0);\n-      // use formula based on https://github.com/catboost/benchmarks/blob/61d62512f751325a14dd885bb71f8c2dabf7e24b/quality_benchmarks/catboost_experiment.py#L77\n+    /** {@inheritDoc} */\n+    @Override public Double predict(NamedVector input) {\n+        float[] floatInput = new float[input.size()];\n+        int index = 0;\n+        for (String key: model.getFeatureNames()) {\n+            floatInput[index] = (float) input.get(key);\n+            index++;\n+        }\n \n-      return Math.pow(1 + Math.exp(-predict), -1);\n-    } catch (CatBoostError e) {\n-      throw new RuntimeException(e.getMessage());\n+        try {\n+            double predict = model.predict(floatInput, model.getFeatureNames())\n+                .get(0, 0);\n+            // use formula based on https://github.com/catboost/benchmarks/blob/61d62512f751325a14dd885bb71f8c2dabf7e24b/quality_benchmarks/catboost_experiment.py#L77\n+            return Math.pow(1 + Math.exp(-predict), -1);\n+        } catch (CatBoostError e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n     }\n-  }\n \n-  /** {@inheritDoc} */\n-  @Override public void close() {\n-    try {\n-      model.close();\n-    } catch (CatBoostError e) {\n-      logger.error(e.getMessage());\n+    /** {@inheritDoc} */\n+    @Override public void close() {\n+        try {\n+          model.close();\n+        } catch (CatBoostError e) {\n+          logger.error(e.getMessage());\n+        }\n     }\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDE3NQ==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r533194175", "bodyText": "Looks like the use different code formatting\nCould you please check https://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines especially\nWhitespaces and empty lines chapter\nSource code line should not be longer then 120 characters (to be visible on most conventional monitors). 4 space characters should be used for tabulation and indentation", "author": "zaleslaw", "createdAt": "2020-12-01T09:12:55Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.Model;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * CatboostClassificationModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n+ */\n+public class CatboostClassificationModel implements Model<NamedVector, Double> {\n+  /** Logger. */\n+  private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n+\n+  /** Catboost model. */\n+  private final CatBoostModel model;\n+\n+  /**\n+   * Constructs a new instance of Catboost model wrapper.\n+   *\n+   * @param model Catboost Model\n+   */\n+  public CatboostClassificationModel(CatBoostModel model) {\n+    this.model = model;\n+  }\n+\n+  /** {@inheritDoc} */\n+  @Override public Double predict(NamedVector input) {\n+    float[] floatInput = new float[input.size()];\n+    int index = 0;\n+    for (String key: model.getFeatureNames()) {\n+      floatInput[index] = (float) input.get(key);\n+      index++;\n+    }\n+\n+    try {\n+      double predict = model.predict(", "originalCommit": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzYxMg==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r535933612", "bodyText": "Fixed in all committed files", "author": "mrk-andreev", "createdAt": "2020-12-04T08:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "chunk": "diff --git a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\nindex feb9c12e7a..674cb1fcbb 100644\n--- a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\n+++ b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java\n\n@@ -28,50 +28,46 @@ import org.slf4j.LoggerFactory;\n  * CatboostClassificationModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n  */\n public class CatboostClassificationModel implements Model<NamedVector, Double> {\n-  /** Logger. */\n-  private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n+    /** Logger. */\n+    private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n \n-  /** Catboost model. */\n-  private final CatBoostModel model;\n+    /** Catboost model. */\n+    private final CatBoostModel model;\n \n-  /**\n-   * Constructs a new instance of Catboost model wrapper.\n-   *\n-   * @param model Catboost Model\n-   */\n-  public CatboostClassificationModel(CatBoostModel model) {\n-    this.model = model;\n-  }\n-\n-  /** {@inheritDoc} */\n-  @Override public Double predict(NamedVector input) {\n-    float[] floatInput = new float[input.size()];\n-    int index = 0;\n-    for (String key: model.getFeatureNames()) {\n-      floatInput[index] = (float) input.get(key);\n-      index++;\n+    /**\n+     * Constructs a new instance of Catboost model wrapper.\n+     *\n+     * @param model Catboost Model\n+     */\n+    public CatboostClassificationModel(CatBoostModel model) {\n+        this.model = model;\n     }\n \n-    try {\n-      double predict = model.predict(\n-          floatInput,\n-          model.getFeatureNames()\n-      ).get(0, 0);\n-      // use formula based on https://github.com/catboost/benchmarks/blob/61d62512f751325a14dd885bb71f8c2dabf7e24b/quality_benchmarks/catboost_experiment.py#L77\n+    /** {@inheritDoc} */\n+    @Override public Double predict(NamedVector input) {\n+        float[] floatInput = new float[input.size()];\n+        int index = 0;\n+        for (String key: model.getFeatureNames()) {\n+            floatInput[index] = (float) input.get(key);\n+            index++;\n+        }\n \n-      return Math.pow(1 + Math.exp(-predict), -1);\n-    } catch (CatBoostError e) {\n-      throw new RuntimeException(e.getMessage());\n+        try {\n+            double predict = model.predict(floatInput, model.getFeatureNames())\n+                .get(0, 0);\n+            // use formula based on https://github.com/catboost/benchmarks/blob/61d62512f751325a14dd885bb71f8c2dabf7e24b/quality_benchmarks/catboost_experiment.py#L77\n+            return Math.pow(1 + Math.exp(-predict), -1);\n+        } catch (CatBoostError e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n     }\n-  }\n \n-  /** {@inheritDoc} */\n-  @Override public void close() {\n-    try {\n-      model.close();\n-    } catch (CatBoostError e) {\n-      logger.error(e.getMessage());\n+    /** {@inheritDoc} */\n+    @Override public void close() {\n+        try {\n+          model.close();\n+        } catch (CatBoostError e) {\n+          logger.error(e.getMessage());\n+        }\n     }\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDg0Mg==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r533194842", "bodyText": "Could you please explain, why did you use NamedVector with CatBoost models", "author": "zaleslaw", "createdAt": "2020-12-01T09:13:29Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.parser.ModelParser;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+\n+/**\n+ * Catboost Classification model parser.\n+ */\n+public class CatboostClassificationModelParser implements\n+    ModelParser<NamedVector, Double, CatboostClassificationModel> {", "originalCommit": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNTQ0Mg==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r535935442", "bodyText": "Catboost require right order of features. So I can fetch order model.getFeatureNames() and fill input vector floatInput using expected order.\nfloat[] floatInput = new float[input.size()];\nint index = 0;\nfor (String key: model.getFeatureNames()) {\n    floatInput[index] = (float) input.get(key);\n    index++;\n}\n\nreturn model.predict(floatInput, model.getFeatureNames()).get(0, 0);", "author": "mrk-andreev", "createdAt": "2020-12-04T08:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "chunk": "diff --git a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\nindex 63bd90b93a..f929f6f549 100644\n--- a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\n+++ b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\n\n@@ -30,15 +30,15 @@ import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n  */\n public class CatboostClassificationModelParser implements\n     ModelParser<NamedVector, Double, CatboostClassificationModel> {\n-  /** */\n-  private static final long serialVersionUID = -8425510352746936163L;\n+    /** */\n+    private static final long serialVersionUID = -8425510352746936163L;\n \n-  /** {@inheritDoc} */\n-  @Override public CatboostClassificationModel parse(byte[] mdl) {\n-    try (InputStream inputStream = new ByteArrayInputStream(mdl)) {\n-      return new CatboostClassificationModel(CatBoostModel.loadModel(inputStream));\n-    } catch (IOException | CatBoostError e) {\n-      throw new RuntimeException(\"Failed to parse model\", e);\n+    /** {@inheritDoc} */\n+    @Override public CatboostClassificationModel parse(byte[] mdl) {\n+        try (InputStream inputStream = new ByteArrayInputStream(mdl)) {\n+            return new CatboostClassificationModel(CatBoostModel.loadModel(inputStream));\n+        } catch (IOException | CatBoostError e) {\n+            throw new RuntimeException(\"Failed to parse model \" + e.getMessage(), e);\n+        }\n     }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NTcxNA==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r533195714", "bodyText": "Rewrite the RuntimeException message to more clear (maybe with tips, what's going on)", "author": "zaleslaw", "createdAt": "2020-12-01T09:14:10Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.parser.ModelParser;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+\n+/**\n+ * Catboost Classification model parser.\n+ */\n+public class CatboostClassificationModelParser implements\n+    ModelParser<NamedVector, Double, CatboostClassificationModel> {\n+  /** */\n+  private static final long serialVersionUID = -8425510352746936163L;\n+\n+  /** {@inheritDoc} */\n+  @Override public CatboostClassificationModel parse(byte[] mdl) {\n+    try (InputStream inputStream = new ByteArrayInputStream(mdl)) {\n+      return new CatboostClassificationModel(CatBoostModel.loadModel(inputStream));\n+    } catch (IOException | CatBoostError e) {\n+      throw new RuntimeException(\"Failed to parse model\", e);", "originalCommit": "064eff4fbb64cb5acde0cf1a85777dc93983490d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzMzk1NQ==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r535933955", "bodyText": "Add original exception message to RuntimeException message", "author": "mrk-andreev", "createdAt": "2020-12-04T08:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "chunk": "diff --git a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\nindex 63bd90b93a..f929f6f549 100644\n--- a/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\n+++ b/modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModelParser.java\n\n@@ -30,15 +30,15 @@ import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n  */\n public class CatboostClassificationModelParser implements\n     ModelParser<NamedVector, Double, CatboostClassificationModel> {\n-  /** */\n-  private static final long serialVersionUID = -8425510352746936163L;\n+    /** */\n+    private static final long serialVersionUID = -8425510352746936163L;\n \n-  /** {@inheritDoc} */\n-  @Override public CatboostClassificationModel parse(byte[] mdl) {\n-    try (InputStream inputStream = new ByteArrayInputStream(mdl)) {\n-      return new CatboostClassificationModel(CatBoostModel.loadModel(inputStream));\n-    } catch (IOException | CatBoostError e) {\n-      throw new RuntimeException(\"Failed to parse model\", e);\n+    /** {@inheritDoc} */\n+    @Override public CatboostClassificationModel parse(byte[] mdl) {\n+        try (InputStream inputStream = new ByteArrayInputStream(mdl)) {\n+            return new CatboostClassificationModel(CatBoostModel.loadModel(inputStream));\n+        } catch (IOException | CatBoostError e) {\n+            throw new RuntimeException(\"Failed to parse model \" + e.getMessage(), e);\n+        }\n     }\n-  }\n }\n"}}, {"oid": "3ce2f3507e032b6b2020d7941be94fab37ec42d8", "url": "https://github.com/apache/ignite/commit/3ce2f3507e032b6b2020d7941be94fab37ec42d8", "message": "IGNITE-13714 Add catboost inference integration", "committedDate": "2020-12-04T08:50:19Z", "type": "forcePushed"}, {"oid": "9e996242c5f26052d3ddf82dfdf41c9ca999d63f", "url": "https://github.com/apache/ignite/commit/9e996242c5f26052d3ddf82dfdf41c9ca999d63f", "message": "IGNITE-13714 Add catboost inference integration", "committedDate": "2020-12-07T18:25:40Z", "type": "forcePushed"}, {"oid": "b5dad685606bcb4b4c5713184a4c291daeebcc0e", "url": "https://github.com/apache/ignite/commit/b5dad685606bcb4b4c5713184a4c291daeebcc0e", "message": "IGNITE-13714 Add catboost inference integration", "committedDate": "2020-12-07T18:31:29Z", "type": "commit"}, {"oid": "b5dad685606bcb4b4c5713184a4c291daeebcc0e", "url": "https://github.com/apache/ignite/commit/b5dad685606bcb4b4c5713184a4c291daeebcc0e", "message": "IGNITE-13714 Add catboost inference integration", "committedDate": "2020-12-07T18:31:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTY1MDgzMw==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r659650833", "bodyText": "Hi @mrk-andreev , second parameter in predict for catboost model should be an array of  categorical features? Could you please help with, how can we run for a model containing categorical features?", "author": "saurzcode", "createdAt": "2021-06-28T10:02:21Z", "path": "modules/ml/catboost-model-parser/src/main/java/org/apache/ignite/ml/catboost/CatboostClassificationModel.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.catboost;\n+\n+import ai.catboost.CatBoostError;\n+import ai.catboost.CatBoostModel;\n+import org.apache.ignite.ml.inference.Model;\n+import org.apache.ignite.ml.math.primitives.vector.NamedVector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * CatboostClassificationModel imported and wrapped to be compatible with Apache Ignite infrastructure.\n+ */\n+public class CatboostClassificationModel implements Model<NamedVector, Double> {\n+    /** Logger. */\n+    private static final Logger logger = LoggerFactory.getLogger(CatboostClassificationModel.class);\n+\n+    /** Catboost model. */\n+    private final CatBoostModel model;\n+\n+    /**\n+     * Constructs a new instance of Catboost model wrapper.\n+     *\n+     * @param model Catboost Model\n+     */\n+    public CatboostClassificationModel(CatBoostModel model) {\n+        this.model = model;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Double predict(NamedVector input) {\n+        float[] floatInput = new float[input.size()];\n+        int index = 0;\n+        for (String key: model.getFeatureNames()) {\n+            floatInput[index] = (float) input.get(key);\n+            index++;\n+        }\n+\n+        try {\n+            double predict = model.predict(floatInput, model.getFeatureNames())", "originalCommit": "b5dad685606bcb4b4c5713184a4c291daeebcc0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ3MjgxNg==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r660472816", "bodyText": "Hi, @saurzcode . I need more time for investigation.", "author": "mrk-andreev", "createdAt": "2021-06-29T10:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTY1MDgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQ3NTY1NA==", "url": "https://github.com/apache/ignite/pull/8489#discussion_r660475654", "bodyText": "Sure ! I can make a pull request to handle those, I have some idea on it, let me know if you find otherwise any other way to handle in existing i can use that.", "author": "saurzcode", "createdAt": "2021-06-29T10:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTY1MDgzMw=="}], "type": "inlineReview", "revised_code": null}]}