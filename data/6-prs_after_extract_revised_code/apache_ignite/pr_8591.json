{"pr_number": 8591, "pr_title": "IGNITE-13555 Java thin: add IPv6 address support", "pr_createdAt": "2020-12-18T07:14:10Z", "pr_url": "https://github.com/apache/ignite/pull/8591", "timeline": [{"oid": "2e5a6e82109196f6af963f143fbbdd0bec500e73", "url": "https://github.com/apache/ignite/commit/2e5a6e82109196f6af963f143fbbdd0bec500e73", "message": "Implemented IPv6 parsing", "committedDate": "2020-12-17T15:28:10Z", "type": "commit"}, {"oid": "451b8ffddb25aca64e52efc30d25055bfc5a3f1a", "url": "https://github.com/apache/ignite/commit/451b8ffddb25aca64e52efc30d25055bfc5a3f1a", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-13555", "committedDate": "2020-12-17T15:50:10Z", "type": "commit"}, {"oid": "3463a61bba2f1d0267d2186714b1c06917c97e95", "url": "https://github.com/apache/ignite/commit/3463a61bba2f1d0267d2186714b1c06917c97e95", "message": "Removed brackets from host address", "committedDate": "2020-12-18T06:54:07Z", "type": "commit"}, {"oid": "9a480766ea3416d7f50a13b56e89816a378477f5", "url": "https://github.com/apache/ignite/commit/9a480766ea3416d7f50a13b56e89816a378477f5", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-13555", "committedDate": "2020-12-18T06:54:46Z", "type": "commit"}, {"oid": "f858d0c8e79e8bb2e199c172c514c9c9c20c0b89", "url": "https://github.com/apache/ignite/commit/f858d0c8e79e8bb2e199c172c514c9c9c20c0b89", "message": "checkstyle", "committedDate": "2020-12-18T10:09:51Z", "type": "commit"}, {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "url": "https://github.com/apache/ignite/commit/58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "message": "Added license and javadocs", "committedDate": "2020-12-18T10:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545881507", "bodyText": "Javadoc is required for all classes.", "author": "ptupitsyn", "createdAt": "2020-12-18T14:51:02Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "originalCommit": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MjEwMA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545882100", "bodyText": "Looks like this test is not added to any suite, and thus won't run on CI.", "author": "ptupitsyn", "createdAt": "2020-12-18T14:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTQ5Ng==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547765496", "bodyText": "Fixed", "author": "vkozhukhova", "createdAt": "2020-12-23T07:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f74b22d98631bc9390906265977a3f361df70a54", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\nindex 3c8e2085dd..6014f46377 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n\n@@ -18,11 +18,17 @@\n package org.apache.ignite.internal.util;\n \n import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n \n-import static org.junit.Assert.assertEquals;\n-\n-public class HostAndPortRangeTest {\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n \n     /**\n      * tests correct input address with IPv4 host and port range.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDk0OQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545890949", "bodyText": "[ and ] are only needed when there is a port, otherwise IPv6 address does not have those.", "author": "ptupitsyn", "createdAt": "2020-12-18T15:00:28Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6", "originalCommit": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTMxNw==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547765317", "bodyText": "Added the case where there is IPv6 without [ and ] and port(s)", "author": "vkozhukhova", "createdAt": "2020-12-23T07:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f74b22d98631bc9390906265977a3f361df70a54", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex fed3b046e5..5fe66ec154 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -60,10 +62,10 @@ public class HostAndPortRange implements Serializable {\n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        if (addrStr.contains(\"[\")) { // IPv6\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n             if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n             }\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MjA0Mg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545892042", "bodyText": "substring(1 assumes that [ is at index 0, however, the line above addrStr.contains(\"[\") allows [ at any index.", "author": "ptupitsyn", "createdAt": "2020-12-18T15:01:26Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);", "originalCommit": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MzUzMA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547763530", "bodyText": "Now it checks for addrStr.charAt(0) == '['", "author": "vkozhukhova", "createdAt": "2020-12-23T07:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MjA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f74b22d98631bc9390906265977a3f361df70a54", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex fed3b046e5..5fe66ec154 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -60,10 +62,10 @@ public class HostAndPortRange implements Serializable {\n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        if (addrStr.contains(\"[\")) { // IPv6\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n             if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n             }\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MzUxMg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545893512", "bodyText": "Please add a check for the exception message too, not only the class.", "author": "ptupitsyn", "createdAt": "2020-12-18T15:03:17Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv4 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * ests correct input address with IPv4 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4NoPort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"[::1]:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"[3ffe:2a00:100:7031::]:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"3ffe:2a00:100:7031::\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6NoPort() throws IgniteCheckedException {\n+        String addrStr = \"[::FFFF:129.144.52.38]\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::FFFF:129.144.52.38\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests incorrect input address with IPv6 host (no brackets) and port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test(expected = IgniteCheckedException.class)", "originalCommit": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MjcwOQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547762709", "bodyText": "Done", "author": "vkozhukhova", "createdAt": "2020-12-23T07:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f74b22d98631bc9390906265977a3f361df70a54", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\nindex 3c8e2085dd..6014f46377 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n\n@@ -18,11 +18,17 @@\n package org.apache.ignite.internal.util;\n \n import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n \n-import static org.junit.Assert.assertEquals;\n-\n-public class HostAndPortRangeTest {\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n \n     /**\n      * tests correct input address with IPv4 host and port range.\n"}}, {"oid": "f74b22d98631bc9390906265977a3f361df70a54", "url": "https://github.com/apache/ignite/commit/f74b22d98631bc9390906265977a3f361df70a54", "message": "Added test group; added ipv6 check; added ipv6 host parse without brackets and ports", "committedDate": "2020-12-22T15:20:32Z", "type": "commit"}, {"oid": "56e51065f5e1929505520aedf2704a1cbab853b8", "url": "https://github.com/apache/ignite/commit/56e51065f5e1929505520aedf2704a1cbab853b8", "message": "checkstyle", "committedDate": "2020-12-22T15:51:50Z", "type": "commit"}, {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "url": "https://github.com/apache/ignite/commit/4c5ae6273b4293ab5eb0718b479005f61379dae6", "message": "Added HostAndPortRangeTest to suite", "committedDate": "2020-12-23T08:57:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIzODE4Mg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548238182", "bodyText": "Redundant blank line", "author": "ptupitsyn", "createdAt": "2020-12-23T21:07:09Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDU1OQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440559", "bodyText": "Removed", "author": "vkozhukhova", "createdAt": "2020-12-24T08:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIzODE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\nindex 898a7bb9c9..1299e32350 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n\n@@ -17,9 +17,11 @@\n \n package org.apache.ignite.internal.util;\n \n+import java.net.UnknownHostException;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.hamcrest.core.IsInstanceOf;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MTcxMg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548241712", "bodyText": "Code style: else should start on a new line", "author": "ptupitsyn", "createdAt": "2020-12-23T21:11:48Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDYwMg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440602", "bodyText": "Fixed", "author": "vkozhukhova", "createdAt": "2020-12-24T08:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MTcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MzEyMA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548243120", "bodyText": "Let's make the error message more helpful, something along the lines of Failed to parse IPv6 address, missing ']'", "author": "ptupitsyn", "createdAt": "2020-12-23T21:13:39Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDY3MA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440670", "bodyText": "Corrected.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MzEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0NDk0Mw==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548244943", "bodyText": "Code style: remove curly braces for single-line statement\nhttps://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines", "author": "ptupitsyn", "createdAt": "2020-12-23T21:16:11Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDcxNg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440716", "bodyText": "Fixed.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0NDk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0Nzg3Ng==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548247876", "bodyText": "Code style: add blank line after closing curly brace", "author": "ptupitsyn", "createdAt": "2020-12-23T21:19:56Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDgwNw==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440807", "bodyText": "Done.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0Nzg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0ODEwMQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548248101", "bodyText": "Code style: add blank line between semantic units", "author": "ptupitsyn", "createdAt": "2020-12-23T21:20:14Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTY2Mg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441662", "bodyText": "Added.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0ODEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0OTgzNw==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548249837", "bodyText": "Code style: add space after //", "author": "ptupitsyn", "createdAt": "2020-12-23T21:22:30Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDI0OQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250249", "bodyText": "Missing javadoc", "author": "ptupitsyn", "createdAt": "2020-12-23T21:23:16Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDg2Ng==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440866", "bodyText": "Added javadoc.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDQyOA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250428", "bodyText": "Code style: add space after []", "author": "ptupitsyn", "createdAt": "2020-12-23T21:23:30Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *\n+     * @param addrStr Address String.\n+     * @param errMsgPrefix Error message prefix.\n+     * @param portStr Port or port range string.\n+     * @return Array of int[portFrom, portTo].\n+     * @throws IgniteCheckedException If failed.\n+     */\n \n-            int portRangeIdx = portStr.indexOf(\"..\");\n+    private static int[] verifyPortStr(String addrStr, String errMsgPrefix, String portStr) throws IgniteCheckedException {\n+        String portFromStr;\n+        String portToStr;\n \n-            if (portRangeIdx >= 0) {\n-                // Port range is specified.\n-                portFromStr = portStr.substring(0, portRangeIdx);\n-                portToStr = portStr.substring(portRangeIdx + 2, portStr.length());\n-            }\n-            else {\n-                // Single port is specified.\n-                portFromStr = portStr;\n-                portToStr = portStr;\n-            }\n+        if (F.isEmpty(portStr))\n+            throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n \n-            portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n-            portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n+        int portRangeIdx = portStr.indexOf(\"..\");\n \n-            if (portFrom > portTo)\n-                throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+        if (portRangeIdx >= 0) {\n+            // Port range is specified.\n+            portFromStr = portStr.substring(0, portRangeIdx);\n+            portToStr = portStr.substring(portRangeIdx + 2);\n         }\n         else {\n-            // Host name not specified.\n-            if (colIdx == 0)\n-                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n-\n-            // Port is not specified, use defaults.\n-            host = addrStr;\n-\n-            portFrom = dfltPortFrom;\n-            portTo = dfltPortTo;\n+            // Single port is specified.\n+            portFromStr = portStr;\n+            portToStr = portStr;\n         }\n \n-        if (F.isEmpty(host))\n-            throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+        int portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n+        int portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n \n-        return new HostAndPortRange(host, portFrom, portTo);\n+        if (portFrom > portTo)\n+            throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+\n+        return new int[]{portFrom, portTo};", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDg5NA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440894", "bodyText": "Added.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDg5OQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250899", "bodyText": "Comments should start with a capital letter", "author": "ptupitsyn", "createdAt": "2020-12-23T21:24:19Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDkzNg==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440936", "bodyText": "Corrected.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\nindex 898a7bb9c9..1299e32350 100644\n--- a/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n+++ b/modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java\n\n@@ -17,9 +17,11 @@\n \n package org.apache.ignite.internal.util;\n \n+import java.net.UnknownHostException;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.hamcrest.core.IsInstanceOf;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NTI4OQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548255289", "bodyText": "Can be shorter and avoid extra allocation: addrStr.lastIndexOf(\":\", colIdx)", "author": "ptupitsyn", "createdAt": "2020-12-23T21:30:00Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTIzMQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441231", "bodyText": "Now it checks for previous colon as addrStr.lastIndexOf(':', colIdx-1) != -1", "author": "vkozhukhova", "createdAt": "2020-12-24T08:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NTI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NzE3NA==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548257174", "bodyText": "Pass e as cause.", "author": "ptupitsyn", "createdAt": "2020-12-23T21:32:49Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "originalCommit": "4c5ae6273b4293ab5eb0718b479005f61379dae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTM4NQ==", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441385", "bodyText": "Overloaded createParseError method to pass cause.", "author": "vkozhukhova", "createdAt": "2020-12-24T08:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NzE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "chunk": "diff --git a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\nindex 5fe66ec154..aa1365172c 100644\n--- a/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n+++ b/modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java\n\n@@ -64,24 +64,27 @@ public class HostAndPortRange implements Serializable {\n \n         if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n             int hostEndIdx = addrStr.indexOf(']');\n-            if (hostEndIdx == -1) {\n-                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n-            }\n+            if (hostEndIdx == -1)\n+                throw createParseError(addrStr, errMsgPrefix, \"Failed to parse IPv6 address, missing ']'\");\n+\n             host = addrStr.substring(1, hostEndIdx);\n             if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n                 portFrom = dfltPortFrom;\n                 portTo = dfltPortTo;\n-            } else { // port specified\n+            }\n+            else { // port specified\n                 portStr = addrStr.substring(hostEndIdx + 2);\n \n                 int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n                 portFrom = ports[0];\n                 portTo = ports[1];\n             }\n-        } else { //IPv4 || IPv6 without port || empty host\n+        }\n+\n+        else { // IPv4 || IPv6 without port || empty host\n             final int colIdx = addrStr.lastIndexOf(':');\n             if (colIdx > 0) {\n-                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                if (addrStr.lastIndexOf(':', colIdx - 1) != -1) { // IPv6 without [] and port\n                     try {\n                         Inet6Address.getByName(addrStr);\n                         host = addrStr;\n"}}, {"oid": "876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "url": "https://github.com/apache/ignite/commit/876b19cf0a6a4d27ef38e62aa5edc09e4d488779", "message": "Improved code style; added cause to createParseError.", "committedDate": "2020-12-24T08:08:44Z", "type": "commit"}, {"oid": "1f20d54e307df57ac798f8dbc0e4955f08e49ae9", "url": "https://github.com/apache/ignite/commit/1f20d54e307df57ac798f8dbc0e4955f08e49ae9", "message": "Minor style changes", "committedDate": "2020-12-24T09:50:00Z", "type": "commit"}, {"oid": "628f8f32679a82682314311a397e0dcc5ac63f50", "url": "https://github.com/apache/ignite/commit/628f8f32679a82682314311a397e0dcc5ac63f50", "message": "Added overload to start method of LocalIgniteCluster with host; Added test of IPv6 host to ConnectionTest", "committedDate": "2020-12-25T07:31:07Z", "type": "commit"}, {"oid": "736eb3e0f1ae05aa416919f278ac27fb2e2a1b98", "url": "https://github.com/apache/ignite/commit/736eb3e0f1ae05aa416919f278ac27fb2e2a1b98", "message": "To look for cause of IgniteCheckedException in ClientListenerProcessor.java:203", "committedDate": "2020-12-25T10:41:12Z", "type": "commit"}, {"oid": "049853dcf43958f807c3a6c7af1cc5b81594701f", "url": "https://github.com/apache/ignite/commit/049853dcf43958f807c3a6c7af1cc5b81594701f", "message": "Added @Ignore to ConnectionTest.testIPv6NodeAddresses", "committedDate": "2020-12-25T17:20:27Z", "type": "commit"}]}