{"pr_number": 8239, "pr_title": "IGNITE-13429 Integration test of control.sh transactions' management", "pr_createdAt": "2020-09-10T14:38:48Z", "pr_url": "https://github.com/apache/ignite/pull/8239", "timeline": [{"oid": "c6aa3c17037670375cdf928def806eb720cc88dc", "url": "https://github.com/apache/ignite/commit/c6aa3c17037670375cdf928def806eb720cc88dc", "message": "IGNITE-13429 Implement tx list.", "committedDate": "2020-09-10T14:37:58Z", "type": "commit"}, {"oid": "583eb15d97e25a4b763564e7cae89b4d984380cc", "url": "https://github.com/apache/ignite/commit/583eb15d97e25a4b763564e7cae89b4d984380cc", "message": "IGNITE-13429 Wip.", "committedDate": "2020-09-10T14:37:58Z", "type": "commit"}, {"oid": "c4e4fdea8c24fe554704ef578175765c6c652707", "url": "https://github.com/apache/ignite/commit/c4e4fdea8c24fe554704ef578175765c6c652707", "message": "IGNITE-13429 Wip.", "committedDate": "2020-09-11T14:30:13Z", "type": "commit"}, {"oid": "dfbb4e9ccc9c7825f554bb52868fe1d7c9442a43", "url": "https://github.com/apache/ignite/commit/dfbb4e9ccc9c7825f554bb52868fe1d7c9442a43", "message": "IGNITE-13429 Wip.", "committedDate": "2020-09-14T15:19:15Z", "type": "commit"}, {"oid": "f48137c4caef5d2d627f70e04b89d74fa60ddc9a", "url": "https://github.com/apache/ignite/commit/f48137c4caef5d2d627f70e04b89d74fa60ddc9a", "message": "IGNITE-13429 Uncomment suite.", "committedDate": "2020-09-15T06:47:04Z", "type": "commit"}, {"oid": "a6f9e421dcfbcc6103fc491fd1700e2aea92c3c0", "url": "https://github.com/apache/ignite/commit/a6f9e421dcfbcc6103fc491fd1700e2aea92c3c0", "message": "IGNITE-13429 Remove unused import", "committedDate": "2020-09-15T06:48:21Z", "type": "commit"}, {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007", "url": "https://github.com/apache/ignite/commit/ba506c216486b39b5ffe56a2936030534ae9b007", "message": "IGNITE-13429 Remove hash.", "committedDate": "2020-09-15T06:51:33Z", "type": "commit"}, {"oid": "0b68e89aec357546e59730bd8ed60d34ed6c241b", "url": "https://github.com/apache/ignite/commit/0b68e89aec357546e59730bd8ed60d34ed6c241b", "message": "Merge remote-tracking branch 'remotes/origin/ignite-ducktape' into ignite-13429\n\n# Conflicts:\n#\tmodules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/utils/IgniteAwareApplication.java", "committedDate": "2020-09-15T10:21:18Z", "type": "commit"}, {"oid": "6f4a7447c7b0c461c3da0b2576200594dcfd5064", "url": "https://github.com/apache/ignite/commit/6f4a7447c7b0c461c3da0b2576200594dcfd5064", "message": "IGNITE-13429 Minor", "committedDate": "2020-09-15T10:22:45Z", "type": "commit"}, {"oid": "c1704517342f395323215daed56dca10fb550ce2", "url": "https://github.com/apache/ignite/commit/c1704517342f395323215daed56dca10fb550ce2", "message": "IGNITE-13429 Code review fix", "committedDate": "2020-09-15T11:49:28Z", "type": "commit"}, {"oid": "f579ad9dee616e05b82d0c19b03dff4ca5b6e6a0", "url": "https://github.com/apache/ignite/commit/f579ad9dee616e05b82d0c19b03dff4ca5b6e6a0", "message": "IGNITE-13429 minors.", "committedDate": "2020-09-15T12:29:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2Mjc3Ng==", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488562776", "bodyText": "markAsBroken(e)?", "author": "anton-vinogradov", "createdAt": "2020-09-15T10:35:48Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {\n+                        lockLatch.countDown();\n+\n+                        while (!terminated())\n+                            Thread.sleep(100L);\n+                    }\n+                    catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();", "originalCommit": "ba506c216486b39b5ffe56a2936030534ae9b007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1704517342f395323215daed56dca10fb550ce2", "chunk": "diff --git a/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java b/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\nindex 9b792f80e4..8285261d81 100644\n--- a/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\n+++ b/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\n\n@@ -24,14 +24,11 @@ import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.locks.Lock;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n import javax.cache.CacheException;\n import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteTransactions;\n import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n-import org.apache.ignite.internal.util.lang.IgnitePair;\n import org.apache.ignite.lang.IgniteUuid;\n import org.apache.ignite.transactions.Transaction;\n import org.apache.ignite.transactions.TransactionRollbackException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2NjQ3OA==", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488566478", "bodyText": "newline missed", "author": "anton-vinogradov", "createdAt": "2020-09-15T10:42:32Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {", "originalCommit": "ba506c216486b39b5ffe56a2936030534ae9b007", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1704517342f395323215daed56dca10fb550ce2", "chunk": "diff --git a/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java b/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\nindex 9b792f80e4..8285261d81 100644\n--- a/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\n+++ b/modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java\n\n@@ -24,14 +24,11 @@ import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.locks.Lock;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n import javax.cache.CacheException;\n import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteTransactions;\n import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n-import org.apache.ignite.internal.util.lang.IgnitePair;\n import org.apache.ignite.lang.IgniteUuid;\n import org.apache.ignite.transactions.Transaction;\n import org.apache.ignite.transactions.TransactionRollbackException;\n"}}, {"oid": "0aaf0bb33f51b00e1ce32b6e00cc7c356b26e934", "url": "https://github.com/apache/ignite/commit/0aaf0bb33f51b00e1ce32b6e00cc7c356b26e934", "message": "IGNITE-13429 Minors.", "committedDate": "2020-09-15T12:58:28Z", "type": "commit"}, {"oid": "02fa8d584717ce12653cdbf6188e859a5f19582e", "url": "https://github.com/apache/ignite/commit/02fa8d584717ce12653cdbf6188e859a5f19582e", "message": "IGNITE-13429 typo.", "committedDate": "2020-09-15T13:00:18Z", "type": "commit"}]}