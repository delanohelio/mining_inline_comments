{"pr_number": 7909, "pr_title": "IGNITE-13021: Calcite integration. Avoid full scans for disjunctive queries.", "pr_createdAt": "2020-06-08T12:07:10Z", "pr_url": "https://github.com/apache/ignite/pull/7909", "timeline": [{"oid": "b51ce314e7f8f611b179ed38eeafc9ff8ddf699b", "url": "https://github.com/apache/ignite/commit/b51ce314e7f8f611b179ed38eeafc9ff8ddf699b", "message": "WIP.", "committedDate": "2020-06-03T14:47:16Z", "type": "commit"}, {"oid": "3022cab2a0667c1b8c6d39b4a5a691706d30e672", "url": "https://github.com/apache/ignite/commit/3022cab2a0667c1b8c6d39b4a5a691706d30e672", "message": "WIP. debug.", "committedDate": "2020-06-04T08:32:06Z", "type": "commit"}, {"oid": "01205d8a93e6f3bf1c734474ff2d6d278b892da0", "url": "https://github.com/apache/ignite/commit/01205d8a93e6f3bf1c734474ff2d6d278b892da0", "message": "WIP. debug.", "committedDate": "2020-06-04T11:33:15Z", "type": "commit"}, {"oid": "bc769781e70db6612a458b91c151c6abfdbfd1f8", "url": "https://github.com/apache/ignite/commit/bc769781e70db6612a458b91c151c6abfdbfd1f8", "message": "Merge branch 'ignite-12248' into ignite-13021\n\n# Conflicts:\n#\tmodules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rel/IgniteTableScan.java", "committedDate": "2020-06-04T11:47:08Z", "type": "commit"}, {"oid": "03791a26dbc2e896d4da03ca162f23ae6202d5b2", "url": "https://github.com/apache/ignite/commit/03791a26dbc2e896d4da03ca162f23ae6202d5b2", "message": "WIP. debug.", "committedDate": "2020-06-04T14:24:37Z", "type": "commit"}, {"oid": "4c138953ba317b0b1836eaef30ae0f436bc611bd", "url": "https://github.com/apache/ignite/commit/4c138953ba317b0b1836eaef30ae0f436bc611bd", "message": "small fixes", "committedDate": "2020-06-04T18:35:27Z", "type": "commit"}, {"oid": "240480904563beed70978b38babfe8e018963e00", "url": "https://github.com/apache/ignite/commit/240480904563beed70978b38babfe8e018963e00", "message": "Fixed broken RegisterIndexRule.\nFixed LogicalOrToUnionRule.\nTests added.", "committedDate": "2020-06-08T12:04:33Z", "type": "commit"}, {"oid": "4a9077b619aeb4dabd8dfaf55ab3a413763c2113", "url": "https://github.com/apache/ignite/commit/4a9077b619aeb4dabd8dfaf55ab3a413763c2113", "message": "Fix styles.", "committedDate": "2020-06-08T13:57:37Z", "type": "commit"}, {"oid": "2024540980996372915a698d996e8e24df15e805", "url": "https://github.com/apache/ignite/commit/2024540980996372915a698d996e8e24df15e805", "message": "Merge branch 'ignite-12248' into ignite-13021", "committedDate": "2020-06-08T14:45:02Z", "type": "commit"}, {"oid": "eda248327ecc4c659ce78452a2e3df932b6e7ffc", "url": "https://github.com/apache/ignite/commit/eda248327ecc4c659ce78452a2e3df932b6e7ffc", "message": "Fix checkstyle.", "committedDate": "2020-06-09T07:46:21Z", "type": "commit"}, {"oid": "de97f6fdec2f4dc712042e0deda7185f8afa815f", "url": "https://github.com/apache/ignite/commit/de97f6fdec2f4dc712042e0deda7185f8afa815f", "message": "Fix test.", "committedDate": "2020-06-09T08:25:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4OTE1OA==", "url": "https://github.com/apache/ignite/pull/7909#discussion_r437289158", "bodyText": "How RexUtil.andNot handles NULL value? In the ticket's example\nSELECT * FROM emps WHERE name='A' \nUNION ALL\nSELECT * FROM emps WHERE surname='B'  AND LNNVL(name='A')\n\nwe need to make sure that row name=NULL, surname=B will be returned by the rewritten plan. Can we verify it by writing a test?", "author": "rkondakov", "createdAt": "2020-06-09T09:57:18Z", "path": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.calcite.rule.logical;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.RelFactories;\n+import org.apache.calcite.rel.logical.LogicalFilter;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.tools.RelBuilder;\n+\n+/**\n+ * Converts OR to UNION ALL.\n+ */\n+public class LogicalOrToUnionRule extends RelOptRule {\n+    /** Instance. */\n+    public static final RelOptRule INSTANCE = new LogicalOrToUnionRule(LogicalFilter.class, \"LogicalOrToUnionRule\");\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clazz Class of relational expression to match.\n+     * @param desc  Description, or null to guess description\n+     */\n+    private LogicalOrToUnionRule(Class<LogicalFilter> clazz, String desc) {\n+        super(\n+            operand(clazz, any()),\n+            RelFactories.LOGICAL_BUILDER, desc);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onMatch(RelOptRuleCall call) {\n+        final LogicalFilter rel = call.rel(0);\n+        final RelOptCluster cluster = rel.getCluster();\n+\n+        RexNode dnf = RexUtil.toDnf(cluster.getRexBuilder(), rel.getCondition());\n+\n+        if (!dnf.isA(SqlKind.OR))\n+            return;\n+\n+        List<RexNode> operands = RelOptUtil.disjunctions(dnf);\n+\n+        if (operands.size() != 2)\n+            return;\n+\n+        RelNode input = rel.getInput(0);\n+\n+        call.transformTo(rel, ImmutableMap.of(\n+            createUnionAll(cluster, input, operands.get(0), operands.get(1)), rel,\n+            createUnionAll(cluster, input, operands.get(1), operands.get(0)), rel\n+        ));\n+    }\n+\n+    /**\n+     * Creates 'UnionAll' for conditions.\n+     *\n+     * @param cluster The cluster UnionAll expression will belongs to.\n+     * @param input Input.\n+     * @param op1 First filter condition.\n+     * @param op2 Second filter condition.\n+     * @return UnionAll expression.\n+     */\n+    private RelNode createUnionAll(RelOptCluster cluster, RelNode input, RexNode op1, RexNode op2) {\n+        RelBuilder builder = relBuilderFactory.create(cluster, null);\n+\n+        builder.push(input).filter(op1);\n+        builder.push(input).filter(RexUtil.andNot(cluster.getRexBuilder(), op2, op1));", "originalCommit": "de97f6fdec2f4dc712042e0deda7185f8afa815f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "285f157dcdbc550416e663b4cb2c825733e4bc9d", "chunk": "diff --git a/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java b/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java\nindex b0687fa220..920319eb7f 100644\n--- a/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java\n+++ b/modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java\n\n@@ -17,6 +17,7 @@\n \n package org.apache.ignite.internal.processors.query.calcite.rule.logical;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import java.util.List;\n import org.apache.calcite.plan.RelOptCluster;\n"}}, {"oid": "3e1fead60b0b72f2e3619c17dfde9ce3aab23bf6", "url": "https://github.com/apache/ignite/commit/3e1fead60b0b72f2e3619c17dfde9ce3aab23bf6", "message": "WIP.", "committedDate": "2020-06-09T16:32:21Z", "type": "commit"}, {"oid": "285f157dcdbc550416e663b4cb2c825733e4bc9d", "url": "https://github.com/apache/ignite/commit/285f157dcdbc550416e663b4cb2c825733e4bc9d", "message": "Minor", "committedDate": "2020-06-10T10:34:00Z", "type": "commit"}, {"oid": "6b55a021eb1a2ce6962fbe26da9330fe6638de80", "url": "https://github.com/apache/ignite/commit/6b55a021eb1a2ce6962fbe26da9330fe6638de80", "message": "Mute test.", "committedDate": "2020-06-10T10:54:03Z", "type": "commit"}, {"oid": "06b1fadf082886894a80e02b1dcd412097c29547", "url": "https://github.com/apache/ignite/commit/06b1fadf082886894a80e02b1dcd412097c29547", "message": "Styles", "committedDate": "2020-06-10T11:08:54Z", "type": "commit"}, {"oid": "dceef8aaa4458af65adf787fe006f5e075403cd7", "url": "https://github.com/apache/ignite/commit/dceef8aaa4458af65adf787fe006f5e075403cd7", "message": "Minor.", "committedDate": "2020-06-10T12:21:44Z", "type": "commit"}, {"oid": "cce17064c732211157fb793d2f9480071c980c62", "url": "https://github.com/apache/ignite/commit/cce17064c732211157fb793d2f9480071c980c62", "message": "Fix tests.", "committedDate": "2020-06-11T08:32:08Z", "type": "commit"}, {"oid": "6a07869fa5cc5a397d6a8cd46ccd9379fbaf394d", "url": "https://github.com/apache/ignite/commit/6a07869fa5cc5a397d6a8cd46ccd9379fbaf394d", "message": "Minor.", "committedDate": "2020-06-11T13:31:24Z", "type": "commit"}]}