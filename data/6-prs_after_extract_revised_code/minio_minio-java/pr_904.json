{"pr_number": 904, "pr_title": "Rectify the validation condition & add functional test", "pr_createdAt": "2020-04-15T06:27:52Z", "pr_url": "https://github.com/minio/minio-java/pull/904", "timeline": [{"oid": "190dc46512c590b69ad11cd72064ecce965d5e23", "url": "https://github.com/minio/minio-java/commit/190dc46512c590b69ad11cd72064ecce965d5e23", "message": "Rectify the validation condition", "committedDate": "2020-04-15T07:03:31Z", "type": "forcePushed"}, {"oid": "d2e781996355554e7c6b499be28fb890d1e4e0f0", "url": "https://github.com/minio/minio-java/commit/d2e781996355554e7c6b499be28fb890d1e4e0f0", "message": "Rectify the validation condition", "committedDate": "2020-04-15T07:07:37Z", "type": "forcePushed"}, {"oid": "a8881b56f1021c2ad67693ff2870ae4ef0e74721", "url": "https://github.com/minio/minio-java/commit/a8881b56f1021c2ad67693ff2870ae4ef0e74721", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T10:20:52Z", "type": "forcePushed"}, {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "url": "https://github.com/minio/minio-java/commit/bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T10:58:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408779381", "bodyText": "Shouldn't this be bucketConfig.duration() instead of bucketConfig.duration().duration()", "author": "nitisht", "createdAt": "2020-04-15T11:44:11Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -56,7 +56,8 @@ public static void main(String[] args)\n \n       System.out.println(\"Default retention configuration of bucket\");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.println(\n+          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());", "originalCommit": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNDMyOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408804329", "bodyText": "bucketConfig.duration() returns a RetentionDuration object which actually contains the duration and unit i.e. days or years.\nReturning bucketConfig.duration()  will  just print the object which is  composed of the name of the class, an @ symbol and the hashcode of the object in hexadecimal.\nWe need to fetch the exact duration and unit and thus this change is needed.", "author": "sinhaashish", "createdAt": "2020-04-15T12:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MTk5Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408871996", "bodyText": "Have toString() to RetentionDurationDays and RetentionDurationYears classes to have friendlier message.", "author": "balamurugana", "createdAt": "2020-04-15T14:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "823aa4f280607779145306d93a22a0adcfd54732", "chunk": "diff --git a/examples/SetGetBucketObjectLockConfig.java b/examples/SetGetBucketObjectLockConfig.java\nindex a1e622ab..c2360a50 100644\n--- a/examples/SetGetBucketObjectLockConfig.java\n+++ b/examples/SetGetBucketObjectLockConfig.java\n\n@@ -54,10 +54,9 @@ public class SetGetBucketObjectLockConfig {\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n+      System.out.println(\"Default retention configuration of bucket \");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\n-          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());\n+      System.out.println(\"Duration: \" + bucketConfig.duration());\n     } catch (MinioException e) {\n       System.out.println(\"Error occurred: \" + e);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDg3OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408870879", "bodyText": "Have no arg constructor to RetentionDurationYears too.", "author": "balamurugana", "createdAt": "2020-04-15T14:08:31Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -25,6 +25,8 @@\n   @Text(required = false)\n   private Integer days;\n \n+  public RetentionDurationDays() {}", "originalCommit": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e27280352c089c5a5b14f45c164562e58d653bc0", "url": "https://github.com/minio/minio-java/commit/e27280352c089c5a5b14f45c164562e58d653bc0", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-15T14:14:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTM2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919363", "bodyText": "days may be null. Below is the right way to fix\nif (days == null) {\n  return null;\n}\n\nreturn days.toString() + ((days == 1) ? \" day\" : \" days\");", "author": "balamurugana", "createdAt": "2020-04-15T15:10:59Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return days;\n   }\n+\n+  /** Returns RetentionDurationDays as string. */\n+  @Override\n+  public String toString() {\n+    return (days == 1) ? days + \" day\" : days + \" days\";", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823aa4f280607779145306d93a22a0adcfd54732", "chunk": "diff --git a/api/src/main/java/io/minio/messages/RetentionDurationDays.java b/api/src/main/java/io/minio/messages/RetentionDurationDays.java\nindex 1fc38a5c..ad0eaa5a 100644\n--- a/api/src/main/java/io/minio/messages/RetentionDurationDays.java\n+++ b/api/src/main/java/io/minio/messages/RetentionDurationDays.java\n\n@@ -42,6 +42,9 @@ public class RetentionDurationDays implements RetentionDuration {\n   /** Returns RetentionDurationDays as string. */\n   @Override\n   public String toString() {\n-    return (days == 1) ? days + \" day\" : days + \" days\";\n+    if (days == null) {\n+      return \"\";\n+    }\n+    return days.toString() + ((days == 1) ? \" day\" : \" days\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTcxMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919710", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-15T15:11:25Z", "path": "api/src/main/java/io/minio/messages/RetentionDurationYears.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return years;\n   }\n+\n+  /** Returns RetentionDurationYears as string. */\n+  @Override\n+  public String toString() {\n+    return (years == 1) ? years + \" year\" : years + \" years\";", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823aa4f280607779145306d93a22a0adcfd54732", "chunk": "diff --git a/api/src/main/java/io/minio/messages/RetentionDurationYears.java b/api/src/main/java/io/minio/messages/RetentionDurationYears.java\nindex b9b0d9ea..50b75e66 100644\n--- a/api/src/main/java/io/minio/messages/RetentionDurationYears.java\n+++ b/api/src/main/java/io/minio/messages/RetentionDurationYears.java\n\n@@ -42,6 +42,9 @@ public class RetentionDurationYears implements RetentionDuration {\n   /** Returns RetentionDurationYears as string. */\n   @Override\n   public String toString() {\n-    return (years == 1) ? years + \" year\" : years + \" years\";\n+    if (years == null) {\n+      return \"\";\n+    }\n+    return years.toString() + ((years == 1) ? \" year\" : \" years\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408920463", "bodyText": "no change required", "author": "balamurugana", "createdAt": "2020-04-15T15:12:25Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,9 +54,8 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n-      System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.print(\"Default retention configuration of bucket is \");\n+      System.out.println(bucketConfig.mode() + \" mode for \" + bucketConfig.duration().toString());", "originalCommit": "6745475e46b3d6c92bbea3982a3af10676262d31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823aa4f280607779145306d93a22a0adcfd54732", "chunk": "diff --git a/examples/SetGetBucketObjectLockConfig.java b/examples/SetGetBucketObjectLockConfig.java\nindex 8ffdd566..c2360a50 100644\n--- a/examples/SetGetBucketObjectLockConfig.java\n+++ b/examples/SetGetBucketObjectLockConfig.java\n\n@@ -54,8 +54,9 @@ public class SetGetBucketObjectLockConfig {\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.print(\"Default retention configuration of bucket is \");\n-      System.out.println(bucketConfig.mode() + \" mode for \" + bucketConfig.duration().toString());\n+      System.out.println(\"Default retention configuration of bucket \");\n+      System.out.println(\"Mode: \" + bucketConfig.mode());\n+      System.out.println(\"Duration: \" + bucketConfig.duration());\n     } catch (MinioException e) {\n       System.out.println(\"Error occurred: \" + e);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTc0Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408979746", "bodyText": "Why not a new line?", "author": "balamurugana", "createdAt": "2020-04-15T16:36:24Z", "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,7 +54,7 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n+      System.out.print(\"Default retention configuration of bucket  \");", "originalCommit": "0eed207fdf77067c0c6a4d02115a6252552a566c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823aa4f280607779145306d93a22a0adcfd54732", "chunk": "diff --git a/examples/SetGetBucketObjectLockConfig.java b/examples/SetGetBucketObjectLockConfig.java\nindex e0747ae2..c2360a50 100644\n--- a/examples/SetGetBucketObjectLockConfig.java\n+++ b/examples/SetGetBucketObjectLockConfig.java\n\n@@ -54,7 +54,7 @@ public class SetGetBucketObjectLockConfig {\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.print(\"Default retention configuration of bucket  \");\n+      System.out.println(\"Default retention configuration of bucket \");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n       System.out.println(\"Duration: \" + bucketConfig.duration());\n     } catch (MinioException e) {\n"}}, {"oid": "823aa4f280607779145306d93a22a0adcfd54732", "url": "https://github.com/minio/minio-java/commit/823aa4f280607779145306d93a22a0adcfd54732", "message": "Implement toString()", "committedDate": "2020-04-15T17:32:44Z", "type": "forcePushed"}, {"oid": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "url": "https://github.com/minio/minio-java/commit/8bdbc4a876de4884683c25d1dd1f6de8373cae96", "message": "Implement toString()", "committedDate": "2020-04-15T17:41:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMTE5Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409031196", "bodyText": "This fix is incorrect. Either both values non-null or null. i.e. mode != null && duration != null and mode == null && duration == null are valid.\nBasically you need to have current if as else if", "author": "balamurugana", "createdAt": "2020-04-15T18:00:15Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -45,7 +45,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       this.rule = new Rule(mode, duration);\n     }\n \n-    if (mode != null || duration != null) {\n+    if (mode == null || duration == null) {", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "chunk": "diff --git a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\nindex e6c49821..cde6d909 100644\n--- a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n+++ b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n\n@@ -43,10 +43,10 @@ public class ObjectLockConfiguration {\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode == null || duration == null) {\n-      throw new IllegalArgumentException(\"mode or duration is null\");\n+    } else if (mode == null) {\n+      throw new IllegalArgumentException(\"mode is null\");\n+    } else if (duration == null) {\n+      throw new IllegalArgumentException(\"duration is null\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMjc3Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409032773", "bodyText": "use ContentInputStream here with 1 KB size.", "author": "balamurugana", "createdAt": "2020-04-15T18:03:03Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 10; i++) {\n+        builder.append(\n+            \"Sphinx of black quartz, judge my vow: Used by Adobe InDesign to display font samples. \");\n+        builder.append(\"(29 letters)\\n\");\n+        builder.append(\n+            \"Jackdaws love my big sphinx of quartz: Similarly, used by Windows XP for some fonts. \");\n+        builder.append(\"---\\n\");\n+      }\n+      // Create a InputStream for object upload.\n+      ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes(\"UTF-8\"));", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 7f93a092..b7fc29d1 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,14 +3284,100 @@ public class FunctionalTest {\n     }\n   }\n \n-  /**\n-   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n-   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n-   */\n-  public static void enableDisableObjectLegalHold_test() throws Exception {\n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzNTU5OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409035599", "bodyText": "we would need to have two separate tests here.\n\nenableObjectLegalHold() - enable legal hold on an object; on success, overwrite/delete object should fail\ndisableObjectLegalHold() - disable legal hold on an object; on success, overwrite/delete object should succeed", "author": "balamurugana", "createdAt": "2020-04-15T18:07:58Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");", "originalCommit": "8bdbc4a876de4884683c25d1dd1f6de8373cae96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 7f93a092..b7fc29d1 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,14 +3284,100 @@ public class FunctionalTest {\n     }\n   }\n \n-  /**\n-   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n-   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n-   */\n-  public static void enableDisableObjectLegalHold_test() throws Exception {\n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODA5MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409058090", "bodyText": "Can we not elaborate a bit more on the error here? by doing\nif (mode != null && duration != null) {\n} else if (mode == null) {\n       IllegalArgumentException(\"mode is null\");\n} else if (duration == null) {\n       IllegalArgumentException(\"duration is null\");\n}", "author": "harshavardhana", "createdAt": "2020-04-15T18:46:27Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,9 +43,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode == null || duration == null) {\n+    } else if (mode != null || duration != null) {\n       throw new IllegalArgumentException(\"mode or duration is null\");", "originalCommit": "b8583469e670b627c2fc976a786890bfa9a816fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "chunk": "diff --git a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\nindex 5fc1a593..cde6d909 100644\n--- a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n+++ b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n\n@@ -43,8 +43,10 @@ public class ObjectLockConfiguration {\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    } else if (mode != null || duration != null) {\n-      throw new IllegalArgumentException(\"mode or duration is null\");\n+    } else if (mode == null) {\n+      throw new IllegalArgumentException(\"mode is null\");\n+    } else if (duration == null) {\n+      throw new IllegalArgumentException(\"duration is null\");\n     }\n   }\n \n"}}, {"oid": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "url": "https://github.com/minio/minio-java/commit/4851b03fca36e3809a0c50aadf4dd807b590e9f1", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-15T19:23:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4ODU3OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409088579", "bodyText": "This is wrong check. You would need to preserve current if with else if with specific error message is requested\n    else if (mode != null || duration != null) {\n      if (mode == null) {\n        throw new IllegalArgumentException(\"mode is null\");\n      }\n      throw new IllegalArgumentException(\"duration is null\");\n    }", "author": "balamurugana", "createdAt": "2020-04-15T19:40:11Z", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,10 +43,10 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode != null || duration != null) {\n-      throw new IllegalArgumentException(\"mode or duration is null\");\n+    } else if (mode == null) {\n+      throw new IllegalArgumentException(\"mode is null\");\n+    } else if (duration == null) {\n+      throw new IllegalArgumentException(\"duration is null\");", "originalCommit": "4851b03fca36e3809a0c50aadf4dd807b590e9f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a56f177b7cd72462843f01890ab1eb379a06549a", "chunk": "diff --git a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\nindex cde6d909..99b3f437 100644\n--- a/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n+++ b/api/src/main/java/io/minio/messages/ObjectLockConfiguration.java\n\n@@ -43,9 +43,10 @@ public class ObjectLockConfiguration {\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    } else if (mode == null) {\n-      throw new IllegalArgumentException(\"mode is null\");\n-    } else if (duration == null) {\n+    } else if (mode != null || duration != null) {\n+      if (mode == null) {\n+        throw new IllegalArgumentException(\"mode is null\");\n+      }\n       throw new IllegalArgumentException(\"duration is null\");\n     }\n   }\n"}}, {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a", "url": "https://github.com/minio/minio-java/commit/a56f177b7cd72462843f01890ab1eb379a06549a", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-16T00:48:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2ODg1Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409268856", "bodyText": "bucketName is good enough.", "author": "balamurugana", "createdAt": "2020-04-16T04:06:06Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269095", "bodyText": "Is this error message same in AWS S3?", "author": "balamurugana", "createdAt": "2020-04-16T04:07:05Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4NjgwNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986807", "bodyText": "AWS doesn't error out if  version is  not passed. So removed this check.", "author": "sinhaashish", "createdAt": "2020-04-17T04:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTQwNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269406", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:08:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTczMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269730", "bodyText": "just bucketName is good enough", "author": "balamurugana", "createdAt": "2020-04-16T04:09:43Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDA2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270068", "bodyText": "align with method name i.e. setDefaultRetention", "author": "balamurugana", "createdAt": "2020-04-16T04:11:14Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDE4OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270189", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:11:50Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDM0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270345", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:12:20Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MTM0OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409271349", "bodyText": "use == operator to avoid NullPointerException", "author": "balamurugana", "createdAt": "2020-04-16T04:16:17Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272183", "bodyText": "For AWS S3, versionId should be passed i.e. this call will fail. Can you confirm?", "author": "balamurugana", "createdAt": "2020-04-16T04:19:48Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NTIxMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409395211", "bodyText": "Modified the code in MinioClient.java to\n    if (versionId != null && !versionId.isEmpty()) {\n      queryParamMap.put(\"versionId\", versionId);\n    }\n\nSo here in test case if we pass \"\" , the versionId is not set and this test passes against S3.", "author": "sinhaashish", "createdAt": "2020-04-16T08:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDc5MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409404790", "bodyText": "We may need to use this logic in all methods accepting versionId argument.", "author": "balamurugana", "createdAt": "2020-04-16T09:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjkxNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272916", "bodyText": "you are not capturing this error in case of mint mode. we need this error in mint mode too.", "author": "balamurugana", "createdAt": "2020-04-16T04:22:35Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MzU0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409273545", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:24:53Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274108", "bodyText": "this cleanup won't be executed if one of above conditions throw exceptions. you would need to fix it accordingly.", "author": "balamurugana", "createdAt": "2020-04-16T04:27:05Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4Njk0OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986949", "bodyText": "added finally block for cleanup", "author": "sinhaashish", "createdAt": "2020-04-17T04:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDM3NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274374", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:28:11Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDQzMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274430", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-16T04:28:25Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTE3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275178", "bodyText": "repetitive catch block here.", "author": "balamurugana", "createdAt": "2020-04-16T04:31:23Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTIwNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275207", "bodyText": "repetitive catch block here.", "author": "balamurugana", "createdAt": "2020-04-16T04:31:33Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTMwMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275301", "bodyText": "this try has no meaning", "author": "balamurugana", "createdAt": "2020-04-16T04:31:52Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTQ3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275478", "bodyText": "this clean up won't be executed if above throws an exception.", "author": "balamurugana", "createdAt": "2020-04-16T04:32:39Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI0NQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276245", "bodyText": "rename has expectedConfig", "author": "balamurugana", "createdAt": "2020-04-16T04:35:37Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI5OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276298", "bodyText": "have it as config", "author": "balamurugana", "createdAt": "2020-04-16T04:35:53Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjQyOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276428", "bodyText": "this should be captured in mint mode as well", "author": "balamurugana", "createdAt": "2020-04-16T04:36:24Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzEyMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277120", "bodyText": "This check should be optimal\nconfig.duration().unit() == expectedConfig.duration().unit() && config.duration().duration() == expectedConfig.duration().duration()", "author": "balamurugana", "createdAt": "2020-04-16T04:39:23Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzI2Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277263", "bodyText": "capture in mint mode too", "author": "balamurugana", "createdAt": "2020-04-16T04:39:57Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzQzMA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277430", "bodyText": "there is already stringifier.", "author": "balamurugana", "createdAt": "2020-04-16T04:40:36Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzUzMQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277531", "bodyText": "you should use expectedConfig.duration()", "author": "balamurugana", "createdAt": "2020-04-16T04:40:56Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzY0Ng==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277646", "bodyText": "cleanup issue in case of exception raised.", "author": "balamurugana", "createdAt": "2020-04-16T04:41:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));\n+      }\n+\n+      client.removeBucket(bucketNameWithLock);", "originalCommit": "a56f177b7cd72462843f01890ab1eb379a06549a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex b7fc29d1..7f93a092 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3284,100 +3284,14 @@ public class FunctionalTest {\n     }\n   }\n \n-  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void enableObjectLegalHold_test() throws Exception {\n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n     if (!mintEnv) {\n       System.out.println(\n           \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n-    }\n-    long startTime = System.currentTimeMillis();\n-    String bucketNameLegalHold = getRandomName();\n-    String objectName = getRandomName();\n-    try {\n-      client.makeBucket(bucketNameLegalHold, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \"\n-                + \"True\"\n-                + \", got: \"\n-                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n-      }\n-\n-      try {\n-        try (final InputStream is = new ContentInputStream(1 * KB)) {\n-          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n-        }\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-      try {\n-        client.removeObject(bucketNameLegalHold, objectName);\n-      } catch (ErrorResponseException e) {\n-        if (!e.errorResponse()\n-            .message()\n-            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n-          mintFailedLog(\n-              \"enableObjectLegalHold\",\n-              \"(String bucketName, String objectName, String versionId)\",\n-              startTime,\n-              null,\n-              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-          throw e;\n-        }\n-      }\n-\n-      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n-      client.removeObject(bucketNameLegalHold, objectName);\n-      client.removeBucket(bucketNameLegalHold);\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-            null,\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n-      }\n-    }\n-  }\n-\n-  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n-  public static void disableObjectLegalHold_test() throws Exception {\n-    if (!mintEnv) {\n       System.out.println(\n           \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n     }\n"}}, {"oid": "fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "url": "https://github.com/minio/minio-java/commit/fa88d6fdafbe7b7706c3deea2c6dd5d54d91c399", "message": "Rectify the validation condition & add functionalTest", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "56232d8e6c58ed6a0ffe94a8c44651051ed33fe2", "url": "https://github.com/minio/minio-java/commit/56232d8e6c58ed6a0ffe94a8c44651051ed33fe2", "message": "Address Bala's comment", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "93acc1b946d4b3f4f96761905f23c444be499661", "url": "https://github.com/minio/minio-java/commit/93acc1b946d4b3f4f96761905f23c444be499661", "message": "Implement toString()", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "51a7cc078b4c65c084f9ce84d22cbc44ffefc08f", "url": "https://github.com/minio/minio-java/commit/51a7cc078b4c65c084f9ce84d22cbc44ffefc08f", "message": "Can pass either mode and duration or none", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "28ea7c27b87d1573dcea3f0152f7846bbf4cd7d9", "url": "https://github.com/minio/minio-java/commit/28ea7c27b87d1573dcea3f0152f7846bbf4cd7d9", "message": "Add test for enableObjectLegalHold & disableObjectLegalHold", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "url": "https://github.com/minio/minio-java/commit/f7a2e3b1873442104f1558678f991dcc1043b2dd", "message": "Address Bala's review comment in Functional Test", "committedDate": "2020-04-16T19:26:02Z", "type": "commit"}, {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "url": "https://github.com/minio/minio-java/commit/f7a2e3b1873442104f1558678f991dcc1043b2dd", "message": "Address Bala's review comment in Functional Test", "committedDate": "2020-04-16T19:26:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1ODI5Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409958297", "bodyText": "keep this list sorted", "author": "balamurugana", "createdAt": "2020-04-17T02:36:25Z", "path": "api/src/main/java/io/minio/ErrorCode.java", "diffHunk": "@@ -156,7 +156,10 @@\n   USER_KEY_MUST_BE_SPECIFIED(\n       \"UserKeyMustBeSpecified\",\n       \"The bucket POST must contain the specified field name or check the order of the fields\"),\n-  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\");\n+  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\"),\n+  NO_SUCH_OBJECT_LOCK_CONFIGURATION(", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/api/src/main/java/io/minio/ErrorCode.java b/api/src/main/java/io/minio/ErrorCode.java\nindex b15b8030..28191ddd 100644\n--- a/api/src/main/java/io/minio/ErrorCode.java\n+++ b/api/src/main/java/io/minio/ErrorCode.java\n\n@@ -156,10 +159,7 @@ public enum ErrorCode {\n   USER_KEY_MUST_BE_SPECIFIED(\n       \"UserKeyMustBeSpecified\",\n       \"The bucket POST must contain the specified field name or check the order of the fields\"),\n-  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\"),\n-  NO_SUCH_OBJECT_LOCK_CONFIGURATION(\n-      \"NoSuchObjectLockConfiguration\",\n-      \"The specified object does not have a ObjectLock configuration\");\n+  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\");\n \n   private final String code;\n   private final String message;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTkzNw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409959937", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap) {\n...\n...\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn null;", "author": "balamurugana", "createdAt": "2020-04-17T02:41:59Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,27 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    Response response = null;\n+    Retention retention = new Retention();\n+    try {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex 393b0468..c39883d3 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3519,23 +3519,16 @@ public class MinioClient {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = null;\n-    Retention retention = new Retention();\n-    try {\n-      response = executeGet(bucketName, objectName, null, queryParamMap);\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n       ResponseBody body = response.body();\n-      retention = Xml.unmarshal(Retention.class, body.charStream());\n-\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      return retention;\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n         throw e;\n       }\n-    } finally {\n-      if (response != null) {\n-        response.body().close();\n-      }\n     }\n-    return retention;\n+    return null;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MTMxOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409961319", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n....\n....\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn false;", "author": "balamurugana", "createdAt": "2020-04-17T02:47:15Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-\n-    try (ResponseBody body = response.body()) {\n+    Response response = null;\n+    try {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex 393b0468..c39883d3 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3646,28 +3639,23 @@ public class MinioClient {\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws IllegalArgumentException, InsufficientDataException, InternalException,\n-          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n-          NoSuchAlgorithmException, XmlParserException {\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n     if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = null;\n-    try {\n-      response = executeGet(bucketName, objectName, null, queryParamMap);\n+\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n       ResponseBody body = response.body();\n       LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());\n       return result.status();\n     } catch (ErrorResponseException e) {\n-      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n-        return false;\n-      }\n-    } finally {\n-      if (response != null) {\n-        response.body().close();\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n+        throw e;\n       }\n     }\n     return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NjM3Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966372", "bodyText": "This is problematic to have an failure here. Below logic is better to handle corners.\n    try {\n      client.makeBucket(...);\n      try {\n        client.putObject(...);\n        client.enableObjectLegalHold(...);\n        if (!client.isObjectLegalHoldEnabled(...)) {\n          throw Exception(...);\n        }\n        client.disableObjectLegalHold(...);\n        mintSucessLog(...);\n      } finally {\n        client.removeObject(...);\n        client.removeBucket(...);\n      }\n    } catch (Exception e) {\n      ErrorResponse errorResponse = null;\n      if (e instanceof ErrorResponseException) {\n        ErrorResponseException exp = (ErrorResponseException) e;\n        errorResponse = exp.errorResponse();\n      }\n\n      // Ignore NotImplemented error\n      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime);\n      } else {\n        mintFailedLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    }", "author": "balamurugana", "createdAt": "2020-04-17T03:06:33Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex edfe5478..8dea3156 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3295,30 +3295,31 @@ public class FunctionalTest {\n     String objectName = getRandomName();\n     try {\n       client.makeBucket(bucketName, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketName, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        mintFailedLog(\n-            \"enableObjectLegalHold\",\n-            \"(String bucketName, String objectName, String versionId)\",\n-            startTime,\n-            \"FAILED\" + \" >>> \",\n-            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n       }\n-\n-      client.disableObjectLegalHold(bucketName, objectName, \"\");\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n     } catch (Exception e) {\n       ErrorResponse errorResponse = null;\n       if (e instanceof ErrorResponseException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2Njc3OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966778", "bodyText": "return null to versionId than empty string. you can fix this everywhere in FunctionalTest", "author": "balamurugana", "createdAt": "2020-04-17T03:08:13Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex edfe5478..8dea3156 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3295,30 +3295,31 @@ public class FunctionalTest {\n     String objectName = getRandomName();\n     try {\n       client.makeBucket(bucketName, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketName, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        mintFailedLog(\n-            \"enableObjectLegalHold\",\n-            \"(String bucketName, String objectName, String versionId)\",\n-            startTime,\n-            \"FAILED\" + \" >>> \",\n-            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n       }\n-\n-      client.disableObjectLegalHold(bucketName, objectName, \"\");\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n     } catch (Exception e) {\n       ErrorResponse errorResponse = null;\n       if (e instanceof ErrorResponseException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzQ2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967468", "bodyText": "We still throw ErrorResponseException, hence there is no change here.", "author": "balamurugana", "createdAt": "2020-04-17T03:10:52Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex 393b0468..c39883d3 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3646,28 +3639,23 @@ public class MinioClient {\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws IllegalArgumentException, InsufficientDataException, InternalException,\n-          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n-          NoSuchAlgorithmException, XmlParserException {\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n     if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = null;\n-    try {\n-      response = executeGet(bucketName, objectName, null, queryParamMap);\n+\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n       ResponseBody body = response.body();\n       LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());\n       return result.status();\n     } catch (ErrorResponseException e) {\n-      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n-        return false;\n-      }\n-    } finally {\n-      if (response != null) {\n-        response.body().close();\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n+        throw e;\n       }\n     }\n     return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzgxNg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967816", "bodyText": "above logic applies here.", "author": "balamurugana", "createdAt": "2020-04-17T03:12:30Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex edfe5478..8dea3156 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3295,30 +3295,31 @@ public class FunctionalTest {\n     String objectName = getRandomName();\n     try {\n       client.makeBucket(bucketName, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketName, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        mintFailedLog(\n-            \"enableObjectLegalHold\",\n-            \"(String bucketName, String objectName, String versionId)\",\n-            startTime,\n-            \"FAILED\" + \" >>> \",\n-            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n       }\n-\n-      client.disableObjectLegalHold(bucketName, objectName, \"\");\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n     } catch (Exception e) {\n       ErrorResponse errorResponse = null;\n       if (e instanceof ErrorResponseException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODA0Mw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968043", "bodyText": "above logic applies here.", "author": "balamurugana", "createdAt": "2020-04-17T03:13:27Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex edfe5478..8dea3156 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3295,30 +3295,31 @@ public class FunctionalTest {\n     String objectName = getRandomName();\n     try {\n       client.makeBucket(bucketName, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketName, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        mintFailedLog(\n-            \"enableObjectLegalHold\",\n-            \"(String bucketName, String objectName, String versionId)\",\n-            startTime,\n-            \"FAILED\" + \" >>> \",\n-            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n       }\n-\n-      client.disableObjectLegalHold(bucketName, objectName, \"\");\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n     } catch (Exception e) {\n       ErrorResponse errorResponse = null;\n       if (e instanceof ErrorResponseException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODE0Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968142", "bodyText": "above logic applies here.", "author": "balamurugana", "createdAt": "2020-04-17T03:13:46Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketName, config);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {", "originalCommit": "f7a2e3b1873442104f1558678f991dcc1043b2dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex edfe5478..8dea3156 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3295,30 +3295,31 @@ public class FunctionalTest {\n     String objectName = getRandomName();\n     try {\n       client.makeBucket(bucketName, null, true);\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      // Enable object legal hold.\n-      client.enableObjectLegalHold(bucketName, objectName, \"\");\n-\n-      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n-        System.out.println(\n-            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        mintFailedLog(\n-            \"enableObjectLegalHold\",\n-            \"(String bucketName, String objectName, String versionId)\",\n-            startTime,\n-            \"FAILED\" + \" >>> \",\n-            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n       }\n-\n-      client.disableObjectLegalHold(bucketName, objectName, \"\");\n-      mintSuccessLog(\n-          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n-          null,\n-          startTime);\n     } catch (Exception e) {\n       ErrorResponse errorResponse = null;\n       if (e instanceof ErrorResponseException) {\n"}}, {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "url": "https://github.com/minio/minio-java/commit/9560470e32d6469ea0d42d72fafd0795607f9ff4", "message": "Address few more review comments", "committedDate": "2020-04-17T10:20:33Z", "type": "commit"}, {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "url": "https://github.com/minio/minio-java/commit/9560470e32d6469ea0d42d72fafd0795607f9ff4", "message": "Address few more review comments", "committedDate": "2020-04-17T10:20:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjE1Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352157", "bodyText": "you could directly use response.body().charStream()", "author": "balamurugana", "createdAt": "2020-04-17T17:00:04Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex c39883d3..7995ae4d 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3520,11 +3520,10 @@ public class MinioClient {\n     }\n \n     try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n-      ResponseBody body = response.body();\n-      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      Retention retention = Xml.unmarshal(Retention.class, response.body().charStream());\n       return retention;\n     } catch (ErrorResponseException e) {\n-      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n         throw e;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjU2OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352569", "bodyText": "wrong check. e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION", "author": "balamurugana", "createdAt": "2020-04-17T17:00:50Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      return retention;\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex c39883d3..7995ae4d 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3520,11 +3520,10 @@ public class MinioClient {\n     }\n \n     try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n-      ResponseBody body = response.body();\n-      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      Retention retention = Xml.unmarshal(Retention.class, response.body().charStream());\n       return retention;\n     } catch (ErrorResponseException e) {\n-      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n         throw e;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1Mjk2NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352964", "bodyText": "same as above", "author": "balamurugana", "createdAt": "2020-04-17T17:01:35Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3647,17 +3645,20 @@ public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, St\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n \n-    try (ResponseBody body = response.body()) {\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n       LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex c39883d3..7995ae4d 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -3650,8 +3648,7 @@ public class MinioClient {\n     }\n \n     try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n-      ResponseBody body = response.body();\n-      LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());\n+      LegalHold result = Xml.unmarshal(LegalHold.class, response.body().charStream());\n       return result.status();\n     } catch (ErrorResponseException e) {\n       if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODE1NA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358154", "bodyText": "you could directly use and remove unused variables.\nif (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n}", "author": "balamurugana", "createdAt": "2020-04-17T17:12:04Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 8dea3156..acad194d 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3299,17 +3299,10 @@ public class FunctionalTest {\n         try (final InputStream is = new ContentInputStream(1 * KB)) {\n           client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n         }\n-        // Enable object legal hold.\n-        boolean expectedStatus = true;\n-        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n-        if (!isObjectLockEnabled) {\n-          throw new Exception(\n-              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n-                  + expectedStatus\n-                  + \", Got: \"\n-                  + isObjectLockEnabled);\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n         }\n         client.disableObjectLegalHold(bucketName, objectName, null);\n         mintSuccessLog(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODg3MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358871", "bodyText": "you could directly use and remove unused variables.\nif (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n}", "author": "balamurugana", "createdAt": "2020-04-17T17:13:28Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 8dea3156..acad194d 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3299,17 +3299,10 @@ public class FunctionalTest {\n         try (final InputStream is = new ContentInputStream(1 * KB)) {\n           client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n         }\n-        // Enable object legal hold.\n-        boolean expectedStatus = true;\n-        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n-        if (!isObjectLockEnabled) {\n-          throw new Exception(\n-              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n-                  + expectedStatus\n-                  + \", Got: \"\n-                  + isObjectLockEnabled);\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n         }\n         client.disableObjectLegalHold(bucketName, objectName, null);\n         mintSuccessLog(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTYxOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359618", "bodyText": "you can remove these obvious comments.", "author": "balamurugana", "createdAt": "2020-04-17T17:14:46Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 8dea3156..acad194d 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3299,17 +3299,10 @@ public class FunctionalTest {\n         try (final InputStream is = new ContentInputStream(1 * KB)) {\n           client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n         }\n-        // Enable object legal hold.\n-        boolean expectedStatus = true;\n-        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n-        if (!isObjectLockEnabled) {\n-          throw new Exception(\n-              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n-                  + expectedStatus\n-                  + \", Got: \"\n-                  + isObjectLockEnabled);\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n         }\n         client.disableObjectLegalHold(bucketName, objectName, null);\n         mintSuccessLog(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTc3MA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359770", "bodyText": "you can remove these obvious comments everywhere.", "author": "balamurugana", "createdAt": "2020-04-17T17:15:02Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 8dea3156..acad194d 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3299,17 +3299,10 @@ public class FunctionalTest {\n         try (final InputStream is = new ContentInputStream(1 * KB)) {\n           client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n         }\n-        // Enable object legal hold.\n-        boolean expectedStatus = true;\n-        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n-        if (!isObjectLockEnabled) {\n-          throw new Exception(\n-              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n-                  + expectedStatus\n-                  + \", Got: \"\n-                  + isObjectLockEnabled);\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n         }\n         client.disableObjectLegalHold(bucketName, objectName, null);\n         mintSuccessLog(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MDgyOQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410360829", "bodyText": "you can use new RetentionDurationYears(N) for completeness.", "author": "balamurugana", "createdAt": "2020-04-17T17:17:02Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration\n+        client.setDefaultRetention(bucketName, config);\n+      } finally {\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration expectedConfig =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));", "originalCommit": "9560470e32d6469ea0d42d72fafd0795607f9ff4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "chunk": "diff --git a/functional/FunctionalTest.java b/functional/FunctionalTest.java\nindex 8dea3156..acad194d 100644\n--- a/functional/FunctionalTest.java\n+++ b/functional/FunctionalTest.java\n\n@@ -3299,17 +3299,10 @@ public class FunctionalTest {\n         try (final InputStream is = new ContentInputStream(1 * KB)) {\n           client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n         }\n-        // Enable object legal hold.\n-        boolean expectedStatus = true;\n-        client.enableObjectLegalHold(bucketName, objectName, null);\n \n-        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n-        if (!isObjectLockEnabled) {\n-          throw new Exception(\n-              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n-                  + expectedStatus\n-                  + \", Got: \"\n-                  + isObjectLockEnabled);\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n         }\n         client.disableObjectLegalHold(bucketName, objectName, null);\n         mintSuccessLog(\n"}}, {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "url": "https://github.com/minio/minio-java/commit/b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "message": "Remove comments in FunctionalTest", "committedDate": "2020-04-19T01:34:09Z", "type": "commit"}, {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "url": "https://github.com/minio/minio-java/commit/b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "message": "Remove comments in FunctionalTest", "committedDate": "2020-04-19T01:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411509738", "bodyText": "After setting enableObjectLegalHold we should attempt deleting the object and confirm that fails.", "author": "nitisht", "createdAt": "2020-04-20T16:16:14Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxODQ2OA==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411518468", "bodyText": "This was earlier implemented, but removed as of now as it works with MinIO, but when ran against S3 with versionId as null it succeeds. (deleted the object).\nYou need specific object version to fail thus it was removed.", "author": "sinhaashish", "createdAt": "2020-04-20T16:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNjA5Mg==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411526092", "bodyText": "IMO we can target to validate MinIO implementation", "author": "nitisht", "createdAt": "2020-04-20T16:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTA5Nw==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511097", "bodyText": "Here after disableObjectLegalHold we can attempt a delete and confirm that works", "author": "nitisht", "createdAt": "2020-04-20T16:18:07Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511769", "bodyText": "Here also we can attempt an upload and confirm the uploaded object can't be deleted.", "author": "nitisht", "createdAt": "2020-04-20T16:19:01Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+        client.setDefaultRetention(bucketName, config);", "originalCommit": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNzAwNQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411517005", "bodyText": "If we do so, we can't do clean up of the test.", "author": "balamurugana", "createdAt": "2020-04-20T16:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMzk2MQ==", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411523961", "bodyText": "IMO Testing the MinIO Server's behaviour is more important, since this test will become part of Mint. It will be used to validate MinIO Server behaviour. We generally test against Play or Local MinIO instances - in both cases cleanup is not that important", "author": "nitisht", "createdAt": "2020-04-20T16:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}], "type": "inlineReview", "revised_code": null}]}