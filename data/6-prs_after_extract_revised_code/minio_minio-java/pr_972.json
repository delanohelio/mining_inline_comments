{"pr_number": 972, "pr_title": "Add arg builder support to putObject api", "pr_createdAt": "2020-06-07T03:18:35Z", "pr_url": "https://github.com/minio/minio-java/pull/972", "timeline": [{"oid": "5821ec5e6792fc5ce7587491bb34f0905b7985fb", "url": "https://github.com/minio/minio-java/commit/5821ec5e6792fc5ce7587491bb34f0905b7985fb", "message": "add arg builder support to putObject API", "committedDate": "2020-06-07T03:35:39Z", "type": "forcePushed"}, {"oid": "b99a9312af9ff673775e73a631d72ddbf5a4b8b0", "url": "https://github.com/minio/minio-java/commit/b99a9312af9ff673775e73a631d72ddbf5a4b8b0", "message": "add arg builder support to putObject API", "committedDate": "2020-06-07T04:41:44Z", "type": "forcePushed"}, {"oid": "7404ee36cffd4151f924157cd10aeabfee782448", "url": "https://github.com/minio/minio-java/commit/7404ee36cffd4151f924157cd10aeabfee782448", "message": "add arg builder support to putObject API", "committedDate": "2020-06-07T04:42:28Z", "type": "forcePushed"}, {"oid": "5bab6f0b4bd871821700678624d4d19b6407aa23", "url": "https://github.com/minio/minio-java/commit/5bab6f0b4bd871821700678624d4d19b6407aa23", "message": "add arg builder support to putObject API", "committedDate": "2020-06-07T17:00:17Z", "type": "forcePushed"}, {"oid": "57adf496c6d5bc02d5dba4af282e432e9e9fcabf", "url": "https://github.com/minio/minio-java/commit/57adf496c6d5bc02d5dba4af282e432e9e9fcabf", "message": "add arg builder support to putObject API", "committedDate": "2020-06-07T17:49:39Z", "type": "forcePushed"}, {"oid": "428d437d1570bb949ee6ce503066c86159bc8426", "url": "https://github.com/minio/minio-java/commit/428d437d1570bb949ee6ce503066c86159bc8426", "message": "add arg builder support to putObject API", "committedDate": "2020-06-08T09:38:36Z", "type": "forcePushed"}, {"oid": "d7d911f79667d080cc311f4b1631a23c76398fe3", "url": "https://github.com/minio/minio-java/commit/d7d911f79667d080cc311f4b1631a23c76398fe3", "message": "add arg builder support to putObject API", "committedDate": "2020-06-08T09:46:55Z", "type": "forcePushed"}, {"oid": "976d8207675998ef1d3c13728447f4c6cb98c8ca", "url": "https://github.com/minio/minio-java/commit/976d8207675998ef1d3c13728447f4c6cb98c8ca", "message": "add arg builder support to putObject API", "committedDate": "2020-06-09T05:05:07Z", "type": "forcePushed"}, {"oid": "65b8e90f067d694a2f6c01e619db989bebcaa36b", "url": "https://github.com/minio/minio-java/commit/65b8e90f067d694a2f6c01e619db989bebcaa36b", "message": "add arg builder support to putObject API", "committedDate": "2020-06-09T12:26:40Z", "type": "forcePushed"}, {"oid": "84fdeaea09b65686db8f2658867d24b082a69668", "url": "https://github.com/minio/minio-java/commit/84fdeaea09b65686db8f2658867d24b082a69668", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T04:37:20Z", "type": "forcePushed"}, {"oid": "59beec70fb3242529d92d3d1a7ca44cffe9a7e04", "url": "https://github.com/minio/minio-java/commit/59beec70fb3242529d92d3d1a7ca44cffe9a7e04", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T09:15:28Z", "type": "forcePushed"}, {"oid": "8f9e0743fb753b251ed9b0e7d9ddb40e749be649", "url": "https://github.com/minio/minio-java/commit/8f9e0743fb753b251ed9b0e7d9ddb40e749be649", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T10:24:15Z", "type": "forcePushed"}, {"oid": "8c4ccd426255af2b224f97972257db0efab55144", "url": "https://github.com/minio/minio-java/commit/8c4ccd426255af2b224f97972257db0efab55144", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T14:53:56Z", "type": "forcePushed"}, {"oid": "8a911bebcb4a75ab40c527586f1919680d792467", "url": "https://github.com/minio/minio-java/commit/8a911bebcb4a75ab40c527586f1919680d792467", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T15:21:00Z", "type": "forcePushed"}, {"oid": "59710fa42a9eea666bec63a30e74e073dcdb5b68", "url": "https://github.com/minio/minio-java/commit/59710fa42a9eea666bec63a30e74e073dcdb5b68", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T17:47:37Z", "type": "forcePushed"}, {"oid": "e11fd07c1e6bef5e2f13d3f8fe4875be25296ce5", "url": "https://github.com/minio/minio-java/commit/e11fd07c1e6bef5e2f13d3f8fe4875be25296ce5", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T17:55:33Z", "type": "forcePushed"}, {"oid": "38f97886da4df176d04993cac9af53db789d334d", "url": "https://github.com/minio/minio-java/commit/38f97886da4df176d04993cac9af53db789d334d", "message": "add arg builder support to putObject API", "committedDate": "2020-06-10T18:00:04Z", "type": "forcePushed"}, {"oid": "8e546669711a28f85cc04091d1bd9fba3cc054ce", "url": "https://github.com/minio/minio-java/commit/8e546669711a28f85cc04091d1bd9fba3cc054ce", "message": "add arg builder support to putObject API", "committedDate": "2020-06-11T02:08:38Z", "type": "forcePushed"}, {"oid": "a9c0796ad38246b026415327c1f8cb91480f11ca", "url": "https://github.com/minio/minio-java/commit/a9c0796ad38246b026415327c1f8cb91480f11ca", "message": "add arg builder support to putObject API", "committedDate": "2020-06-11T02:17:56Z", "type": "forcePushed"}, {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "url": "https://github.com/minio/minio-java/commit/98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "message": "add arg builder support to putObject API", "committedDate": "2020-06-11T02:21:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5ODgyNw==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438698827", "bodyText": "Can be moved into a separate method, say validatePartSize\nand/or\na method that can validate the given combination of partSize and objectSize", "author": "anjalshireesh", "createdAt": "2020-06-11T10:46:17Z", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "074ea7caff45b4004ca562d9e337e747ced6c167", "chunk": "diff --git a/api/src/main/java/io/minio/PutObjectArgs.java b/api/src/main/java/io/minio/PutObjectArgs.java\nindex ac51f55f..d3415220 100644\n--- a/api/src/main/java/io/minio/PutObjectArgs.java\n+++ b/api/src/main/java/io/minio/PutObjectArgs.java\n\n@@ -71,23 +71,7 @@ public class PutObjectArgs extends ObjectWriteArgs {\n       validateNotNull(args.stream, \"stream\");\n     }\n \n-    /**\n-     * Sets stream to upload. Two ways to provide object/part sizes.\n-     *\n-     * <ul>\n-     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n-     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n-     *       to control memory usage and no. of parts in upload.\n-     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n-     * </ul>\n-     *\n-     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n-     */\n-    public Builder stream(InputStream stream, long objectSize, long partSize) {\n-      validateNotNull(stream, \"stream\");\n-\n-      int partCount = -1;\n-\n+    private void validateSizes(long objectSize, long partSize) {\n       if (partSize > 0) {\n         if (partSize < MIN_MULTIPART_SIZE) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNDM3MQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438724371", "bodyText": "The part size calculation logic (including part from the if block) can be moved to a separate method, with a comment explaining the logic.", "author": "anjalshireesh", "createdAt": "2020-06-11T11:43:35Z", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "074ea7caff45b4004ca562d9e337e747ced6c167", "chunk": "diff --git a/api/src/main/java/io/minio/PutObjectArgs.java b/api/src/main/java/io/minio/PutObjectArgs.java\nindex ac51f55f..d3415220 100644\n--- a/api/src/main/java/io/minio/PutObjectArgs.java\n+++ b/api/src/main/java/io/minio/PutObjectArgs.java\n\n@@ -71,23 +71,7 @@ public class PutObjectArgs extends ObjectWriteArgs {\n       validateNotNull(args.stream, \"stream\");\n     }\n \n-    /**\n-     * Sets stream to upload. Two ways to provide object/part sizes.\n-     *\n-     * <ul>\n-     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n-     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n-     *       to control memory usage and no. of parts in upload.\n-     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n-     * </ul>\n-     *\n-     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n-     */\n-    public Builder stream(InputStream stream, long objectSize, long partSize) {\n-      validateNotNull(stream, \"stream\");\n-\n-      int partCount = -1;\n-\n+    private void validateSizes(long objectSize, long partSize) {\n       if (partSize > 0) {\n         if (partSize < MIN_MULTIPART_SIZE) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjIwMA==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438726200", "bodyText": "In what scenario be pSize <= 0 at this place?", "author": "anjalshireesh", "createdAt": "2020-06-11T11:47:28Z", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;\n+\n+          if (pSize > 0) {\n+            partCount = (int) Math.ceil(objectSize / pSize);\n+          } else {\n+            partCount = 1;\n+          }", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MTg0MQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439451841", "bodyText": "In case of input stream size is unknown, there is possibility that user could pass wrong  partSize <= 0", "author": "balamurugana", "createdAt": "2020-06-12T14:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "074ea7caff45b4004ca562d9e337e747ced6c167", "chunk": "diff --git a/api/src/main/java/io/minio/PutObjectArgs.java b/api/src/main/java/io/minio/PutObjectArgs.java\nindex ac51f55f..d3415220 100644\n--- a/api/src/main/java/io/minio/PutObjectArgs.java\n+++ b/api/src/main/java/io/minio/PutObjectArgs.java\n\n@@ -71,23 +71,7 @@ public class PutObjectArgs extends ObjectWriteArgs {\n       validateNotNull(args.stream, \"stream\");\n     }\n \n-    /**\n-     * Sets stream to upload. Two ways to provide object/part sizes.\n-     *\n-     * <ul>\n-     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n-     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n-     *       to control memory usage and no. of parts in upload.\n-     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n-     * </ul>\n-     *\n-     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n-     */\n-    public Builder stream(InputStream stream, long objectSize, long partSize) {\n-      validateNotNull(stream, \"stream\");\n-\n-      int partCount = -1;\n-\n+    private void validateSizes(long objectSize, long partSize) {\n       if (partSize > 0) {\n         if (partSize < MIN_MULTIPART_SIZE) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNzc0NQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438727745", "bodyText": "These two variables may not be required..", "author": "anjalshireesh", "createdAt": "2020-06-11T11:50:52Z", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;\n+\n+          if (pSize > 0) {\n+            partCount = (int) Math.ceil(objectSize / pSize);\n+          } else {\n+            partCount = 1;\n+          }\n+        }\n+      } else if (partSize <= 0) {\n+        throw new IllegalArgumentException(\n+            \"valid part size must be provided when object size is unknown\");\n+      }\n+\n+      final BufferedInputStream bis =\n+          (stream instanceof BufferedInputStream)\n+              ? (BufferedInputStream) stream\n+              : new BufferedInputStream(stream);\n+      final long finalPartSize = partSize;\n+      final int finalPartCount = partCount;", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "074ea7caff45b4004ca562d9e337e747ced6c167", "chunk": "diff --git a/api/src/main/java/io/minio/PutObjectArgs.java b/api/src/main/java/io/minio/PutObjectArgs.java\nindex ac51f55f..d3415220 100644\n--- a/api/src/main/java/io/minio/PutObjectArgs.java\n+++ b/api/src/main/java/io/minio/PutObjectArgs.java\n\n@@ -71,23 +71,7 @@ public class PutObjectArgs extends ObjectWriteArgs {\n       validateNotNull(args.stream, \"stream\");\n     }\n \n-    /**\n-     * Sets stream to upload. Two ways to provide object/part sizes.\n-     *\n-     * <ul>\n-     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n-     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n-     *       to control memory usage and no. of parts in upload.\n-     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n-     * </ul>\n-     *\n-     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n-     */\n-    public Builder stream(InputStream stream, long objectSize, long partSize) {\n-      validateNotNull(stream, \"stream\");\n-\n-      int partCount = -1;\n-\n+    private void validateSizes(long objectSize, long partSize) {\n       if (partSize > 0) {\n         if (partSize < MIN_MULTIPART_SIZE) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTM4Mg==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438735382", "bodyText": "There's a lot of overlap with PutObjectArgs. Can this be extracted out into a common base class?", "author": "anjalshireesh", "createdAt": "2020-06-11T12:07:01Z", "path": "api/src/main/java/io/minio/UploadObjectArgs.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+/** Argument class of MinioClient.uploadObject(). */\n+public class UploadObjectArgs extends ObjectWriteArgs {", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3OTA1MA==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439479050", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-12T15:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "678eaca2ec4497602ff8603c71214b40c397d01b", "chunk": "diff --git a/api/src/main/java/io/minio/UploadObjectArgs.java b/api/src/main/java/io/minio/UploadObjectArgs.java\nindex ca54d568..91a14dd5 100644\n--- a/api/src/main/java/io/minio/UploadObjectArgs.java\n+++ b/api/src/main/java/io/minio/UploadObjectArgs.java\n\n@@ -21,43 +21,24 @@ import java.nio.file.Files;\n import java.nio.file.Paths;\n \n /** Argument class of MinioClient.uploadObject(). */\n-public class UploadObjectArgs extends ObjectWriteArgs {\n+public class UploadObjectArgs extends PutObjectBaseArgs {\n   private String filename;\n-  private long objectSize;\n-  private long partSize;\n-  private int partCount;\n-  private String contentType;\n \n   public String filename() {\n     return filename;\n   }\n \n-  public long objectSize() {\n-    return objectSize;\n-  }\n-\n-  public long partSize() {\n-    return partSize;\n-  }\n-\n-  public int partCount() {\n-    return partCount;\n-  }\n-\n   /**\n    * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n    * probed content type of file (or) default \"application/octet-stream\".\n    */\n   public String contentType() throws IOException {\n+    String contentType = super.contentType();\n     if (contentType != null) {\n       return contentType;\n     }\n \n-    if (this.headers().containsKey(\"Content-Type\")) {\n-      return this.headers().get(\"Content-Type\").iterator().next();\n-    }\n-\n-    String contentType = Files.probeContentType(Paths.get(filename));\n+    contentType = Files.probeContentType(Paths.get(filename));\n     return (contentType != null && !contentType.isEmpty())\n         ? contentType\n         : \"application/octet-stream\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDgxMg==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438740812", "bodyText": "Comment can indicate ssec usage", "author": "anjalshireesh", "createdAt": "2020-06-11T12:18:23Z", "path": "examples/DownloadObject.java", "diffHunk": "@@ -37,14 +40,33 @@ public static void main(String[] args)\n       // MinioClient minioClient = new MinioClient(\"https://s3.amazonaws.com\", \"YOUR-ACCESSKEYID\",\n       //                                           \"YOUR-SECRETACCESSKEY\");\n \n-      // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n-      minioClient.downloadObject(\n-          DownloadObjectArgs.builder()\n-              .bucket(\"my-bucketname\")\n-              .object(\"my-objectname\")\n-              .fileName(\"my-filename\")\n-              .build());\n-      System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      {\n+        // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n+        minioClient.downloadObject(\n+            DownloadObjectArgs.builder()\n+                .bucket(\"my-bucketname\")\n+                .object(\"my-objectname\")\n+                .filename(\"my-filename\")\n+                .build());\n+        System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      }\n+\n+      {\n+        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n+        keyGen.init(256);\n+        ServerSideEncryptionCustomerKey ssec =\n+            ServerSideEncryption.withCustomerKey(keyGen.generateKey());\n+\n+        // Download encrypted 'my-objectname' from 'my-bucketname' to 'my-filename'", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM3ODU1NA==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439378554", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-12T12:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "64ab64e8a41dc825f74e7ffd1a8f5f52b5c0276e", "chunk": "diff --git a/examples/DownloadObject.java b/examples/DownloadObject.java\nindex 4c5ec070..0eb30095 100644\n--- a/examples/DownloadObject.java\n+++ b/examples/DownloadObject.java\n\n@@ -57,7 +57,7 @@ public class DownloadObject {\n         ServerSideEncryptionCustomerKey ssec =\n             ServerSideEncryption.withCustomerKey(keyGen.generateKey());\n \n-        // Download encrypted 'my-objectname' from 'my-bucketname' to 'my-filename'\n+        // Download SSE-C encrypted 'my-objectname' from 'my-bucketname' to 'my-filename'\n         minioClient.downloadObject(\n             DownloadObjectArgs.builder()\n                 .bucket(\"my-bucketname\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2ODI3NQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438768275", "bodyText": "Some of the validations here are the same as those in PutObjectArgs. Might be a good idea to put them in a common method and call from both places.", "author": "anjalshireesh", "createdAt": "2020-06-11T13:09:07Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2587,7 +2588,7 @@ public void composeObject(\n         size -= src.offset();\n       }\n \n-      if (size < PutObjectOptions.MIN_MULTIPART_SIZE\n+      if (size < ObjectWriteArgs.MIN_MULTIPART_SIZE", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0OTkyNw==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439449927", "bodyText": "This will be taken care when we add arg buildet to composeObject()", "author": "balamurugana", "createdAt": "2020-06-12T14:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2ODI3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDY5OQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438780699", "bodyText": "Maybe just log/print the exception so that it can be debugged..", "author": "anjalshireesh", "createdAt": "2020-06-11T13:29:17Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7202,31 +7309,91 @@ protected void abortMultipartUpload(String bucketName, String objectName, String\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   protected void completeMultipartUpload(\n       String bucketName, String objectName, String uploadId, Part[] parts)\n       throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n           InsufficientDataException, IOException, InvalidKeyException, ServerException,\n           XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n-    Map<String, String> queryParamMap = new HashMap<>();\n-    queryParamMap.put(UPLOAD_ID, uploadId);\n-    CompleteMultipartUpload completeManifest = new CompleteMultipartUpload(parts);\n-    Response response = executePost(bucketName, objectName, null, queryParamMap, completeManifest);\n-    String bodyContent = \"\";\n-    try (ResponseBody body = response.body()) {\n-      bodyContent = new String(body.bytes(), StandardCharsets.UTF_8);\n-      bodyContent = bodyContent.trim();\n+    completeMultipartUpload(bucketName, null, objectName, uploadId, parts, null, null);\n+  }\n+\n+  /**\n+   * Do <a\n+   * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload\n+   * S3 API</a>.\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param region Region of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param uploadId Upload ID.\n+   * @param parts List of parts.\n+   * @param extraHeaders Extra headers.\n+   * @param extraQueryParams Extra query parameters.\n+   * @return {@link ObjectWriteReply} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  protected ObjectWriteReply completeMultipartUpload(\n+      String bucketName,\n+      String region,\n+      String objectName,\n+      String uploadId,\n+      Part[] parts,\n+      Multimap<String, String> extraHeaders,\n+      Multimap<String, String> extraQueryParams)\n+      throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n+          InsufficientDataException, IOException, InvalidKeyException, ServerException,\n+          XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n+    Multimap<String, String> queryParams = HashMultimap.create();\n+    if (extraQueryParams != null) {\n+      queryParams.putAll(extraQueryParams);\n     }\n+    queryParams.put(UPLOAD_ID, uploadId);\n \n-    // Handle if body contains error.\n-    if (!bodyContent.isEmpty()) {\n-      try {\n-        if (Xml.validate(ErrorResponse.class, bodyContent)) {\n-          ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n-          throw new ErrorResponseException(errorResponse, response);\n+    try (Response response =\n+        execute(\n+            Method.POST,\n+            bucketName,\n+            objectName,\n+            (region != null) ? region : getRegion(bucketName),\n+            extraHeaders,\n+            queryParams,\n+            new CompleteMultipartUpload(parts),\n+            0)) {\n+      String etag = null;\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          if (Xml.validate(ErrorResponse.class, bodyContent)) {\n+            ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n+            throw new ErrorResponseException(errorResponse, response);\n+          }\n+        } catch (XmlParserException e) {\n+          // As it is not <Error> message, ignore this exception", "originalCommit": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5NTQ0MQ==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439395441", "bodyText": "done", "author": "balamurugana", "createdAt": "2020-06-12T12:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "64ab64e8a41dc825f74e7ffd1a8f5f52b5c0276e", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex 9cb9f362..9fdf2dff 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -7381,7 +7471,7 @@ public class MinioClient {\n             throw new ErrorResponseException(errorResponse, response);\n           }\n         } catch (XmlParserException e) {\n-          // As it is not <Error> message, ignore this exception\n+          // As it is not <Error> message, fall-back to parse CompleteMultipartUploadOutput XML.\n         }\n \n         try {\n"}}, {"oid": "074ea7caff45b4004ca562d9e337e747ced6c167", "url": "https://github.com/minio/minio-java/commit/074ea7caff45b4004ca562d9e337e747ced6c167", "message": "avoid nested 'if' in PutObjectArgs.Builder.partInfo()", "committedDate": "2020-06-12T11:45:10Z", "type": "forcePushed"}, {"oid": "0d57415342b17038025a869e737303b30c656352", "url": "https://github.com/minio/minio-java/commit/0d57415342b17038025a869e737303b30c656352", "message": "add arg builder support to putObject API", "committedDate": "2020-06-14T04:42:21Z", "type": "commit"}, {"oid": "90406d02030a970c721a0cc4a177b69aa2c2e6fd", "url": "https://github.com/minio/minio-java/commit/90406d02030a970c721a0cc4a177b69aa2c2e6fd", "message": "refactoring", "committedDate": "2020-06-14T04:42:27Z", "type": "commit"}, {"oid": "aa9d6e42f98fb51d931a0c67b9cd894c1c1750c4", "url": "https://github.com/minio/minio-java/commit/aa9d6e42f98fb51d931a0c67b9cd894c1c1750c4", "message": "avoid nested 'if' in PutObjectArgs.Builder.partInfo()", "committedDate": "2020-06-14T04:42:27Z", "type": "commit"}, {"oid": "64ab64e8a41dc825f74e7ffd1a8f5f52b5c0276e", "url": "https://github.com/minio/minio-java/commit/64ab64e8a41dc825f74e7ffd1a8f5f52b5c0276e", "message": "address review comments", "committedDate": "2020-06-14T04:42:27Z", "type": "commit"}, {"oid": "225d8e2d87126e2e31d78c0ed45939b469bdd6ee", "url": "https://github.com/minio/minio-java/commit/225d8e2d87126e2e31d78c0ed45939b469bdd6ee", "message": "rename Reply to Response", "committedDate": "2020-06-14T04:42:27Z", "type": "commit"}, {"oid": "678eaca2ec4497602ff8603c71214b40c397d01b", "url": "https://github.com/minio/minio-java/commit/678eaca2ec4497602ff8603c71214b40c397d01b", "message": "move common code of PutObjectArgs and UploadObjectArgs", "committedDate": "2020-06-14T04:42:27Z", "type": "commit"}, {"oid": "95d3b82081b12d355c1ed641174b93a2d95f432d", "url": "https://github.com/minio/minio-java/commit/95d3b82081b12d355c1ed641174b93a2d95f432d", "message": "simplify functional tests", "committedDate": "2020-06-14T04:42:32Z", "type": "forcePushed"}, {"oid": "70bce061cf1c4c70ca17c0a5794cb8b143783f54", "url": "https://github.com/minio/minio-java/commit/70bce061cf1c4c70ca17c0a5794cb8b143783f54", "message": "simplify functional tests", "committedDate": "2020-06-14T08:49:01Z", "type": "forcePushed"}, {"oid": "e414f8eab1174acea716ee3bef55d128bb5f2640", "url": "https://github.com/minio/minio-java/commit/e414f8eab1174acea716ee3bef55d128bb5f2640", "message": "simplify functional tests", "committedDate": "2020-06-15T03:22:57Z", "type": "commit"}, {"oid": "e414f8eab1174acea716ee3bef55d128bb5f2640", "url": "https://github.com/minio/minio-java/commit/e414f8eab1174acea716ee3bef55d128bb5f2640", "message": "simplify functional tests", "committedDate": "2020-06-15T03:22:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjQzNA==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r440132434", "bodyText": "Why is ssec not used ?", "author": "sinhaashish", "createdAt": "2020-06-15T12:14:32Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5053,47 +5074,21 @@ private void putObject(\n    * @throws IOException thrown to indicate I/O error on S3 operation.\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n+   * @deprecated use {@link #uploadObject(UploadObjectArgs)}\n    */\n+  @Deprecated\n   public void putObject(", "originalCommit": "e414f8eab1174acea716ee3bef55d128bb5f2640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MDYwMA==", "url": "https://github.com/minio/minio-java/pull/972#discussion_r440170600", "bodyText": "Oops! Missed it. Fixing now.", "author": "balamurugana", "createdAt": "2020-06-15T13:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjQzNA=="}], "type": "inlineReview", "revised_code": {"commit": "e6c0d22e6bf49751a5175ecef6edab5f98a4c289", "chunk": "diff --git a/api/src/main/java/io/minio/MinioClient.java b/api/src/main/java/io/minio/MinioClient.java\nindex e48ea89c..becf0307 100755\n--- a/api/src/main/java/io/minio/MinioClient.java\n+++ b/api/src/main/java/io/minio/MinioClient.java\n\n@@ -5084,7 +5084,11 @@ public class MinioClient {\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n     UploadObjectArgs.Builder builder =\n-        UploadObjectArgs.builder().bucket(bucketName).object(objectName).filename(filename);\n+        UploadObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .filename(filename)\n+            .sse(options.sse());\n     if (!options.contentType().equals(\"application/octet-stream\")) {\n       builder.contentType(options.contentType());\n     }\n"}}, {"oid": "e6c0d22e6bf49751a5175ecef6edab5f98a4c289", "url": "https://github.com/minio/minio-java/commit/e6c0d22e6bf49751a5175ecef6edab5f98a4c289", "message": "fixed review comments", "committedDate": "2020-06-15T14:11:19Z", "type": "commit"}, {"oid": "60931622bc3fa519008c1dcdcf1018eeee191f84", "url": "https://github.com/minio/minio-java/commit/60931622bc3fa519008c1dcdcf1018eeee191f84", "message": "handle optional argument in putObject()", "committedDate": "2020-06-16T11:33:27Z", "type": "commit"}, {"oid": "60931622bc3fa519008c1dcdcf1018eeee191f84", "url": "https://github.com/minio/minio-java/commit/60931622bc3fa519008c1dcdcf1018eeee191f84", "message": "handle optional argument in putObject()", "committedDate": "2020-06-16T11:33:27Z", "type": "forcePushed"}]}